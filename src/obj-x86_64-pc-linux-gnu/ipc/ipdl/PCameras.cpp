//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/camera/PCameras.h"
#include "mozilla/camera/PCamerasParent.h"
#include "mozilla/camera/PCamerasChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace camera {
namespace PCameras {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::camera::PCamerasParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::camera::PCamerasChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_DeliverFrame(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DeliverFrame__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DeviceChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DeviceChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReplyNumberOfCaptureDevices(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplyNumberOfCaptureDevices__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReplyNumberOfCapabilities(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplyNumberOfCapabilities__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReplyAllocateCaptureDevice(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplyAllocateCaptureDevice__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReplyGetCaptureCapability(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplyGetCaptureCapability__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReplyGetCaptureDevice(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplyGetCaptureDevice__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReplyFailure(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplyFailure__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReplySuccess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplySuccess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NumberOfCaptureDevices(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NumberOfCaptureDevices__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NumberOfCapabilities(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NumberOfCapabilities__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetCaptureCapability(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetCaptureCapability__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetCaptureDevice(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetCaptureDevice__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AllocateCaptureDevice(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AllocateCaptureDevice__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReleaseCaptureDevice(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReleaseCaptureDevice__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_StartCapture(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StartCapture__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FocusOnSelectedSource(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FocusOnSelectedSource__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_StopCapture(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StopCapture__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReleaseFrame(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReleaseFrame__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AllDone(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AllDone__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_EnsureInitialized(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EnsureInitialized__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PCameras
} // namespace camera
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct VideoCaptureCapability|
//
namespace mozilla {
namespace camera {
} // namespace camera
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::camera::VideoCaptureCapability>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).width());
    // Sentinel = 'width'
    (aMsg)->WriteSentinel(108528161);
    WriteIPDLParam(aMsg, aActor, (aVar).height());
    // Sentinel = 'height'
    (aMsg)->WriteSentinel(143393402);
    WriteIPDLParam(aMsg, aActor, (aVar).maxFPS());
    // Sentinel = 'maxFPS'
    (aMsg)->WriteSentinel(136184368);
    WriteIPDLParam(aMsg, aActor, (aVar).videoType());
    // Sentinel = 'videoType'
    (aMsg)->WriteSentinel(314311610);
    WriteIPDLParam(aMsg, aActor, (aVar).interlaced());
    // Sentinel = 'interlaced'
    (aMsg)->WriteSentinel(386401308);
}

auto IPDLParamTraits<mozilla::camera::VideoCaptureCapability>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->width())))))) {
        aActor->FatalError("Error deserializing 'width' (int) member of 'VideoCaptureCapability'");
        return false;
    }
    // Sentinel = 'width'
    if ((!((aMsg)->ReadSentinel(aIter, 108528161)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'width' (int) member of 'VideoCaptureCapability'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->height())))))) {
        aActor->FatalError("Error deserializing 'height' (int) member of 'VideoCaptureCapability'");
        return false;
    }
    // Sentinel = 'height'
    if ((!((aMsg)->ReadSentinel(aIter, 143393402)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'height' (int) member of 'VideoCaptureCapability'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->maxFPS())))))) {
        aActor->FatalError("Error deserializing 'maxFPS' (int) member of 'VideoCaptureCapability'");
        return false;
    }
    // Sentinel = 'maxFPS'
    if ((!((aMsg)->ReadSentinel(aIter, 136184368)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'maxFPS' (int) member of 'VideoCaptureCapability'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->videoType())))))) {
        aActor->FatalError("Error deserializing 'videoType' (int) member of 'VideoCaptureCapability'");
        return false;
    }
    // Sentinel = 'videoType'
    if ((!((aMsg)->ReadSentinel(aIter, 314311610)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'videoType' (int) member of 'VideoCaptureCapability'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->interlaced())))))) {
        aActor->FatalError("Error deserializing 'interlaced' (bool) member of 'VideoCaptureCapability'");
        return false;
    }
    // Sentinel = 'interlaced'
    if ((!((aMsg)->ReadSentinel(aIter, 386401308)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'interlaced' (bool) member of 'VideoCaptureCapability'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct VideoFrameProperties|
//
namespace mozilla {
namespace camera {
auto VideoFrameProperties::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(VideoFrameProperties, renderTimeMs_) - offsetof(VideoFrameProperties, ntpTimeMs_)) == 8,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(VideoFrameProperties, timeStamp_) - offsetof(VideoFrameProperties, bufferSize_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace camera
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::camera::VideoFrameProperties>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).rotation());
    // Sentinel = 'rotation'
    (aMsg)->WriteSentinel(261423985);
    WriteIPDLParam(aMsg, aActor, (aVar).yAllocatedSize());
    // Sentinel = 'yAllocatedSize'
    (aMsg)->WriteSentinel(702809502);
    WriteIPDLParam(aMsg, aActor, (aVar).uAllocatedSize());
    // Sentinel = 'uAllocatedSize'
    (aMsg)->WriteSentinel(699139482);
    WriteIPDLParam(aMsg, aActor, (aVar).vAllocatedSize());
    // Sentinel = 'vAllocatedSize'
    (aMsg)->WriteSentinel(700056987);
    WriteIPDLParam(aMsg, aActor, (aVar).width());
    // Sentinel = 'width'
    (aMsg)->WriteSentinel(108528161);
    WriteIPDLParam(aMsg, aActor, (aVar).height());
    // Sentinel = 'height'
    (aMsg)->WriteSentinel(143393402);
    WriteIPDLParam(aMsg, aActor, (aVar).yStride());
    // Sentinel = 'yStride'
    (aMsg)->WriteSentinel(196870885);
    WriteIPDLParam(aMsg, aActor, (aVar).uStride());
    // Sentinel = 'uStride'
    (aMsg)->WriteSentinel(195035873);
    WriteIPDLParam(aMsg, aActor, (aVar).vStride());
    // Sentinel = 'vStride'
    (aMsg)->WriteSentinel(195494626);
    (aMsg)->WriteBytes((&((aVar).ntpTimeMs())), 16);
    // Sentinel = 'ntpTimeMs | renderTimeMs'
    (aMsg)->WriteSentinel(1930168621);
    (aMsg)->WriteBytes((&((aVar).bufferSize())), 8);
    // Sentinel = 'bufferSize | timeStamp'
    (aMsg)->WriteSentinel(1645873286);
}

auto IPDLParamTraits<mozilla::camera::VideoFrameProperties>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rotation())))))) {
        aActor->FatalError("Error deserializing 'rotation' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'rotation'
    if ((!((aMsg)->ReadSentinel(aIter, 261423985)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rotation' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->yAllocatedSize())))))) {
        aActor->FatalError("Error deserializing 'yAllocatedSize' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'yAllocatedSize'
    if ((!((aMsg)->ReadSentinel(aIter, 702809502)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'yAllocatedSize' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uAllocatedSize())))))) {
        aActor->FatalError("Error deserializing 'uAllocatedSize' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'uAllocatedSize'
    if ((!((aMsg)->ReadSentinel(aIter, 699139482)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uAllocatedSize' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->vAllocatedSize())))))) {
        aActor->FatalError("Error deserializing 'vAllocatedSize' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'vAllocatedSize'
    if ((!((aMsg)->ReadSentinel(aIter, 700056987)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'vAllocatedSize' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->width())))))) {
        aActor->FatalError("Error deserializing 'width' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'width'
    if ((!((aMsg)->ReadSentinel(aIter, 108528161)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'width' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->height())))))) {
        aActor->FatalError("Error deserializing 'height' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'height'
    if ((!((aMsg)->ReadSentinel(aIter, 143393402)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'height' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->yStride())))))) {
        aActor->FatalError("Error deserializing 'yStride' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'yStride'
    if ((!((aMsg)->ReadSentinel(aIter, 196870885)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'yStride' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uStride())))))) {
        aActor->FatalError("Error deserializing 'uStride' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'uStride'
    if ((!((aMsg)->ReadSentinel(aIter, 195035873)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uStride' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->vStride())))))) {
        aActor->FatalError("Error deserializing 'vStride' (int) member of 'VideoFrameProperties'");
        return false;
    }
    // Sentinel = 'vStride'
    if ((!((aMsg)->ReadSentinel(aIter, 195494626)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'vStride' (int) member of 'VideoFrameProperties'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->ntpTimeMs())), 16)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'ntpTimeMs | renderTimeMs'
    if ((!((aMsg)->ReadSentinel(aIter, 1930168621)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->bufferSize())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'bufferSize | timeStamp'
    if ((!((aMsg)->ReadSentinel(aIter, 1645873286)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
