//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/hal_sandbox/PHalParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/ReferrerInfoUtils.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PBrowserParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace hal_sandbox {


auto PHalParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PHalParent::PHalParent() :
    mozilla::ipc::IProtocol(PHalMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PHalParent);
}

PHalParent::~PHalParent()
{
    MOZ_COUNT_DTOR(PHalParent);
}

auto PHalParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PHalParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHalParent::SendNotifyBatteryChange(const BatteryInformation& aBatteryInfo) -> bool
{
    IPC::Message* msg__ = PHal::Msg_NotifyBatteryChange(Id());

    WriteIPDLParam(msg__, this, aBatteryInfo);
    // Sentinel = 'aBatteryInfo'
    (msg__)->WriteSentinel(509674697);




    if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_NotifyBatteryChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalParent::SendNotifyNetworkChange(const NetworkInformation& aNetworkInfo) -> bool
{
    IPC::Message* msg__ = PHal::Msg_NotifyNetworkChange(Id());

    WriteIPDLParam(msg__, this, aNetworkInfo);
    // Sentinel = 'aNetworkInfo'
    (msg__)->WriteSentinel(522519768);




    if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_NotifyNetworkChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalParent::SendNotifyWakeLockChange(const WakeLockInformation& aWakeLockInfo) -> bool
{
    IPC::Message* msg__ = PHal::Msg_NotifyWakeLockChange(Id());

    WriteIPDLParam(msg__, this, aWakeLockInfo);
    // Sentinel = 'aWakeLockInfo'
    (msg__)->WriteSentinel(577701119);




    if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_NotifyWakeLockChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalParent::SendNotifyScreenConfigurationChange(const ScreenConfiguration& aScreenOrientation) -> bool
{
    IPC::Message* msg__ = PHal::Msg_NotifyScreenConfigurationChange(Id());

    WriteIPDLParam(msg__, this, aScreenOrientation);
    // Sentinel = 'aScreenOrientation'
    (msg__)->WriteSentinel(1136396110);




    if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_NotifyScreenConfigurationChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalParent::SendNotifySensorChange(const SensorData& aSensorData) -> bool
{
    IPC::Message* msg__ = PHal::Msg_NotifySensorChange(Id());

    WriteIPDLParam(msg__, this, aSensorData);
    // Sentinel = 'aSensorData'
    (msg__)->WriteSentinel(434504790);




    if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_NotifySensorChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHalParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHalParent::OnMessageReceived(const Message& msg__) -> PHalParent::Result
{
    switch (msg__.type()) {
    case PHal::Msg_Vibrate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_Vibrate", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<uint32_t> pattern{};
            nsTArray<uint64_t> id{};
            PBrowserParent* browser{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pattern)))))) {
                FatalError("Error deserializing 'uint32_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'pattern'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200409855)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(browser)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!((*((&(browser))))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'browser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201130757)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvVibrate(std::move(pattern), std::move(id), browser)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_CancelVibrate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_CancelVibrate", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<uint64_t> id{};
            PBrowserParent* browser{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(browser)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!((*((&(browser))))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'browser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201130757)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvCancelVibrate(std::move(id), browser)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_EnableBatteryNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_EnableBatteryNotifications", OTHER);

            if ((!((this)->RecvEnableBatteryNotifications()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_DisableBatteryNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_DisableBatteryNotifications", OTHER);

            if ((!((this)->RecvDisableBatteryNotifications()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_EnableNetworkNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_EnableNetworkNotifications", OTHER);

            if ((!((this)->RecvEnableNetworkNotifications()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_DisableNetworkNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_DisableNetworkNotifications", OTHER);

            if ((!((this)->RecvDisableNetworkNotifications()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_ModifyWakeLock__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_ModifyWakeLock", OTHER);

            PickleIterator iter__{msg__};
            nsString aTopic{};
            WakeLockControl aLockAdjust{};
            WakeLockControl aHiddenAdjust{};
            uint64_t aProcessID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTopic)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aTopic'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137429601)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLockAdjust)))))) {
                FatalError("Error deserializing 'WakeLockControl'");
                return MsgValueError;
            }
            // Sentinel = 'aLockAdjust'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 418710614)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WakeLockControl'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHiddenAdjust)))))) {
                FatalError("Error deserializing 'WakeLockControl'");
                return MsgValueError;
            }
            // Sentinel = 'aHiddenAdjust'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 575538457)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WakeLockControl'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProcessID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aProcessID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 360907726)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvModifyWakeLock(std::move(aTopic), std::move(aLockAdjust), std::move(aHiddenAdjust), std::move(aProcessID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_EnableWakeLockNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_EnableWakeLockNotifications", OTHER);

            if ((!((this)->RecvEnableWakeLockNotifications()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_DisableWakeLockNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_DisableWakeLockNotifications", OTHER);

            if ((!((this)->RecvDisableWakeLockNotifications()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_EnableScreenConfigurationNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_EnableScreenConfigurationNotifications", OTHER);

            if ((!((this)->RecvEnableScreenConfigurationNotifications()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_DisableScreenConfigurationNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_DisableScreenConfigurationNotifications", OTHER);

            if ((!((this)->RecvDisableScreenConfigurationNotifications()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_UnlockScreenOrientation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_UnlockScreenOrientation", OTHER);

            if ((!((this)->RecvUnlockScreenOrientation()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_EnableSensorNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_EnableSensorNotifications", OTHER);

            PickleIterator iter__{msg__};
            SensorType aSensor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSensor)))))) {
                FatalError("Error deserializing 'SensorType'");
                return MsgValueError;
            }
            // Sentinel = 'aSensor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184156892)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SensorType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvEnableSensorNotifications(std::move(aSensor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_DisableSensorNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_DisableSensorNotifications", OTHER);

            PickleIterator iter__{msg__};
            SensorType aSensor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSensor)))))) {
                FatalError("Error deserializing 'SensorType'");
                return MsgValueError;
            }
            // Sentinel = 'aSensor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184156892)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SensorType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvDisableSensorNotifications(std::move(aSensor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PHalParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PHal'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PHal'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PHalMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHalParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHalParent::Result
{
    switch (msg__.type()) {
    case PHal::Msg_GetCurrentBatteryInformation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_GetCurrentBatteryInformation", OTHER);

            int32_t id__ = Id();
            BatteryInformation aBatteryInfo{};
            if ((!((this)->RecvGetCurrentBatteryInformation((&(aBatteryInfo)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHal::Reply_GetCurrentBatteryInformation(id__);

            WriteIPDLParam(reply__, this, aBatteryInfo);
            // Sentinel = 'aBatteryInfo'
            (reply__)->WriteSentinel(509674697);

            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHal::Msg_GetCurrentNetworkInformation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_GetCurrentNetworkInformation", OTHER);

            int32_t id__ = Id();
            NetworkInformation aNetworkInfo{};
            if ((!((this)->RecvGetCurrentNetworkInformation((&(aNetworkInfo)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHal::Reply_GetCurrentNetworkInformation(id__);

            WriteIPDLParam(reply__, this, aNetworkInfo);
            // Sentinel = 'aNetworkInfo'
            (reply__)->WriteSentinel(522519768);

            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHal::Msg_GetWakeLockInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_GetWakeLockInfo", OTHER);

            PickleIterator iter__{msg__};
            nsString aTopic{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTopic)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aTopic'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137429601)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            WakeLockInformation aWakeLockInfo{};
            if ((!((this)->RecvGetWakeLockInfo(std::move(aTopic), (&(aWakeLockInfo)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHal::Reply_GetWakeLockInfo(id__);

            WriteIPDLParam(reply__, this, aWakeLockInfo);
            // Sentinel = 'aWakeLockInfo'
            (reply__)->WriteSentinel(577701119);

            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHal::Msg_LockScreenOrientation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_LockScreenOrientation", OTHER);

            PickleIterator iter__{msg__};
            ScreenOrientation aOrientation{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOrientation)))))) {
                FatalError("Error deserializing 'ScreenOrientation'");
                return MsgValueError;
            }
            // Sentinel = 'aOrientation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 524289262)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenOrientation'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool allowed{};
            if ((!((this)->RecvLockScreenOrientation(std::move(aOrientation), (&(allowed)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHal::Reply_LockScreenOrientation(id__);

            WriteIPDLParam(reply__, this, allowed);
            // Sentinel = 'allowed'
            (reply__)->WriteSentinel(195101417);

            if (mozilla::ipc::LoggingEnabledFor("PHalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHalParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHalParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHalParent::ClearSubtree() -> void
{
}



} // namespace hal_sandbox
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::hal_sandbox::PHalParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::hal_sandbox::PHalParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHal", PHalMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::hal_sandbox::PHalParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
