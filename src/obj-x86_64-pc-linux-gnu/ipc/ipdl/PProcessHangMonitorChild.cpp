//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PProcessHangMonitorChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/TabMessageUtils.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PProcessHangMonitorChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PProcessHangMonitorChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PProcessHangMonitorChild::EnteredCxxStack() -> void
{
}

auto PProcessHangMonitorChild::ExitedCxxStack() -> void
{
}

auto PProcessHangMonitorChild::EnteredCall() -> void
{
}

auto PProcessHangMonitorChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PProcessHangMonitorChild::PProcessHangMonitorChild() :
    mozilla::ipc::IToplevelProtocol("PProcessHangMonitorChild", PProcessHangMonitorMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PProcessHangMonitorChild);
}

PProcessHangMonitorChild::~PProcessHangMonitorChild()
{
    MOZ_COUNT_DTOR(PProcessHangMonitorChild);
}

auto PProcessHangMonitorChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PProcessHangMonitorChild::SendHangEvidence(const HangData& data) -> bool
{
    IPC::Message* msg__ = PProcessHangMonitor::Msg_HangEvidence(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProcessHangMonitorChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_HangEvidence", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProcessHangMonitorChild::SendClearHang() -> bool
{
    IPC::Message* msg__ = PProcessHangMonitor::Msg_ClearHang(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProcessHangMonitorChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_ClearHang", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProcessHangMonitorChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PProcessHangMonitorChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PProcessHangMonitorChild::OnMessageReceived(const Message& msg__) -> PProcessHangMonitorChild::Result
{
    switch (msg__.type()) {
    case PProcessHangMonitor::Msg_TerminateScript__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProcessHangMonitorChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_TerminateScript", OTHER);

            PickleIterator iter__{msg__};
            bool aTerminateGlobal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTerminateGlobal)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aTerminateGlobal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 904463964)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvTerminateScript(std::move(aTerminateGlobal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProcessHangMonitor::Msg_BeginStartingDebugger__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProcessHangMonitorChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_BeginStartingDebugger", OTHER);

            if ((!((this)->RecvBeginStartingDebugger()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProcessHangMonitor::Msg_EndStartingDebugger__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProcessHangMonitorChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_EndStartingDebugger", OTHER);

            if ((!((this)->RecvEndStartingDebugger()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProcessHangMonitor::Msg_PaintWhileInterruptingJS__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProcessHangMonitorChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_PaintWhileInterruptingJS", OTHER);

            PickleIterator iter__{msg__};
            TabId tabId{};
            LayersObserverEpoch aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(tabId)))))) {
                FatalError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            // Sentinel = 'tabId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99156453)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvPaintWhileInterruptingJS(std::move(tabId), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProcessHangMonitor::Msg_CancelContentJSExecutionIfRunning__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProcessHangMonitorChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_CancelContentJSExecutionIfRunning", OTHER);

            PickleIterator iter__{msg__};
            TabId tabId{};
            NavigationType aNavigationType{};
            int32_t aNavigationIndex{};
            mozilla::Maybe<nsCString> aNavigationURI{};
            int32_t aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(tabId)))))) {
                FatalError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            // Sentinel = 'tabId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99156453)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNavigationType)))))) {
                FatalError("Error deserializing 'NavigationType'");
                return MsgValueError;
            }
            // Sentinel = 'aNavigationType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 799540756)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NavigationType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNavigationIndex)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNavigationIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 900531818)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNavigationURI)))))) {
                FatalError("Error deserializing 'nsCString?'");
                return MsgValueError;
            }
            // Sentinel = 'aNavigationURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 690095458)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvCancelContentJSExecutionIfRunning(std::move(tabId), std::move(aNavigationType), std::move(aNavigationIndex), std::move(aNavigationURI), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PProcessHangMonitorChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PProcessHangMonitorChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PProcessHangMonitorChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PProcessHangMonitorChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PProcessHangMonitorChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PProcessHangMonitorChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PProcessHangMonitorChild::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PProcessHangMonitorChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PProcessHangMonitorChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PProcessHangMonitor", PProcessHangMonitorMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PProcessHangMonitorChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
