//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPContentChild.h"
#include "GMPContentChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPVideoDecoderChild.h"
#include "mozilla/gmp/PGMPVideoEncoderChild.h"
#include "mozilla/gmp/PChromiumCDMChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PGMPContentChild::RecvPGMPVideoDecoderConstructor(
        PGMPVideoDecoderChild* actor,
        const uint32_t& aDecryptorId) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PGMPContentChild::RecvPGMPVideoEncoderConstructor(PGMPVideoEncoderChild* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PGMPContentChild::RecvPChromiumCDMConstructor(PChromiumCDMChild* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PGMPContentChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PGMPContentChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PGMPContentChild::EnteredCxxStack() -> void
{
}

auto PGMPContentChild::ExitedCxxStack() -> void
{
}

auto PGMPContentChild::EnteredCall() -> void
{
}

auto PGMPContentChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PGMPContentChild::PGMPContentChild() :
    mozilla::ipc::IToplevelProtocol("PGMPContentChild", PGMPContentMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PGMPContentChild);
}

PGMPContentChild::~PGMPContentChild()
{
    MOZ_COUNT_DTOR(PGMPContentChild);
}

auto PGMPContentChild::ManagedPGMPVideoDecoderChild(nsTArray<PGMPVideoDecoderChild*>& aArr) const -> void
{
    mManagedPGMPVideoDecoderChild.ToArray(aArr);
}

auto PGMPContentChild::ManagedPGMPVideoDecoderChild() const -> const ManagedContainer<PGMPVideoDecoderChild>&
{
    return mManagedPGMPVideoDecoderChild;
}

auto PGMPContentChild::ManagedPGMPVideoEncoderChild(nsTArray<PGMPVideoEncoderChild*>& aArr) const -> void
{
    mManagedPGMPVideoEncoderChild.ToArray(aArr);
}

auto PGMPContentChild::ManagedPGMPVideoEncoderChild() const -> const ManagedContainer<PGMPVideoEncoderChild>&
{
    return mManagedPGMPVideoEncoderChild;
}

auto PGMPContentChild::ManagedPChromiumCDMChild(nsTArray<PChromiumCDMChild*>& aArr) const -> void
{
    mManagedPChromiumCDMChild.ToArray(aArr);
}

auto PGMPContentChild::ManagedPChromiumCDMChild() const -> const ManagedContainer<PChromiumCDMChild>&
{
    return mManagedPChromiumCDMChild;
}

auto PGMPContentChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPGMPVideoDecoderChild.Count();
    total += mManagedPGMPVideoEncoderChild.Count();
    total += mManagedPChromiumCDMChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPGMPVideoDecoderChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPGMPVideoEncoderChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPChromiumCDMChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PGMPContentChild::OpenPGMPVideoDecoderEndpoint(PGMPVideoDecoderChild* aActor) -> ManagedEndpoint<PGMPVideoDecoderParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPVideoDecoderChild actor");
        return ManagedEndpoint<PGMPVideoDecoderParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPGMPVideoDecoderChild.PutEntry(aActor);

    return ManagedEndpoint<PGMPVideoDecoderParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPContentChild::BindPGMPVideoDecoderEndpoint(
        ManagedEndpoint<PGMPVideoDecoderChild> aEndpoint,
        PGMPVideoDecoderChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPVideoDecoderChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPGMPVideoDecoderChild.PutEntry(aActor);

    return true;
}

auto PGMPContentChild::OpenPGMPVideoEncoderEndpoint(PGMPVideoEncoderChild* aActor) -> ManagedEndpoint<PGMPVideoEncoderParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPVideoEncoderChild actor");
        return ManagedEndpoint<PGMPVideoEncoderParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPGMPVideoEncoderChild.PutEntry(aActor);

    return ManagedEndpoint<PGMPVideoEncoderParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPContentChild::BindPGMPVideoEncoderEndpoint(
        ManagedEndpoint<PGMPVideoEncoderChild> aEndpoint,
        PGMPVideoEncoderChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPVideoEncoderChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPGMPVideoEncoderChild.PutEntry(aActor);

    return true;
}

auto PGMPContentChild::OpenPChromiumCDMEndpoint(PChromiumCDMChild* aActor) -> ManagedEndpoint<PChromiumCDMParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PChromiumCDMChild actor");
        return ManagedEndpoint<PChromiumCDMParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPChromiumCDMChild.PutEntry(aActor);

    return ManagedEndpoint<PChromiumCDMParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPContentChild::BindPChromiumCDMEndpoint(
        ManagedEndpoint<PChromiumCDMChild> aEndpoint,
        PChromiumCDMChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PChromiumCDMChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPChromiumCDMChild.PutEntry(aActor);

    return true;
}

auto PGMPContentChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PGMPVideoDecoderMsgStart:
{
            PGMPVideoDecoderChild* actor = static_cast<PGMPVideoDecoderChild*>(aListener);
            auto& container = mManagedPGMPVideoDecoderChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PGMPVideoEncoderMsgStart:
{
            PGMPVideoEncoderChild* actor = static_cast<PGMPVideoEncoderChild*>(aListener);
            auto& container = mManagedPGMPVideoEncoderChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PChromiumCDMMsgStart:
{
            PChromiumCDMChild* actor = static_cast<PChromiumCDMChild*>(aListener);
            auto& container = mManagedPChromiumCDMChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PGMPContentChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    default:
        FatalError("unreached");
        return;
    }
}

auto PGMPContentChild::OnMessageReceived(const Message& msg__) -> PGMPContentChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PGMPContent::Msg_PGMPVideoDecoderConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPContent::Msg_PGMPVideoDecoderConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            uint32_t aDecryptorId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDecryptorId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDecryptorId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 515638475)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PGMPVideoDecoderChild> actor = (static_cast<GMPContentChild*>(this))->AllocPGMPVideoDecoderChild(aDecryptorId);
            if (!actor) {
                NS_WARNING("Cannot bind null PGMPVideoDecoderChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPGMPVideoDecoderChild.PutEntry(actor);

            if ((!((static_cast<GMPContentChild*>(this))->RecvPGMPVideoDecoderConstructor(actor, std::move(aDecryptorId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPContent::Msg_PGMPVideoEncoderConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPContent::Msg_PGMPVideoEncoderConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PGMPVideoEncoderChild> actor = (static_cast<GMPContentChild*>(this))->AllocPGMPVideoEncoderChild();
            if (!actor) {
                NS_WARNING("Cannot bind null PGMPVideoEncoderChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPGMPVideoEncoderChild.PutEntry(actor);

            if ((!((static_cast<GMPContentChild*>(this))->RecvPGMPVideoEncoderConstructor(actor)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPContent::Msg_PChromiumCDMConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPContent::Msg_PChromiumCDMConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PChromiumCDMChild> actor = (static_cast<GMPContentChild*>(this))->AllocPChromiumCDMChild();
            if (!actor) {
                NS_WARNING("Cannot bind null PChromiumCDMChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPChromiumCDMChild.PutEntry(actor);

            if ((!((static_cast<GMPContentChild*>(this))->RecvPChromiumCDMConstructor(actor)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PGMPContentChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPContentChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PGMPContentChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPContentChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPContentChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnCallReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PGMPContentChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPContentChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPContentChild::ProcessNativeEventsInInterruptCall() -> void
{
#ifdef OS_WIN
    GetIPCChannel()->ProcessNativeEventsInInterruptCall();
#else
    FatalError("This method is Windows-only");
#endif
}

auto PGMPContentChild::ClearSubtree() -> void
{
    for (auto it = mManagedPGMPVideoDecoderChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPGMPVideoDecoderChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPGMPVideoDecoderChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPGMPVideoDecoderChild.Clear();

    for (auto it = mManagedPGMPVideoEncoderChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPGMPVideoEncoderChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPGMPVideoEncoderChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPGMPVideoEncoderChild.Clear();

    for (auto it = mManagedPChromiumCDMChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPChromiumCDMChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPChromiumCDMChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPChromiumCDMChild.Clear();

}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPContentChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPContentChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMPContent", PGMPContentMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPContentChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
