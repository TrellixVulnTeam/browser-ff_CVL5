//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PBackgroundSharedTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ContentSecurityPolicy|
//
namespace mozilla {
namespace ipc {
auto ContentSecurityPolicy::operator==(const ContentSecurityPolicy& _o) const -> bool
{
    if ((!((policy()) == ((_o).policy())))) {
        return false;
    }
    if ((!((reportOnlyFlag()) == ((_o).reportOnlyFlag())))) {
        return false;
    }
    if ((!((deliveredViaMetaTagFlag()) == ((_o).deliveredViaMetaTagFlag())))) {
        return false;
    }
    return true;
}

auto ContentSecurityPolicy::operator!=(const ContentSecurityPolicy& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::ContentSecurityPolicy>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).policy());
    // Sentinel = 'policy'
    (aMsg)->WriteSentinel(150667921);
    WriteIPDLParam(aMsg, aActor, (aVar).reportOnlyFlag());
    // Sentinel = 'reportOnlyFlag'
    (aMsg)->WriteSentinel(735839673);
    WriteIPDLParam(aMsg, aActor, (aVar).deliveredViaMetaTagFlag());
    // Sentinel = 'deliveredViaMetaTagFlag'
    (aMsg)->WriteSentinel(1836517618);
}

auto IPDLParamTraits<mozilla::ipc::ContentSecurityPolicy>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->policy())))))) {
        aActor->FatalError("Error deserializing 'policy' (nsString) member of 'ContentSecurityPolicy'");
        return false;
    }
    // Sentinel = 'policy'
    if ((!((aMsg)->ReadSentinel(aIter, 150667921)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'policy' (nsString) member of 'ContentSecurityPolicy'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->reportOnlyFlag())))))) {
        aActor->FatalError("Error deserializing 'reportOnlyFlag' (bool) member of 'ContentSecurityPolicy'");
        return false;
    }
    // Sentinel = 'reportOnlyFlag'
    if ((!((aMsg)->ReadSentinel(aIter, 735839673)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'reportOnlyFlag' (bool) member of 'ContentSecurityPolicy'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->deliveredViaMetaTagFlag())))))) {
        aActor->FatalError("Error deserializing 'deliveredViaMetaTagFlag' (bool) member of 'ContentSecurityPolicy'");
        return false;
    }
    // Sentinel = 'deliveredViaMetaTagFlag'
    if ((!((aMsg)->ReadSentinel(aIter, 1836517618)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'deliveredViaMetaTagFlag' (bool) member of 'ContentSecurityPolicy'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ContentPrincipalInfo|
//
namespace mozilla {
namespace ipc {
auto ContentPrincipalInfo::operator==(const ContentPrincipalInfo& _o) const -> bool
{
    if ((!((attrs()) == ((_o).attrs())))) {
        return false;
    }
    if ((!((originNoSuffix()) == ((_o).originNoSuffix())))) {
        return false;
    }
    if ((!((spec()) == ((_o).spec())))) {
        return false;
    }
    if ((!((domain()) == ((_o).domain())))) {
        return false;
    }
    if ((!((baseDomain()) == ((_o).baseDomain())))) {
        return false;
    }
    return true;
}

auto ContentPrincipalInfo::operator!=(const ContentPrincipalInfo& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::ContentPrincipalInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).attrs());
    // Sentinel = 'attrs'
    (aMsg)->WriteSentinel(107807279);
    WriteIPDLParam(aMsg, aActor, (aVar).originNoSuffix());
    // Sentinel = 'originNoSuffix'
    (aMsg)->WriteSentinel(721618363);
    WriteIPDLParam(aMsg, aActor, (aVar).spec());
    // Sentinel = 'spec'
    (aMsg)->WriteSentinel(72155564);
    WriteIPDLParam(aMsg, aActor, (aVar).domain());
    // Sentinel = 'domain'
    (aMsg)->WriteSentinel(144704121);
    WriteIPDLParam(aMsg, aActor, (aVar).baseDomain());
    // Sentinel = 'baseDomain'
    (aMsg)->WriteSentinel(360449012);
}

auto IPDLParamTraits<mozilla::ipc::ContentPrincipalInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->attrs())))))) {
        aActor->FatalError("Error deserializing 'attrs' (OriginAttributes) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((aMsg)->ReadSentinel(aIter, 107807279)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'attrs' (OriginAttributes) member of 'ContentPrincipalInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originNoSuffix())))))) {
        aActor->FatalError("Error deserializing 'originNoSuffix' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'originNoSuffix'
    if ((!((aMsg)->ReadSentinel(aIter, 721618363)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originNoSuffix' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->spec())))))) {
        aActor->FatalError("Error deserializing 'spec' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'spec'
    if ((!((aMsg)->ReadSentinel(aIter, 72155564)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'spec' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domain())))))) {
        aActor->FatalError("Error deserializing 'domain' (nsCString?) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'domain'
    if ((!((aMsg)->ReadSentinel(aIter, 144704121)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domain' (nsCString?) member of 'ContentPrincipalInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseDomain())))))) {
        aActor->FatalError("Error deserializing 'baseDomain' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'baseDomain'
    if ((!((aMsg)->ReadSentinel(aIter, 360449012)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseDomain' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SystemPrincipalInfo|
//
namespace mozilla {
namespace ipc {
auto SystemPrincipalInfo::operator==(const SystemPrincipalInfo& _o) const -> bool
{
    return true;
}

auto SystemPrincipalInfo::operator!=(const SystemPrincipalInfo& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::SystemPrincipalInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::ipc::SystemPrincipalInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct NullPrincipalInfo|
//
namespace mozilla {
namespace ipc {
auto NullPrincipalInfo::operator==(const NullPrincipalInfo& _o) const -> bool
{
    if ((!((attrs()) == ((_o).attrs())))) {
        return false;
    }
    if ((!((spec()) == ((_o).spec())))) {
        return false;
    }
    return true;
}

auto NullPrincipalInfo::operator!=(const NullPrincipalInfo& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::NullPrincipalInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).attrs());
    // Sentinel = 'attrs'
    (aMsg)->WriteSentinel(107807279);
    WriteIPDLParam(aMsg, aActor, (aVar).spec());
    // Sentinel = 'spec'
    (aMsg)->WriteSentinel(72155564);
}

auto IPDLParamTraits<mozilla::ipc::NullPrincipalInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->attrs())))))) {
        aActor->FatalError("Error deserializing 'attrs' (OriginAttributes) member of 'NullPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((aMsg)->ReadSentinel(aIter, 107807279)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'attrs' (OriginAttributes) member of 'NullPrincipalInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->spec())))))) {
        aActor->FatalError("Error deserializing 'spec' (nsCString) member of 'NullPrincipalInfo'");
        return false;
    }
    // Sentinel = 'spec'
    if ((!((aMsg)->ReadSentinel(aIter, 72155564)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'spec' (nsCString) member of 'NullPrincipalInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ExpandedPrincipalInfo|
//
namespace mozilla {
namespace ipc {
auto ExpandedPrincipalInfo::operator==(const ExpandedPrincipalInfo& _o) const -> bool
{
    if ((!((attrs()) == ((_o).attrs())))) {
        return false;
    }
    if ((!((allowlist()) == ((_o).allowlist())))) {
        return false;
    }
    return true;
}

auto ExpandedPrincipalInfo::operator!=(const ExpandedPrincipalInfo& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::ExpandedPrincipalInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).attrs());
    // Sentinel = 'attrs'
    (aMsg)->WriteSentinel(107807279);
    WriteIPDLParam(aMsg, aActor, (aVar).allowlist());
    // Sentinel = 'allowlist'
    (aMsg)->WriteSentinel(318243804);
}

auto IPDLParamTraits<mozilla::ipc::ExpandedPrincipalInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->attrs())))))) {
        aActor->FatalError("Error deserializing 'attrs' (OriginAttributes) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((aMsg)->ReadSentinel(aIter, 107807279)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'attrs' (OriginAttributes) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowlist())))))) {
        aActor->FatalError("Error deserializing 'allowlist' (PrincipalInfo[]) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    // Sentinel = 'allowlist'
    if ((!((aMsg)->ReadSentinel(aIter, 318243804)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowlist' (PrincipalInfo[]) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union PrincipalInfo|
//
namespace mozilla {
namespace ipc {
auto PrincipalInfo::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TContentPrincipalInfo:
        {
            (ptr_ContentPrincipalInfo())->~ContentPrincipalInfo__tdef();
            break;
        }
    case TSystemPrincipalInfo:
        {
            (ptr_SystemPrincipalInfo())->~SystemPrincipalInfo__tdef();
            break;
        }
    case TNullPrincipalInfo:
        {
            (ptr_NullPrincipalInfo())->~NullPrincipalInfo__tdef();
            break;
        }
    case TExpandedPrincipalInfo:
        {
            delete ptr_ExpandedPrincipalInfo();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(const ContentPrincipalInfo& aOther)
{
    new (mozilla::KnownNotNull, ptr_ContentPrincipalInfo()) ContentPrincipalInfo(aOther);
    mType = TContentPrincipalInfo;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(ContentPrincipalInfo&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ContentPrincipalInfo()) ContentPrincipalInfo(std::move(aOther));
    mType = TContentPrincipalInfo;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(const SystemPrincipalInfo& aOther)
{
    new (mozilla::KnownNotNull, ptr_SystemPrincipalInfo()) SystemPrincipalInfo(aOther);
    mType = TSystemPrincipalInfo;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(SystemPrincipalInfo&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SystemPrincipalInfo()) SystemPrincipalInfo(std::move(aOther));
    mType = TSystemPrincipalInfo;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(const NullPrincipalInfo& aOther)
{
    new (mozilla::KnownNotNull, ptr_NullPrincipalInfo()) NullPrincipalInfo(aOther);
    mType = TNullPrincipalInfo;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(NullPrincipalInfo&& aOther)
{
    new (mozilla::KnownNotNull, ptr_NullPrincipalInfo()) NullPrincipalInfo(std::move(aOther));
    mType = TNullPrincipalInfo;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(const ExpandedPrincipalInfo& aOther)
{
    ptr_ExpandedPrincipalInfo() = new ExpandedPrincipalInfo(aOther);
    mType = TExpandedPrincipalInfo;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(ExpandedPrincipalInfo&& aOther)
{
    ptr_ExpandedPrincipalInfo() = new ExpandedPrincipalInfo(std::move(aOther));
    mType = TExpandedPrincipalInfo;
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(const PrincipalInfo& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TContentPrincipalInfo:
        {
            new (mozilla::KnownNotNull, ptr_ContentPrincipalInfo()) ContentPrincipalInfo((aOther).get_ContentPrincipalInfo());
            break;
        }
    case TSystemPrincipalInfo:
        {
            new (mozilla::KnownNotNull, ptr_SystemPrincipalInfo()) SystemPrincipalInfo((aOther).get_SystemPrincipalInfo());
            break;
        }
    case TNullPrincipalInfo:
        {
            new (mozilla::KnownNotNull, ptr_NullPrincipalInfo()) NullPrincipalInfo((aOther).get_NullPrincipalInfo());
            break;
        }
    case TExpandedPrincipalInfo:
        {
            ptr_ExpandedPrincipalInfo() = new ExpandedPrincipalInfo((aOther).get_ExpandedPrincipalInfo());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT PrincipalInfo::PrincipalInfo(PrincipalInfo&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TContentPrincipalInfo:
        {
            new (mozilla::KnownNotNull, ptr_ContentPrincipalInfo()) ContentPrincipalInfo(std::move((aOther).get_ContentPrincipalInfo()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSystemPrincipalInfo:
        {
            new (mozilla::KnownNotNull, ptr_SystemPrincipalInfo()) SystemPrincipalInfo(std::move((aOther).get_SystemPrincipalInfo()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TNullPrincipalInfo:
        {
            new (mozilla::KnownNotNull, ptr_NullPrincipalInfo()) NullPrincipalInfo(std::move((aOther).get_NullPrincipalInfo()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TExpandedPrincipalInfo:
        {
            ptr_ExpandedPrincipalInfo() = (aOther).ptr_ExpandedPrincipalInfo();
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

PrincipalInfo::~PrincipalInfo()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto PrincipalInfo::operator=(const ContentPrincipalInfo& aRhs) -> PrincipalInfo&
{
    if (MaybeDestroy(TContentPrincipalInfo)) {
        new (mozilla::KnownNotNull, ptr_ContentPrincipalInfo()) ContentPrincipalInfo;
    }
    (*(ptr_ContentPrincipalInfo())) = aRhs;
    mType = TContentPrincipalInfo;
    return (*(this));
}

auto PrincipalInfo::operator=(ContentPrincipalInfo&& aRhs) -> PrincipalInfo&
{
    if (MaybeDestroy(TContentPrincipalInfo)) {
        new (mozilla::KnownNotNull, ptr_ContentPrincipalInfo()) ContentPrincipalInfo;
    }
    (*(ptr_ContentPrincipalInfo())) = std::move(aRhs);
    mType = TContentPrincipalInfo;
    return (*(this));
}

auto PrincipalInfo::operator=(const SystemPrincipalInfo& aRhs) -> PrincipalInfo&
{
    if (MaybeDestroy(TSystemPrincipalInfo)) {
        new (mozilla::KnownNotNull, ptr_SystemPrincipalInfo()) SystemPrincipalInfo;
    }
    (*(ptr_SystemPrincipalInfo())) = aRhs;
    mType = TSystemPrincipalInfo;
    return (*(this));
}

auto PrincipalInfo::operator=(SystemPrincipalInfo&& aRhs) -> PrincipalInfo&
{
    if (MaybeDestroy(TSystemPrincipalInfo)) {
        new (mozilla::KnownNotNull, ptr_SystemPrincipalInfo()) SystemPrincipalInfo;
    }
    (*(ptr_SystemPrincipalInfo())) = std::move(aRhs);
    mType = TSystemPrincipalInfo;
    return (*(this));
}

auto PrincipalInfo::operator=(const NullPrincipalInfo& aRhs) -> PrincipalInfo&
{
    if (MaybeDestroy(TNullPrincipalInfo)) {
        new (mozilla::KnownNotNull, ptr_NullPrincipalInfo()) NullPrincipalInfo;
    }
    (*(ptr_NullPrincipalInfo())) = aRhs;
    mType = TNullPrincipalInfo;
    return (*(this));
}

auto PrincipalInfo::operator=(NullPrincipalInfo&& aRhs) -> PrincipalInfo&
{
    if (MaybeDestroy(TNullPrincipalInfo)) {
        new (mozilla::KnownNotNull, ptr_NullPrincipalInfo()) NullPrincipalInfo;
    }
    (*(ptr_NullPrincipalInfo())) = std::move(aRhs);
    mType = TNullPrincipalInfo;
    return (*(this));
}

auto PrincipalInfo::operator=(const ExpandedPrincipalInfo& aRhs) -> PrincipalInfo&
{
    if (MaybeDestroy(TExpandedPrincipalInfo)) {
        ptr_ExpandedPrincipalInfo() = new ExpandedPrincipalInfo;
    }
    (*(ptr_ExpandedPrincipalInfo())) = aRhs;
    mType = TExpandedPrincipalInfo;
    return (*(this));
}

auto PrincipalInfo::operator=(ExpandedPrincipalInfo&& aRhs) -> PrincipalInfo&
{
    if (MaybeDestroy(TExpandedPrincipalInfo)) {
        ptr_ExpandedPrincipalInfo() = new ExpandedPrincipalInfo;
    }
    (*(ptr_ExpandedPrincipalInfo())) = std::move(aRhs);
    mType = TExpandedPrincipalInfo;
    return (*(this));
}

auto PrincipalInfo::operator=(const PrincipalInfo& aRhs) -> PrincipalInfo&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TContentPrincipalInfo:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ContentPrincipalInfo()) ContentPrincipalInfo;
            }
            (*(ptr_ContentPrincipalInfo())) = (aRhs).get_ContentPrincipalInfo();
            break;
        }
    case TSystemPrincipalInfo:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SystemPrincipalInfo()) SystemPrincipalInfo;
            }
            (*(ptr_SystemPrincipalInfo())) = (aRhs).get_SystemPrincipalInfo();
            break;
        }
    case TNullPrincipalInfo:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_NullPrincipalInfo()) NullPrincipalInfo;
            }
            (*(ptr_NullPrincipalInfo())) = (aRhs).get_NullPrincipalInfo();
            break;
        }
    case TExpandedPrincipalInfo:
        {
            if (MaybeDestroy(t)) {
                ptr_ExpandedPrincipalInfo() = new ExpandedPrincipalInfo;
            }
            (*(ptr_ExpandedPrincipalInfo())) = (aRhs).get_ExpandedPrincipalInfo();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto PrincipalInfo::operator=(PrincipalInfo&& aRhs) -> PrincipalInfo&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TContentPrincipalInfo:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ContentPrincipalInfo()) ContentPrincipalInfo;
            }
            (*(ptr_ContentPrincipalInfo())) = std::move((aRhs).get_ContentPrincipalInfo());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSystemPrincipalInfo:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SystemPrincipalInfo()) SystemPrincipalInfo;
            }
            (*(ptr_SystemPrincipalInfo())) = std::move((aRhs).get_SystemPrincipalInfo());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TNullPrincipalInfo:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_NullPrincipalInfo()) NullPrincipalInfo;
            }
            (*(ptr_NullPrincipalInfo())) = std::move((aRhs).get_NullPrincipalInfo());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TExpandedPrincipalInfo:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_ExpandedPrincipalInfo() = (aRhs).ptr_ExpandedPrincipalInfo();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

auto PrincipalInfo::operator==(const ContentPrincipalInfo& aRhs) const -> bool
{
    return (get_ContentPrincipalInfo()) == (aRhs);
}

auto PrincipalInfo::operator==(const SystemPrincipalInfo& aRhs) const -> bool
{
    return (get_SystemPrincipalInfo()) == (aRhs);
}

auto PrincipalInfo::operator==(const NullPrincipalInfo& aRhs) const -> bool
{
    return (get_NullPrincipalInfo()) == (aRhs);
}

auto PrincipalInfo::operator==(const ExpandedPrincipalInfo& aRhs) const -> bool
{
    return (get_ExpandedPrincipalInfo()) == (aRhs);
}

auto PrincipalInfo::operator==(const PrincipalInfo& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TContentPrincipalInfo:
        {
            return (get_ContentPrincipalInfo()) == ((aRhs).get_ContentPrincipalInfo());
        }
    case TSystemPrincipalInfo:
        {
            return (get_SystemPrincipalInfo()) == ((aRhs).get_SystemPrincipalInfo());
        }
    case TNullPrincipalInfo:
        {
            return (get_NullPrincipalInfo()) == ((aRhs).get_NullPrincipalInfo());
        }
    case TExpandedPrincipalInfo:
        {
            return (get_ExpandedPrincipalInfo()) == ((aRhs).get_ExpandedPrincipalInfo());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::PrincipalInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::ipc::PrincipalInfo union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'PrincipalInfo'
    (aMsg)->WriteSentinel(606209327);

    switch (type) {
    case union__::TContentPrincipalInfo:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ContentPrincipalInfo());
            // Sentinel = 'TContentPrincipalInfo'
            (aMsg)->WriteSentinel(1527842910);
            return;
        }
    case union__::TSystemPrincipalInfo:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SystemPrincipalInfo());
            // Sentinel = 'TSystemPrincipalInfo'
            (aMsg)->WriteSentinel(1411909640);
            return;
        }
    case union__::TNullPrincipalInfo:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_NullPrincipalInfo());
            // Sentinel = 'TNullPrincipalInfo'
            (aMsg)->WriteSentinel(1120470814);
            return;
        }
    case union__::TExpandedPrincipalInfo:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ExpandedPrincipalInfo());
            // Sentinel = 'TExpandedPrincipalInfo'
            (aMsg)->WriteSentinel(1652492460);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::ipc::PrincipalInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::ipc::PrincipalInfo union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union PrincipalInfo");
        return false;
    }
    // Sentinel = 'PrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 606209327)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union PrincipalInfo");
        return false;
    }

    switch (type) {
    case union__::TContentPrincipalInfo:
        {
            mozilla::ipc::ContentPrincipalInfo tmp = mozilla::ipc::ContentPrincipalInfo();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ContentPrincipalInfo())))))) {
                aActor->FatalError("Error deserializing variant TContentPrincipalInfo of union PrincipalInfo");
                return false;
            }
            // Sentinel = 'TContentPrincipalInfo'
            if ((!((aMsg)->ReadSentinel(aIter, 1527842910)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TContentPrincipalInfo of union PrincipalInfo");
                return false;
            }
            return true;
        }
    case union__::TSystemPrincipalInfo:
        {
            mozilla::ipc::SystemPrincipalInfo tmp = mozilla::ipc::SystemPrincipalInfo();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SystemPrincipalInfo())))))) {
                aActor->FatalError("Error deserializing variant TSystemPrincipalInfo of union PrincipalInfo");
                return false;
            }
            // Sentinel = 'TSystemPrincipalInfo'
            if ((!((aMsg)->ReadSentinel(aIter, 1411909640)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSystemPrincipalInfo of union PrincipalInfo");
                return false;
            }
            return true;
        }
    case union__::TNullPrincipalInfo:
        {
            mozilla::ipc::NullPrincipalInfo tmp = mozilla::ipc::NullPrincipalInfo();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_NullPrincipalInfo())))))) {
                aActor->FatalError("Error deserializing variant TNullPrincipalInfo of union PrincipalInfo");
                return false;
            }
            // Sentinel = 'TNullPrincipalInfo'
            if ((!((aMsg)->ReadSentinel(aIter, 1120470814)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TNullPrincipalInfo of union PrincipalInfo");
                return false;
            }
            return true;
        }
    case union__::TExpandedPrincipalInfo:
        {
            mozilla::ipc::ExpandedPrincipalInfo tmp = mozilla::ipc::ExpandedPrincipalInfo();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ExpandedPrincipalInfo())))))) {
                aActor->FatalError("Error deserializing variant TExpandedPrincipalInfo of union PrincipalInfo");
                return false;
            }
            // Sentinel = 'TExpandedPrincipalInfo'
            if ((!((aMsg)->ReadSentinel(aIter, 1652492460)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TExpandedPrincipalInfo of union PrincipalInfo");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CSPInfo|
//
namespace mozilla {
namespace ipc {
auto CSPInfo::operator==(const CSPInfo& _o) const -> bool
{
    if ((!((policyInfos()) == ((_o).policyInfos())))) {
        return false;
    }
    if ((!((requestPrincipalInfo()) == ((_o).requestPrincipalInfo())))) {
        return false;
    }
    if ((!((selfURISpec()) == ((_o).selfURISpec())))) {
        return false;
    }
    if ((!((referrer()) == ((_o).referrer())))) {
        return false;
    }
    if ((!((innerWindowID()) == ((_o).innerWindowID())))) {
        return false;
    }
    if ((!((skipAllowInlineStyleCheck()) == ((_o).skipAllowInlineStyleCheck())))) {
        return false;
    }
    return true;
}

auto CSPInfo::operator!=(const CSPInfo& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::CSPInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).policyInfos());
    // Sentinel = 'policyInfos'
    (aMsg)->WriteSentinel(460850320);
    WriteIPDLParam(aMsg, aActor, (aVar).requestPrincipalInfo());
    // Sentinel = 'requestPrincipalInfo'
    (aMsg)->WriteSentinel(1470892088);
    WriteIPDLParam(aMsg, aActor, (aVar).selfURISpec());
    // Sentinel = 'selfURISpec'
    (aMsg)->WriteSentinel(425657382);
    WriteIPDLParam(aMsg, aActor, (aVar).referrer());
    // Sentinel = 'referrer'
    (aMsg)->WriteSentinel(252838750);
    WriteIPDLParam(aMsg, aActor, (aVar).skipAllowInlineStyleCheck());
    // Sentinel = 'skipAllowInlineStyleCheck'
    (aMsg)->WriteSentinel(2204240389);
    (aMsg)->WriteBytes((&((aVar).innerWindowID())), 8);
    // Sentinel = 'innerWindowID'
    (aMsg)->WriteSentinel(625870114);
}

auto IPDLParamTraits<mozilla::ipc::CSPInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->policyInfos())))))) {
        aActor->FatalError("Error deserializing 'policyInfos' (ContentSecurityPolicy[]) member of 'CSPInfo'");
        return false;
    }
    // Sentinel = 'policyInfos'
    if ((!((aMsg)->ReadSentinel(aIter, 460850320)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'policyInfos' (ContentSecurityPolicy[]) member of 'CSPInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestPrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'requestPrincipalInfo' (PrincipalInfo) member of 'CSPInfo'");
        return false;
    }
    // Sentinel = 'requestPrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1470892088)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestPrincipalInfo' (PrincipalInfo) member of 'CSPInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->selfURISpec())))))) {
        aActor->FatalError("Error deserializing 'selfURISpec' (nsCString) member of 'CSPInfo'");
        return false;
    }
    // Sentinel = 'selfURISpec'
    if ((!((aMsg)->ReadSentinel(aIter, 425657382)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'selfURISpec' (nsCString) member of 'CSPInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrer())))))) {
        aActor->FatalError("Error deserializing 'referrer' (nsString) member of 'CSPInfo'");
        return false;
    }
    // Sentinel = 'referrer'
    if ((!((aMsg)->ReadSentinel(aIter, 252838750)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrer' (nsString) member of 'CSPInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->skipAllowInlineStyleCheck())))))) {
        aActor->FatalError("Error deserializing 'skipAllowInlineStyleCheck' (bool) member of 'CSPInfo'");
        return false;
    }
    // Sentinel = 'skipAllowInlineStyleCheck'
    if ((!((aMsg)->ReadSentinel(aIter, 2204240389)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'skipAllowInlineStyleCheck' (bool) member of 'CSPInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->innerWindowID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'innerWindowID'
    if ((!((aMsg)->ReadSentinel(aIter, 625870114)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
