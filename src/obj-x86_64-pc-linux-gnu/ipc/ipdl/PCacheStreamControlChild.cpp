//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/cache/PCacheStreamControlChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/cache/CacheStreamControlChild.h"
#include "nsID.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace cache {


auto PCacheStreamControlChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PCacheStreamControlChild::PCacheStreamControlChild() :
    mozilla::ipc::IProtocol(PCacheStreamControlMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PCacheStreamControlChild);
}

PCacheStreamControlChild::~PCacheStreamControlChild()
{
    MOZ_COUNT_DTOR(PCacheStreamControlChild);
}

auto PCacheStreamControlChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PCacheStreamControlChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PCacheStreamControlChild::SendOpenStream(
        const nsID& aStreamId,
        mozilla::ipc::ResolveCallback<mozilla::Maybe<IPCStream>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PCacheStreamControl::Msg_OpenStream(Id());

    WriteIPDLParam(msg__, this, aStreamId);
    // Sentinel = 'aStreamId'
    (msg__)->WriteSentinel(295437179);




    if (mozilla::ipc::LoggingEnabledFor("PCacheStreamControlChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCacheStreamControlChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCacheStreamControl::Msg_OpenStream", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PCacheStreamControlChild::SendOpenStream(const nsID& aStreamId) -> RefPtr<OpenStreamPromise>
{
    RefPtr<MozPromise<mozilla::Maybe<IPCStream>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<mozilla::Maybe<IPCStream>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendOpenStream(std::move(aStreamId), [promise__](mozilla::Maybe<IPCStream>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PCacheStreamControlChild::SendNoteClosed(const nsID& aStreamId) -> bool
{
    IPC::Message* msg__ = PCacheStreamControl::Msg_NoteClosed(Id());

    WriteIPDLParam(msg__, this, aStreamId);
    // Sentinel = 'aStreamId'
    (msg__)->WriteSentinel(295437179);




    if (mozilla::ipc::LoggingEnabledFor("PCacheStreamControlChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCacheStreamControlChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCacheStreamControl::Msg_NoteClosed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCacheStreamControlChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCacheStreamControlChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCacheStreamControlChild::OnMessageReceived(const Message& msg__) -> PCacheStreamControlChild::Result
{
    switch (msg__.type()) {
    case PCacheStreamControl::Reply_OpenStream__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCacheStreamControlChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCacheStreamControlChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCacheStreamControl::Msg_OpenStream", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<mozilla::Maybe<IPCStream>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                mozilla::Maybe<IPCStream> aStream{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStream)))))) {
                    FatalError("Error deserializing 'IPCStream?'");
                    return MsgValueError;
                }
                // Sentinel = 'aStream'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205454)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'IPCStream?'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aStream));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PCacheStreamControl::Msg_CloseAll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCacheStreamControlChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCacheStreamControlChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCacheStreamControl::Msg_CloseAll", OTHER);

            if ((!((static_cast<CacheStreamControlChild*>(this))->RecvCloseAll()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCacheStreamControl::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCacheStreamControlChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCacheStreamControlChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCacheStreamControl::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PCacheStreamControlChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PCacheStreamControl'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PCacheStreamControl'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PCacheStreamControl'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CacheStreamControlChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PCacheStreamControlMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PCacheStreamControlChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PCacheStreamControlChild::Result
{
    return MsgNotKnown;
}

auto PCacheStreamControlChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PCacheStreamControlChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PCacheStreamControlChild::ClearSubtree() -> void
{
}



} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::PCacheStreamControlChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::cache::PCacheStreamControlChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PCacheStreamControl", PCacheStreamControlMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::cache::PCacheStreamControlChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
