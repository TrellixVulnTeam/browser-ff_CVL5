//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/NeckoMessageUtils.h"
#include "mozilla/net/PSocketProcessParent.h"
#include "mozilla/net/PSocketProcessChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/net/PInputChannelThrottleQueueParent.h"
#include "mozilla/net/PInputChannelThrottleQueueChild.h"
#include "mozilla/net/PHttpTransaction.h"
#include "mozilla/net/PHttpTransactionParent.h"
#include "mozilla/net/PHttpTransactionChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {
namespace PHttpTransaction {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PHttpTransactionParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PHttpTransactionChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_OnStartRequest(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnStartRequest__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnTransportStatus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnTransportStatus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnDataAvailable(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnDataAvailable__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnStopRequest(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnStopRequest__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnInitFailed(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnInitFailed__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnH2PushStream(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnH2PushStream__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Init(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Init__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CancelPump(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CancelPump__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SuspendPump(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SuspendPump__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ResumePump(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ResumePump__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetDNSWasRefreshed(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetDNSWasRefreshed__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DontReuseConnection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DontReuseConnection__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetH2WSConnRefTaken(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetH2WSConnRefTaken__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PHttpTransaction
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct H2PushedStreamArg|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::H2PushedStreamArg>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).transWithPushedStreamParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).transWithPushedStreamParent());
        // Sentinel = 'transWithPushedStream'
        (aMsg)->WriteSentinel(1601636506);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).transWithPushedStreamChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).transWithPushedStreamChild());
        // Sentinel = 'transWithPushedStream'
        (aMsg)->WriteSentinel(1601636506);
    }
    (aMsg)->WriteBytes((&((aVar).pushedStreamId())), 4);
    // Sentinel = 'pushedStreamId'
    (aMsg)->WriteSentinel(731579811);
}

auto IPDLParamTraits<mozilla::net::H2PushedStreamArg>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->transWithPushedStreamParent())))))) {
            aActor->FatalError("Error deserializing 'transWithPushedStreamParent' (PHttpTransaction) member of 'H2PushedStreamArg'");
            return false;
        }
        if ((!((*((&((aVar)->transWithPushedStreamParent()))))))) {
            aActor->FatalError("Error deserializing 'transWithPushedStreamParent' (PHttpTransaction) member of 'H2PushedStreamArg'");
            return false;
        }
        // Sentinel = 'transWithPushedStream'
        if ((!((aMsg)->ReadSentinel(aIter, 1601636506)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'transWithPushedStreamParent' (PHttpTransaction) member of 'H2PushedStreamArg'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->transWithPushedStreamChild())))))) {
            aActor->FatalError("Error deserializing 'transWithPushedStreamChild' (PHttpTransaction) member of 'H2PushedStreamArg'");
            return false;
        }
        if ((!((*((&((aVar)->transWithPushedStreamChild()))))))) {
            aActor->FatalError("Error deserializing 'transWithPushedStreamChild' (PHttpTransaction) member of 'H2PushedStreamArg'");
            return false;
        }
        // Sentinel = 'transWithPushedStream'
        if ((!((aMsg)->ReadSentinel(aIter, 1601636506)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'transWithPushedStreamChild' (PHttpTransaction) member of 'H2PushedStreamArg'");
            return false;
        }
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->pushedStreamId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'pushedStreamId'
    if ((!((aMsg)->ReadSentinel(aIter, 731579811)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct NetworkAddressArg|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::NetworkAddressArg>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).selfAddr());
    // Sentinel = 'selfAddr'
    (aMsg)->WriteSentinel(240321318);
    WriteIPDLParam(aMsg, aActor, (aVar).peerAddr());
    // Sentinel = 'peerAddr'
    (aMsg)->WriteSentinel(239928104);
    WriteIPDLParam(aMsg, aActor, (aVar).resolvedByTRR());
    // Sentinel = 'resolvedByTRR'
    (aMsg)->WriteSentinel(630261016);
    WriteIPDLParam(aMsg, aActor, (aVar).echConfigUsed());
    // Sentinel = 'echConfigUsed'
    (aMsg)->WriteSentinel(593298712);
}

auto IPDLParamTraits<mozilla::net::NetworkAddressArg>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->selfAddr())))))) {
        aActor->FatalError("Error deserializing 'selfAddr' (NetAddr) member of 'NetworkAddressArg'");
        return false;
    }
    // Sentinel = 'selfAddr'
    if ((!((aMsg)->ReadSentinel(aIter, 240321318)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'selfAddr' (NetAddr) member of 'NetworkAddressArg'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->peerAddr())))))) {
        aActor->FatalError("Error deserializing 'peerAddr' (NetAddr) member of 'NetworkAddressArg'");
        return false;
    }
    // Sentinel = 'peerAddr'
    if ((!((aMsg)->ReadSentinel(aIter, 239928104)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'peerAddr' (NetAddr) member of 'NetworkAddressArg'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->resolvedByTRR())))))) {
        aActor->FatalError("Error deserializing 'resolvedByTRR' (bool) member of 'NetworkAddressArg'");
        return false;
    }
    // Sentinel = 'resolvedByTRR'
    if ((!((aMsg)->ReadSentinel(aIter, 630261016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'resolvedByTRR' (bool) member of 'NetworkAddressArg'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->echConfigUsed())))))) {
        aActor->FatalError("Error deserializing 'echConfigUsed' (bool) member of 'NetworkAddressArg'");
        return false;
    }
    // Sentinel = 'echConfigUsed'
    if ((!((aMsg)->ReadSentinel(aIter, 593298712)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'echConfigUsed' (bool) member of 'NetworkAddressArg'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
