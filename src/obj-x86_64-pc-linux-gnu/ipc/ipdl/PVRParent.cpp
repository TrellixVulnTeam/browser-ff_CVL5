//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gfx/PVRParent.h"
#include "VRMessageUtils.h"
#include "VRParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gfx/PVRGPUParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gfx {


auto PVRParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PVRParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PVRParent::EnteredCxxStack() -> void
{
}

auto PVRParent::ExitedCxxStack() -> void
{
}

auto PVRParent::EnteredCall() -> void
{
}

auto PVRParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PVRParent::PVRParent() :
    mozilla::ipc::IToplevelProtocol("PVRParent", PVRMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PVRParent);
}

PVRParent::~PVRParent()
{
    MOZ_COUNT_DTOR(PVRParent);
}

auto PVRParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PVRParent::SendInitComplete() -> bool
{
    IPC::Message* msg__ = PVR::Msg_InitComplete(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_InitComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRParent::SendOpenVRControllerActionPathToParent(const nsCString& aPath) -> bool
{
    IPC::Message* msg__ = PVR::Msg_OpenVRControllerActionPathToParent(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPath);
    // Sentinel = 'aPath'
    (msg__)->WriteSentinel(94175727);




    if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_OpenVRControllerActionPathToParent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRParent::SendOpenVRControllerManifestPathToParent(
        const VRControllerType& aType,
        const nsCString& aPath) -> bool
{
    IPC::Message* msg__ = PVR::Msg_OpenVRControllerManifestPathToParent(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, aPath);
    // Sentinel = 'aPath'
    (msg__)->WriteSentinel(94175727);




    if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_OpenVRControllerManifestPathToParent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRParent::SendInitCrashReporter(const NativeThreadId& threadId) -> bool
{
    IPC::Message* msg__ = PVR::Msg_InitCrashReporter(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, threadId);
    // Sentinel = 'threadId'
    (msg__)->WriteSentinel(248185638);




    if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_InitCrashReporter", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRParent::SendAddMemoryReport(const MemoryReport& aReport) -> bool
{
    IPC::Message* msg__ = PVR::Msg_AddMemoryReport(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aReport);
    // Sentinel = 'aReport'
    (msg__)->WriteSentinel(184025822);




    if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_AddMemoryReport", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PVRParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PVRParent::OnMessageReceived(const Message& msg__) -> PVRParent::Result
{
    switch (msg__.type()) {
    case PVR::Msg_NewGPUVRManager__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_NewGPUVRManager", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::gfx::PVRGPUParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gfx::PVRGPUParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gfx::PVRGPUParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRParent*>(this))->RecvNewGPUVRManager(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_Init__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_Init", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<GfxVarUpdate> vars{};
            DevicePrefs devicePrefs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vars)))))) {
                FatalError("Error deserializing 'GfxVarUpdate[]'");
                return MsgValueError;
            }
            // Sentinel = 'vars'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72745405)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GfxVarUpdate[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(devicePrefs)))))) {
                FatalError("Error deserializing 'DevicePrefs'");
                return MsgValueError;
            }
            // Sentinel = 'devicePrefs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 445645937)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DevicePrefs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRParent*>(this))->RecvInit(std::move(vars), std::move(devicePrefs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_UpdateVar__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_UpdateVar", OTHER);

            PickleIterator iter__{msg__};
            GfxVarUpdate var{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(var)))))) {
                FatalError("Error deserializing 'GfxVarUpdate'");
                return MsgValueError;
            }
            // Sentinel = 'var'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 43581770)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GfxVarUpdate'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRParent*>(this))->RecvUpdateVar(std::move(var))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_PreferenceUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_PreferenceUpdate", OTHER);

            PickleIterator iter__{msg__};
            Pref pref{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pref)))))) {
                FatalError("Error deserializing 'Pref'");
                return MsgValueError;
            }
            // Sentinel = 'pref'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 71958958)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Pref'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRParent*>(this))->RecvPreferenceUpdate(std::move(pref))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_OpenVRControllerActionPathToVR__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_OpenVRControllerActionPathToVR", OTHER);

            PickleIterator iter__{msg__};
            nsCString aPath{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPath)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aPath'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94175727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRParent*>(this))->RecvOpenVRControllerActionPathToVR(std::move(aPath))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_OpenVRControllerManifestPathToVR__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_OpenVRControllerManifestPathToVR", OTHER);

            PickleIterator iter__{msg__};
            VRControllerType aType{};
            nsCString aPath{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'VRControllerType'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VRControllerType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPath)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aPath'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94175727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRParent*>(this))->RecvOpenVRControllerManifestPathToVR(std::move(aType), std::move(aPath))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_RequestMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_RequestMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            uint32_t generation{};
            bool anonymize{};
            bool minimizeMemoryUsage{};
            mozilla::Maybe<FileDescriptor> DMDFile{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(generation)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'generation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 381158445)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(anonymize)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'anonymize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 321127387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(minimizeMemoryUsage)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'minimizeMemoryUsage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1321600977)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(DMDFile)))))) {
                FatalError("Error deserializing 'FileDescriptor?'");
                return MsgValueError;
            }
            // Sentinel = 'DMDFile'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143983190)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            RequestMemoryReportResolver resolver = [proxy__, seqno__, id__](const uint32_t& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PVRParent* self__ = static_cast<PVRParent*>(proxy__->Get());

                IPC::Message* reply__ = PVR::Reply_RequestMemoryReport(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aGeneration'
                (reply__)->WriteSentinel(430179438);

                if (mozilla::ipc::LoggingEnabledFor("PVRParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PVRParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<VRParent*>(this))->RecvRequestMemoryReport(std::move(generation), std::move(anonymize), std::move(minimizeMemoryUsage), std::move(DMDFile), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PVRParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PVRParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVRParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PVRParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVRParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRParent::ClearSubtree() -> void
{
}



} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::PVRParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gfx::PVRParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PVR", PVRMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gfx::PVRParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
