//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginWidgetChild.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/dom/BindingIPCUtils.h"

#include "mozilla/dom/PBrowserChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {


MOZ_IMPLICIT PPluginWidgetChild::PPluginWidgetChild() :
    mozilla::ipc::IProtocol(PPluginWidgetMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PPluginWidgetChild);
}

PPluginWidgetChild::~PPluginWidgetChild()
{
    MOZ_COUNT_DTOR(PPluginWidgetChild);
}

auto PPluginWidgetChild::Manager() const -> PBrowserChild*
{
    return static_cast<PBrowserChild*>(IProtocol::Manager());
}

auto PPluginWidgetChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PPluginWidgetChild::Send__delete__(PPluginWidgetChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PPluginWidget::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PPluginWidgetChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginWidgetChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginWidget::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PPluginWidgetMsgStart, actor);
    return sendok__;
}

auto PPluginWidgetChild::SendCreate(
        nsresult* aResult,
        uint64_t* aScrollCaptureId,
        uintptr_t* aPluginInstanceId) -> bool
{
    IPC::Message* msg__ = PPluginWidget::Msg_Create(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginWidgetChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginWidgetChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginWidget::Msg_Create", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginWidget::Msg_Create", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginWidgetChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginWidgetChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'nsresult'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aScrollCaptureId)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aScrollCaptureId'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 899810898)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aPluginInstanceId)))) {
        FatalError("Error deserializing 'uintptr_t'");
        return false;
    }
    // Sentinel = 'aPluginInstanceId'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 1018562227)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uintptr_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginWidgetChild::SendSetFocus(
        const bool& aRaise,
        const CallerType& aCallerType) -> bool
{
    IPC::Message* msg__ = PPluginWidget::Msg_SetFocus(Id());

    WriteIPDLParam(msg__, this, aRaise);
    // Sentinel = 'aRaise'
    (msg__)->WriteSentinel(133169750);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);




    if (mozilla::ipc::LoggingEnabledFor("PPluginWidgetChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginWidgetChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginWidget::Msg_SetFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginWidgetChild::SendGetNativePluginPort(uintptr_t* value) -> bool
{
    IPC::Message* msg__ = PPluginWidget::Msg_GetNativePluginPort(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginWidgetChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginWidgetChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginWidget::Msg_GetNativePluginPort", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginWidget::Msg_GetNativePluginPort", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginWidgetChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginWidgetChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'uintptr_t'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uintptr_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginWidgetChild::SendSetNativeChildWindow(const uintptr_t& childWindow) -> bool
{
    IPC::Message* msg__ = PPluginWidget::Msg_SetNativeChildWindow(Id());

    WriteIPDLParam(msg__, this, childWindow);
    // Sentinel = 'childWindow'
    (msg__)->WriteSentinel(444138621);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginWidgetChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginWidgetChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginWidget::Msg_SetNativeChildWindow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginWidget::Msg_SetNativeChildWindow", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginWidgetChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginWidgetChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginWidgetChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PPluginWidgetChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PPluginWidgetChild::OnMessageReceived(const Message& msg__) -> PPluginWidgetChild::Result
{
    switch (msg__.type()) {
    case PPluginWidget::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginWidgetChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginWidgetChild::Result
{
    return MsgNotKnown;
}

auto PPluginWidgetChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginWidgetChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PPluginWidgetChild::ClearSubtree() -> void
{
}



} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PPluginWidgetChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::plugins::PPluginWidgetChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPluginWidget", PPluginWidgetMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::plugins::PPluginWidgetChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
