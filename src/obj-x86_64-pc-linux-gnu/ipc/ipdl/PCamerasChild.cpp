//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/camera/PCamerasChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/ipc/PBackgroundChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace camera {


auto PCamerasChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PCamerasChild::PCamerasChild() :
    mozilla::ipc::IProtocol(PCamerasMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PCamerasChild);
}

PCamerasChild::~PCamerasChild()
{
    MOZ_COUNT_DTOR(PCamerasChild);
}

auto PCamerasChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PCamerasChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PCamerasChild::SendNumberOfCaptureDevices(const CaptureEngine& engine) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_NumberOfCaptureDevices(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_NumberOfCaptureDevices", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendNumberOfCapabilities(
        const CaptureEngine& engine,
        const nsCString& deviceUniqueIdUTF8) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_NumberOfCapabilities(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);
    WriteIPDLParam(msg__, this, deviceUniqueIdUTF8);
    // Sentinel = 'deviceUniqueIdUTF8'
    (msg__)->WriteSentinel(1137903292);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_NumberOfCapabilities", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendGetCaptureCapability(
        const CaptureEngine& engine,
        const nsCString& unique_idUTF8,
        const int& capability_number) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_GetCaptureCapability(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);
    WriteIPDLParam(msg__, this, unique_idUTF8);
    // Sentinel = 'unique_idUTF8'
    (msg__)->WriteSentinel(628032747);
    WriteIPDLParam(msg__, this, capability_number);
    // Sentinel = 'capability_number'
    (msg__)->WriteSentinel(1050543883);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_GetCaptureCapability", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendGetCaptureDevice(
        const CaptureEngine& engine,
        const int& num) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_GetCaptureDevice(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);
    WriteIPDLParam(msg__, this, num);
    // Sentinel = 'num'
    (msg__)->WriteSentinel(44302673);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_GetCaptureDevice", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendAllocateCaptureDevice(
        const CaptureEngine& engine,
        const nsCString& unique_idUTF8,
        const uint64_t& windowID) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_AllocateCaptureDevice(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);
    WriteIPDLParam(msg__, this, unique_idUTF8);
    // Sentinel = 'unique_idUTF8'
    (msg__)->WriteSentinel(628032747);
    WriteIPDLParam(msg__, this, windowID);
    // Sentinel = 'windowID'
    (msg__)->WriteSentinel(253625126);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_AllocateCaptureDevice", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendReleaseCaptureDevice(
        const CaptureEngine& engine,
        const int& numdev) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReleaseCaptureDevice(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);
    WriteIPDLParam(msg__, this, numdev);
    // Sentinel = 'numdev'
    (msg__)->WriteSentinel(151192208);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReleaseCaptureDevice", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendStartCapture(
        const CaptureEngine& engine,
        const int& numdev,
        const VideoCaptureCapability& capability) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_StartCapture(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);
    WriteIPDLParam(msg__, this, numdev);
    // Sentinel = 'numdev'
    (msg__)->WriteSentinel(151192208);
    WriteIPDLParam(msg__, this, capability);
    // Sentinel = 'capability'
    (msg__)->WriteSentinel(371000355);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_StartCapture", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendFocusOnSelectedSource(
        const CaptureEngine& engine,
        const int& numdev) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_FocusOnSelectedSource(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);
    WriteIPDLParam(msg__, this, numdev);
    // Sentinel = 'numdev'
    (msg__)->WriteSentinel(151192208);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_FocusOnSelectedSource", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendStopCapture(
        const CaptureEngine& engine,
        const int& numdev) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_StopCapture(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);
    WriteIPDLParam(msg__, this, numdev);
    // Sentinel = 'numdev'
    (msg__)->WriteSentinel(151192208);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_StopCapture", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendReleaseFrame(Shmem&& s) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_ReleaseFrame(Id());

    WriteIPDLParam(msg__, this, std::move(s));
    // Sentinel = 's'
    (msg__)->WriteSentinel(7602292);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_ReleaseFrame", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendAllDone() -> bool
{
    IPC::Message* msg__ = PCameras::Msg_AllDone(Id());





    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_AllDone", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::SendEnsureInitialized(const CaptureEngine& engine) -> bool
{
    IPC::Message* msg__ = PCameras::Msg_EnsureInitialized(Id());

    WriteIPDLParam(msg__, this, engine);
    // Sentinel = 'engine'
    (msg__)->WriteSentinel(144835191);




    if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCamerasChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCameras::Msg_EnsureInitialized", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCamerasChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCamerasChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCamerasChild::OnMessageReceived(const Message& msg__) -> PCamerasChild::Result
{
    switch (msg__.type()) {
    case PCameras::Msg_DeliverFrame__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_DeliverFrame", OTHER);

            PickleIterator iter__{msg__};
            CaptureEngine capEngine{};
            int streamId{};
            Shmem buffer{};
            VideoFrameProperties props{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(capEngine)))))) {
                FatalError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            // Sentinel = 'capEngine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293077899)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CaptureEngine'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(streamId)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'streamId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 254935866)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buffer)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'buffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144769659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(props)))))) {
                FatalError("Error deserializing 'VideoFrameProperties'");
                return MsgValueError;
            }
            // Sentinel = 'props'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 110953013)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VideoFrameProperties'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvDeliverFrame(std::move(capEngine), std::move(streamId), std::move(buffer), std::move(props))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_DeviceChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_DeviceChange", OTHER);

            if ((!((this)->RecvDeviceChange()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReplyNumberOfCaptureDevices__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReplyNumberOfCaptureDevices", OTHER);

            PickleIterator iter__{msg__};
            int numdev{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(numdev)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'numdev'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151192208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReplyNumberOfCaptureDevices(std::move(numdev))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReplyNumberOfCapabilities__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReplyNumberOfCapabilities", OTHER);

            PickleIterator iter__{msg__};
            int numdev{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(numdev)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'numdev'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151192208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReplyNumberOfCapabilities(std::move(numdev))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReplyAllocateCaptureDevice__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReplyAllocateCaptureDevice", OTHER);

            PickleIterator iter__{msg__};
            int numdev{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(numdev)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'numdev'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151192208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReplyAllocateCaptureDevice(std::move(numdev))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReplyGetCaptureCapability__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReplyGetCaptureCapability", OTHER);

            PickleIterator iter__{msg__};
            VideoCaptureCapability cap{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cap)))))) {
                FatalError("Error deserializing 'VideoCaptureCapability'");
                return MsgValueError;
            }
            // Sentinel = 'cap'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 39715125)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VideoCaptureCapability'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReplyGetCaptureCapability(std::move(cap))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReplyGetCaptureDevice__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReplyGetCaptureDevice", OTHER);

            PickleIterator iter__{msg__};
            nsCString device_name{};
            nsCString device_id{};
            bool scary{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(device_name)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'device_name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 448726129)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(device_id)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'device_id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 305857437)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scary)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'scary'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105906723)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReplyGetCaptureDevice(std::move(device_name), std::move(device_id), std::move(scary))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReplyFailure__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReplyFailure", OTHER);

            if ((!((this)->RecvReplyFailure()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg_ReplySuccess__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg_ReplySuccess", OTHER);

            if ((!((this)->RecvReplySuccess()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCameras::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCamerasChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCamerasChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCameras::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PCamerasChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PCameras'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PCameras'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PCameras'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PCamerasMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PCamerasChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PCamerasChild::Result
{
    return MsgNotKnown;
}

auto PCamerasChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PCamerasChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PCamerasChild::ClearSubtree() -> void
{
}



} // namespace camera
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::camera::PCamerasChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::camera::PCamerasChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PCameras", PCamerasMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::camera::PCamerasChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
