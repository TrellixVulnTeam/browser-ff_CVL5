//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PPresentationParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/PresentationParent.h"
#include "nsIPrincipal.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PPresentationRequestParent.h"
#include "mozilla/dom/PPresentationBuilderParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PPresentationParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPresentationParent::RecvPPresentationRequestConstructor(
        PPresentationRequestParent* actor,
        const PresentationIPCRequest& aRequest) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PPresentationParent::PPresentationParent() :
    mozilla::ipc::IProtocol(PPresentationMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PPresentationParent);
}

PPresentationParent::~PPresentationParent()
{
    MOZ_COUNT_DTOR(PPresentationParent);
}

auto PPresentationParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PPresentationParent::ManagedPPresentationBuilderParent(nsTArray<PPresentationBuilderParent*>& aArr) const -> void
{
    mManagedPPresentationBuilderParent.ToArray(aArr);
}

auto PPresentationParent::ManagedPPresentationBuilderParent() const -> const ManagedContainer<PPresentationBuilderParent>&
{
    return mManagedPPresentationBuilderParent;
}

auto PPresentationParent::ManagedPPresentationRequestParent(nsTArray<PPresentationRequestParent*>& aArr) const -> void
{
    mManagedPPresentationRequestParent.ToArray(aArr);
}

auto PPresentationParent::ManagedPPresentationRequestParent() const -> const ManagedContainer<PPresentationRequestParent>&
{
    return mManagedPPresentationRequestParent;
}

auto PPresentationParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPPresentationBuilderParent.Count();
    total += mManagedPPresentationRequestParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPPresentationBuilderParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPresentationRequestParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PPresentationParent::OpenPPresentationBuilderEndpoint(PPresentationBuilderParent* aActor) -> ManagedEndpoint<PPresentationBuilderChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationBuilderParent actor");
        return ManagedEndpoint<PPresentationBuilderChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPresentationBuilderParent.PutEntry(aActor);

    return ManagedEndpoint<PPresentationBuilderChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPresentationParent::BindPPresentationBuilderEndpoint(
        ManagedEndpoint<PPresentationBuilderParent> aEndpoint,
        PPresentationBuilderParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationBuilderParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPresentationBuilderParent.PutEntry(aActor);

    return true;
}

auto PPresentationParent::OpenPPresentationRequestEndpoint(PPresentationRequestParent* aActor) -> ManagedEndpoint<PPresentationRequestChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationRequestParent actor");
        return ManagedEndpoint<PPresentationRequestChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPresentationRequestParent.PutEntry(aActor);

    return ManagedEndpoint<PPresentationRequestChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPresentationParent::BindPPresentationRequestEndpoint(
        ManagedEndpoint<PPresentationRequestParent> aEndpoint,
        PPresentationRequestParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationRequestParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPresentationRequestParent.PutEntry(aActor);

    return true;
}

auto PPresentationParent::SendNotifyAvailableChange(
        const nsTArray<nsString>& aAvailabilityUrls,
        const bool& aAvailable) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_NotifyAvailableChange(Id());

    WriteIPDLParam(msg__, this, aAvailabilityUrls);
    // Sentinel = 'aAvailabilityUrls'
    (msg__)->WriteSentinel(1009256163);
    WriteIPDLParam(msg__, this, aAvailable);
    // Sentinel = 'aAvailable'
    (msg__)->WriteSentinel(351077347);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyAvailableChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationParent::SendNotifySessionStateChange(
        const nsString& aSessionId,
        const uint16_t& aState,
        const nsresult& aReason) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_NotifySessionStateChange(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_NotifySessionStateChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationParent::SendNotifyMessage(
        const nsString& aSessionId,
        const nsCString& aData,
        const bool& aIsBinary) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_NotifyMessage(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);
    WriteIPDLParam(msg__, this, aIsBinary);
    // Sentinel = 'aIsBinary'
    (msg__)->WriteSentinel(279970691);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationParent::SendNotifySessionConnect(
        const uint64_t& aWindowId,
        const nsString& aSessionId) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_NotifySessionConnect(Id());

    WriteIPDLParam(msg__, this, aWindowId);
    // Sentinel = 'aWindowId'
    (msg__)->WriteSentinel(296223623);
    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_NotifySessionConnect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationParent::SendNotifyCloseSessionTransport(
        const nsString& aSessionId,
        const uint8_t& aRole,
        const nsresult& aReason) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_NotifyCloseSessionTransport(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aRole);
    // Sentinel = 'aRole'
    (msg__)->WriteSentinel(96207348);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyCloseSessionTransport", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationParent::SendPPresentationBuilderConstructor(
        const nsString& aSessionId,
        const uint8_t& aRole) -> PPresentationBuilderParent*
{
    PPresentationBuilderParent* actor = (static_cast<PresentationParent*>(this))->AllocPPresentationBuilderParent(aSessionId, aRole);
    return SendPPresentationBuilderConstructor(actor, aSessionId, aRole);
}

auto PPresentationParent::SendPPresentationBuilderConstructor(
        PPresentationBuilderParent* actor,
        const nsString& aSessionId,
        const uint8_t& aRole) -> PPresentationBuilderParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPresentationBuilderParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPresentationBuilderParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPresentation::Msg_PPresentationBuilderConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aRole);
    // Sentinel = 'aRole'
    (msg__)->WriteSentinel(96207348);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_PPresentationBuilderConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPresentationBuilderParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPresentationBuilderMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPresentationParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPresentationBuilderMsgStart:
{
            PPresentationBuilderParent* actor = static_cast<PPresentationBuilderParent*>(aListener);
            auto& container = mManagedPPresentationBuilderParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPresentationRequestMsgStart:
{
            PPresentationRequestParent* actor = static_cast<PPresentationRequestParent*>(aListener);
            auto& container = mManagedPPresentationRequestParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PPresentationParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPresentationBuilderMsgStart:
        static_cast<PresentationParent*>(this)->DeallocPPresentationBuilderParent(static_cast<PPresentationBuilderParent*>(aListener));
        return;
    case PPresentationRequestMsgStart:
        static_cast<PresentationParent*>(this)->DeallocPPresentationRequestParent(static_cast<PPresentationRequestParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PPresentationParent::OnMessageReceived(const Message& msg__) -> PPresentationParent::Result
{
    switch (msg__.type()) {
    case PPresentation::Reply_PPresentationBuilderConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPresentation::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PPresentationParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PPresentation'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PPresentation'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PPresentation'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PPresentationMsgStart, actor);

            return MsgProcessed;
        }
    case PPresentation::Msg_RegisterAvailabilityHandler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_RegisterAvailabilityHandler", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsString> aAvailabilityUrls{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAvailabilityUrls)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aAvailabilityUrls'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1009256163)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->RecvRegisterAvailabilityHandler(std::move(aAvailabilityUrls))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_UnregisterAvailabilityHandler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_UnregisterAvailabilityHandler", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsString> aAvailabilityUrls{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAvailabilityUrls)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aAvailabilityUrls'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1009256163)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->RecvUnregisterAvailabilityHandler(std::move(aAvailabilityUrls))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_RegisterSessionHandler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_RegisterSessionHandler", OTHER);

            PickleIterator iter__{msg__};
            nsString aSessionId{};
            uint8_t aRole{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRole)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRole'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 96207348)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->RecvRegisterSessionHandler(std::move(aSessionId), std::move(aRole))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_UnregisterSessionHandler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_UnregisterSessionHandler", OTHER);

            PickleIterator iter__{msg__};
            nsString aSessionId{};
            uint8_t aRole{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRole)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRole'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 96207348)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->RecvUnregisterSessionHandler(std::move(aSessionId), std::move(aRole))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_RegisterRespondingHandler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_RegisterRespondingHandler", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aWindowId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296223623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->RecvRegisterRespondingHandler(std::move(aWindowId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_UnregisterRespondingHandler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_UnregisterRespondingHandler", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aWindowId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296223623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->RecvUnregisterRespondingHandler(std::move(aWindowId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_PPresentationRequestConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_PPresentationRequestConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            PresentationIPCRequest aRequest{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequest)))))) {
                FatalError("Error deserializing 'PresentationIPCRequest'");
                return MsgValueError;
            }
            // Sentinel = 'aRequest'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 238945099)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PresentationIPCRequest'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPresentationRequestParent* actor = (static_cast<PresentationParent*>(this))->AllocPPresentationRequestParent(aRequest);
            if (!actor) {
                NS_WARNING("Cannot bind null PPresentationRequestParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPresentationRequestParent.PutEntry(actor);

            if ((!((static_cast<PresentationParent*>(this))->RecvPPresentationRequestConstructor(std::move(actor), std::move(aRequest))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_NotifyReceiverReady__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyReceiverReady", OTHER);

            PickleIterator iter__{msg__};
            nsString aSessionId{};
            uint64_t aWindowId{};
            bool aIsLoading{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296223623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsLoading)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsLoading'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 345899996)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->RecvNotifyReceiverReady(std::move(aSessionId), std::move(aWindowId), std::move(aIsLoading))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_NotifyTransportClosed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyTransportClosed", OTHER);

            PickleIterator iter__{msg__};
            nsString aSessionId{};
            uint8_t aRole{};
            nsresult aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRole)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRole'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 96207348)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationParent*>(this))->RecvNotifyTransportClosed(std::move(aSessionId), std::move(aRole), std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPresentationParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPresentationParent::Result
{
    return MsgNotKnown;
}

auto PPresentationParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPresentationParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PPresentationParent::ClearSubtree() -> void
{
    for (auto it = mManagedPPresentationBuilderParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPresentationBuilderParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPresentationBuilderParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPresentationBuilderParent.Clear();

    for (auto it = mManagedPPresentationRequestParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPresentationRequestParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPresentationRequestParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPresentationRequestParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PPresentationParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PPresentationParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPresentation", PPresentationMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PPresentationParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
