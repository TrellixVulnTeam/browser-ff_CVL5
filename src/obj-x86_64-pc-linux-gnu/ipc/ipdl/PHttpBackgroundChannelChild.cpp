//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PHttpBackgroundChannelChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/HttpBackgroundChannelChild.h"
#include "mozilla/net/NeckoMessageUtils.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/extensions/PStreamFilterChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PHttpBackgroundChannelChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PHttpBackgroundChannelChild::PHttpBackgroundChannelChild() :
    mozilla::ipc::IProtocol(PHttpBackgroundChannelMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PHttpBackgroundChannelChild);
}

PHttpBackgroundChannelChild::~PHttpBackgroundChannelChild()
{
    MOZ_COUNT_DTOR(PHttpBackgroundChannelChild);
}

auto PHttpBackgroundChannelChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PHttpBackgroundChannelChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHttpBackgroundChannelChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpBackgroundChannelChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpBackgroundChannelChild::OnMessageReceived(const Message& msg__) -> PHttpBackgroundChannelChild::Result
{
    switch (msg__.type()) {
    case PHttpBackgroundChannel::Msg_OnStartRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnStartRequest", OTHER);

            PickleIterator iter__{msg__};
            nsHttpResponseHead responseHead{};
            bool useResponseHead{};
            nsHttpHeaderArray requestHeaders{};
            HttpChannelOnStartRequestArgs args{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(responseHead)))))) {
                FatalError("Error deserializing 'nsHttpResponseHead'");
                return MsgValueError;
            }
            // Sentinel = 'responseHead'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 549651682)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsHttpResponseHead'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(useResponseHead)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'useResponseHead'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 831260175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestHeaders)))))) {
                FatalError("Error deserializing 'nsHttpHeaderArray'");
                return MsgValueError;
            }
            // Sentinel = 'requestHeaders'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 732693958)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsHttpHeaderArray'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(args)))))) {
                FatalError("Error deserializing 'HttpChannelOnStartRequestArgs'");
                return MsgValueError;
            }
            // Sentinel = 'args'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69140910)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HttpChannelOnStartRequestArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvOnStartRequest(std::move(responseHead), std::move(useResponseHead), std::move(requestHeaders), std::move(args))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_OnTransportAndData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnTransportAndData", OTHER);

            PickleIterator iter__{msg__};
            nsresult channelStatus{};
            nsresult transportStatus{};
            uint64_t offset{};
            uint32_t count{};
            nsDependentCSubstring data{};
            bool dataFromSocketProcess{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(channelStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'channelStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 618136926)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'transportStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 865273458)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(offset)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'offset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 147653256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(count)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'count'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106889770)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'nsDependentCSubstring'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDependentCSubstring'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dataFromSocketProcess)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'dataFromSocketProcess'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1537869943)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvOnTransportAndData(std::move(channelStatus), std::move(transportStatus), std::move(offset), std::move(count), std::move(data), std::move(dataFromSocketProcess))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_OnStopRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnStopRequest", OTHER);

            PickleIterator iter__{msg__};
            nsresult channelStatus{};
            ResourceTimingStructArgs timing{};
            TimeStamp lastActiveTabOptimization{};
            nsHttpHeaderArray responseTrailers{};
            nsTArray<ConsoleReportCollected> consoleReport{};
            bool fromSocketProcess{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(channelStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'channelStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 618136926)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(timing)))))) {
                FatalError("Error deserializing 'ResourceTimingStructArgs'");
                return MsgValueError;
            }
            // Sentinel = 'timing'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 150798985)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ResourceTimingStructArgs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lastActiveTabOptimization)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'lastActiveTabOptimization'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2190412335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(responseTrailers)))))) {
                FatalError("Error deserializing 'nsHttpHeaderArray'");
                return MsgValueError;
            }
            // Sentinel = 'responseTrailers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 961873590)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsHttpHeaderArray'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(consoleReport)))))) {
                FatalError("Error deserializing 'ConsoleReportCollected[]'");
                return MsgValueError;
            }
            // Sentinel = 'consoleReport'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 634652016)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ConsoleReportCollected[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fromSocketProcess)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'fromSocketProcess'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1049626365)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvOnStopRequest(std::move(channelStatus), std::move(timing), std::move(lastActiveTabOptimization), std::move(responseTrailers), std::move(consoleReport), std::move(fromSocketProcess))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_OnConsoleReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnConsoleReport", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<ConsoleReportCollected> consoleReport{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(consoleReport)))))) {
                FatalError("Error deserializing 'ConsoleReportCollected[]'");
                return MsgValueError;
            }
            // Sentinel = 'consoleReport'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 634652016)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ConsoleReportCollected[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvOnConsoleReport(std::move(consoleReport))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_OnProgress__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnProgress", OTHER);

            PickleIterator iter__{msg__};
            int64_t progress{};
            int64_t progressMax{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(progress)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'progress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 261292918)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(progressMax)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'progressMax'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 471205020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvOnProgress(std::move(progress), std::move(progressMax))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_OnStatus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnStatus", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvOnStatus(std::move(status))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_OnAfterLastPart__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnAfterLastPart", OTHER);

            PickleIterator iter__{msg__};
            nsresult aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvOnAfterLastPart(std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_NotifyClassificationFlags__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_NotifyClassificationFlags", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aClassificationFlags{};
            bool aIsThirdParty{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClassificationFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aClassificationFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1390741499)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsThirdParty)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsThirdParty'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 584058153)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvNotifyClassificationFlags(std::move(aClassificationFlags), std::move(aIsThirdParty))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_NotifyFlashPluginStateChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_NotifyFlashPluginStateChanged", OTHER);

            PickleIterator iter__{msg__};
            FlashPluginState aState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'FlashPluginState'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FlashPluginState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvNotifyFlashPluginStateChanged(std::move(aState))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_SetClassifierMatchedInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_SetClassifierMatchedInfo", OTHER);

            PickleIterator iter__{msg__};
            ClassifierInfo info{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'ClassifierInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClassifierInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvSetClassifierMatchedInfo(std::move(info))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_SetClassifierMatchedTrackingInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_SetClassifierMatchedTrackingInfo", OTHER);

            PickleIterator iter__{msg__};
            ClassifierInfo info{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'ClassifierInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClassifierInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvSetClassifierMatchedTrackingInfo(std::move(info))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg_AttachStreamFilter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_AttachStreamFilter", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::extensions::PStreamFilterParent> aEndpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::extensions::PStreamFilterParent>'");
                return MsgValueError;
            }
            // Sentinel = 'aEndpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::extensions::PStreamFilterParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->RecvAttachStreamFilter(std::move(aEndpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpBackgroundChannel::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpBackgroundChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PHttpBackgroundChannelChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PHttpBackgroundChannel'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PHttpBackgroundChannel'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpBackgroundChannel'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpBackgroundChannelChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PHttpBackgroundChannelMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHttpBackgroundChannelChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpBackgroundChannelChild::Result
{
    return MsgNotKnown;
}

auto PHttpBackgroundChannelChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpBackgroundChannelChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHttpBackgroundChannelChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PHttpBackgroundChannelChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PHttpBackgroundChannelChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHttpBackgroundChannel", PHttpBackgroundChannelMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PHttpBackgroundChannelChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
