//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundStorageParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/quota/SerializationHelpers.h"

#include "mozilla/ipc/PBackgroundParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PBackgroundStorageParent::PBackgroundStorageParent() :
    mozilla::ipc::IProtocol(PBackgroundStorageMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PBackgroundStorageParent);
}

PBackgroundStorageParent::~PBackgroundStorageParent()
{
    MOZ_COUNT_DTOR(PBackgroundStorageParent);
}

auto PBackgroundStorageParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PBackgroundStorageParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PBackgroundStorageParent::Send__delete__(PBackgroundStorageParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PBackgroundStorage::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PBackgroundStorageMsgStart, actor);
    return sendok__;
}

auto PBackgroundStorageParent::SendObserve(
        const nsCString& topic,
        const nsString& originAttributesPattern,
        const nsCString& originScope) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_Observe(Id());

    WriteIPDLParam(msg__, this, topic);
    // Sentinel = 'topic'
    (msg__)->WriteSentinel(109707808);
    WriteIPDLParam(msg__, this, originAttributesPattern);
    // Sentinel = 'originAttributesPattern'
    (msg__)->WriteSentinel(1917913486);
    WriteIPDLParam(msg__, this, originScope);
    // Sentinel = 'originScope'
    (msg__)->WriteSentinel(459080835);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_Observe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageParent::SendOriginsHavingData(const nsTArray<nsCString>& origins) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_OriginsHavingData(Id());

    WriteIPDLParam(msg__, this, origins);
    // Sentinel = 'origins'
    (msg__)->WriteSentinel(200213244);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_OriginsHavingData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageParent::SendLoadItem(
        const nsCString& originSuffix,
        const nsCString& originNoSuffix,
        const nsString& key,
        const nsString& value) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_LoadItem(Id());

    WriteIPDLParam(msg__, this, originSuffix);
    // Sentinel = 'originSuffix'
    (msg__)->WriteSentinel(544736510);
    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);
    WriteIPDLParam(msg__, this, key);
    // Sentinel = 'key'
    (msg__)->WriteSentinel(42402122);
    WriteIPDLParam(msg__, this, value);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(107610654);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_LoadItem", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageParent::SendLoadDone(
        const nsCString& originSuffix,
        const nsCString& originNoSuffix,
        const nsresult& rv) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_LoadDone(Id());

    WriteIPDLParam(msg__, this, originSuffix);
    // Sentinel = 'originSuffix'
    (msg__)->WriteSentinel(544736510);
    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);
    WriteIPDLParam(msg__, this, rv);
    // Sentinel = 'rv'
    (msg__)->WriteSentinel(22806761);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_LoadDone", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageParent::SendLoadUsage(
        const nsCString& scope,
        const int64_t& usage) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_LoadUsage(Id());

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, usage);
    // Sentinel = 'usage'
    (msg__)->WriteSentinel(108003862);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_LoadUsage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageParent::SendError(const nsresult& rv) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_Error(Id());

    WriteIPDLParam(msg__, this, rv);
    // Sentinel = 'rv'
    (msg__)->WriteSentinel(22806761);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_Error", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBackgroundStorageParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBackgroundStorageParent::OnMessageReceived(const Message& msg__) -> PBackgroundStorageParent::Result
{
    switch (msg__.type()) {
    case PBackgroundStorage::Msg_DeleteMe__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_DeleteMe", OTHER);

            if ((!((this)->RecvDeleteMe()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_AsyncPreload__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncPreload", OTHER);

            PickleIterator iter__{msg__};
            nsCString originSuffix{};
            nsCString originNoSuffix{};
            bool priority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 544736510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(priority)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'priority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 262865795)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAsyncPreload(std::move(originSuffix), std::move(originNoSuffix), std::move(priority))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_AsyncGetUsage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncGetUsage", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAsyncGetUsage(std::move(scope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_AsyncAddItem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncAddItem", OTHER);

            PickleIterator iter__{msg__};
            nsCString originSuffix{};
            nsCString originNoSuffix{};
            nsString key{};
            nsString value{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 544736510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(key)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'key'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 42402122)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(value)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'value'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAsyncAddItem(std::move(originSuffix), std::move(originNoSuffix), std::move(key), std::move(value))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_AsyncUpdateItem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncUpdateItem", OTHER);

            PickleIterator iter__{msg__};
            nsCString originSuffix{};
            nsCString originNoSuffix{};
            nsString key{};
            nsString value{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 544736510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(key)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'key'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 42402122)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(value)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'value'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAsyncUpdateItem(std::move(originSuffix), std::move(originNoSuffix), std::move(key), std::move(value))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_AsyncRemoveItem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncRemoveItem", OTHER);

            PickleIterator iter__{msg__};
            nsCString originSuffix{};
            nsCString originNoSuffix{};
            nsString key{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 544736510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(key)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'key'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 42402122)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAsyncRemoveItem(std::move(originSuffix), std::move(originNoSuffix), std::move(key))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_AsyncClear__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncClear", OTHER);

            PickleIterator iter__{msg__};
            nsCString originSuffix{};
            nsCString originNoSuffix{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 544736510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAsyncClear(std::move(originSuffix), std::move(originNoSuffix))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_AsyncFlush__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncFlush", OTHER);

            if ((!((this)->RecvAsyncFlush()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_Startup__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_Startup", OTHER);

            if ((!((this)->RecvStartup()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_ClearAll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_ClearAll", OTHER);

            if ((!((this)->RecvClearAll()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_ClearMatchingOrigin__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_ClearMatchingOrigin", OTHER);

            PickleIterator iter__{msg__};
            nsCString originNoSuffix{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvClearMatchingOrigin(std::move(originNoSuffix))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_ClearMatchingOriginAttributes__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_ClearMatchingOriginAttributes", OTHER);

            PickleIterator iter__{msg__};
            OriginAttributesPattern pattern{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pattern)))))) {
                FatalError("Error deserializing 'OriginAttributesPattern'");
                return MsgValueError;
            }
            // Sentinel = 'pattern'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200409855)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributesPattern'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvClearMatchingOriginAttributes(std::move(pattern))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundStorageParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundStorageParent::Result
{
    switch (msg__.type()) {
    case PBackgroundStorage::Msg_Preload__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_Preload", OTHER);

            PickleIterator iter__{msg__};
            nsCString originSuffix{};
            nsCString originNoSuffix{};
            uint32_t alreadyLoadedCount{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 544736510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(alreadyLoadedCount)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'alreadyLoadedCount'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1143015221)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<nsString> keys{};
            nsTArray<nsString> values{};
            nsresult rv{};
            if ((!((this)->RecvPreload(std::move(originSuffix), std::move(originNoSuffix), std::move(alreadyLoadedCount), (&(keys)), (&(values)), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBackgroundStorage::Reply_Preload(id__);

            WriteIPDLParam(reply__, this, keys);
            // Sentinel = 'keys'
            (reply__)->WriteSentinel(71565757);
            WriteIPDLParam(reply__, this, values);
            // Sentinel = 'values'
            (reply__)->WriteSentinel(150667921);
            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);

            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundStorageParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundStorageParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundStorageParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundStorageParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundStorageParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundStorage", PBackgroundStorageMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundStorageParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
