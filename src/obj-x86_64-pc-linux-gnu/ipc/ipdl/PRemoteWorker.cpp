//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PFetchEventOpProxyParent.h"
#include "mozilla/dom/PFetchEventOpProxyChild.h"
#include "mozilla/dom/PRemoteWorker.h"
#include "mozilla/dom/PRemoteWorkerParent.h"
#include "mozilla/dom/PRemoteWorkerChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PRemoteWorker {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PRemoteWorkerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PRemoteWorkerChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_Created(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Created__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Error(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Error__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Close(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Close__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetServiceWorkerSkipWaitingFlag(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetServiceWorkerSkipWaitingFlag__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SetServiceWorkerSkipWaitingFlag(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SetServiceWorkerSkipWaitingFlag__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PFetchEventOpProxyConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PFetchEventOpProxyConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PFetchEventOpProxyConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PFetchEventOpProxyConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ExecOp(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ExecOp__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ExecServiceWorkerOp(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ExecServiceWorkerOp__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ExecServiceWorkerOp(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ExecServiceWorkerOp__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PRemoteWorker
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerSuspendOp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerSuspendOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerSuspendOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerResumeOp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerResumeOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerResumeOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerFreezeOp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerFreezeOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerFreezeOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerThawOp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerThawOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerThawOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerTerminateOp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerTerminateOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerTerminateOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerPortIdentifierOp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerPortIdentifierOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).portIdentifier());
    // Sentinel = 'portIdentifier'
    (aMsg)->WriteSentinel(729875913);
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerPortIdentifierOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->portIdentifier())))))) {
        aActor->FatalError("Error deserializing 'portIdentifier' (MessagePortIdentifier) member of 'RemoteWorkerPortIdentifierOp'");
        return false;
    }
    // Sentinel = 'portIdentifier'
    if ((!((aMsg)->ReadSentinel(aIter, 729875913)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'portIdentifier' (MessagePortIdentifier) member of 'RemoteWorkerPortIdentifierOp'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerAddWindowIDOp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerAddWindowIDOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).windowID())), 8);
    // Sentinel = 'windowID'
    (aMsg)->WriteSentinel(253625126);
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerAddWindowIDOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->windowID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'windowID'
    if ((!((aMsg)->ReadSentinel(aIter, 253625126)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerRemoveWindowIDOp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerRemoveWindowIDOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).windowID())), 8);
    // Sentinel = 'windowID'
    (aMsg)->WriteSentinel(253625126);
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerRemoveWindowIDOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->windowID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'windowID'
    if ((!((aMsg)->ReadSentinel(aIter, 253625126)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union RemoteWorkerOp|
//
namespace mozilla {
namespace dom {
auto RemoteWorkerOp::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TRemoteWorkerSuspendOp:
        {
            (ptr_RemoteWorkerSuspendOp())->~RemoteWorkerSuspendOp__tdef();
            break;
        }
    case TRemoteWorkerResumeOp:
        {
            (ptr_RemoteWorkerResumeOp())->~RemoteWorkerResumeOp__tdef();
            break;
        }
    case TRemoteWorkerFreezeOp:
        {
            (ptr_RemoteWorkerFreezeOp())->~RemoteWorkerFreezeOp__tdef();
            break;
        }
    case TRemoteWorkerThawOp:
        {
            (ptr_RemoteWorkerThawOp())->~RemoteWorkerThawOp__tdef();
            break;
        }
    case TRemoteWorkerTerminateOp:
        {
            (ptr_RemoteWorkerTerminateOp())->~RemoteWorkerTerminateOp__tdef();
            break;
        }
    case TRemoteWorkerPortIdentifierOp:
        {
            (ptr_RemoteWorkerPortIdentifierOp())->~RemoteWorkerPortIdentifierOp__tdef();
            break;
        }
    case TRemoteWorkerAddWindowIDOp:
        {
            (ptr_RemoteWorkerAddWindowIDOp())->~RemoteWorkerAddWindowIDOp__tdef();
            break;
        }
    case TRemoteWorkerRemoveWindowIDOp:
        {
            (ptr_RemoteWorkerRemoveWindowIDOp())->~RemoteWorkerRemoveWindowIDOp__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerSuspendOp& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerSuspendOp()) RemoteWorkerSuspendOp(aOther);
    mType = TRemoteWorkerSuspendOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerSuspendOp&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerSuspendOp()) RemoteWorkerSuspendOp(std::move(aOther));
    mType = TRemoteWorkerSuspendOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerResumeOp& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerResumeOp()) RemoteWorkerResumeOp(aOther);
    mType = TRemoteWorkerResumeOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerResumeOp&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerResumeOp()) RemoteWorkerResumeOp(std::move(aOther));
    mType = TRemoteWorkerResumeOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerFreezeOp& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerFreezeOp()) RemoteWorkerFreezeOp(aOther);
    mType = TRemoteWorkerFreezeOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerFreezeOp&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerFreezeOp()) RemoteWorkerFreezeOp(std::move(aOther));
    mType = TRemoteWorkerFreezeOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerThawOp& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerThawOp()) RemoteWorkerThawOp(aOther);
    mType = TRemoteWorkerThawOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerThawOp&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerThawOp()) RemoteWorkerThawOp(std::move(aOther));
    mType = TRemoteWorkerThawOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerTerminateOp& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerTerminateOp()) RemoteWorkerTerminateOp(aOther);
    mType = TRemoteWorkerTerminateOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerTerminateOp&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerTerminateOp()) RemoteWorkerTerminateOp(std::move(aOther));
    mType = TRemoteWorkerTerminateOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerPortIdentifierOp& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerPortIdentifierOp()) RemoteWorkerPortIdentifierOp(aOther);
    mType = TRemoteWorkerPortIdentifierOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerPortIdentifierOp&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerPortIdentifierOp()) RemoteWorkerPortIdentifierOp(std::move(aOther));
    mType = TRemoteWorkerPortIdentifierOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerAddWindowIDOp& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerAddWindowIDOp()) RemoteWorkerAddWindowIDOp(aOther);
    mType = TRemoteWorkerAddWindowIDOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerAddWindowIDOp&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerAddWindowIDOp()) RemoteWorkerAddWindowIDOp(std::move(aOther));
    mType = TRemoteWorkerAddWindowIDOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerRemoveWindowIDOp& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerRemoveWindowIDOp()) RemoteWorkerRemoveWindowIDOp(aOther);
    mType = TRemoteWorkerRemoveWindowIDOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerRemoveWindowIDOp&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteWorkerRemoveWindowIDOp()) RemoteWorkerRemoveWindowIDOp(std::move(aOther));
    mType = TRemoteWorkerRemoveWindowIDOp;
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(const RemoteWorkerOp& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TRemoteWorkerSuspendOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerSuspendOp()) RemoteWorkerSuspendOp((aOther).get_RemoteWorkerSuspendOp());
            break;
        }
    case TRemoteWorkerResumeOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerResumeOp()) RemoteWorkerResumeOp((aOther).get_RemoteWorkerResumeOp());
            break;
        }
    case TRemoteWorkerFreezeOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerFreezeOp()) RemoteWorkerFreezeOp((aOther).get_RemoteWorkerFreezeOp());
            break;
        }
    case TRemoteWorkerThawOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerThawOp()) RemoteWorkerThawOp((aOther).get_RemoteWorkerThawOp());
            break;
        }
    case TRemoteWorkerTerminateOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerTerminateOp()) RemoteWorkerTerminateOp((aOther).get_RemoteWorkerTerminateOp());
            break;
        }
    case TRemoteWorkerPortIdentifierOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerPortIdentifierOp()) RemoteWorkerPortIdentifierOp((aOther).get_RemoteWorkerPortIdentifierOp());
            break;
        }
    case TRemoteWorkerAddWindowIDOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerAddWindowIDOp()) RemoteWorkerAddWindowIDOp((aOther).get_RemoteWorkerAddWindowIDOp());
            break;
        }
    case TRemoteWorkerRemoveWindowIDOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerRemoveWindowIDOp()) RemoteWorkerRemoveWindowIDOp((aOther).get_RemoteWorkerRemoveWindowIDOp());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT RemoteWorkerOp::RemoteWorkerOp(RemoteWorkerOp&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TRemoteWorkerSuspendOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerSuspendOp()) RemoteWorkerSuspendOp(std::move((aOther).get_RemoteWorkerSuspendOp()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerResumeOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerResumeOp()) RemoteWorkerResumeOp(std::move((aOther).get_RemoteWorkerResumeOp()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerFreezeOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerFreezeOp()) RemoteWorkerFreezeOp(std::move((aOther).get_RemoteWorkerFreezeOp()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerThawOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerThawOp()) RemoteWorkerThawOp(std::move((aOther).get_RemoteWorkerThawOp()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerTerminateOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerTerminateOp()) RemoteWorkerTerminateOp(std::move((aOther).get_RemoteWorkerTerminateOp()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerPortIdentifierOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerPortIdentifierOp()) RemoteWorkerPortIdentifierOp(std::move((aOther).get_RemoteWorkerPortIdentifierOp()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerAddWindowIDOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerAddWindowIDOp()) RemoteWorkerAddWindowIDOp(std::move((aOther).get_RemoteWorkerAddWindowIDOp()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerRemoveWindowIDOp:
        {
            new (mozilla::KnownNotNull, ptr_RemoteWorkerRemoveWindowIDOp()) RemoteWorkerRemoveWindowIDOp(std::move((aOther).get_RemoteWorkerRemoveWindowIDOp()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

RemoteWorkerOp::~RemoteWorkerOp()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerSuspendOp& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerSuspendOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerSuspendOp()) RemoteWorkerSuspendOp;
    }
    (*(ptr_RemoteWorkerSuspendOp())) = aRhs;
    mType = TRemoteWorkerSuspendOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerSuspendOp&& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerSuspendOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerSuspendOp()) RemoteWorkerSuspendOp;
    }
    (*(ptr_RemoteWorkerSuspendOp())) = std::move(aRhs);
    mType = TRemoteWorkerSuspendOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerResumeOp& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerResumeOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerResumeOp()) RemoteWorkerResumeOp;
    }
    (*(ptr_RemoteWorkerResumeOp())) = aRhs;
    mType = TRemoteWorkerResumeOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerResumeOp&& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerResumeOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerResumeOp()) RemoteWorkerResumeOp;
    }
    (*(ptr_RemoteWorkerResumeOp())) = std::move(aRhs);
    mType = TRemoteWorkerResumeOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerFreezeOp& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerFreezeOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerFreezeOp()) RemoteWorkerFreezeOp;
    }
    (*(ptr_RemoteWorkerFreezeOp())) = aRhs;
    mType = TRemoteWorkerFreezeOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerFreezeOp&& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerFreezeOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerFreezeOp()) RemoteWorkerFreezeOp;
    }
    (*(ptr_RemoteWorkerFreezeOp())) = std::move(aRhs);
    mType = TRemoteWorkerFreezeOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerThawOp& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerThawOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerThawOp()) RemoteWorkerThawOp;
    }
    (*(ptr_RemoteWorkerThawOp())) = aRhs;
    mType = TRemoteWorkerThawOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerThawOp&& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerThawOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerThawOp()) RemoteWorkerThawOp;
    }
    (*(ptr_RemoteWorkerThawOp())) = std::move(aRhs);
    mType = TRemoteWorkerThawOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerTerminateOp& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerTerminateOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerTerminateOp()) RemoteWorkerTerminateOp;
    }
    (*(ptr_RemoteWorkerTerminateOp())) = aRhs;
    mType = TRemoteWorkerTerminateOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerTerminateOp&& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerTerminateOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerTerminateOp()) RemoteWorkerTerminateOp;
    }
    (*(ptr_RemoteWorkerTerminateOp())) = std::move(aRhs);
    mType = TRemoteWorkerTerminateOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerPortIdentifierOp& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerPortIdentifierOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerPortIdentifierOp()) RemoteWorkerPortIdentifierOp;
    }
    (*(ptr_RemoteWorkerPortIdentifierOp())) = aRhs;
    mType = TRemoteWorkerPortIdentifierOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerPortIdentifierOp&& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerPortIdentifierOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerPortIdentifierOp()) RemoteWorkerPortIdentifierOp;
    }
    (*(ptr_RemoteWorkerPortIdentifierOp())) = std::move(aRhs);
    mType = TRemoteWorkerPortIdentifierOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerAddWindowIDOp& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerAddWindowIDOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerAddWindowIDOp()) RemoteWorkerAddWindowIDOp;
    }
    (*(ptr_RemoteWorkerAddWindowIDOp())) = aRhs;
    mType = TRemoteWorkerAddWindowIDOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerAddWindowIDOp&& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerAddWindowIDOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerAddWindowIDOp()) RemoteWorkerAddWindowIDOp;
    }
    (*(ptr_RemoteWorkerAddWindowIDOp())) = std::move(aRhs);
    mType = TRemoteWorkerAddWindowIDOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerRemoveWindowIDOp& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerRemoveWindowIDOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerRemoveWindowIDOp()) RemoteWorkerRemoveWindowIDOp;
    }
    (*(ptr_RemoteWorkerRemoveWindowIDOp())) = aRhs;
    mType = TRemoteWorkerRemoveWindowIDOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerRemoveWindowIDOp&& aRhs) -> RemoteWorkerOp&
{
    if (MaybeDestroy(TRemoteWorkerRemoveWindowIDOp)) {
        new (mozilla::KnownNotNull, ptr_RemoteWorkerRemoveWindowIDOp()) RemoteWorkerRemoveWindowIDOp;
    }
    (*(ptr_RemoteWorkerRemoveWindowIDOp())) = std::move(aRhs);
    mType = TRemoteWorkerRemoveWindowIDOp;
    return (*(this));
}

auto RemoteWorkerOp::operator=(const RemoteWorkerOp& aRhs) -> RemoteWorkerOp&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TRemoteWorkerSuspendOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerSuspendOp()) RemoteWorkerSuspendOp;
            }
            (*(ptr_RemoteWorkerSuspendOp())) = (aRhs).get_RemoteWorkerSuspendOp();
            break;
        }
    case TRemoteWorkerResumeOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerResumeOp()) RemoteWorkerResumeOp;
            }
            (*(ptr_RemoteWorkerResumeOp())) = (aRhs).get_RemoteWorkerResumeOp();
            break;
        }
    case TRemoteWorkerFreezeOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerFreezeOp()) RemoteWorkerFreezeOp;
            }
            (*(ptr_RemoteWorkerFreezeOp())) = (aRhs).get_RemoteWorkerFreezeOp();
            break;
        }
    case TRemoteWorkerThawOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerThawOp()) RemoteWorkerThawOp;
            }
            (*(ptr_RemoteWorkerThawOp())) = (aRhs).get_RemoteWorkerThawOp();
            break;
        }
    case TRemoteWorkerTerminateOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerTerminateOp()) RemoteWorkerTerminateOp;
            }
            (*(ptr_RemoteWorkerTerminateOp())) = (aRhs).get_RemoteWorkerTerminateOp();
            break;
        }
    case TRemoteWorkerPortIdentifierOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerPortIdentifierOp()) RemoteWorkerPortIdentifierOp;
            }
            (*(ptr_RemoteWorkerPortIdentifierOp())) = (aRhs).get_RemoteWorkerPortIdentifierOp();
            break;
        }
    case TRemoteWorkerAddWindowIDOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerAddWindowIDOp()) RemoteWorkerAddWindowIDOp;
            }
            (*(ptr_RemoteWorkerAddWindowIDOp())) = (aRhs).get_RemoteWorkerAddWindowIDOp();
            break;
        }
    case TRemoteWorkerRemoveWindowIDOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerRemoveWindowIDOp()) RemoteWorkerRemoveWindowIDOp;
            }
            (*(ptr_RemoteWorkerRemoveWindowIDOp())) = (aRhs).get_RemoteWorkerRemoveWindowIDOp();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto RemoteWorkerOp::operator=(RemoteWorkerOp&& aRhs) -> RemoteWorkerOp&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TRemoteWorkerSuspendOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerSuspendOp()) RemoteWorkerSuspendOp;
            }
            (*(ptr_RemoteWorkerSuspendOp())) = std::move((aRhs).get_RemoteWorkerSuspendOp());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerResumeOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerResumeOp()) RemoteWorkerResumeOp;
            }
            (*(ptr_RemoteWorkerResumeOp())) = std::move((aRhs).get_RemoteWorkerResumeOp());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerFreezeOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerFreezeOp()) RemoteWorkerFreezeOp;
            }
            (*(ptr_RemoteWorkerFreezeOp())) = std::move((aRhs).get_RemoteWorkerFreezeOp());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerThawOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerThawOp()) RemoteWorkerThawOp;
            }
            (*(ptr_RemoteWorkerThawOp())) = std::move((aRhs).get_RemoteWorkerThawOp());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerTerminateOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerTerminateOp()) RemoteWorkerTerminateOp;
            }
            (*(ptr_RemoteWorkerTerminateOp())) = std::move((aRhs).get_RemoteWorkerTerminateOp());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerPortIdentifierOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerPortIdentifierOp()) RemoteWorkerPortIdentifierOp;
            }
            (*(ptr_RemoteWorkerPortIdentifierOp())) = std::move((aRhs).get_RemoteWorkerPortIdentifierOp());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerAddWindowIDOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerAddWindowIDOp()) RemoteWorkerAddWindowIDOp;
            }
            (*(ptr_RemoteWorkerAddWindowIDOp())) = std::move((aRhs).get_RemoteWorkerAddWindowIDOp());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRemoteWorkerRemoveWindowIDOp:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteWorkerRemoveWindowIDOp()) RemoteWorkerRemoveWindowIDOp;
            }
            (*(ptr_RemoteWorkerRemoveWindowIDOp())) = std::move((aRhs).get_RemoteWorkerRemoveWindowIDOp());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerOp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::RemoteWorkerOp union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'RemoteWorkerOp'
    (aMsg)->WriteSentinel(706545062);

    switch (type) {
    case union__::TRemoteWorkerSuspendOp:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteWorkerSuspendOp());
            // Sentinel = 'TRemoteWorkerSuspendOp'
            (aMsg)->WriteSentinel(1692141788);
            return;
        }
    case union__::TRemoteWorkerResumeOp:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteWorkerResumeOp());
            // Sentinel = 'TRemoteWorkerResumeOp'
            (aMsg)->WriteSentinel(1537017963);
            return;
        }
    case union__::TRemoteWorkerFreezeOp:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteWorkerFreezeOp());
            // Sentinel = 'TRemoteWorkerFreezeOp'
            (aMsg)->WriteSentinel(1529350235);
            return;
        }
    case union__::TRemoteWorkerThawOp:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteWorkerThawOp());
            // Sentinel = 'TRemoteWorkerThawOp'
            (aMsg)->WriteSentinel(1256130446);
            return;
        }
    case union__::TRemoteWorkerTerminateOp:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteWorkerTerminateOp());
            // Sentinel = 'TRemoteWorkerTerminateOp'
            (aMsg)->WriteSentinel(2003569059);
            return;
        }
    case union__::TRemoteWorkerPortIdentifierOp:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteWorkerPortIdentifierOp());
            // Sentinel = 'TRemoteWorkerPortIdentifierOp'
            (aMsg)->WriteSentinel(2907114402);
            return;
        }
    case union__::TRemoteWorkerAddWindowIDOp:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteWorkerAddWindowIDOp());
            // Sentinel = 'TRemoteWorkerAddWindowIDOp'
            (aMsg)->WriteSentinel(2298219016);
            return;
        }
    case union__::TRemoteWorkerRemoveWindowIDOp:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteWorkerRemoveWindowIDOp());
            // Sentinel = 'TRemoteWorkerRemoveWindowIDOp'
            (aMsg)->WriteSentinel(2900822893);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerOp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::RemoteWorkerOp union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union RemoteWorkerOp");
        return false;
    }
    // Sentinel = 'RemoteWorkerOp'
    if ((!((aMsg)->ReadSentinel(aIter, 706545062)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union RemoteWorkerOp");
        return false;
    }

    switch (type) {
    case union__::TRemoteWorkerSuspendOp:
        {
            mozilla::dom::RemoteWorkerSuspendOp tmp = mozilla::dom::RemoteWorkerSuspendOp();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteWorkerSuspendOp())))))) {
                aActor->FatalError("Error deserializing variant TRemoteWorkerSuspendOp of union RemoteWorkerOp");
                return false;
            }
            // Sentinel = 'TRemoteWorkerSuspendOp'
            if ((!((aMsg)->ReadSentinel(aIter, 1692141788)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteWorkerSuspendOp of union RemoteWorkerOp");
                return false;
            }
            return true;
        }
    case union__::TRemoteWorkerResumeOp:
        {
            mozilla::dom::RemoteWorkerResumeOp tmp = mozilla::dom::RemoteWorkerResumeOp();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteWorkerResumeOp())))))) {
                aActor->FatalError("Error deserializing variant TRemoteWorkerResumeOp of union RemoteWorkerOp");
                return false;
            }
            // Sentinel = 'TRemoteWorkerResumeOp'
            if ((!((aMsg)->ReadSentinel(aIter, 1537017963)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteWorkerResumeOp of union RemoteWorkerOp");
                return false;
            }
            return true;
        }
    case union__::TRemoteWorkerFreezeOp:
        {
            mozilla::dom::RemoteWorkerFreezeOp tmp = mozilla::dom::RemoteWorkerFreezeOp();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteWorkerFreezeOp())))))) {
                aActor->FatalError("Error deserializing variant TRemoteWorkerFreezeOp of union RemoteWorkerOp");
                return false;
            }
            // Sentinel = 'TRemoteWorkerFreezeOp'
            if ((!((aMsg)->ReadSentinel(aIter, 1529350235)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteWorkerFreezeOp of union RemoteWorkerOp");
                return false;
            }
            return true;
        }
    case union__::TRemoteWorkerThawOp:
        {
            mozilla::dom::RemoteWorkerThawOp tmp = mozilla::dom::RemoteWorkerThawOp();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteWorkerThawOp())))))) {
                aActor->FatalError("Error deserializing variant TRemoteWorkerThawOp of union RemoteWorkerOp");
                return false;
            }
            // Sentinel = 'TRemoteWorkerThawOp'
            if ((!((aMsg)->ReadSentinel(aIter, 1256130446)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteWorkerThawOp of union RemoteWorkerOp");
                return false;
            }
            return true;
        }
    case union__::TRemoteWorkerTerminateOp:
        {
            mozilla::dom::RemoteWorkerTerminateOp tmp = mozilla::dom::RemoteWorkerTerminateOp();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteWorkerTerminateOp())))))) {
                aActor->FatalError("Error deserializing variant TRemoteWorkerTerminateOp of union RemoteWorkerOp");
                return false;
            }
            // Sentinel = 'TRemoteWorkerTerminateOp'
            if ((!((aMsg)->ReadSentinel(aIter, 2003569059)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteWorkerTerminateOp of union RemoteWorkerOp");
                return false;
            }
            return true;
        }
    case union__::TRemoteWorkerPortIdentifierOp:
        {
            mozilla::dom::RemoteWorkerPortIdentifierOp tmp = mozilla::dom::RemoteWorkerPortIdentifierOp();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteWorkerPortIdentifierOp())))))) {
                aActor->FatalError("Error deserializing variant TRemoteWorkerPortIdentifierOp of union RemoteWorkerOp");
                return false;
            }
            // Sentinel = 'TRemoteWorkerPortIdentifierOp'
            if ((!((aMsg)->ReadSentinel(aIter, 2907114402)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteWorkerPortIdentifierOp of union RemoteWorkerOp");
                return false;
            }
            return true;
        }
    case union__::TRemoteWorkerAddWindowIDOp:
        {
            mozilla::dom::RemoteWorkerAddWindowIDOp tmp = mozilla::dom::RemoteWorkerAddWindowIDOp();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteWorkerAddWindowIDOp())))))) {
                aActor->FatalError("Error deserializing variant TRemoteWorkerAddWindowIDOp of union RemoteWorkerOp");
                return false;
            }
            // Sentinel = 'TRemoteWorkerAddWindowIDOp'
            if ((!((aMsg)->ReadSentinel(aIter, 2298219016)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteWorkerAddWindowIDOp of union RemoteWorkerOp");
                return false;
            }
            return true;
        }
    case union__::TRemoteWorkerRemoveWindowIDOp:
        {
            mozilla::dom::RemoteWorkerRemoveWindowIDOp tmp = mozilla::dom::RemoteWorkerRemoveWindowIDOp();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteWorkerRemoveWindowIDOp())))))) {
                aActor->FatalError("Error deserializing variant TRemoteWorkerRemoveWindowIDOp of union RemoteWorkerOp");
                return false;
            }
            // Sentinel = 'TRemoteWorkerRemoveWindowIDOp'
            if ((!((aMsg)->ReadSentinel(aIter, 2900822893)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteWorkerRemoveWindowIDOp of union RemoteWorkerOp");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
