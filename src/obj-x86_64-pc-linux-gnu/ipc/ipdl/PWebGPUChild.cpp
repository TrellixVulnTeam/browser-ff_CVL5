//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/webgpu/PWebGPUChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/ByteBufUtils.h"
#include "mozilla/layers/WebRenderMessageUtils.h"
#include "mozilla/webgpu/WebGPUChild.h"
#include "mozilla/webgpu/WebGPUSerialize.h"

#include "mozilla/layers/PCompositorBridgeChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace webgpu {


auto PWebGPUChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PWebGPUChild::PWebGPUChild() :
    mozilla::ipc::IProtocol(PWebGPUMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PWebGPUChild);
}

PWebGPUChild::~PWebGPUChild()
{
    MOZ_COUNT_DTOR(PWebGPUChild);
}

auto PWebGPUChild::Manager() const -> PCompositorBridgeChild*
{
    return static_cast<PCompositorBridgeChild*>(IProtocol::Manager());
}

auto PWebGPUChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebGPUChild::SendDeviceAction(
        const RawId& selfId,
        ByteBuf&& buf) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_DeviceAction(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, std::move(buf));
    // Sentinel = 'buf'
    (msg__)->WriteSentinel(41484606);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_DeviceAction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendTextureAction(
        const RawId& selfId,
        const RawId& aDeviceId,
        ByteBuf&& buf) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_TextureAction(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, aDeviceId);
    // Sentinel = 'aDeviceId'
    (msg__)->WriteSentinel(282526559);
    WriteIPDLParam(msg__, this, std::move(buf));
    // Sentinel = 'buf'
    (msg__)->WriteSentinel(41484606);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_TextureAction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendCommandEncoderAction(
        const RawId& selfId,
        const RawId& aDeviceId,
        ByteBuf&& buf) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_CommandEncoderAction(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, aDeviceId);
    // Sentinel = 'aDeviceId'
    (msg__)->WriteSentinel(282526559);
    WriteIPDLParam(msg__, this, std::move(buf));
    // Sentinel = 'buf'
    (msg__)->WriteSentinel(41484606);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_CommandEncoderAction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendBumpImplicitBindGroupLayout(
        const RawId& pipelineId,
        const bool& isCompute,
        const uint32_t& index,
        const RawId& assignId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_BumpImplicitBindGroupLayout(Id());

    WriteIPDLParam(msg__, this, pipelineId);
    // Sentinel = 'pipelineId'
    (msg__)->WriteSentinel(382731268);
    WriteIPDLParam(msg__, this, isCompute);
    // Sentinel = 'isCompute'
    (msg__)->WriteSentinel(307102650);
    WriteIPDLParam(msg__, this, index);
    // Sentinel = 'index'
    (msg__)->WriteSentinel(104333849);
    WriteIPDLParam(msg__, this, assignId);
    // Sentinel = 'assignId'
    (msg__)->WriteSentinel(248513331);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_BumpImplicitBindGroupLayout", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendInstanceRequestAdapter(
        const GPURequestAdapterOptions& options,
        const nsTArray<RawId>& ids,
        mozilla::ipc::ResolveCallback<RawId>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWebGPU::Msg_InstanceRequestAdapter(Id());

    WriteIPDLParam(msg__, this, options);
    // Sentinel = 'options'
    (msg__)->WriteSentinel(204735245);
    WriteIPDLParam(msg__, this, ids);
    // Sentinel = 'ids'
    (msg__)->WriteSentinel(41484609);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_InstanceRequestAdapter", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWebGPUChild::SendInstanceRequestAdapter(
        const GPURequestAdapterOptions& options,
        const nsTArray<RawId>& ids) -> RefPtr<InstanceRequestAdapterPromise>
{
    RefPtr<MozPromise<RawId, ResponseRejectReason, true>::Private> promise__ = new MozPromise<RawId, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendInstanceRequestAdapter(std::move(options), std::move(ids), [promise__](RawId&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWebGPUChild::SendAdapterRequestDevice(
        const RawId& selfId,
        const GPUDeviceDescriptor& desc,
        const RawId& newId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_AdapterRequestDevice(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, desc);
    // Sentinel = 'desc'
    (msg__)->WriteSentinel(67895712);
    WriteIPDLParam(msg__, this, newId);
    // Sentinel = 'newId'
    (msg__)->WriteSentinel(102367736);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_AdapterRequestDevice", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendAdapterDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_AdapterDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_AdapterDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendBufferReturnShmem(
        const RawId& selfId,
        Shmem&& shmem) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_BufferReturnShmem(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, std::move(shmem));
    // Sentinel = 'shmem'
    (msg__)->WriteSentinel(107086363);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferReturnShmem", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendBufferMap(
        const RawId& selfId,
        const WGPUHostMap& hostMap,
        const uint64_t& offset,
        const uint64_t& size,
        mozilla::ipc::ResolveCallback<Shmem>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWebGPU::Msg_BufferMap(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, hostMap);
    // Sentinel = 'hostMap'
    (msg__)->WriteSentinel(195101405);
    WriteIPDLParam(msg__, this, offset);
    // Sentinel = 'offset'
    (msg__)->WriteSentinel(147653256);
    WriteIPDLParam(msg__, this, size);
    // Sentinel = 'size'
    (msg__)->WriteSentinel(73662908);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferMap", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWebGPUChild::SendBufferMap(
        const RawId& selfId,
        const WGPUHostMap& hostMap,
        const uint64_t& offset,
        const uint64_t& size) -> RefPtr<BufferMapPromise>
{
    RefPtr<MozPromise<Shmem, ResponseRejectReason, true>::Private> promise__ = new MozPromise<Shmem, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendBufferMap(std::move(selfId), std::move(hostMap), std::move(offset), std::move(size), [promise__](Shmem&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWebGPUChild::SendBufferUnmap(
        const RawId& selfId,
        Shmem&& shmem,
        const bool& flush) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_BufferUnmap(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, std::move(shmem));
    // Sentinel = 'shmem'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, flush);
    // Sentinel = 'flush'
    (msg__)->WriteSentinel(106955299);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferUnmap", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendBufferDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_BufferDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendTextureDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_TextureDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_TextureDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendTextureViewDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_TextureViewDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_TextureViewDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendSamplerDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_SamplerDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_SamplerDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendDeviceDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_DeviceDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_DeviceDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendCommandEncoderFinish(
        const RawId& selfId,
        const RawId& deviceId,
        const GPUCommandBufferDescriptor& desc) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_CommandEncoderFinish(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, deviceId);
    // Sentinel = 'deviceId'
    (msg__)->WriteSentinel(242025246);
    WriteIPDLParam(msg__, this, desc);
    // Sentinel = 'desc'
    (msg__)->WriteSentinel(67895712);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_CommandEncoderFinish", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendCommandEncoderDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_CommandEncoderDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_CommandEncoderDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendCommandBufferDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_CommandBufferDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_CommandBufferDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendQueueSubmit(
        const RawId& selfId,
        const nsTArray<RawId>& commandBuffers) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_QueueSubmit(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, commandBuffers);
    // Sentinel = 'commandBuffers'
    (msg__)->WriteSentinel(710280621);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_QueueSubmit", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendQueueWriteBuffer(
        const RawId& selfId,
        const RawId& bufferId,
        const BufferAddress& bufferOffset,
        Shmem&& shmem) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_QueueWriteBuffer(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, bufferId);
    // Sentinel = 'bufferId'
    (msg__)->WriteSentinel(244122408);
    WriteIPDLParam(msg__, this, bufferOffset);
    // Sentinel = 'bufferOffset'
    (msg__)->WriteSentinel(529138914);
    WriteIPDLParam(msg__, this, std::move(shmem));
    // Sentinel = 'shmem'
    (msg__)->WriteSentinel(107086363);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_QueueWriteBuffer", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendQueueWriteTexture(
        const RawId& selfId,
        const WGPUTextureCopyView& destination,
        Shmem&& shmem,
        const WGPUTextureDataLayout& layout,
        const WGPUExtent3d& extent) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_QueueWriteTexture(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, destination);
    // Sentinel = 'destination'
    (msg__)->WriteSentinel(463668387);
    WriteIPDLParam(msg__, this, std::move(shmem));
    // Sentinel = 'shmem'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, layout);
    // Sentinel = 'layout'
    (msg__)->WriteSentinel(151126687);
    WriteIPDLParam(msg__, this, extent);
    // Sentinel = 'extent'
    (msg__)->WriteSentinel(151716505);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_QueueWriteTexture", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendBindGroupLayoutDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_BindGroupLayoutDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_BindGroupLayoutDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendPipelineLayoutDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_PipelineLayoutDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_PipelineLayoutDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendBindGroupDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_BindGroupDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_BindGroupDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendShaderModuleDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_ShaderModuleDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_ShaderModuleDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendComputePipelineDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_ComputePipelineDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_ComputePipelineDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendRenderPipelineDestroy(const RawId& selfId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_RenderPipelineDestroy(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_RenderPipelineDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendDeviceCreateSwapChain(
        const RawId& selfId,
        const RawId& queueId,
        const RGBDescriptor& desc,
        const nsTArray<RawId>& bufferIds,
        const ExternalImageId& externalId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_DeviceCreateSwapChain(Id());

    WriteIPDLParam(msg__, this, selfId);
    // Sentinel = 'selfId'
    (msg__)->WriteSentinel(143196760);
    WriteIPDLParam(msg__, this, queueId);
    // Sentinel = 'queueId'
    (msg__)->WriteSentinel(198050515);
    WriteIPDLParam(msg__, this, desc);
    // Sentinel = 'desc'
    (msg__)->WriteSentinel(67895712);
    WriteIPDLParam(msg__, this, bufferIds);
    // Sentinel = 'bufferIds'
    (msg__)->WriteSentinel(304612251);
    WriteIPDLParam(msg__, this, externalId);
    // Sentinel = 'externalId'
    (msg__)->WriteSentinel(388432913);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_DeviceCreateSwapChain", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendSwapChainPresent(
        const ExternalImageId& externalId,
        const RawId& textureId,
        const RawId& commandEncoderId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_SwapChainPresent(Id());

    WriteIPDLParam(msg__, this, externalId);
    // Sentinel = 'externalId'
    (msg__)->WriteSentinel(388432913);
    WriteIPDLParam(msg__, this, textureId);
    // Sentinel = 'textureId'
    (msg__)->WriteSentinel(326828991);
    WriteIPDLParam(msg__, this, commandEncoderId);
    // Sentinel = 'commandEncoderId'
    (msg__)->WriteSentinel(913180237);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_SwapChainPresent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendSwapChainDestroy(const ExternalImageId& externalId) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_SwapChainDestroy(Id());

    WriteIPDLParam(msg__, this, externalId);
    // Sentinel = 'externalId'
    (msg__)->WriteSentinel(388432913);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_SwapChainDestroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::SendShutdown() -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebGPUChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebGPUChild::OnMessageReceived(const Message& msg__) -> PWebGPUChild::Result
{
    switch (msg__.type()) {
    case PWebGPU::Reply_InstanceRequestAdapter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_InstanceRequestAdapter", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<RawId> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                RawId adapterId{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(adapterId)))))) {
                    FatalError("Error deserializing 'RawId'");
                    return MsgValueError;
                }
                // Sentinel = 'adapterId'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301794191)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(adapterId));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PWebGPU::Reply_BufferMap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferMap", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<Shmem> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                Shmem sm{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sm)))))) {
                    FatalError("Error deserializing 'Shmem'");
                    return MsgValueError;
                }
                // Sentinel = 'sm'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 22348001)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(sm));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PWebGPU::Msg_Error__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_Error", OTHER);

            PickleIterator iter__{msg__};
            RawId aDeviceId{};
            nsCString message{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDeviceId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'aDeviceId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 282526559)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvError(std::move(aDeviceId), std::move(message))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_DropAction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_DropAction", OTHER);

            PickleIterator iter__{msg__};
            ByteBuf buf{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buf)))))) {
                FatalError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            // Sentinel = 'buf'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41484606)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvDropAction(std::move(buf))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeAdapter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeAdapter", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeAdapter(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeDevice__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeDevice", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeDevice(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreePipelineLayout__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreePipelineLayout", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreePipelineLayout(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeShaderModule__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeShaderModule", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeShaderModule(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeBindGroupLayout__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeBindGroupLayout", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeBindGroupLayout(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeBindGroup__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeBindGroup", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeBindGroup(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeCommandBuffer__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeCommandBuffer", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeCommandBuffer(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeRenderPipeline__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeRenderPipeline", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeRenderPipeline(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeComputePipeline__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeComputePipeline", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeComputePipeline(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeBuffer__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeBuffer", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeBuffer(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeTexture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeTexture", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeTexture(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeTextureView__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeTextureView", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeTextureView(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_FreeSampler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeSampler", OTHER);

            PickleIterator iter__{msg__};
            RawId id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->RecvFreeSampler(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWebGPUChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWebGPU'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWebGPU'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebGPU'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWebGPUMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebGPUChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebGPUChild::Result
{
    return MsgNotKnown;
}

auto PWebGPUChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebGPUChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebGPUChild::ClearSubtree() -> void
{
}



} // namespace webgpu
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::webgpu::PWebGPUChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::webgpu::PWebGPUChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebGPU", PWebGPUMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::webgpu::PWebGPUChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
