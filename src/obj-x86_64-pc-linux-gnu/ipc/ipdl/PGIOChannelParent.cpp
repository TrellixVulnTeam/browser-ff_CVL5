//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PGIOChannelParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/net/PNeckoParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PGIOChannelParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PGIOChannelParent::PGIOChannelParent() :
    mozilla::ipc::IProtocol(PGIOChannelMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PGIOChannelParent);
}

PGIOChannelParent::~PGIOChannelParent()
{
    MOZ_COUNT_DTOR(PGIOChannelParent);
}

auto PGIOChannelParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PGIOChannelParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PGIOChannelParent::SendOnStartRequest(
        const nsresult& aChannelStatus,
        const int64_t& aContentLength,
        const nsCString& aContentType,
        const nsCString& aEntityID,
        const URIParams& aURI) -> bool
{
    IPC::Message* msg__ = PGIOChannel::Msg_OnStartRequest(Id());

    WriteIPDLParam(msg__, this, aChannelStatus);
    // Sentinel = 'aChannelStatus'
    (msg__)->WriteSentinel(679937439);
    WriteIPDLParam(msg__, this, aContentLength);
    // Sentinel = 'aContentLength'
    (msg__)->WriteSentinel(694158751);
    WriteIPDLParam(msg__, this, aContentType);
    // Sentinel = 'aContentType'
    (msg__)->WriteSentinel(518522079);
    WriteIPDLParam(msg__, this, aEntityID);
    // Sentinel = 'aEntityID'
    (msg__)->WriteSentinel(292684652);
    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);




    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg_OnStartRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGIOChannelParent::SendOnDataAvailable(
        const nsresult& channelStatus,
        const nsCString& data,
        const uint64_t& offset,
        const uint32_t& count) -> bool
{
    IPC::Message* msg__ = PGIOChannel::Msg_OnDataAvailable(Id());

    WriteIPDLParam(msg__, this, channelStatus);
    // Sentinel = 'channelStatus'
    (msg__)->WriteSentinel(618136926);
    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);
    WriteIPDLParam(msg__, this, offset);
    // Sentinel = 'offset'
    (msg__)->WriteSentinel(147653256);
    WriteIPDLParam(msg__, this, count);
    // Sentinel = 'count'
    (msg__)->WriteSentinel(106889770);




    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg_OnDataAvailable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGIOChannelParent::SendOnStopRequest(const nsresult& channelStatus) -> bool
{
    IPC::Message* msg__ = PGIOChannel::Msg_OnStopRequest(Id());

    WriteIPDLParam(msg__, this, channelStatus);
    // Sentinel = 'channelStatus'
    (msg__)->WriteSentinel(618136926);




    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg_OnStopRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGIOChannelParent::SendFailedAsyncOpen(const nsresult& statusCode) -> bool
{
    IPC::Message* msg__ = PGIOChannel::Msg_FailedAsyncOpen(Id());

    WriteIPDLParam(msg__, this, statusCode);
    // Sentinel = 'statusCode'
    (msg__)->WriteSentinel(391316512);




    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg_FailedAsyncOpen", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGIOChannelParent::SendDeleteSelf() -> bool
{
    IPC::Message* msg__ = PGIOChannel::Msg_DeleteSelf(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg_DeleteSelf", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGIOChannelParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGIOChannelParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGIOChannelParent::OnMessageReceived(const Message& msg__) -> PGIOChannelParent::Result
{
    switch (msg__.type()) {
    case PGIOChannel::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PGIOChannelParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PGIOChannel'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PGIOChannel'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PGIOChannel'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PGIOChannelMsgStart, actor);

            return MsgProcessed;
        }
    case PGIOChannel::Msg_Cancel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg_Cancel", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvCancel(std::move(status))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGIOChannel::Msg_Suspend__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg_Suspend", OTHER);

            if ((!((this)->RecvSuspend()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGIOChannel::Msg_Resume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg_Resume", OTHER);

            if ((!((this)->RecvResume()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGIOChannelParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGIOChannelParent::Result
{
    return MsgNotKnown;
}

auto PGIOChannelParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGIOChannelParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PGIOChannelParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PGIOChannelParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PGIOChannelParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGIOChannel", PGIOChannelMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PGIOChannelParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
