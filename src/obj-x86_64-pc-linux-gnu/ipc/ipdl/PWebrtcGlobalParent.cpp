//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PWebrtcGlobalParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/RTCStatsReportBinding.h"
#include "mozilla/media/webrtc/WebrtcGlobal.h"

#include "mozilla/dom/PContentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PWebrtcGlobalParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PWebrtcGlobalParent::PWebrtcGlobalParent() :
    mozilla::ipc::IProtocol(PWebrtcGlobalMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWebrtcGlobalParent);
}

PWebrtcGlobalParent::~PWebrtcGlobalParent()
{
    MOZ_COUNT_DTOR(PWebrtcGlobalParent);
}

auto PWebrtcGlobalParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PWebrtcGlobalParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebrtcGlobalParent::SendGetStats(
        const nsString& aPcIdFilter,
        mozilla::ipc::ResolveCallback<nsTArray<RTCStatsReportInternal>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWebrtcGlobal::Msg_GetStats(Id());

    WriteIPDLParam(msg__, this, aPcIdFilter);
    // Sentinel = 'aPcIdFilter'
    (msg__)->WriteSentinel(399377448);




    if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebrtcGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_GetStats", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWebrtcGlobalParent::SendGetStats(const nsString& aPcIdFilter) -> RefPtr<GetStatsPromise>
{
    RefPtr<MozPromise<nsTArray<RTCStatsReportInternal>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsTArray<RTCStatsReportInternal>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetStats(std::move(aPcIdFilter), [promise__](nsTArray<RTCStatsReportInternal>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWebrtcGlobalParent::SendClearStats() -> bool
{
    IPC::Message* msg__ = PWebrtcGlobal::Msg_ClearStats(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebrtcGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_ClearStats", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebrtcGlobalParent::SendGetLog(
        mozilla::ipc::ResolveCallback<WebrtcGlobalLog>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWebrtcGlobal::Msg_GetLog(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebrtcGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_GetLog", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWebrtcGlobalParent::SendGetLog() -> RefPtr<GetLogPromise>
{
    RefPtr<MozPromise<WebrtcGlobalLog, ResponseRejectReason, true>::Private> promise__ = new MozPromise<WebrtcGlobalLog, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetLog([promise__](WebrtcGlobalLog&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWebrtcGlobalParent::SendClearLog() -> bool
{
    IPC::Message* msg__ = PWebrtcGlobal::Msg_ClearLog(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebrtcGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_ClearLog", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebrtcGlobalParent::SendSetAecLogging(const bool& aEnable) -> bool
{
    IPC::Message* msg__ = PWebrtcGlobal::Msg_SetAecLogging(Id());

    WriteIPDLParam(msg__, this, aEnable);
    // Sentinel = 'aEnable'
    (msg__)->WriteSentinel(173605545);




    if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebrtcGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_SetAecLogging", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebrtcGlobalParent::SendSetDebugMode(const int& aLevel) -> bool
{
    IPC::Message* msg__ = PWebrtcGlobal::Msg_SetDebugMode(Id());

    WriteIPDLParam(msg__, this, aLevel);
    // Sentinel = 'aLevel'
    (msg__)->WriteSentinel(133431898);




    if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebrtcGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_SetDebugMode", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebrtcGlobalParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebrtcGlobalParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebrtcGlobalParent::OnMessageReceived(const Message& msg__) -> PWebrtcGlobalParent::Result
{
    switch (msg__.type()) {
    case PWebrtcGlobal::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWebrtcGlobalParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWebrtcGlobal'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWebrtcGlobal'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebrtcGlobal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWebrtcGlobalMsgStart, actor);

            return MsgProcessed;
        }
    case PWebrtcGlobal::Reply_GetStats__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_GetStats", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsTArray<RTCStatsReportInternal>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsTArray<RTCStatsReportInternal> stats{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stats)))))) {
                    FatalError("Error deserializing 'RTCStatsReportInternal[]'");
                    return MsgValueError;
                }
                // Sentinel = 'stats'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 110232112)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'RTCStatsReportInternal[]'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(stats));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PWebrtcGlobal::Reply_GetLog__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebrtcGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebrtcGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebrtcGlobal::Msg_GetLog", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<WebrtcGlobalLog> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                WebrtcGlobalLog logs{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(logs)))))) {
                    FatalError("Error deserializing 'WebrtcGlobalLog'");
                    return MsgValueError;
                }
                // Sentinel = 'logs'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 71434678)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'WebrtcGlobalLog'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(logs));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebrtcGlobalParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebrtcGlobalParent::Result
{
    return MsgNotKnown;
}

auto PWebrtcGlobalParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebrtcGlobalParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebrtcGlobalParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PWebrtcGlobalParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PWebrtcGlobalParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebrtcGlobal", PWebrtcGlobalMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PWebrtcGlobalParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
