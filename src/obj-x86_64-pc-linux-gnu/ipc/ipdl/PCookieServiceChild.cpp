//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PCookieServiceChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/net/CookieServiceChild.h"

#include "mozilla/net/PNeckoChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PCookieServiceChild::PCookieServiceChild() :
    mozilla::ipc::IProtocol(PCookieServiceMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PCookieServiceChild);
}

PCookieServiceChild::~PCookieServiceChild()
{
    MOZ_COUNT_DTOR(PCookieServiceChild);
}

auto PCookieServiceChild::Manager() const -> PNeckoChild*
{
    return static_cast<PNeckoChild*>(IProtocol::Manager());
}

auto PCookieServiceChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PCookieServiceChild::SendSetCookies(
        const nsCString& baseDomain,
        const OriginAttributes& attrs,
        nsIURI* host,
        const bool& fromHttp,
        const nsTArray<CookieStruct>& cookies) -> bool
{
    IPC::Message* msg__ = PCookieService::Msg_SetCookies(Id());

    WriteIPDLParam(msg__, this, baseDomain);
    // Sentinel = 'baseDomain'
    (msg__)->WriteSentinel(360449012);
    WriteIPDLParam(msg__, this, attrs);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(107807279);
    WriteIPDLParam(msg__, this, host);
    // Sentinel = 'host'
    (msg__)->WriteSentinel(72024511);
    WriteIPDLParam(msg__, this, fromHttp);
    // Sentinel = 'fromHttp'
    (msg__)->WriteSentinel(249889621);
    WriteIPDLParam(msg__, this, cookies);
    // Sentinel = 'cookies'
    (msg__)->WriteSentinel(195363566);




    if (mozilla::ipc::LoggingEnabledFor("PCookieServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCookieServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCookieService::Msg_SetCookies", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCookieServiceChild::SendPrepareCookieList(
        nsIURI* host,
        const bool& isForeign,
        const bool& isThirdPartyTrackingResource,
        const bool& isThirdPartySocialTrackingResource,
        const bool& firstPartyStorageAccessPermissionGranted,
        const uint32_t& rejectedReason,
        const bool& isSafeTopLevelNav,
        const bool& isSameSiteForeign,
        const OriginAttributes& attrs) -> bool
{
    IPC::Message* msg__ = PCookieService::Msg_PrepareCookieList(Id());

    WriteIPDLParam(msg__, this, host);
    // Sentinel = 'host'
    (msg__)->WriteSentinel(72024511);
    WriteIPDLParam(msg__, this, isForeign);
    // Sentinel = 'isForeign'
    (msg__)->WriteSentinel(303760295);
    WriteIPDLParam(msg__, this, isThirdPartyTrackingResource);
    // Sentinel = 'isThirdPartyTrackingResource'
    (msg__)->WriteSentinel(2753301347);
    WriteIPDLParam(msg__, this, isThirdPartySocialTrackingResource);
    // Sentinel = 'isThirdPartySocialTrackingResource'
    (msg__)->WriteSentinel(4014869950);
    WriteIPDLParam(msg__, this, firstPartyStorageAccessPermissionGranted);
    // Sentinel = 'firstPartyStorageAccessPermissionGranted'
    (msg__)->WriteSentinel(1328746574);
    WriteIPDLParam(msg__, this, rejectedReason);
    // Sentinel = 'rejectedReason'
    (msg__)->WriteSentinel(714999215);
    WriteIPDLParam(msg__, this, isSafeTopLevelNav);
    // Sentinel = 'isSafeTopLevelNav'
    (msg__)->WriteSentinel(1004734124);
    WriteIPDLParam(msg__, this, isSameSiteForeign);
    // Sentinel = 'isSameSiteForeign'
    (msg__)->WriteSentinel(1012532930);
    WriteIPDLParam(msg__, this, attrs);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(107807279);




    if (mozilla::ipc::LoggingEnabledFor("PCookieServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCookieServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCookieService::Msg_PrepareCookieList", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCookieServiceChild::Send__delete__(PCookieServiceChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PCookieService::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PCookieServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCookieServiceChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCookieService::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PCookieServiceMsgStart, actor);
    return sendok__;
}

auto PCookieServiceChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCookieServiceChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCookieServiceChild::OnMessageReceived(const Message& msg__) -> PCookieServiceChild::Result
{
    switch (msg__.type()) {
    case PCookieService::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PCookieService::Msg_TrackCookiesLoad__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCookieServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCookieServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCookieService::Msg_TrackCookiesLoad", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<CookieStruct> cookiesList{};
            OriginAttributes attrs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cookiesList)))))) {
                FatalError("Error deserializing 'CookieStruct[]'");
                return MsgValueError;
            }
            // Sentinel = 'cookiesList'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 455214218)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CookieStruct[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(attrs)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'attrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107807279)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CookieServiceChild*>(this))->RecvTrackCookiesLoad(std::move(cookiesList), std::move(attrs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCookieService::Msg_RemoveCookie__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCookieServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCookieServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCookieService::Msg_RemoveCookie", OTHER);

            PickleIterator iter__{msg__};
            CookieStruct cookie{};
            OriginAttributes attrs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cookie)))))) {
                FatalError("Error deserializing 'CookieStruct'");
                return MsgValueError;
            }
            // Sentinel = 'cookie'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146211451)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CookieStruct'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(attrs)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'attrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107807279)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CookieServiceChild*>(this))->RecvRemoveCookie(std::move(cookie), std::move(attrs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCookieService::Msg_RemoveBatchDeletedCookies__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCookieServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCookieServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCookieService::Msg_RemoveBatchDeletedCookies", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<CookieStruct> cookiesList{};
            nsTArray<OriginAttributes> attrsList{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cookiesList)))))) {
                FatalError("Error deserializing 'CookieStruct[]'");
                return MsgValueError;
            }
            // Sentinel = 'cookiesList'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 455214218)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CookieStruct[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(attrsList)))))) {
                FatalError("Error deserializing 'OriginAttributes[]'");
                return MsgValueError;
            }
            // Sentinel = 'attrsList'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 317588427)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CookieServiceChild*>(this))->RecvRemoveBatchDeletedCookies(std::move(cookiesList), std::move(attrsList))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCookieService::Msg_RemoveAll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCookieServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCookieServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCookieService::Msg_RemoveAll", OTHER);

            if ((!((static_cast<CookieServiceChild*>(this))->RecvRemoveAll()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCookieService::Msg_AddCookie__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCookieServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCookieServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCookieService::Msg_AddCookie", OTHER);

            PickleIterator iter__{msg__};
            CookieStruct cookie{};
            OriginAttributes attrs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cookie)))))) {
                FatalError("Error deserializing 'CookieStruct'");
                return MsgValueError;
            }
            // Sentinel = 'cookie'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146211451)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CookieStruct'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(attrs)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'attrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107807279)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CookieServiceChild*>(this))->RecvAddCookie(std::move(cookie), std::move(attrs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PCookieServiceChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PCookieServiceChild::Result
{
    return MsgNotKnown;
}

auto PCookieServiceChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PCookieServiceChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PCookieServiceChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PCookieServiceChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PCookieServiceChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PCookieService", PCookieServiceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PCookieServiceChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
