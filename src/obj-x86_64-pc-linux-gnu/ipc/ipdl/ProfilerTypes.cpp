//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ProfilerTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ProfilerInitParams|
//
namespace mozilla {
auto ProfilerInitParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ProfilerInitParams, activeBrowsingContextID_) - offsetof(ProfilerInitParams, interval_)) == 8,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(ProfilerInitParams, features_) - offsetof(ProfilerInitParams, entries_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ProfilerInitParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).enabled());
    // Sentinel = 'enabled'
    (aMsg)->WriteSentinel(188547788);
    WriteIPDLParam(aMsg, aActor, (aVar).duration());
    // Sentinel = 'duration'
    (aMsg)->WriteSentinel(256050023);
    WriteIPDLParam(aMsg, aActor, (aVar).filters());
    // Sentinel = 'filters'
    (aMsg)->WriteSentinel(196674298);
    (aMsg)->WriteBytes((&((aVar).interval())), 16);
    // Sentinel = 'interval | activeBrowsingContextID'
    (aMsg)->WriteSentinel(3934260571);
    (aMsg)->WriteBytes((&((aVar).entries())), 8);
    // Sentinel = 'entries | features'
    (aMsg)->WriteSentinel(1122436886);
}

auto IPDLParamTraits<mozilla::ProfilerInitParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->enabled())))))) {
        aActor->FatalError("Error deserializing 'enabled' (bool) member of 'ProfilerInitParams'");
        return false;
    }
    // Sentinel = 'enabled'
    if ((!((aMsg)->ReadSentinel(aIter, 188547788)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'enabled' (bool) member of 'ProfilerInitParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->duration())))))) {
        aActor->FatalError("Error deserializing 'duration' (double?) member of 'ProfilerInitParams'");
        return false;
    }
    // Sentinel = 'duration'
    if ((!((aMsg)->ReadSentinel(aIter, 256050023)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'duration' (double?) member of 'ProfilerInitParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filters())))))) {
        aActor->FatalError("Error deserializing 'filters' (nsCString[]) member of 'ProfilerInitParams'");
        return false;
    }
    // Sentinel = 'filters'
    if ((!((aMsg)->ReadSentinel(aIter, 196674298)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filters' (nsCString[]) member of 'ProfilerInitParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->interval())), 16)))) {
        aActor->FatalError("Error bulk reading fields from double");
        return false;
    }
    // Sentinel = 'interval | activeBrowsingContextID'
    if ((!((aMsg)->ReadSentinel(aIter, 3934260571)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from double");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->entries())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'entries | features'
    if ((!((aMsg)->ReadSentinel(aIter, 1122436886)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ProfileBufferChunkMetadata|
//
namespace mozilla {
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ProfileBufferChunkMetadata>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).doneTimeStamp());
    // Sentinel = 'doneTimeStamp'
    (aMsg)->WriteSentinel(611452219);
    (aMsg)->WriteBytes((&((aVar).bufferBytes())), 4);
    // Sentinel = 'bufferBytes'
    (aMsg)->WriteSentinel(449774722);
}

auto IPDLParamTraits<mozilla::ProfileBufferChunkMetadata>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->doneTimeStamp())))))) {
        aActor->FatalError("Error deserializing 'doneTimeStamp' (TimeStamp) member of 'ProfileBufferChunkMetadata'");
        return false;
    }
    // Sentinel = 'doneTimeStamp'
    if ((!((aMsg)->ReadSentinel(aIter, 611452219)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'doneTimeStamp' (TimeStamp) member of 'ProfileBufferChunkMetadata'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->bufferBytes())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'bufferBytes'
    if ((!((aMsg)->ReadSentinel(aIter, 449774722)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ProfileBufferChunkManagerUpdate|
//
namespace mozilla {
auto ProfileBufferChunkManagerUpdate::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ProfileBufferChunkManagerUpdate, releasedBytes_) - offsetof(ProfileBufferChunkManagerUpdate, unreleasedBytes_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ProfileBufferChunkManagerUpdate>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).oldestDoneTimeStamp());
    // Sentinel = 'oldestDoneTimeStamp'
    (aMsg)->WriteSentinel(1286997926);
    WriteIPDLParam(aMsg, aActor, (aVar).newlyReleasedChunks());
    // Sentinel = 'newlyReleasedChunks'
    (aMsg)->WriteSentinel(1305675713);
    (aMsg)->WriteBytes((&((aVar).unreleasedBytes())), 16);
    // Sentinel = 'unreleasedBytes | releasedBytes'
    (aMsg)->WriteSentinel(3304066104);
}

auto IPDLParamTraits<mozilla::ProfileBufferChunkManagerUpdate>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->oldestDoneTimeStamp())))))) {
        aActor->FatalError("Error deserializing 'oldestDoneTimeStamp' (TimeStamp) member of 'ProfileBufferChunkManagerUpdate'");
        return false;
    }
    // Sentinel = 'oldestDoneTimeStamp'
    if ((!((aMsg)->ReadSentinel(aIter, 1286997926)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'oldestDoneTimeStamp' (TimeStamp) member of 'ProfileBufferChunkManagerUpdate'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->newlyReleasedChunks())))))) {
        aActor->FatalError("Error deserializing 'newlyReleasedChunks' (ProfileBufferChunkMetadata[]) member of 'ProfileBufferChunkManagerUpdate'");
        return false;
    }
    // Sentinel = 'newlyReleasedChunks'
    if ((!((aMsg)->ReadSentinel(aIter, 1305675713)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'newlyReleasedChunks' (ProfileBufferChunkMetadata[]) member of 'ProfileBufferChunkManagerUpdate'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->unreleasedBytes())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'unreleasedBytes | releasedBytes'
    if ((!((aMsg)->ReadSentinel(aIter, 3304066104)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
