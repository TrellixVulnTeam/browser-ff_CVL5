//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/loader/PScriptCache.h"
#include "mozilla/loader/PScriptCacheParent.h"
#include "mozilla/loader/PScriptCacheChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace loader {
namespace PScriptCache {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::loader::PScriptCacheParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::loader::PScriptCacheChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PScriptCache
} // namespace loader
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ScriptData|
//
namespace mozilla {
namespace loader {
} // namespace loader
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::loader::ScriptData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).cachePath());
    // Sentinel = 'cachePath'
    (aMsg)->WriteSentinel(291308418);
    WriteIPDLParam(aMsg, aActor, (aVar).loadTime());
    // Sentinel = 'loadTime'
    (aMsg)->WriteSentinel(242549552);
    WriteIPDLParam(aMsg, aActor, (aVar).xdrData());
    // Sentinel = 'xdrData'
    (aMsg)->WriteSentinel(190644937);
}

auto IPDLParamTraits<mozilla::loader::ScriptData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'ScriptData'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'ScriptData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cachePath())))))) {
        aActor->FatalError("Error deserializing 'cachePath' (nsCString) member of 'ScriptData'");
        return false;
    }
    // Sentinel = 'cachePath'
    if ((!((aMsg)->ReadSentinel(aIter, 291308418)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cachePath' (nsCString) member of 'ScriptData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadTime())))))) {
        aActor->FatalError("Error deserializing 'loadTime' (TimeStamp) member of 'ScriptData'");
        return false;
    }
    // Sentinel = 'loadTime'
    if ((!((aMsg)->ReadSentinel(aIter, 242549552)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadTime' (TimeStamp) member of 'ScriptData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->xdrData())))))) {
        aActor->FatalError("Error deserializing 'xdrData' (uint8_t[]) member of 'ScriptData'");
        return false;
    }
    // Sentinel = 'xdrData'
    if ((!((aMsg)->ReadSentinel(aIter, 190644937)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'xdrData' (uint8_t[]) member of 'ScriptData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
