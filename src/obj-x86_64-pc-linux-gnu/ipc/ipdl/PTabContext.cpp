//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/TabMessageUtils.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/dom/PTabContext.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PopupIPCTabContext|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PopupIPCTabContext>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).openerParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).openerParent());
        // Sentinel = 'opener'
        (aMsg)->WriteSentinel(149553802);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).openerChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).openerChild());
        // Sentinel = 'opener'
        (aMsg)->WriteSentinel(149553802);
    }
    (aMsg)->WriteBytes((&((aVar).chromeOuterWindowID())), 8);
    // Sentinel = 'chromeOuterWindowID'
    (aMsg)->WriteSentinel(1303119763);
}

auto IPDLParamTraits<mozilla::dom::PopupIPCTabContext>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->openerParent())))))) {
            aActor->FatalError("Error deserializing 'openerParent' (PBrowser) member of 'PopupIPCTabContext'");
            return false;
        }
        if ((!((*((&((aVar)->openerParent()))))))) {
            aActor->FatalError("Error deserializing 'openerParent' (PBrowser) member of 'PopupIPCTabContext'");
            return false;
        }
        // Sentinel = 'opener'
        if ((!((aMsg)->ReadSentinel(aIter, 149553802)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'openerParent' (PBrowser) member of 'PopupIPCTabContext'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->openerChild())))))) {
            aActor->FatalError("Error deserializing 'openerChild' (PBrowser) member of 'PopupIPCTabContext'");
            return false;
        }
        if ((!((*((&((aVar)->openerChild()))))))) {
            aActor->FatalError("Error deserializing 'openerChild' (PBrowser) member of 'PopupIPCTabContext'");
            return false;
        }
        // Sentinel = 'opener'
        if ((!((aMsg)->ReadSentinel(aIter, 149553802)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'openerChild' (PBrowser) member of 'PopupIPCTabContext'");
            return false;
        }
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->chromeOuterWindowID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'chromeOuterWindowID'
    if ((!((aMsg)->ReadSentinel(aIter, 1303119763)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FrameIPCTabContext|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FrameIPCTabContext>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).presentationURL());
    // Sentinel = 'presentationURL'
    (aMsg)->WriteSentinel(848496144);
    WriteIPDLParam(aMsg, aActor, (aVar).showFocusRings());
    // Sentinel = 'showFocusRings'
    (aMsg)->WriteSentinel(727320005);
    (aMsg)->WriteBytes((&((aVar).chromeOuterWindowID())), 8);
    // Sentinel = 'chromeOuterWindowID'
    (aMsg)->WriteSentinel(1303119763);
    (aMsg)->WriteBytes((&((aVar).maxTouchPoints())), 4);
    // Sentinel = 'maxTouchPoints'
    (aMsg)->WriteSentinel(719586759);
}

auto IPDLParamTraits<mozilla::dom::FrameIPCTabContext>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->presentationURL())))))) {
        aActor->FatalError("Error deserializing 'presentationURL' (nsString) member of 'FrameIPCTabContext'");
        return false;
    }
    // Sentinel = 'presentationURL'
    if ((!((aMsg)->ReadSentinel(aIter, 848496144)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'presentationURL' (nsString) member of 'FrameIPCTabContext'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->showFocusRings())))))) {
        aActor->FatalError("Error deserializing 'showFocusRings' (UIStateChangeType) member of 'FrameIPCTabContext'");
        return false;
    }
    // Sentinel = 'showFocusRings'
    if ((!((aMsg)->ReadSentinel(aIter, 727320005)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'showFocusRings' (UIStateChangeType) member of 'FrameIPCTabContext'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->chromeOuterWindowID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'chromeOuterWindowID'
    if ((!((aMsg)->ReadSentinel(aIter, 1303119763)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->maxTouchPoints())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'maxTouchPoints'
    if ((!((aMsg)->ReadSentinel(aIter, 719586759)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct JSPluginFrameIPCTabContext|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::JSPluginFrameIPCTabContext>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).jsPluginId())), 4);
    // Sentinel = 'jsPluginId'
    (aMsg)->WriteSentinel(374473722);
}

auto IPDLParamTraits<mozilla::dom::JSPluginFrameIPCTabContext>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->jsPluginId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'jsPluginId'
    if ((!((aMsg)->ReadSentinel(aIter, 374473722)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCTabContext|
//
namespace mozilla {
namespace dom {
auto IPCTabContext::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TPopupIPCTabContext:
        {
            (ptr_PopupIPCTabContext())->~PopupIPCTabContext__tdef();
            break;
        }
    case TFrameIPCTabContext:
        {
            (ptr_FrameIPCTabContext())->~FrameIPCTabContext__tdef();
            break;
        }
    case TJSPluginFrameIPCTabContext:
        {
            (ptr_JSPluginFrameIPCTabContext())->~JSPluginFrameIPCTabContext__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCTabContext::IPCTabContext(const PopupIPCTabContext& aOther)
{
    new (mozilla::KnownNotNull, ptr_PopupIPCTabContext()) PopupIPCTabContext(aOther);
    mType = TPopupIPCTabContext;
}

MOZ_IMPLICIT IPCTabContext::IPCTabContext(PopupIPCTabContext&& aOther)
{
    new (mozilla::KnownNotNull, ptr_PopupIPCTabContext()) PopupIPCTabContext(std::move(aOther));
    mType = TPopupIPCTabContext;
}

MOZ_IMPLICIT IPCTabContext::IPCTabContext(const FrameIPCTabContext& aOther)
{
    new (mozilla::KnownNotNull, ptr_FrameIPCTabContext()) FrameIPCTabContext(aOther);
    mType = TFrameIPCTabContext;
}

MOZ_IMPLICIT IPCTabContext::IPCTabContext(FrameIPCTabContext&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FrameIPCTabContext()) FrameIPCTabContext(std::move(aOther));
    mType = TFrameIPCTabContext;
}

MOZ_IMPLICIT IPCTabContext::IPCTabContext(const JSPluginFrameIPCTabContext& aOther)
{
    new (mozilla::KnownNotNull, ptr_JSPluginFrameIPCTabContext()) JSPluginFrameIPCTabContext(aOther);
    mType = TJSPluginFrameIPCTabContext;
}

MOZ_IMPLICIT IPCTabContext::IPCTabContext(JSPluginFrameIPCTabContext&& aOther)
{
    new (mozilla::KnownNotNull, ptr_JSPluginFrameIPCTabContext()) JSPluginFrameIPCTabContext(std::move(aOther));
    mType = TJSPluginFrameIPCTabContext;
}

MOZ_IMPLICIT IPCTabContext::IPCTabContext(const IPCTabContext& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TPopupIPCTabContext:
        {
            new (mozilla::KnownNotNull, ptr_PopupIPCTabContext()) PopupIPCTabContext((aOther).get_PopupIPCTabContext());
            break;
        }
    case TFrameIPCTabContext:
        {
            new (mozilla::KnownNotNull, ptr_FrameIPCTabContext()) FrameIPCTabContext((aOther).get_FrameIPCTabContext());
            break;
        }
    case TJSPluginFrameIPCTabContext:
        {
            new (mozilla::KnownNotNull, ptr_JSPluginFrameIPCTabContext()) JSPluginFrameIPCTabContext((aOther).get_JSPluginFrameIPCTabContext());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCTabContext::IPCTabContext(IPCTabContext&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TPopupIPCTabContext:
        {
            new (mozilla::KnownNotNull, ptr_PopupIPCTabContext()) PopupIPCTabContext(std::move((aOther).get_PopupIPCTabContext()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFrameIPCTabContext:
        {
            new (mozilla::KnownNotNull, ptr_FrameIPCTabContext()) FrameIPCTabContext(std::move((aOther).get_FrameIPCTabContext()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TJSPluginFrameIPCTabContext:
        {
            new (mozilla::KnownNotNull, ptr_JSPluginFrameIPCTabContext()) JSPluginFrameIPCTabContext(std::move((aOther).get_JSPluginFrameIPCTabContext()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCTabContext::~IPCTabContext()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCTabContext::operator=(const PopupIPCTabContext& aRhs) -> IPCTabContext&
{
    if (MaybeDestroy(TPopupIPCTabContext)) {
        new (mozilla::KnownNotNull, ptr_PopupIPCTabContext()) PopupIPCTabContext;
    }
    (*(ptr_PopupIPCTabContext())) = aRhs;
    mType = TPopupIPCTabContext;
    return (*(this));
}

auto IPCTabContext::operator=(PopupIPCTabContext&& aRhs) -> IPCTabContext&
{
    if (MaybeDestroy(TPopupIPCTabContext)) {
        new (mozilla::KnownNotNull, ptr_PopupIPCTabContext()) PopupIPCTabContext;
    }
    (*(ptr_PopupIPCTabContext())) = std::move(aRhs);
    mType = TPopupIPCTabContext;
    return (*(this));
}

auto IPCTabContext::operator=(const FrameIPCTabContext& aRhs) -> IPCTabContext&
{
    if (MaybeDestroy(TFrameIPCTabContext)) {
        new (mozilla::KnownNotNull, ptr_FrameIPCTabContext()) FrameIPCTabContext;
    }
    (*(ptr_FrameIPCTabContext())) = aRhs;
    mType = TFrameIPCTabContext;
    return (*(this));
}

auto IPCTabContext::operator=(FrameIPCTabContext&& aRhs) -> IPCTabContext&
{
    if (MaybeDestroy(TFrameIPCTabContext)) {
        new (mozilla::KnownNotNull, ptr_FrameIPCTabContext()) FrameIPCTabContext;
    }
    (*(ptr_FrameIPCTabContext())) = std::move(aRhs);
    mType = TFrameIPCTabContext;
    return (*(this));
}

auto IPCTabContext::operator=(const JSPluginFrameIPCTabContext& aRhs) -> IPCTabContext&
{
    if (MaybeDestroy(TJSPluginFrameIPCTabContext)) {
        new (mozilla::KnownNotNull, ptr_JSPluginFrameIPCTabContext()) JSPluginFrameIPCTabContext;
    }
    (*(ptr_JSPluginFrameIPCTabContext())) = aRhs;
    mType = TJSPluginFrameIPCTabContext;
    return (*(this));
}

auto IPCTabContext::operator=(JSPluginFrameIPCTabContext&& aRhs) -> IPCTabContext&
{
    if (MaybeDestroy(TJSPluginFrameIPCTabContext)) {
        new (mozilla::KnownNotNull, ptr_JSPluginFrameIPCTabContext()) JSPluginFrameIPCTabContext;
    }
    (*(ptr_JSPluginFrameIPCTabContext())) = std::move(aRhs);
    mType = TJSPluginFrameIPCTabContext;
    return (*(this));
}

auto IPCTabContext::operator=(const IPCTabContext& aRhs) -> IPCTabContext&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPopupIPCTabContext:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PopupIPCTabContext()) PopupIPCTabContext;
            }
            (*(ptr_PopupIPCTabContext())) = (aRhs).get_PopupIPCTabContext();
            break;
        }
    case TFrameIPCTabContext:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FrameIPCTabContext()) FrameIPCTabContext;
            }
            (*(ptr_FrameIPCTabContext())) = (aRhs).get_FrameIPCTabContext();
            break;
        }
    case TJSPluginFrameIPCTabContext:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_JSPluginFrameIPCTabContext()) JSPluginFrameIPCTabContext;
            }
            (*(ptr_JSPluginFrameIPCTabContext())) = (aRhs).get_JSPluginFrameIPCTabContext();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCTabContext::operator=(IPCTabContext&& aRhs) -> IPCTabContext&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPopupIPCTabContext:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PopupIPCTabContext()) PopupIPCTabContext;
            }
            (*(ptr_PopupIPCTabContext())) = std::move((aRhs).get_PopupIPCTabContext());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFrameIPCTabContext:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FrameIPCTabContext()) FrameIPCTabContext;
            }
            (*(ptr_FrameIPCTabContext())) = std::move((aRhs).get_FrameIPCTabContext());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TJSPluginFrameIPCTabContext:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_JSPluginFrameIPCTabContext()) JSPluginFrameIPCTabContext;
            }
            (*(ptr_JSPluginFrameIPCTabContext())) = std::move((aRhs).get_JSPluginFrameIPCTabContext());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCTabContext>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPCTabContext union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCTabContext'
    (aMsg)->WriteSentinel(521929945);

    switch (type) {
    case union__::TPopupIPCTabContext:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_PopupIPCTabContext());
            // Sentinel = 'TPopupIPCTabContext'
            (aMsg)->WriteSentinel(1180174145);
            return;
        }
    case union__::TFrameIPCTabContext:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FrameIPCTabContext());
            // Sentinel = 'TFrameIPCTabContext'
            (aMsg)->WriteSentinel(1138034456);
            return;
        }
    case union__::TJSPluginFrameIPCTabContext:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_JSPluginFrameIPCTabContext());
            // Sentinel = 'TJSPluginFrameIPCTabContext'
            (aMsg)->WriteSentinel(2318338596);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPCTabContext>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPCTabContext union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCTabContext");
        return false;
    }
    // Sentinel = 'IPCTabContext'
    if ((!((aMsg)->ReadSentinel(aIter, 521929945)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCTabContext");
        return false;
    }

    switch (type) {
    case union__::TPopupIPCTabContext:
        {
            mozilla::dom::PopupIPCTabContext tmp = mozilla::dom::PopupIPCTabContext();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PopupIPCTabContext())))))) {
                aActor->FatalError("Error deserializing variant TPopupIPCTabContext of union IPCTabContext");
                return false;
            }
            // Sentinel = 'TPopupIPCTabContext'
            if ((!((aMsg)->ReadSentinel(aIter, 1180174145)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPopupIPCTabContext of union IPCTabContext");
                return false;
            }
            return true;
        }
    case union__::TFrameIPCTabContext:
        {
            mozilla::dom::FrameIPCTabContext tmp = mozilla::dom::FrameIPCTabContext();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FrameIPCTabContext())))))) {
                aActor->FatalError("Error deserializing variant TFrameIPCTabContext of union IPCTabContext");
                return false;
            }
            // Sentinel = 'TFrameIPCTabContext'
            if ((!((aMsg)->ReadSentinel(aIter, 1138034456)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFrameIPCTabContext of union IPCTabContext");
                return false;
            }
            return true;
        }
    case union__::TJSPluginFrameIPCTabContext:
        {
            mozilla::dom::JSPluginFrameIPCTabContext tmp = mozilla::dom::JSPluginFrameIPCTabContext();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_JSPluginFrameIPCTabContext())))))) {
                aActor->FatalError("Error deserializing variant TJSPluginFrameIPCTabContext of union IPCTabContext");
                return false;
            }
            // Sentinel = 'TJSPluginFrameIPCTabContext'
            if ((!((aMsg)->ReadSentinel(aIter, 2318338596)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TJSPluginFrameIPCTabContext of union IPCTabContext");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
