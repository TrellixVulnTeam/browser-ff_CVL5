//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PRemoteSpellcheckEngineChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/RemoteSpellCheckEngineChild.h"

#include "mozilla/dom/PContentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


MOZ_IMPLICIT PRemoteSpellcheckEngineChild::PRemoteSpellcheckEngineChild() :
    mozilla::ipc::IProtocol(PRemoteSpellcheckEngineMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PRemoteSpellcheckEngineChild);
}

PRemoteSpellcheckEngineChild::~PRemoteSpellcheckEngineChild()
{
    MOZ_COUNT_DTOR(PRemoteSpellcheckEngineChild);
}

auto PRemoteSpellcheckEngineChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PRemoteSpellcheckEngineChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PRemoteSpellcheckEngineChild::Send__delete__(PRemoteSpellcheckEngineChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PRemoteSpellcheckEngine::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteSpellcheckEngineChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PRemoteSpellcheckEngineMsgStart, actor);
    return sendok__;
}

auto PRemoteSpellcheckEngineChild::SendCheckAsync(
        const nsTArray<nsString>& aWord,
        mozilla::ipc::ResolveCallback<nsTArray<bool>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteSpellcheckEngine::Msg_CheckAsync(Id());

    WriteIPDLParam(msg__, this, aWord);
    // Sentinel = 'aWord'
    (msg__)->WriteSentinel(98238974);




    if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteSpellcheckEngineChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_CheckAsync", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteSpellcheckEngineChild::SendCheckAsync(const nsTArray<nsString>& aWord) -> RefPtr<CheckAsyncPromise>
{
    RefPtr<MozPromise<nsTArray<bool>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsTArray<bool>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendCheckAsync(std::move(aWord), [promise__](nsTArray<bool>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteSpellcheckEngineChild::SendCheckAndSuggest(
        const nsString& aWord,
        bool* aIsMisspelled,
        nsTArray<nsString>* aSuggestions) -> bool
{
    IPC::Message* msg__ = PRemoteSpellcheckEngine::Msg_CheckAndSuggest(Id());

    WriteIPDLParam(msg__, this, aWord);
    // Sentinel = 'aWord'
    (msg__)->WriteSentinel(98238974);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteSpellcheckEngineChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_CheckAndSuggest", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PRemoteSpellcheckEngine::Msg_CheckAndSuggest", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteSpellcheckEngineChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIsMisspelled)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aIsMisspelled'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 595723568)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuggestions)))) {
        FatalError("Error deserializing 'nsString[]'");
        return false;
    }
    // Sentinel = 'aSuggestions'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 529204477)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PRemoteSpellcheckEngineChild::SendSetDictionary(
        const nsCString& aDictionary,
        bool* success) -> bool
{
    IPC::Message* msg__ = PRemoteSpellcheckEngine::Msg_SetDictionary(Id());

    WriteIPDLParam(msg__, this, aDictionary);
    // Sentinel = 'aDictionary'
    (msg__)->WriteSentinel(430703736);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteSpellcheckEngineChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_SetDictionary", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PRemoteSpellcheckEngine::Msg_SetDictionary", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteSpellcheckEngineChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, success)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'success'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 200082170)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PRemoteSpellcheckEngineChild::SendSetDictionaryFromList(
        const nsTArray<nsCString>& aList,
        mozilla::ipc::ResolveCallback<Tuple<bool, nsCString>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteSpellcheckEngine::Msg_SetDictionaryFromList(Id());

    WriteIPDLParam(msg__, this, aList);
    // Sentinel = 'aList'
    (msg__)->WriteSentinel(95355390);




    if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteSpellcheckEngineChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_SetDictionaryFromList", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteSpellcheckEngineChild::SendSetDictionaryFromList(const nsTArray<nsCString>& aList) -> RefPtr<SetDictionaryFromListPromise>
{
    RefPtr<MozPromise<Tuple<bool, nsCString>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<Tuple<bool, nsCString>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendSetDictionaryFromList(std::move(aList), [promise__](Tuple<bool, nsCString>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteSpellcheckEngineChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteSpellcheckEngineChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteSpellcheckEngineChild::OnMessageReceived(const Message& msg__) -> PRemoteSpellcheckEngineChild::Result
{
    switch (msg__.type()) {
    case PRemoteSpellcheckEngine::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PRemoteSpellcheckEngine::Reply_CheckAsync__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_CheckAsync", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsTArray<bool>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsTArray<bool> aIsMisspelled{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsMisspelled)))))) {
                    FatalError("Error deserializing 'bool[]'");
                    return MsgValueError;
                }
                // Sentinel = 'aIsMisspelled'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595723568)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool[]'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aIsMisspelled));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRemoteSpellcheckEngine::Reply_SetDictionaryFromList__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_SetDictionaryFromList", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<Tuple<bool, nsCString>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool aSuccess{};
                nsCString aDictionary{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSuccess)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'aSuccess'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236323643)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDictionary)))))) {
                    FatalError("Error deserializing 'nsCString'");
                    return MsgValueError;
                }
                // Sentinel = 'aDictionary'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430703736)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(MakeTuple(std::move(aSuccess), std::move(aDictionary)));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemoteSpellcheckEngineChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteSpellcheckEngineChild::Result
{
    return MsgNotKnown;
}

auto PRemoteSpellcheckEngineChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteSpellcheckEngineChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemoteSpellcheckEngineChild::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PRemoteSpellcheckEngineChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PRemoteSpellcheckEngineChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemoteSpellcheckEngine", PRemoteSpellcheckEngineMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PRemoteSpellcheckEngineChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
