//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/IPCBlob.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union RemoteLazyStream|
//
namespace mozilla {
auto RemoteLazyStream::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TPRemoteLazyInputStreamParent:
        {
            (ptr_PRemoteLazyInputStreamParent())->~PRemoteLazyInputStreamParent__tdef();
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            (ptr_PRemoteLazyInputStreamChild())->~PRemoteLazyInputStreamChild__tdef();
            break;
        }
    case TIPCStream:
        {
            (ptr_IPCStream())->~IPCStream__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT RemoteLazyStream::RemoteLazyStream(PRemoteLazyInputStreamParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*(const_cast<PRemoteLazyInputStreamParent*>(aOther));
    mType = TPRemoteLazyInputStreamParent;
}

MOZ_IMPLICIT RemoteLazyStream::RemoteLazyStream(PRemoteLazyInputStreamChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*(const_cast<PRemoteLazyInputStreamChild*>(aOther));
    mType = TPRemoteLazyInputStreamChild;
}

MOZ_IMPLICIT RemoteLazyStream::RemoteLazyStream(const IPCStream& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCStream()) IPCStream(aOther);
    mType = TIPCStream;
}

MOZ_IMPLICIT RemoteLazyStream::RemoteLazyStream(IPCStream&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCStream()) IPCStream(std::move(aOther));
    mType = TIPCStream;
}

MOZ_IMPLICIT RemoteLazyStream::RemoteLazyStream(const RemoteLazyStream& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TPRemoteLazyInputStreamParent:
        {
            new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*(const_cast<PRemoteLazyInputStreamParent*>((aOther).get_PRemoteLazyInputStreamParent()));
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*(const_cast<PRemoteLazyInputStreamChild*>((aOther).get_PRemoteLazyInputStreamChild()));
            break;
        }
    case TIPCStream:
        {
            new (mozilla::KnownNotNull, ptr_IPCStream()) IPCStream((aOther).get_IPCStream());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT RemoteLazyStream::RemoteLazyStream(RemoteLazyStream&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TPRemoteLazyInputStreamParent:
        {
            new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*(const_cast<PRemoteLazyInputStreamParent*>(std::move((aOther).get_PRemoteLazyInputStreamParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*(const_cast<PRemoteLazyInputStreamChild*>(std::move((aOther).get_PRemoteLazyInputStreamChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCStream:
        {
            new (mozilla::KnownNotNull, ptr_IPCStream()) IPCStream(std::move((aOther).get_IPCStream()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

RemoteLazyStream::~RemoteLazyStream()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto RemoteLazyStream::operator=(PRemoteLazyInputStreamParent* aRhs) -> RemoteLazyStream&
{
    if (MaybeDestroy(TPRemoteLazyInputStreamParent)) {
        new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*;
    }
    (*(ptr_PRemoteLazyInputStreamParent())) = const_cast<PRemoteLazyInputStreamParent*>(aRhs);
    mType = TPRemoteLazyInputStreamParent;
    return (*(this));
}

auto RemoteLazyStream::operator=(PRemoteLazyInputStreamChild* aRhs) -> RemoteLazyStream&
{
    if (MaybeDestroy(TPRemoteLazyInputStreamChild)) {
        new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*;
    }
    (*(ptr_PRemoteLazyInputStreamChild())) = const_cast<PRemoteLazyInputStreamChild*>(aRhs);
    mType = TPRemoteLazyInputStreamChild;
    return (*(this));
}

auto RemoteLazyStream::operator=(const IPCStream& aRhs) -> RemoteLazyStream&
{
    if (MaybeDestroy(TIPCStream)) {
        new (mozilla::KnownNotNull, ptr_IPCStream()) IPCStream;
    }
    (*(ptr_IPCStream())) = aRhs;
    mType = TIPCStream;
    return (*(this));
}

auto RemoteLazyStream::operator=(IPCStream&& aRhs) -> RemoteLazyStream&
{
    if (MaybeDestroy(TIPCStream)) {
        new (mozilla::KnownNotNull, ptr_IPCStream()) IPCStream;
    }
    (*(ptr_IPCStream())) = std::move(aRhs);
    mType = TIPCStream;
    return (*(this));
}

auto RemoteLazyStream::operator=(const RemoteLazyStream& aRhs) -> RemoteLazyStream&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPRemoteLazyInputStreamParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*;
            }
            (*(ptr_PRemoteLazyInputStreamParent())) = const_cast<PRemoteLazyInputStreamParent*>((aRhs).get_PRemoteLazyInputStreamParent());
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*;
            }
            (*(ptr_PRemoteLazyInputStreamChild())) = const_cast<PRemoteLazyInputStreamChild*>((aRhs).get_PRemoteLazyInputStreamChild());
            break;
        }
    case TIPCStream:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCStream()) IPCStream;
            }
            (*(ptr_IPCStream())) = (aRhs).get_IPCStream();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto RemoteLazyStream::operator=(RemoteLazyStream&& aRhs) -> RemoteLazyStream&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPRemoteLazyInputStreamParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*;
            }
            (*(ptr_PRemoteLazyInputStreamParent())) = const_cast<PRemoteLazyInputStreamParent*>(std::move((aRhs).get_PRemoteLazyInputStreamParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*;
            }
            (*(ptr_PRemoteLazyInputStreamChild())) = const_cast<PRemoteLazyInputStreamChild*>(std::move((aRhs).get_PRemoteLazyInputStreamChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCStream:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCStream()) IPCStream;
            }
            (*(ptr_IPCStream())) = std::move((aRhs).get_IPCStream());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::RemoteLazyStream>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::RemoteLazyStream union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'RemoteLazyStream'
    (aMsg)->WriteSentinel(911672953);

    switch (type) {
    case union__::TPRemoteLazyInputStreamParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PRemoteLazyInputStreamParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PRemoteLazyInputStreamParent());
                // Sentinel = 'TPRemoteLazyInputStreamParent'
                (aMsg)->WriteSentinel(2857569175);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPRemoteLazyInputStreamChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PRemoteLazyInputStreamChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PRemoteLazyInputStreamChild());
                // Sentinel = 'TPRemoteLazyInputStreamChild'
                (aMsg)->WriteSentinel(2659191569);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TIPCStream:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCStream());
            // Sentinel = 'TIPCStream'
            (aMsg)->WriteSentinel(311690141);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::RemoteLazyStream>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::RemoteLazyStream union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union RemoteLazyStream");
        return false;
    }
    // Sentinel = 'RemoteLazyStream'
    if ((!((aMsg)->ReadSentinel(aIter, 911672953)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union RemoteLazyStream");
        return false;
    }

    switch (type) {
    case union__::TPRemoteLazyInputStreamParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::PRemoteLazyInputStreamChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PRemoteLazyInputStreamChild())))))) {
                aActor->FatalError("Error deserializing variant TPRemoteLazyInputStreamParent of union RemoteLazyStream");
                return false;
            }
            if ((!((*((&((aVar)->get_PRemoteLazyInputStreamChild()))))))) {
                aActor->FatalError("Error deserializing variant TPRemoteLazyInputStreamParent of union RemoteLazyStream");
                return false;
            }
            // Sentinel = 'TPRemoteLazyInputStreamParent'
            if ((!((aMsg)->ReadSentinel(aIter, 2857569175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPRemoteLazyInputStreamParent of union RemoteLazyStream");
                return false;
            }
            return true;
        }
    case union__::TPRemoteLazyInputStreamChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::PRemoteLazyInputStreamParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PRemoteLazyInputStreamParent())))))) {
                aActor->FatalError("Error deserializing variant TPRemoteLazyInputStreamChild of union RemoteLazyStream");
                return false;
            }
            if ((!((*((&((aVar)->get_PRemoteLazyInputStreamParent()))))))) {
                aActor->FatalError("Error deserializing variant TPRemoteLazyInputStreamChild of union RemoteLazyStream");
                return false;
            }
            // Sentinel = 'TPRemoteLazyInputStreamChild'
            if ((!((aMsg)->ReadSentinel(aIter, 2659191569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPRemoteLazyInputStreamChild of union RemoteLazyStream");
                return false;
            }
            return true;
        }
    case union__::TIPCStream:
        {
            mozilla::ipc::IPCStream tmp = mozilla::ipc::IPCStream();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCStream())))))) {
                aActor->FatalError("Error deserializing variant TIPCStream of union RemoteLazyStream");
                return false;
            }
            // Sentinel = 'TIPCStream'
            if ((!((aMsg)->ReadSentinel(aIter, 311690141)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCStream of union RemoteLazyStream");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCFile|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCFile>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).DOMPath());
    // Sentinel = 'DOMPath'
    (aMsg)->WriteSentinel(150012526);
    WriteIPDLParam(aMsg, aActor, (aVar).fullPath());
    // Sentinel = 'fullPath'
    (aMsg)->WriteSentinel(247595841);
    WriteIPDLParam(aMsg, aActor, (aVar).isDirectory());
    // Sentinel = 'isDirectory'
    (aMsg)->WriteSentinel(446497938);
    (aMsg)->WriteBytes((&((aVar).lastModified())), 8);
    // Sentinel = 'lastModified'
    (aMsg)->WriteSentinel(531629270);
}

auto IPDLParamTraits<mozilla::dom::IPCFile>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'IPCFile'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'IPCFile'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->DOMPath())))))) {
        aActor->FatalError("Error deserializing 'DOMPath' (nsString) member of 'IPCFile'");
        return false;
    }
    // Sentinel = 'DOMPath'
    if ((!((aMsg)->ReadSentinel(aIter, 150012526)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'DOMPath' (nsString) member of 'IPCFile'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fullPath())))))) {
        aActor->FatalError("Error deserializing 'fullPath' (nsString) member of 'IPCFile'");
        return false;
    }
    // Sentinel = 'fullPath'
    if ((!((aMsg)->ReadSentinel(aIter, 247595841)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fullPath' (nsString) member of 'IPCFile'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isDirectory())))))) {
        aActor->FatalError("Error deserializing 'isDirectory' (bool) member of 'IPCFile'");
        return false;
    }
    // Sentinel = 'isDirectory'
    if ((!((aMsg)->ReadSentinel(aIter, 446497938)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isDirectory' (bool) member of 'IPCFile'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->lastModified())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'lastModified'
    if ((!((aMsg)->ReadSentinel(aIter, 531629270)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCBlob|
//
namespace mozilla {
namespace dom {
auto IPCBlob::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IPCBlob, fileId_) - offsetof(IPCBlob, size_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCBlob>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).blobImplType());
    // Sentinel = 'blobImplType'
    (aMsg)->WriteSentinel(521077972);
    WriteIPDLParam(aMsg, aActor, (aVar).inputStream());
    // Sentinel = 'inputStream'
    (aMsg)->WriteSentinel(469370013);
    WriteIPDLParam(aMsg, aActor, (aVar).file());
    // Sentinel = 'file'
    (aMsg)->WriteSentinel(68420001);
    (aMsg)->WriteBytes((&((aVar).size())), 16);
    // Sentinel = 'size | fileId'
    (aMsg)->WriteSentinel(572916933);
}

auto IPDLParamTraits<mozilla::dom::IPCBlob>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (nsString) member of 'IPCBlob'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (nsString) member of 'IPCBlob'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blobImplType())))))) {
        aActor->FatalError("Error deserializing 'blobImplType' (nsString) member of 'IPCBlob'");
        return false;
    }
    // Sentinel = 'blobImplType'
    if ((!((aMsg)->ReadSentinel(aIter, 521077972)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blobImplType' (nsString) member of 'IPCBlob'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->inputStream())))))) {
        aActor->FatalError("Error deserializing 'inputStream' (RemoteLazyStream) member of 'IPCBlob'");
        return false;
    }
    // Sentinel = 'inputStream'
    if ((!((aMsg)->ReadSentinel(aIter, 469370013)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'inputStream' (RemoteLazyStream) member of 'IPCBlob'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->file())))))) {
        aActor->FatalError("Error deserializing 'file' (IPCFile?) member of 'IPCBlob'");
        return false;
    }
    // Sentinel = 'file'
    if ((!((aMsg)->ReadSentinel(aIter, 68420001)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'file' (IPCFile?) member of 'IPCBlob'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->size())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'size | fileId'
    if ((!((aMsg)->ReadSentinel(aIter, 572916933)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
