//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PProfilerParent.h"
#include "mozilla/ProfilerLabels.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PProfilerParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PProfilerParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PProfilerParent::EnteredCxxStack() -> void
{
}

auto PProfilerParent::ExitedCxxStack() -> void
{
}

auto PProfilerParent::EnteredCall() -> void
{
}

auto PProfilerParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PProfilerParent::PProfilerParent() :
    mozilla::ipc::IToplevelProtocol("PProfilerParent", PProfilerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PProfilerParent);
}

PProfilerParent::~PProfilerParent()
{
    MOZ_COUNT_DTOR(PProfilerParent);
}

auto PProfilerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PProfilerParent::SendStart(const ProfilerInitParams& params) -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_Start(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, params);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(146997893);




    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_Start", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::SendEnsureStarted(const ProfilerInitParams& params) -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_EnsureStarted(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, params);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(146997893);




    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_EnsureStarted", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::SendStop() -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_Stop(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_Stop", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::SendPause() -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_Pause(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_Pause", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::SendResume() -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_Resume(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_Resume", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::SendPauseSampling() -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_PauseSampling(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_PauseSampling", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::SendResumeSampling() -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_ResumeSampling(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_ResumeSampling", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::SendAwaitNextChunkManagerUpdate(
        mozilla::ipc::ResolveCallback<ProfileBufferChunkManagerUpdate>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PProfiler::Msg_AwaitNextChunkManagerUpdate(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_AwaitNextChunkManagerUpdate", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PProfilerParent::SendAwaitNextChunkManagerUpdate() -> RefPtr<AwaitNextChunkManagerUpdatePromise>
{
    RefPtr<MozPromise<ProfileBufferChunkManagerUpdate, ResponseRejectReason, true>::Private> promise__ = new MozPromise<ProfileBufferChunkManagerUpdate, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendAwaitNextChunkManagerUpdate([promise__](ProfileBufferChunkManagerUpdate&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PProfilerParent::SendDestroyReleasedChunksAtOrBefore(const TimeStamp& timeStamp) -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_DestroyReleasedChunksAtOrBefore(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, timeStamp);
    // Sentinel = 'timeStamp'
    (msg__)->WriteSentinel(312083381);




    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_DestroyReleasedChunksAtOrBefore", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::SendGatherProfile(
        mozilla::ipc::ResolveCallback<Shmem>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PProfiler::Msg_GatherProfile(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_GatherProfile", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PProfilerParent::SendGatherProfile() -> RefPtr<GatherProfilePromise>
{
    RefPtr<MozPromise<Shmem, ResponseRejectReason, true>::Private> promise__ = new MozPromise<Shmem, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGatherProfile([promise__](Shmem&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PProfilerParent::SendClearAllPages() -> bool
{
    IPC::Message* msg__ = PProfiler::Msg_ClearAllPages(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProfilerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProfiler::Msg_ClearAllPages", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProfilerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PProfilerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PProfilerParent::OnMessageReceived(const Message& msg__) -> PProfilerParent::Result
{
    switch (msg__.type()) {
    case PProfiler::Reply_AwaitNextChunkManagerUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_AwaitNextChunkManagerUpdate", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<ProfileBufferChunkManagerUpdate> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                ProfileBufferChunkManagerUpdate update{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(update)))))) {
                    FatalError("Error deserializing 'ProfileBufferChunkManagerUpdate'");
                    return MsgValueError;
                }
                // Sentinel = 'update'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 150209156)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'ProfileBufferChunkManagerUpdate'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(update));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PProfiler::Reply_GatherProfile__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_GatherProfile", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<Shmem> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                Shmem profile{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(profile)))))) {
                    FatalError("Error deserializing 'Shmem'");
                    return MsgValueError;
                }
                // Sentinel = 'profile'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201196274)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(profile));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PProfilerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PProfilerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PProfilerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PProfilerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PProfilerParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PProfilerParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PProfilerParent::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PProfilerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PProfilerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PProfiler", PProfilerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PProfilerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
