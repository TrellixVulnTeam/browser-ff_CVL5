//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PCompositorManagerParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/layers/CompositorManagerParent.h"
#include "mozilla/layers/WebRenderMessageUtils.h"

#include "mozilla/layers/PCompositorBridgeParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PCompositorManagerParent::RecvPCompositorBridgeConstructor(
        PCompositorBridgeParent* actor,
        const CompositorBridgeOptions& options) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PCompositorManagerParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PCompositorManagerParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PCompositorManagerParent::EnteredCxxStack() -> void
{
}

auto PCompositorManagerParent::ExitedCxxStack() -> void
{
}

auto PCompositorManagerParent::EnteredCall() -> void
{
}

auto PCompositorManagerParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PCompositorManagerParent::PCompositorManagerParent() :
    mozilla::ipc::IToplevelProtocol("PCompositorManagerParent", PCompositorManagerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PCompositorManagerParent);
}

PCompositorManagerParent::~PCompositorManagerParent()
{
    MOZ_COUNT_DTOR(PCompositorManagerParent);
}

auto PCompositorManagerParent::ManagedPCompositorBridgeParent(nsTArray<PCompositorBridgeParent*>& aArr) const -> void
{
    mManagedPCompositorBridgeParent.ToArray(aArr);
}

auto PCompositorManagerParent::ManagedPCompositorBridgeParent() const -> const ManagedContainer<PCompositorBridgeParent>&
{
    return mManagedPCompositorBridgeParent;
}

auto PCompositorManagerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPCompositorBridgeParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPCompositorBridgeParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PCompositorManagerParent::OpenPCompositorBridgeEndpoint(PCompositorBridgeParent* aActor) -> ManagedEndpoint<PCompositorBridgeChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PCompositorBridgeParent actor");
        return ManagedEndpoint<PCompositorBridgeChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPCompositorBridgeParent.PutEntry(aActor);

    return ManagedEndpoint<PCompositorBridgeChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PCompositorManagerParent::BindPCompositorBridgeEndpoint(
        ManagedEndpoint<PCompositorBridgeParent> aEndpoint,
        PCompositorBridgeParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PCompositorBridgeParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPCompositorBridgeParent.PutEntry(aActor);

    return true;
}

auto PCompositorManagerParent::SendNotifyWebRenderError(const WebRenderError& error) -> bool
{
    IPC::Message* msg__ = PCompositorManager::Msg_NotifyWebRenderError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, error);
    // Sentinel = 'error'
    (msg__)->WriteSentinel(107741739);




    if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCompositorManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCompositorManager::Msg_NotifyWebRenderError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCompositorManagerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PCompositorBridgeMsgStart:
{
            PCompositorBridgeParent* actor = static_cast<PCompositorBridgeParent*>(aListener);
            auto& container = mManagedPCompositorBridgeParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PCompositorManagerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    default:
        FatalError("unreached");
        return;
    }
}

auto PCompositorManagerParent::OnMessageReceived(const Message& msg__) -> PCompositorManagerParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PCompositorManager::Msg_PCompositorBridgeConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_PCompositorBridgeConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            CompositorBridgeOptions options{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(options)))))) {
                FatalError("Error deserializing 'CompositorBridgeOptions'");
                return MsgValueError;
            }
            // Sentinel = 'options'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 204735245)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositorBridgeOptions'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PCompositorBridgeParent> actor = (static_cast<CompositorManagerParent*>(this))->AllocPCompositorBridgeParent(options);
            if (!actor) {
                NS_WARNING("Cannot bind null PCompositorBridgeParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPCompositorBridgeParent.PutEntry(actor);

            if ((!((static_cast<CompositorManagerParent*>(this))->RecvPCompositorBridgeConstructor(actor, std::move(options))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCompositorManager::Msg_AddSharedSurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_AddSharedSurface", OTHER);

            PickleIterator iter__{msg__};
            ExternalImageId aId{};
            SurfaceDescriptorShared aDesc{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDesc)))))) {
                FatalError("Error deserializing 'SurfaceDescriptorShared'");
                return MsgValueError;
            }
            // Sentinel = 'aDesc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 91357665)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptorShared'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CompositorManagerParent*>(this))->RecvAddSharedSurface(std::move(aId), std::move(aDesc))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCompositorManager::Msg_RemoveSharedSurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_RemoveSharedSurface", OTHER);

            PickleIterator iter__{msg__};
            ExternalImageId aId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CompositorManagerParent*>(this))->RecvRemoveSharedSurface(std::move(aId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCompositorManager::Msg_ReportSharedSurfacesMemory__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_ReportSharedSurfacesMemory", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            ReportSharedSurfacesMemoryResolver resolver = [proxy__, seqno__, id__](const SharedSurfacesMemoryReport& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PCompositorManagerParent* self__ = static_cast<PCompositorManagerParent*>(proxy__->Get());

                IPC::Message* reply__ = PCompositorManager::Reply_ReportSharedSurfacesMemory(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aReport'
                (reply__)->WriteSentinel(184025822);

                if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PCompositorManagerParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<CompositorManagerParent*>(this))->RecvReportSharedSurfacesMemory(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCompositorManager::Msg_NotifyMemoryPressure__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_NotifyMemoryPressure", OTHER);

            if ((!((static_cast<CompositorManagerParent*>(this))->RecvNotifyMemoryPressure()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PCompositorManager::Msg_ReportMemory__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_ReportMemory", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            ReportMemoryResolver resolver = [proxy__, seqno__, id__](const MemoryReport& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PCompositorManagerParent* self__ = static_cast<PCompositorManagerParent*>(proxy__->Get());

                IPC::Message* reply__ = PCompositorManager::Reply_ReportMemory(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aReport'
                (reply__)->WriteSentinel(184025822);

                if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PCompositorManagerParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<CompositorManagerParent*>(this))->RecvReportMemory(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PCompositorManagerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PCompositorManagerParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PCompositorManagerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PCompositorManagerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PCompositorManagerParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PCompositorManagerParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PCompositorManagerParent::ClearSubtree() -> void
{
    for (auto it = mManagedPCompositorBridgeParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPCompositorBridgeParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPCompositorBridgeParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPCompositorBridgeParent.Clear();

}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PCompositorManagerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PCompositorManagerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PCompositorManager", PCompositorManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PCompositorManagerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
