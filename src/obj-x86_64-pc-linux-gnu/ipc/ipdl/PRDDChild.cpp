//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PRDDChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/RDDChild.h"

#include "mozilla/PProfilerChild.h"
#include "mozilla/PRemoteDecoderManagerChild.h"
#include "mozilla/layers/PVideoBridgeChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PRDDChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PRDDChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PRDDChild::EnteredCxxStack() -> void
{
}

auto PRDDChild::ExitedCxxStack() -> void
{
}

auto PRDDChild::EnteredCall() -> void
{
}

auto PRDDChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PRDDChild::PRDDChild() :
    mozilla::ipc::IToplevelProtocol("PRDDChild", PRDDMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PRDDChild);
}

PRDDChild::~PRDDChild()
{
    MOZ_COUNT_DTOR(PRDDChild);
}

auto PRDDChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PRDDChild::SendInit(
        const nsTArray<GfxVarUpdate>& vars,
        const mozilla::Maybe<FileDescriptor>& sandboxBroker,
        const bool& canRecordReleaseTelemetry) -> bool
{
    IPC::Message* msg__ = PRDD::Msg_Init(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, vars);
    // Sentinel = 'vars'
    (msg__)->WriteSentinel(72745405);
    WriteIPDLParam(msg__, this, sandboxBroker);
    // Sentinel = 'sandboxBroker'
    (msg__)->WriteSentinel(625149269);
    WriteIPDLParam(msg__, this, canRecordReleaseTelemetry);
    // Sentinel = 'canRecordReleaseTelemetry'
    (msg__)->WriteSentinel(2148731406);




    if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRDDChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRDD::Msg_Init", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRDDChild::SendInitProfiler(Endpoint<mozilla::PProfilerChild>&& endpoint) -> bool
{
    IPC::Message* msg__ = PRDD::Msg_InitProfiler(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(endpoint));
    // Sentinel = 'endpoint'
    (msg__)->WriteSentinel(251724642);




    if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRDDChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRDD::Msg_InitProfiler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRDDChild::SendNewContentRemoteDecoderManager(Endpoint<mozilla::PRemoteDecoderManagerParent>&& endpoint) -> bool
{
    IPC::Message* msg__ = PRDD::Msg_NewContentRemoteDecoderManager(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(endpoint));
    // Sentinel = 'endpoint'
    (msg__)->WriteSentinel(251724642);




    if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRDDChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRDD::Msg_NewContentRemoteDecoderManager", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRDDChild::SendRequestMemoryReport(
        const uint32_t& generation,
        const bool& anonymize,
        const bool& minimizeMemoryUsage,
        const mozilla::Maybe<FileDescriptor>& DMDFile,
        mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRDD::Msg_RequestMemoryReport(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, generation);
    // Sentinel = 'generation'
    (msg__)->WriteSentinel(381158445);
    WriteIPDLParam(msg__, this, anonymize);
    // Sentinel = 'anonymize'
    (msg__)->WriteSentinel(321127387);
    WriteIPDLParam(msg__, this, minimizeMemoryUsage);
    // Sentinel = 'minimizeMemoryUsage'
    (msg__)->WriteSentinel(1321600977);
    WriteIPDLParam(msg__, this, DMDFile);
    // Sentinel = 'DMDFile'
    (msg__)->WriteSentinel(143983190);




    if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRDDChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRDD::Msg_RequestMemoryReport", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRDDChild::SendRequestMemoryReport(
        const uint32_t& generation,
        const bool& anonymize,
        const bool& minimizeMemoryUsage,
        const mozilla::Maybe<FileDescriptor>& DMDFile) -> RefPtr<RequestMemoryReportPromise>
{
    RefPtr<MozPromise<uint32_t, ResponseRejectReason, true>::Private> promise__ = new MozPromise<uint32_t, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendRequestMemoryReport(std::move(generation), std::move(anonymize), std::move(minimizeMemoryUsage), std::move(DMDFile), [promise__](uint32_t&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRDDChild::SendPreferenceUpdate(const Pref& pref) -> bool
{
    IPC::Message* msg__ = PRDD::Msg_PreferenceUpdate(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, pref);
    // Sentinel = 'pref'
    (msg__)->WriteSentinel(71958958);




    if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRDDChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRDD::Msg_PreferenceUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRDDChild::SendUpdateVar(const GfxVarUpdate& var) -> bool
{
    IPC::Message* msg__ = PRDD::Msg_UpdateVar(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, var);
    // Sentinel = 'var'
    (msg__)->WriteSentinel(43581770);




    if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRDDChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRDD::Msg_UpdateVar", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRDDChild::SendInitVideoBridge(
        Endpoint<mozilla::layers::PVideoBridgeChild>&& endpoint,
        const bool& createHardwareDevice,
        const ContentDeviceData& contentDeviceData) -> bool
{
    IPC::Message* msg__ = PRDD::Msg_InitVideoBridge(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(endpoint));
    // Sentinel = 'endpoint'
    (msg__)->WriteSentinel(251724642);
    WriteIPDLParam(msg__, this, createHardwareDevice);
    // Sentinel = 'createHardwareDevice'
    (msg__)->WriteSentinel(1403914227);
    WriteIPDLParam(msg__, this, contentDeviceData);
    // Sentinel = 'contentDeviceData'
    (msg__)->WriteSentinel(1043203782);




    if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRDDChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRDD::Msg_InitVideoBridge", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRDDChild::SendGetUntrustedModulesData(
        mozilla::ipc::ResolveCallback<mozilla::Maybe<UntrustedModulesData>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRDD::Msg_GetUntrustedModulesData(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRDDChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRDD::Msg_GetUntrustedModulesData", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRDDChild::SendGetUntrustedModulesData() -> RefPtr<GetUntrustedModulesDataPromise>
{
    RefPtr<MozPromise<mozilla::Maybe<UntrustedModulesData>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<mozilla::Maybe<UntrustedModulesData>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetUntrustedModulesData([promise__](mozilla::Maybe<UntrustedModulesData>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRDDChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRDDChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRDDChild::OnMessageReceived(const Message& msg__) -> PRDDChild::Result
{
    switch (msg__.type()) {
    case PRDD::Reply_RequestMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRDDChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRDD::Msg_RequestMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<uint32_t> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                uint32_t aGeneration{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                    FatalError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'aGeneration'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aGeneration));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRDD::Reply_GetUntrustedModulesData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRDDChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRDD::Msg_GetUntrustedModulesData", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<mozilla::Maybe<UntrustedModulesData>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                mozilla::Maybe<UntrustedModulesData> data{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                    FatalError("Error deserializing 'UntrustedModulesData?'");
                    return MsgValueError;
                }
                // Sentinel = 'data'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'UntrustedModulesData?'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(data));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRDD::Msg_InitCrashReporter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRDDChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRDD::Msg_InitCrashReporter", OTHER);

            PickleIterator iter__{msg__};
            NativeThreadId threadId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(threadId)))))) {
                FatalError("Error deserializing 'NativeThreadId'");
                return MsgValueError;
            }
            // Sentinel = 'threadId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 248185638)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NativeThreadId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RDDChild*>(this))->RecvInitCrashReporter(std::move(threadId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRDD::Msg_AddMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRDDChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRDD::Msg_AddMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            MemoryReport aReport{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReport)))))) {
                FatalError("Error deserializing 'MemoryReport'");
                return MsgValueError;
            }
            // Sentinel = 'aReport'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184025822)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MemoryReport'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RDDChild*>(this))->RecvAddMemoryReport(std::move(aReport))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRDD::Msg_GetModulesTrust__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRDDChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRDD::Msg_GetModulesTrust", OTHER);

            PickleIterator iter__{msg__};
            ModulePaths aModPaths{};
            bool aRunAtNormalPriority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModPaths)))))) {
                FatalError("Error deserializing 'ModulePaths'");
                return MsgValueError;
            }
            // Sentinel = 'aModPaths'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284033922)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ModulePaths'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRunAtNormalPriority)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aRunAtNormalPriority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1380517911)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetModulesTrustResolver resolver = [proxy__, seqno__, id__](mozilla::Maybe<ModulesMapResult>&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRDDChild* self__ = static_cast<PRDDChild*>(proxy__->Get());

                IPC::Message* reply__ = PRDD::Reply_GetModulesTrust(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, std::move(aParam));
                // Sentinel = 'modMapResult'
                (reply__)->WriteSentinel(519963870);

                if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRDDChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RDDChild*>(this))->RecvGetModulesTrust(std::move(aModPaths), std::move(aRunAtNormalPriority), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRDD::Msg_UpdateMediaCodecsSupported__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRDDChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRDDChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRDD::Msg_UpdateMediaCodecsSupported", OTHER);

            PickleIterator iter__{msg__};
            MediaCodecsSupported aSupported{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSupported)))))) {
                FatalError("Error deserializing 'MediaCodecsSupported'");
                return MsgValueError;
            }
            // Sentinel = 'aSupported'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 378799144)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaCodecsSupported'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RDDChild*>(this))->RecvUpdateMediaCodecsSupported(std::move(aSupported))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PRDDChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRDDChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRDDChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRDDChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRDDChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PRDDChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PRDDChild::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PRDDChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PRDDChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRDD", PRDDMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PRDDChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
