//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PSpeechSynthesisRequestChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PSpeechSynthesisChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PSpeechSynthesisRequestChild::PSpeechSynthesisRequestChild() :
    mozilla::ipc::IProtocol(PSpeechSynthesisRequestMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PSpeechSynthesisRequestChild);
}

PSpeechSynthesisRequestChild::~PSpeechSynthesisRequestChild()
{
    MOZ_COUNT_DTOR(PSpeechSynthesisRequestChild);
}

auto PSpeechSynthesisRequestChild::Manager() const -> PSpeechSynthesisChild*
{
    return static_cast<PSpeechSynthesisChild*>(IProtocol::Manager());
}

auto PSpeechSynthesisRequestChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PSpeechSynthesisRequestChild::Send__delete__(PSpeechSynthesisRequestChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PSpeechSynthesisRequestMsgStart, actor);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendPause() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_Pause(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_Pause", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendResume() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_Resume(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_Resume", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendCancel() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_Cancel(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_Cancel", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendForceEnd() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_ForceEnd(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_ForceEnd", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendSetAudioOutputVolume(const float& aVolume) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_SetAudioOutputVolume(Id());

    WriteIPDLParam(msg__, this, aVolume);
    // Sentinel = 'aVolume'
    (msg__)->WriteSentinel(187368154);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_SetAudioOutputVolume", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PSpeechSynthesisRequestChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PSpeechSynthesisRequestChild::OnMessageReceived(const Message& msg__) -> PSpeechSynthesisRequestChild::Result
{
    switch (msg__.type()) {
    case PSpeechSynthesisRequest::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnEnd__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnEnd", OTHER);

            PickleIterator iter__{msg__};
            bool aIsError{};
            float aElapsedTime{};
            uint32_t aCharIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsError)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsError'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 227017512)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aElapsedTime)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 502334639)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCharIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 341115864)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnEnd(std::move(aIsError), std::move(aElapsedTime), std::move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnStart__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnStart", OTHER);

            PickleIterator iter__{msg__};
            nsString aUri{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUri)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aUri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64225682)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnStart(std::move(aUri))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnPause__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnPause", OTHER);

            PickleIterator iter__{msg__};
            float aElapsedTime{};
            uint32_t aCharIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aElapsedTime)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 502334639)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCharIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 341115864)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnPause(std::move(aElapsedTime), std::move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnResume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnResume", OTHER);

            PickleIterator iter__{msg__};
            float aElapsedTime{};
            uint32_t aCharIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aElapsedTime)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 502334639)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCharIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 341115864)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnResume(std::move(aElapsedTime), std::move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnBoundary__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnBoundary", OTHER);

            PickleIterator iter__{msg__};
            nsString aName{};
            float aElapsedTime{};
            uint32_t aCharIndex{};
            uint32_t aCharLength{};
            uint8_t argc{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92537315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aElapsedTime)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 502334639)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCharIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 341115864)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCharLength)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharLength'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 413140034)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(argc)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'argc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 68092318)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnBoundary(std::move(aName), std::move(aElapsedTime), std::move(aCharIndex), std::move(aCharLength), std::move(argc))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnMark__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnMark", OTHER);

            PickleIterator iter__{msg__};
            nsString aName{};
            float aElapsedTime{};
            uint32_t aCharIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92537315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aElapsedTime)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 502334639)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCharIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 341115864)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnMark(std::move(aName), std::move(aElapsedTime), std::move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PSpeechSynthesisRequestChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisRequestChild::Result
{
    return MsgNotKnown;
}

auto PSpeechSynthesisRequestChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisRequestChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PSpeechSynthesisRequestChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PSpeechSynthesisRequestChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PSpeechSynthesisRequestChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PSpeechSynthesisRequest", PSpeechSynthesisRequestMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PSpeechSynthesisRequestChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
