//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/localstorage/SerializationHelpers.h"
#include "mozilla/dom/PBackgroundLSSharedTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LSRequestCommonParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::LSRequestCommonParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).storagePrincipalInfo());
    // Sentinel = 'storagePrincipalInfo'
    (aMsg)->WriteSentinel(1455425572);
    WriteIPDLParam(aMsg, aActor, (aVar).originKey());
    // Sentinel = 'originKey'
    (aMsg)->WriteSentinel(313656242);
}

auto IPDLParamTraits<mozilla::dom::LSRequestCommonParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'LSRequestCommonParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'LSRequestCommonParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->storagePrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'storagePrincipalInfo' (PrincipalInfo) member of 'LSRequestCommonParams'");
        return false;
    }
    // Sentinel = 'storagePrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1455425572)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'storagePrincipalInfo' (PrincipalInfo) member of 'LSRequestCommonParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originKey())))))) {
        aActor->FatalError("Error deserializing 'originKey' (nsCString) member of 'LSRequestCommonParams'");
        return false;
    }
    // Sentinel = 'originKey'
    if ((!((aMsg)->ReadSentinel(aIter, 313656242)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originKey' (nsCString) member of 'LSRequestCommonParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LSRequestPreloadDatastoreParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::LSRequestPreloadDatastoreParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
}

auto IPDLParamTraits<mozilla::dom::LSRequestPreloadDatastoreParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (LSRequestCommonParams) member of 'LSRequestPreloadDatastoreParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (LSRequestCommonParams) member of 'LSRequestPreloadDatastoreParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LSRequestPrepareDatastoreParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::LSRequestPrepareDatastoreParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
    WriteIPDLParam(aMsg, aActor, (aVar).clientId());
    // Sentinel = 'clientId'
    (aMsg)->WriteSentinel(244122413);
}

auto IPDLParamTraits<mozilla::dom::LSRequestPrepareDatastoreParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (LSRequestCommonParams) member of 'LSRequestPrepareDatastoreParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (LSRequestCommonParams) member of 'LSRequestPrepareDatastoreParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientId())))))) {
        aActor->FatalError("Error deserializing 'clientId' (nsID?) member of 'LSRequestPrepareDatastoreParams'");
        return false;
    }
    // Sentinel = 'clientId'
    if ((!((aMsg)->ReadSentinel(aIter, 244122413)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientId' (nsID?) member of 'LSRequestPrepareDatastoreParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LSRequestPrepareObserverParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::LSRequestPrepareObserverParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).storagePrincipalInfo());
    // Sentinel = 'storagePrincipalInfo'
    (aMsg)->WriteSentinel(1455425572);
    WriteIPDLParam(aMsg, aActor, (aVar).clientId());
    // Sentinel = 'clientId'
    (aMsg)->WriteSentinel(244122413);
}

auto IPDLParamTraits<mozilla::dom::LSRequestPrepareObserverParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'LSRequestPrepareObserverParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'LSRequestPrepareObserverParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->storagePrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'storagePrincipalInfo' (PrincipalInfo) member of 'LSRequestPrepareObserverParams'");
        return false;
    }
    // Sentinel = 'storagePrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1455425572)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'storagePrincipalInfo' (PrincipalInfo) member of 'LSRequestPrepareObserverParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientId())))))) {
        aActor->FatalError("Error deserializing 'clientId' (nsID?) member of 'LSRequestPrepareObserverParams'");
        return false;
    }
    // Sentinel = 'clientId'
    if ((!((aMsg)->ReadSentinel(aIter, 244122413)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientId' (nsID?) member of 'LSRequestPrepareObserverParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union LSRequestParams|
//
namespace mozilla {
namespace dom {
auto LSRequestParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TLSRequestPreloadDatastoreParams:
        {
            (ptr_LSRequestPreloadDatastoreParams())->~LSRequestPreloadDatastoreParams__tdef();
            break;
        }
    case TLSRequestPrepareDatastoreParams:
        {
            (ptr_LSRequestPrepareDatastoreParams())->~LSRequestPrepareDatastoreParams__tdef();
            break;
        }
    case TLSRequestPrepareObserverParams:
        {
            (ptr_LSRequestPrepareObserverParams())->~LSRequestPrepareObserverParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT LSRequestParams::LSRequestParams(const LSRequestPreloadDatastoreParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_LSRequestPreloadDatastoreParams()) LSRequestPreloadDatastoreParams(aOther);
    mType = TLSRequestPreloadDatastoreParams;
}

MOZ_IMPLICIT LSRequestParams::LSRequestParams(LSRequestPreloadDatastoreParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_LSRequestPreloadDatastoreParams()) LSRequestPreloadDatastoreParams(std::move(aOther));
    mType = TLSRequestPreloadDatastoreParams;
}

MOZ_IMPLICIT LSRequestParams::LSRequestParams(const LSRequestPrepareDatastoreParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_LSRequestPrepareDatastoreParams()) LSRequestPrepareDatastoreParams(aOther);
    mType = TLSRequestPrepareDatastoreParams;
}

MOZ_IMPLICIT LSRequestParams::LSRequestParams(LSRequestPrepareDatastoreParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_LSRequestPrepareDatastoreParams()) LSRequestPrepareDatastoreParams(std::move(aOther));
    mType = TLSRequestPrepareDatastoreParams;
}

MOZ_IMPLICIT LSRequestParams::LSRequestParams(const LSRequestPrepareObserverParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_LSRequestPrepareObserverParams()) LSRequestPrepareObserverParams(aOther);
    mType = TLSRequestPrepareObserverParams;
}

MOZ_IMPLICIT LSRequestParams::LSRequestParams(LSRequestPrepareObserverParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_LSRequestPrepareObserverParams()) LSRequestPrepareObserverParams(std::move(aOther));
    mType = TLSRequestPrepareObserverParams;
}

MOZ_IMPLICIT LSRequestParams::LSRequestParams(const LSRequestParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TLSRequestPreloadDatastoreParams:
        {
            new (mozilla::KnownNotNull, ptr_LSRequestPreloadDatastoreParams()) LSRequestPreloadDatastoreParams((aOther).get_LSRequestPreloadDatastoreParams());
            break;
        }
    case TLSRequestPrepareDatastoreParams:
        {
            new (mozilla::KnownNotNull, ptr_LSRequestPrepareDatastoreParams()) LSRequestPrepareDatastoreParams((aOther).get_LSRequestPrepareDatastoreParams());
            break;
        }
    case TLSRequestPrepareObserverParams:
        {
            new (mozilla::KnownNotNull, ptr_LSRequestPrepareObserverParams()) LSRequestPrepareObserverParams((aOther).get_LSRequestPrepareObserverParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT LSRequestParams::LSRequestParams(LSRequestParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TLSRequestPreloadDatastoreParams:
        {
            new (mozilla::KnownNotNull, ptr_LSRequestPreloadDatastoreParams()) LSRequestPreloadDatastoreParams(std::move((aOther).get_LSRequestPreloadDatastoreParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TLSRequestPrepareDatastoreParams:
        {
            new (mozilla::KnownNotNull, ptr_LSRequestPrepareDatastoreParams()) LSRequestPrepareDatastoreParams(std::move((aOther).get_LSRequestPrepareDatastoreParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TLSRequestPrepareObserverParams:
        {
            new (mozilla::KnownNotNull, ptr_LSRequestPrepareObserverParams()) LSRequestPrepareObserverParams(std::move((aOther).get_LSRequestPrepareObserverParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

LSRequestParams::~LSRequestParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto LSRequestParams::operator=(const LSRequestPreloadDatastoreParams& aRhs) -> LSRequestParams&
{
    if (MaybeDestroy(TLSRequestPreloadDatastoreParams)) {
        new (mozilla::KnownNotNull, ptr_LSRequestPreloadDatastoreParams()) LSRequestPreloadDatastoreParams;
    }
    (*(ptr_LSRequestPreloadDatastoreParams())) = aRhs;
    mType = TLSRequestPreloadDatastoreParams;
    return (*(this));
}

auto LSRequestParams::operator=(LSRequestPreloadDatastoreParams&& aRhs) -> LSRequestParams&
{
    if (MaybeDestroy(TLSRequestPreloadDatastoreParams)) {
        new (mozilla::KnownNotNull, ptr_LSRequestPreloadDatastoreParams()) LSRequestPreloadDatastoreParams;
    }
    (*(ptr_LSRequestPreloadDatastoreParams())) = std::move(aRhs);
    mType = TLSRequestPreloadDatastoreParams;
    return (*(this));
}

auto LSRequestParams::operator=(const LSRequestPrepareDatastoreParams& aRhs) -> LSRequestParams&
{
    if (MaybeDestroy(TLSRequestPrepareDatastoreParams)) {
        new (mozilla::KnownNotNull, ptr_LSRequestPrepareDatastoreParams()) LSRequestPrepareDatastoreParams;
    }
    (*(ptr_LSRequestPrepareDatastoreParams())) = aRhs;
    mType = TLSRequestPrepareDatastoreParams;
    return (*(this));
}

auto LSRequestParams::operator=(LSRequestPrepareDatastoreParams&& aRhs) -> LSRequestParams&
{
    if (MaybeDestroy(TLSRequestPrepareDatastoreParams)) {
        new (mozilla::KnownNotNull, ptr_LSRequestPrepareDatastoreParams()) LSRequestPrepareDatastoreParams;
    }
    (*(ptr_LSRequestPrepareDatastoreParams())) = std::move(aRhs);
    mType = TLSRequestPrepareDatastoreParams;
    return (*(this));
}

auto LSRequestParams::operator=(const LSRequestPrepareObserverParams& aRhs) -> LSRequestParams&
{
    if (MaybeDestroy(TLSRequestPrepareObserverParams)) {
        new (mozilla::KnownNotNull, ptr_LSRequestPrepareObserverParams()) LSRequestPrepareObserverParams;
    }
    (*(ptr_LSRequestPrepareObserverParams())) = aRhs;
    mType = TLSRequestPrepareObserverParams;
    return (*(this));
}

auto LSRequestParams::operator=(LSRequestPrepareObserverParams&& aRhs) -> LSRequestParams&
{
    if (MaybeDestroy(TLSRequestPrepareObserverParams)) {
        new (mozilla::KnownNotNull, ptr_LSRequestPrepareObserverParams()) LSRequestPrepareObserverParams;
    }
    (*(ptr_LSRequestPrepareObserverParams())) = std::move(aRhs);
    mType = TLSRequestPrepareObserverParams;
    return (*(this));
}

auto LSRequestParams::operator=(const LSRequestParams& aRhs) -> LSRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TLSRequestPreloadDatastoreParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LSRequestPreloadDatastoreParams()) LSRequestPreloadDatastoreParams;
            }
            (*(ptr_LSRequestPreloadDatastoreParams())) = (aRhs).get_LSRequestPreloadDatastoreParams();
            break;
        }
    case TLSRequestPrepareDatastoreParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LSRequestPrepareDatastoreParams()) LSRequestPrepareDatastoreParams;
            }
            (*(ptr_LSRequestPrepareDatastoreParams())) = (aRhs).get_LSRequestPrepareDatastoreParams();
            break;
        }
    case TLSRequestPrepareObserverParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LSRequestPrepareObserverParams()) LSRequestPrepareObserverParams;
            }
            (*(ptr_LSRequestPrepareObserverParams())) = (aRhs).get_LSRequestPrepareObserverParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto LSRequestParams::operator=(LSRequestParams&& aRhs) -> LSRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TLSRequestPreloadDatastoreParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LSRequestPreloadDatastoreParams()) LSRequestPreloadDatastoreParams;
            }
            (*(ptr_LSRequestPreloadDatastoreParams())) = std::move((aRhs).get_LSRequestPreloadDatastoreParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TLSRequestPrepareDatastoreParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LSRequestPrepareDatastoreParams()) LSRequestPrepareDatastoreParams;
            }
            (*(ptr_LSRequestPrepareDatastoreParams())) = std::move((aRhs).get_LSRequestPrepareDatastoreParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TLSRequestPrepareObserverParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LSRequestPrepareObserverParams()) LSRequestPrepareObserverParams;
            }
            (*(ptr_LSRequestPrepareObserverParams())) = std::move((aRhs).get_LSRequestPrepareObserverParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::LSRequestParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::LSRequestParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'LSRequestParams'
    (aMsg)->WriteSentinel(766379501);

    switch (type) {
    case union__::TLSRequestPreloadDatastoreParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_LSRequestPreloadDatastoreParams());
            // Sentinel = 'TLSRequestPreloadDatastoreParams'
            (aMsg)->WriteSentinel(3435990191);
            return;
        }
    case union__::TLSRequestPrepareDatastoreParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_LSRequestPrepareDatastoreParams());
            // Sentinel = 'TLSRequestPrepareDatastoreParams'
            (aMsg)->WriteSentinel(3444444343);
            return;
        }
    case union__::TLSRequestPrepareObserverParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_LSRequestPrepareObserverParams());
            // Sentinel = 'TLSRequestPrepareObserverParams'
            (aMsg)->WriteSentinel(3239840856);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::LSRequestParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::LSRequestParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union LSRequestParams");
        return false;
    }
    // Sentinel = 'LSRequestParams'
    if ((!((aMsg)->ReadSentinel(aIter, 766379501)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union LSRequestParams");
        return false;
    }

    switch (type) {
    case union__::TLSRequestPreloadDatastoreParams:
        {
            mozilla::dom::LSRequestPreloadDatastoreParams tmp = mozilla::dom::LSRequestPreloadDatastoreParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_LSRequestPreloadDatastoreParams())))))) {
                aActor->FatalError("Error deserializing variant TLSRequestPreloadDatastoreParams of union LSRequestParams");
                return false;
            }
            // Sentinel = 'TLSRequestPreloadDatastoreParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3435990191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TLSRequestPreloadDatastoreParams of union LSRequestParams");
                return false;
            }
            return true;
        }
    case union__::TLSRequestPrepareDatastoreParams:
        {
            mozilla::dom::LSRequestPrepareDatastoreParams tmp = mozilla::dom::LSRequestPrepareDatastoreParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_LSRequestPrepareDatastoreParams())))))) {
                aActor->FatalError("Error deserializing variant TLSRequestPrepareDatastoreParams of union LSRequestParams");
                return false;
            }
            // Sentinel = 'TLSRequestPrepareDatastoreParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3444444343)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TLSRequestPrepareDatastoreParams of union LSRequestParams");
                return false;
            }
            return true;
        }
    case union__::TLSRequestPrepareObserverParams:
        {
            mozilla::dom::LSRequestPrepareObserverParams tmp = mozilla::dom::LSRequestPrepareObserverParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_LSRequestPrepareObserverParams())))))) {
                aActor->FatalError("Error deserializing variant TLSRequestPrepareObserverParams of union LSRequestParams");
                return false;
            }
            // Sentinel = 'TLSRequestPrepareObserverParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3239840856)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TLSRequestPrepareObserverParams of union LSRequestParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LSSimpleRequestPreloadedParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::LSSimpleRequestPreloadedParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).storagePrincipalInfo());
    // Sentinel = 'storagePrincipalInfo'
    (aMsg)->WriteSentinel(1455425572);
}

auto IPDLParamTraits<mozilla::dom::LSSimpleRequestPreloadedParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'LSSimpleRequestPreloadedParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'LSSimpleRequestPreloadedParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->storagePrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'storagePrincipalInfo' (PrincipalInfo) member of 'LSSimpleRequestPreloadedParams'");
        return false;
    }
    // Sentinel = 'storagePrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1455425572)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'storagePrincipalInfo' (PrincipalInfo) member of 'LSSimpleRequestPreloadedParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union LSSimpleRequestParams|
//
namespace mozilla {
namespace dom {
auto LSSimpleRequestParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TLSSimpleRequestPreloadedParams:
        {
            (ptr_LSSimpleRequestPreloadedParams())->~LSSimpleRequestPreloadedParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT LSSimpleRequestParams::LSSimpleRequestParams(const LSSimpleRequestPreloadedParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_LSSimpleRequestPreloadedParams()) LSSimpleRequestPreloadedParams(aOther);
    mType = TLSSimpleRequestPreloadedParams;
}

MOZ_IMPLICIT LSSimpleRequestParams::LSSimpleRequestParams(LSSimpleRequestPreloadedParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_LSSimpleRequestPreloadedParams()) LSSimpleRequestPreloadedParams(std::move(aOther));
    mType = TLSSimpleRequestPreloadedParams;
}

MOZ_IMPLICIT LSSimpleRequestParams::LSSimpleRequestParams(const LSSimpleRequestParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TLSSimpleRequestPreloadedParams:
        {
            new (mozilla::KnownNotNull, ptr_LSSimpleRequestPreloadedParams()) LSSimpleRequestPreloadedParams((aOther).get_LSSimpleRequestPreloadedParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT LSSimpleRequestParams::LSSimpleRequestParams(LSSimpleRequestParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TLSSimpleRequestPreloadedParams:
        {
            new (mozilla::KnownNotNull, ptr_LSSimpleRequestPreloadedParams()) LSSimpleRequestPreloadedParams(std::move((aOther).get_LSSimpleRequestPreloadedParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

LSSimpleRequestParams::~LSSimpleRequestParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto LSSimpleRequestParams::operator=(const LSSimpleRequestPreloadedParams& aRhs) -> LSSimpleRequestParams&
{
    if (MaybeDestroy(TLSSimpleRequestPreloadedParams)) {
        new (mozilla::KnownNotNull, ptr_LSSimpleRequestPreloadedParams()) LSSimpleRequestPreloadedParams;
    }
    (*(ptr_LSSimpleRequestPreloadedParams())) = aRhs;
    mType = TLSSimpleRequestPreloadedParams;
    return (*(this));
}

auto LSSimpleRequestParams::operator=(LSSimpleRequestPreloadedParams&& aRhs) -> LSSimpleRequestParams&
{
    if (MaybeDestroy(TLSSimpleRequestPreloadedParams)) {
        new (mozilla::KnownNotNull, ptr_LSSimpleRequestPreloadedParams()) LSSimpleRequestPreloadedParams;
    }
    (*(ptr_LSSimpleRequestPreloadedParams())) = std::move(aRhs);
    mType = TLSSimpleRequestPreloadedParams;
    return (*(this));
}

auto LSSimpleRequestParams::operator=(const LSSimpleRequestParams& aRhs) -> LSSimpleRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TLSSimpleRequestPreloadedParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LSSimpleRequestPreloadedParams()) LSSimpleRequestPreloadedParams;
            }
            (*(ptr_LSSimpleRequestPreloadedParams())) = (aRhs).get_LSSimpleRequestPreloadedParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto LSSimpleRequestParams::operator=(LSSimpleRequestParams&& aRhs) -> LSSimpleRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TLSSimpleRequestPreloadedParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LSSimpleRequestPreloadedParams()) LSSimpleRequestPreloadedParams;
            }
            (*(ptr_LSSimpleRequestPreloadedParams())) = std::move((aRhs).get_LSSimpleRequestPreloadedParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::LSSimpleRequestParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::LSSimpleRequestParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'LSSimpleRequestParams'
    (aMsg)->WriteSentinel(1494222935);

    switch (type) {
    case union__::TLSSimpleRequestPreloadedParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_LSSimpleRequestPreloadedParams());
            // Sentinel = 'TLSSimpleRequestPreloadedParams'
            (aMsg)->WriteSentinel(3218869307);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::LSSimpleRequestParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::LSSimpleRequestParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union LSSimpleRequestParams");
        return false;
    }
    // Sentinel = 'LSSimpleRequestParams'
    if ((!((aMsg)->ReadSentinel(aIter, 1494222935)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union LSSimpleRequestParams");
        return false;
    }

    switch (type) {
    case union__::TLSSimpleRequestPreloadedParams:
        {
            mozilla::dom::LSSimpleRequestPreloadedParams tmp = mozilla::dom::LSSimpleRequestPreloadedParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_LSSimpleRequestPreloadedParams())))))) {
                aActor->FatalError("Error deserializing variant TLSSimpleRequestPreloadedParams of union LSSimpleRequestParams");
                return false;
            }
            // Sentinel = 'TLSSimpleRequestPreloadedParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3218869307)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TLSSimpleRequestPreloadedParams of union LSSimpleRequestParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LSItemInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::LSItemInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
}

auto IPDLParamTraits<mozilla::dom::LSItemInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (nsString) member of 'LSItemInfo'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (nsString) member of 'LSItemInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (LSValue) member of 'LSItemInfo'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (LSValue) member of 'LSItemInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
