//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/FeaturePolicyUtils.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/ipc/TransportSecurityInfoUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/dom/PInProcessParent.h"
#include "mozilla/dom/PInProcessChild.h"
#include "mozilla/dom/PBrowserBridgeParent.h"
#include "mozilla/dom/PBrowserBridgeChild.h"
#include "mozilla/dom/PWindowGlobal.h"
#include "mozilla/dom/PWindowGlobalParent.h"
#include "mozilla/dom/PWindowGlobalChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PWindowGlobal {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PWindowGlobalParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PWindowGlobalChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_MakeFrameLocal(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MakeFrameLocal__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_MakeFrameRemote(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MakeFrameRemote__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_MakeFrameRemote(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_MakeFrameRemote__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DrawSnapshot(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DrawSnapshot__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DrawSnapshot(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DrawSnapshot__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetSecurityInfo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetSecurityInfo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetSecurityInfo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetSecurityInfo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DispatchSecurityPolicyViolation(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DispatchSecurityPolicyViolation__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SaveStorageAccessPermissionGranted(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SaveStorageAccessPermissionGranted__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddBlockedFrameNodeByClassifier(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddBlockedFrameNodeByClassifier__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ResetScalingZoom(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ResetScalingZoom__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetContainerFeaturePolicy(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetContainerFeaturePolicy__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RawMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RawMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LoadURI(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LoadURI__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InternalLoad(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InternalLoad__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDocumentURI(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDocumentURI__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDocumentPrincipal(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDocumentPrincipal__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDocumentHasLoaded(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDocumentHasLoaded__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDocumentHasUserInteracted(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDocumentHasUserInteracted__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateSandboxFlags(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateSandboxFlags__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDocumentCspSettings(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDocumentCspSettings__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateCookieJarSettings(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateCookieJarSettings__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDocumentTitle(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDocumentTitle__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDocumentSecurityInfo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDocumentSecurityInfo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateHttpsOnlyStatus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateHttpsOnlyStatus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetIsInitialDocument(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetIsInitialDocument__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Share(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Share__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Share(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Share__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetContentBlockingEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetContentBlockingEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetContentBlockingEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetContentBlockingEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetClientInfo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetClientInfo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CheckPermitUnload(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CheckPermitUnload__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CheckPermitUnload(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CheckPermitUnload__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ExpectPageUseCounters(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ExpectPageUseCounters__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AccumulatePageUseCounters(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AccumulatePageUseCounters__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Destroy(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Destroy__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PWindowGlobal
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct JSActorMessageMeta|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::JSActorMessageMeta>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).actorName());
    // Sentinel = 'actorName'
    (aMsg)->WriteSentinel(304350107);
    WriteIPDLParam(aMsg, aActor, (aVar).messageName());
    // Sentinel = 'messageName'
    (aMsg)->WriteSentinel(452133991);
    WriteIPDLParam(aMsg, aActor, (aVar).kind());
    // Sentinel = 'kind'
    (aMsg)->WriteSentinel(69927335);
    (aMsg)->WriteBytes((&((aVar).queryId())), 8);
    // Sentinel = 'queryId'
    (aMsg)->WriteSentinel(201196260);
}

auto IPDLParamTraits<mozilla::dom::JSActorMessageMeta>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->actorName())))))) {
        aActor->FatalError("Error deserializing 'actorName' (nsCString) member of 'JSActorMessageMeta'");
        return false;
    }
    // Sentinel = 'actorName'
    if ((!((aMsg)->ReadSentinel(aIter, 304350107)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'actorName' (nsCString) member of 'JSActorMessageMeta'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->messageName())))))) {
        aActor->FatalError("Error deserializing 'messageName' (nsString) member of 'JSActorMessageMeta'");
        return false;
    }
    // Sentinel = 'messageName'
    if ((!((aMsg)->ReadSentinel(aIter, 452133991)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'messageName' (nsString) member of 'JSActorMessageMeta'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->kind())))))) {
        aActor->FatalError("Error deserializing 'kind' (JSActorMessageKind) member of 'JSActorMessageMeta'");
        return false;
    }
    // Sentinel = 'kind'
    if ((!((aMsg)->ReadSentinel(aIter, 69927335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'kind' (JSActorMessageKind) member of 'JSActorMessageMeta'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->queryId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'queryId'
    if ((!((aMsg)->ReadSentinel(aIter, 201196260)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCWebShareData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCWebShareData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).title());
    // Sentinel = 'title'
    (aMsg)->WriteSentinel(109445667);
    WriteIPDLParam(aMsg, aActor, (aVar).text());
    // Sentinel = 'text'
    (aMsg)->WriteSentinel(73859526);
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
}

auto IPDLParamTraits<mozilla::dom::IPCWebShareData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->title())))))) {
        aActor->FatalError("Error deserializing 'title' (nsCString) member of 'IPCWebShareData'");
        return false;
    }
    // Sentinel = 'title'
    if ((!((aMsg)->ReadSentinel(aIter, 109445667)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'title' (nsCString) member of 'IPCWebShareData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->text())))))) {
        aActor->FatalError("Error deserializing 'text' (nsCString) member of 'IPCWebShareData'");
        return false;
    }
    // Sentinel = 'text'
    if ((!((aMsg)->ReadSentinel(aIter, 73859526)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'text' (nsCString) member of 'IPCWebShareData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsIURI) member of 'IPCWebShareData'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsIURI) member of 'IPCWebShareData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
