//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PHttpConnectionMgrChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/HttpConnectionMgrChild.h"

#include "mozilla/net/PAltSvcTransactionChild.h"
#include "mozilla/net/PSocketProcessChild.h"
#include "mozilla/net/PHttpTransactionChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PHttpConnectionMgrChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PHttpConnectionMgrChild::PHttpConnectionMgrChild() :
    mozilla::ipc::IProtocol(PHttpConnectionMgrMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PHttpConnectionMgrChild);
}

PHttpConnectionMgrChild::~PHttpConnectionMgrChild()
{
    MOZ_COUNT_DTOR(PHttpConnectionMgrChild);
}

auto PHttpConnectionMgrChild::Manager() const -> PSocketProcessChild*
{
    return static_cast<PSocketProcessChild*>(IProtocol::Manager());
}

auto PHttpConnectionMgrChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHttpConnectionMgrChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpConnectionMgrChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpConnectionMgrChild::OnMessageReceived(const Message& msg__) -> PHttpConnectionMgrChild::Result
{
    switch (msg__.type()) {
    case PHttpConnectionMgr::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PHttpConnectionMgrChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PHttpConnectionMgr'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PHttpConnectionMgr'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpConnectionMgr'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PHttpConnectionMgrMsgStart, actor);

            return MsgProcessed;
        }
    case PHttpConnectionMgr::Msg_DoShiftReloadConnectionCleanupWithConnInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_DoShiftReloadConnectionCleanupWithConnInfo", OTHER);

            PickleIterator iter__{msg__};
            HttpConnectionInfoCloneArgs aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'HttpConnectionInfoCloneArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HttpConnectionInfoCloneArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->RecvDoShiftReloadConnectionCleanupWithConnInfo(std::move(aArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpConnectionMgr::Msg_UpdateCurrentTopLevelOuterContentWindowId__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_UpdateCurrentTopLevelOuterContentWindowId", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aWindowId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296223623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->RecvUpdateCurrentTopLevelOuterContentWindowId(std::move(aWindowId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpConnectionMgr::Msg_AddTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_AddTransaction", OTHER);

            PickleIterator iter__{msg__};
            PHttpTransactionChild* aTrans{};
            int32_t aPriority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrans)))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(aTrans))))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTrans'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136970858)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPriority)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPriority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303367108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->RecvAddTransaction(aTrans, std::move(aPriority))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpConnectionMgr::Msg_AddTransactionWithStickyConn__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_AddTransactionWithStickyConn", OTHER);

            PickleIterator iter__{msg__};
            PHttpTransactionChild* aTrans{};
            int32_t aPriority{};
            PHttpTransactionChild* aTransWithStickyConn{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrans)))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(aTrans))))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTrans'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136970858)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPriority)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPriority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303367108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTransWithStickyConn)))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(aTransWithStickyConn))))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTransWithStickyConn'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1405487115)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->RecvAddTransactionWithStickyConn(aTrans, std::move(aPriority), aTransWithStickyConn)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpConnectionMgr::Msg_RescheduleTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_RescheduleTransaction", OTHER);

            PickleIterator iter__{msg__};
            PHttpTransactionChild* aTrans{};
            int32_t aPriority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrans)))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(aTrans))))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTrans'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136970858)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPriority)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPriority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303367108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->RecvRescheduleTransaction(aTrans, std::move(aPriority))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpConnectionMgr::Msg_UpdateClassOfServiceOnTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_UpdateClassOfServiceOnTransaction", OTHER);

            PickleIterator iter__{msg__};
            PHttpTransactionChild* aTrans{};
            uint32_t aClassOfService{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrans)))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(aTrans))))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTrans'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136970858)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClassOfService)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aClassOfService'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 770770398)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->RecvUpdateClassOfServiceOnTransaction(aTrans, std::move(aClassOfService))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpConnectionMgr::Msg_CancelTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_CancelTransaction", OTHER);

            PickleIterator iter__{msg__};
            PHttpTransactionChild* aTrans{};
            nsresult aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrans)))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(aTrans))))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTrans'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136970858)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->RecvCancelTransaction(aTrans, std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpConnectionMgr::Msg_SpeculativeConnect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpConnectionMgrChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_SpeculativeConnect", OTHER);

            PickleIterator iter__{msg__};
            HttpConnectionInfoCloneArgs aConnInfo{};
            mozilla::Maybe<SpeculativeConnectionOverriderArgs> aOverriderArgs{};
            uint32_t aCaps{};
            mozilla::Maybe<PAltSvcTransactionChild*> aTrans{};
            bool aFetchHTTPSRR{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aConnInfo)))))) {
                FatalError("Error deserializing 'HttpConnectionInfoCloneArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aConnInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284558204)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HttpConnectionInfoCloneArgs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOverriderArgs)))))) {
                FatalError("Error deserializing 'SpeculativeConnectionOverriderArgs?'");
                return MsgValueError;
            }
            // Sentinel = 'aOverriderArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 703268257)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SpeculativeConnectionOverriderArgs?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCaps)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCaps'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90964457)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrans)))))) {
                FatalError("Error deserializing 'PAltSvcTransaction?'");
                return MsgValueError;
            }
            // Sentinel = 'aTrans'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136970858)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PAltSvcTransaction?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFetchHTTPSRR)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aFetchHTTPSRR'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 547292291)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpConnectionMgrChild*>(this))->RecvSpeculativeConnect(std::move(aConnInfo), std::move(aOverriderArgs), std::move(aCaps), std::move(aTrans), std::move(aFetchHTTPSRR))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHttpConnectionMgrChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpConnectionMgrChild::Result
{
    return MsgNotKnown;
}

auto PHttpConnectionMgrChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpConnectionMgrChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHttpConnectionMgrChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PHttpConnectionMgrChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PHttpConnectionMgrChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHttpConnectionMgr", PHttpConnectionMgrMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PHttpConnectionMgrChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
