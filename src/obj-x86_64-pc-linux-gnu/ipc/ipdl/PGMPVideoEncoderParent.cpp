//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPVideoEncoderParent.h"
#include "GMPMessageUtils.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPContentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PGMPVideoEncoderParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PGMPVideoEncoderParent::PGMPVideoEncoderParent() :
    mozilla::ipc::IProtocol(PGMPVideoEncoderMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PGMPVideoEncoderParent);
}

PGMPVideoEncoderParent::~PGMPVideoEncoderParent()
{
    MOZ_COUNT_DTOR(PGMPVideoEncoderParent);
}

auto PGMPVideoEncoderParent::Manager() const -> PGMPContentParent*
{
    return static_cast<PGMPContentParent*>(IProtocol::Manager());
}

auto PGMPVideoEncoderParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PGMPVideoEncoderParent::SendInitEncode(
        const GMPVideoCodec& aCodecSettings,
        const nsTArray<uint8_t>& aCodecSpecific,
        const int32_t& aNumberOfCores,
        const uint32_t& aMaxPayloadSize) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_InitEncode(Id());

    WriteIPDLParam(msg__, this, aCodecSettings);
    // Sentinel = 'aCodecSettings'
    (msg__)->WriteSentinel(674629009);
    WriteIPDLParam(msg__, this, aCodecSpecific);
    // Sentinel = 'aCodecSpecific'
    (msg__)->WriteSentinel(665847142);
    WriteIPDLParam(msg__, this, aNumberOfCores);
    // Sentinel = 'aNumberOfCores'
    (msg__)->WriteSentinel(681117052);
    WriteIPDLParam(msg__, this, aMaxPayloadSize);
    // Sentinel = 'aMaxPayloadSize'
    (msg__)->WriteSentinel(780076525);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_InitEncode", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderParent::SendEncode(
        const GMPVideoi420FrameData& aInputFrame,
        const nsTArray<uint8_t>& aCodecSpecificInfo,
        const nsTArray<GMPVideoFrameType>& aFrameTypes) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_Encode(Id());

    WriteIPDLParam(msg__, this, aInputFrame);
    // Sentinel = 'aInputFrame'
    (msg__)->WriteSentinel(434177117);
    WriteIPDLParam(msg__, this, aCodecSpecificInfo);
    // Sentinel = 'aCodecSpecificInfo'
    (msg__)->WriteSentinel(1089537778);
    WriteIPDLParam(msg__, this, aFrameTypes);
    // Sentinel = 'aFrameTypes'
    (msg__)->WriteSentinel(426378338);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_Encode", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderParent::SendSetChannelParameters(
        const uint32_t& aPacketLoss,
        const uint32_t& aRTT) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_SetChannelParameters(Id());

    WriteIPDLParam(msg__, this, aPacketLoss);
    // Sentinel = 'aPacketLoss'
    (msg__)->WriteSentinel(423363675);
    WriteIPDLParam(msg__, this, aRTT);
    // Sentinel = 'aRTT'
    (msg__)->WriteSentinel(58327388);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_SetChannelParameters", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderParent::SendSetRates(
        const uint32_t& aNewBitRate,
        const uint32_t& aFrameRate) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_SetRates(Id());

    WriteIPDLParam(msg__, this, aNewBitRate);
    // Sentinel = 'aNewBitRate'
    (msg__)->WriteSentinel(415695927);
    WriteIPDLParam(msg__, this, aFrameRate);
    // Sentinel = 'aFrameRate'
    (msg__)->WriteSentinel(348128217);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_SetRates", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderParent::SendSetPeriodicKeyFrames(const bool& aEnable) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_SetPeriodicKeyFrames(Id());

    WriteIPDLParam(msg__, this, aEnable);
    // Sentinel = 'aEnable'
    (msg__)->WriteSentinel(173605545);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_SetPeriodicKeyFrames", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderParent::SendEncodingComplete() -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_EncodingComplete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_EncodingComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderParent::SendChildShmemForPool(Shmem&& aEncodedBuffer) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_ChildShmemForPool(Id());

    WriteIPDLParam(msg__, this, std::move(aEncodedBuffer));
    // Sentinel = 'aEncodedBuffer'
    (msg__)->WriteSentinel(668927342);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_ChildShmemForPool", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPVideoEncoderParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPVideoEncoderParent::OnMessageReceived(const Message& msg__) -> PGMPVideoEncoderParent::Result
{
    switch (msg__.type()) {
    case PGMPVideoEncoder::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PGMPVideoEncoderParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PGMPVideoEncoder'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PGMPVideoEncoder'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PGMPVideoEncoder'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PGMPVideoEncoderMsgStart, actor);

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_Encoded__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_Encoded", OTHER);

            PickleIterator iter__{msg__};
            GMPVideoEncodedFrameData aEncodedFrame{};
            nsTArray<uint8_t> aCodecSpecificInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEncodedFrame)))))) {
                FatalError("Error deserializing 'GMPVideoEncodedFrameData'");
                return MsgValueError;
            }
            // Sentinel = 'aEncodedFrame'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 578290943)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPVideoEncodedFrameData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCodecSpecificInfo)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aCodecSpecificInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1089537778)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvEncoded(std::move(aEncodedFrame), std::move(aCodecSpecificInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_Error__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_Error", OTHER);

            PickleIterator iter__{msg__};
            GMPErr aErr{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aErr)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aErr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61669771)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvError(std::move(aErr))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_Shutdown", OTHER);

            if ((!((this)->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_ParentShmemForPool__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_ParentShmemForPool", OTHER);

            PickleIterator iter__{msg__};
            Shmem aFrameBuffer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrameBuffer)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'aFrameBuffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 494732455)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvParentShmemForPool(std::move(aFrameBuffer))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPVideoEncoderParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPVideoEncoderParent::Result
{
    return MsgNotKnown;
}

auto PGMPVideoEncoderParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPVideoEncoderParent::Result
{
    switch (msg__.type()) {
    case PGMPVideoEncoder::Msg_NeedShmem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_NeedShmem", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aEncodedBufferSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEncodedBufferSize)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEncodedBufferSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1098319625)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            Shmem aMem{};
            if ((!((this)->AnswerNeedShmem(std::move(aEncodedBufferSize), (&(aMem)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PGMPVideoEncoder::Reply_NeedShmem(id__);

            WriteIPDLParam(reply__, this, std::move(aMem));
            // Sentinel = 'aMem'
            (reply__)->WriteSentinel(61211009);

            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPVideoEncoderParent::ClearSubtree() -> void
{
}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPVideoEncoderParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPVideoEncoderParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMPVideoEncoder", PGMPVideoEncoderMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPVideoEncoderParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
