//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PHandlerServiceChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"

#include "mozilla/dom/PContentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PHandlerServiceChild::PHandlerServiceChild() :
    mozilla::ipc::IProtocol(PHandlerServiceMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PHandlerServiceChild);
}

PHandlerServiceChild::~PHandlerServiceChild()
{
    MOZ_COUNT_DTOR(PHandlerServiceChild);
}

auto PHandlerServiceChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PHandlerServiceChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHandlerServiceChild::SendFillHandlerInfo(
        const HandlerInfo& aHandlerInfoData,
        const nsCString& aOverrideType,
        HandlerInfo* handlerInfoData) -> bool
{
    IPC::Message* msg__ = PHandlerService::Msg_FillHandlerInfo(Id());

    WriteIPDLParam(msg__, this, aHandlerInfoData);
    // Sentinel = 'aHandlerInfoData'
    (msg__)->WriteSentinel(869860902);
    WriteIPDLParam(msg__, this, aOverrideType);
    // Sentinel = 'aOverrideType'
    (msg__)->WriteSentinel(611583300);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHandlerService::Msg_FillHandlerInfo", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHandlerService::Msg_FillHandlerInfo", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, handlerInfoData)))) {
        FatalError("Error deserializing 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'handlerInfoData'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 799540709)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'HandlerInfo'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHandlerServiceChild::SendExistsForProtocolOS(
        const nsCString& aProtocolScheme,
        bool* exists) -> bool
{
    IPC::Message* msg__ = PHandlerService::Msg_ExistsForProtocolOS(Id());

    WriteIPDLParam(msg__, this, aProtocolScheme);
    // Sentinel = 'aProtocolScheme'
    (msg__)->WriteSentinel(809764361);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHandlerService::Msg_ExistsForProtocolOS", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHandlerService::Msg_ExistsForProtocolOS", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, exists)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'exists'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 152306337)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHandlerServiceChild::SendExistsForProtocol(
        const nsCString& aProtocolScheme,
        bool* exists) -> bool
{
    IPC::Message* msg__ = PHandlerService::Msg_ExistsForProtocol(Id());

    WriteIPDLParam(msg__, this, aProtocolScheme);
    // Sentinel = 'aProtocolScheme'
    (msg__)->WriteSentinel(809764361);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHandlerService::Msg_ExistsForProtocol", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHandlerService::Msg_ExistsForProtocol", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, exists)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'exists'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 152306337)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHandlerServiceChild::SendExists(
        const HandlerInfo& aHandlerInfo,
        bool* exists) -> bool
{
    IPC::Message* msg__ = PHandlerService::Msg_Exists(Id());

    WriteIPDLParam(msg__, this, aHandlerInfo);
    // Sentinel = 'aHandlerInfo'
    (msg__)->WriteSentinel(497878188);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHandlerService::Msg_Exists", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHandlerService::Msg_Exists", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, exists)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'exists'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 152306337)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHandlerServiceChild::SendGetTypeFromExtension(
        const nsCString& aFileExtension,
        nsCString* type) -> bool
{
    IPC::Message* msg__ = PHandlerService::Msg_GetTypeFromExtension(Id());

    WriteIPDLParam(msg__, this, aFileExtension);
    // Sentinel = 'aFileExtension'
    (msg__)->WriteSentinel(681313695);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHandlerService::Msg_GetTypeFromExtension", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHandlerService::Msg_GetTypeFromExtension", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, type)))) {
        FatalError("Error deserializing 'nsCString'");
        return false;
    }
    // Sentinel = 'type'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHandlerServiceChild::SendGetMIMEInfoFromOS(
        const nsCString& aMIMEType,
        const nsCString& aExtension,
        nsresult* rv,
        HandlerInfo* handlerInfoData,
        bool* found) -> bool
{
    IPC::Message* msg__ = PHandlerService::Msg_GetMIMEInfoFromOS(Id());

    WriteIPDLParam(msg__, this, aMIMEType);
    // Sentinel = 'aMIMEType'
    (msg__)->WriteSentinel(251659052);
    WriteIPDLParam(msg__, this, aExtension);
    // Sentinel = 'aExtension'
    (msg__)->WriteSentinel(369361951);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHandlerService::Msg_GetMIMEInfoFromOS", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHandlerService::Msg_GetMIMEInfoFromOS", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'nsresult'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, handlerInfoData)))) {
        FatalError("Error deserializing 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'handlerInfoData'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 799540709)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'HandlerInfo'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, found)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'found'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 106824221)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHandlerServiceChild::SendGetApplicationDescription(
        const nsCString& aScheme,
        nsresult* rv,
        nsString* description) -> bool
{
    IPC::Message* msg__ = PHandlerService::Msg_GetApplicationDescription(Id());

    WriteIPDLParam(msg__, this, aScheme);
    // Sentinel = 'aScheme'
    (msg__)->WriteSentinel(178062007);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHandlerService::Msg_GetApplicationDescription", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHandlerService::Msg_GetApplicationDescription", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'nsresult'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, description)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'description'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 461833381)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHandlerServiceChild::Send__delete__(PHandlerServiceChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PHandlerService::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHandlerServiceChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHandlerService::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PHandlerServiceMsgStart, actor);
    return sendok__;
}

auto PHandlerServiceChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHandlerServiceChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHandlerServiceChild::OnMessageReceived(const Message& msg__) -> PHandlerServiceChild::Result
{
    switch (msg__.type()) {
    case PHandlerService::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHandlerServiceChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHandlerServiceChild::Result
{
    return MsgNotKnown;
}

auto PHandlerServiceChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHandlerServiceChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHandlerServiceChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PHandlerServiceChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PHandlerServiceChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHandlerService", PHandlerServiceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PHandlerServiceChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
