//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PSpeechSynthesisRequestParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PSpeechSynthesisParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PSpeechSynthesisRequestParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PSpeechSynthesisRequestParent::PSpeechSynthesisRequestParent() :
    mozilla::ipc::IProtocol(PSpeechSynthesisRequestMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PSpeechSynthesisRequestParent);
}

PSpeechSynthesisRequestParent::~PSpeechSynthesisRequestParent()
{
    MOZ_COUNT_DTOR(PSpeechSynthesisRequestParent);
}

auto PSpeechSynthesisRequestParent::Manager() const -> PSpeechSynthesisParent*
{
    return static_cast<PSpeechSynthesisParent*>(IProtocol::Manager());
}

auto PSpeechSynthesisRequestParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PSpeechSynthesisRequestParent::SendOnEnd(
        const bool& aIsError,
        const float& aElapsedTime,
        const uint32_t& aCharIndex) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_OnEnd(Id());

    WriteIPDLParam(msg__, this, aIsError);
    // Sentinel = 'aIsError'
    (msg__)->WriteSentinel(227017512);
    WriteIPDLParam(msg__, this, aElapsedTime);
    // Sentinel = 'aElapsedTime'
    (msg__)->WriteSentinel(502334639);
    WriteIPDLParam(msg__, this, aCharIndex);
    // Sentinel = 'aCharIndex'
    (msg__)->WriteSentinel(341115864);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnEnd", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestParent::SendOnStart(const nsString& aUri) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_OnStart(Id());

    WriteIPDLParam(msg__, this, aUri);
    // Sentinel = 'aUri'
    (msg__)->WriteSentinel(64225682);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnStart", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestParent::SendOnPause(
        const float& aElapsedTime,
        const uint32_t& aCharIndex) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_OnPause(Id());

    WriteIPDLParam(msg__, this, aElapsedTime);
    // Sentinel = 'aElapsedTime'
    (msg__)->WriteSentinel(502334639);
    WriteIPDLParam(msg__, this, aCharIndex);
    // Sentinel = 'aCharIndex'
    (msg__)->WriteSentinel(341115864);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnPause", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestParent::SendOnResume(
        const float& aElapsedTime,
        const uint32_t& aCharIndex) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_OnResume(Id());

    WriteIPDLParam(msg__, this, aElapsedTime);
    // Sentinel = 'aElapsedTime'
    (msg__)->WriteSentinel(502334639);
    WriteIPDLParam(msg__, this, aCharIndex);
    // Sentinel = 'aCharIndex'
    (msg__)->WriteSentinel(341115864);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnResume", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestParent::SendOnBoundary(
        const nsString& aName,
        const float& aElapsedTime,
        const uint32_t& aCharIndex,
        const uint32_t& aCharLength,
        const uint8_t& argc) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_OnBoundary(Id());

    WriteIPDLParam(msg__, this, aName);
    // Sentinel = 'aName'
    (msg__)->WriteSentinel(92537315);
    WriteIPDLParam(msg__, this, aElapsedTime);
    // Sentinel = 'aElapsedTime'
    (msg__)->WriteSentinel(502334639);
    WriteIPDLParam(msg__, this, aCharIndex);
    // Sentinel = 'aCharIndex'
    (msg__)->WriteSentinel(341115864);
    WriteIPDLParam(msg__, this, aCharLength);
    // Sentinel = 'aCharLength'
    (msg__)->WriteSentinel(413140034);
    WriteIPDLParam(msg__, this, argc);
    // Sentinel = 'argc'
    (msg__)->WriteSentinel(68092318);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnBoundary", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestParent::SendOnMark(
        const nsString& aName,
        const float& aElapsedTime,
        const uint32_t& aCharIndex) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_OnMark(Id());

    WriteIPDLParam(msg__, this, aName);
    // Sentinel = 'aName'
    (msg__)->WriteSentinel(92537315);
    WriteIPDLParam(msg__, this, aElapsedTime);
    // Sentinel = 'aElapsedTime'
    (msg__)->WriteSentinel(502334639);
    WriteIPDLParam(msg__, this, aCharIndex);
    // Sentinel = 'aCharIndex'
    (msg__)->WriteSentinel(341115864);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_OnMark", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PSpeechSynthesisRequestParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PSpeechSynthesisRequestParent::OnMessageReceived(const Message& msg__) -> PSpeechSynthesisRequestParent::Result
{
    switch (msg__.type()) {
    case PSpeechSynthesisRequest::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PSpeechSynthesisRequestParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PSpeechSynthesisRequest'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PSpeechSynthesisRequest'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PSpeechSynthesisRequest'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PSpeechSynthesisRequestMsgStart, actor);

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_Pause__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_Pause", OTHER);

            if ((!((this)->RecvPause()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_Resume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_Resume", OTHER);

            if ((!((this)->RecvResume()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_Cancel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_Cancel", OTHER);

            if ((!((this)->RecvCancel()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_ForceEnd__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_ForceEnd", OTHER);

            if ((!((this)->RecvForceEnd()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_SetAudioOutputVolume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisRequestParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesisRequest::Msg_SetAudioOutputVolume", OTHER);

            PickleIterator iter__{msg__};
            float aVolume{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aVolume)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aVolume'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 187368154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetAudioOutputVolume(std::move(aVolume))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PSpeechSynthesisRequestParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisRequestParent::Result
{
    return MsgNotKnown;
}

auto PSpeechSynthesisRequestParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisRequestParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PSpeechSynthesisRequestParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PSpeechSynthesisRequestParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PSpeechSynthesisRequestParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PSpeechSynthesisRequest", PSpeechSynthesisRequestMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PSpeechSynthesisRequestParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
