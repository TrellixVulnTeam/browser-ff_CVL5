//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/GfxMessageUtils.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/WebRenderMessageUtils.h"
#include "mozilla/layers/PAPZParent.h"
#include "mozilla/layers/PAPZChild.h"
#include "mozilla/layers/PAPZCTreeManagerParent.h"
#include "mozilla/layers/PAPZCTreeManagerChild.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/layers/PCanvasParent.h"
#include "mozilla/layers/PCanvasChild.h"
#include "mozilla/layers/PCompositorManagerParent.h"
#include "mozilla/layers/PCompositorManagerChild.h"
#include "mozilla/widget/PCompositorWidgetParent.h"
#include "mozilla/widget/PCompositorWidgetChild.h"
#include "mozilla/layers/PLayerTransactionParent.h"
#include "mozilla/layers/PLayerTransactionChild.h"
#include "mozilla/layers/PTextureParent.h"
#include "mozilla/layers/PTextureChild.h"
#include "mozilla/dom/PWebGLParent.h"
#include "mozilla/dom/PWebGLChild.h"
#include "mozilla/layers/PWebRenderBridgeParent.h"
#include "mozilla/layers/PWebRenderBridgeChild.h"
#include "mozilla/webgpu/PWebGPUParent.h"
#include "mozilla/webgpu/PWebGPUChild.h"
#include "mozilla/layers/PCompositorBridge.h"
#include "mozilla/layers/PCompositorBridgeParent.h"
#include "mozilla/layers/PCompositorBridgeChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {
namespace PCompositorBridge {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PCompositorBridgeParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PCompositorBridgeChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_InvalidateLayers(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InvalidateLayers__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DidComposite(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_DidComposite__ID, 128, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::MEDIUMHIGH_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY), true);
}
IPC::Message*
Msg_NotifyFrameStats(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyFrameStats__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemotePaintIsReady(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemotePaintIsReady__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ParentAsyncMessages(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ParentAsyncMessages__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ObserveLayersUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ObserveLayersUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CompositorOptionsChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CompositorOptionsChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyJankedAnimations(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyJankedAnimations__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PCompositorWidgetConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PCompositorWidgetConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PCompositorWidgetConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PCompositorWidgetConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Initialize(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Initialize__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Initialize(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Initialize__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PAPZConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PAPZConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PAPZConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PAPZConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PAPZCTreeManagerConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PAPZCTreeManagerConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PAPZCTreeManagerConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PAPZCTreeManagerConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PWebGPUConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PWebGPUConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PWebGPUConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PWebGPUConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_WillClose(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WillClose__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_WillClose(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_WillClose__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Pause(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Pause__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Pause(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Pause__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Resume(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Resume__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Resume(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Resume__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ResumeAsync(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ResumeAsync__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyChildCreated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyChildCreated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NotifyChildCreated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NotifyChildCreated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_MapAndNotifyChildCreated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MapAndNotifyChildCreated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_MapAndNotifyChildCreated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_MapAndNotifyChildCreated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AdoptChild(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AdoptChild__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyChildRecreated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyChildRecreated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NotifyChildRecreated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NotifyChildRecreated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_MakeSnapshot(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MakeSnapshot__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_MakeSnapshot(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_MakeSnapshot__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_FlushRendering(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FlushRendering__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_FlushRendering(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_FlushRendering__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_FlushRenderingAsync(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FlushRenderingAsync__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_WaitOnTransactionProcessed(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WaitOnTransactionProcessed__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_WaitOnTransactionProcessed(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_WaitOnTransactionProcessed__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ForcePresent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ForcePresent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_StartFrameTimeRecording(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StartFrameTimeRecording__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_StartFrameTimeRecording(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_StartFrameTimeRecording__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_StopFrameTimeRecording(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StopFrameTimeRecording__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_StopFrameTimeRecording(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_StopFrameTimeRecording__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PLayerTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PLayerTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PLayerTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PLayerTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NotifyRegionInvalidated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyRegionInvalidated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestNotifyAfterRemotePaint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestNotifyAfterRemotePaint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PTextureConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PTextureConstructor__ID, 192, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY), true);
}
IPC::Message*
Reply_PTextureConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PTextureConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InitPCanvasParent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitPCanvasParent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReleasePCanvasParent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReleasePCanvasParent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SyncWithCompositor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SyncWithCompositor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SyncWithCompositor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SyncWithCompositor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PWebRenderBridgeConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PWebRenderBridgeConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PWebRenderBridgeConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PWebRenderBridgeConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CheckContentOnlyTDR(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CheckContentOnlyTDR__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CheckContentOnlyTDR(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CheckContentOnlyTDR__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_BeginRecording(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BeginRecording__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_BeginRecording(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_BeginRecording__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_EndRecordingToDisk(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EndRecordingToDisk__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_EndRecordingToDisk(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_EndRecordingToDisk__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_EndRecordingToMemory(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EndRecordingToMemory__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_EndRecordingToMemory(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_EndRecordingToMemory__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SupportsAsyncDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SupportsAsyncDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SupportsAsyncDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SupportsAsyncDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PreferredDXGIAdapter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PreferredDXGIAdapter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PreferredDXGIAdapter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PreferredDXGIAdapter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RequestFxrOutput(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestFxrOutput__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PWebGLConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PWebGLConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PWebGLConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PWebGLConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SharedCompositorFrameMetrics(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SharedCompositorFrameMetrics__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReleaseSharedCompositorFrameMetrics(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReleaseSharedCompositorFrameMetrics__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PCompositorBridge
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FrameStats|
//
namespace mozilla {
namespace layers {
auto FrameStats::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(FrameStats, gpuCacheUploadTime_) - offsetof(FrameStats, resourceUploadTime_)) == 8,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(FrameStats, skippedComposites_) - offsetof(FrameStats, contentFrameTime_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::FrameStats>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).compositeStart());
    // Sentinel = 'compositeStart'
    (aMsg)->WriteSentinel(740558306);
    WriteIPDLParam(aMsg, aActor, (aVar).renderStart());
    // Sentinel = 'renderStart'
    (aMsg)->WriteSentinel(456787087);
    WriteIPDLParam(aMsg, aActor, (aVar).compositeEnd());
    // Sentinel = 'compositeEnd'
    (aMsg)->WriteSentinel(547423467);
    WriteIPDLParam(aMsg, aActor, (aVar).transactionStart());
    // Sentinel = 'transactionStart'
    (aMsg)->WriteSentinel(959579829);
    WriteIPDLParam(aMsg, aActor, (aVar).refreshStart());
    // Sentinel = 'refreshStart'
    (aMsg)->WriteSentinel(543163646);
    WriteIPDLParam(aMsg, aActor, (aVar).fwdTime());
    // Sentinel = 'fwdTime'
    (aMsg)->WriteSentinel(190382801);
    WriteIPDLParam(aMsg, aActor, (aVar).sceneBuiltTime());
    // Sentinel = 'sceneBuiltTime'
    (aMsg)->WriteSentinel(708183454);
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    (aMsg)->WriteBytes((&((aVar).resourceUploadTime())), 16);
    // Sentinel = 'resourceUploadTime | gpuCacheUploadTime'
    (aMsg)->WriteSentinel(870059821);
    (aMsg)->WriteBytes((&((aVar).contentFrameTime())), 8);
    // Sentinel = 'contentFrameTime | skippedComposites'
    (aMsg)->WriteSentinel(105188936);
}

auto IPDLParamTraits<mozilla::layers::FrameStats>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (TransactionId) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (TransactionId) member of 'FrameStats'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->compositeStart())))))) {
        aActor->FatalError("Error deserializing 'compositeStart' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'compositeStart'
    if ((!((aMsg)->ReadSentinel(aIter, 740558306)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'compositeStart' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->renderStart())))))) {
        aActor->FatalError("Error deserializing 'renderStart' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'renderStart'
    if ((!((aMsg)->ReadSentinel(aIter, 456787087)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'renderStart' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->compositeEnd())))))) {
        aActor->FatalError("Error deserializing 'compositeEnd' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'compositeEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 547423467)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'compositeEnd' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->transactionStart())))))) {
        aActor->FatalError("Error deserializing 'transactionStart' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'transactionStart'
    if ((!((aMsg)->ReadSentinel(aIter, 959579829)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'transactionStart' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->refreshStart())))))) {
        aActor->FatalError("Error deserializing 'refreshStart' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'refreshStart'
    if ((!((aMsg)->ReadSentinel(aIter, 543163646)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'refreshStart' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fwdTime())))))) {
        aActor->FatalError("Error deserializing 'fwdTime' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'fwdTime'
    if ((!((aMsg)->ReadSentinel(aIter, 190382801)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fwdTime' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sceneBuiltTime())))))) {
        aActor->FatalError("Error deserializing 'sceneBuiltTime' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'sceneBuiltTime'
    if ((!((aMsg)->ReadSentinel(aIter, 708183454)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sceneBuiltTime' (TimeStamp) member of 'FrameStats'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'FrameStats'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'FrameStats'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->resourceUploadTime())), 16)))) {
        aActor->FatalError("Error bulk reading fields from double");
        return false;
    }
    // Sentinel = 'resourceUploadTime | gpuCacheUploadTime'
    if ((!((aMsg)->ReadSentinel(aIter, 870059821)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from double");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->contentFrameTime())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'contentFrameTime | skippedComposites'
    if ((!((aMsg)->ReadSentinel(aIter, 105188936)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
