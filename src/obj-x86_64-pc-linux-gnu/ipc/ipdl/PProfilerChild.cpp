//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PProfilerChild.h"
#include "mozilla/ProfilerLabels.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PProfilerChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PProfilerChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PProfilerChild::EnteredCxxStack() -> void
{
}

auto PProfilerChild::ExitedCxxStack() -> void
{
}

auto PProfilerChild::EnteredCall() -> void
{
}

auto PProfilerChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PProfilerChild::PProfilerChild() :
    mozilla::ipc::IToplevelProtocol("PProfilerChild", PProfilerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PProfilerChild);
}

PProfilerChild::~PProfilerChild()
{
    MOZ_COUNT_DTOR(PProfilerChild);
}

auto PProfilerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PProfilerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PProfilerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PProfilerChild::OnMessageReceived(const Message& msg__) -> PProfilerChild::Result
{
    switch (msg__.type()) {
    case PProfiler::Msg_Start__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_Start", OTHER);

            PickleIterator iter__{msg__};
            ProfilerInitParams params{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(params)))))) {
                FatalError("Error deserializing 'ProfilerInitParams'");
                return MsgValueError;
            }
            // Sentinel = 'params'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146997893)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ProfilerInitParams'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvStart(std::move(params))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_EnsureStarted__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_EnsureStarted", OTHER);

            PickleIterator iter__{msg__};
            ProfilerInitParams params{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(params)))))) {
                FatalError("Error deserializing 'ProfilerInitParams'");
                return MsgValueError;
            }
            // Sentinel = 'params'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146997893)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ProfilerInitParams'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvEnsureStarted(std::move(params))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_Stop__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_Stop", OTHER);

            if ((!((this)->RecvStop()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_Pause__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_Pause", OTHER);

            if ((!((this)->RecvPause()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_Resume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_Resume", OTHER);

            if ((!((this)->RecvResume()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_PauseSampling__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_PauseSampling", OTHER);

            if ((!((this)->RecvPauseSampling()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_ResumeSampling__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_ResumeSampling", OTHER);

            if ((!((this)->RecvResumeSampling()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_AwaitNextChunkManagerUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_AwaitNextChunkManagerUpdate", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            AwaitNextChunkManagerUpdateResolver resolver = [proxy__, seqno__, id__](const ProfileBufferChunkManagerUpdate& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PProfilerChild* self__ = static_cast<PProfilerChild*>(proxy__->Get());

                IPC::Message* reply__ = PProfiler::Reply_AwaitNextChunkManagerUpdate(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'update'
                (reply__)->WriteSentinel(150209156);

                if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PProfilerChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvAwaitNextChunkManagerUpdate(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_DestroyReleasedChunksAtOrBefore__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_DestroyReleasedChunksAtOrBefore", OTHER);

            PickleIterator iter__{msg__};
            TimeStamp timeStamp{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(timeStamp)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'timeStamp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 312083381)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvDestroyReleasedChunksAtOrBefore(std::move(timeStamp))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_GatherProfile__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_GatherProfile", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GatherProfileResolver resolver = [proxy__, seqno__, id__](Shmem&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PProfilerChild* self__ = static_cast<PProfilerChild*>(proxy__->Get());

                IPC::Message* reply__ = PProfiler::Reply_GatherProfile(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, std::move(aParam));
                // Sentinel = 'profile'
                (reply__)->WriteSentinel(201196274);

                if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PProfilerChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvGatherProfile(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProfiler::Msg_ClearAllPages__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProfilerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProfilerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProfiler::Msg_ClearAllPages", OTHER);

            if ((!((this)->RecvClearAllPages()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PProfilerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PProfilerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PProfilerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PProfilerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PProfilerChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PProfilerChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PProfilerChild::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PProfilerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PProfilerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PProfiler", PProfilerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PProfilerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
