//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/SerializationHelpers.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBTransactionParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBTransactionChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBVersionChangeTransactionParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBVersionChangeTransactionChild.h"
#include "mozilla/dom/PBackgroundMutableFileParent.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBRequest.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBRequestParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBRequestChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_Continue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Continue__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Preprocess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Preprocess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PBackgroundIDBRequest
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreAddResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreAddResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreAddResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (Key) member of 'ObjectStoreAddResponse'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (Key) member of 'ObjectStoreAddResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStorePutResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStorePutResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStorePutResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (Key) member of 'ObjectStorePutResponse'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (Key) member of 'ObjectStorePutResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).cloneInfo());
    // Sentinel = 'cloneInfo'
    (aMsg)->WriteSentinel(304284574);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cloneInfo())))))) {
        aActor->FatalError("Error deserializing 'cloneInfo' (SerializedStructuredCloneReadInfo) member of 'ObjectStoreGetResponse'");
        return false;
    }
    // Sentinel = 'cloneInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 304284574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cloneInfo' (SerializedStructuredCloneReadInfo) member of 'ObjectStoreGetResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetKeyResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetKeyResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetKeyResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (Key) member of 'ObjectStoreGetKeyResponse'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (Key) member of 'ObjectStoreGetKeyResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetAllResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).cloneInfos());
    // Sentinel = 'cloneInfos'
    (aMsg)->WriteSentinel(372507665);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cloneInfos())))))) {
        aActor->FatalError("Error deserializing 'cloneInfos' (SerializedStructuredCloneReadInfo[]) member of 'ObjectStoreGetAllResponse'");
        return false;
    }
    // Sentinel = 'cloneInfos'
    if ((!((aMsg)->ReadSentinel(aIter, 372507665)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cloneInfos' (SerializedStructuredCloneReadInfo[]) member of 'ObjectStoreGetAllResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetAllKeysResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllKeysResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).keys());
    // Sentinel = 'keys'
    (aMsg)->WriteSentinel(71565757);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllKeysResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keys())))))) {
        aActor->FatalError("Error deserializing 'keys' (Key[]) member of 'ObjectStoreGetAllKeysResponse'");
        return false;
    }
    // Sentinel = 'keys'
    if ((!((aMsg)->ReadSentinel(aIter, 71565757)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keys' (Key[]) member of 'ObjectStoreGetAllKeysResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreDeleteResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreDeleteResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreDeleteResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreClearResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreClearResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreClearResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreCountResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreCountResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).count())), 8);
    // Sentinel = 'count'
    (aMsg)->WriteSentinel(106889770);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreCountResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->count())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'count'
    if ((!((aMsg)->ReadSentinel(aIter, 106889770)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexGetResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).cloneInfo());
    // Sentinel = 'cloneInfo'
    (aMsg)->WriteSentinel(304284574);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cloneInfo())))))) {
        aActor->FatalError("Error deserializing 'cloneInfo' (SerializedStructuredCloneReadInfo) member of 'IndexGetResponse'");
        return false;
    }
    // Sentinel = 'cloneInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 304284574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cloneInfo' (SerializedStructuredCloneReadInfo) member of 'IndexGetResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexGetKeyResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetKeyResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetKeyResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (Key) member of 'IndexGetKeyResponse'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (Key) member of 'IndexGetKeyResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexGetAllResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetAllResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).cloneInfos());
    // Sentinel = 'cloneInfos'
    (aMsg)->WriteSentinel(372507665);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetAllResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cloneInfos())))))) {
        aActor->FatalError("Error deserializing 'cloneInfos' (SerializedStructuredCloneReadInfo[]) member of 'IndexGetAllResponse'");
        return false;
    }
    // Sentinel = 'cloneInfos'
    if ((!((aMsg)->ReadSentinel(aIter, 372507665)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cloneInfos' (SerializedStructuredCloneReadInfo[]) member of 'IndexGetAllResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexGetAllKeysResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetAllKeysResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).keys());
    // Sentinel = 'keys'
    (aMsg)->WriteSentinel(71565757);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetAllKeysResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keys())))))) {
        aActor->FatalError("Error deserializing 'keys' (Key[]) member of 'IndexGetAllKeysResponse'");
        return false;
    }
    // Sentinel = 'keys'
    if ((!((aMsg)->ReadSentinel(aIter, 71565757)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keys' (Key[]) member of 'IndexGetAllKeysResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexCountResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexCountResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).count())), 8);
    // Sentinel = 'count'
    (aMsg)->WriteSentinel(106889770);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexCountResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->count())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'count'
    if ((!((aMsg)->ReadSentinel(aIter, 106889770)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union RequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto RequestResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TObjectStoreGetResponse:
        {
            (ptr_ObjectStoreGetResponse())->~ObjectStoreGetResponse__tdef();
            break;
        }
    case TObjectStoreGetKeyResponse:
        {
            (ptr_ObjectStoreGetKeyResponse())->~ObjectStoreGetKeyResponse__tdef();
            break;
        }
    case TObjectStoreAddResponse:
        {
            (ptr_ObjectStoreAddResponse())->~ObjectStoreAddResponse__tdef();
            break;
        }
    case TObjectStorePutResponse:
        {
            (ptr_ObjectStorePutResponse())->~ObjectStorePutResponse__tdef();
            break;
        }
    case TObjectStoreDeleteResponse:
        {
            (ptr_ObjectStoreDeleteResponse())->~ObjectStoreDeleteResponse__tdef();
            break;
        }
    case TObjectStoreClearResponse:
        {
            (ptr_ObjectStoreClearResponse())->~ObjectStoreClearResponse__tdef();
            break;
        }
    case TObjectStoreCountResponse:
        {
            (ptr_ObjectStoreCountResponse())->~ObjectStoreCountResponse__tdef();
            break;
        }
    case TObjectStoreGetAllResponse:
        {
            (ptr_ObjectStoreGetAllResponse())->~ObjectStoreGetAllResponse__tdef();
            break;
        }
    case TObjectStoreGetAllKeysResponse:
        {
            (ptr_ObjectStoreGetAllKeysResponse())->~ObjectStoreGetAllKeysResponse__tdef();
            break;
        }
    case TIndexGetResponse:
        {
            (ptr_IndexGetResponse())->~IndexGetResponse__tdef();
            break;
        }
    case TIndexGetKeyResponse:
        {
            (ptr_IndexGetKeyResponse())->~IndexGetKeyResponse__tdef();
            break;
        }
    case TIndexGetAllResponse:
        {
            (ptr_IndexGetAllResponse())->~IndexGetAllResponse__tdef();
            break;
        }
    case TIndexGetAllKeysResponse:
        {
            (ptr_IndexGetAllKeysResponse())->~IndexGetAllKeysResponse__tdef();
            break;
        }
    case TIndexCountResponse:
        {
            (ptr_IndexCountResponse())->~IndexCountResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStoreGetResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetResponse()) ObjectStoreGetResponse(std::move(aOther));
    mType = TObjectStoreGetResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ObjectStoreGetKeyResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyResponse()) ObjectStoreGetKeyResponse(aOther);
    mType = TObjectStoreGetKeyResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStoreGetKeyResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyResponse()) ObjectStoreGetKeyResponse(std::move(aOther));
    mType = TObjectStoreGetKeyResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ObjectStoreAddResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreAddResponse()) ObjectStoreAddResponse(aOther);
    mType = TObjectStoreAddResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStoreAddResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreAddResponse()) ObjectStoreAddResponse(std::move(aOther));
    mType = TObjectStoreAddResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ObjectStorePutResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStorePutResponse()) ObjectStorePutResponse(aOther);
    mType = TObjectStorePutResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStorePutResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStorePutResponse()) ObjectStorePutResponse(std::move(aOther));
    mType = TObjectStorePutResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ObjectStoreDeleteResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteResponse()) ObjectStoreDeleteResponse(aOther);
    mType = TObjectStoreDeleteResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStoreDeleteResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteResponse()) ObjectStoreDeleteResponse(std::move(aOther));
    mType = TObjectStoreDeleteResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ObjectStoreClearResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreClearResponse()) ObjectStoreClearResponse(aOther);
    mType = TObjectStoreClearResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStoreClearResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreClearResponse()) ObjectStoreClearResponse(std::move(aOther));
    mType = TObjectStoreClearResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ObjectStoreCountResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreCountResponse()) ObjectStoreCountResponse(aOther);
    mType = TObjectStoreCountResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStoreCountResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreCountResponse()) ObjectStoreCountResponse(std::move(aOther));
    mType = TObjectStoreCountResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStoreGetAllResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllResponse()) ObjectStoreGetAllResponse(std::move(aOther));
    mType = TObjectStoreGetAllResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ObjectStoreGetAllKeysResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysResponse()) ObjectStoreGetAllKeysResponse(aOther);
    mType = TObjectStoreGetAllKeysResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ObjectStoreGetAllKeysResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysResponse()) ObjectStoreGetAllKeysResponse(std::move(aOther));
    mType = TObjectStoreGetAllKeysResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(IndexGetResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetResponse()) IndexGetResponse(std::move(aOther));
    mType = TIndexGetResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const IndexGetKeyResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetKeyResponse()) IndexGetKeyResponse(aOther);
    mType = TIndexGetKeyResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(IndexGetKeyResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetKeyResponse()) IndexGetKeyResponse(std::move(aOther));
    mType = TIndexGetKeyResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(IndexGetAllResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetAllResponse()) IndexGetAllResponse(std::move(aOther));
    mType = TIndexGetAllResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const IndexGetAllKeysResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetAllKeysResponse()) IndexGetAllKeysResponse(aOther);
    mType = TIndexGetAllKeysResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(IndexGetAllKeysResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetAllKeysResponse()) IndexGetAllKeysResponse(std::move(aOther));
    mType = TIndexGetAllKeysResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const IndexCountResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexCountResponse()) IndexCountResponse(aOther);
    mType = TIndexCountResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(IndexCountResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexCountResponse()) IndexCountResponse(std::move(aOther));
    mType = TIndexCountResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(RequestResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetResponse()) ObjectStoreGetResponse(std::move((aOther).get_ObjectStoreGetResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetKeyResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyResponse()) ObjectStoreGetKeyResponse(std::move((aOther).get_ObjectStoreGetKeyResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreAddResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreAddResponse()) ObjectStoreAddResponse(std::move((aOther).get_ObjectStoreAddResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStorePutResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStorePutResponse()) ObjectStorePutResponse(std::move((aOther).get_ObjectStorePutResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreDeleteResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteResponse()) ObjectStoreDeleteResponse(std::move((aOther).get_ObjectStoreDeleteResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreClearResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreClearResponse()) ObjectStoreClearResponse(std::move((aOther).get_ObjectStoreClearResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreCountResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreCountResponse()) ObjectStoreCountResponse(std::move((aOther).get_ObjectStoreCountResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllResponse()) ObjectStoreGetAllResponse(std::move((aOther).get_ObjectStoreGetAllResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllKeysResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysResponse()) ObjectStoreGetAllKeysResponse(std::move((aOther).get_ObjectStoreGetAllKeysResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetResponse:
        {
            new (mozilla::KnownNotNull, ptr_IndexGetResponse()) IndexGetResponse(std::move((aOther).get_IndexGetResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetKeyResponse:
        {
            new (mozilla::KnownNotNull, ptr_IndexGetKeyResponse()) IndexGetKeyResponse(std::move((aOther).get_IndexGetKeyResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetAllResponse:
        {
            new (mozilla::KnownNotNull, ptr_IndexGetAllResponse()) IndexGetAllResponse(std::move((aOther).get_IndexGetAllResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetAllKeysResponse:
        {
            new (mozilla::KnownNotNull, ptr_IndexGetAllKeysResponse()) IndexGetAllKeysResponse(std::move((aOther).get_IndexGetAllKeysResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexCountResponse:
        {
            new (mozilla::KnownNotNull, ptr_IndexCountResponse()) IndexCountResponse(std::move((aOther).get_IndexCountResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

RequestResponse::~RequestResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto RequestResponse::operator=(const nsresult& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto RequestResponse::operator=(nsresult&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStoreGetResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreGetResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetResponse()) ObjectStoreGetResponse;
    }
    (*(ptr_ObjectStoreGetResponse())) = std::move(aRhs);
    mType = TObjectStoreGetResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ObjectStoreGetKeyResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreGetKeyResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyResponse()) ObjectStoreGetKeyResponse;
    }
    (*(ptr_ObjectStoreGetKeyResponse())) = aRhs;
    mType = TObjectStoreGetKeyResponse;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStoreGetKeyResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreGetKeyResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyResponse()) ObjectStoreGetKeyResponse;
    }
    (*(ptr_ObjectStoreGetKeyResponse())) = std::move(aRhs);
    mType = TObjectStoreGetKeyResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ObjectStoreAddResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreAddResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreAddResponse()) ObjectStoreAddResponse;
    }
    (*(ptr_ObjectStoreAddResponse())) = aRhs;
    mType = TObjectStoreAddResponse;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStoreAddResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreAddResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreAddResponse()) ObjectStoreAddResponse;
    }
    (*(ptr_ObjectStoreAddResponse())) = std::move(aRhs);
    mType = TObjectStoreAddResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ObjectStorePutResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStorePutResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStorePutResponse()) ObjectStorePutResponse;
    }
    (*(ptr_ObjectStorePutResponse())) = aRhs;
    mType = TObjectStorePutResponse;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStorePutResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStorePutResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStorePutResponse()) ObjectStorePutResponse;
    }
    (*(ptr_ObjectStorePutResponse())) = std::move(aRhs);
    mType = TObjectStorePutResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ObjectStoreDeleteResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreDeleteResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteResponse()) ObjectStoreDeleteResponse;
    }
    (*(ptr_ObjectStoreDeleteResponse())) = aRhs;
    mType = TObjectStoreDeleteResponse;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStoreDeleteResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreDeleteResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteResponse()) ObjectStoreDeleteResponse;
    }
    (*(ptr_ObjectStoreDeleteResponse())) = std::move(aRhs);
    mType = TObjectStoreDeleteResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ObjectStoreClearResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreClearResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreClearResponse()) ObjectStoreClearResponse;
    }
    (*(ptr_ObjectStoreClearResponse())) = aRhs;
    mType = TObjectStoreClearResponse;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStoreClearResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreClearResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreClearResponse()) ObjectStoreClearResponse;
    }
    (*(ptr_ObjectStoreClearResponse())) = std::move(aRhs);
    mType = TObjectStoreClearResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ObjectStoreCountResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreCountResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreCountResponse()) ObjectStoreCountResponse;
    }
    (*(ptr_ObjectStoreCountResponse())) = aRhs;
    mType = TObjectStoreCountResponse;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStoreCountResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreCountResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreCountResponse()) ObjectStoreCountResponse;
    }
    (*(ptr_ObjectStoreCountResponse())) = std::move(aRhs);
    mType = TObjectStoreCountResponse;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStoreGetAllResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreGetAllResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllResponse()) ObjectStoreGetAllResponse;
    }
    (*(ptr_ObjectStoreGetAllResponse())) = std::move(aRhs);
    mType = TObjectStoreGetAllResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ObjectStoreGetAllKeysResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreGetAllKeysResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysResponse()) ObjectStoreGetAllKeysResponse;
    }
    (*(ptr_ObjectStoreGetAllKeysResponse())) = aRhs;
    mType = TObjectStoreGetAllKeysResponse;
    return (*(this));
}

auto RequestResponse::operator=(ObjectStoreGetAllKeysResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TObjectStoreGetAllKeysResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysResponse()) ObjectStoreGetAllKeysResponse;
    }
    (*(ptr_ObjectStoreGetAllKeysResponse())) = std::move(aRhs);
    mType = TObjectStoreGetAllKeysResponse;
    return (*(this));
}

auto RequestResponse::operator=(IndexGetResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TIndexGetResponse)) {
        new (mozilla::KnownNotNull, ptr_IndexGetResponse()) IndexGetResponse;
    }
    (*(ptr_IndexGetResponse())) = std::move(aRhs);
    mType = TIndexGetResponse;
    return (*(this));
}

auto RequestResponse::operator=(const IndexGetKeyResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TIndexGetKeyResponse)) {
        new (mozilla::KnownNotNull, ptr_IndexGetKeyResponse()) IndexGetKeyResponse;
    }
    (*(ptr_IndexGetKeyResponse())) = aRhs;
    mType = TIndexGetKeyResponse;
    return (*(this));
}

auto RequestResponse::operator=(IndexGetKeyResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TIndexGetKeyResponse)) {
        new (mozilla::KnownNotNull, ptr_IndexGetKeyResponse()) IndexGetKeyResponse;
    }
    (*(ptr_IndexGetKeyResponse())) = std::move(aRhs);
    mType = TIndexGetKeyResponse;
    return (*(this));
}

auto RequestResponse::operator=(IndexGetAllResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TIndexGetAllResponse)) {
        new (mozilla::KnownNotNull, ptr_IndexGetAllResponse()) IndexGetAllResponse;
    }
    (*(ptr_IndexGetAllResponse())) = std::move(aRhs);
    mType = TIndexGetAllResponse;
    return (*(this));
}

auto RequestResponse::operator=(const IndexGetAllKeysResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TIndexGetAllKeysResponse)) {
        new (mozilla::KnownNotNull, ptr_IndexGetAllKeysResponse()) IndexGetAllKeysResponse;
    }
    (*(ptr_IndexGetAllKeysResponse())) = aRhs;
    mType = TIndexGetAllKeysResponse;
    return (*(this));
}

auto RequestResponse::operator=(IndexGetAllKeysResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TIndexGetAllKeysResponse)) {
        new (mozilla::KnownNotNull, ptr_IndexGetAllKeysResponse()) IndexGetAllKeysResponse;
    }
    (*(ptr_IndexGetAllKeysResponse())) = std::move(aRhs);
    mType = TIndexGetAllKeysResponse;
    return (*(this));
}

auto RequestResponse::operator=(const IndexCountResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TIndexCountResponse)) {
        new (mozilla::KnownNotNull, ptr_IndexCountResponse()) IndexCountResponse;
    }
    (*(ptr_IndexCountResponse())) = aRhs;
    mType = TIndexCountResponse;
    return (*(this));
}

auto RequestResponse::operator=(IndexCountResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TIndexCountResponse)) {
        new (mozilla::KnownNotNull, ptr_IndexCountResponse()) IndexCountResponse;
    }
    (*(ptr_IndexCountResponse())) = std::move(aRhs);
    mType = TIndexCountResponse;
    return (*(this));
}

auto RequestResponse::operator=(RequestResponse&& aRhs) -> RequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetResponse()) ObjectStoreGetResponse;
            }
            (*(ptr_ObjectStoreGetResponse())) = std::move((aRhs).get_ObjectStoreGetResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetKeyResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyResponse()) ObjectStoreGetKeyResponse;
            }
            (*(ptr_ObjectStoreGetKeyResponse())) = std::move((aRhs).get_ObjectStoreGetKeyResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreAddResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreAddResponse()) ObjectStoreAddResponse;
            }
            (*(ptr_ObjectStoreAddResponse())) = std::move((aRhs).get_ObjectStoreAddResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStorePutResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStorePutResponse()) ObjectStorePutResponse;
            }
            (*(ptr_ObjectStorePutResponse())) = std::move((aRhs).get_ObjectStorePutResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreDeleteResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteResponse()) ObjectStoreDeleteResponse;
            }
            (*(ptr_ObjectStoreDeleteResponse())) = std::move((aRhs).get_ObjectStoreDeleteResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreClearResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreClearResponse()) ObjectStoreClearResponse;
            }
            (*(ptr_ObjectStoreClearResponse())) = std::move((aRhs).get_ObjectStoreClearResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreCountResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreCountResponse()) ObjectStoreCountResponse;
            }
            (*(ptr_ObjectStoreCountResponse())) = std::move((aRhs).get_ObjectStoreCountResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllResponse()) ObjectStoreGetAllResponse;
            }
            (*(ptr_ObjectStoreGetAllResponse())) = std::move((aRhs).get_ObjectStoreGetAllResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllKeysResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysResponse()) ObjectStoreGetAllKeysResponse;
            }
            (*(ptr_ObjectStoreGetAllKeysResponse())) = std::move((aRhs).get_ObjectStoreGetAllKeysResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexGetResponse()) IndexGetResponse;
            }
            (*(ptr_IndexGetResponse())) = std::move((aRhs).get_IndexGetResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetKeyResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexGetKeyResponse()) IndexGetKeyResponse;
            }
            (*(ptr_IndexGetKeyResponse())) = std::move((aRhs).get_IndexGetKeyResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetAllResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexGetAllResponse()) IndexGetAllResponse;
            }
            (*(ptr_IndexGetAllResponse())) = std::move((aRhs).get_IndexGetAllResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetAllKeysResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexGetAllKeysResponse()) IndexGetAllKeysResponse;
            }
            (*(ptr_IndexGetAllKeysResponse())) = std::move((aRhs).get_IndexGetAllKeysResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexCountResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexCountResponse()) IndexCountResponse;
            }
            (*(ptr_IndexCountResponse())) = std::move((aRhs).get_IndexCountResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::RequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::RequestResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'RequestResponse'
    (aMsg)->WriteSentinel(822806073);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TObjectStoreGetResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetResponse());
            // Sentinel = 'TObjectStoreGetResponse'
            (aMsg)->WriteSentinel(1796540712);
            return;
        }
    case union__::TObjectStoreGetKeyResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetKeyResponse());
            // Sentinel = 'TObjectStoreGetKeyResponse'
            (aMsg)->WriteSentinel(2282490449);
            return;
        }
    case union__::TObjectStoreAddResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreAddResponse());
            // Sentinel = 'TObjectStoreAddResponse'
            (aMsg)->WriteSentinel(1782122769);
            return;
        }
    case union__::TObjectStorePutResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStorePutResponse());
            // Sentinel = 'TObjectStorePutResponse'
            (aMsg)->WriteSentinel(1813514561);
            return;
        }
    case union__::TObjectStoreDeleteResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreDeleteResponse());
            // Sentinel = 'TObjectStoreDeleteResponse'
            (aMsg)->WriteSentinel(2290223707);
            return;
        }
    case union__::TObjectStoreClearResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreClearResponse());
            // Sentinel = 'TObjectStoreClearResponse'
            (aMsg)->WriteSentinel(2114849263);
            return;
        }
    case union__::TObjectStoreCountResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreCountResponse());
            // Sentinel = 'TObjectStoreCountResponse'
            (aMsg)->WriteSentinel(2138442257);
            return;
        }
    case union__::TObjectStoreGetAllResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetAllResponse());
            // Sentinel = 'TObjectStoreGetAllResponse'
            (aMsg)->WriteSentinel(2272201281);
            return;
        }
    case union__::TObjectStoreGetAllKeysResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetAllKeysResponse());
            // Sentinel = 'TObjectStoreGetAllKeysResponse'
            (aMsg)->WriteSentinel(3017214941);
            return;
        }
    case union__::TIndexGetResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexGetResponse());
            // Sentinel = 'TIndexGetResponse'
            (aMsg)->WriteSentinel(981010108);
            return;
        }
    case union__::TIndexGetKeyResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexGetKeyResponse());
            // Sentinel = 'TIndexGetKeyResponse'
            (aMsg)->WriteSentinel(1345062885);
            return;
        }
    case union__::TIndexGetAllResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexGetAllResponse());
            // Sentinel = 'TIndexGetAllResponse'
            (aMsg)->WriteSentinel(1334773717);
            return;
        }
    case union__::TIndexGetAllKeysResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexGetAllKeysResponse());
            // Sentinel = 'TIndexGetAllKeysResponse'
            (aMsg)->WriteSentinel(1917258097);
            return;
        }
    case union__::TIndexCountResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexCountResponse());
            // Sentinel = 'TIndexCountResponse'
            (aMsg)->WriteSentinel(1241647013);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::RequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::RequestResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union RequestResponse");
        return false;
    }
    // Sentinel = 'RequestResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 822806073)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union RequestResponse");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union RequestResponse");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreGetResponse tmp = mozilla::dom::indexedDB::ObjectStoreGetResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreGetResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1796540712)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetKeyResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreGetKeyResponse tmp = mozilla::dom::indexedDB::ObjectStoreGetKeyResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetKeyResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetKeyResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreGetKeyResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2282490449)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetKeyResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreAddResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreAddResponse tmp = mozilla::dom::indexedDB::ObjectStoreAddResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreAddResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreAddResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreAddResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1782122769)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreAddResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStorePutResponse:
        {
            mozilla::dom::indexedDB::ObjectStorePutResponse tmp = mozilla::dom::indexedDB::ObjectStorePutResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStorePutResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStorePutResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStorePutResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1813514561)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStorePutResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreDeleteResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreDeleteResponse tmp = mozilla::dom::indexedDB::ObjectStoreDeleteResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreDeleteResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreDeleteResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreDeleteResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2290223707)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreDeleteResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreClearResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreClearResponse tmp = mozilla::dom::indexedDB::ObjectStoreClearResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreClearResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreClearResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreClearResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2114849263)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreClearResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreCountResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreCountResponse tmp = mozilla::dom::indexedDB::ObjectStoreCountResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreCountResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreCountResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreCountResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2138442257)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreCountResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetAllResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreGetAllResponse tmp = mozilla::dom::indexedDB::ObjectStoreGetAllResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetAllResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetAllResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreGetAllResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2272201281)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetAllResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetAllKeysResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreGetAllKeysResponse tmp = mozilla::dom::indexedDB::ObjectStoreGetAllKeysResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetAllKeysResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetAllKeysResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreGetAllKeysResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 3017214941)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetAllKeysResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TIndexGetResponse:
        {
            mozilla::dom::indexedDB::IndexGetResponse tmp = mozilla::dom::indexedDB::IndexGetResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexGetResponse())))))) {
                aActor->FatalError("Error deserializing variant TIndexGetResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TIndexGetResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 981010108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexGetResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TIndexGetKeyResponse:
        {
            mozilla::dom::indexedDB::IndexGetKeyResponse tmp = mozilla::dom::indexedDB::IndexGetKeyResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexGetKeyResponse())))))) {
                aActor->FatalError("Error deserializing variant TIndexGetKeyResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TIndexGetKeyResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1345062885)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexGetKeyResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TIndexGetAllResponse:
        {
            mozilla::dom::indexedDB::IndexGetAllResponse tmp = mozilla::dom::indexedDB::IndexGetAllResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexGetAllResponse())))))) {
                aActor->FatalError("Error deserializing variant TIndexGetAllResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TIndexGetAllResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1334773717)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexGetAllResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TIndexGetAllKeysResponse:
        {
            mozilla::dom::indexedDB::IndexGetAllKeysResponse tmp = mozilla::dom::indexedDB::IndexGetAllKeysResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexGetAllKeysResponse())))))) {
                aActor->FatalError("Error deserializing variant TIndexGetAllKeysResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TIndexGetAllKeysResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1917258097)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexGetAllKeysResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TIndexCountResponse:
        {
            mozilla::dom::indexedDB::IndexCountResponse tmp = mozilla::dom::indexedDB::IndexCountResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexCountResponse())))))) {
                aActor->FatalError("Error deserializing variant TIndexCountResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TIndexCountResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1241647013)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexCountResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PreprocessInfo|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::PreprocessInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).files());
    // Sentinel = 'files'
    (aMsg)->WriteSentinel(103285268);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::PreprocessInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->files())))))) {
        aActor->FatalError("Error deserializing 'files' (SerializedStructuredCloneFile[]) member of 'PreprocessInfo'");
        return false;
    }
    // Sentinel = 'files'
    if ((!((aMsg)->ReadSentinel(aIter, 103285268)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'files' (SerializedStructuredCloneFile[]) member of 'PreprocessInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetPreprocessParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetPreprocessParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).preprocessInfo());
    // Sentinel = 'preprocessInfo'
    (aMsg)->WriteSentinel(743704019);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetPreprocessParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preprocessInfo())))))) {
        aActor->FatalError("Error deserializing 'preprocessInfo' (PreprocessInfo) member of 'ObjectStoreGetPreprocessParams'");
        return false;
    }
    // Sentinel = 'preprocessInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 743704019)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preprocessInfo' (PreprocessInfo) member of 'ObjectStoreGetPreprocessParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetAllPreprocessParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).preprocessInfos());
    // Sentinel = 'preprocessInfos'
    (aMsg)->WriteSentinel(848954950);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preprocessInfos())))))) {
        aActor->FatalError("Error deserializing 'preprocessInfos' (PreprocessInfo[]) member of 'ObjectStoreGetAllPreprocessParams'");
        return false;
    }
    // Sentinel = 'preprocessInfos'
    if ((!((aMsg)->ReadSentinel(aIter, 848954950)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preprocessInfos' (PreprocessInfo[]) member of 'ObjectStoreGetAllPreprocessParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union PreprocessParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto PreprocessParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TObjectStoreGetPreprocessParams:
        {
            (ptr_ObjectStoreGetPreprocessParams())->~ObjectStoreGetPreprocessParams__tdef();
            break;
        }
    case TObjectStoreGetAllPreprocessParams:
        {
            (ptr_ObjectStoreGetAllPreprocessParams())->~ObjectStoreGetAllPreprocessParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT PreprocessParams::PreprocessParams(const ObjectStoreGetPreprocessParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessParams()) ObjectStoreGetPreprocessParams(aOther);
    mType = TObjectStoreGetPreprocessParams;
}

MOZ_IMPLICIT PreprocessParams::PreprocessParams(ObjectStoreGetPreprocessParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessParams()) ObjectStoreGetPreprocessParams(std::move(aOther));
    mType = TObjectStoreGetPreprocessParams;
}

MOZ_IMPLICIT PreprocessParams::PreprocessParams(const ObjectStoreGetAllPreprocessParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessParams()) ObjectStoreGetAllPreprocessParams(aOther);
    mType = TObjectStoreGetAllPreprocessParams;
}

MOZ_IMPLICIT PreprocessParams::PreprocessParams(ObjectStoreGetAllPreprocessParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessParams()) ObjectStoreGetAllPreprocessParams(std::move(aOther));
    mType = TObjectStoreGetAllPreprocessParams;
}

MOZ_IMPLICIT PreprocessParams::PreprocessParams(const PreprocessParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TObjectStoreGetPreprocessParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessParams()) ObjectStoreGetPreprocessParams((aOther).get_ObjectStoreGetPreprocessParams());
            break;
        }
    case TObjectStoreGetAllPreprocessParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessParams()) ObjectStoreGetAllPreprocessParams((aOther).get_ObjectStoreGetAllPreprocessParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT PreprocessParams::PreprocessParams(PreprocessParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TObjectStoreGetPreprocessParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessParams()) ObjectStoreGetPreprocessParams(std::move((aOther).get_ObjectStoreGetPreprocessParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllPreprocessParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessParams()) ObjectStoreGetAllPreprocessParams(std::move((aOther).get_ObjectStoreGetAllPreprocessParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

PreprocessParams::~PreprocessParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto PreprocessParams::operator=(const ObjectStoreGetPreprocessParams& aRhs) -> PreprocessParams&
{
    if (MaybeDestroy(TObjectStoreGetPreprocessParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessParams()) ObjectStoreGetPreprocessParams;
    }
    (*(ptr_ObjectStoreGetPreprocessParams())) = aRhs;
    mType = TObjectStoreGetPreprocessParams;
    return (*(this));
}

auto PreprocessParams::operator=(ObjectStoreGetPreprocessParams&& aRhs) -> PreprocessParams&
{
    if (MaybeDestroy(TObjectStoreGetPreprocessParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessParams()) ObjectStoreGetPreprocessParams;
    }
    (*(ptr_ObjectStoreGetPreprocessParams())) = std::move(aRhs);
    mType = TObjectStoreGetPreprocessParams;
    return (*(this));
}

auto PreprocessParams::operator=(const ObjectStoreGetAllPreprocessParams& aRhs) -> PreprocessParams&
{
    if (MaybeDestroy(TObjectStoreGetAllPreprocessParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessParams()) ObjectStoreGetAllPreprocessParams;
    }
    (*(ptr_ObjectStoreGetAllPreprocessParams())) = aRhs;
    mType = TObjectStoreGetAllPreprocessParams;
    return (*(this));
}

auto PreprocessParams::operator=(ObjectStoreGetAllPreprocessParams&& aRhs) -> PreprocessParams&
{
    if (MaybeDestroy(TObjectStoreGetAllPreprocessParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessParams()) ObjectStoreGetAllPreprocessParams;
    }
    (*(ptr_ObjectStoreGetAllPreprocessParams())) = std::move(aRhs);
    mType = TObjectStoreGetAllPreprocessParams;
    return (*(this));
}

auto PreprocessParams::operator=(const PreprocessParams& aRhs) -> PreprocessParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TObjectStoreGetPreprocessParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessParams()) ObjectStoreGetPreprocessParams;
            }
            (*(ptr_ObjectStoreGetPreprocessParams())) = (aRhs).get_ObjectStoreGetPreprocessParams();
            break;
        }
    case TObjectStoreGetAllPreprocessParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessParams()) ObjectStoreGetAllPreprocessParams;
            }
            (*(ptr_ObjectStoreGetAllPreprocessParams())) = (aRhs).get_ObjectStoreGetAllPreprocessParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto PreprocessParams::operator=(PreprocessParams&& aRhs) -> PreprocessParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TObjectStoreGetPreprocessParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessParams()) ObjectStoreGetPreprocessParams;
            }
            (*(ptr_ObjectStoreGetPreprocessParams())) = std::move((aRhs).get_ObjectStoreGetPreprocessParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllPreprocessParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessParams()) ObjectStoreGetAllPreprocessParams;
            }
            (*(ptr_ObjectStoreGetAllPreprocessParams())) = std::move((aRhs).get_ObjectStoreGetAllPreprocessParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::PreprocessParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::PreprocessParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'PreprocessParams'
    (aMsg)->WriteSentinel(926287499);

    switch (type) {
    case union__::TObjectStoreGetPreprocessParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetPreprocessParams());
            // Sentinel = 'TObjectStoreGetPreprocessParams'
            (aMsg)->WriteSentinel(3262975075);
            return;
        }
    case union__::TObjectStoreGetAllPreprocessParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetAllPreprocessParams());
            // Sentinel = 'TObjectStoreGetAllPreprocessParams'
            (aMsg)->WriteSentinel(3885960572);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::PreprocessParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::PreprocessParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union PreprocessParams");
        return false;
    }
    // Sentinel = 'PreprocessParams'
    if ((!((aMsg)->ReadSentinel(aIter, 926287499)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union PreprocessParams");
        return false;
    }

    switch (type) {
    case union__::TObjectStoreGetPreprocessParams:
        {
            mozilla::dom::indexedDB::ObjectStoreGetPreprocessParams tmp = mozilla::dom::indexedDB::ObjectStoreGetPreprocessParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetPreprocessParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetPreprocessParams of union PreprocessParams");
                return false;
            }
            // Sentinel = 'TObjectStoreGetPreprocessParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3262975075)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetPreprocessParams of union PreprocessParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetAllPreprocessParams:
        {
            mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessParams tmp = mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetAllPreprocessParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetAllPreprocessParams of union PreprocessParams");
                return false;
            }
            // Sentinel = 'TObjectStoreGetAllPreprocessParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3885960572)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetAllPreprocessParams of union PreprocessParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetPreprocessResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetPreprocessResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetPreprocessResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetAllPreprocessResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union PreprocessResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto PreprocessResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TObjectStoreGetPreprocessResponse:
        {
            (ptr_ObjectStoreGetPreprocessResponse())->~ObjectStoreGetPreprocessResponse__tdef();
            break;
        }
    case TObjectStoreGetAllPreprocessResponse:
        {
            (ptr_ObjectStoreGetAllPreprocessResponse())->~ObjectStoreGetAllPreprocessResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT PreprocessResponse::PreprocessResponse(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT PreprocessResponse::PreprocessResponse(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT PreprocessResponse::PreprocessResponse(const ObjectStoreGetPreprocessResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessResponse()) ObjectStoreGetPreprocessResponse(aOther);
    mType = TObjectStoreGetPreprocessResponse;
}

MOZ_IMPLICIT PreprocessResponse::PreprocessResponse(ObjectStoreGetPreprocessResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessResponse()) ObjectStoreGetPreprocessResponse(std::move(aOther));
    mType = TObjectStoreGetPreprocessResponse;
}

MOZ_IMPLICIT PreprocessResponse::PreprocessResponse(const ObjectStoreGetAllPreprocessResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessResponse()) ObjectStoreGetAllPreprocessResponse(aOther);
    mType = TObjectStoreGetAllPreprocessResponse;
}

MOZ_IMPLICIT PreprocessResponse::PreprocessResponse(ObjectStoreGetAllPreprocessResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessResponse()) ObjectStoreGetAllPreprocessResponse(std::move(aOther));
    mType = TObjectStoreGetAllPreprocessResponse;
}

MOZ_IMPLICIT PreprocessResponse::PreprocessResponse(const PreprocessResponse& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TObjectStoreGetPreprocessResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessResponse()) ObjectStoreGetPreprocessResponse((aOther).get_ObjectStoreGetPreprocessResponse());
            break;
        }
    case TObjectStoreGetAllPreprocessResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessResponse()) ObjectStoreGetAllPreprocessResponse((aOther).get_ObjectStoreGetAllPreprocessResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT PreprocessResponse::PreprocessResponse(PreprocessResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetPreprocessResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessResponse()) ObjectStoreGetPreprocessResponse(std::move((aOther).get_ObjectStoreGetPreprocessResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllPreprocessResponse:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessResponse()) ObjectStoreGetAllPreprocessResponse(std::move((aOther).get_ObjectStoreGetAllPreprocessResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

PreprocessResponse::~PreprocessResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto PreprocessResponse::operator=(const nsresult& aRhs) -> PreprocessResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto PreprocessResponse::operator=(nsresult&& aRhs) -> PreprocessResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto PreprocessResponse::operator=(const ObjectStoreGetPreprocessResponse& aRhs) -> PreprocessResponse&
{
    if (MaybeDestroy(TObjectStoreGetPreprocessResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessResponse()) ObjectStoreGetPreprocessResponse;
    }
    (*(ptr_ObjectStoreGetPreprocessResponse())) = aRhs;
    mType = TObjectStoreGetPreprocessResponse;
    return (*(this));
}

auto PreprocessResponse::operator=(ObjectStoreGetPreprocessResponse&& aRhs) -> PreprocessResponse&
{
    if (MaybeDestroy(TObjectStoreGetPreprocessResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessResponse()) ObjectStoreGetPreprocessResponse;
    }
    (*(ptr_ObjectStoreGetPreprocessResponse())) = std::move(aRhs);
    mType = TObjectStoreGetPreprocessResponse;
    return (*(this));
}

auto PreprocessResponse::operator=(const ObjectStoreGetAllPreprocessResponse& aRhs) -> PreprocessResponse&
{
    if (MaybeDestroy(TObjectStoreGetAllPreprocessResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessResponse()) ObjectStoreGetAllPreprocessResponse;
    }
    (*(ptr_ObjectStoreGetAllPreprocessResponse())) = aRhs;
    mType = TObjectStoreGetAllPreprocessResponse;
    return (*(this));
}

auto PreprocessResponse::operator=(ObjectStoreGetAllPreprocessResponse&& aRhs) -> PreprocessResponse&
{
    if (MaybeDestroy(TObjectStoreGetAllPreprocessResponse)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessResponse()) ObjectStoreGetAllPreprocessResponse;
    }
    (*(ptr_ObjectStoreGetAllPreprocessResponse())) = std::move(aRhs);
    mType = TObjectStoreGetAllPreprocessResponse;
    return (*(this));
}

auto PreprocessResponse::operator=(const PreprocessResponse& aRhs) -> PreprocessResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TObjectStoreGetPreprocessResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessResponse()) ObjectStoreGetPreprocessResponse;
            }
            (*(ptr_ObjectStoreGetPreprocessResponse())) = (aRhs).get_ObjectStoreGetPreprocessResponse();
            break;
        }
    case TObjectStoreGetAllPreprocessResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessResponse()) ObjectStoreGetAllPreprocessResponse;
            }
            (*(ptr_ObjectStoreGetAllPreprocessResponse())) = (aRhs).get_ObjectStoreGetAllPreprocessResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto PreprocessResponse::operator=(PreprocessResponse&& aRhs) -> PreprocessResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetPreprocessResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetPreprocessResponse()) ObjectStoreGetPreprocessResponse;
            }
            (*(ptr_ObjectStoreGetPreprocessResponse())) = std::move((aRhs).get_ObjectStoreGetPreprocessResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllPreprocessResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllPreprocessResponse()) ObjectStoreGetAllPreprocessResponse;
            }
            (*(ptr_ObjectStoreGetAllPreprocessResponse())) = std::move((aRhs).get_ObjectStoreGetAllPreprocessResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::PreprocessResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::PreprocessResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'PreprocessResponse'
    (aMsg)->WriteSentinel(1175258998);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TObjectStoreGetPreprocessResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetPreprocessResponse());
            // Sentinel = 'TObjectStoreGetPreprocessResponse'
            (aMsg)->WriteSentinel(3708030286);
            return;
        }
    case union__::TObjectStoreGetAllPreprocessResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetAllPreprocessResponse());
            // Sentinel = 'TObjectStoreGetAllPreprocessResponse'
            (aMsg)->WriteSentinel(73862759);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::PreprocessResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::PreprocessResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union PreprocessResponse");
        return false;
    }
    // Sentinel = 'PreprocessResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 1175258998)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union PreprocessResponse");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union PreprocessResponse");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union PreprocessResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetPreprocessResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreGetPreprocessResponse tmp = mozilla::dom::indexedDB::ObjectStoreGetPreprocessResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetPreprocessResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetPreprocessResponse of union PreprocessResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreGetPreprocessResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 3708030286)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetPreprocessResponse of union PreprocessResponse");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetAllPreprocessResponse:
        {
            mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessResponse tmp = mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetAllPreprocessResponse())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetAllPreprocessResponse of union PreprocessResponse");
                return false;
            }
            // Sentinel = 'TObjectStoreGetAllPreprocessResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 73862759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetAllPreprocessResponse of union PreprocessResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
