//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PAltServiceChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/AltServiceChild.h"

#include "mozilla/net/PSocketProcessChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PAltServiceChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PAltServiceChild::PAltServiceChild() :
    mozilla::ipc::IProtocol(PAltServiceMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PAltServiceChild);
}

PAltServiceChild::~PAltServiceChild()
{
    MOZ_COUNT_DTOR(PAltServiceChild);
}

auto PAltServiceChild::Manager() const -> PSocketProcessChild*
{
    return static_cast<PSocketProcessChild*>(IProtocol::Manager());
}

auto PAltServiceChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PAltServiceChild::SendClearHostMapping(
        const nsCString& host,
        const int32_t& port,
        const OriginAttributes& originAttributes) -> bool
{
    IPC::Message* msg__ = PAltService::Msg_ClearHostMapping(Id());

    WriteIPDLParam(msg__, this, host);
    // Sentinel = 'host'
    (msg__)->WriteSentinel(72024511);
    WriteIPDLParam(msg__, this, port);
    // Sentinel = 'port'
    (msg__)->WriteSentinel(73990598);
    WriteIPDLParam(msg__, this, originAttributes);
    // Sentinel = 'originAttributes'
    (msg__)->WriteSentinel(947259056);




    if (mozilla::ipc::LoggingEnabledFor("PAltServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAltServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAltService::Msg_ClearHostMapping", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAltServiceChild::SendProcessHeader(
        const nsCString& buf,
        const nsCString& originScheme,
        const nsCString& originHost,
        const int32_t& originPort,
        const nsCString& username,
        const bool& privateBrowsing,
        const nsTArray<ProxyInfoCloneArgs>& proxyInfo,
        const uint32_t& caps,
        const OriginAttributes& originAttributes) -> bool
{
    IPC::Message* msg__ = PAltService::Msg_ProcessHeader(Id());

    WriteIPDLParam(msg__, this, buf);
    // Sentinel = 'buf'
    (msg__)->WriteSentinel(41484606);
    WriteIPDLParam(msg__, this, originScheme);
    // Sentinel = 'originScheme'
    (msg__)->WriteSentinel(538445022);
    WriteIPDLParam(msg__, this, originHost);
    // Sentinel = 'originHost'
    (msg__)->WriteSentinel(383648807);
    WriteIPDLParam(msg__, this, originPort);
    // Sentinel = 'originPort'
    (msg__)->WriteSentinel(385614894);
    WriteIPDLParam(msg__, this, username);
    // Sentinel = 'username'
    (msg__)->WriteSentinel(260506465);
    WriteIPDLParam(msg__, this, privateBrowsing);
    // Sentinel = 'privateBrowsing'
    (msg__)->WriteSentinel(844957255);
    WriteIPDLParam(msg__, this, proxyInfo);
    // Sentinel = 'proxyInfo'
    (msg__)->WriteSentinel(325583823);
    WriteIPDLParam(msg__, this, caps);
    // Sentinel = 'caps'
    (msg__)->WriteSentinel(67502504);
    WriteIPDLParam(msg__, this, originAttributes);
    // Sentinel = 'originAttributes'
    (msg__)->WriteSentinel(947259056);




    if (mozilla::ipc::LoggingEnabledFor("PAltServiceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAltServiceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAltService::Msg_ProcessHeader", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAltServiceChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAltServiceChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAltServiceChild::OnMessageReceived(const Message& msg__) -> PAltServiceChild::Result
{
    switch (msg__.type()) {
    case PAltService::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAltServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAltServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAltService::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PAltServiceChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PAltService'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PAltService'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PAltService'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<AltServiceChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PAltServiceMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAltServiceChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAltServiceChild::Result
{
    return MsgNotKnown;
}

auto PAltServiceChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAltServiceChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAltServiceChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PAltServiceChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PAltServiceChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PAltService", PAltServiceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PAltServiceChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
