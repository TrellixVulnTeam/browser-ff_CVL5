//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPStorageParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PGMPStorageParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PGMPStorageParent::PGMPStorageParent() :
    mozilla::ipc::IProtocol(PGMPStorageMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PGMPStorageParent);
}

PGMPStorageParent::~PGMPStorageParent()
{
    MOZ_COUNT_DTOR(PGMPStorageParent);
}

auto PGMPStorageParent::Manager() const -> PGMPParent*
{
    return static_cast<PGMPParent*>(IProtocol::Manager());
}

auto PGMPStorageParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PGMPStorageParent::SendOpenComplete(
        const nsCString& aRecordName,
        const GMPErr& aStatus) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_OpenComplete(Id());

    WriteIPDLParam(msg__, this, aRecordName);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(424805442);
    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg_OpenComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPStorageParent::SendReadComplete(
        const nsCString& aRecordName,
        const GMPErr& aStatus,
        const nsTArray<uint8_t>& aBytes) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_ReadComplete(Id());

    WriteIPDLParam(msg__, this, aRecordName);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(424805442);
    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);
    WriteIPDLParam(msg__, this, aBytes);
    // Sentinel = 'aBytes'
    (msg__)->WriteSentinel(135463529);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg_ReadComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPStorageParent::SendWriteComplete(
        const nsCString& aRecordName,
        const GMPErr& aStatus) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_WriteComplete(Id());

    WriteIPDLParam(msg__, this, aRecordName);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(424805442);
    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg_WriteComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPStorageParent::SendShutdown() -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPStorageParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPStorageParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPStorageParent::OnMessageReceived(const Message& msg__) -> PGMPStorageParent::Result
{
    switch (msg__.type()) {
    case PGMPStorage::Msg_Open__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg_Open", OTHER);

            PickleIterator iter__{msg__};
            nsCString aRecordName{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRecordName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 424805442)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOpen(std::move(aRecordName))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_Read__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg_Read", OTHER);

            PickleIterator iter__{msg__};
            nsCString aRecordName{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRecordName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 424805442)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvRead(std::move(aRecordName))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_Write__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg_Write", OTHER);

            PickleIterator iter__{msg__};
            nsCString aRecordName{};
            nsTArray<uint8_t> aBytes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRecordName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 424805442)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBytes)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aBytes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135463529)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvWrite(std::move(aRecordName), std::move(aBytes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg_Close", OTHER);

            PickleIterator iter__{msg__};
            nsCString aRecordName{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRecordName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 424805442)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvClose(std::move(aRecordName))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PGMPStorageParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PGMPStorage'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PGMPStorage'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PGMPStorage'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PGMPStorageMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPStorageParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPStorageParent::Result
{
    return MsgNotKnown;
}

auto PGMPStorageParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPStorageParent::Result
{
    return MsgNotKnown;
}

auto PGMPStorageParent::ClearSubtree() -> void
{
}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPStorageParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPStorageParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMPStorage", PGMPStorageMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPStorageParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
