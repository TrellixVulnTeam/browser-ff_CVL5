//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/indexedDB/ActorsChild.h"
#include "mozilla/dom/indexedDB/SerializationHelpers.h"
#include "mozilla/ipc/IPCCore.h"

#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseRequestChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBTransactionChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBVersionChangeTransactionChild.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace indexedDB {


auto PBackgroundIDBDatabaseChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBackgroundIDBDatabaseChild::RecvPBackgroundIDBVersionChangeTransactionConstructor(
        PBackgroundIDBVersionChangeTransactionChild* actor,
        const uint64_t& currentVersion,
        const uint64_t& requestedVersion,
        const int64_t& nextObjectStoreId,
        const int64_t& nextIndexId) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBackgroundIDBDatabaseChild::RecvPBackgroundMutableFileConstructor(
        PBackgroundMutableFileChild* actor,
        const nsString& name,
        const nsString& type) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundIDBDatabaseChild::PBackgroundIDBDatabaseChild() :
    mozilla::ipc::IProtocol(PBackgroundIDBDatabaseMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBackgroundIDBDatabaseChild);
}

PBackgroundIDBDatabaseChild::~PBackgroundIDBDatabaseChild()
{
    MOZ_COUNT_DTOR(PBackgroundIDBDatabaseChild);
}

auto PBackgroundIDBDatabaseChild::Manager() const -> PBackgroundIDBFactoryChild*
{
    return static_cast<PBackgroundIDBFactoryChild*>(IProtocol::Manager());
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBDatabaseFileChild(nsTArray<PBackgroundIDBDatabaseFileChild*>& aArr) const -> void
{
    mManagedPBackgroundIDBDatabaseFileChild.ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBDatabaseFileChild() const -> const ManagedContainer<PBackgroundIDBDatabaseFileChild>&
{
    return mManagedPBackgroundIDBDatabaseFileChild;
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBDatabaseRequestChild(nsTArray<PBackgroundIDBDatabaseRequestChild*>& aArr) const -> void
{
    mManagedPBackgroundIDBDatabaseRequestChild.ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBDatabaseRequestChild() const -> const ManagedContainer<PBackgroundIDBDatabaseRequestChild>&
{
    return mManagedPBackgroundIDBDatabaseRequestChild;
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBTransactionChild(nsTArray<PBackgroundIDBTransactionChild*>& aArr) const -> void
{
    mManagedPBackgroundIDBTransactionChild.ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBTransactionChild() const -> const ManagedContainer<PBackgroundIDBTransactionChild>&
{
    return mManagedPBackgroundIDBTransactionChild;
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBVersionChangeTransactionChild(nsTArray<PBackgroundIDBVersionChangeTransactionChild*>& aArr) const -> void
{
    mManagedPBackgroundIDBVersionChangeTransactionChild.ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBVersionChangeTransactionChild() const -> const ManagedContainer<PBackgroundIDBVersionChangeTransactionChild>&
{
    return mManagedPBackgroundIDBVersionChangeTransactionChild;
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundMutableFileChild(nsTArray<PBackgroundMutableFileChild*>& aArr) const -> void
{
    mManagedPBackgroundMutableFileChild.ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundMutableFileChild() const -> const ManagedContainer<PBackgroundMutableFileChild>&
{
    return mManagedPBackgroundMutableFileChild;
}

auto PBackgroundIDBDatabaseChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundIDBDatabaseFileChild.Count();
    total += mManagedPBackgroundIDBDatabaseRequestChild.Count();
    total += mManagedPBackgroundIDBTransactionChild.Count();
    total += mManagedPBackgroundIDBVersionChangeTransactionChild.Count();
    total += mManagedPBackgroundMutableFileChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundIDBDatabaseFileChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundIDBDatabaseRequestChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundIDBTransactionChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundIDBVersionChangeTransactionChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundMutableFileChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundIDBDatabaseChild::OpenPBackgroundIDBDatabaseFileEndpoint(PBackgroundIDBDatabaseFileChild* aActor) -> ManagedEndpoint<PBackgroundIDBDatabaseFileParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseFileChild actor");
        return ManagedEndpoint<PBackgroundIDBDatabaseFileParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBDatabaseFileChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBDatabaseFileParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseChild::BindPBackgroundIDBDatabaseFileEndpoint(
        ManagedEndpoint<PBackgroundIDBDatabaseFileChild> aEndpoint,
        PBackgroundIDBDatabaseFileChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseFileChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBDatabaseFileChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseChild::OpenPBackgroundIDBDatabaseRequestEndpoint(PBackgroundIDBDatabaseRequestChild* aActor) -> ManagedEndpoint<PBackgroundIDBDatabaseRequestParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseRequestChild actor");
        return ManagedEndpoint<PBackgroundIDBDatabaseRequestParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBDatabaseRequestChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBDatabaseRequestParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseChild::BindPBackgroundIDBDatabaseRequestEndpoint(
        ManagedEndpoint<PBackgroundIDBDatabaseRequestChild> aEndpoint,
        PBackgroundIDBDatabaseRequestChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseRequestChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBDatabaseRequestChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseChild::OpenPBackgroundIDBTransactionEndpoint(PBackgroundIDBTransactionChild* aActor) -> ManagedEndpoint<PBackgroundIDBTransactionParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBTransactionChild actor");
        return ManagedEndpoint<PBackgroundIDBTransactionParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBTransactionChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBTransactionParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseChild::BindPBackgroundIDBTransactionEndpoint(
        ManagedEndpoint<PBackgroundIDBTransactionChild> aEndpoint,
        PBackgroundIDBTransactionChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBTransactionChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBTransactionChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseChild::OpenPBackgroundIDBVersionChangeTransactionEndpoint(PBackgroundIDBVersionChangeTransactionChild* aActor) -> ManagedEndpoint<PBackgroundIDBVersionChangeTransactionParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBVersionChangeTransactionChild actor");
        return ManagedEndpoint<PBackgroundIDBVersionChangeTransactionParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBVersionChangeTransactionChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBVersionChangeTransactionParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseChild::BindPBackgroundIDBVersionChangeTransactionEndpoint(
        ManagedEndpoint<PBackgroundIDBVersionChangeTransactionChild> aEndpoint,
        PBackgroundIDBVersionChangeTransactionChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBVersionChangeTransactionChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBVersionChangeTransactionChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseChild::OpenPBackgroundMutableFileEndpoint(PBackgroundMutableFileChild* aActor) -> ManagedEndpoint<PBackgroundMutableFileParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundMutableFileChild actor");
        return ManagedEndpoint<PBackgroundMutableFileParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundMutableFileChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundMutableFileParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseChild::BindPBackgroundMutableFileEndpoint(
        ManagedEndpoint<PBackgroundMutableFileChild> aEndpoint,
        PBackgroundMutableFileChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundMutableFileChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundMutableFileChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_DeleteMe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseChild::SendBlocked() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_Blocked(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_Blocked", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseChild::SendClose() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_Close(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_Close", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBDatabaseFileConstructor(const IPCBlob& blob) -> PBackgroundIDBDatabaseFileChild*
{
    PBackgroundIDBDatabaseFileChild* actor = (static_cast<indexedDB::BackgroundDatabaseChild*>(this))->AllocPBackgroundIDBDatabaseFileChild(blob);
    return SendPBackgroundIDBDatabaseFileConstructor(actor, blob);
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBDatabaseFileConstructor(
        PBackgroundIDBDatabaseFileChild* actor,
        const IPCBlob& blob) -> PBackgroundIDBDatabaseFileChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseFileChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBDatabaseFileChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseFileConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, blob);
    // Sentinel = 'blob'
    (msg__)->WriteSentinel(68157856);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseFileConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundIDBDatabaseFileChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundIDBDatabaseFileMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBDatabaseRequestConstructor(const DatabaseRequestParams& params) -> PBackgroundIDBDatabaseRequestChild*
{
    PBackgroundIDBDatabaseRequestChild* actor = (static_cast<indexedDB::BackgroundDatabaseChild*>(this))->AllocPBackgroundIDBDatabaseRequestChild(params);
    return SendPBackgroundIDBDatabaseRequestConstructor(actor, params);
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBDatabaseRequestConstructor(
        PBackgroundIDBDatabaseRequestChild* actor,
        const DatabaseRequestParams& params) -> PBackgroundIDBDatabaseRequestChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseRequestChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBDatabaseRequestChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseRequestConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, params);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(146997893);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseRequestConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundIDBDatabaseRequestChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundIDBDatabaseRequestMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBTransactionConstructor(
        PBackgroundIDBTransactionChild* actor,
        const nsTArray<nsString>& objectStoreNames,
        const Mode& mode) -> PBackgroundIDBTransactionChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundIDBTransactionChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBTransactionChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_PBackgroundIDBTransactionConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, objectStoreNames);
    // Sentinel = 'objectStoreNames'
    (msg__)->WriteSentinel(924780153);
    WriteIPDLParam(msg__, this, mode);
    // Sentinel = 'mode'
    (msg__)->WriteSentinel(70386086);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundIDBTransactionConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundIDBTransactionChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundIDBTransactionMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBDatabaseChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBDatabaseFileMsgStart:
{
            PBackgroundIDBDatabaseFileChild* actor = static_cast<PBackgroundIDBDatabaseFileChild*>(aListener);
            auto& container = mManagedPBackgroundIDBDatabaseFileChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundIDBDatabaseRequestMsgStart:
{
            PBackgroundIDBDatabaseRequestChild* actor = static_cast<PBackgroundIDBDatabaseRequestChild*>(aListener);
            auto& container = mManagedPBackgroundIDBDatabaseRequestChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundIDBTransactionMsgStart:
{
            PBackgroundIDBTransactionChild* actor = static_cast<PBackgroundIDBTransactionChild*>(aListener);
            auto& container = mManagedPBackgroundIDBTransactionChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundIDBVersionChangeTransactionMsgStart:
{
            PBackgroundIDBVersionChangeTransactionChild* actor = static_cast<PBackgroundIDBVersionChangeTransactionChild*>(aListener);
            auto& container = mManagedPBackgroundIDBVersionChangeTransactionChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundMutableFileMsgStart:
{
            PBackgroundMutableFileChild* actor = static_cast<PBackgroundMutableFileChild*>(aListener);
            auto& container = mManagedPBackgroundMutableFileChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundIDBDatabaseChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBDatabaseFileMsgStart:
        static_cast<indexedDB::BackgroundDatabaseChild*>(this)->DeallocPBackgroundIDBDatabaseFileChild(static_cast<PBackgroundIDBDatabaseFileChild*>(aListener));
        return;
    case PBackgroundIDBDatabaseRequestMsgStart:
        static_cast<indexedDB::BackgroundDatabaseChild*>(this)->DeallocPBackgroundIDBDatabaseRequestChild(static_cast<PBackgroundIDBDatabaseRequestChild*>(aListener));
        return;
    case PBackgroundMutableFileMsgStart:
        static_cast<indexedDB::BackgroundDatabaseChild*>(this)->DeallocPBackgroundMutableFileChild(static_cast<PBackgroundMutableFileChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundIDBDatabaseChild::OnMessageReceived(const Message& msg__) -> PBackgroundIDBDatabaseChild::Result
{
    switch (msg__.type()) {
    case PBackgroundIDBDatabase::Reply_PBackgroundIDBDatabaseFileConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Reply_PBackgroundIDBDatabaseRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Reply_PBackgroundIDBTransactionConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBackgroundIDBDatabaseChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBackgroundIDBDatabase'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBackgroundIDBDatabase'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundIDBDatabase'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<indexedDB::BackgroundDatabaseChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBackgroundIDBDatabaseMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_VersionChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_VersionChange", OTHER);

            PickleIterator iter__{msg__};
            uint64_t oldVersion{};
            mozilla::Maybe<uint64_t> newVersion{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(oldVersion)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'oldVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 378602534)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(newVersion)))))) {
                FatalError("Error deserializing 'uint64_t?'");
                return MsgValueError;
            }
            // Sentinel = 'newVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 383779889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<indexedDB::BackgroundDatabaseChild*>(this))->RecvVersionChange(std::move(oldVersion), std::move(newVersion))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_Invalidate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_Invalidate", OTHER);

            if ((!((static_cast<indexedDB::BackgroundDatabaseChild*>(this))->RecvInvalidate()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_CloseAfterInvalidationComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_CloseAfterInvalidationComplete", OTHER);

            if ((!((static_cast<indexedDB::BackgroundDatabaseChild*>(this))->RecvCloseAfterInvalidationComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_PBackgroundIDBVersionChangeTransactionConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundIDBVersionChangeTransactionConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            uint64_t currentVersion{};
            uint64_t requestedVersion{};
            int64_t nextObjectStoreId{};
            int64_t nextIndexId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(currentVersion)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'currentVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 744228330)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestedVersion)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'requestedVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 962660025)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(nextObjectStoreId)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'nextObjectStoreId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1046087377)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(nextIndexId)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'nextIndexId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 453510245)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PBackgroundIDBVersionChangeTransactionChild> actor = (static_cast<indexedDB::BackgroundDatabaseChild*>(this))->AllocPBackgroundIDBVersionChangeTransactionChild(currentVersion, requestedVersion, nextObjectStoreId, nextIndexId);
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundIDBVersionChangeTransactionChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundIDBVersionChangeTransactionChild.PutEntry(actor);

            if ((!((static_cast<indexedDB::BackgroundDatabaseChild*>(this))->RecvPBackgroundIDBVersionChangeTransactionConstructor(actor, std::move(currentVersion), std::move(requestedVersion), std::move(nextObjectStoreId), std::move(nextIndexId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_PBackgroundMutableFileConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundMutableFileConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsString name{};
            nsString type{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(name)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69075362)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(type)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'type'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760067)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PBackgroundMutableFileChild* actor = (static_cast<indexedDB::BackgroundDatabaseChild*>(this))->AllocPBackgroundMutableFileChild(name, type);
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundMutableFileChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundMutableFileChild.PutEntry(actor);

            if ((!((static_cast<indexedDB::BackgroundDatabaseChild*>(this))->RecvPBackgroundMutableFileConstructor(std::move(actor), std::move(name), std::move(type))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundIDBDatabaseChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBDatabaseChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundIDBDatabaseChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBDatabaseChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundIDBDatabaseChild::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundIDBDatabaseFileChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBDatabaseFileChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBDatabaseFileChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBDatabaseFileChild.Clear();

    for (auto it = mManagedPBackgroundIDBDatabaseRequestChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBDatabaseRequestChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBDatabaseRequestChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBDatabaseRequestChild.Clear();

    for (auto it = mManagedPBackgroundIDBTransactionChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBTransactionChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBTransactionChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBTransactionChild.Clear();

    for (auto it = mManagedPBackgroundIDBVersionChangeTransactionChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBVersionChangeTransactionChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBVersionChangeTransactionChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBVersionChangeTransactionChild.Clear();

    for (auto it = mManagedPBackgroundMutableFileChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundMutableFileChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundMutableFileChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundMutableFileChild.Clear();

}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundIDBDatabase", PBackgroundIDBDatabaseMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
