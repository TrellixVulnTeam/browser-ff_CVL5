//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PServiceWorkerContainerChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/ServiceWorkerIPCUtils.h"

#include "mozilla/ipc/PBackgroundChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PServiceWorkerContainerChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PServiceWorkerContainerChild::PServiceWorkerContainerChild() :
    mozilla::ipc::IProtocol(PServiceWorkerContainerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PServiceWorkerContainerChild);
}

PServiceWorkerContainerChild::~PServiceWorkerContainerChild()
{
    MOZ_COUNT_DTOR(PServiceWorkerContainerChild);
}

auto PServiceWorkerContainerChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PServiceWorkerContainerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PServiceWorkerContainerChild::SendTeardown() -> bool
{
    IPC::Message* msg__ = PServiceWorkerContainer::Msg_Teardown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerContainerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_Teardown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerContainerChild::SendRegister(
        const IPCClientInfo& aClientInfo,
        const nsCString& aScopeURL,
        const nsCString& aScriptURL,
        const ServiceWorkerUpdateViaCache& aUpdateViaCache,
        mozilla::ipc::ResolveCallback<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PServiceWorkerContainer::Msg_Register(Id());

    WriteIPDLParam(msg__, this, aClientInfo);
    // Sentinel = 'aClientInfo'
    (msg__)->WriteSentinel(422315085);
    WriteIPDLParam(msg__, this, aScopeURL);
    // Sentinel = 'aScopeURL'
    (msg__)->WriteSentinel(285999951);
    WriteIPDLParam(msg__, this, aScriptURL);
    // Sentinel = 'aScriptURL'
    (msg__)->WriteSentinel(358220746);
    WriteIPDLParam(msg__, this, aUpdateViaCache);
    // Sentinel = 'aUpdateViaCache'
    (msg__)->WriteSentinel(772408761);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerContainerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_Register", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PServiceWorkerContainerChild::SendRegister(
        const IPCClientInfo& aClientInfo,
        const nsCString& aScopeURL,
        const nsCString& aScriptURL,
        const ServiceWorkerUpdateViaCache& aUpdateViaCache) -> RefPtr<RegisterPromise>
{
    RefPtr<MozPromise<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendRegister(std::move(aClientInfo), std::move(aScopeURL), std::move(aScriptURL), std::move(aUpdateViaCache), [promise__](IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PServiceWorkerContainerChild::SendGetRegistration(
        const IPCClientInfo& aClientInfo,
        const nsCString& aURL,
        mozilla::ipc::ResolveCallback<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PServiceWorkerContainer::Msg_GetRegistration(Id());

    WriteIPDLParam(msg__, this, aClientInfo);
    // Sentinel = 'aClientInfo'
    (msg__)->WriteSentinel(422315085);
    WriteIPDLParam(msg__, this, aURL);
    // Sentinel = 'aURL'
    (msg__)->WriteSentinel(58130773);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerContainerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetRegistration", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PServiceWorkerContainerChild::SendGetRegistration(
        const IPCClientInfo& aClientInfo,
        const nsCString& aURL) -> RefPtr<GetRegistrationPromise>
{
    RefPtr<MozPromise<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetRegistration(std::move(aClientInfo), std::move(aURL), [promise__](IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PServiceWorkerContainerChild::SendGetRegistrations(
        const IPCClientInfo& aClientInfo,
        mozilla::ipc::ResolveCallback<IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PServiceWorkerContainer::Msg_GetRegistrations(Id());

    WriteIPDLParam(msg__, this, aClientInfo);
    // Sentinel = 'aClientInfo'
    (msg__)->WriteSentinel(422315085);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerContainerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetRegistrations", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PServiceWorkerContainerChild::SendGetRegistrations(const IPCClientInfo& aClientInfo) -> RefPtr<GetRegistrationsPromise>
{
    RefPtr<MozPromise<IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetRegistrations(std::move(aClientInfo), [promise__](IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PServiceWorkerContainerChild::SendGetReady(
        const IPCClientInfo& aClientInfo,
        mozilla::ipc::ResolveCallback<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PServiceWorkerContainer::Msg_GetReady(Id());

    WriteIPDLParam(msg__, this, aClientInfo);
    // Sentinel = 'aClientInfo'
    (msg__)->WriteSentinel(422315085);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerContainerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetReady", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PServiceWorkerContainerChild::SendGetReady(const IPCClientInfo& aClientInfo) -> RefPtr<GetReadyPromise>
{
    RefPtr<MozPromise<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetReady(std::move(aClientInfo), [promise__](IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PServiceWorkerContainerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PServiceWorkerContainerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PServiceWorkerContainerChild::OnMessageReceived(const Message& msg__) -> PServiceWorkerContainerChild::Result
{
    switch (msg__.type()) {
    case PServiceWorkerContainer::Reply_Register__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_Register", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult aResult{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResult)))))) {
                    FatalError("Error deserializing 'IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult'");
                    return MsgValueError;
                }
                // Sentinel = 'aResult'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205473)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aResult));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PServiceWorkerContainer::Reply_GetRegistration__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetRegistration", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult aResult{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResult)))))) {
                    FatalError("Error deserializing 'IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult'");
                    return MsgValueError;
                }
                // Sentinel = 'aResult'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205473)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aResult));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PServiceWorkerContainer::Reply_GetRegistrations__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetRegistrations", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult aResult{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResult)))))) {
                    FatalError("Error deserializing 'IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult'");
                    return MsgValueError;
                }
                // Sentinel = 'aResult'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205473)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aResult));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PServiceWorkerContainer::Reply_GetReady__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetReady", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult aResult{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResult)))))) {
                    FatalError("Error deserializing 'IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult'");
                    return MsgValueError;
                }
                // Sentinel = 'aResult'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205473)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aResult));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PServiceWorkerContainer::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PServiceWorkerContainerChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PServiceWorkerContainer'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PServiceWorkerContainer'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PServiceWorkerContainer'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PServiceWorkerContainerMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PServiceWorkerContainerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PServiceWorkerContainerChild::Result
{
    return MsgNotKnown;
}

auto PServiceWorkerContainerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PServiceWorkerContainerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PServiceWorkerContainerChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PServiceWorkerContainerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PServiceWorkerContainerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PServiceWorkerContainer", PServiceWorkerContainerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PServiceWorkerContainerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
