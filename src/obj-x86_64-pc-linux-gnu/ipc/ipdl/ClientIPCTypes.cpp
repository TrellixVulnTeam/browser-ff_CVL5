//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/ClientIPCUtils.h"
#include "ipc/ErrorIPCUtils.h"
#include "mozilla/dom/PClientSourceParent.h"
#include "mozilla/dom/PClientSourceChild.h"
#include "mozilla/dom/ClientIPCTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientSourceConstructorArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientSourceConstructorArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).creationTime());
    // Sentinel = 'creationTime'
    (aMsg)->WriteSentinel(536478949);
}

auto IPDLParamTraits<mozilla::dom::ClientSourceConstructorArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsID) member of 'ClientSourceConstructorArgs'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsID) member of 'ClientSourceConstructorArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (ClientType) member of 'ClientSourceConstructorArgs'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (ClientType) member of 'ClientSourceConstructorArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'ClientSourceConstructorArgs'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'ClientSourceConstructorArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->creationTime())))))) {
        aActor->FatalError("Error deserializing 'creationTime' (TimeStamp) member of 'ClientSourceConstructorArgs'");
        return false;
    }
    // Sentinel = 'creationTime'
    if ((!((aMsg)->ReadSentinel(aIter, 536478949)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'creationTime' (TimeStamp) member of 'ClientSourceConstructorArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCClientInfo|
//
namespace mozilla {
namespace dom {
auto IPCClientInfo::operator==(const IPCClientInfo& _o) const -> bool
{
    if ((!((id()) == ((_o).id())))) {
        return false;
    }
    if ((!((agentClusterId()) == ((_o).agentClusterId())))) {
        return false;
    }
    if ((!((type()) == ((_o).type())))) {
        return false;
    }
    if ((!((principalInfo()) == ((_o).principalInfo())))) {
        return false;
    }
    if ((!((creationTime()) == ((_o).creationTime())))) {
        return false;
    }
    if ((!((url()) == ((_o).url())))) {
        return false;
    }
    if ((!((frameType()) == ((_o).frameType())))) {
        return false;
    }
    if ((!((cspInfo()) == ((_o).cspInfo())))) {
        return false;
    }
    if ((!((preloadCspInfo()) == ((_o).preloadCspInfo())))) {
        return false;
    }
    return true;
}

auto IPCClientInfo::operator!=(const IPCClientInfo& _o) const -> bool
{
    return (!(operator==(_o)));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCClientInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).agentClusterId());
    // Sentinel = 'agentClusterId'
    (aMsg)->WriteSentinel(710477215);
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).creationTime());
    // Sentinel = 'creationTime'
    (aMsg)->WriteSentinel(536478949);
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).frameType());
    // Sentinel = 'frameType'
    (aMsg)->WriteSentinel(308085678);
    WriteIPDLParam(aMsg, aActor, (aVar).cspInfo());
    // Sentinel = 'cspInfo'
    (aMsg)->WriteSentinel(189203155);
    WriteIPDLParam(aMsg, aActor, (aVar).preloadCspInfo());
    // Sentinel = 'preloadCspInfo'
    (aMsg)->WriteSentinel(714540442);
}

auto IPDLParamTraits<mozilla::dom::IPCClientInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsID) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsID) member of 'IPCClientInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->agentClusterId())))))) {
        aActor->FatalError("Error deserializing 'agentClusterId' (nsID?) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'agentClusterId'
    if ((!((aMsg)->ReadSentinel(aIter, 710477215)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'agentClusterId' (nsID?) member of 'IPCClientInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (ClientType) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (ClientType) member of 'IPCClientInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'IPCClientInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->creationTime())))))) {
        aActor->FatalError("Error deserializing 'creationTime' (TimeStamp) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'creationTime'
    if ((!((aMsg)->ReadSentinel(aIter, 536478949)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'creationTime' (TimeStamp) member of 'IPCClientInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'IPCClientInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->frameType())))))) {
        aActor->FatalError("Error deserializing 'frameType' (FrameType) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'frameType'
    if ((!((aMsg)->ReadSentinel(aIter, 308085678)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'frameType' (FrameType) member of 'IPCClientInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cspInfo())))))) {
        aActor->FatalError("Error deserializing 'cspInfo' (CSPInfo?) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'cspInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 189203155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cspInfo' (CSPInfo?) member of 'IPCClientInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preloadCspInfo())))))) {
        aActor->FatalError("Error deserializing 'preloadCspInfo' (CSPInfo?) member of 'IPCClientInfo'");
        return false;
    }
    // Sentinel = 'preloadCspInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 714540442)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preloadCspInfo' (CSPInfo?) member of 'IPCClientInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCClientWindowState|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCClientWindowState>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).visibilityState());
    // Sentinel = 'visibilityState'
    (aMsg)->WriteSentinel(851379786);
    WriteIPDLParam(aMsg, aActor, (aVar).lastFocusTime());
    // Sentinel = 'lastFocusTime'
    (aMsg)->WriteSentinel(620234052);
    WriteIPDLParam(aMsg, aActor, (aVar).storageAccess());
    // Sentinel = 'storageAccess'
    (aMsg)->WriteSentinel(628753736);
    WriteIPDLParam(aMsg, aActor, (aVar).focused());
    // Sentinel = 'focused'
    (aMsg)->WriteSentinel(196412138);
}

auto IPDLParamTraits<mozilla::dom::IPCClientWindowState>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->visibilityState())))))) {
        aActor->FatalError("Error deserializing 'visibilityState' (VisibilityState) member of 'IPCClientWindowState'");
        return false;
    }
    // Sentinel = 'visibilityState'
    if ((!((aMsg)->ReadSentinel(aIter, 851379786)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'visibilityState' (VisibilityState) member of 'IPCClientWindowState'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->lastFocusTime())))))) {
        aActor->FatalError("Error deserializing 'lastFocusTime' (TimeStamp) member of 'IPCClientWindowState'");
        return false;
    }
    // Sentinel = 'lastFocusTime'
    if ((!((aMsg)->ReadSentinel(aIter, 620234052)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'lastFocusTime' (TimeStamp) member of 'IPCClientWindowState'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->storageAccess())))))) {
        aActor->FatalError("Error deserializing 'storageAccess' (StorageAccess) member of 'IPCClientWindowState'");
        return false;
    }
    // Sentinel = 'storageAccess'
    if ((!((aMsg)->ReadSentinel(aIter, 628753736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'storageAccess' (StorageAccess) member of 'IPCClientWindowState'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->focused())))))) {
        aActor->FatalError("Error deserializing 'focused' (bool) member of 'IPCClientWindowState'");
        return false;
    }
    // Sentinel = 'focused'
    if ((!((aMsg)->ReadSentinel(aIter, 196412138)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'focused' (bool) member of 'IPCClientWindowState'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCClientWorkerState|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCClientWorkerState>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).storageAccess());
    // Sentinel = 'storageAccess'
    (aMsg)->WriteSentinel(628753736);
}

auto IPDLParamTraits<mozilla::dom::IPCClientWorkerState>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->storageAccess())))))) {
        aActor->FatalError("Error deserializing 'storageAccess' (StorageAccess) member of 'IPCClientWorkerState'");
        return false;
    }
    // Sentinel = 'storageAccess'
    if ((!((aMsg)->ReadSentinel(aIter, 628753736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'storageAccess' (StorageAccess) member of 'IPCClientWorkerState'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCClientState|
//
namespace mozilla {
namespace dom {
auto IPCClientState::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TIPCClientWindowState:
        {
            (ptr_IPCClientWindowState())->~IPCClientWindowState__tdef();
            break;
        }
    case TIPCClientWorkerState:
        {
            (ptr_IPCClientWorkerState())->~IPCClientWorkerState__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCClientState::IPCClientState(const IPCClientWindowState& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCClientWindowState()) IPCClientWindowState(aOther);
    mType = TIPCClientWindowState;
}

MOZ_IMPLICIT IPCClientState::IPCClientState(IPCClientWindowState&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCClientWindowState()) IPCClientWindowState(std::move(aOther));
    mType = TIPCClientWindowState;
}

MOZ_IMPLICIT IPCClientState::IPCClientState(const IPCClientWorkerState& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCClientWorkerState()) IPCClientWorkerState(aOther);
    mType = TIPCClientWorkerState;
}

MOZ_IMPLICIT IPCClientState::IPCClientState(IPCClientWorkerState&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCClientWorkerState()) IPCClientWorkerState(std::move(aOther));
    mType = TIPCClientWorkerState;
}

MOZ_IMPLICIT IPCClientState::IPCClientState(const IPCClientState& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TIPCClientWindowState:
        {
            new (mozilla::KnownNotNull, ptr_IPCClientWindowState()) IPCClientWindowState((aOther).get_IPCClientWindowState());
            break;
        }
    case TIPCClientWorkerState:
        {
            new (mozilla::KnownNotNull, ptr_IPCClientWorkerState()) IPCClientWorkerState((aOther).get_IPCClientWorkerState());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCClientState::IPCClientState(IPCClientState&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TIPCClientWindowState:
        {
            new (mozilla::KnownNotNull, ptr_IPCClientWindowState()) IPCClientWindowState(std::move((aOther).get_IPCClientWindowState()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCClientWorkerState:
        {
            new (mozilla::KnownNotNull, ptr_IPCClientWorkerState()) IPCClientWorkerState(std::move((aOther).get_IPCClientWorkerState()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCClientState::~IPCClientState()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCClientState::operator=(const IPCClientWindowState& aRhs) -> IPCClientState&
{
    if (MaybeDestroy(TIPCClientWindowState)) {
        new (mozilla::KnownNotNull, ptr_IPCClientWindowState()) IPCClientWindowState;
    }
    (*(ptr_IPCClientWindowState())) = aRhs;
    mType = TIPCClientWindowState;
    return (*(this));
}

auto IPCClientState::operator=(IPCClientWindowState&& aRhs) -> IPCClientState&
{
    if (MaybeDestroy(TIPCClientWindowState)) {
        new (mozilla::KnownNotNull, ptr_IPCClientWindowState()) IPCClientWindowState;
    }
    (*(ptr_IPCClientWindowState())) = std::move(aRhs);
    mType = TIPCClientWindowState;
    return (*(this));
}

auto IPCClientState::operator=(const IPCClientWorkerState& aRhs) -> IPCClientState&
{
    if (MaybeDestroy(TIPCClientWorkerState)) {
        new (mozilla::KnownNotNull, ptr_IPCClientWorkerState()) IPCClientWorkerState;
    }
    (*(ptr_IPCClientWorkerState())) = aRhs;
    mType = TIPCClientWorkerState;
    return (*(this));
}

auto IPCClientState::operator=(IPCClientWorkerState&& aRhs) -> IPCClientState&
{
    if (MaybeDestroy(TIPCClientWorkerState)) {
        new (mozilla::KnownNotNull, ptr_IPCClientWorkerState()) IPCClientWorkerState;
    }
    (*(ptr_IPCClientWorkerState())) = std::move(aRhs);
    mType = TIPCClientWorkerState;
    return (*(this));
}

auto IPCClientState::operator=(const IPCClientState& aRhs) -> IPCClientState&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCClientWindowState:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCClientWindowState()) IPCClientWindowState;
            }
            (*(ptr_IPCClientWindowState())) = (aRhs).get_IPCClientWindowState();
            break;
        }
    case TIPCClientWorkerState:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCClientWorkerState()) IPCClientWorkerState;
            }
            (*(ptr_IPCClientWorkerState())) = (aRhs).get_IPCClientWorkerState();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCClientState::operator=(IPCClientState&& aRhs) -> IPCClientState&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCClientWindowState:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCClientWindowState()) IPCClientWindowState;
            }
            (*(ptr_IPCClientWindowState())) = std::move((aRhs).get_IPCClientWindowState());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCClientWorkerState:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCClientWorkerState()) IPCClientWorkerState;
            }
            (*(ptr_IPCClientWorkerState())) = std::move((aRhs).get_IPCClientWorkerState());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCClientState>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPCClientState union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCClientState'
    (aMsg)->WriteSentinel(617284925);

    switch (type) {
    case union__::TIPCClientWindowState:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCClientWindowState());
            // Sentinel = 'TIPCClientWindowState'
            (aMsg)->WriteSentinel(1405093897);
            return;
        }
    case union__::TIPCClientWorkerState:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCClientWorkerState());
            // Sentinel = 'TIPCClientWorkerState'
            (aMsg)->WriteSentinel(1408501771);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPCClientState>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPCClientState union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCClientState");
        return false;
    }
    // Sentinel = 'IPCClientState'
    if ((!((aMsg)->ReadSentinel(aIter, 617284925)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCClientState");
        return false;
    }

    switch (type) {
    case union__::TIPCClientWindowState:
        {
            mozilla::dom::IPCClientWindowState tmp = mozilla::dom::IPCClientWindowState();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCClientWindowState())))))) {
                aActor->FatalError("Error deserializing variant TIPCClientWindowState of union IPCClientState");
                return false;
            }
            // Sentinel = 'TIPCClientWindowState'
            if ((!((aMsg)->ReadSentinel(aIter, 1405093897)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCClientWindowState of union IPCClientState");
                return false;
            }
            return true;
        }
    case union__::TIPCClientWorkerState:
        {
            mozilla::dom::IPCClientWorkerState tmp = mozilla::dom::IPCClientWorkerState();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCClientWorkerState())))))) {
                aActor->FatalError("Error deserializing variant TIPCClientWorkerState of union IPCClientState");
                return false;
            }
            // Sentinel = 'TIPCClientWorkerState'
            if ((!((aMsg)->ReadSentinel(aIter, 1408501771)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCClientWorkerState of union IPCClientState");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientInfoAndState|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientInfoAndState>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).info());
    // Sentinel = 'info'
    (aMsg)->WriteSentinel(70058413);
    WriteIPDLParam(aMsg, aActor, (aVar).state());
    // Sentinel = 'state'
    (aMsg)->WriteSentinel(109314594);
}

auto IPDLParamTraits<mozilla::dom::ClientInfoAndState>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->info())))))) {
        aActor->FatalError("Error deserializing 'info' (IPCClientInfo) member of 'ClientInfoAndState'");
        return false;
    }
    // Sentinel = 'info'
    if ((!((aMsg)->ReadSentinel(aIter, 70058413)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'info' (IPCClientInfo) member of 'ClientInfoAndState'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->state())))))) {
        aActor->FatalError("Error deserializing 'state' (IPCClientState) member of 'ClientInfoAndState'");
        return false;
    }
    // Sentinel = 'state'
    if ((!((aMsg)->ReadSentinel(aIter, 109314594)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'state' (IPCClientState) member of 'ClientInfoAndState'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientSourceExecutionReadyArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientSourceExecutionReadyArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).frameType());
    // Sentinel = 'frameType'
    (aMsg)->WriteSentinel(308085678);
}

auto IPDLParamTraits<mozilla::dom::ClientSourceExecutionReadyArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'ClientSourceExecutionReadyArgs'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'ClientSourceExecutionReadyArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->frameType())))))) {
        aActor->FatalError("Error deserializing 'frameType' (FrameType) member of 'ClientSourceExecutionReadyArgs'");
        return false;
    }
    // Sentinel = 'frameType'
    if ((!((aMsg)->ReadSentinel(aIter, 308085678)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'frameType' (FrameType) member of 'ClientSourceExecutionReadyArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientControlledArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientControlledArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).serviceWorker());
    // Sentinel = 'serviceWorker'
    (aMsg)->WriteSentinel(640157036);
}

auto IPDLParamTraits<mozilla::dom::ClientControlledArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->serviceWorker())))))) {
        aActor->FatalError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientControlledArgs'");
        return false;
    }
    // Sentinel = 'serviceWorker'
    if ((!((aMsg)->ReadSentinel(aIter, 640157036)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientControlledArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientFocusArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientFocusArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).callerType());
    // Sentinel = 'callerType'
    (aMsg)->WriteSentinel(373097494);
}

auto IPDLParamTraits<mozilla::dom::ClientFocusArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->callerType())))))) {
        aActor->FatalError("Error deserializing 'callerType' (CallerType) member of 'ClientFocusArgs'");
        return false;
    }
    // Sentinel = 'callerType'
    if ((!((aMsg)->ReadSentinel(aIter, 373097494)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'callerType' (CallerType) member of 'ClientFocusArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientNavigateArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientNavigateArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).target());
    // Sentinel = 'target'
    (aMsg)->WriteSentinel(148767368);
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).baseURL());
    // Sentinel = 'baseURL'
    (aMsg)->WriteSentinel(180159119);
    WriteIPDLParam(aMsg, aActor, (aVar).serviceWorker());
    // Sentinel = 'serviceWorker'
    (aMsg)->WriteSentinel(640157036);
}

auto IPDLParamTraits<mozilla::dom::ClientNavigateArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->target())))))) {
        aActor->FatalError("Error deserializing 'target' (IPCClientInfo) member of 'ClientNavigateArgs'");
        return false;
    }
    // Sentinel = 'target'
    if ((!((aMsg)->ReadSentinel(aIter, 148767368)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'target' (IPCClientInfo) member of 'ClientNavigateArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'ClientNavigateArgs'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'ClientNavigateArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseURL())))))) {
        aActor->FatalError("Error deserializing 'baseURL' (nsCString) member of 'ClientNavigateArgs'");
        return false;
    }
    // Sentinel = 'baseURL'
    if ((!((aMsg)->ReadSentinel(aIter, 180159119)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseURL' (nsCString) member of 'ClientNavigateArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->serviceWorker())))))) {
        aActor->FatalError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientNavigateArgs'");
        return false;
    }
    // Sentinel = 'serviceWorker'
    if ((!((aMsg)->ReadSentinel(aIter, 640157036)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientNavigateArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientPostMessageArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientPostMessageArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).clonedData());
    // Sentinel = 'clonedData'
    (aMsg)->WriteSentinel(368837616);
    WriteIPDLParam(aMsg, aActor, (aVar).serviceWorker());
    // Sentinel = 'serviceWorker'
    (aMsg)->WriteSentinel(640157036);
}

auto IPDLParamTraits<mozilla::dom::ClientPostMessageArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clonedData())))))) {
        aActor->FatalError("Error deserializing 'clonedData' (ClonedMessageData) member of 'ClientPostMessageArgs'");
        return false;
    }
    // Sentinel = 'clonedData'
    if ((!((aMsg)->ReadSentinel(aIter, 368837616)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clonedData' (ClonedMessageData) member of 'ClientPostMessageArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->serviceWorker())))))) {
        aActor->FatalError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientPostMessageArgs'");
        return false;
    }
    // Sentinel = 'serviceWorker'
    if ((!((aMsg)->ReadSentinel(aIter, 640157036)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientPostMessageArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientMatchAllArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientMatchAllArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).serviceWorker());
    // Sentinel = 'serviceWorker'
    (aMsg)->WriteSentinel(640157036);
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).includeUncontrolled());
    // Sentinel = 'includeUncontrolled'
    (aMsg)->WriteSentinel(1316030430);
}

auto IPDLParamTraits<mozilla::dom::ClientMatchAllArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->serviceWorker())))))) {
        aActor->FatalError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientMatchAllArgs'");
        return false;
    }
    // Sentinel = 'serviceWorker'
    if ((!((aMsg)->ReadSentinel(aIter, 640157036)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientMatchAllArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (ClientType) member of 'ClientMatchAllArgs'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (ClientType) member of 'ClientMatchAllArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->includeUncontrolled())))))) {
        aActor->FatalError("Error deserializing 'includeUncontrolled' (bool) member of 'ClientMatchAllArgs'");
        return false;
    }
    // Sentinel = 'includeUncontrolled'
    if ((!((aMsg)->ReadSentinel(aIter, 1316030430)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'includeUncontrolled' (bool) member of 'ClientMatchAllArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientClaimArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientClaimArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).serviceWorker());
    // Sentinel = 'serviceWorker'
    (aMsg)->WriteSentinel(640157036);
}

auto IPDLParamTraits<mozilla::dom::ClientClaimArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->serviceWorker())))))) {
        aActor->FatalError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientClaimArgs'");
        return false;
    }
    // Sentinel = 'serviceWorker'
    if ((!((aMsg)->ReadSentinel(aIter, 640157036)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'serviceWorker' (IPCServiceWorkerDescriptor) member of 'ClientClaimArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientGetInfoAndStateArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientGetInfoAndStateArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
}

auto IPDLParamTraits<mozilla::dom::ClientGetInfoAndStateArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsID) member of 'ClientGetInfoAndStateArgs'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsID) member of 'ClientGetInfoAndStateArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'ClientGetInfoAndStateArgs'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'ClientGetInfoAndStateArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientOpenWindowArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientOpenWindowArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).cspInfo());
    // Sentinel = 'cspInfo'
    (aMsg)->WriteSentinel(189203155);
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).baseURL());
    // Sentinel = 'baseURL'
    (aMsg)->WriteSentinel(180159119);
}

auto IPDLParamTraits<mozilla::dom::ClientOpenWindowArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'ClientOpenWindowArgs'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'ClientOpenWindowArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cspInfo())))))) {
        aActor->FatalError("Error deserializing 'cspInfo' (CSPInfo?) member of 'ClientOpenWindowArgs'");
        return false;
    }
    // Sentinel = 'cspInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 189203155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cspInfo' (CSPInfo?) member of 'ClientOpenWindowArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'ClientOpenWindowArgs'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'ClientOpenWindowArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseURL())))))) {
        aActor->FatalError("Error deserializing 'baseURL' (nsCString) member of 'ClientOpenWindowArgs'");
        return false;
    }
    // Sentinel = 'baseURL'
    if ((!((aMsg)->ReadSentinel(aIter, 180159119)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseURL' (nsCString) member of 'ClientOpenWindowArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ClientOpConstructorArgs|
//
namespace mozilla {
namespace dom {
auto ClientOpConstructorArgs::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TClientControlledArgs:
        {
            (ptr_ClientControlledArgs())->~ClientControlledArgs__tdef();
            break;
        }
    case TClientFocusArgs:
        {
            (ptr_ClientFocusArgs())->~ClientFocusArgs__tdef();
            break;
        }
    case TClientNavigateArgs:
        {
            (ptr_ClientNavigateArgs())->~ClientNavigateArgs__tdef();
            break;
        }
    case TClientPostMessageArgs:
        {
            (ptr_ClientPostMessageArgs())->~ClientPostMessageArgs__tdef();
            break;
        }
    case TClientMatchAllArgs:
        {
            (ptr_ClientMatchAllArgs())->~ClientMatchAllArgs__tdef();
            break;
        }
    case TClientClaimArgs:
        {
            (ptr_ClientClaimArgs())->~ClientClaimArgs__tdef();
            break;
        }
    case TClientGetInfoAndStateArgs:
        {
            (ptr_ClientGetInfoAndStateArgs())->~ClientGetInfoAndStateArgs__tdef();
            break;
        }
    case TClientOpenWindowArgs:
        {
            (ptr_ClientOpenWindowArgs())->~ClientOpenWindowArgs__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(const ClientControlledArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientControlledArgs()) ClientControlledArgs(aOther);
    mType = TClientControlledArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientControlledArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientControlledArgs()) ClientControlledArgs(std::move(aOther));
    mType = TClientControlledArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(const ClientFocusArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientFocusArgs()) ClientFocusArgs(aOther);
    mType = TClientFocusArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientFocusArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientFocusArgs()) ClientFocusArgs(std::move(aOther));
    mType = TClientFocusArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(const ClientNavigateArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientNavigateArgs()) ClientNavigateArgs(aOther);
    mType = TClientNavigateArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientNavigateArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientNavigateArgs()) ClientNavigateArgs(std::move(aOther));
    mType = TClientNavigateArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientPostMessageArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientPostMessageArgs()) ClientPostMessageArgs(std::move(aOther));
    mType = TClientPostMessageArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(const ClientMatchAllArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientMatchAllArgs()) ClientMatchAllArgs(aOther);
    mType = TClientMatchAllArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientMatchAllArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientMatchAllArgs()) ClientMatchAllArgs(std::move(aOther));
    mType = TClientMatchAllArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(const ClientClaimArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientClaimArgs()) ClientClaimArgs(aOther);
    mType = TClientClaimArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientClaimArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientClaimArgs()) ClientClaimArgs(std::move(aOther));
    mType = TClientClaimArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(const ClientGetInfoAndStateArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientGetInfoAndStateArgs()) ClientGetInfoAndStateArgs(aOther);
    mType = TClientGetInfoAndStateArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientGetInfoAndStateArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientGetInfoAndStateArgs()) ClientGetInfoAndStateArgs(std::move(aOther));
    mType = TClientGetInfoAndStateArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(const ClientOpenWindowArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientOpenWindowArgs()) ClientOpenWindowArgs(aOther);
    mType = TClientOpenWindowArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientOpenWindowArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientOpenWindowArgs()) ClientOpenWindowArgs(std::move(aOther));
    mType = TClientOpenWindowArgs;
}

MOZ_IMPLICIT ClientOpConstructorArgs::ClientOpConstructorArgs(ClientOpConstructorArgs&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TClientControlledArgs:
        {
            new (mozilla::KnownNotNull, ptr_ClientControlledArgs()) ClientControlledArgs(std::move((aOther).get_ClientControlledArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientFocusArgs:
        {
            new (mozilla::KnownNotNull, ptr_ClientFocusArgs()) ClientFocusArgs(std::move((aOther).get_ClientFocusArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientNavigateArgs:
        {
            new (mozilla::KnownNotNull, ptr_ClientNavigateArgs()) ClientNavigateArgs(std::move((aOther).get_ClientNavigateArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientPostMessageArgs:
        {
            new (mozilla::KnownNotNull, ptr_ClientPostMessageArgs()) ClientPostMessageArgs(std::move((aOther).get_ClientPostMessageArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientMatchAllArgs:
        {
            new (mozilla::KnownNotNull, ptr_ClientMatchAllArgs()) ClientMatchAllArgs(std::move((aOther).get_ClientMatchAllArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientClaimArgs:
        {
            new (mozilla::KnownNotNull, ptr_ClientClaimArgs()) ClientClaimArgs(std::move((aOther).get_ClientClaimArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientGetInfoAndStateArgs:
        {
            new (mozilla::KnownNotNull, ptr_ClientGetInfoAndStateArgs()) ClientGetInfoAndStateArgs(std::move((aOther).get_ClientGetInfoAndStateArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientOpenWindowArgs:
        {
            new (mozilla::KnownNotNull, ptr_ClientOpenWindowArgs()) ClientOpenWindowArgs(std::move((aOther).get_ClientOpenWindowArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

ClientOpConstructorArgs::~ClientOpConstructorArgs()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto ClientOpConstructorArgs::operator=(const ClientControlledArgs& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientControlledArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientControlledArgs()) ClientControlledArgs;
    }
    (*(ptr_ClientControlledArgs())) = aRhs;
    mType = TClientControlledArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientControlledArgs&& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientControlledArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientControlledArgs()) ClientControlledArgs;
    }
    (*(ptr_ClientControlledArgs())) = std::move(aRhs);
    mType = TClientControlledArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(const ClientFocusArgs& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientFocusArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientFocusArgs()) ClientFocusArgs;
    }
    (*(ptr_ClientFocusArgs())) = aRhs;
    mType = TClientFocusArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientFocusArgs&& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientFocusArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientFocusArgs()) ClientFocusArgs;
    }
    (*(ptr_ClientFocusArgs())) = std::move(aRhs);
    mType = TClientFocusArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(const ClientNavigateArgs& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientNavigateArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientNavigateArgs()) ClientNavigateArgs;
    }
    (*(ptr_ClientNavigateArgs())) = aRhs;
    mType = TClientNavigateArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientNavigateArgs&& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientNavigateArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientNavigateArgs()) ClientNavigateArgs;
    }
    (*(ptr_ClientNavigateArgs())) = std::move(aRhs);
    mType = TClientNavigateArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientPostMessageArgs&& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientPostMessageArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientPostMessageArgs()) ClientPostMessageArgs;
    }
    (*(ptr_ClientPostMessageArgs())) = std::move(aRhs);
    mType = TClientPostMessageArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(const ClientMatchAllArgs& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientMatchAllArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientMatchAllArgs()) ClientMatchAllArgs;
    }
    (*(ptr_ClientMatchAllArgs())) = aRhs;
    mType = TClientMatchAllArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientMatchAllArgs&& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientMatchAllArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientMatchAllArgs()) ClientMatchAllArgs;
    }
    (*(ptr_ClientMatchAllArgs())) = std::move(aRhs);
    mType = TClientMatchAllArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(const ClientClaimArgs& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientClaimArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientClaimArgs()) ClientClaimArgs;
    }
    (*(ptr_ClientClaimArgs())) = aRhs;
    mType = TClientClaimArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientClaimArgs&& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientClaimArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientClaimArgs()) ClientClaimArgs;
    }
    (*(ptr_ClientClaimArgs())) = std::move(aRhs);
    mType = TClientClaimArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(const ClientGetInfoAndStateArgs& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientGetInfoAndStateArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientGetInfoAndStateArgs()) ClientGetInfoAndStateArgs;
    }
    (*(ptr_ClientGetInfoAndStateArgs())) = aRhs;
    mType = TClientGetInfoAndStateArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientGetInfoAndStateArgs&& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientGetInfoAndStateArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientGetInfoAndStateArgs()) ClientGetInfoAndStateArgs;
    }
    (*(ptr_ClientGetInfoAndStateArgs())) = std::move(aRhs);
    mType = TClientGetInfoAndStateArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(const ClientOpenWindowArgs& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientOpenWindowArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientOpenWindowArgs()) ClientOpenWindowArgs;
    }
    (*(ptr_ClientOpenWindowArgs())) = aRhs;
    mType = TClientOpenWindowArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientOpenWindowArgs&& aRhs) -> ClientOpConstructorArgs&
{
    if (MaybeDestroy(TClientOpenWindowArgs)) {
        new (mozilla::KnownNotNull, ptr_ClientOpenWindowArgs()) ClientOpenWindowArgs;
    }
    (*(ptr_ClientOpenWindowArgs())) = std::move(aRhs);
    mType = TClientOpenWindowArgs;
    return (*(this));
}

auto ClientOpConstructorArgs::operator=(ClientOpConstructorArgs&& aRhs) -> ClientOpConstructorArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TClientControlledArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientControlledArgs()) ClientControlledArgs;
            }
            (*(ptr_ClientControlledArgs())) = std::move((aRhs).get_ClientControlledArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientFocusArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientFocusArgs()) ClientFocusArgs;
            }
            (*(ptr_ClientFocusArgs())) = std::move((aRhs).get_ClientFocusArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientNavigateArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientNavigateArgs()) ClientNavigateArgs;
            }
            (*(ptr_ClientNavigateArgs())) = std::move((aRhs).get_ClientNavigateArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientPostMessageArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientPostMessageArgs()) ClientPostMessageArgs;
            }
            (*(ptr_ClientPostMessageArgs())) = std::move((aRhs).get_ClientPostMessageArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientMatchAllArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientMatchAllArgs()) ClientMatchAllArgs;
            }
            (*(ptr_ClientMatchAllArgs())) = std::move((aRhs).get_ClientMatchAllArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientClaimArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientClaimArgs()) ClientClaimArgs;
            }
            (*(ptr_ClientClaimArgs())) = std::move((aRhs).get_ClientClaimArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientGetInfoAndStateArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientGetInfoAndStateArgs()) ClientGetInfoAndStateArgs;
            }
            (*(ptr_ClientGetInfoAndStateArgs())) = std::move((aRhs).get_ClientGetInfoAndStateArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientOpenWindowArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientOpenWindowArgs()) ClientOpenWindowArgs;
            }
            (*(ptr_ClientOpenWindowArgs())) = std::move((aRhs).get_ClientOpenWindowArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientOpConstructorArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::ClientOpConstructorArgs union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'ClientOpConstructorArgs'
    (aMsg)->WriteSentinel(1840187730);

    switch (type) {
    case union__::TClientControlledArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientControlledArgs());
            // Sentinel = 'TClientControlledArgs'
            (aMsg)->WriteSentinel(1510541399);
            return;
        }
    case union__::TClientFocusArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientFocusArgs());
            // Sentinel = 'TClientFocusArgs'
            (aMsg)->WriteSentinel(867370561);
            return;
        }
    case union__::TClientNavigateArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientNavigateArgs());
            // Sentinel = 'TClientNavigateArgs'
            (aMsg)->WriteSentinel(1222575984);
            return;
        }
    case union__::TClientPostMessageArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientPostMessageArgs());
            // Sentinel = 'TClientPostMessageArgs'
            (aMsg)->WriteSentinel(1648494764);
            return;
        }
    case union__::TClientMatchAllArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientMatchAllArgs());
            // Sentinel = 'TClientMatchAllArgs'
            (aMsg)->WriteSentinel(1201932103);
            return;
        }
    case union__::TClientClaimArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientClaimArgs());
            // Sentinel = 'TClientClaimArgs'
            (aMsg)->WriteSentinel(856426023);
            return;
        }
    case union__::TClientGetInfoAndStateArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientGetInfoAndStateArgs());
            // Sentinel = 'TClientGetInfoAndStateArgs'
            (aMsg)->WriteSentinel(2230848001);
            return;
        }
    case union__::TClientOpenWindowArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientOpenWindowArgs());
            // Sentinel = 'TClientOpenWindowArgs'
            (aMsg)->WriteSentinel(1497303115);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::ClientOpConstructorArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::ClientOpConstructorArgs union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union ClientOpConstructorArgs");
        return false;
    }
    // Sentinel = 'ClientOpConstructorArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 1840187730)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union ClientOpConstructorArgs");
        return false;
    }

    switch (type) {
    case union__::TClientControlledArgs:
        {
            mozilla::dom::ClientControlledArgs tmp = mozilla::dom::ClientControlledArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientControlledArgs())))))) {
                aActor->FatalError("Error deserializing variant TClientControlledArgs of union ClientOpConstructorArgs");
                return false;
            }
            // Sentinel = 'TClientControlledArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1510541399)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientControlledArgs of union ClientOpConstructorArgs");
                return false;
            }
            return true;
        }
    case union__::TClientFocusArgs:
        {
            mozilla::dom::ClientFocusArgs tmp = mozilla::dom::ClientFocusArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientFocusArgs())))))) {
                aActor->FatalError("Error deserializing variant TClientFocusArgs of union ClientOpConstructorArgs");
                return false;
            }
            // Sentinel = 'TClientFocusArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 867370561)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientFocusArgs of union ClientOpConstructorArgs");
                return false;
            }
            return true;
        }
    case union__::TClientNavigateArgs:
        {
            mozilla::dom::ClientNavigateArgs tmp = mozilla::dom::ClientNavigateArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientNavigateArgs())))))) {
                aActor->FatalError("Error deserializing variant TClientNavigateArgs of union ClientOpConstructorArgs");
                return false;
            }
            // Sentinel = 'TClientNavigateArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1222575984)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientNavigateArgs of union ClientOpConstructorArgs");
                return false;
            }
            return true;
        }
    case union__::TClientPostMessageArgs:
        {
            mozilla::dom::ClientPostMessageArgs tmp = mozilla::dom::ClientPostMessageArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientPostMessageArgs())))))) {
                aActor->FatalError("Error deserializing variant TClientPostMessageArgs of union ClientOpConstructorArgs");
                return false;
            }
            // Sentinel = 'TClientPostMessageArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1648494764)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientPostMessageArgs of union ClientOpConstructorArgs");
                return false;
            }
            return true;
        }
    case union__::TClientMatchAllArgs:
        {
            mozilla::dom::ClientMatchAllArgs tmp = mozilla::dom::ClientMatchAllArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientMatchAllArgs())))))) {
                aActor->FatalError("Error deserializing variant TClientMatchAllArgs of union ClientOpConstructorArgs");
                return false;
            }
            // Sentinel = 'TClientMatchAllArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1201932103)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientMatchAllArgs of union ClientOpConstructorArgs");
                return false;
            }
            return true;
        }
    case union__::TClientClaimArgs:
        {
            mozilla::dom::ClientClaimArgs tmp = mozilla::dom::ClientClaimArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientClaimArgs())))))) {
                aActor->FatalError("Error deserializing variant TClientClaimArgs of union ClientOpConstructorArgs");
                return false;
            }
            // Sentinel = 'TClientClaimArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 856426023)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientClaimArgs of union ClientOpConstructorArgs");
                return false;
            }
            return true;
        }
    case union__::TClientGetInfoAndStateArgs:
        {
            mozilla::dom::ClientGetInfoAndStateArgs tmp = mozilla::dom::ClientGetInfoAndStateArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientGetInfoAndStateArgs())))))) {
                aActor->FatalError("Error deserializing variant TClientGetInfoAndStateArgs of union ClientOpConstructorArgs");
                return false;
            }
            // Sentinel = 'TClientGetInfoAndStateArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 2230848001)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientGetInfoAndStateArgs of union ClientOpConstructorArgs");
                return false;
            }
            return true;
        }
    case union__::TClientOpenWindowArgs:
        {
            mozilla::dom::ClientOpenWindowArgs tmp = mozilla::dom::ClientOpenWindowArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientOpenWindowArgs())))))) {
                aActor->FatalError("Error deserializing variant TClientOpenWindowArgs of union ClientOpConstructorArgs");
                return false;
            }
            // Sentinel = 'TClientOpenWindowArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1497303115)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientOpenWindowArgs of union ClientOpConstructorArgs");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientList|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientList>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).values());
    // Sentinel = 'values'
    (aMsg)->WriteSentinel(150667921);
}

auto IPDLParamTraits<mozilla::dom::ClientList>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->values())))))) {
        aActor->FatalError("Error deserializing 'values' (ClientInfoAndState[]) member of 'ClientList'");
        return false;
    }
    // Sentinel = 'values'
    if ((!((aMsg)->ReadSentinel(aIter, 150667921)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'values' (ClientInfoAndState[]) member of 'ClientList'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClientNavigateOpConstructorArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientNavigateOpConstructorArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).targetParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).targetParent());
        // Sentinel = 'target'
        (aMsg)->WriteSentinel(148767368);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).targetChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).targetChild());
        // Sentinel = 'target'
        (aMsg)->WriteSentinel(148767368);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).baseURL());
    // Sentinel = 'baseURL'
    (aMsg)->WriteSentinel(180159119);
}

auto IPDLParamTraits<mozilla::dom::ClientNavigateOpConstructorArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->targetParent())))))) {
            aActor->FatalError("Error deserializing 'targetParent' (PClientSource) member of 'ClientNavigateOpConstructorArgs'");
            return false;
        }
        if ((!((*((&((aVar)->targetParent()))))))) {
            aActor->FatalError("Error deserializing 'targetParent' (PClientSource) member of 'ClientNavigateOpConstructorArgs'");
            return false;
        }
        // Sentinel = 'target'
        if ((!((aMsg)->ReadSentinel(aIter, 148767368)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'targetParent' (PClientSource) member of 'ClientNavigateOpConstructorArgs'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->targetChild())))))) {
            aActor->FatalError("Error deserializing 'targetChild' (PClientSource) member of 'ClientNavigateOpConstructorArgs'");
            return false;
        }
        if ((!((*((&((aVar)->targetChild()))))))) {
            aActor->FatalError("Error deserializing 'targetChild' (PClientSource) member of 'ClientNavigateOpConstructorArgs'");
            return false;
        }
        // Sentinel = 'target'
        if ((!((aMsg)->ReadSentinel(aIter, 148767368)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'targetChild' (PClientSource) member of 'ClientNavigateOpConstructorArgs'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsCString) member of 'ClientNavigateOpConstructorArgs'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsCString) member of 'ClientNavigateOpConstructorArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseURL())))))) {
        aActor->FatalError("Error deserializing 'baseURL' (nsCString) member of 'ClientNavigateOpConstructorArgs'");
        return false;
    }
    // Sentinel = 'baseURL'
    if ((!((aMsg)->ReadSentinel(aIter, 180159119)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseURL' (nsCString) member of 'ClientNavigateOpConstructorArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ClientOpResult|
//
namespace mozilla {
namespace dom {
auto ClientOpResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TCopyableErrorResult:
        {
            (ptr_CopyableErrorResult())->~CopyableErrorResult__tdef();
            break;
        }
    case TIPCClientState:
        {
            (ptr_IPCClientState())->~IPCClientState__tdef();
            break;
        }
    case TClientInfoAndState:
        {
            (ptr_ClientInfoAndState())->~ClientInfoAndState__tdef();
            break;
        }
    case TClientList:
        {
            (ptr_ClientList())->~ClientList__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(const CopyableErrorResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_CopyableErrorResult()) CopyableErrorResult(aOther);
    mType = TCopyableErrorResult;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(CopyableErrorResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CopyableErrorResult()) CopyableErrorResult(std::move(aOther));
    mType = TCopyableErrorResult;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(const IPCClientState& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCClientState()) IPCClientState(aOther);
    mType = TIPCClientState;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(IPCClientState&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCClientState()) IPCClientState(std::move(aOther));
    mType = TIPCClientState;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(const ClientInfoAndState& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientInfoAndState()) ClientInfoAndState(aOther);
    mType = TClientInfoAndState;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(ClientInfoAndState&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientInfoAndState()) ClientInfoAndState(std::move(aOther));
    mType = TClientInfoAndState;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(const ClientList& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientList()) ClientList(aOther);
    mType = TClientList;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(ClientList&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClientList()) ClientList(std::move(aOther));
    mType = TClientList;
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(const ClientOpResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TCopyableErrorResult:
        {
            new (mozilla::KnownNotNull, ptr_CopyableErrorResult()) CopyableErrorResult((aOther).get_CopyableErrorResult());
            break;
        }
    case TIPCClientState:
        {
            new (mozilla::KnownNotNull, ptr_IPCClientState()) IPCClientState((aOther).get_IPCClientState());
            break;
        }
    case TClientInfoAndState:
        {
            new (mozilla::KnownNotNull, ptr_ClientInfoAndState()) ClientInfoAndState((aOther).get_ClientInfoAndState());
            break;
        }
    case TClientList:
        {
            new (mozilla::KnownNotNull, ptr_ClientList()) ClientList((aOther).get_ClientList());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT ClientOpResult::ClientOpResult(ClientOpResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TCopyableErrorResult:
        {
            new (mozilla::KnownNotNull, ptr_CopyableErrorResult()) CopyableErrorResult(std::move((aOther).get_CopyableErrorResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCClientState:
        {
            new (mozilla::KnownNotNull, ptr_IPCClientState()) IPCClientState(std::move((aOther).get_IPCClientState()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientInfoAndState:
        {
            new (mozilla::KnownNotNull, ptr_ClientInfoAndState()) ClientInfoAndState(std::move((aOther).get_ClientInfoAndState()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClientList:
        {
            new (mozilla::KnownNotNull, ptr_ClientList()) ClientList(std::move((aOther).get_ClientList()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

ClientOpResult::~ClientOpResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto ClientOpResult::operator=(const CopyableErrorResult& aRhs) -> ClientOpResult&
{
    if (MaybeDestroy(TCopyableErrorResult)) {
        new (mozilla::KnownNotNull, ptr_CopyableErrorResult()) CopyableErrorResult;
    }
    (*(ptr_CopyableErrorResult())) = aRhs;
    mType = TCopyableErrorResult;
    return (*(this));
}

auto ClientOpResult::operator=(CopyableErrorResult&& aRhs) -> ClientOpResult&
{
    if (MaybeDestroy(TCopyableErrorResult)) {
        new (mozilla::KnownNotNull, ptr_CopyableErrorResult()) CopyableErrorResult;
    }
    (*(ptr_CopyableErrorResult())) = std::move(aRhs);
    mType = TCopyableErrorResult;
    return (*(this));
}

auto ClientOpResult::operator=(const IPCClientState& aRhs) -> ClientOpResult&
{
    if (MaybeDestroy(TIPCClientState)) {
        new (mozilla::KnownNotNull, ptr_IPCClientState()) IPCClientState;
    }
    (*(ptr_IPCClientState())) = aRhs;
    mType = TIPCClientState;
    return (*(this));
}

auto ClientOpResult::operator=(IPCClientState&& aRhs) -> ClientOpResult&
{
    if (MaybeDestroy(TIPCClientState)) {
        new (mozilla::KnownNotNull, ptr_IPCClientState()) IPCClientState;
    }
    (*(ptr_IPCClientState())) = std::move(aRhs);
    mType = TIPCClientState;
    return (*(this));
}

auto ClientOpResult::operator=(const ClientInfoAndState& aRhs) -> ClientOpResult&
{
    if (MaybeDestroy(TClientInfoAndState)) {
        new (mozilla::KnownNotNull, ptr_ClientInfoAndState()) ClientInfoAndState;
    }
    (*(ptr_ClientInfoAndState())) = aRhs;
    mType = TClientInfoAndState;
    return (*(this));
}

auto ClientOpResult::operator=(ClientInfoAndState&& aRhs) -> ClientOpResult&
{
    if (MaybeDestroy(TClientInfoAndState)) {
        new (mozilla::KnownNotNull, ptr_ClientInfoAndState()) ClientInfoAndState;
    }
    (*(ptr_ClientInfoAndState())) = std::move(aRhs);
    mType = TClientInfoAndState;
    return (*(this));
}

auto ClientOpResult::operator=(const ClientList& aRhs) -> ClientOpResult&
{
    if (MaybeDestroy(TClientList)) {
        new (mozilla::KnownNotNull, ptr_ClientList()) ClientList;
    }
    (*(ptr_ClientList())) = aRhs;
    mType = TClientList;
    return (*(this));
}

auto ClientOpResult::operator=(ClientList&& aRhs) -> ClientOpResult&
{
    if (MaybeDestroy(TClientList)) {
        new (mozilla::KnownNotNull, ptr_ClientList()) ClientList;
    }
    (*(ptr_ClientList())) = std::move(aRhs);
    mType = TClientList;
    return (*(this));
}

auto ClientOpResult::operator=(const ClientOpResult& aRhs) -> ClientOpResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TCopyableErrorResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CopyableErrorResult()) CopyableErrorResult;
            }
            (*(ptr_CopyableErrorResult())) = (aRhs).get_CopyableErrorResult();
            break;
        }
    case TIPCClientState:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCClientState()) IPCClientState;
            }
            (*(ptr_IPCClientState())) = (aRhs).get_IPCClientState();
            break;
        }
    case TClientInfoAndState:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientInfoAndState()) ClientInfoAndState;
            }
            (*(ptr_ClientInfoAndState())) = (aRhs).get_ClientInfoAndState();
            break;
        }
    case TClientList:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientList()) ClientList;
            }
            (*(ptr_ClientList())) = (aRhs).get_ClientList();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto ClientOpResult::operator=(ClientOpResult&& aRhs) -> ClientOpResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TCopyableErrorResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CopyableErrorResult()) CopyableErrorResult;
            }
            (*(ptr_CopyableErrorResult())) = std::move((aRhs).get_CopyableErrorResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCClientState:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCClientState()) IPCClientState;
            }
            (*(ptr_IPCClientState())) = std::move((aRhs).get_IPCClientState());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientInfoAndState:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientInfoAndState()) ClientInfoAndState;
            }
            (*(ptr_ClientInfoAndState())) = std::move((aRhs).get_ClientInfoAndState());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClientList:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClientList()) ClientList;
            }
            (*(ptr_ClientList())) = std::move((aRhs).get_ClientList());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClientOpResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::ClientOpResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'ClientOpResult'
    (aMsg)->WriteSentinel(683345310);

    switch (type) {
    case union__::TCopyableErrorResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CopyableErrorResult());
            // Sentinel = 'TCopyableErrorResult'
            (aMsg)->WriteSentinel(1376585741);
            return;
        }
    case union__::TIPCClientState:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCClientState());
            // Sentinel = 'TIPCClientState'
            (aMsg)->WriteSentinel(699925905);
            return;
        }
    case union__::TClientInfoAndState:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientInfoAndState());
            // Sentinel = 'TClientInfoAndState'
            (aMsg)->WriteSentinel(1205733204);
            return;
        }
    case union__::TClientList:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClientList());
            // Sentinel = 'TClientList'
            (aMsg)->WriteSentinel(414778448);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::ClientOpResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::ClientOpResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union ClientOpResult");
        return false;
    }
    // Sentinel = 'ClientOpResult'
    if ((!((aMsg)->ReadSentinel(aIter, 683345310)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union ClientOpResult");
        return false;
    }

    switch (type) {
    case union__::TCopyableErrorResult:
        {
            mozilla::CopyableErrorResult tmp = mozilla::CopyableErrorResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CopyableErrorResult())))))) {
                aActor->FatalError("Error deserializing variant TCopyableErrorResult of union ClientOpResult");
                return false;
            }
            // Sentinel = 'TCopyableErrorResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1376585741)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCopyableErrorResult of union ClientOpResult");
                return false;
            }
            return true;
        }
    case union__::TIPCClientState:
        {
            mozilla::dom::IPCClientState tmp = mozilla::dom::IPCClientState();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCClientState())))))) {
                aActor->FatalError("Error deserializing variant TIPCClientState of union ClientOpResult");
                return false;
            }
            // Sentinel = 'TIPCClientState'
            if ((!((aMsg)->ReadSentinel(aIter, 699925905)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCClientState of union ClientOpResult");
                return false;
            }
            return true;
        }
    case union__::TClientInfoAndState:
        {
            mozilla::dom::ClientInfoAndState tmp = mozilla::dom::ClientInfoAndState();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientInfoAndState())))))) {
                aActor->FatalError("Error deserializing variant TClientInfoAndState of union ClientOpResult");
                return false;
            }
            // Sentinel = 'TClientInfoAndState'
            if ((!((aMsg)->ReadSentinel(aIter, 1205733204)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientInfoAndState of union ClientOpResult");
                return false;
            }
            return true;
        }
    case union__::TClientList:
        {
            mozilla::dom::ClientList tmp = mozilla::dom::ClientList();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClientList())))))) {
                aActor->FatalError("Error deserializing variant TClientList of union ClientOpResult");
                return false;
            }
            // Sentinel = 'TClientList'
            if ((!((aMsg)->ReadSentinel(aIter, 414778448)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClientList of union ClientOpResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
