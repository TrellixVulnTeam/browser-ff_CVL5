//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"
#include "mozilla/dom/PBackgroundMutableFileParent.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseRequest.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseRequestParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBDatabaseRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBDatabaseRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBDatabaseRequestChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PBackgroundIDBDatabaseRequest
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CreateFileRequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::CreateFileRequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).mutableFileParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).mutableFileParent());
        // Sentinel = 'mutableFile'
        (aMsg)->WriteSentinel(455541867);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).mutableFileChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).mutableFileChild());
        // Sentinel = 'mutableFile'
        (aMsg)->WriteSentinel(455541867);
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::CreateFileRequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mutableFileParent())))))) {
            aActor->FatalError("Error deserializing 'mutableFileParent' (PBackgroundMutableFile) member of 'CreateFileRequestResponse'");
            return false;
        }
        if ((!((*((&((aVar)->mutableFileParent()))))))) {
            aActor->FatalError("Error deserializing 'mutableFileParent' (PBackgroundMutableFile) member of 'CreateFileRequestResponse'");
            return false;
        }
        // Sentinel = 'mutableFile'
        if ((!((aMsg)->ReadSentinel(aIter, 455541867)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'mutableFileParent' (PBackgroundMutableFile) member of 'CreateFileRequestResponse'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mutableFileChild())))))) {
            aActor->FatalError("Error deserializing 'mutableFileChild' (PBackgroundMutableFile) member of 'CreateFileRequestResponse'");
            return false;
        }
        if ((!((*((&((aVar)->mutableFileChild()))))))) {
            aActor->FatalError("Error deserializing 'mutableFileChild' (PBackgroundMutableFile) member of 'CreateFileRequestResponse'");
            return false;
        }
        // Sentinel = 'mutableFile'
        if ((!((aMsg)->ReadSentinel(aIter, 455541867)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'mutableFileChild' (PBackgroundMutableFile) member of 'CreateFileRequestResponse'");
            return false;
        }
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union DatabaseRequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto DatabaseRequestResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TCreateFileRequestResponse:
        {
            (ptr_CreateFileRequestResponse())->~CreateFileRequestResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT DatabaseRequestResponse::DatabaseRequestResponse(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT DatabaseRequestResponse::DatabaseRequestResponse(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT DatabaseRequestResponse::DatabaseRequestResponse(const CreateFileRequestResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_CreateFileRequestResponse()) CreateFileRequestResponse(aOther);
    mType = TCreateFileRequestResponse;
}

MOZ_IMPLICIT DatabaseRequestResponse::DatabaseRequestResponse(CreateFileRequestResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CreateFileRequestResponse()) CreateFileRequestResponse(std::move(aOther));
    mType = TCreateFileRequestResponse;
}

MOZ_IMPLICIT DatabaseRequestResponse::DatabaseRequestResponse(const DatabaseRequestResponse& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TCreateFileRequestResponse:
        {
            new (mozilla::KnownNotNull, ptr_CreateFileRequestResponse()) CreateFileRequestResponse((aOther).get_CreateFileRequestResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT DatabaseRequestResponse::DatabaseRequestResponse(DatabaseRequestResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCreateFileRequestResponse:
        {
            new (mozilla::KnownNotNull, ptr_CreateFileRequestResponse()) CreateFileRequestResponse(std::move((aOther).get_CreateFileRequestResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

DatabaseRequestResponse::~DatabaseRequestResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto DatabaseRequestResponse::operator=(const nsresult& aRhs) -> DatabaseRequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto DatabaseRequestResponse::operator=(nsresult&& aRhs) -> DatabaseRequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto DatabaseRequestResponse::operator=(const CreateFileRequestResponse& aRhs) -> DatabaseRequestResponse&
{
    if (MaybeDestroy(TCreateFileRequestResponse)) {
        new (mozilla::KnownNotNull, ptr_CreateFileRequestResponse()) CreateFileRequestResponse;
    }
    (*(ptr_CreateFileRequestResponse())) = aRhs;
    mType = TCreateFileRequestResponse;
    return (*(this));
}

auto DatabaseRequestResponse::operator=(CreateFileRequestResponse&& aRhs) -> DatabaseRequestResponse&
{
    if (MaybeDestroy(TCreateFileRequestResponse)) {
        new (mozilla::KnownNotNull, ptr_CreateFileRequestResponse()) CreateFileRequestResponse;
    }
    (*(ptr_CreateFileRequestResponse())) = std::move(aRhs);
    mType = TCreateFileRequestResponse;
    return (*(this));
}

auto DatabaseRequestResponse::operator=(const DatabaseRequestResponse& aRhs) -> DatabaseRequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TCreateFileRequestResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CreateFileRequestResponse()) CreateFileRequestResponse;
            }
            (*(ptr_CreateFileRequestResponse())) = (aRhs).get_CreateFileRequestResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto DatabaseRequestResponse::operator=(DatabaseRequestResponse&& aRhs) -> DatabaseRequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCreateFileRequestResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CreateFileRequestResponse()) CreateFileRequestResponse;
            }
            (*(ptr_CreateFileRequestResponse())) = std::move((aRhs).get_CreateFileRequestResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseRequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::DatabaseRequestResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'DatabaseRequestResponse'
    (aMsg)->WriteSentinel(1822951758);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TCreateFileRequestResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CreateFileRequestResponse());
            // Sentinel = 'TCreateFileRequestResponse'
            (aMsg)->WriteSentinel(2277116513);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseRequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::DatabaseRequestResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union DatabaseRequestResponse");
        return false;
    }
    // Sentinel = 'DatabaseRequestResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 1822951758)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union DatabaseRequestResponse");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union DatabaseRequestResponse");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union DatabaseRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TCreateFileRequestResponse:
        {
            mozilla::dom::indexedDB::CreateFileRequestResponse tmp = mozilla::dom::indexedDB::CreateFileRequestResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CreateFileRequestResponse())))))) {
                aActor->FatalError("Error deserializing variant TCreateFileRequestResponse of union DatabaseRequestResponse");
                return false;
            }
            // Sentinel = 'TCreateFileRequestResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2277116513)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCreateFileRequestResponse of union DatabaseRequestResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
