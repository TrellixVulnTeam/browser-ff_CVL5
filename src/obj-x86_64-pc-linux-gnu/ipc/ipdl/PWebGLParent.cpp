//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PWebGLParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/WebGLParent.h"

#include "mozilla/layers/PCompositorBridgeParent.h"
#include "mozilla/layers/PLayerTransactionParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PWebGLParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PWebGLParent::PWebGLParent() :
    mozilla::ipc::IProtocol(PWebGLMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWebGLParent);
}

PWebGLParent::~PWebGLParent()
{
    MOZ_COUNT_DTOR(PWebGLParent);
}

auto PWebGLParent::Manager() const -> PCompositorBridgeParent*
{
    return static_cast<PCompositorBridgeParent*>(IProtocol::Manager());
}

auto PWebGLParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebGLParent::SendJsWarning(const string& text) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_JsWarning(Id());

    WriteIPDLParam(msg__, this, text);
    // Sentinel = 'text'
    (msg__)->WriteSentinel(73859526);




    if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_JsWarning", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGLParent::SendOnContextLoss(const ContextLossReason& aReason) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_OnContextLoss(Id());

    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_OnContextLoss", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGLParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebGLParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebGLParent::OnMessageReceived(const Message& msg__) -> PWebGLParent::Result
{
    switch (msg__.type()) {
    case PWebGL::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWebGLParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWebGL'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWebGL'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebGL'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGLParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWebGLMsgStart, actor);

            return MsgProcessed;
        }
    case PWebGL::Msg_DispatchCommands__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_DispatchCommands", OTHER);

            PickleIterator iter__{msg__};
            Shmem commands{};
            uint64_t size{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(commands)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'commands'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 249627475)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(size)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'size'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73662908)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGLParent*>(this))->RecvDispatchCommands(std::move(commands), std::move(size))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebGLParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebGLParent::Result
{
    switch (msg__.type()) {
    case PWebGL::Msg_Initialize__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_Initialize", OTHER);

            PickleIterator iter__{msg__};
            InitContextDesc desc{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(desc)))))) {
                FatalError("Error deserializing 'InitContextDesc'");
                return MsgValueError;
            }
            // Sentinel = 'desc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67895712)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'InitContextDesc'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            InitContextResult res{};
            if ((!((static_cast<WebGLParent*>(this))->RecvInitialize(std::move(desc), (&(res)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_Initialize(id__);

            WriteIPDLParam(reply__, this, res);
            // Sentinel = 'res'
            (reply__)->WriteSentinel(43385163);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetBufferSubData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetBufferSubData", OTHER);

            PickleIterator iter__{msg__};
            uint32_t target{};
            uint64_t srcByteOffset{};
            uint64_t byteSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(target)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'target'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148767368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(srcByteOffset)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'srcByteOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 616301892)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(byteSize)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'byteSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251134800)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            Shmem ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetBufferSubData(std::move(target), std::move(srcByteOffset), std::move(byteSize), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetBufferSubData(id__);

            WriteIPDLParam(reply__, this, std::move(ret));
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetFrontBufferSnapshot__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetFrontBufferSnapshot", OTHER);

            int32_t id__ = Id();
            FrontBufferSnapshotIpc ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetFrontBufferSnapshot((&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetFrontBufferSnapshot(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_ReadPixels__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_ReadPixels", OTHER);

            PickleIterator iter__{msg__};
            ReadPixelsDesc desc{};
            uint64_t maxBytes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(desc)))))) {
                FatalError("Error deserializing 'ReadPixelsDesc'");
                return MsgValueError;
            }
            // Sentinel = 'desc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67895712)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ReadPixelsDesc'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(maxBytes)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'maxBytes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 246285134)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            ReadPixelsResultIpc ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvReadPixels(std::move(desc), std::move(maxBytes), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_ReadPixels(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_CheckFramebufferStatus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_CheckFramebufferStatus", OTHER);

            PickleIterator iter__{msg__};
            uint32_t target{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(target)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'target'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148767368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvCheckFramebufferStatus(std::move(target), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_CheckFramebufferStatus(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_ClientWaitSync__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_ClientWaitSync", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            uint32_t flags{};
            uint64_t timeout{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102171150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(timeout)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'timeout'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201917192)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            uint32_t ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvClientWaitSync(std::move(id), std::move(flags), std::move(timeout), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_ClientWaitSync(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_CreateOpaqueFramebuffer__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_CreateOpaqueFramebuffer", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            OpaqueFramebufferOptions options{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(options)))))) {
                FatalError("Error deserializing 'OpaqueFramebufferOptions'");
                return MsgValueError;
            }
            // Sentinel = 'options'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 204735245)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OpaqueFramebufferOptions'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvCreateOpaqueFramebuffer(std::move(id), std::move(options), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_CreateOpaqueFramebuffer(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_DrawingBufferSize__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_DrawingBufferSize", OTHER);

            int32_t id__ = Id();
            uvec2 ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvDrawingBufferSize((&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_DrawingBufferSize(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_Finish__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_Finish", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<WebGLParent*>(this))->RecvFinish()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_Finish(id__);


            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetBufferParameter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetBufferParameter", OTHER);

            PickleIterator iter__{msg__};
            uint32_t target{};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(target)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'target'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148767368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetBufferParameter(std::move(target), std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetBufferParameter(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetCompileResult__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetCompileResult", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            CompileResult ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetCompileResult(std::move(id), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetCompileResult(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetError", OTHER);

            int32_t id__ = Id();
            uint32_t ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetError((&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetError(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetFragDataLocation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetFragDataLocation", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            string name{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(name)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69075362)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetFragDataLocation(std::move(id), std::move(name), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetFragDataLocation(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetFramebufferAttachmentParameter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetFramebufferAttachmentParameter", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            uint32_t attachment{};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(attachment)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'attachment'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 381420586)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetFramebufferAttachmentParameter(std::move(id), std::move(attachment), std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetFramebufferAttachmentParameter(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetFrontBuffer__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetFrontBuffer", OTHER);

            PickleIterator iter__{msg__};
            uint64_t fb{};
            bool vr{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fb)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'fb'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 19923145)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vr)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'vr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 23068905)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<SurfaceDescriptor> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetFrontBuffer(std::move(fb), std::move(vr), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetFrontBuffer(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetIndexedParameter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetIndexedParameter", OTHER);

            PickleIterator iter__{msg__};
            uint32_t target{};
            uint32_t index{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(target)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'target'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148767368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(index)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'index'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 104333849)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetIndexedParameter(std::move(target), std::move(index), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetIndexedParameter(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetInternalformatParameter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetInternalformatParameter", OTHER);

            PickleIterator iter__{msg__};
            uint32_t target{};
            uint32_t internalFormat{};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(target)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'target'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148767368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(internalFormat)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'internalFormat'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 730531271)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<Int32Vector> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetInternalformatParameter(std::move(target), std::move(internalFormat), std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetInternalformatParameter(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetLinkResult__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetLinkResult", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            LinkResult ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetLinkResult(std::move(id), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetLinkResult(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetNumber__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetNumber", OTHER);

            PickleIterator iter__{msg__};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetNumber(std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetNumber(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetQueryParameter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetQueryParameter", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetQueryParameter(std::move(id), std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetQueryParameter(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetRenderbufferParameter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetRenderbufferParameter", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetRenderbufferParameter(std::move(id), std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetRenderbufferParameter(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetSamplerParameter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetSamplerParameter", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetSamplerParameter(std::move(id), std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetSamplerParameter(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetShaderPrecisionFormat__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetShaderPrecisionFormat", OTHER);

            PickleIterator iter__{msg__};
            uint32_t shaderType{};
            uint32_t precisionType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(shaderType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'shaderType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 378274842)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(precisionType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'precisionType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 640812399)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<ShaderPrecisionFormat> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetShaderPrecisionFormat(std::move(shaderType), std::move(precisionType), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetShaderPrecisionFormat(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetString__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetString", OTHER);

            PickleIterator iter__{msg__};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<string> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetString(std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetString(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetTexParameter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetTexParameter", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetTexParameter(std::move(id), std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetTexParameter(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetUniform__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetUniform", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            uint32_t loc{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loc)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'loc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 42467647)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            GetUniformData ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetUniform(std::move(id), std::move(loc), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetUniform(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_GetVertexAttrib__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_GetVertexAttrib", OTHER);

            PickleIterator iter__{msg__};
            uint32_t index{};
            uint32_t pname{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(index)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'index'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 104333849)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pname)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pname'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105841170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            mozilla::Maybe<double> ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvGetVertexAttrib(std::move(index), std::move(pname), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_GetVertexAttrib(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_IsEnabled__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_IsEnabled", OTHER);

            PickleIterator iter__{msg__};
            uint32_t cap{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cap)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'cap'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 39715125)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvIsEnabled(std::move(cap), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_IsEnabled(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_OnMemoryPressure__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_OnMemoryPressure", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<WebGLParent*>(this))->RecvOnMemoryPressure()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_OnMemoryPressure(id__);


            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebGL::Msg_ValidateProgram__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_ValidateProgram", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool ret{};
            if ((!((static_cast<WebGLParent*>(this))->RecvValidateProgram(std::move(id), (&(ret)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebGL::Reply_ValidateProgram(id__);

            WriteIPDLParam(reply__, this, ret);
            // Sentinel = 'ret'
            (reply__)->WriteSentinel(43450700);

            if (mozilla::ipc::LoggingEnabledFor("PWebGLParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebGLParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebGLParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebGLParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PWebGLParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PWebGLParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebGL", PWebGLMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PWebGLParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
