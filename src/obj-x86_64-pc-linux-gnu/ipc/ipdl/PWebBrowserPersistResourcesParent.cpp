//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PWebBrowserPersistResourcesParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/PWebBrowserPersistDocumentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


MOZ_IMPLICIT PWebBrowserPersistResourcesParent::PWebBrowserPersistResourcesParent() :
    mozilla::ipc::IProtocol(PWebBrowserPersistResourcesMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWebBrowserPersistResourcesParent);
}

PWebBrowserPersistResourcesParent::~PWebBrowserPersistResourcesParent()
{
    MOZ_COUNT_DTOR(PWebBrowserPersistResourcesParent);
}

auto PWebBrowserPersistResourcesParent::Manager() const -> PWebBrowserPersistDocumentParent*
{
    return static_cast<PWebBrowserPersistDocumentParent*>(IProtocol::Manager());
}

auto PWebBrowserPersistResourcesParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebBrowserPersistResourcesParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebBrowserPersistResourcesParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebBrowserPersistResourcesParent::OnMessageReceived(const Message& msg__) -> PWebBrowserPersistResourcesParent::Result
{
    switch (msg__.type()) {
    case PWebBrowserPersistResources::Msg_VisitResource__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistResourcesParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistResourcesParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistResources::Msg_VisitResource", OTHER);

            PickleIterator iter__{msg__};
            nsCString aURI{};
            nsContentPolicyType aContentPolicyType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentPolicyType)))))) {
                FatalError("Error deserializing 'nsContentPolicyType'");
                return MsgValueError;
            }
            // Sentinel = 'aContentPolicyType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1145767759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsContentPolicyType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvVisitResource(std::move(aURI), std::move(aContentPolicyType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebBrowserPersistResources::Msg_VisitDocument__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistResourcesParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistResourcesParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistResources::Msg_VisitDocument", OTHER);

            PickleIterator iter__{msg__};
            PWebBrowserPersistDocumentParent* aSubDocument{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSubDocument)))))) {
                FatalError("Error deserializing 'PWebBrowserPersistDocument'");
                return MsgValueError;
            }
            if ((!((*((&(aSubDocument))))))) {
                FatalError("Error deserializing 'PWebBrowserPersistDocument'");
                return MsgValueError;
            }
            // Sentinel = 'aSubDocument'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 505677003)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebBrowserPersistDocument'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvVisitDocument(std::move(aSubDocument))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebBrowserPersistResources::Msg_VisitBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistResourcesParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistResourcesParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistResources::Msg_VisitBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvVisitBrowsingContext(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebBrowserPersistResources::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistResourcesParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistResourcesParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistResources::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWebBrowserPersistResourcesParent* actor{};
            nsresult aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWebBrowserPersistResources'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWebBrowserPersistResources'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebBrowserPersistResources'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__(std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWebBrowserPersistResourcesMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebBrowserPersistResourcesParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebBrowserPersistResourcesParent::Result
{
    return MsgNotKnown;
}

auto PWebBrowserPersistResourcesParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebBrowserPersistResourcesParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebBrowserPersistResourcesParent::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PWebBrowserPersistResourcesParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PWebBrowserPersistResourcesParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebBrowserPersistResources", PWebBrowserPersistResourcesMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PWebBrowserPersistResourcesParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
