//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/a11y/PDocAccessiblePlatformExtParent.h"
#include "mozilla/a11y/PDocAccessiblePlatformExtChild.h"
#include "mozilla/a11y/PDocAccessible.h"
#include "mozilla/a11y/PDocAccessibleParent.h"
#include "mozilla/a11y/PDocAccessibleChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace a11y {
namespace PDocAccessible {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::a11y::PDocAccessibleParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::a11y::PDocAccessibleChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_PDocAccessiblePlatformExtConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PDocAccessiblePlatformExtConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PDocAccessiblePlatformExtConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PDocAccessiblePlatformExtConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Shutdown(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Shutdown__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Event(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Event__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ShowEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShowEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_HideEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HideEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_StateChangeEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StateChangeEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CaretMoveEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CaretMoveEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_TextChangeEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TextChangeEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SelectionEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SelectionEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RoleChangedEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RoleChangedEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_VirtualCursorChangeEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_VirtualCursorChangeEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ScrollingEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScrollingEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AnnouncementEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AnnouncementEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_TextSelectionChangeEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TextSelectionChangeEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BindChildDoc(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BindChildDoc__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Batch(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Batch__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ConstructedInParentProcess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ConstructedInParentProcess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RestoreFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RestoreFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_State(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_State__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_State(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_State__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NativeState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NativeState__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NativeState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NativeState__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Name(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Name__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Name(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Name__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Value(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Value__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Value(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Value__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Help(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Help__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Help(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Help__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Description(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Description__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Description(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Description__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Attributes(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Attributes__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Attributes(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Attributes__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RelationByType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RelationByType__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RelationByType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RelationByType__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Relations(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Relations__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Relations(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Relations__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_IsSearchbox(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IsSearchbox__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_IsSearchbox(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_IsSearchbox__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_LandmarkRole(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LandmarkRole__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_LandmarkRole(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_LandmarkRole__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ARIARoleAtom(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ARIARoleAtom__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ARIARoleAtom(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ARIARoleAtom__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GroupPosition(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GroupPosition__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GroupPosition(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GroupPosition__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ScrollTo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScrollTo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ScrollToPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScrollToPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Announce(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Announce__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CaretLineNumber(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CaretLineNumber__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CaretLineNumber(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CaretLineNumber__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CaretOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CaretOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CaretOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CaretOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetCaretOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetCaretOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CharacterCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CharacterCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CharacterCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CharacterCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SelectionCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SelectionCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SelectionCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SelectionCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TextSubstring(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TextSubstring__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TextSubstring(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TextSubstring__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetTextAfterOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetTextAfterOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetTextAfterOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetTextAfterOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetTextAtOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetTextAtOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetTextAtOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetTextAtOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetTextBeforeOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetTextBeforeOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetTextBeforeOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetTextBeforeOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CharAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CharAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CharAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CharAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TextAttributes(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TextAttributes__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TextAttributes(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TextAttributes__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DefaultTextAttributes(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DefaultTextAttributes__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DefaultTextAttributes(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DefaultTextAttributes__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TextBounds(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TextBounds__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TextBounds(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TextBounds__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CharBounds(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CharBounds__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CharBounds(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CharBounds__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_OffsetAtPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OffsetAtPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_OffsetAtPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_OffsetAtPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SelectionBoundsAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SelectionBoundsAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SelectionBoundsAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SelectionBoundsAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetSelectionBoundsAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetSelectionBoundsAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SetSelectionBoundsAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SetSelectionBoundsAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AddToSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddToSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AddToSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AddToSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RemoveFromSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveFromSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RemoveFromSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RemoveFromSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ScrollSubstringTo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScrollSubstringTo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ScrollSubstringToPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScrollSubstringToPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Text(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Text__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Text(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Text__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ReplaceText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplaceText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ReplaceText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ReplaceText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InsertText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InsertText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_InsertText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_InsertText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CopyText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CopyText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CopyText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CopyText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CutText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CutText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CutText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CutText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DeleteText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DeleteText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DeleteText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DeleteText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PasteText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PasteText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PasteText(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PasteText__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ImagePosition(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ImagePosition__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ImagePosition(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ImagePosition__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ImageSize(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ImageSize__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ImageSize(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ImageSize__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_StartOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StartOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_StartOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_StartOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_EndOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EndOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_EndOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_EndOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_IsLinkValid(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IsLinkValid__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_IsLinkValid(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_IsLinkValid__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AnchorCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AnchorCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AnchorCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AnchorCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AnchorURIAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AnchorURIAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AnchorURIAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AnchorURIAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AnchorAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AnchorAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AnchorAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AnchorAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_LinkCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LinkCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_LinkCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_LinkCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_LinkAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LinkAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_LinkAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_LinkAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_LinkIndexOf(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LinkIndexOf__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_LinkIndexOf(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_LinkIndexOf__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_LinkIndexAtOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LinkIndexAtOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_LinkIndexAtOffset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_LinkIndexAtOffset__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableOfACell(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableOfACell__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableOfACell(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableOfACell__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ColIdx(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ColIdx__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ColIdx(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ColIdx__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RowIdx(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RowIdx__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RowIdx(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RowIdx__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetPosition(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetPosition__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetPosition(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetPosition__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ColExtent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ColExtent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ColExtent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ColExtent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RowExtent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RowExtent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RowExtent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RowExtent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetColRowExtents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetColRowExtents__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetColRowExtents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetColRowExtents__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ColHeaderCells(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ColHeaderCells__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ColHeaderCells(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ColHeaderCells__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RowHeaderCells(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RowHeaderCells__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RowHeaderCells(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RowHeaderCells__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_IsCellSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IsCellSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_IsCellSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_IsCellSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableCaption(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableCaption__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableCaption(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableCaption__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSummary(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSummary__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSummary(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSummary__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableColumnCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableColumnCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableColumnCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableColumnCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableRowCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableRowCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableRowCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableRowCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableCellAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableCellAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableCellAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableCellAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableCellIndexAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableCellIndexAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableCellIndexAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableCellIndexAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableColumnIndexAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableColumnIndexAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableColumnIndexAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableColumnIndexAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableRowIndexAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableRowIndexAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableRowIndexAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableRowIndexAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableRowAndColumnIndicesAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableRowAndColumnIndicesAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableRowAndColumnIndicesAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableRowAndColumnIndicesAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableColumnExtentAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableColumnExtentAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableColumnExtentAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableColumnExtentAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableRowExtentAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableRowExtentAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableRowExtentAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableRowExtentAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableColumnDescription(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableColumnDescription__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableColumnDescription(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableColumnDescription__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableRowDescription(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableRowDescription__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableRowDescription(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableRowDescription__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableColumnSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableColumnSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableColumnSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableColumnSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableRowSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableRowSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableRowSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableRowSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableCellSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableCellSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableCellSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableCellSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectedCellCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectedCellCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectedCellCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectedCellCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectedColumnCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectedColumnCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectedColumnCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectedColumnCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectedRowCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectedRowCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectedRowCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectedRowCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectedCells(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectedCells__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectedCells(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectedCells__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectedCellIndices(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectedCellIndices__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectedCellIndices(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectedCellIndices__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectedColumnIndices(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectedColumnIndices__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectedColumnIndices(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectedColumnIndices__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectedRowIndices(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectedRowIndices__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectedRowIndices(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectedRowIndices__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectColumn(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectColumn__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectColumn(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectColumn__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableSelectRow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableSelectRow__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableSelectRow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableSelectRow__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableUnselectColumn(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableUnselectColumn__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableUnselectColumn(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableUnselectColumn__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableUnselectRow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableUnselectRow__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableUnselectRow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableUnselectRow__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TableIsProbablyForLayout(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TableIsProbablyForLayout__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_TableIsProbablyForLayout(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_TableIsProbablyForLayout__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AtkTableColumnHeader(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AtkTableColumnHeader__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AtkTableColumnHeader(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AtkTableColumnHeader__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AtkTableRowHeader(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AtkTableRowHeader__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AtkTableRowHeader(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AtkTableRowHeader__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SelectedItems(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SelectedItems__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SelectedItems(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SelectedItems__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SelectedItemCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SelectedItemCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SelectedItemCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SelectedItemCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetSelectedItem(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetSelectedItem__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetSelectedItem(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetSelectedItem__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_IsItemSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IsItemSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_IsItemSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_IsItemSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AddItemToSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddItemToSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AddItemToSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AddItemToSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RemoveItemFromSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveItemFromSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RemoveItemFromSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RemoveItemFromSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SelectAll(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SelectAll__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SelectAll(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SelectAll__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_UnselectAll(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnselectAll__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_UnselectAll(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_UnselectAll__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TakeSelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TakeSelection__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetSelected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetSelected__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DoAction(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DoAction__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DoAction(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DoAction__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ActionCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ActionCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ActionCount(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ActionCount__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ActionDescriptionAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ActionDescriptionAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ActionDescriptionAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ActionDescriptionAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ActionNameAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ActionNameAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ActionNameAt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ActionNameAt__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AccessKey(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AccessKey__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AccessKey(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AccessKey__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_KeyboardShortcut(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_KeyboardShortcut__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_KeyboardShortcut(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_KeyboardShortcut__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AtkKeyBinding(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AtkKeyBinding__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AtkKeyBinding(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AtkKeyBinding__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CurValue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CurValue__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CurValue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CurValue__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetCurValue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetCurValue__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SetCurValue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SetCurValue__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_MinValue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MinValue__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_MinValue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_MinValue__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_MaxValue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MaxValue__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_MaxValue(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_MaxValue__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Step(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Step__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Step(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Step__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_TakeFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_TakeFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FocusedChild(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FocusedChild__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_FocusedChild(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_FocusedChild__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Language(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Language__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Language(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Language__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DocType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DocType__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DocType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DocType__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Title(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Title__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Title(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Title__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_URL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_URL__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_URL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_URL__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_MimeType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MimeType__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_MimeType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_MimeType__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_URLDocTypeMimeType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_URLDocTypeMimeType__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_URLDocTypeMimeType(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_URLDocTypeMimeType__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ChildAtPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ChildAtPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ChildAtPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ChildAtPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Extents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Extents__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Extents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Extents__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ExtentsInCSSPixels(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ExtentsInCSSPixels__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ExtentsInCSSPixels(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ExtentsInCSSPixels__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DOMNodeID(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DOMNodeID__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DOMNodeID(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DOMNodeID__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PDocAccessible
} // namespace a11y
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct AccessibleData|
//
namespace mozilla {
namespace a11y {
auto AccessibleData::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(AccessibleData, Interfaces_) - offsetof(AccessibleData, ChildrenCount_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::a11y::AccessibleData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Role());
    // Sentinel = 'Role'
    (aMsg)->WriteSentinel(64356755);
    (aMsg)->WriteBytes((&((aVar).ID())), 8);
    // Sentinel = 'ID'
    (aMsg)->WriteSentinel(14155918);
    (aMsg)->WriteBytes((&((aVar).ChildrenCount())), 8);
    // Sentinel = 'ChildrenCount | Interfaces'
    (aMsg)->WriteSentinel(2236221939);
}

auto IPDLParamTraits<mozilla::a11y::AccessibleData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Role())))))) {
        aActor->FatalError("Error deserializing 'Role' (role) member of 'AccessibleData'");
        return false;
    }
    // Sentinel = 'Role'
    if ((!((aMsg)->ReadSentinel(aIter, 64356755)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Role' (role) member of 'AccessibleData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->ID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'ID'
    if ((!((aMsg)->ReadSentinel(aIter, 14155918)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->ChildrenCount())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'ChildrenCount | Interfaces'
    if ((!((aMsg)->ReadSentinel(aIter, 2236221939)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OriginDocument|
//
namespace mozilla {
namespace a11y {
auto OriginDocument::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TPDocAccessibleParent:
        {
            (ptr_PDocAccessibleParent())->~PDocAccessibleParent__tdef();
            break;
        }
    case TPDocAccessibleChild:
        {
            (ptr_PDocAccessibleChild())->~PDocAccessibleChild__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OriginDocument::OriginDocument(PDocAccessibleParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PDocAccessibleParent()) PDocAccessibleParent*(const_cast<PDocAccessibleParent*>(aOther));
    mType = TPDocAccessibleParent;
}

MOZ_IMPLICIT OriginDocument::OriginDocument(PDocAccessibleChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PDocAccessibleChild()) PDocAccessibleChild*(const_cast<PDocAccessibleChild*>(aOther));
    mType = TPDocAccessibleChild;
}

MOZ_IMPLICIT OriginDocument::OriginDocument(const OriginDocument& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TPDocAccessibleParent:
        {
            new (mozilla::KnownNotNull, ptr_PDocAccessibleParent()) PDocAccessibleParent*(const_cast<PDocAccessibleParent*>((aOther).get_PDocAccessibleParent()));
            break;
        }
    case TPDocAccessibleChild:
        {
            new (mozilla::KnownNotNull, ptr_PDocAccessibleChild()) PDocAccessibleChild*(const_cast<PDocAccessibleChild*>((aOther).get_PDocAccessibleChild()));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT OriginDocument::OriginDocument(OriginDocument&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TPDocAccessibleParent:
        {
            new (mozilla::KnownNotNull, ptr_PDocAccessibleParent()) PDocAccessibleParent*(const_cast<PDocAccessibleParent*>(std::move((aOther).get_PDocAccessibleParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPDocAccessibleChild:
        {
            new (mozilla::KnownNotNull, ptr_PDocAccessibleChild()) PDocAccessibleChild*(const_cast<PDocAccessibleChild*>(std::move((aOther).get_PDocAccessibleChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

OriginDocument::~OriginDocument()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OriginDocument::operator=(PDocAccessibleParent* aRhs) -> OriginDocument&
{
    if (MaybeDestroy(TPDocAccessibleParent)) {
        new (mozilla::KnownNotNull, ptr_PDocAccessibleParent()) PDocAccessibleParent*;
    }
    (*(ptr_PDocAccessibleParent())) = const_cast<PDocAccessibleParent*>(aRhs);
    mType = TPDocAccessibleParent;
    return (*(this));
}

auto OriginDocument::operator=(PDocAccessibleChild* aRhs) -> OriginDocument&
{
    if (MaybeDestroy(TPDocAccessibleChild)) {
        new (mozilla::KnownNotNull, ptr_PDocAccessibleChild()) PDocAccessibleChild*;
    }
    (*(ptr_PDocAccessibleChild())) = const_cast<PDocAccessibleChild*>(aRhs);
    mType = TPDocAccessibleChild;
    return (*(this));
}

auto OriginDocument::operator=(const OriginDocument& aRhs) -> OriginDocument&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPDocAccessibleParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PDocAccessibleParent()) PDocAccessibleParent*;
            }
            (*(ptr_PDocAccessibleParent())) = const_cast<PDocAccessibleParent*>((aRhs).get_PDocAccessibleParent());
            break;
        }
    case TPDocAccessibleChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PDocAccessibleChild()) PDocAccessibleChild*;
            }
            (*(ptr_PDocAccessibleChild())) = const_cast<PDocAccessibleChild*>((aRhs).get_PDocAccessibleChild());
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OriginDocument::operator=(OriginDocument&& aRhs) -> OriginDocument&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPDocAccessibleParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PDocAccessibleParent()) PDocAccessibleParent*;
            }
            (*(ptr_PDocAccessibleParent())) = const_cast<PDocAccessibleParent*>(std::move((aRhs).get_PDocAccessibleParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPDocAccessibleChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PDocAccessibleChild()) PDocAccessibleChild*;
            }
            (*(ptr_PDocAccessibleChild())) = const_cast<PDocAccessibleChild*>(std::move((aRhs).get_PDocAccessibleChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::a11y::OriginDocument>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::a11y::OriginDocument union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'OriginDocument'
    (aMsg)->WriteSentinel(695338408);

    switch (type) {
    case union__::TPDocAccessibleParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PDocAccessibleParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PDocAccessibleParent());
                // Sentinel = 'TPDocAccessibleParent'
                (aMsg)->WriteSentinel(1428031507);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPDocAccessibleChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PDocAccessibleChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PDocAccessibleChild());
                // Sentinel = 'TPDocAccessibleChild'
                (aMsg)->WriteSentinel(1288636301);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::a11y::OriginDocument>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::a11y::OriginDocument union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union OriginDocument");
        return false;
    }
    // Sentinel = 'OriginDocument'
    if ((!((aMsg)->ReadSentinel(aIter, 695338408)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union OriginDocument");
        return false;
    }

    switch (type) {
    case union__::TPDocAccessibleParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::a11y::PDocAccessibleChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PDocAccessibleChild())))))) {
                aActor->FatalError("Error deserializing variant TPDocAccessibleParent of union OriginDocument");
                return false;
            }
            if ((!((*((&((aVar)->get_PDocAccessibleChild()))))))) {
                aActor->FatalError("Error deserializing variant TPDocAccessibleParent of union OriginDocument");
                return false;
            }
            // Sentinel = 'TPDocAccessibleParent'
            if ((!((aMsg)->ReadSentinel(aIter, 1428031507)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPDocAccessibleParent of union OriginDocument");
                return false;
            }
            return true;
        }
    case union__::TPDocAccessibleChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::a11y::PDocAccessibleParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PDocAccessibleParent())))))) {
                aActor->FatalError("Error deserializing variant TPDocAccessibleChild of union OriginDocument");
                return false;
            }
            if ((!((*((&((aVar)->get_PDocAccessibleParent()))))))) {
                aActor->FatalError("Error deserializing variant TPDocAccessibleChild of union OriginDocument");
                return false;
            }
            // Sentinel = 'TPDocAccessibleChild'
            if ((!((aMsg)->ReadSentinel(aIter, 1288636301)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPDocAccessibleChild of union OriginDocument");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct BatchData|
//
namespace mozilla {
namespace a11y {
auto BatchData::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(BatchData, Step_) - offsetof(BatchData, ID_)) == 40,
        "Bad assumptions about field layout!");
}

} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::a11y::BatchData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Document());
    // Sentinel = 'Document'
    (aMsg)->WriteSentinel(234816320);
    WriteIPDLParam(aMsg, aActor, (aVar).Bounds());
    // Sentinel = 'Bounds'
    (aMsg)->WriteSentinel(135660140);
    WriteIPDLParam(aMsg, aActor, (aVar).Name());
    // Sentinel = 'Name'
    (aMsg)->WriteSentinel(60686722);
    WriteIPDLParam(aMsg, aActor, (aVar).TextValue());
    // Sentinel = 'TextValue'
    (aMsg)->WriteSentinel(300549027);
    WriteIPDLParam(aMsg, aActor, (aVar).DOMNodeID());
    // Sentinel = 'DOMNodeID'
    (aMsg)->WriteSentinel(244581108);
    WriteIPDLParam(aMsg, aActor, (aVar).Description());
    // Sentinel = 'Description'
    (aMsg)->WriteSentinel(438764677);
    WriteIPDLParam(aMsg, aActor, (aVar).Attributes());
    // Sentinel = 'Attributes'
    (aMsg)->WriteSentinel(372442152);
    (aMsg)->WriteBytes((&((aVar).ID())), 48);
    // Sentinel = 'ID | State | CurValue | MinValue | MaxValue | Step'
    (aMsg)->WriteSentinel(2898137410);
    (aMsg)->WriteBytes((&((aVar).ActionCount())), 1);
    // Sentinel = 'ActionCount'
    (aMsg)->WriteSentinel(426181736);
}

auto IPDLParamTraits<mozilla::a11y::BatchData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Document())))))) {
        aActor->FatalError("Error deserializing 'Document' (OriginDocument) member of 'BatchData'");
        return false;
    }
    // Sentinel = 'Document'
    if ((!((aMsg)->ReadSentinel(aIter, 234816320)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Document' (OriginDocument) member of 'BatchData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Bounds())))))) {
        aActor->FatalError("Error deserializing 'Bounds' (nsIntRect) member of 'BatchData'");
        return false;
    }
    // Sentinel = 'Bounds'
    if ((!((aMsg)->ReadSentinel(aIter, 135660140)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Bounds' (nsIntRect) member of 'BatchData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Name())))))) {
        aActor->FatalError("Error deserializing 'Name' (nsString) member of 'BatchData'");
        return false;
    }
    // Sentinel = 'Name'
    if ((!((aMsg)->ReadSentinel(aIter, 60686722)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Name' (nsString) member of 'BatchData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->TextValue())))))) {
        aActor->FatalError("Error deserializing 'TextValue' (nsString) member of 'BatchData'");
        return false;
    }
    // Sentinel = 'TextValue'
    if ((!((aMsg)->ReadSentinel(aIter, 300549027)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'TextValue' (nsString) member of 'BatchData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->DOMNodeID())))))) {
        aActor->FatalError("Error deserializing 'DOMNodeID' (nsString) member of 'BatchData'");
        return false;
    }
    // Sentinel = 'DOMNodeID'
    if ((!((aMsg)->ReadSentinel(aIter, 244581108)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'DOMNodeID' (nsString) member of 'BatchData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Description())))))) {
        aActor->FatalError("Error deserializing 'Description' (nsString) member of 'BatchData'");
        return false;
    }
    // Sentinel = 'Description'
    if ((!((aMsg)->ReadSentinel(aIter, 438764677)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Description' (nsString) member of 'BatchData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Attributes())))))) {
        aActor->FatalError("Error deserializing 'Attributes' (Attribute[]) member of 'BatchData'");
        return false;
    }
    // Sentinel = 'Attributes'
    if ((!((aMsg)->ReadSentinel(aIter, 372442152)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Attributes' (Attribute[]) member of 'BatchData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->ID())), 48)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'ID | State | CurValue | MinValue | MaxValue | Step'
    if ((!((aMsg)->ReadSentinel(aIter, 2898137410)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->ActionCount())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'ActionCount'
    if ((!((aMsg)->ReadSentinel(aIter, 426181736)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ShowEventData|
//
namespace mozilla {
namespace a11y {
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::a11y::ShowEventData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).NewTree());
    // Sentinel = 'NewTree'
    (aMsg)->WriteSentinel(179241659);
    WriteIPDLParam(aMsg, aActor, (aVar).EventSuppressed());
    // Sentinel = 'EventSuppressed'
    (aMsg)->WriteSentinel(817235505);
    (aMsg)->WriteBytes((&((aVar).ID())), 8);
    // Sentinel = 'ID'
    (aMsg)->WriteSentinel(14155918);
    (aMsg)->WriteBytes((&((aVar).Idx())), 4);
    // Sentinel = 'Idx'
    (aMsg)->WriteSentinel(35520806);
}

auto IPDLParamTraits<mozilla::a11y::ShowEventData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->NewTree())))))) {
        aActor->FatalError("Error deserializing 'NewTree' (AccessibleData[]) member of 'ShowEventData'");
        return false;
    }
    // Sentinel = 'NewTree'
    if ((!((aMsg)->ReadSentinel(aIter, 179241659)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NewTree' (AccessibleData[]) member of 'ShowEventData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->EventSuppressed())))))) {
        aActor->FatalError("Error deserializing 'EventSuppressed' (bool) member of 'ShowEventData'");
        return false;
    }
    // Sentinel = 'EventSuppressed'
    if ((!((aMsg)->ReadSentinel(aIter, 817235505)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'EventSuppressed' (bool) member of 'ShowEventData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->ID())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'ID'
    if ((!((aMsg)->ReadSentinel(aIter, 14155918)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->Idx())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'Idx'
    if ((!((aMsg)->ReadSentinel(aIter, 35520806)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RelationTargets|
//
namespace mozilla {
namespace a11y {
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::a11y::RelationTargets>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).Targets());
    // Sentinel = 'Targets'
    (aMsg)->WriteSentinel(184091355);
    (aMsg)->WriteBytes((&((aVar).Type())), 4);
    // Sentinel = 'Type'
    (aMsg)->WriteSentinel(67371427);
}

auto IPDLParamTraits<mozilla::a11y::RelationTargets>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Targets())))))) {
        aActor->FatalError("Error deserializing 'Targets' (uint64_t[]) member of 'RelationTargets'");
        return false;
    }
    // Sentinel = 'Targets'
    if ((!((aMsg)->ReadSentinel(aIter, 184091355)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Targets' (uint64_t[]) member of 'RelationTargets'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->Type())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'Type'
    if ((!((aMsg)->ReadSentinel(aIter, 67371427)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TextRangeData|
//
namespace mozilla {
namespace a11y {
auto TextRangeData::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(TextRangeData, EndID_) - offsetof(TextRangeData, StartID_)) == 8,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(TextRangeData, EndOffset_) - offsetof(TextRangeData, StartOffset_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::a11y::TextRangeData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).StartID())), 16);
    // Sentinel = 'StartID | EndID'
    (aMsg)->WriteSentinel(704251132);
    (aMsg)->WriteBytes((&((aVar).StartOffset())), 8);
    // Sentinel = 'StartOffset | EndOffset'
    (aMsg)->WriteSentinel(1754007728);
}

auto IPDLParamTraits<mozilla::a11y::TextRangeData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->StartID())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'StartID | EndID'
    if ((!((aMsg)->ReadSentinel(aIter, 704251132)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->StartOffset())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'StartOffset | EndOffset'
    if ((!((aMsg)->ReadSentinel(aIter, 1754007728)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
