//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PProcessHangMonitorParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/TabMessageUtils.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PProcessHangMonitorParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PProcessHangMonitorParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PProcessHangMonitorParent::EnteredCxxStack() -> void
{
}

auto PProcessHangMonitorParent::ExitedCxxStack() -> void
{
}

auto PProcessHangMonitorParent::EnteredCall() -> void
{
}

auto PProcessHangMonitorParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PProcessHangMonitorParent::PProcessHangMonitorParent() :
    mozilla::ipc::IToplevelProtocol("PProcessHangMonitorParent", PProcessHangMonitorMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PProcessHangMonitorParent);
}

PProcessHangMonitorParent::~PProcessHangMonitorParent()
{
    MOZ_COUNT_DTOR(PProcessHangMonitorParent);
}

auto PProcessHangMonitorParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PProcessHangMonitorParent::SendTerminateScript(const bool& aTerminateGlobal) -> bool
{
    IPC::Message* msg__ = PProcessHangMonitor::Msg_TerminateScript(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aTerminateGlobal);
    // Sentinel = 'aTerminateGlobal'
    (msg__)->WriteSentinel(904463964);




    if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProcessHangMonitorParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_TerminateScript", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProcessHangMonitorParent::SendBeginStartingDebugger() -> bool
{
    IPC::Message* msg__ = PProcessHangMonitor::Msg_BeginStartingDebugger(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProcessHangMonitorParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_BeginStartingDebugger", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProcessHangMonitorParent::SendEndStartingDebugger() -> bool
{
    IPC::Message* msg__ = PProcessHangMonitor::Msg_EndStartingDebugger(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProcessHangMonitorParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_EndStartingDebugger", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProcessHangMonitorParent::SendPaintWhileInterruptingJS(
        const TabId& tabId,
        const LayersObserverEpoch& aEpoch) -> bool
{
    IPC::Message* msg__ = PProcessHangMonitor::Msg_PaintWhileInterruptingJS(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, tabId);
    // Sentinel = 'tabId'
    (msg__)->WriteSentinel(99156453);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProcessHangMonitorParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_PaintWhileInterruptingJS", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProcessHangMonitorParent::SendCancelContentJSExecutionIfRunning(
        const TabId& tabId,
        const NavigationType& aNavigationType,
        const int32_t& aNavigationIndex,
        const mozilla::Maybe<nsCString>& aNavigationURI,
        const int32_t& aEpoch) -> bool
{
    IPC::Message* msg__ = PProcessHangMonitor::Msg_CancelContentJSExecutionIfRunning(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, tabId);
    // Sentinel = 'tabId'
    (msg__)->WriteSentinel(99156453);
    WriteIPDLParam(msg__, this, aNavigationType);
    // Sentinel = 'aNavigationType'
    (msg__)->WriteSentinel(799540756);
    WriteIPDLParam(msg__, this, aNavigationIndex);
    // Sentinel = 'aNavigationIndex'
    (msg__)->WriteSentinel(900531818);
    WriteIPDLParam(msg__, this, aNavigationURI);
    // Sentinel = 'aNavigationURI'
    (msg__)->WriteSentinel(690095458);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PProcessHangMonitorParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_CancelContentJSExecutionIfRunning", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PProcessHangMonitorParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PProcessHangMonitorParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PProcessHangMonitorParent::OnMessageReceived(const Message& msg__) -> PProcessHangMonitorParent::Result
{
    switch (msg__.type()) {
    case PProcessHangMonitor::Msg_HangEvidence__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProcessHangMonitorParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_HangEvidence", OTHER);

            PickleIterator iter__{msg__};
            HangData data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'HangData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HangData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvHangEvidence(std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PProcessHangMonitor::Msg_ClearHang__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PProcessHangMonitorParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PProcessHangMonitorParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PProcessHangMonitor::Msg_ClearHang", OTHER);

            if ((!((this)->RecvClearHang()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PProcessHangMonitorParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PProcessHangMonitorParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PProcessHangMonitorParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PProcessHangMonitorParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PProcessHangMonitorParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PProcessHangMonitorParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PProcessHangMonitorParent::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PProcessHangMonitorParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PProcessHangMonitorParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PProcessHangMonitor", PProcessHangMonitorMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PProcessHangMonitorParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
