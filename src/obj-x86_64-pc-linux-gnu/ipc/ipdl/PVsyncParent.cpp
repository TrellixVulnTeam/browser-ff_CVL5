//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PVsyncParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/TimeStamp.h"
#include "mozilla/dom/VsyncParent.h"
#include "mozilla/layers/LayersMessageUtils.h"

#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/dom/PBrowserParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PVsyncParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PVsyncParent::PVsyncParent() :
    mozilla::ipc::IProtocol(PVsyncMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PVsyncParent);
}

PVsyncParent::~PVsyncParent()
{
    MOZ_COUNT_DTOR(PVsyncParent);
}

auto PVsyncParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PVsyncParent::SendNotify(
        const VsyncEvent& aVsync,
        const float& aVsyncRate) -> bool
{
    IPC::Message* msg__ = PVsync::Msg_Notify(Id());

    WriteIPDLParam(msg__, this, aVsync);
    // Sentinel = 'aVsync'
    (msg__)->WriteSentinel(141558389);
    WriteIPDLParam(msg__, this, aVsyncRate);
    // Sentinel = 'aVsyncRate'
    (msg__)->WriteSentinel(368837633);




    if (mozilla::ipc::LoggingEnabledFor("PVsyncParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVsyncParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVsync::Msg_Notify", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVsyncParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PVsyncParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PVsyncParent::OnMessageReceived(const Message& msg__) -> PVsyncParent::Result
{
    switch (msg__.type()) {
    case PVsync::Msg_Observe__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVsyncParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVsyncParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVsync::Msg_Observe", OTHER);

            if ((!((static_cast<VsyncParent*>(this))->RecvObserve()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVsync::Msg_Unobserve__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVsyncParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVsyncParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVsync::Msg_Unobserve", OTHER);

            if ((!((static_cast<VsyncParent*>(this))->RecvUnobserve()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVsync::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVsyncParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVsyncParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVsync::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PVsyncParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PVsync'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PVsync'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PVsync'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VsyncParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PVsyncMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PVsyncParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PVsyncParent::Result
{
    return MsgNotKnown;
}

auto PVsyncParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PVsyncParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVsyncParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PVsyncParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PVsyncParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PVsync", PVsyncMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PVsyncParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
