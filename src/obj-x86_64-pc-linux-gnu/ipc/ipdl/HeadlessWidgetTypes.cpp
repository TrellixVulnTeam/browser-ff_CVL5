//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/widget/HeadlessWidgetTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HeadlessCompositorWidgetInitData|
//
namespace mozilla {
namespace widget {
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::HeadlessCompositorWidgetInitData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).InitialClientSize());
    // Sentinel = 'InitialClientSize'
    (aMsg)->WriteSentinel(1006307013);
}

auto IPDLParamTraits<mozilla::widget::HeadlessCompositorWidgetInitData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->InitialClientSize())))))) {
        aActor->FatalError("Error deserializing 'InitialClientSize' (LayoutDeviceIntSize) member of 'HeadlessCompositorWidgetInitData'");
        return false;
    }
    // Sentinel = 'InitialClientSize'
    if ((!((aMsg)->ReadSentinel(aIter, 1006307013)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'InitialClientSize' (LayoutDeviceIntSize) member of 'HeadlessCompositorWidgetInitData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
