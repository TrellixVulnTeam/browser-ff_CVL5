//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PWebGLChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/dom/WebGLChild.h"

#include "mozilla/layers/PCompositorBridgeChild.h"
#include "mozilla/layers/PLayerTransactionChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PWebGLChild::PWebGLChild() :
    mozilla::ipc::IProtocol(PWebGLMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PWebGLChild);
}

PWebGLChild::~PWebGLChild()
{
    MOZ_COUNT_DTOR(PWebGLChild);
}

auto PWebGLChild::Manager() const -> PCompositorBridgeChild*
{
    return static_cast<PCompositorBridgeChild*>(IProtocol::Manager());
}

auto PWebGLChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebGLChild::SendInitialize(
        const InitContextDesc& desc,
        InitContextResult* res) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_Initialize(Id());

    WriteIPDLParam(msg__, this, desc);
    // Sentinel = 'desc'
    (msg__)->WriteSentinel(67895712);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_Initialize", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_Initialize", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, res)))) {
        FatalError("Error deserializing 'InitContextResult'");
        return false;
    }
    // Sentinel = 'res'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43385163)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'InitContextResult'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::Send__delete__(PWebGLChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PWebGL::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PWebGLMsgStart, actor);
    return sendok__;
}

auto PWebGLChild::SendDispatchCommands(
        Shmem&& commands,
        const uint64_t& size) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_DispatchCommands(Id());

    WriteIPDLParam(msg__, this, std::move(commands));
    // Sentinel = 'commands'
    (msg__)->WriteSentinel(249627475);
    WriteIPDLParam(msg__, this, size);
    // Sentinel = 'size'
    (msg__)->WriteSentinel(73662908);




    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_DispatchCommands", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGLChild::SendGetBufferSubData(
        const uint32_t& target,
        const uint64_t& srcByteOffset,
        const uint64_t& byteSize,
        Shmem* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetBufferSubData(Id());

    WriteIPDLParam(msg__, this, target);
    // Sentinel = 'target'
    (msg__)->WriteSentinel(148767368);
    WriteIPDLParam(msg__, this, srcByteOffset);
    // Sentinel = 'srcByteOffset'
    (msg__)->WriteSentinel(616301892);
    WriteIPDLParam(msg__, this, byteSize);
    // Sentinel = 'byteSize'
    (msg__)->WriteSentinel(251134800);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetBufferSubData", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetBufferSubData", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'Shmem'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetFrontBufferSnapshot(FrontBufferSnapshotIpc* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetFrontBufferSnapshot(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetFrontBufferSnapshot", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetFrontBufferSnapshot", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'FrontBufferSnapshotIpc'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'FrontBufferSnapshotIpc'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendReadPixels(
        const ReadPixelsDesc& desc,
        const uint64_t& maxBytes,
        ReadPixelsResultIpc* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_ReadPixels(Id());

    WriteIPDLParam(msg__, this, desc);
    // Sentinel = 'desc'
    (msg__)->WriteSentinel(67895712);
    WriteIPDLParam(msg__, this, maxBytes);
    // Sentinel = 'maxBytes'
    (msg__)->WriteSentinel(246285134);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_ReadPixels", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_ReadPixels", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'ReadPixelsResultIpc'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ReadPixelsResultIpc'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendCheckFramebufferStatus(
        const uint32_t& target,
        uint32_t* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_CheckFramebufferStatus(Id());

    WriteIPDLParam(msg__, this, target);
    // Sentinel = 'target'
    (msg__)->WriteSentinel(148767368);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_CheckFramebufferStatus", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_CheckFramebufferStatus", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendClientWaitSync(
        const uint64_t& id,
        const uint32_t& flags,
        const uint64_t& timeout,
        uint32_t* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_ClientWaitSync(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, flags);
    // Sentinel = 'flags'
    (msg__)->WriteSentinel(102171150);
    WriteIPDLParam(msg__, this, timeout);
    // Sentinel = 'timeout'
    (msg__)->WriteSentinel(201917192);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_ClientWaitSync", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_ClientWaitSync", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendCreateOpaqueFramebuffer(
        const uint64_t& id,
        const OpaqueFramebufferOptions& options,
        bool* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_CreateOpaqueFramebuffer(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, options);
    // Sentinel = 'options'
    (msg__)->WriteSentinel(204735245);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_CreateOpaqueFramebuffer", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_CreateOpaqueFramebuffer", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendDrawingBufferSize(uvec2* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_DrawingBufferSize(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_DrawingBufferSize", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_DrawingBufferSize", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'uvec2'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uvec2'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendFinish() -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_Finish(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_Finish", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_Finish", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PWebGLChild::SendGetBufferParameter(
        const uint32_t& target,
        const uint32_t& pname,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetBufferParameter(Id());

    WriteIPDLParam(msg__, this, target);
    // Sentinel = 'target'
    (msg__)->WriteSentinel(148767368);
    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetBufferParameter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetBufferParameter", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetCompileResult(
        const uint64_t& id,
        CompileResult* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetCompileResult(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetCompileResult", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetCompileResult", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'CompileResult'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'CompileResult'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetError(uint32_t* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetError(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetError", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetError", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetFragDataLocation(
        const uint64_t& id,
        const string& name,
        int32_t* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetFragDataLocation(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetFragDataLocation", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetFragDataLocation", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetFramebufferAttachmentParameter(
        const uint64_t& id,
        const uint32_t& attachment,
        const uint32_t& pname,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetFramebufferAttachmentParameter(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, attachment);
    // Sentinel = 'attachment'
    (msg__)->WriteSentinel(381420586);
    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetFramebufferAttachmentParameter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetFramebufferAttachmentParameter", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetFrontBuffer(
        const uint64_t& fb,
        const bool& vr,
        mozilla::Maybe<SurfaceDescriptor>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetFrontBuffer(Id());

    WriteIPDLParam(msg__, this, fb);
    // Sentinel = 'fb'
    (msg__)->WriteSentinel(19923145);
    WriteIPDLParam(msg__, this, vr);
    // Sentinel = 'vr'
    (msg__)->WriteSentinel(23068905);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetFrontBuffer", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetFrontBuffer", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'SurfaceDescriptor?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptor?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetIndexedParameter(
        const uint32_t& target,
        const uint32_t& index,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetIndexedParameter(Id());

    WriteIPDLParam(msg__, this, target);
    // Sentinel = 'target'
    (msg__)->WriteSentinel(148767368);
    WriteIPDLParam(msg__, this, index);
    // Sentinel = 'index'
    (msg__)->WriteSentinel(104333849);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetIndexedParameter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetIndexedParameter", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetInternalformatParameter(
        const uint32_t& target,
        const uint32_t& internalFormat,
        const uint32_t& pname,
        mozilla::Maybe<Int32Vector>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetInternalformatParameter(Id());

    WriteIPDLParam(msg__, this, target);
    // Sentinel = 'target'
    (msg__)->WriteSentinel(148767368);
    WriteIPDLParam(msg__, this, internalFormat);
    // Sentinel = 'internalFormat'
    (msg__)->WriteSentinel(730531271);
    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetInternalformatParameter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetInternalformatParameter", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'Int32Vector?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Int32Vector?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetLinkResult(
        const uint64_t& id,
        LinkResult* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetLinkResult(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetLinkResult", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetLinkResult", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'LinkResult'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'LinkResult'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetNumber(
        const uint32_t& pname,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetNumber(Id());

    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetNumber", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetNumber", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetQueryParameter(
        const uint64_t& id,
        const uint32_t& pname,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetQueryParameter(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetQueryParameter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetQueryParameter", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetRenderbufferParameter(
        const uint64_t& id,
        const uint32_t& pname,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetRenderbufferParameter(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetRenderbufferParameter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetRenderbufferParameter", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetSamplerParameter(
        const uint64_t& id,
        const uint32_t& pname,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetSamplerParameter(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetSamplerParameter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetSamplerParameter", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetShaderPrecisionFormat(
        const uint32_t& shaderType,
        const uint32_t& precisionType,
        mozilla::Maybe<ShaderPrecisionFormat>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetShaderPrecisionFormat(Id());

    WriteIPDLParam(msg__, this, shaderType);
    // Sentinel = 'shaderType'
    (msg__)->WriteSentinel(378274842);
    WriteIPDLParam(msg__, this, precisionType);
    // Sentinel = 'precisionType'
    (msg__)->WriteSentinel(640812399);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetShaderPrecisionFormat", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetShaderPrecisionFormat", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'ShaderPrecisionFormat?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ShaderPrecisionFormat?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetString(
        const uint32_t& pname,
        mozilla::Maybe<string>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetString(Id());

    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetString", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetString", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'string?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'string?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetTexParameter(
        const uint64_t& id,
        const uint32_t& pname,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetTexParameter(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetTexParameter", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetTexParameter", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetUniform(
        const uint64_t& id,
        const uint32_t& loc,
        GetUniformData* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetUniform(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, loc);
    // Sentinel = 'loc'
    (msg__)->WriteSentinel(42467647);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetUniform", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetUniform", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'GetUniformData'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'GetUniformData'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendGetVertexAttrib(
        const uint32_t& index,
        const uint32_t& pname,
        mozilla::Maybe<double>* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_GetVertexAttrib(Id());

    WriteIPDLParam(msg__, this, index);
    // Sentinel = 'index'
    (msg__)->WriteSentinel(104333849);
    WriteIPDLParam(msg__, this, pname);
    // Sentinel = 'pname'
    (msg__)->WriteSentinel(105841170);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_GetVertexAttrib", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_GetVertexAttrib", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'double?'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double?'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendIsEnabled(
        const uint32_t& cap,
        bool* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_IsEnabled(Id());

    WriteIPDLParam(msg__, this, cap);
    // Sentinel = 'cap'
    (msg__)->WriteSentinel(39715125);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_IsEnabled", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_IsEnabled", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::SendOnMemoryPressure() -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_OnMemoryPressure(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_OnMemoryPressure", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_OnMemoryPressure", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PWebGLChild::SendValidateProgram(
        const uint64_t& id,
        bool* ret) -> bool
{
    IPC::Message* msg__ = PWebGL::Msg_ValidateProgram(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGL::Msg_ValidateProgram", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebGL::Msg_ValidateProgram", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGLChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ret)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'ret'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 43450700)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebGLChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebGLChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebGLChild::OnMessageReceived(const Message& msg__) -> PWebGLChild::Result
{
    switch (msg__.type()) {
    case PWebGL::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PWebGL::Msg_JsWarning__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_JsWarning", OTHER);

            PickleIterator iter__{msg__};
            string text{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(text)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'text'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73859526)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGLChild*>(this))->RecvJsWarning(std::move(text))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGL::Msg_OnContextLoss__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGLChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGLChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGL::Msg_OnContextLoss", OTHER);

            PickleIterator iter__{msg__};
            ContextLossReason aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'ContextLossReason'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContextLossReason'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGLChild*>(this))->RecvOnContextLoss(std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebGLChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebGLChild::Result
{
    return MsgNotKnown;
}

auto PWebGLChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebGLChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebGLChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PWebGLChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PWebGLChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebGL", PWebGLMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PWebGLChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
