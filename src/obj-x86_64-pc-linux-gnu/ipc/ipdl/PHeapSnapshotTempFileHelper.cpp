//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/devtools/PHeapSnapshotTempFileHelper.h"
#include "mozilla/devtools/PHeapSnapshotTempFileHelperParent.h"
#include "mozilla/devtools/PHeapSnapshotTempFileHelperChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace devtools {
namespace PHeapSnapshotTempFileHelper {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::devtools::PHeapSnapshotTempFileHelperParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::devtools::PHeapSnapshotTempFileHelperChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_OpenHeapSnapshotTempFile(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OpenHeapSnapshotTempFile__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_OpenHeapSnapshotTempFile(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_OpenHeapSnapshotTempFile__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PHeapSnapshotTempFileHelper
} // namespace devtools
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpenedFile|
//
namespace mozilla {
namespace devtools {
} // namespace devtools
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::devtools::OpenedFile>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).path());
    // Sentinel = 'path'
    (aMsg)->WriteSentinel(70713774);
    WriteIPDLParam(aMsg, aActor, (aVar).snapshotId());
    // Sentinel = 'snapshotId'
    (aMsg)->WriteSentinel(390464542);
    WriteIPDLParam(aMsg, aActor, (aVar).descriptor());
    // Sentinel = 'descriptor'
    (aMsg)->WriteSentinel(384894016);
}

auto IPDLParamTraits<mozilla::devtools::OpenedFile>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->path())))))) {
        aActor->FatalError("Error deserializing 'path' (nsString) member of 'OpenedFile'");
        return false;
    }
    // Sentinel = 'path'
    if ((!((aMsg)->ReadSentinel(aIter, 70713774)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'path' (nsString) member of 'OpenedFile'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->snapshotId())))))) {
        aActor->FatalError("Error deserializing 'snapshotId' (nsString) member of 'OpenedFile'");
        return false;
    }
    // Sentinel = 'snapshotId'
    if ((!((aMsg)->ReadSentinel(aIter, 390464542)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'snapshotId' (nsString) member of 'OpenedFile'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->descriptor())))))) {
        aActor->FatalError("Error deserializing 'descriptor' (FileDescriptor) member of 'OpenedFile'");
        return false;
    }
    // Sentinel = 'descriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 384894016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'descriptor' (FileDescriptor) member of 'OpenedFile'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OpenHeapSnapshotTempFileResponse|
//
namespace mozilla {
namespace devtools {
auto OpenHeapSnapshotTempFileResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TOpenedFile:
        {
            (ptr_OpenedFile())->~OpenedFile__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OpenHeapSnapshotTempFileResponse::OpenHeapSnapshotTempFileResponse(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT OpenHeapSnapshotTempFileResponse::OpenHeapSnapshotTempFileResponse(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT OpenHeapSnapshotTempFileResponse::OpenHeapSnapshotTempFileResponse(const OpenedFile& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpenedFile()) OpenedFile(aOther);
    mType = TOpenedFile;
}

MOZ_IMPLICIT OpenHeapSnapshotTempFileResponse::OpenHeapSnapshotTempFileResponse(OpenedFile&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpenedFile()) OpenedFile(std::move(aOther));
    mType = TOpenedFile;
}

MOZ_IMPLICIT OpenHeapSnapshotTempFileResponse::OpenHeapSnapshotTempFileResponse(const OpenHeapSnapshotTempFileResponse& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TOpenedFile:
        {
            new (mozilla::KnownNotNull, ptr_OpenedFile()) OpenedFile((aOther).get_OpenedFile());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT OpenHeapSnapshotTempFileResponse::OpenHeapSnapshotTempFileResponse(OpenHeapSnapshotTempFileResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpenedFile:
        {
            new (mozilla::KnownNotNull, ptr_OpenedFile()) OpenedFile(std::move((aOther).get_OpenedFile()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

OpenHeapSnapshotTempFileResponse::~OpenHeapSnapshotTempFileResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OpenHeapSnapshotTempFileResponse::operator=(const nsresult& aRhs) -> OpenHeapSnapshotTempFileResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto OpenHeapSnapshotTempFileResponse::operator=(nsresult&& aRhs) -> OpenHeapSnapshotTempFileResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto OpenHeapSnapshotTempFileResponse::operator=(const OpenedFile& aRhs) -> OpenHeapSnapshotTempFileResponse&
{
    if (MaybeDestroy(TOpenedFile)) {
        new (mozilla::KnownNotNull, ptr_OpenedFile()) OpenedFile;
    }
    (*(ptr_OpenedFile())) = aRhs;
    mType = TOpenedFile;
    return (*(this));
}

auto OpenHeapSnapshotTempFileResponse::operator=(OpenedFile&& aRhs) -> OpenHeapSnapshotTempFileResponse&
{
    if (MaybeDestroy(TOpenedFile)) {
        new (mozilla::KnownNotNull, ptr_OpenedFile()) OpenedFile;
    }
    (*(ptr_OpenedFile())) = std::move(aRhs);
    mType = TOpenedFile;
    return (*(this));
}

auto OpenHeapSnapshotTempFileResponse::operator=(const OpenHeapSnapshotTempFileResponse& aRhs) -> OpenHeapSnapshotTempFileResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TOpenedFile:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpenedFile()) OpenedFile;
            }
            (*(ptr_OpenedFile())) = (aRhs).get_OpenedFile();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OpenHeapSnapshotTempFileResponse::operator=(OpenHeapSnapshotTempFileResponse&& aRhs) -> OpenHeapSnapshotTempFileResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpenedFile:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpenedFile()) OpenedFile;
            }
            (*(ptr_OpenedFile())) = std::move((aRhs).get_OpenedFile());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace devtools
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::devtools::OpenHeapSnapshotTempFileResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::devtools::OpenHeapSnapshotTempFileResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'OpenHeapSnapshotTempFileResponse'
    (aMsg)->WriteSentinel(3480882374);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TOpenedFile:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpenedFile());
            // Sentinel = 'TOpenedFile'
            (aMsg)->WriteSentinel(414778416);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::devtools::OpenHeapSnapshotTempFileResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::devtools::OpenHeapSnapshotTempFileResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union OpenHeapSnapshotTempFileResponse");
        return false;
    }
    // Sentinel = 'OpenHeapSnapshotTempFileResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 3480882374)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union OpenHeapSnapshotTempFileResponse");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union OpenHeapSnapshotTempFileResponse");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union OpenHeapSnapshotTempFileResponse");
                return false;
            }
            return true;
        }
    case union__::TOpenedFile:
        {
            mozilla::devtools::OpenedFile tmp = mozilla::devtools::OpenedFile();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpenedFile())))))) {
                aActor->FatalError("Error deserializing variant TOpenedFile of union OpenHeapSnapshotTempFileResponse");
                return false;
            }
            // Sentinel = 'TOpenedFile'
            if ((!((aMsg)->ReadSentinel(aIter, 414778416)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpenedFile of union OpenHeapSnapshotTempFileResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
