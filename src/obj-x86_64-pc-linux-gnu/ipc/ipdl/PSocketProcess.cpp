//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PDNSRequestParent.h"
#include "mozilla/net/PDNSRequestChild.h"
#include "mozilla/net/PSocketProcessBridgeParent.h"
#include "mozilla/net/PSocketProcessBridgeChild.h"
#include "mozilla/PProfilerParent.h"
#include "mozilla/PProfilerChild.h"
#include "mozilla/net/PWebrtcTCPSocketParent.h"
#include "mozilla/net/PWebrtcTCPSocketChild.h"
#include "mozilla/net/PHttpTransactionParent.h"
#include "mozilla/net/PHttpTransactionChild.h"
#include "mozilla/net/PHttpConnectionMgrParent.h"
#include "mozilla/net/PHttpConnectionMgrChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/net/PInputChannelThrottleQueueParent.h"
#include "mozilla/net/PInputChannelThrottleQueueChild.h"
#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/net/PAltServiceParent.h"
#include "mozilla/net/PAltServiceChild.h"
#include "mozilla/net/PAltSvcTransactionParent.h"
#include "mozilla/net/PAltSvcTransactionChild.h"
#include "mozilla/net/PTRRServiceParent.h"
#include "mozilla/net/PTRRServiceChild.h"
#include "mozilla/net/PProxyConfigLookupParent.h"
#include "mozilla/net/PProxyConfigLookupChild.h"
#include "mozilla/net/PNativeDNSResolverOverrideParent.h"
#include "mozilla/net/PNativeDNSResolverOverrideChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/net/PSocketProcess.h"
#include "mozilla/net/PSocketProcessParent.h"
#include "mozilla/net/PSocketProcessChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {
namespace PSocketProcess {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PSocketProcessParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PSocketProcessChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_InitCrashReporter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitCrashReporter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AccumulateChildHistograms(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AccumulateChildHistograms__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AccumulateChildKeyedHistograms(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AccumulateChildKeyedHistograms__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateChildScalars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateChildScalars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateChildKeyedScalars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateChildKeyedScalars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RecordChildEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RecordChildEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RecordDiscardedData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RecordDiscardedData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PWebrtcTCPSocketConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PWebrtcTCPSocketConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PWebrtcTCPSocketConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PWebrtcTCPSocketConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PChildToParentStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PChildToParentStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PChildToParentStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PChildToParentStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ObserveHttpActivity(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ObserveHttpActivity__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitBackground(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitBackground__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PAltServiceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PAltServiceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PAltServiceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PAltServiceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetTLSClientCert(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetTLSClientCert__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetTLSClientCert(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetTLSClientCert__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PProxyConfigLookupConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PProxyConfigLookupConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PProxyConfigLookupConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PProxyConfigLookupConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CachePushCheck(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CachePushCheck__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CachePushCheck(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CachePushCheck__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ODoHServiceActivated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ODoHServiceActivated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Init(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Init__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PreferenceUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PreferenceUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RequestMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RequestMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetOffline(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetOffline__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetConnectivity(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetConnectivity__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitLinuxSandbox(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitLinuxSandbox__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitSocketProcessBridgeParent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitSocketProcessBridgeParent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitProfiler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitProfiler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SocketProcessTelemetryPing(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SocketProcessTelemetryPing__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PHttpTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PHttpTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PHttpTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PHttpTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PParentToChildStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PParentToChildStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PParentToChildStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PParentToChildStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PHttpConnectionMgrConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PHttpConnectionMgrConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PHttpConnectionMgrConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PHttpConnectionMgrConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_UpdateDeviceModelId(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDeviceModelId__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnHttpActivityDistributorActivated(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnHttpActivityDistributorActivated__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PInputChannelThrottleQueueConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PInputChannelThrottleQueueConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PInputChannelThrottleQueueConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PInputChannelThrottleQueueConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PAltSvcTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PAltSvcTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PAltSvcTransactionConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PAltSvcTransactionConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ClearSessionCache(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ClearSessionCache__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PTRRServiceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PTRRServiceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PTRRServiceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PTRRServiceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PNativeDNSResolverOverrideConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PNativeDNSResolverOverrideConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PNativeDNSResolverOverrideConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PNativeDNSResolverOverrideConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NotifyObserver(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyObserver__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PRemoteLazyInputStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PRemoteLazyInputStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PRemoteLazyInputStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PRemoteLazyInputStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetSocketData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetSocketData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetSocketData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetSocketData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetDNSCacheEntries(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetDNSCacheEntries__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetDNSCacheEntries(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetDNSCacheEntries__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetHttpConnectionData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetHttpConnectionData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetHttpConnectionData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetHttpConnectionData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PFileDescriptorSetConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PFileDescriptorSetConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PFileDescriptorSetConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PFileDescriptorSetConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PDNSRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PDNSRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PDNSRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PDNSRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PSocketProcess
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HttpHandlerInitArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::HttpHandlerInitArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).mLegacyAppName());
    // Sentinel = 'mLegacyAppName'
    (aMsg)->WriteSentinel(675743077);
    WriteIPDLParam(aMsg, aActor, (aVar).mLegacyAppVersion());
    // Sentinel = 'mLegacyAppVersion'
    (aMsg)->WriteSentinel(1000212170);
    WriteIPDLParam(aMsg, aActor, (aVar).mPlatform());
    // Sentinel = 'mPlatform'
    (aMsg)->WriteSentinel(303170483);
    WriteIPDLParam(aMsg, aActor, (aVar).mOscpu());
    // Sentinel = 'mOscpu'
    (aMsg)->WriteSentinel(141099640);
    WriteIPDLParam(aMsg, aActor, (aVar).mMisc());
    // Sentinel = 'mMisc'
    (aMsg)->WriteSentinel(98435578);
    WriteIPDLParam(aMsg, aActor, (aVar).mProduct());
    // Sentinel = 'mProduct'
    (aMsg)->WriteSentinel(245367631);
    WriteIPDLParam(aMsg, aActor, (aVar).mProductSub());
    // Sentinel = 'mProductSub'
    (aMsg)->WriteSentinel(449971321);
    WriteIPDLParam(aMsg, aActor, (aVar).mAppName());
    // Sentinel = 'mAppName'
    (aMsg)->WriteSentinel(228655888);
    WriteIPDLParam(aMsg, aActor, (aVar).mAppVersion());
    // Sentinel = 'mAppVersion'
    (aMsg)->WriteSentinel(435750005);
    WriteIPDLParam(aMsg, aActor, (aVar).mCompatFirefox());
    // Sentinel = 'mCompatFirefox'
    (aMsg)->WriteSentinel(695010725);
    WriteIPDLParam(aMsg, aActor, (aVar).mCompatDevice());
    // Sentinel = 'mCompatDevice'
    (aMsg)->WriteSentinel(599000354);
    WriteIPDLParam(aMsg, aActor, (aVar).mDeviceModelId());
    // Sentinel = 'mDeviceModelId'
    (aMsg)->WriteSentinel(679085404);
}

auto IPDLParamTraits<mozilla::net::HttpHandlerInitArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mLegacyAppName())))))) {
        aActor->FatalError("Error deserializing 'mLegacyAppName' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mLegacyAppName'
    if ((!((aMsg)->ReadSentinel(aIter, 675743077)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mLegacyAppName' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mLegacyAppVersion())))))) {
        aActor->FatalError("Error deserializing 'mLegacyAppVersion' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mLegacyAppVersion'
    if ((!((aMsg)->ReadSentinel(aIter, 1000212170)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mLegacyAppVersion' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mPlatform())))))) {
        aActor->FatalError("Error deserializing 'mPlatform' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mPlatform'
    if ((!((aMsg)->ReadSentinel(aIter, 303170483)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mPlatform' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mOscpu())))))) {
        aActor->FatalError("Error deserializing 'mOscpu' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mOscpu'
    if ((!((aMsg)->ReadSentinel(aIter, 141099640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mOscpu' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mMisc())))))) {
        aActor->FatalError("Error deserializing 'mMisc' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mMisc'
    if ((!((aMsg)->ReadSentinel(aIter, 98435578)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mMisc' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mProduct())))))) {
        aActor->FatalError("Error deserializing 'mProduct' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mProduct'
    if ((!((aMsg)->ReadSentinel(aIter, 245367631)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mProduct' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mProductSub())))))) {
        aActor->FatalError("Error deserializing 'mProductSub' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mProductSub'
    if ((!((aMsg)->ReadSentinel(aIter, 449971321)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mProductSub' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mAppName())))))) {
        aActor->FatalError("Error deserializing 'mAppName' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mAppName'
    if ((!((aMsg)->ReadSentinel(aIter, 228655888)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mAppName' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mAppVersion())))))) {
        aActor->FatalError("Error deserializing 'mAppVersion' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mAppVersion'
    if ((!((aMsg)->ReadSentinel(aIter, 435750005)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mAppVersion' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mCompatFirefox())))))) {
        aActor->FatalError("Error deserializing 'mCompatFirefox' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mCompatFirefox'
    if ((!((aMsg)->ReadSentinel(aIter, 695010725)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mCompatFirefox' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mCompatDevice())))))) {
        aActor->FatalError("Error deserializing 'mCompatDevice' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mCompatDevice'
    if ((!((aMsg)->ReadSentinel(aIter, 599000354)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mCompatDevice' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mDeviceModelId())))))) {
        aActor->FatalError("Error deserializing 'mDeviceModelId' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    // Sentinel = 'mDeviceModelId'
    if ((!((aMsg)->ReadSentinel(aIter, 679085404)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mDeviceModelId' (nsCString) member of 'HttpHandlerInitArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SocketDataArgs|
//
namespace mozilla {
namespace net {
auto SocketDataArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(SocketDataArgs, totalRecv_) - offsetof(SocketDataArgs, totalSent_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::SocketDataArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).info());
    // Sentinel = 'info'
    (aMsg)->WriteSentinel(70058413);
    (aMsg)->WriteBytes((&((aVar).totalSent())), 16);
    // Sentinel = 'totalSent | totalRecv'
    (aMsg)->WriteSentinel(1522731055);
}

auto IPDLParamTraits<mozilla::net::SocketDataArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->info())))))) {
        aActor->FatalError("Error deserializing 'info' (SocketInfo[]) member of 'SocketDataArgs'");
        return false;
    }
    // Sentinel = 'info'
    if ((!((aMsg)->ReadSentinel(aIter, 70058413)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'info' (SocketInfo[]) member of 'SocketDataArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->totalSent())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'totalSent | totalRecv'
    if ((!((aMsg)->ReadSentinel(aIter, 1522731055)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SocketPorcessInitAttributes|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::SocketPorcessInitAttributes>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).mOffline());
    // Sentinel = 'mOffline'
    (aMsg)->WriteSentinel(237437745);
    WriteIPDLParam(aMsg, aActor, (aVar).mConnectivity());
    // Sentinel = 'mConnectivity'
    (aMsg)->WriteSentinel(616498541);
    WriteIPDLParam(aMsg, aActor, (aVar).mInitSandbox());
    // Sentinel = 'mInitSandbox'
    (aMsg)->WriteSentinel(514131153);
    WriteIPDLParam(aMsg, aActor, (aVar).mSandboxBroker());
    // Sentinel = 'mSandboxBroker'
    (aMsg)->WriteSentinel(697959842);
}

auto IPDLParamTraits<mozilla::net::SocketPorcessInitAttributes>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mOffline())))))) {
        aActor->FatalError("Error deserializing 'mOffline' (bool) member of 'SocketPorcessInitAttributes'");
        return false;
    }
    // Sentinel = 'mOffline'
    if ((!((aMsg)->ReadSentinel(aIter, 237437745)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mOffline' (bool) member of 'SocketPorcessInitAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mConnectivity())))))) {
        aActor->FatalError("Error deserializing 'mConnectivity' (bool) member of 'SocketPorcessInitAttributes'");
        return false;
    }
    // Sentinel = 'mConnectivity'
    if ((!((aMsg)->ReadSentinel(aIter, 616498541)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mConnectivity' (bool) member of 'SocketPorcessInitAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mInitSandbox())))))) {
        aActor->FatalError("Error deserializing 'mInitSandbox' (bool) member of 'SocketPorcessInitAttributes'");
        return false;
    }
    // Sentinel = 'mInitSandbox'
    if ((!((aMsg)->ReadSentinel(aIter, 514131153)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mInitSandbox' (bool) member of 'SocketPorcessInitAttributes'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mSandboxBroker())))))) {
        aActor->FatalError("Error deserializing 'mSandboxBroker' (FileDescriptor?) member of 'SocketPorcessInitAttributes'");
        return false;
    }
    // Sentinel = 'mSandboxBroker'
    if ((!((aMsg)->ReadSentinel(aIter, 697959842)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mSandboxBroker' (FileDescriptor?) member of 'SocketPorcessInitAttributes'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
