//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PChromiumCDMChild.h"
#include "GMPMessageUtils.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPContentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


MOZ_IMPLICIT PChromiumCDMChild::PChromiumCDMChild() :
    mozilla::ipc::IProtocol(PChromiumCDMMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PChromiumCDMChild);
}

PChromiumCDMChild::~PChromiumCDMChild()
{
    MOZ_COUNT_DTOR(PChromiumCDMChild);
}

auto PChromiumCDMChild::Manager() const -> PGMPContentChild*
{
    return static_cast<PGMPContentChild*>(IProtocol::Manager());
}

auto PChromiumCDMChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PChromiumCDMChild::Send__delete__(PChromiumCDMChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PChromiumCDM::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PChromiumCDMMsgStart, actor);
    return sendok__;
}

auto PChromiumCDMChild::SendOnResolvePromiseWithKeyStatus(
        const uint32_t& aPromiseId,
        const uint32_t& aKeyStatus) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnResolvePromiseWithKeyStatus(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aKeyStatus);
    // Sentinel = 'aKeyStatus'
    (msg__)->WriteSentinel(358679567);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnResolvePromiseWithKeyStatus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendOnResolveNewSessionPromise(
        const uint32_t& aPromiseId,
        const nsCString& aSessionId) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnResolveNewSessionPromise(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnResolveNewSessionPromise", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendOnResolvePromise(const uint32_t& aPromiseId) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnResolvePromise(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnResolvePromise", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendOnRejectPromise(
        const uint32_t& aPromiseId,
        const uint32_t& aException,
        const uint32_t& aSystemCode,
        const nsCString& aErrorMessage) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnRejectPromise(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aException);
    // Sentinel = 'aException'
    (msg__)->WriteSentinel(362480657);
    WriteIPDLParam(msg__, this, aSystemCode);
    // Sentinel = 'aSystemCode'
    (msg__)->WriteSentinel(444466274);
    WriteIPDLParam(msg__, this, aErrorMessage);
    // Sentinel = 'aErrorMessage'
    (msg__)->WriteSentinel(601949489);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnRejectPromise", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendOnSessionMessage(
        const nsCString& aSessionId,
        const uint32_t& aMessageType,
        const nsTArray<uint8_t>& aMessage) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnSessionMessage(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aMessageType);
    // Sentinel = 'aMessageType'
    (msg__)->WriteSentinel(512099529);
    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnSessionMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendOnSessionKeysChange(
        const nsCString& aSessionId,
        const nsTArray<CDMKeyInformation>& aKeysInfo) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnSessionKeysChange(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aKeysInfo);
    // Sentinel = 'aKeysInfo'
    (msg__)->WriteSentinel(290128778);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnSessionKeysChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendOnExpirationChange(
        const nsCString& aSessionId,
        const double& aSecondsSinceEpoch) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnExpirationChange(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aSecondsSinceEpoch);
    // Sentinel = 'aSecondsSinceEpoch'
    (msg__)->WriteSentinel(1121126162);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnExpirationChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendOnSessionClosed(const nsCString& aSessionId) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnSessionClosed(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnSessionClosed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendResolveLoadSessionPromise(
        const uint32_t& aPromiseId,
        const bool& aSuccessful) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_ResolveLoadSessionPromise(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aSuccessful);
    // Sentinel = 'aSuccessful'
    (msg__)->WriteSentinel(441386114);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_ResolveLoadSessionPromise", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendDecrypted(
        const uint32_t& aId,
        const uint32_t& aStatus,
        Shmem&& aDecryptedData) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_Decrypted(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);
    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);
    WriteIPDLParam(msg__, this, std::move(aDecryptedData));
    // Sentinel = 'aDecryptedData'
    (msg__)->WriteSentinel(687605120);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Decrypted", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendDecryptFailed(
        const uint32_t& aId,
        const uint32_t& aStatus) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_DecryptFailed(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);
    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecryptFailed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendOnDecoderInitDone(const uint32_t& aStatus) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_OnDecoderInitDone(Id());

    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnDecoderInitDone", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendDecodedShmem(
        const CDMVideoFrame& aFrame,
        Shmem&& aData) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_DecodedShmem(Id());

    WriteIPDLParam(msg__, this, aFrame);
    // Sentinel = 'aFrame'
    (msg__)->WriteSentinel(131334733);
    WriteIPDLParam(msg__, this, std::move(aData));
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecodedShmem", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendDecodedData(
        const CDMVideoFrame& aFrame,
        const nsTArray<uint8_t>& aData) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_DecodedData(Id());

    WriteIPDLParam(msg__, this, aFrame);
    // Sentinel = 'aFrame'
    (msg__)->WriteSentinel(131334733);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecodedData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendDecodeFailed(const uint32_t& aStatus) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_DecodeFailed(Id());

    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecodeFailed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendResetVideoDecoderComplete() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_ResetVideoDecoderComplete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_ResetVideoDecoderComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendDrainComplete() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_DrainComplete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DrainComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendShutdown() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::SendIncreaseShmemPoolSize() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_IncreaseShmemPoolSize(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_IncreaseShmemPoolSize", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PChromiumCDMChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PChromiumCDMChild::OnMessageReceived(const Message& msg__) -> PChromiumCDMChild::Result
{
    switch (msg__.type()) {
    case PChromiumCDM::Msg_Init__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Init", OTHER);

            PickleIterator iter__{msg__};
            bool aAllowDistinctiveIdentifier{};
            bool aAllowPersistentState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAllowDistinctiveIdentifier)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aAllowDistinctiveIdentifier'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2530609898)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAllowPersistentState)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aAllowPersistentState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1556285587)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            InitResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PChromiumCDMChild* self__ = static_cast<PChromiumCDMChild*>(proxy__->Get());

                IPC::Message* reply__ = PChromiumCDM::Reply_Init(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aSuccess'
                (reply__)->WriteSentinel(236323643);

                if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PChromiumCDMChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvInit(std::move(aAllowDistinctiveIdentifier), std::move(aAllowPersistentState), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_GetStatusForPolicy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_GetStatusForPolicy", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            HdcpVersion aMinHdcpVersion{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMinHdcpVersion)))))) {
                FatalError("Error deserializing 'HdcpVersion'");
                return MsgValueError;
            }
            // Sentinel = 'aMinHdcpVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 766576107)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HdcpVersion'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvGetStatusForPolicy(std::move(aPromiseId), std::move(aMinHdcpVersion))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_SetServerCertificate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_SetServerCertificate", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            nsTArray<uint8_t> aServerCert{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aServerCert)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aServerCert'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435553383)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetServerCertificate(std::move(aPromiseId), std::move(aServerCert))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_CreateSessionAndGenerateRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_CreateSessionAndGenerateRequest", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            uint32_t aSessionType{};
            uint32_t aInitDataType{};
            nsTArray<uint8_t> aInitData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 526189800)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInitDataType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInitDataType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 582092050)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInitData)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aInitData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284296048)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvCreateSessionAndGenerateRequest(std::move(aPromiseId), std::move(aSessionType), std::move(aInitDataType), std::move(aInitData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_LoadSession__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_LoadSession", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            uint32_t aSessionType{};
            nsCString aSessionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 526189800)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvLoadSession(std::move(aPromiseId), std::move(aSessionType), std::move(aSessionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_UpdateSession__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_UpdateSession", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            nsCString aSessionId{};
            nsTArray<uint8_t> aResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResponse)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301466545)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvUpdateSession(std::move(aPromiseId), std::move(aSessionId), std::move(aResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_CloseSession__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_CloseSession", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            nsCString aSessionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvCloseSession(std::move(aPromiseId), std::move(aSessionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_RemoveSession__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_RemoveSession", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            nsCString aSessionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvRemoveSession(std::move(aPromiseId), std::move(aSessionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_Decrypt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Decrypt", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aId{};
            CDMInputBuffer aBuffer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBuffer)))))) {
                FatalError("Error deserializing 'CDMInputBuffer'");
                return MsgValueError;
            }
            // Sentinel = 'aBuffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 176751292)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CDMInputBuffer'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvDecrypt(std::move(aId), std::move(aBuffer))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_InitializeVideoDecoder__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_InitializeVideoDecoder", OTHER);

            PickleIterator iter__{msg__};
            CDMVideoDecoderConfig aConfig{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aConfig)))))) {
                FatalError("Error deserializing 'CDMVideoDecoderConfig'");
                return MsgValueError;
            }
            // Sentinel = 'aConfig'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 177078968)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CDMVideoDecoderConfig'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvInitializeVideoDecoder(std::move(aConfig))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_DeinitializeVideoDecoder__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DeinitializeVideoDecoder", OTHER);

            if ((!((this)->RecvDeinitializeVideoDecoder()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_ResetVideoDecoder__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_ResetVideoDecoder", OTHER);

            if ((!((this)->RecvResetVideoDecoder()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_DecryptAndDecodeFrame__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecryptAndDecodeFrame", OTHER);

            PickleIterator iter__{msg__};
            CDMInputBuffer aBuffer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBuffer)))))) {
                FatalError("Error deserializing 'CDMInputBuffer'");
                return MsgValueError;
            }
            // Sentinel = 'aBuffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 176751292)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CDMInputBuffer'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvDecryptAndDecodeFrame(std::move(aBuffer))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_Drain__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Drain", OTHER);

            if ((!((this)->RecvDrain()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_Destroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Destroy", OTHER);

            if ((!((this)->RecvDestroy()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_GiveBuffer__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_GiveBuffer", OTHER);

            PickleIterator iter__{msg__};
            Shmem aShmem{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aShmem)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'aShmem'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 134808156)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvGiveBuffer(std::move(aShmem))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_PurgeShmems__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_PurgeShmems", OTHER);

            if ((!((this)->RecvPurgeShmems()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PChromiumCDMChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PChromiumCDMChild::Result
{
    return MsgNotKnown;
}

auto PChromiumCDMChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PChromiumCDMChild::Result
{
    return MsgNotKnown;
}

auto PChromiumCDMChild::ClearSubtree() -> void
{
}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PChromiumCDMChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PChromiumCDMChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PChromiumCDM", PChromiumCDMMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PChromiumCDMChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
