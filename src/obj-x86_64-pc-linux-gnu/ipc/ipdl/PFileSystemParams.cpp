//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PFileSystemParams.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemGetDirectoryListingParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemGetDirectoryListingParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).filesystem());
    // Sentinel = 'filesystem'
    (aMsg)->WriteSentinel(390595654);
    WriteIPDLParam(aMsg, aActor, (aVar).realPath());
    // Sentinel = 'realPath'
    (aMsg)->WriteSentinel(242221874);
    WriteIPDLParam(aMsg, aActor, (aVar).domPath());
    // Sentinel = 'domPath'
    (aMsg)->WriteSentinel(187761358);
    WriteIPDLParam(aMsg, aActor, (aVar).filters());
    // Sentinel = 'filters'
    (aMsg)->WriteSentinel(196674298);
}

auto IPDLParamTraits<mozilla::dom::FileSystemGetDirectoryListingParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filesystem())))))) {
        aActor->FatalError("Error deserializing 'filesystem' (nsString) member of 'FileSystemGetDirectoryListingParams'");
        return false;
    }
    // Sentinel = 'filesystem'
    if ((!((aMsg)->ReadSentinel(aIter, 390595654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filesystem' (nsString) member of 'FileSystemGetDirectoryListingParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->realPath())))))) {
        aActor->FatalError("Error deserializing 'realPath' (nsString) member of 'FileSystemGetDirectoryListingParams'");
        return false;
    }
    // Sentinel = 'realPath'
    if ((!((aMsg)->ReadSentinel(aIter, 242221874)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'realPath' (nsString) member of 'FileSystemGetDirectoryListingParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domPath())))))) {
        aActor->FatalError("Error deserializing 'domPath' (nsString) member of 'FileSystemGetDirectoryListingParams'");
        return false;
    }
    // Sentinel = 'domPath'
    if ((!((aMsg)->ReadSentinel(aIter, 187761358)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domPath' (nsString) member of 'FileSystemGetDirectoryListingParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filters())))))) {
        aActor->FatalError("Error deserializing 'filters' (nsString) member of 'FileSystemGetDirectoryListingParams'");
        return false;
    }
    // Sentinel = 'filters'
    if ((!((aMsg)->ReadSentinel(aIter, 196674298)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filters' (nsString) member of 'FileSystemGetDirectoryListingParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemGetFilesParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemGetFilesParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).filesystem());
    // Sentinel = 'filesystem'
    (aMsg)->WriteSentinel(390595654);
    WriteIPDLParam(aMsg, aActor, (aVar).realPath());
    // Sentinel = 'realPath'
    (aMsg)->WriteSentinel(242221874);
    WriteIPDLParam(aMsg, aActor, (aVar).domPath());
    // Sentinel = 'domPath'
    (aMsg)->WriteSentinel(187761358);
    WriteIPDLParam(aMsg, aActor, (aVar).recursiveFlag());
    // Sentinel = 'recursiveFlag'
    (aMsg)->WriteSentinel(639698259);
}

auto IPDLParamTraits<mozilla::dom::FileSystemGetFilesParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filesystem())))))) {
        aActor->FatalError("Error deserializing 'filesystem' (nsString) member of 'FileSystemGetFilesParams'");
        return false;
    }
    // Sentinel = 'filesystem'
    if ((!((aMsg)->ReadSentinel(aIter, 390595654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filesystem' (nsString) member of 'FileSystemGetFilesParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->realPath())))))) {
        aActor->FatalError("Error deserializing 'realPath' (nsString) member of 'FileSystemGetFilesParams'");
        return false;
    }
    // Sentinel = 'realPath'
    if ((!((aMsg)->ReadSentinel(aIter, 242221874)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'realPath' (nsString) member of 'FileSystemGetFilesParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domPath())))))) {
        aActor->FatalError("Error deserializing 'domPath' (nsString) member of 'FileSystemGetFilesParams'");
        return false;
    }
    // Sentinel = 'domPath'
    if ((!((aMsg)->ReadSentinel(aIter, 187761358)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domPath' (nsString) member of 'FileSystemGetFilesParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->recursiveFlag())))))) {
        aActor->FatalError("Error deserializing 'recursiveFlag' (bool) member of 'FileSystemGetFilesParams'");
        return false;
    }
    // Sentinel = 'recursiveFlag'
    if ((!((aMsg)->ReadSentinel(aIter, 639698259)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'recursiveFlag' (bool) member of 'FileSystemGetFilesParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemGetFileOrDirectoryParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemGetFileOrDirectoryParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).filesystem());
    // Sentinel = 'filesystem'
    (aMsg)->WriteSentinel(390595654);
    WriteIPDLParam(aMsg, aActor, (aVar).realPath());
    // Sentinel = 'realPath'
    (aMsg)->WriteSentinel(242221874);
}

auto IPDLParamTraits<mozilla::dom::FileSystemGetFileOrDirectoryParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filesystem())))))) {
        aActor->FatalError("Error deserializing 'filesystem' (nsString) member of 'FileSystemGetFileOrDirectoryParams'");
        return false;
    }
    // Sentinel = 'filesystem'
    if ((!((aMsg)->ReadSentinel(aIter, 390595654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filesystem' (nsString) member of 'FileSystemGetFileOrDirectoryParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->realPath())))))) {
        aActor->FatalError("Error deserializing 'realPath' (nsString) member of 'FileSystemGetFileOrDirectoryParams'");
        return false;
    }
    // Sentinel = 'realPath'
    if ((!((aMsg)->ReadSentinel(aIter, 242221874)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'realPath' (nsString) member of 'FileSystemGetFileOrDirectoryParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union FileSystemParams|
//
namespace mozilla {
namespace dom {
auto FileSystemParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TFileSystemGetDirectoryListingParams:
        {
            (ptr_FileSystemGetDirectoryListingParams())->~FileSystemGetDirectoryListingParams__tdef();
            break;
        }
    case TFileSystemGetFilesParams:
        {
            (ptr_FileSystemGetFilesParams())->~FileSystemGetFilesParams__tdef();
            break;
        }
    case TFileSystemGetFileOrDirectoryParams:
        {
            (ptr_FileSystemGetFileOrDirectoryParams())->~FileSystemGetFileOrDirectoryParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT FileSystemParams::FileSystemParams(const FileSystemGetDirectoryListingParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemGetDirectoryListingParams()) FileSystemGetDirectoryListingParams(aOther);
    mType = TFileSystemGetDirectoryListingParams;
}

MOZ_IMPLICIT FileSystemParams::FileSystemParams(FileSystemGetDirectoryListingParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemGetDirectoryListingParams()) FileSystemGetDirectoryListingParams(std::move(aOther));
    mType = TFileSystemGetDirectoryListingParams;
}

MOZ_IMPLICIT FileSystemParams::FileSystemParams(const FileSystemGetFilesParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemGetFilesParams()) FileSystemGetFilesParams(aOther);
    mType = TFileSystemGetFilesParams;
}

MOZ_IMPLICIT FileSystemParams::FileSystemParams(FileSystemGetFilesParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemGetFilesParams()) FileSystemGetFilesParams(std::move(aOther));
    mType = TFileSystemGetFilesParams;
}

MOZ_IMPLICIT FileSystemParams::FileSystemParams(const FileSystemGetFileOrDirectoryParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemGetFileOrDirectoryParams()) FileSystemGetFileOrDirectoryParams(aOther);
    mType = TFileSystemGetFileOrDirectoryParams;
}

MOZ_IMPLICIT FileSystemParams::FileSystemParams(FileSystemGetFileOrDirectoryParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemGetFileOrDirectoryParams()) FileSystemGetFileOrDirectoryParams(std::move(aOther));
    mType = TFileSystemGetFileOrDirectoryParams;
}

MOZ_IMPLICIT FileSystemParams::FileSystemParams(const FileSystemParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TFileSystemGetDirectoryListingParams:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemGetDirectoryListingParams()) FileSystemGetDirectoryListingParams((aOther).get_FileSystemGetDirectoryListingParams());
            break;
        }
    case TFileSystemGetFilesParams:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemGetFilesParams()) FileSystemGetFilesParams((aOther).get_FileSystemGetFilesParams());
            break;
        }
    case TFileSystemGetFileOrDirectoryParams:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemGetFileOrDirectoryParams()) FileSystemGetFileOrDirectoryParams((aOther).get_FileSystemGetFileOrDirectoryParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT FileSystemParams::FileSystemParams(FileSystemParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TFileSystemGetDirectoryListingParams:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemGetDirectoryListingParams()) FileSystemGetDirectoryListingParams(std::move((aOther).get_FileSystemGetDirectoryListingParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemGetFilesParams:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemGetFilesParams()) FileSystemGetFilesParams(std::move((aOther).get_FileSystemGetFilesParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemGetFileOrDirectoryParams:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemGetFileOrDirectoryParams()) FileSystemGetFileOrDirectoryParams(std::move((aOther).get_FileSystemGetFileOrDirectoryParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

FileSystemParams::~FileSystemParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto FileSystemParams::operator=(const FileSystemGetDirectoryListingParams& aRhs) -> FileSystemParams&
{
    if (MaybeDestroy(TFileSystemGetDirectoryListingParams)) {
        new (mozilla::KnownNotNull, ptr_FileSystemGetDirectoryListingParams()) FileSystemGetDirectoryListingParams;
    }
    (*(ptr_FileSystemGetDirectoryListingParams())) = aRhs;
    mType = TFileSystemGetDirectoryListingParams;
    return (*(this));
}

auto FileSystemParams::operator=(FileSystemGetDirectoryListingParams&& aRhs) -> FileSystemParams&
{
    if (MaybeDestroy(TFileSystemGetDirectoryListingParams)) {
        new (mozilla::KnownNotNull, ptr_FileSystemGetDirectoryListingParams()) FileSystemGetDirectoryListingParams;
    }
    (*(ptr_FileSystemGetDirectoryListingParams())) = std::move(aRhs);
    mType = TFileSystemGetDirectoryListingParams;
    return (*(this));
}

auto FileSystemParams::operator=(const FileSystemGetFilesParams& aRhs) -> FileSystemParams&
{
    if (MaybeDestroy(TFileSystemGetFilesParams)) {
        new (mozilla::KnownNotNull, ptr_FileSystemGetFilesParams()) FileSystemGetFilesParams;
    }
    (*(ptr_FileSystemGetFilesParams())) = aRhs;
    mType = TFileSystemGetFilesParams;
    return (*(this));
}

auto FileSystemParams::operator=(FileSystemGetFilesParams&& aRhs) -> FileSystemParams&
{
    if (MaybeDestroy(TFileSystemGetFilesParams)) {
        new (mozilla::KnownNotNull, ptr_FileSystemGetFilesParams()) FileSystemGetFilesParams;
    }
    (*(ptr_FileSystemGetFilesParams())) = std::move(aRhs);
    mType = TFileSystemGetFilesParams;
    return (*(this));
}

auto FileSystemParams::operator=(const FileSystemGetFileOrDirectoryParams& aRhs) -> FileSystemParams&
{
    if (MaybeDestroy(TFileSystemGetFileOrDirectoryParams)) {
        new (mozilla::KnownNotNull, ptr_FileSystemGetFileOrDirectoryParams()) FileSystemGetFileOrDirectoryParams;
    }
    (*(ptr_FileSystemGetFileOrDirectoryParams())) = aRhs;
    mType = TFileSystemGetFileOrDirectoryParams;
    return (*(this));
}

auto FileSystemParams::operator=(FileSystemGetFileOrDirectoryParams&& aRhs) -> FileSystemParams&
{
    if (MaybeDestroy(TFileSystemGetFileOrDirectoryParams)) {
        new (mozilla::KnownNotNull, ptr_FileSystemGetFileOrDirectoryParams()) FileSystemGetFileOrDirectoryParams;
    }
    (*(ptr_FileSystemGetFileOrDirectoryParams())) = std::move(aRhs);
    mType = TFileSystemGetFileOrDirectoryParams;
    return (*(this));
}

auto FileSystemParams::operator=(const FileSystemParams& aRhs) -> FileSystemParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileSystemGetDirectoryListingParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemGetDirectoryListingParams()) FileSystemGetDirectoryListingParams;
            }
            (*(ptr_FileSystemGetDirectoryListingParams())) = (aRhs).get_FileSystemGetDirectoryListingParams();
            break;
        }
    case TFileSystemGetFilesParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemGetFilesParams()) FileSystemGetFilesParams;
            }
            (*(ptr_FileSystemGetFilesParams())) = (aRhs).get_FileSystemGetFilesParams();
            break;
        }
    case TFileSystemGetFileOrDirectoryParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemGetFileOrDirectoryParams()) FileSystemGetFileOrDirectoryParams;
            }
            (*(ptr_FileSystemGetFileOrDirectoryParams())) = (aRhs).get_FileSystemGetFileOrDirectoryParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto FileSystemParams::operator=(FileSystemParams&& aRhs) -> FileSystemParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileSystemGetDirectoryListingParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemGetDirectoryListingParams()) FileSystemGetDirectoryListingParams;
            }
            (*(ptr_FileSystemGetDirectoryListingParams())) = std::move((aRhs).get_FileSystemGetDirectoryListingParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemGetFilesParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemGetFilesParams()) FileSystemGetFilesParams;
            }
            (*(ptr_FileSystemGetFilesParams())) = std::move((aRhs).get_FileSystemGetFilesParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemGetFileOrDirectoryParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemGetFileOrDirectoryParams()) FileSystemGetFileOrDirectoryParams;
            }
            (*(ptr_FileSystemGetFileOrDirectoryParams())) = std::move((aRhs).get_FileSystemGetFileOrDirectoryParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::FileSystemParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'FileSystemParams'
    (aMsg)->WriteSentinel(896075370);

    switch (type) {
    case union__::TFileSystemGetDirectoryListingParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemGetDirectoryListingParams());
            // Sentinel = 'TFileSystemGetDirectoryListingParams'
            (aMsg)->WriteSentinel(109252205);
            return;
        }
    case union__::TFileSystemGetFilesParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemGetFilesParams());
            // Sentinel = 'TFileSystemGetFilesParams'
            (aMsg)->WriteSentinel(2104887761);
            return;
        }
    case union__::TFileSystemGetFileOrDirectoryParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemGetFileOrDirectoryParams());
            // Sentinel = 'TFileSystemGetFileOrDirectoryParams'
            (aMsg)->WriteSentinel(4098035156);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::FileSystemParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::FileSystemParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union FileSystemParams");
        return false;
    }
    // Sentinel = 'FileSystemParams'
    if ((!((aMsg)->ReadSentinel(aIter, 896075370)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union FileSystemParams");
        return false;
    }

    switch (type) {
    case union__::TFileSystemGetDirectoryListingParams:
        {
            mozilla::dom::FileSystemGetDirectoryListingParams tmp = mozilla::dom::FileSystemGetDirectoryListingParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemGetDirectoryListingParams())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemGetDirectoryListingParams of union FileSystemParams");
                return false;
            }
            // Sentinel = 'TFileSystemGetDirectoryListingParams'
            if ((!((aMsg)->ReadSentinel(aIter, 109252205)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemGetDirectoryListingParams of union FileSystemParams");
                return false;
            }
            return true;
        }
    case union__::TFileSystemGetFilesParams:
        {
            mozilla::dom::FileSystemGetFilesParams tmp = mozilla::dom::FileSystemGetFilesParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemGetFilesParams())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemGetFilesParams of union FileSystemParams");
                return false;
            }
            // Sentinel = 'TFileSystemGetFilesParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2104887761)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemGetFilesParams of union FileSystemParams");
                return false;
            }
            return true;
        }
    case union__::TFileSystemGetFileOrDirectoryParams:
        {
            mozilla::dom::FileSystemGetFileOrDirectoryParams tmp = mozilla::dom::FileSystemGetFileOrDirectoryParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemGetFileOrDirectoryParams())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemGetFileOrDirectoryParams of union FileSystemParams");
                return false;
            }
            // Sentinel = 'TFileSystemGetFileOrDirectoryParams'
            if ((!((aMsg)->ReadSentinel(aIter, 4098035156)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemGetFileOrDirectoryParams of union FileSystemParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
