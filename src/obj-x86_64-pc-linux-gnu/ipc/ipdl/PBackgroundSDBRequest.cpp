//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundSDBConnectionParent.h"
#include "mozilla/dom/PBackgroundSDBConnectionChild.h"
#include "mozilla/dom/PBackgroundSDBRequest.h"
#include "mozilla/dom/PBackgroundSDBRequestParent.h"
#include "mozilla/dom/PBackgroundSDBRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PBackgroundSDBRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundSDBRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundSDBRequestChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PBackgroundSDBRequest
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestOpenResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestOpenResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::SDBRequestOpenResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestSeekResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestSeekResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::SDBRequestSeekResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestReadResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestReadResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::SDBRequestReadResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsCString) member of 'SDBRequestReadResponse'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsCString) member of 'SDBRequestReadResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestWriteResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestWriteResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::SDBRequestWriteResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestCloseResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestCloseResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::SDBRequestCloseResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union SDBRequestResponse|
//
namespace mozilla {
namespace dom {
auto SDBRequestResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TSDBRequestOpenResponse:
        {
            (ptr_SDBRequestOpenResponse())->~SDBRequestOpenResponse__tdef();
            break;
        }
    case TSDBRequestSeekResponse:
        {
            (ptr_SDBRequestSeekResponse())->~SDBRequestSeekResponse__tdef();
            break;
        }
    case TSDBRequestReadResponse:
        {
            (ptr_SDBRequestReadResponse())->~SDBRequestReadResponse__tdef();
            break;
        }
    case TSDBRequestWriteResponse:
        {
            (ptr_SDBRequestWriteResponse())->~SDBRequestWriteResponse__tdef();
            break;
        }
    case TSDBRequestCloseResponse:
        {
            (ptr_SDBRequestCloseResponse())->~SDBRequestCloseResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(const SDBRequestOpenResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestOpenResponse()) SDBRequestOpenResponse(aOther);
    mType = TSDBRequestOpenResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(SDBRequestOpenResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestOpenResponse()) SDBRequestOpenResponse(std::move(aOther));
    mType = TSDBRequestOpenResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(const SDBRequestSeekResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestSeekResponse()) SDBRequestSeekResponse(aOther);
    mType = TSDBRequestSeekResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(SDBRequestSeekResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestSeekResponse()) SDBRequestSeekResponse(std::move(aOther));
    mType = TSDBRequestSeekResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(const SDBRequestReadResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestReadResponse()) SDBRequestReadResponse(aOther);
    mType = TSDBRequestReadResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(SDBRequestReadResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestReadResponse()) SDBRequestReadResponse(std::move(aOther));
    mType = TSDBRequestReadResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(const SDBRequestWriteResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestWriteResponse()) SDBRequestWriteResponse(aOther);
    mType = TSDBRequestWriteResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(SDBRequestWriteResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestWriteResponse()) SDBRequestWriteResponse(std::move(aOther));
    mType = TSDBRequestWriteResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(const SDBRequestCloseResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestCloseResponse()) SDBRequestCloseResponse(aOther);
    mType = TSDBRequestCloseResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(SDBRequestCloseResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestCloseResponse()) SDBRequestCloseResponse(std::move(aOther));
    mType = TSDBRequestCloseResponse;
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(const SDBRequestResponse& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TSDBRequestOpenResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestOpenResponse()) SDBRequestOpenResponse((aOther).get_SDBRequestOpenResponse());
            break;
        }
    case TSDBRequestSeekResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestSeekResponse()) SDBRequestSeekResponse((aOther).get_SDBRequestSeekResponse());
            break;
        }
    case TSDBRequestReadResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestReadResponse()) SDBRequestReadResponse((aOther).get_SDBRequestReadResponse());
            break;
        }
    case TSDBRequestWriteResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestWriteResponse()) SDBRequestWriteResponse((aOther).get_SDBRequestWriteResponse());
            break;
        }
    case TSDBRequestCloseResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestCloseResponse()) SDBRequestCloseResponse((aOther).get_SDBRequestCloseResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT SDBRequestResponse::SDBRequestResponse(SDBRequestResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestOpenResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestOpenResponse()) SDBRequestOpenResponse(std::move((aOther).get_SDBRequestOpenResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestSeekResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestSeekResponse()) SDBRequestSeekResponse(std::move((aOther).get_SDBRequestSeekResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestReadResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestReadResponse()) SDBRequestReadResponse(std::move((aOther).get_SDBRequestReadResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestWriteResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestWriteResponse()) SDBRequestWriteResponse(std::move((aOther).get_SDBRequestWriteResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestCloseResponse:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestCloseResponse()) SDBRequestCloseResponse(std::move((aOther).get_SDBRequestCloseResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

SDBRequestResponse::~SDBRequestResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto SDBRequestResponse::operator=(const nsresult& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto SDBRequestResponse::operator=(nsresult&& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto SDBRequestResponse::operator=(const SDBRequestOpenResponse& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestOpenResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestOpenResponse()) SDBRequestOpenResponse;
    }
    (*(ptr_SDBRequestOpenResponse())) = aRhs;
    mType = TSDBRequestOpenResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(SDBRequestOpenResponse&& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestOpenResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestOpenResponse()) SDBRequestOpenResponse;
    }
    (*(ptr_SDBRequestOpenResponse())) = std::move(aRhs);
    mType = TSDBRequestOpenResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(const SDBRequestSeekResponse& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestSeekResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestSeekResponse()) SDBRequestSeekResponse;
    }
    (*(ptr_SDBRequestSeekResponse())) = aRhs;
    mType = TSDBRequestSeekResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(SDBRequestSeekResponse&& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestSeekResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestSeekResponse()) SDBRequestSeekResponse;
    }
    (*(ptr_SDBRequestSeekResponse())) = std::move(aRhs);
    mType = TSDBRequestSeekResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(const SDBRequestReadResponse& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestReadResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestReadResponse()) SDBRequestReadResponse;
    }
    (*(ptr_SDBRequestReadResponse())) = aRhs;
    mType = TSDBRequestReadResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(SDBRequestReadResponse&& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestReadResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestReadResponse()) SDBRequestReadResponse;
    }
    (*(ptr_SDBRequestReadResponse())) = std::move(aRhs);
    mType = TSDBRequestReadResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(const SDBRequestWriteResponse& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestWriteResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestWriteResponse()) SDBRequestWriteResponse;
    }
    (*(ptr_SDBRequestWriteResponse())) = aRhs;
    mType = TSDBRequestWriteResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(SDBRequestWriteResponse&& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestWriteResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestWriteResponse()) SDBRequestWriteResponse;
    }
    (*(ptr_SDBRequestWriteResponse())) = std::move(aRhs);
    mType = TSDBRequestWriteResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(const SDBRequestCloseResponse& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestCloseResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestCloseResponse()) SDBRequestCloseResponse;
    }
    (*(ptr_SDBRequestCloseResponse())) = aRhs;
    mType = TSDBRequestCloseResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(SDBRequestCloseResponse&& aRhs) -> SDBRequestResponse&
{
    if (MaybeDestroy(TSDBRequestCloseResponse)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestCloseResponse()) SDBRequestCloseResponse;
    }
    (*(ptr_SDBRequestCloseResponse())) = std::move(aRhs);
    mType = TSDBRequestCloseResponse;
    return (*(this));
}

auto SDBRequestResponse::operator=(const SDBRequestResponse& aRhs) -> SDBRequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TSDBRequestOpenResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestOpenResponse()) SDBRequestOpenResponse;
            }
            (*(ptr_SDBRequestOpenResponse())) = (aRhs).get_SDBRequestOpenResponse();
            break;
        }
    case TSDBRequestSeekResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestSeekResponse()) SDBRequestSeekResponse;
            }
            (*(ptr_SDBRequestSeekResponse())) = (aRhs).get_SDBRequestSeekResponse();
            break;
        }
    case TSDBRequestReadResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestReadResponse()) SDBRequestReadResponse;
            }
            (*(ptr_SDBRequestReadResponse())) = (aRhs).get_SDBRequestReadResponse();
            break;
        }
    case TSDBRequestWriteResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestWriteResponse()) SDBRequestWriteResponse;
            }
            (*(ptr_SDBRequestWriteResponse())) = (aRhs).get_SDBRequestWriteResponse();
            break;
        }
    case TSDBRequestCloseResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestCloseResponse()) SDBRequestCloseResponse;
            }
            (*(ptr_SDBRequestCloseResponse())) = (aRhs).get_SDBRequestCloseResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto SDBRequestResponse::operator=(SDBRequestResponse&& aRhs) -> SDBRequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestOpenResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestOpenResponse()) SDBRequestOpenResponse;
            }
            (*(ptr_SDBRequestOpenResponse())) = std::move((aRhs).get_SDBRequestOpenResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestSeekResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestSeekResponse()) SDBRequestSeekResponse;
            }
            (*(ptr_SDBRequestSeekResponse())) = std::move((aRhs).get_SDBRequestSeekResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestReadResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestReadResponse()) SDBRequestReadResponse;
            }
            (*(ptr_SDBRequestReadResponse())) = std::move((aRhs).get_SDBRequestReadResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestWriteResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestWriteResponse()) SDBRequestWriteResponse;
            }
            (*(ptr_SDBRequestWriteResponse())) = std::move((aRhs).get_SDBRequestWriteResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestCloseResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestCloseResponse()) SDBRequestCloseResponse;
            }
            (*(ptr_SDBRequestCloseResponse())) = std::move((aRhs).get_SDBRequestCloseResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::SDBRequestResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'SDBRequestResponse'
    (aMsg)->WriteSentinel(1065879314);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TSDBRequestOpenResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestOpenResponse());
            // Sentinel = 'TSDBRequestOpenResponse'
            (aMsg)->WriteSentinel(1718946040);
            return;
        }
    case union__::TSDBRequestSeekResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestSeekResponse());
            // Sentinel = 'TSDBRequestSeekResponse'
            (aMsg)->WriteSentinel(1712392430);
            return;
        }
    case union__::TSDBRequestReadResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestReadResponse());
            // Sentinel = 'TSDBRequestReadResponse'
            (aMsg)->WriteSentinel(1704855778);
            return;
        }
    case union__::TSDBRequestWriteResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestWriteResponse());
            // Sentinel = 'TSDBRequestWriteResponse'
            (aMsg)->WriteSentinel(1888684401);
            return;
        }
    case union__::TSDBRequestCloseResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestCloseResponse());
            // Sentinel = 'TSDBRequestCloseResponse'
            (aMsg)->WriteSentinel(1870596444);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::SDBRequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::SDBRequestResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union SDBRequestResponse");
        return false;
    }
    // Sentinel = 'SDBRequestResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 1065879314)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union SDBRequestResponse");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union SDBRequestResponse");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union SDBRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestOpenResponse:
        {
            mozilla::dom::SDBRequestOpenResponse tmp = mozilla::dom::SDBRequestOpenResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestOpenResponse())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestOpenResponse of union SDBRequestResponse");
                return false;
            }
            // Sentinel = 'TSDBRequestOpenResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1718946040)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestOpenResponse of union SDBRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestSeekResponse:
        {
            mozilla::dom::SDBRequestSeekResponse tmp = mozilla::dom::SDBRequestSeekResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestSeekResponse())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestSeekResponse of union SDBRequestResponse");
                return false;
            }
            // Sentinel = 'TSDBRequestSeekResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1712392430)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestSeekResponse of union SDBRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestReadResponse:
        {
            mozilla::dom::SDBRequestReadResponse tmp = mozilla::dom::SDBRequestReadResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestReadResponse())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestReadResponse of union SDBRequestResponse");
                return false;
            }
            // Sentinel = 'TSDBRequestReadResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1704855778)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestReadResponse of union SDBRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestWriteResponse:
        {
            mozilla::dom::SDBRequestWriteResponse tmp = mozilla::dom::SDBRequestWriteResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestWriteResponse())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestWriteResponse of union SDBRequestResponse");
                return false;
            }
            // Sentinel = 'TSDBRequestWriteResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1888684401)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestWriteResponse of union SDBRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestCloseResponse:
        {
            mozilla::dom::SDBRequestCloseResponse tmp = mozilla::dom::SDBRequestCloseResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestCloseResponse())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestCloseResponse of union SDBRequestResponse");
                return false;
            }
            // Sentinel = 'TSDBRequestCloseResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1870596444)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestCloseResponse of union SDBRequestResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
