//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PInProcessChild.h"
#include "mozilla/dom/InProcessChild.h"

#include "mozilla/dom/PWindowGlobalChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PInProcessChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PInProcessChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PInProcessChild::EnteredCxxStack() -> void
{
}

auto PInProcessChild::ExitedCxxStack() -> void
{
}

auto PInProcessChild::EnteredCall() -> void
{
}

auto PInProcessChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PInProcessChild::PInProcessChild() :
    mozilla::ipc::IToplevelProtocol("PInProcessChild", PInProcessMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PInProcessChild);
}

PInProcessChild::~PInProcessChild()
{
    MOZ_COUNT_DTOR(PInProcessChild);
}

auto PInProcessChild::ManagedPWindowGlobalChild(nsTArray<PWindowGlobalChild*>& aArr) const -> void
{
    mManagedPWindowGlobalChild.ToArray(aArr);
}

auto PInProcessChild::ManagedPWindowGlobalChild() const -> const ManagedContainer<PWindowGlobalChild>&
{
    return mManagedPWindowGlobalChild;
}

auto PInProcessChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPWindowGlobalChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPWindowGlobalChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PInProcessChild::OpenPWindowGlobalEndpoint(PWindowGlobalChild* aActor) -> ManagedEndpoint<PWindowGlobalParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWindowGlobalChild actor");
        return ManagedEndpoint<PWindowGlobalParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWindowGlobalChild.PutEntry(aActor);

    return ManagedEndpoint<PWindowGlobalParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PInProcessChild::BindPWindowGlobalEndpoint(
        ManagedEndpoint<PWindowGlobalChild> aEndpoint,
        PWindowGlobalChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWindowGlobalChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWindowGlobalChild.PutEntry(aActor);

    return true;
}

auto PInProcessChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PWindowGlobalMsgStart:
{
            PWindowGlobalChild* actor = static_cast<PWindowGlobalChild*>(aListener);
            auto& container = mManagedPWindowGlobalChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PInProcessChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    default:
        FatalError("unreached");
        return;
    }
}

auto PInProcessChild::OnMessageReceived(const Message& msg__) -> PInProcessChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PInProcessChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PInProcessChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PInProcessChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PInProcessChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PInProcessChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PInProcessChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PInProcessChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PInProcessChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PInProcessChild::ClearSubtree() -> void
{
    for (auto it = mManagedPWindowGlobalChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWindowGlobalChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWindowGlobalChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWindowGlobalChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PInProcessChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PInProcessChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PInProcess", PInProcessMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PInProcessChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
