//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PRemoteDecoderManagerChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/RemoteDecoderManagerChild.h"
#include "mozilla/dom/MediaIPCUtils.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/LayersMessageUtils.h"

#include "mozilla/layers/PTextureChild.h"
#include "mozilla/PRemoteDecoderChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PRemoteDecoderManagerChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PRemoteDecoderManagerChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PRemoteDecoderManagerChild::EnteredCxxStack() -> void
{
}

auto PRemoteDecoderManagerChild::ExitedCxxStack() -> void
{
}

auto PRemoteDecoderManagerChild::EnteredCall() -> void
{
}

auto PRemoteDecoderManagerChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PRemoteDecoderManagerChild::PRemoteDecoderManagerChild() :
    mozilla::ipc::IToplevelProtocol("PRemoteDecoderManagerChild", PRemoteDecoderManagerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PRemoteDecoderManagerChild);
}

PRemoteDecoderManagerChild::~PRemoteDecoderManagerChild()
{
    MOZ_COUNT_DTOR(PRemoteDecoderManagerChild);
}

auto PRemoteDecoderManagerChild::ManagedPRemoteDecoderChild(nsTArray<PRemoteDecoderChild*>& aArr) const -> void
{
    mManagedPRemoteDecoderChild.ToArray(aArr);
}

auto PRemoteDecoderManagerChild::ManagedPRemoteDecoderChild() const -> const ManagedContainer<PRemoteDecoderChild>&
{
    return mManagedPRemoteDecoderChild;
}

auto PRemoteDecoderManagerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPRemoteDecoderChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPRemoteDecoderChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PRemoteDecoderManagerChild::OpenPRemoteDecoderEndpoint(PRemoteDecoderChild* aActor) -> ManagedEndpoint<PRemoteDecoderParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteDecoderChild actor");
        return ManagedEndpoint<PRemoteDecoderParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPRemoteDecoderChild.PutEntry(aActor);

    return ManagedEndpoint<PRemoteDecoderParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PRemoteDecoderManagerChild::BindPRemoteDecoderEndpoint(
        ManagedEndpoint<PRemoteDecoderChild> aEndpoint,
        PRemoteDecoderChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteDecoderChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPRemoteDecoderChild.PutEntry(aActor);

    return true;
}

auto PRemoteDecoderManagerChild::SendPRemoteDecoderConstructor(
        const RemoteDecoderInfoIPDL& info,
        const OptionSet& options,
        const mozilla::Maybe<TextureFactoryIdentifier>& identifier) -> PRemoteDecoderChild*
{
    PRemoteDecoderChild* actor = (static_cast<RemoteDecoderManagerChild*>(this))->AllocPRemoteDecoderChild(info, options, identifier);
    return SendPRemoteDecoderConstructor(actor, info, options, identifier);
}

auto PRemoteDecoderManagerChild::SendPRemoteDecoderConstructor(
        PRemoteDecoderChild* actor,
        const RemoteDecoderInfoIPDL& info,
        const OptionSet& options,
        const mozilla::Maybe<TextureFactoryIdentifier>& identifier) -> PRemoteDecoderChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PRemoteDecoderChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPRemoteDecoderChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PRemoteDecoderManager::Msg_PRemoteDecoderConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);
    WriteIPDLParam(msg__, this, options);
    // Sentinel = 'options'
    (msg__)->WriteSentinel(204735245);
    WriteIPDLParam(msg__, this, identifier);
    // Sentinel = 'identifier'
    (msg__)->WriteSentinel(379978788);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoderManager::Msg_PRemoteDecoderConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PRemoteDecoderChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PRemoteDecoderMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PRemoteDecoderManagerChild::SendReadback(
        const SurfaceDescriptorGPUVideo& sd,
        SurfaceDescriptor* aResult) -> bool
{
    IPC::Message* msg__ = PRemoteDecoderManager::Msg_Readback(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, sd);
    // Sentinel = 'sd'
    (msg__)->WriteSentinel(21758168);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoderManager::Msg_Readback", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PRemoteDecoderManager::Msg_Readback", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderManagerChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'SurfaceDescriptor'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptor'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PRemoteDecoderManagerChild::SendDeallocateSurfaceDescriptorGPUVideo(const SurfaceDescriptorGPUVideo& sd) -> bool
{
    IPC::Message* msg__ = PRemoteDecoderManager::Msg_DeallocateSurfaceDescriptorGPUVideo(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, sd);
    // Sentinel = 'sd'
    (msg__)->WriteSentinel(21758168);




    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoderManager::Msg_DeallocateSurfaceDescriptorGPUVideo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemoteDecoderManagerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PRemoteDecoderMsgStart:
{
            PRemoteDecoderChild* actor = static_cast<PRemoteDecoderChild*>(aListener);
            auto& container = mManagedPRemoteDecoderChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PRemoteDecoderManagerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PRemoteDecoderMsgStart:
        static_cast<RemoteDecoderManagerChild*>(this)->DeallocPRemoteDecoderChild(static_cast<PRemoteDecoderChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PRemoteDecoderManagerChild::OnMessageReceived(const Message& msg__) -> PRemoteDecoderManagerChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderManagerChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PRemoteDecoderManager::Reply_PRemoteDecoderConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PRemoteDecoderManagerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteDecoderManagerChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderManagerChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PRemoteDecoderManagerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteDecoderManagerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemoteDecoderManagerChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PRemoteDecoderManagerChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PRemoteDecoderManagerChild::ClearSubtree() -> void
{
    for (auto it = mManagedPRemoteDecoderChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPRemoteDecoderChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPRemoteDecoderChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPRemoteDecoderChild.Clear();

}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PRemoteDecoderManagerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PRemoteDecoderManagerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemoteDecoderManager", PRemoteDecoderManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PRemoteDecoderManagerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
