//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PDocumentChannelChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/DocumentChannelChild.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "nsHttpHeaderArray.h"

#include "mozilla/net/PNeckoChild.h"
#include "mozilla/extensions/PStreamFilterChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PDocumentChannelChild::PDocumentChannelChild() :
    mozilla::ipc::IProtocol(PDocumentChannelMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PDocumentChannelChild);
}

PDocumentChannelChild::~PDocumentChannelChild()
{
    MOZ_COUNT_DTOR(PDocumentChannelChild);
}

auto PDocumentChannelChild::Manager() const -> PNeckoChild*
{
    return static_cast<PNeckoChild*>(IProtocol::Manager());
}

auto PDocumentChannelChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PDocumentChannelChild::SendCancel(const nsresult& status) -> bool
{
    IPC::Message* msg__ = PDocumentChannel::Msg_Cancel(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocumentChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocumentChannel::Msg_Cancel", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocumentChannelChild::Send__delete__(PDocumentChannelChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PDocumentChannel::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocumentChannelChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocumentChannel::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PDocumentChannelMsgStart, actor);
    return sendok__;
}

auto PDocumentChannelChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PDocumentChannelChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PDocumentChannelChild::OnMessageReceived(const Message& msg__) -> PDocumentChannelChild::Result
{
    switch (msg__.type()) {
    case PDocumentChannel::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PDocumentChannel::Msg_FailedAsyncOpen__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocumentChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocumentChannel::Msg_FailedAsyncOpen", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<DocumentChannelChild*>(this))->RecvFailedAsyncOpen(std::move(status))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocumentChannel::Msg_DisconnectChildListeners__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocumentChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocumentChannel::Msg_DisconnectChildListeners", OTHER);

            PickleIterator iter__{msg__};
            nsresult aStatus{};
            nsresult aLoadGroupReason{};
            bool aSwitchedProcess{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadGroupReason)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadGroupReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 879822423)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSwitchedProcess)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aSwitchedProcess'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 912066172)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<DocumentChannelChild*>(this))->RecvDisconnectChildListeners(std::move(aStatus), std::move(aLoadGroupReason), std::move(aSwitchedProcess))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocumentChannel::Msg_RedirectToRealChannel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocumentChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocumentChannel::Msg_RedirectToRealChannel", OTHER);

            PickleIterator iter__{msg__};
            RedirectToRealChannelArgs args{};
            nsTArray<Endpoint<mozilla::extensions::PStreamFilterParent>> aEndpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(args)))))) {
                FatalError("Error deserializing 'RedirectToRealChannelArgs'");
                return MsgValueError;
            }
            // Sentinel = 'args'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69140910)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RedirectToRealChannelArgs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::extensions::PStreamFilterParent>[]'");
                return MsgValueError;
            }
            // Sentinel = 'aEndpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::extensions::PStreamFilterParent>[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            RedirectToRealChannelResolver resolver = [proxy__, seqno__, id__](const nsresult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PDocumentChannelChild* self__ = static_cast<PDocumentChannelChild*>(proxy__->Get());

                IPC::Message* reply__ = PDocumentChannel::Reply_RedirectToRealChannel(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'rv'
                (reply__)->WriteSentinel(22806761);

                if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PDocumentChannelChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<DocumentChannelChild*>(this))->RecvRedirectToRealChannel(std::move(args), std::move(aEndpoint), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocumentChannel::Msg_UpgradeObjectLoad__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocumentChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocumentChannel::Msg_UpgradeObjectLoad", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            UpgradeObjectLoadResolver resolver = [proxy__, seqno__, id__](const MaybeDiscardedBrowsingContext& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PDocumentChannelChild* self__ = static_cast<PDocumentChannelChild*>(proxy__->Get());

                IPC::Message* reply__ = PDocumentChannel::Reply_UpgradeObjectLoad(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'frameContext'
                (reply__)->WriteSentinel(528024817);

                if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PDocumentChannelChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<DocumentChannelChild*>(this))->RecvUpgradeObjectLoad(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PDocumentChannelChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PDocumentChannelChild::Result
{
    return MsgNotKnown;
}

auto PDocumentChannelChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PDocumentChannelChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PDocumentChannelChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PDocumentChannelChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PDocumentChannelChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PDocumentChannel", PDocumentChannelMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PDocumentChannelChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
