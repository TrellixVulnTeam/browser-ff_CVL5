//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PChromiumCDMParent.h"
#include "ChromiumCDMParent.h"
#include "GMPMessageUtils.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPContentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PChromiumCDMParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PChromiumCDMParent::PChromiumCDMParent() :
    mozilla::ipc::IProtocol(PChromiumCDMMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PChromiumCDMParent);
}

PChromiumCDMParent::~PChromiumCDMParent()
{
    MOZ_COUNT_DTOR(PChromiumCDMParent);
}

auto PChromiumCDMParent::Manager() const -> PGMPContentParent*
{
    return static_cast<PGMPContentParent*>(IProtocol::Manager());
}

auto PChromiumCDMParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PChromiumCDMParent::SendInit(
        const bool& aAllowDistinctiveIdentifier,
        const bool& aAllowPersistentState,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PChromiumCDM::Msg_Init(Id());

    WriteIPDLParam(msg__, this, aAllowDistinctiveIdentifier);
    // Sentinel = 'aAllowDistinctiveIdentifier'
    (msg__)->WriteSentinel(2530609898);
    WriteIPDLParam(msg__, this, aAllowPersistentState);
    // Sentinel = 'aAllowPersistentState'
    (msg__)->WriteSentinel(1556285587);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Init", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PChromiumCDMParent::SendInit(
        const bool& aAllowDistinctiveIdentifier,
        const bool& aAllowPersistentState) -> RefPtr<InitPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendInit(std::move(aAllowDistinctiveIdentifier), std::move(aAllowPersistentState), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PChromiumCDMParent::SendGetStatusForPolicy(
        const uint32_t& aPromiseId,
        const HdcpVersion& aMinHdcpVersion) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_GetStatusForPolicy(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aMinHdcpVersion);
    // Sentinel = 'aMinHdcpVersion'
    (msg__)->WriteSentinel(766576107);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_GetStatusForPolicy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendSetServerCertificate(
        const uint32_t& aPromiseId,
        const nsTArray<uint8_t>& aServerCert) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_SetServerCertificate(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aServerCert);
    // Sentinel = 'aServerCert'
    (msg__)->WriteSentinel(435553383);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_SetServerCertificate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendCreateSessionAndGenerateRequest(
        const uint32_t& aPromiseId,
        const uint32_t& aSessionType,
        const uint32_t& aInitDataType,
        const nsTArray<uint8_t>& aInitData) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_CreateSessionAndGenerateRequest(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aSessionType);
    // Sentinel = 'aSessionType'
    (msg__)->WriteSentinel(526189800);
    WriteIPDLParam(msg__, this, aInitDataType);
    // Sentinel = 'aInitDataType'
    (msg__)->WriteSentinel(582092050);
    WriteIPDLParam(msg__, this, aInitData);
    // Sentinel = 'aInitData'
    (msg__)->WriteSentinel(284296048);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_CreateSessionAndGenerateRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendLoadSession(
        const uint32_t& aPromiseId,
        const uint32_t& aSessionType,
        const nsCString& aSessionId) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_LoadSession(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aSessionType);
    // Sentinel = 'aSessionType'
    (msg__)->WriteSentinel(526189800);
    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_LoadSession", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendUpdateSession(
        const uint32_t& aPromiseId,
        const nsCString& aSessionId,
        const nsTArray<uint8_t>& aResponse) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_UpdateSession(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aResponse);
    // Sentinel = 'aResponse'
    (msg__)->WriteSentinel(301466545);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_UpdateSession", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendCloseSession(
        const uint32_t& aPromiseId,
        const nsCString& aSessionId) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_CloseSession(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_CloseSession", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendRemoveSession(
        const uint32_t& aPromiseId,
        const nsCString& aSessionId) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_RemoveSession(Id());

    WriteIPDLParam(msg__, this, aPromiseId);
    // Sentinel = 'aPromiseId'
    (msg__)->WriteSentinel(365495278);
    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_RemoveSession", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendDecrypt(
        const uint32_t& aId,
        const CDMInputBuffer& aBuffer) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_Decrypt(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);
    WriteIPDLParam(msg__, this, aBuffer);
    // Sentinel = 'aBuffer'
    (msg__)->WriteSentinel(176751292);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Decrypt", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendInitializeVideoDecoder(const CDMVideoDecoderConfig& aConfig) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_InitializeVideoDecoder(Id());

    WriteIPDLParam(msg__, this, aConfig);
    // Sentinel = 'aConfig'
    (msg__)->WriteSentinel(177078968);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_InitializeVideoDecoder", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendDeinitializeVideoDecoder() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_DeinitializeVideoDecoder(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DeinitializeVideoDecoder", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendResetVideoDecoder() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_ResetVideoDecoder(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_ResetVideoDecoder", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendDecryptAndDecodeFrame(const CDMInputBuffer& aBuffer) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_DecryptAndDecodeFrame(Id());

    WriteIPDLParam(msg__, this, aBuffer);
    // Sentinel = 'aBuffer'
    (msg__)->WriteSentinel(176751292);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecryptAndDecodeFrame", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendDrain() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_Drain(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Drain", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendDestroy() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_Destroy(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Destroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendGiveBuffer(Shmem&& aShmem) -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_GiveBuffer(Id());

    WriteIPDLParam(msg__, this, std::move(aShmem));
    // Sentinel = 'aShmem'
    (msg__)->WriteSentinel(134808156);




    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_GiveBuffer", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::SendPurgeShmems() -> bool
{
    IPC::Message* msg__ = PChromiumCDM::Msg_PurgeShmems(Id());





    if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PChromiumCDMParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PChromiumCDM::Msg_PurgeShmems", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PChromiumCDMParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PChromiumCDMParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PChromiumCDMParent::OnMessageReceived(const Message& msg__) -> PChromiumCDMParent::Result
{
    switch (msg__.type()) {
    case PChromiumCDM::Reply_Init__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Init", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool aSuccess{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSuccess)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'aSuccess'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236323643)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aSuccess));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PChromiumCDM::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PChromiumCDMParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PChromiumCDM'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PChromiumCDM'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PChromiumCDM'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PChromiumCDMMsgStart, actor);

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnResolvePromiseWithKeyStatus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnResolvePromiseWithKeyStatus", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            uint32_t aKeyStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKeyStatus)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aKeyStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358679567)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnResolvePromiseWithKeyStatus(std::move(aPromiseId), std::move(aKeyStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnResolveNewSessionPromise__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnResolveNewSessionPromise", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            nsCString aSessionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnResolveNewSessionPromise(std::move(aPromiseId), std::move(aSessionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnResolvePromise__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnResolvePromise", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnResolvePromise(std::move(aPromiseId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnRejectPromise__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnRejectPromise", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            uint32_t aException{};
            uint32_t aSystemCode{};
            nsCString aErrorMessage{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aException)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aException'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 362480657)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSystemCode)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSystemCode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 444466274)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aErrorMessage)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aErrorMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 601949489)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnRejectPromise(std::move(aPromiseId), std::move(aException), std::move(aSystemCode), std::move(aErrorMessage))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnSessionMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnSessionMessage", OTHER);

            PickleIterator iter__{msg__};
            nsCString aSessionId{};
            uint32_t aMessageType{};
            nsTArray<uint8_t> aMessage{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessageType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMessageType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 512099529)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnSessionMessage(std::move(aSessionId), std::move(aMessageType), std::move(aMessage))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnSessionKeysChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnSessionKeysChange", OTHER);

            PickleIterator iter__{msg__};
            nsCString aSessionId{};
            nsTArray<CDMKeyInformation> aKeysInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKeysInfo)))))) {
                FatalError("Error deserializing 'CDMKeyInformation[]'");
                return MsgValueError;
            }
            // Sentinel = 'aKeysInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 290128778)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CDMKeyInformation[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnSessionKeysChange(std::move(aSessionId), std::move(aKeysInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnExpirationChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnExpirationChange", OTHER);

            PickleIterator iter__{msg__};
            nsCString aSessionId{};
            double aSecondsSinceEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSecondsSinceEpoch)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aSecondsSinceEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1121126162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnExpirationChange(std::move(aSessionId), std::move(aSecondsSinceEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnSessionClosed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnSessionClosed", OTHER);

            PickleIterator iter__{msg__};
            nsCString aSessionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnSessionClosed(std::move(aSessionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_ResolveLoadSessionPromise__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_ResolveLoadSessionPromise", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseId{};
            bool aSuccessful{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365495278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSuccessful)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aSuccessful'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 441386114)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvResolveLoadSessionPromise(std::move(aPromiseId), std::move(aSuccessful))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_Decrypted__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Decrypted", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aId{};
            uint32_t aStatus{};
            Shmem aDecryptedData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDecryptedData)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'aDecryptedData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 687605120)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvDecrypted(std::move(aId), std::move(aStatus), std::move(aDecryptedData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_DecryptFailed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecryptFailed", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aId{};
            uint32_t aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvDecryptFailed(std::move(aId), std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_OnDecoderInitDone__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_OnDecoderInitDone", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvOnDecoderInitDone(std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_DecodedShmem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecodedShmem", OTHER);

            PickleIterator iter__{msg__};
            CDMVideoFrame aFrame{};
            Shmem aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrame)))))) {
                FatalError("Error deserializing 'CDMVideoFrame'");
                return MsgValueError;
            }
            // Sentinel = 'aFrame'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 131334733)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CDMVideoFrame'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvDecodedShmem(std::move(aFrame), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_DecodedData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecodedData", OTHER);

            PickleIterator iter__{msg__};
            CDMVideoFrame aFrame{};
            nsTArray<uint8_t> aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrame)))))) {
                FatalError("Error deserializing 'CDMVideoFrame'");
                return MsgValueError;
            }
            // Sentinel = 'aFrame'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 131334733)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CDMVideoFrame'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvDecodedData(std::move(aFrame), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_DecodeFailed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DecodeFailed", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvDecodeFailed(std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_ResetVideoDecoderComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_ResetVideoDecoderComplete", OTHER);

            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvResetVideoDecoderComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_DrainComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_DrainComplete", OTHER);

            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvDrainComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_Shutdown", OTHER);

            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PChromiumCDM::Msg_IncreaseShmemPoolSize__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PChromiumCDMParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PChromiumCDMParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PChromiumCDM::Msg_IncreaseShmemPoolSize", OTHER);

            if ((!((static_cast<ChromiumCDMParent*>(this))->RecvIncreaseShmemPoolSize()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PChromiumCDMParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PChromiumCDMParent::Result
{
    return MsgNotKnown;
}

auto PChromiumCDMParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PChromiumCDMParent::Result
{
    return MsgNotKnown;
}

auto PChromiumCDMParent::ClearSubtree() -> void
{
}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PChromiumCDMParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PChromiumCDMParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PChromiumCDM", PChromiumCDMMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PChromiumCDMParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
