//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PSpeechSynthesisChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/SpeechSynthesisChild.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/PSpeechSynthesisRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PSpeechSynthesisChild::PSpeechSynthesisChild() :
    mozilla::ipc::IProtocol(PSpeechSynthesisMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PSpeechSynthesisChild);
}

PSpeechSynthesisChild::~PSpeechSynthesisChild()
{
    MOZ_COUNT_DTOR(PSpeechSynthesisChild);
}

auto PSpeechSynthesisChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PSpeechSynthesisChild::ManagedPSpeechSynthesisRequestChild(nsTArray<PSpeechSynthesisRequestChild*>& aArr) const -> void
{
    mManagedPSpeechSynthesisRequestChild.ToArray(aArr);
}

auto PSpeechSynthesisChild::ManagedPSpeechSynthesisRequestChild() const -> const ManagedContainer<PSpeechSynthesisRequestChild>&
{
    return mManagedPSpeechSynthesisRequestChild;
}

auto PSpeechSynthesisChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPSpeechSynthesisRequestChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPSpeechSynthesisRequestChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PSpeechSynthesisChild::OpenPSpeechSynthesisRequestEndpoint(PSpeechSynthesisRequestChild* aActor) -> ManagedEndpoint<PSpeechSynthesisRequestParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisRequestChild actor");
        return ManagedEndpoint<PSpeechSynthesisRequestParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPSpeechSynthesisRequestChild.PutEntry(aActor);

    return ManagedEndpoint<PSpeechSynthesisRequestParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PSpeechSynthesisChild::BindPSpeechSynthesisRequestEndpoint(
        ManagedEndpoint<PSpeechSynthesisRequestChild> aEndpoint,
        PSpeechSynthesisRequestChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisRequestChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPSpeechSynthesisRequestChild.PutEntry(aActor);

    return true;
}

auto PSpeechSynthesisChild::Send__delete__(PSpeechSynthesisChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PSpeechSynthesis::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PSpeechSynthesisMsgStart, actor);
    return sendok__;
}

auto PSpeechSynthesisChild::SendPSpeechSynthesisRequestConstructor(
        const nsString& aText,
        const nsString& aUri,
        const nsString& aLang,
        const float& aVolume,
        const float& aRate,
        const float& aPitch,
        const bool& aIsChrome) -> PSpeechSynthesisRequestChild*
{
    PSpeechSynthesisRequestChild* actor = (static_cast<SpeechSynthesisChild*>(this))->AllocPSpeechSynthesisRequestChild(aText, aUri, aLang, aVolume, aRate, aPitch, aIsChrome);
    return SendPSpeechSynthesisRequestConstructor(actor, aText, aUri, aLang, aVolume, aRate, aPitch, aIsChrome);
}

auto PSpeechSynthesisChild::SendPSpeechSynthesisRequestConstructor(
        PSpeechSynthesisRequestChild* actor,
        const nsString& aText,
        const nsString& aUri,
        const nsString& aLang,
        const float& aVolume,
        const float& aRate,
        const float& aPitch,
        const bool& aIsChrome) -> PSpeechSynthesisRequestChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisRequestChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPSpeechSynthesisRequestChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PSpeechSynthesis::Msg_PSpeechSynthesisRequestConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aText);
    // Sentinel = 'aText'
    (msg__)->WriteSentinel(97321479);
    WriteIPDLParam(msg__, this, aUri);
    // Sentinel = 'aUri'
    (msg__)->WriteSentinel(64225682);
    WriteIPDLParam(msg__, this, aLang);
    // Sentinel = 'aLang'
    (msg__)->WriteSentinel(92275172);
    WriteIPDLParam(msg__, this, aVolume);
    // Sentinel = 'aVolume'
    (msg__)->WriteSentinel(187368154);
    WriteIPDLParam(msg__, this, aRate);
    // Sentinel = 'aRate'
    (msg__)->WriteSentinel(94503406);
    WriteIPDLParam(msg__, this, aPitch);
    // Sentinel = 'aPitch'
    (msg__)->WriteSentinel(134873690);
    WriteIPDLParam(msg__, this, aIsChrome);
    // Sentinel = 'aIsChrome'
    (msg__)->WriteSentinel(281871228);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_PSpeechSynthesisRequestConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PSpeechSynthesisRequestChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PSpeechSynthesisRequestMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PSpeechSynthesisChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PSpeechSynthesisRequestMsgStart:
{
            PSpeechSynthesisRequestChild* actor = static_cast<PSpeechSynthesisRequestChild*>(aListener);
            auto& container = mManagedPSpeechSynthesisRequestChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PSpeechSynthesisChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PSpeechSynthesisRequestMsgStart:
        static_cast<SpeechSynthesisChild*>(this)->DeallocPSpeechSynthesisRequestChild(static_cast<PSpeechSynthesisRequestChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PSpeechSynthesisChild::OnMessageReceived(const Message& msg__) -> PSpeechSynthesisChild::Result
{
    switch (msg__.type()) {
    case PSpeechSynthesis::Msg_VoiceAdded__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_VoiceAdded", OTHER);

            PickleIterator iter__{msg__};
            RemoteVoice aVoice{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aVoice)))))) {
                FatalError("Error deserializing 'RemoteVoice'");
                return MsgValueError;
            }
            // Sentinel = 'aVoice'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136053336)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RemoteVoice'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<SpeechSynthesisChild*>(this))->RecvVoiceAdded(std::move(aVoice))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesis::Msg_VoiceRemoved__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_VoiceRemoved", OTHER);

            PickleIterator iter__{msg__};
            nsString aUri{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUri)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aUri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64225682)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<SpeechSynthesisChild*>(this))->RecvVoiceRemoved(std::move(aUri))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesis::Msg_SetDefaultVoice__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_SetDefaultVoice", OTHER);

            PickleIterator iter__{msg__};
            nsString aUri{};
            bool aIsDefault{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUri)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aUri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64225682)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsDefault)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsDefault'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 342098915)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<SpeechSynthesisChild*>(this))->RecvSetDefaultVoice(std::move(aUri), std::move(aIsDefault))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesis::Msg_IsSpeakingChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_IsSpeakingChanged", OTHER);

            PickleIterator iter__{msg__};
            bool aIsSpeaking{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsSpeaking)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsSpeaking'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422577232)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<SpeechSynthesisChild*>(this))->RecvIsSpeakingChanged(std::move(aIsSpeaking))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesis::Msg_NotifyVoicesChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_NotifyVoicesChanged", OTHER);

            if ((!((static_cast<SpeechSynthesisChild*>(this))->RecvNotifyVoicesChanged()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesis::Msg_InitialVoicesAndState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_InitialVoicesAndState", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<RemoteVoice> aVoices{};
            nsTArray<nsString> aDefaults{};
            bool aIsSpeaking{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aVoices)))))) {
                FatalError("Error deserializing 'RemoteVoice[]'");
                return MsgValueError;
            }
            // Sentinel = 'aVoices'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 182911691)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RemoteVoice[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDefaults)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aDefaults'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 286327706)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsSpeaking)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsSpeaking'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422577232)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<SpeechSynthesisChild*>(this))->RecvInitialVoicesAndState(std::move(aVoices), std::move(aDefaults), std::move(aIsSpeaking))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesis::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PSpeechSynthesis::Reply_PSpeechSynthesisRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PSpeechSynthesisChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisChild::Result
{
    return MsgNotKnown;
}

auto PSpeechSynthesisChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PSpeechSynthesisChild::ClearSubtree() -> void
{
    for (auto it = mManagedPSpeechSynthesisRequestChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPSpeechSynthesisRequestChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPSpeechSynthesisRequestChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPSpeechSynthesisRequestChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PSpeechSynthesisChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PSpeechSynthesisChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PSpeechSynthesis", PSpeechSynthesisMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PSpeechSynthesisChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
