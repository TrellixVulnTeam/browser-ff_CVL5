//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PServiceWorkerManagerChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/ServiceWorkerManagerChild.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PServiceWorkerUpdaterChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PServiceWorkerManagerChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PServiceWorkerManagerChild::PServiceWorkerManagerChild() :
    mozilla::ipc::IProtocol(PServiceWorkerManagerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PServiceWorkerManagerChild);
}

PServiceWorkerManagerChild::~PServiceWorkerManagerChild()
{
    MOZ_COUNT_DTOR(PServiceWorkerManagerChild);
}

auto PServiceWorkerManagerChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PServiceWorkerManagerChild::ManagedPServiceWorkerUpdaterChild(nsTArray<PServiceWorkerUpdaterChild*>& aArr) const -> void
{
    mManagedPServiceWorkerUpdaterChild.ToArray(aArr);
}

auto PServiceWorkerManagerChild::ManagedPServiceWorkerUpdaterChild() const -> const ManagedContainer<PServiceWorkerUpdaterChild>&
{
    return mManagedPServiceWorkerUpdaterChild;
}

auto PServiceWorkerManagerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPServiceWorkerUpdaterChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPServiceWorkerUpdaterChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PServiceWorkerManagerChild::OpenPServiceWorkerUpdaterEndpoint(PServiceWorkerUpdaterChild* aActor) -> ManagedEndpoint<PServiceWorkerUpdaterParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PServiceWorkerUpdaterChild actor");
        return ManagedEndpoint<PServiceWorkerUpdaterParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPServiceWorkerUpdaterChild.PutEntry(aActor);

    return ManagedEndpoint<PServiceWorkerUpdaterParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PServiceWorkerManagerChild::BindPServiceWorkerUpdaterEndpoint(
        ManagedEndpoint<PServiceWorkerUpdaterChild> aEndpoint,
        PServiceWorkerUpdaterChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PServiceWorkerUpdaterChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPServiceWorkerUpdaterChild.PutEntry(aActor);

    return true;
}

auto PServiceWorkerManagerChild::SendRegister(const ServiceWorkerRegistrationData& data) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_Register(Id());

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_Register", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerChild::SendUnregister(
        const PrincipalInfo& principalInfo,
        const nsString& scope) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_Unregister(Id());

    WriteIPDLParam(msg__, this, principalInfo);
    // Sentinel = 'principalInfo'
    (msg__)->WriteSentinel(633472335);
    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_Unregister", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerChild::SendPropagateSoftUpdate(
        const OriginAttributes& originAttributes,
        const nsString& scope) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_PropagateSoftUpdate(Id());

    WriteIPDLParam(msg__, this, originAttributes);
    // Sentinel = 'originAttributes'
    (msg__)->WriteSentinel(947259056);
    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PropagateSoftUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerChild::SendPropagateUnregister(
        const PrincipalInfo& principalInfo,
        const nsString& scope) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_PropagateUnregister(Id());

    WriteIPDLParam(msg__, this, principalInfo);
    // Sentinel = 'principalInfo'
    (msg__)->WriteSentinel(633472335);
    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PropagateUnregister", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerChild::SendPropagateRemove(const nsCString& host) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_PropagateRemove(Id());

    WriteIPDLParam(msg__, this, host);
    // Sentinel = 'host'
    (msg__)->WriteSentinel(72024511);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PropagateRemove", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerChild::SendPropagateRemoveAll() -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_PropagateRemoveAll(Id());





    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PropagateRemoveAll", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerChild::SendShutdown() -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerChild::SendPServiceWorkerUpdaterConstructor(
        const OriginAttributes& originAttributes,
        const nsCString& scope) -> PServiceWorkerUpdaterChild*
{
    PServiceWorkerUpdaterChild* actor = (static_cast<ServiceWorkerManagerChild*>(this))->AllocPServiceWorkerUpdaterChild(originAttributes, scope);
    return SendPServiceWorkerUpdaterConstructor(actor, originAttributes, scope);
}

auto PServiceWorkerManagerChild::SendPServiceWorkerUpdaterConstructor(
        PServiceWorkerUpdaterChild* actor,
        const OriginAttributes& originAttributes,
        const nsCString& scope) -> PServiceWorkerUpdaterChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PServiceWorkerUpdaterChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPServiceWorkerUpdaterChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PServiceWorkerManager::Msg_PServiceWorkerUpdaterConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, originAttributes);
    // Sentinel = 'originAttributes'
    (msg__)->WriteSentinel(947259056);
    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PServiceWorkerUpdaterConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PServiceWorkerUpdaterChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PServiceWorkerUpdaterMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PServiceWorkerManagerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PServiceWorkerUpdaterMsgStart:
{
            PServiceWorkerUpdaterChild* actor = static_cast<PServiceWorkerUpdaterChild*>(aListener);
            auto& container = mManagedPServiceWorkerUpdaterChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PServiceWorkerManagerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PServiceWorkerUpdaterMsgStart:
        static_cast<ServiceWorkerManagerChild*>(this)->DeallocPServiceWorkerUpdaterChild(static_cast<PServiceWorkerUpdaterChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PServiceWorkerManagerChild::OnMessageReceived(const Message& msg__) -> PServiceWorkerManagerChild::Result
{
    switch (msg__.type()) {
    case PServiceWorkerManager::Reply_PServiceWorkerUpdaterConstructor__ID:
        {
            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_NotifyRegister__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifyRegister", OTHER);

            PickleIterator iter__{msg__};
            ServiceWorkerRegistrationData data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'ServiceWorkerRegistrationData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ServiceWorkerRegistrationData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerChild*>(this))->RecvNotifyRegister(std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_NotifySoftUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifySoftUpdate", OTHER);

            PickleIterator iter__{msg__};
            OriginAttributes originAttributes{};
            nsString scope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'originAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 947259056)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerChild*>(this))->RecvNotifySoftUpdate(std::move(originAttributes), std::move(scope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_NotifyUnregister__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifyUnregister", OTHER);

            PickleIterator iter__{msg__};
            PrincipalInfo principalInfo{};
            nsString scope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principalInfo)))))) {
                FatalError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            // Sentinel = 'principalInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 633472335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerChild*>(this))->RecvNotifyUnregister(std::move(principalInfo), std::move(scope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_NotifyRemove__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifyRemove", OTHER);

            PickleIterator iter__{msg__};
            nsCString host{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(host)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'host'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72024511)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerChild*>(this))->RecvNotifyRemove(std::move(host))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_NotifyRemoveAll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifyRemoveAll", OTHER);

            if ((!((static_cast<ServiceWorkerManagerChild*>(this))->RecvNotifyRemoveAll()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PServiceWorkerManagerChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PServiceWorkerManager'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PServiceWorkerManager'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PServiceWorkerManager'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PServiceWorkerManagerMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PServiceWorkerManagerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PServiceWorkerManagerChild::Result
{
    return MsgNotKnown;
}

auto PServiceWorkerManagerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PServiceWorkerManagerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PServiceWorkerManagerChild::ClearSubtree() -> void
{
    for (auto it = mManagedPServiceWorkerUpdaterChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPServiceWorkerUpdaterChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPServiceWorkerUpdaterChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPServiceWorkerUpdaterChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PServiceWorkerManagerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PServiceWorkerManagerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PServiceWorkerManager", PServiceWorkerManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PServiceWorkerManagerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
