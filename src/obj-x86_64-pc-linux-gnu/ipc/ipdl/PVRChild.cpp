//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gfx/PVRChild.h"
#include "VRChild.h"
#include "VRMessageUtils.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gfx/PVRGPUChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gfx {


auto PVRChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PVRChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PVRChild::EnteredCxxStack() -> void
{
}

auto PVRChild::ExitedCxxStack() -> void
{
}

auto PVRChild::EnteredCall() -> void
{
}

auto PVRChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PVRChild::PVRChild() :
    mozilla::ipc::IToplevelProtocol("PVRChild", PVRMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PVRChild);
}

PVRChild::~PVRChild()
{
    MOZ_COUNT_DTOR(PVRChild);
}

auto PVRChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PVRChild::SendNewGPUVRManager(Endpoint<mozilla::gfx::PVRGPUParent>&& endpoint) -> bool
{
    IPC::Message* msg__ = PVR::Msg_NewGPUVRManager(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(endpoint));
    // Sentinel = 'endpoint'
    (msg__)->WriteSentinel(251724642);




    if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_NewGPUVRManager", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRChild::SendInit(
        const nsTArray<GfxVarUpdate>& vars,
        const DevicePrefs& devicePrefs) -> bool
{
    IPC::Message* msg__ = PVR::Msg_Init(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, vars);
    // Sentinel = 'vars'
    (msg__)->WriteSentinel(72745405);
    WriteIPDLParam(msg__, this, devicePrefs);
    // Sentinel = 'devicePrefs'
    (msg__)->WriteSentinel(445645937);




    if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_Init", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRChild::SendUpdateVar(const GfxVarUpdate& var) -> bool
{
    IPC::Message* msg__ = PVR::Msg_UpdateVar(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, var);
    // Sentinel = 'var'
    (msg__)->WriteSentinel(43581770);




    if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_UpdateVar", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRChild::SendPreferenceUpdate(const Pref& pref) -> bool
{
    IPC::Message* msg__ = PVR::Msg_PreferenceUpdate(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, pref);
    // Sentinel = 'pref'
    (msg__)->WriteSentinel(71958958);




    if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_PreferenceUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRChild::SendOpenVRControllerActionPathToVR(const nsCString& aPath) -> bool
{
    IPC::Message* msg__ = PVR::Msg_OpenVRControllerActionPathToVR(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPath);
    // Sentinel = 'aPath'
    (msg__)->WriteSentinel(94175727);




    if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_OpenVRControllerActionPathToVR", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRChild::SendOpenVRControllerManifestPathToVR(
        const VRControllerType& aType,
        const nsCString& aPath) -> bool
{
    IPC::Message* msg__ = PVR::Msg_OpenVRControllerManifestPathToVR(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, aPath);
    // Sentinel = 'aPath'
    (msg__)->WriteSentinel(94175727);




    if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_OpenVRControllerManifestPathToVR", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRChild::SendRequestMemoryReport(
        const uint32_t& generation,
        const bool& anonymize,
        const bool& minimizeMemoryUsage,
        const mozilla::Maybe<FileDescriptor>& DMDFile,
        mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PVR::Msg_RequestMemoryReport(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, generation);
    // Sentinel = 'generation'
    (msg__)->WriteSentinel(381158445);
    WriteIPDLParam(msg__, this, anonymize);
    // Sentinel = 'anonymize'
    (msg__)->WriteSentinel(321127387);
    WriteIPDLParam(msg__, this, minimizeMemoryUsage);
    // Sentinel = 'minimizeMemoryUsage'
    (msg__)->WriteSentinel(1321600977);
    WriteIPDLParam(msg__, this, DMDFile);
    // Sentinel = 'DMDFile'
    (msg__)->WriteSentinel(143983190);




    if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVR::Msg_RequestMemoryReport", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PVRChild::SendRequestMemoryReport(
        const uint32_t& generation,
        const bool& anonymize,
        const bool& minimizeMemoryUsage,
        const mozilla::Maybe<FileDescriptor>& DMDFile) -> RefPtr<RequestMemoryReportPromise>
{
    RefPtr<MozPromise<uint32_t, ResponseRejectReason, true>::Private> promise__ = new MozPromise<uint32_t, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendRequestMemoryReport(std::move(generation), std::move(anonymize), std::move(minimizeMemoryUsage), std::move(DMDFile), [promise__](uint32_t&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PVRChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PVRChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PVRChild::OnMessageReceived(const Message& msg__) -> PVRChild::Result
{
    switch (msg__.type()) {
    case PVR::Reply_RequestMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_RequestMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<uint32_t> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                uint32_t aGeneration{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                    FatalError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'aGeneration'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aGeneration));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PVR::Msg_InitComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_InitComplete", OTHER);

            if ((!((static_cast<VRChild*>(this))->RecvInitComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_OpenVRControllerActionPathToParent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_OpenVRControllerActionPathToParent", OTHER);

            PickleIterator iter__{msg__};
            nsCString aPath{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPath)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aPath'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94175727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRChild*>(this))->RecvOpenVRControllerActionPathToParent(std::move(aPath))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_OpenVRControllerManifestPathToParent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_OpenVRControllerManifestPathToParent", OTHER);

            PickleIterator iter__{msg__};
            VRControllerType aType{};
            nsCString aPath{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'VRControllerType'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VRControllerType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPath)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aPath'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94175727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRChild*>(this))->RecvOpenVRControllerManifestPathToParent(std::move(aType), std::move(aPath))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_InitCrashReporter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_InitCrashReporter", OTHER);

            PickleIterator iter__{msg__};
            NativeThreadId threadId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(threadId)))))) {
                FatalError("Error deserializing 'NativeThreadId'");
                return MsgValueError;
            }
            // Sentinel = 'threadId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 248185638)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NativeThreadId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRChild*>(this))->RecvInitCrashReporter(std::move(threadId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVR::Msg_AddMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVR::Msg_AddMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            MemoryReport aReport{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReport)))))) {
                FatalError("Error deserializing 'MemoryReport'");
                return MsgValueError;
            }
            // Sentinel = 'aReport'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184025822)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MemoryReport'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRChild*>(this))->RecvAddMemoryReport(std::move(aReport))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PVRChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PVRChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVRChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PVRChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVRChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRChild::ClearSubtree() -> void
{
}



} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::PVRChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gfx::PVRChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PVR", PVRMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gfx::PVRChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
