//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PAPZCTreeManagerParent.h"
#include "ipc/nsGUIEventIPC.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/APZCTreeManagerParent.h"
#include "mozilla/layers/KeyboardMap.h"
#include "mozilla/layers/LayersMessageUtils.h"

#include "mozilla/layers/PCompositorBridgeParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PAPZCTreeManagerParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PAPZCTreeManagerParent::PAPZCTreeManagerParent() :
    mozilla::ipc::IProtocol(PAPZCTreeManagerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PAPZCTreeManagerParent);
}

PAPZCTreeManagerParent::~PAPZCTreeManagerParent()
{
    MOZ_COUNT_DTOR(PAPZCTreeManagerParent);
}

auto PAPZCTreeManagerParent::Manager() const -> PCompositorBridgeParent*
{
    return static_cast<PCompositorBridgeParent*>(IProtocol::Manager());
}

auto PAPZCTreeManagerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PAPZCTreeManagerParent::SendHandleTap(
        const GeckoContentController_TapType& aType,
        const LayoutDevicePoint& point,
        const Modifiers& aModifiers,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_HandleTap(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, point);
    // Sentinel = 'point'
    (msg__)->WriteSentinel(108790315);
    WriteIPDLParam(msg__, this, aModifiers);
    // Sentinel = 'aModifiers'
    (msg__)->WriteSentinel(358286340);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_HandleTap", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerParent::SendNotifyPinchGesture(
        const PinchGestureType& aType,
        const ScrollableLayerGuid& aGuid,
        const LayoutDevicePoint& aFocusPoint,
        const LayoutDeviceCoord& aSpanChange,
        const Modifiers& aModifiers) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_NotifyPinchGesture(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aFocusPoint);
    // Sentinel = 'aFocusPoint'
    (msg__)->WriteSentinel(430769260);
    WriteIPDLParam(msg__, this, aSpanChange);
    // Sentinel = 'aSpanChange'
    (msg__)->WriteSentinel(420021306);
    WriteIPDLParam(msg__, this, aModifiers);
    // Sentinel = 'aModifiers'
    (msg__)->WriteSentinel(358286340);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_NotifyPinchGesture", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerParent::SendCancelAutoscroll(const ViewID& aScrollId) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_CancelAutoscroll(Id());

    WriteIPDLParam(msg__, this, aScrollId);
    // Sentinel = 'aScrollId'
    (msg__)->WriteSentinel(293602174);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_CancelAutoscroll", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZCTreeManagerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZCTreeManagerParent::OnMessageReceived(const Message& msg__) -> PAPZCTreeManagerParent::Result
{
    switch (msg__.type()) {
    case PAPZCTreeManager::Msg_ZoomToRect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_ZoomToRect", OTHER);

            PickleIterator iter__{msg__};
            ScrollableLayerGuid aGuid{};
            CSSRect aRect{};
            uint32_t Flags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRect)))))) {
                FatalError("Error deserializing 'CSSRect'");
                return MsgValueError;
            }
            // Sentinel = 'aRect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044656)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CSSRect'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(Flags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'Flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 91685358)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvZoomToRect(std::move(aGuid), std::move(aRect), std::move(Flags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_ContentReceivedInputBlock__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_ContentReceivedInputBlock", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aInputBlockId{};
            bool PreventDefault{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(PreventDefault)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'PreventDefault'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 702350762)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvContentReceivedInputBlock(std::move(aInputBlockId), std::move(PreventDefault))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_SetTargetAPZC__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetTargetAPZC", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aInputBlockId{};
            nsTArray<ScrollableLayerGuid> Targets{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(Targets)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid[]'");
                return MsgValueError;
            }
            // Sentinel = 'Targets'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184091355)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvSetTargetAPZC(std::move(aInputBlockId), std::move(Targets))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_UpdateZoomConstraints__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_UpdateZoomConstraints", OTHER);

            PickleIterator iter__{msg__};
            ScrollableLayerGuid aGuid{};
            MaybeZoomConstraints aConstraints{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aConstraints)))))) {
                FatalError("Error deserializing 'MaybeZoomConstraints'");
                return MsgValueError;
            }
            // Sentinel = 'aConstraints'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 525010170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeZoomConstraints'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvUpdateZoomConstraints(std::move(aGuid), std::move(aConstraints))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_SetKeyboardMap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetKeyboardMap", OTHER);

            PickleIterator iter__{msg__};
            KeyboardMap aKeyboardMap{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKeyboardMap)))))) {
                FatalError("Error deserializing 'KeyboardMap'");
                return MsgValueError;
            }
            // Sentinel = 'aKeyboardMap'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 507905201)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'KeyboardMap'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvSetKeyboardMap(std::move(aKeyboardMap))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_SetDPI__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetDPI", OTHER);

            PickleIterator iter__{msg__};
            float aDpiValue{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDpiValue)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aDpiValue'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 282919804)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvSetDPI(std::move(aDpiValue))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_SetAllowedTouchBehavior__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetAllowedTouchBehavior", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aInputBlockId{};
            nsTArray<TouchBehaviorFlags> aValues{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aValues)))))) {
                FatalError("Error deserializing 'TouchBehaviorFlags[]'");
                return MsgValueError;
            }
            // Sentinel = 'aValues'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 182649554)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TouchBehaviorFlags[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvSetAllowedTouchBehavior(std::move(aInputBlockId), std::move(aValues))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_StartScrollbarDrag__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_StartScrollbarDrag", OTHER);

            PickleIterator iter__{msg__};
            ScrollableLayerGuid aGuid{};
            AsyncDragMetrics aDragMetrics{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDragMetrics)))))) {
                FatalError("Error deserializing 'AsyncDragMetrics'");
                return MsgValueError;
            }
            // Sentinel = 'aDragMetrics'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 496108727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'AsyncDragMetrics'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvStartScrollbarDrag(std::move(aGuid), std::move(aDragMetrics))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_StartAutoscroll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_StartAutoscroll", OTHER);

            PickleIterator iter__{msg__};
            ScrollableLayerGuid aGuid{};
            ScreenPoint aAnchorLocation{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAnchorLocation)))))) {
                FatalError("Error deserializing 'ScreenPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aAnchorLocation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776799734)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenPoint'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvStartAutoscroll(std::move(aGuid), std::move(aAnchorLocation))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_StopAutoscroll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_StopAutoscroll", OTHER);

            PickleIterator iter__{msg__};
            ScrollableLayerGuid aGuid{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvStopAutoscroll(std::move(aGuid))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_SetLongTapEnabled__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetLongTapEnabled", OTHER);

            PickleIterator iter__{msg__};
            bool aTapGestureEnabled{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTapGestureEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aTapGestureEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1116538641)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->RecvSetLongTapEnabled(std::move(aTapGestureEnabled))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PAPZCTreeManagerParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PAPZCTreeManager'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PAPZCTreeManager'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PAPZCTreeManager'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PAPZCTreeManagerMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAPZCTreeManagerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZCTreeManagerParent::Result
{
    return MsgNotKnown;
}

auto PAPZCTreeManagerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZCTreeManagerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAPZCTreeManagerParent::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PAPZCTreeManagerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PAPZCTreeManagerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PAPZCTreeManager", PAPZCTreeManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PAPZCTreeManagerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
