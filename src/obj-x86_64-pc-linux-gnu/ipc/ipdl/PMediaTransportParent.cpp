//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PMediaTransportParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/MediaTransportParent.h"
#include "mozilla/dom/RTCStatsReportBinding.h"
#include "mozilla/media/webrtc/WebrtcIPCTraits.h"
#include "mozilla/net/NrIceStunAddrMessageUtils.h"

#include "mozilla/ipc/PBackgroundParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PMediaTransportParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PMediaTransportParent::PMediaTransportParent() :
    mozilla::ipc::IProtocol(PMediaTransportMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PMediaTransportParent);
}

PMediaTransportParent::~PMediaTransportParent()
{
    MOZ_COUNT_DTOR(PMediaTransportParent);
}

auto PMediaTransportParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PMediaTransportParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PMediaTransportParent::SendOnCandidate(
        const string& transportId,
        const CandidateInfo& candidateInfo) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_OnCandidate(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, candidateInfo);
    // Sentinel = 'candidateInfo'
    (msg__)->WriteSentinel(605291818);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnCandidate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportParent::SendOnAlpnNegotiated(const string& alpn) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_OnAlpnNegotiated(Id());

    WriteIPDLParam(msg__, this, alpn);
    // Sentinel = 'alpn'
    (msg__)->WriteSentinel(68813228);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnAlpnNegotiated", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportParent::SendOnGatheringStateChange(const int& state) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_OnGatheringStateChange(Id());

    WriteIPDLParam(msg__, this, state);
    // Sentinel = 'state'
    (msg__)->WriteSentinel(109314594);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnGatheringStateChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportParent::SendOnConnectionStateChange(const int& state) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_OnConnectionStateChange(Id());

    WriteIPDLParam(msg__, this, state);
    // Sentinel = 'state'
    (msg__)->WriteSentinel(109314594);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnConnectionStateChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportParent::SendOnPacketReceived(
        const string& transportId,
        const MediaPacket& packet) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_OnPacketReceived(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, packet);
    // Sentinel = 'packet'
    (msg__)->WriteSentinel(144048761);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnPacketReceived", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportParent::SendOnEncryptedSending(
        const string& transportId,
        const MediaPacket& packet) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_OnEncryptedSending(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, packet);
    // Sentinel = 'packet'
    (msg__)->WriteSentinel(144048761);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnEncryptedSending", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportParent::SendOnStateChange(
        const string& transportId,
        const int& state) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_OnStateChange(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, state);
    // Sentinel = 'state'
    (msg__)->WriteSentinel(109314594);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnStateChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportParent::SendOnRtcpStateChange(
        const string& transportId,
        const int& state) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_OnRtcpStateChange(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, state);
    // Sentinel = 'state'
    (msg__)->WriteSentinel(109314594);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnRtcpStateChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PMediaTransportParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PMediaTransportParent::OnMessageReceived(const Message& msg__) -> PMediaTransportParent::Result
{
    switch (msg__.type()) {
    case PMediaTransport::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PMediaTransportParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PMediaTransport'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PMediaTransport'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PMediaTransport'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PMediaTransportMsgStart, actor);

            return MsgProcessed;
        }
    case PMediaTransport::Msg_GetIceLog__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_GetIceLog", OTHER);

            PickleIterator iter__{msg__};
            nsCString pattern{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pattern)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'pattern'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200409855)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetIceLogResolver resolver = [proxy__, seqno__, id__](const WebrtcGlobalLog& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PMediaTransportParent* self__ = static_cast<PMediaTransportParent*>(proxy__->Get());

                IPC::Message* reply__ = PMediaTransport::Reply_GetIceLog(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'loglines'
                (reply__)->WriteSentinel(253887326);

                if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PMediaTransportParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<MediaTransportParent*>(this))->RecvGetIceLog(std::move(pattern), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_ClearIceLog__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_ClearIceLog", OTHER);

            if ((!((static_cast<MediaTransportParent*>(this))->RecvClearIceLog()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_EnterPrivateMode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_EnterPrivateMode", OTHER);

            if ((!((static_cast<MediaTransportParent*>(this))->RecvEnterPrivateMode()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_ExitPrivateMode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_ExitPrivateMode", OTHER);

            if ((!((static_cast<MediaTransportParent*>(this))->RecvExitPrivateMode()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_CreateIceCtx__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_CreateIceCtx", OTHER);

            PickleIterator iter__{msg__};
            string name{};
            nsTArray<RTCIceServer> iceServers{};
            RTCIceTransportPolicy icePolicy{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(name)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69075362)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(iceServers)))))) {
                FatalError("Error deserializing 'RTCIceServer[]'");
                return MsgValueError;
            }
            // Sentinel = 'iceServers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 369230876)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RTCIceServer[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(icePolicy)))))) {
                FatalError("Error deserializing 'RTCIceTransportPolicy'");
                return MsgValueError;
            }
            // Sentinel = 'icePolicy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 298451874)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RTCIceTransportPolicy'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvCreateIceCtx(std::move(name), std::move(iceServers), std::move(icePolicy))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_SetProxyConfig__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_SetProxyConfig", OTHER);

            PickleIterator iter__{msg__};
            WebrtcProxyConfig proxyConfig{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(proxyConfig)))))) {
                FatalError("Error deserializing 'WebrtcProxyConfig'");
                return MsgValueError;
            }
            // Sentinel = 'proxyConfig'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 472188057)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebrtcProxyConfig'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvSetProxyConfig(std::move(proxyConfig))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_EnsureProvisionalTransport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_EnsureProvisionalTransport", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            string localUfrag{};
            string localPwd{};
            int componentCount{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(localUfrag)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'localUfrag'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 372245505)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(localPwd)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'localPwd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 244974391)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(componentCount)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'componentCount'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 735512029)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvEnsureProvisionalTransport(std::move(transportId), std::move(localUfrag), std::move(localPwd), std::move(componentCount))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_SetTargetForDefaultLocalAddressLookup__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_SetTargetForDefaultLocalAddressLookup", OTHER);

            PickleIterator iter__{msg__};
            string targetIp{};
            uint16_t targetPort{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(targetIp)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'targetIp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 250610497)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(targetPort)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'targetPort'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 383976493)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvSetTargetForDefaultLocalAddressLookup(std::move(targetIp), std::move(targetPort))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_StartIceGathering__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_StartIceGathering", OTHER);

            PickleIterator iter__{msg__};
            bool defaultRouteOnly{};
            bool obfuscateHostAddresses{};
            NrIceStunAddrArray stunAddrs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(defaultRouteOnly)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'defaultRouteOnly'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 930678423)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(obfuscateHostAddresses)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'obfuscateHostAddresses'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1725761785)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stunAddrs)))))) {
                FatalError("Error deserializing 'NrIceStunAddrArray'");
                return MsgValueError;
            }
            // Sentinel = 'stunAddrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 315818937)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NrIceStunAddrArray'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvStartIceGathering(std::move(defaultRouteOnly), std::move(obfuscateHostAddresses), std::move(stunAddrs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_ActivateTransport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_ActivateTransport", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            string localUfrag{};
            string localPwd{};
            int componentCount{};
            string remoteUfrag{};
            string remotePwd{};
            nsTArray<uint8_t> keyDer{};
            nsTArray<uint8_t> certDer{};
            int authType{};
            bool dtlsClient{};
            DtlsDigestList digests{};
            bool privacyRequested{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(localUfrag)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'localUfrag'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 372245505)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(localPwd)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'localPwd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 244974391)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(componentCount)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'componentCount'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 735512029)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(remoteUfrag)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'remoteUfrag'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 460981378)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(remotePwd)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'remotePwd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 316801976)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(keyDer)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'keyDer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 141361765)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(certDer)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'certDer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 187433674)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(authType)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'authType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855701)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dtlsClient)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'dtlsClient'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 375129111)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(digests)))))) {
                FatalError("Error deserializing 'DtlsDigestList'");
                return MsgValueError;
            }
            // Sentinel = 'digests'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 193200884)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DtlsDigestList'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(privacyRequested)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'privacyRequested'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 959383217)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvActivateTransport(std::move(transportId), std::move(localUfrag), std::move(localPwd), std::move(componentCount), std::move(remoteUfrag), std::move(remotePwd), std::move(keyDer), std::move(certDer), std::move(authType), std::move(dtlsClient), std::move(digests), std::move(privacyRequested))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_RemoveTransportsExcept__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_RemoveTransportsExcept", OTHER);

            PickleIterator iter__{msg__};
            StringVector transportIds{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportIds)))))) {
                FatalError("Error deserializing 'StringVector'");
                return MsgValueError;
            }
            // Sentinel = 'transportIds'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 560727310)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'StringVector'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvRemoveTransportsExcept(std::move(transportIds))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_StartIceChecks__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_StartIceChecks", OTHER);

            PickleIterator iter__{msg__};
            bool isControlling{};
            StringVector iceOptions{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isControlling)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isControlling'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 628950376)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(iceOptions)))))) {
                FatalError("Error deserializing 'StringVector'");
                return MsgValueError;
            }
            // Sentinel = 'iceOptions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 370410526)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'StringVector'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvStartIceChecks(std::move(isControlling), std::move(iceOptions))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_SendPacket__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_SendPacket", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            MediaPacket packet{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(packet)))))) {
                FatalError("Error deserializing 'MediaPacket'");
                return MsgValueError;
            }
            // Sentinel = 'packet'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144048761)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaPacket'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvSendPacket(std::move(transportId), std::move(packet))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_AddIceCandidate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_AddIceCandidate", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            string candidate{};
            string ufrag{};
            string obfuscatedAddr{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(candidate)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'candidate'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301138846)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(ufrag)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'ufrag'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107282966)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(obfuscatedAddr)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'obfuscatedAddr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 718407068)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvAddIceCandidate(std::move(transportId), std::move(candidate), std::move(ufrag), std::move(obfuscatedAddr))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_UpdateNetworkState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_UpdateNetworkState", OTHER);

            PickleIterator iter__{msg__};
            bool online{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(online)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'online'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 150078086)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportParent*>(this))->RecvUpdateNetworkState(std::move(online))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_GetIceStats__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_GetIceStats", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            double now{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(now)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'now'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 44171605)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetIceStatsResolver resolver = [proxy__, seqno__, id__](const NotReallyMovableButLetsPretendItIsRTCStatsCollection& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PMediaTransportParent* self__ = static_cast<PMediaTransportParent*>(proxy__->Get());

                IPC::Message* reply__ = PMediaTransport::Reply_GetIceStats(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'stats'
                (reply__)->WriteSentinel(110232112);

                if (mozilla::ipc::LoggingEnabledFor("PMediaTransportParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PMediaTransportParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<MediaTransportParent*>(this))->RecvGetIceStats(std::move(transportId), std::move(now), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PMediaTransportParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PMediaTransportParent::Result
{
    return MsgNotKnown;
}

auto PMediaTransportParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PMediaTransportParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PMediaTransportParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PMediaTransportParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PMediaTransportParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PMediaTransport", PMediaTransportMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PMediaTransportParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
