//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundMutableFileParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/filehandle/ActorsParent.h"
#include "mozilla/dom/filehandle/SerializationHelpers.h"

#include "mozilla/dom/PBackgroundFileHandleParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBackgroundMutableFileParent::RecvPBackgroundFileHandleConstructor(
        PBackgroundFileHandleParent* actor,
        const FileMode& mode) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundMutableFileParent::PBackgroundMutableFileParent() :
    mozilla::ipc::IProtocol(PBackgroundMutableFileMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PBackgroundMutableFileParent);
}

PBackgroundMutableFileParent::~PBackgroundMutableFileParent()
{
    MOZ_COUNT_DTOR(PBackgroundMutableFileParent);
}

auto PBackgroundMutableFileParent::Manager() const -> PBackgroundIDBDatabaseParent*
{
    return static_cast<PBackgroundIDBDatabaseParent*>(IProtocol::Manager());
}

auto PBackgroundMutableFileParent::ManagedPBackgroundFileHandleParent(nsTArray<PBackgroundFileHandleParent*>& aArr) const -> void
{
    mManagedPBackgroundFileHandleParent.ToArray(aArr);
}

auto PBackgroundMutableFileParent::ManagedPBackgroundFileHandleParent() const -> const ManagedContainer<PBackgroundFileHandleParent>&
{
    return mManagedPBackgroundFileHandleParent;
}

auto PBackgroundMutableFileParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundFileHandleParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundFileHandleParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundMutableFileParent::OpenPBackgroundFileHandleEndpoint(PBackgroundFileHandleParent* aActor) -> ManagedEndpoint<PBackgroundFileHandleChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundFileHandleParent actor");
        return ManagedEndpoint<PBackgroundFileHandleChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundFileHandleParent.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundFileHandleChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundMutableFileParent::BindPBackgroundFileHandleEndpoint(
        ManagedEndpoint<PBackgroundFileHandleParent> aEndpoint,
        PBackgroundFileHandleParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundFileHandleParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundFileHandleParent.PutEntry(aActor);

    return true;
}

auto PBackgroundMutableFileParent::Send__delete__(PBackgroundMutableFileParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PBackgroundMutableFile::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundMutableFileParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundMutableFile::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PBackgroundMutableFileMsgStart, actor);
    return sendok__;
}

auto PBackgroundMutableFileParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundFileHandleMsgStart:
{
            PBackgroundFileHandleParent* actor = static_cast<PBackgroundFileHandleParent*>(aListener);
            auto& container = mManagedPBackgroundFileHandleParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundMutableFileParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundFileHandleMsgStart:
        static_cast<BackgroundMutableFileParentBase*>(this)->DeallocPBackgroundFileHandleParent(static_cast<PBackgroundFileHandleParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundMutableFileParent::OnMessageReceived(const Message& msg__) -> PBackgroundMutableFileParent::Result
{
    switch (msg__.type()) {
    case PBackgroundMutableFile::Msg_DeleteMe__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundMutableFileParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundMutableFile::Msg_DeleteMe", OTHER);

            if ((!((static_cast<BackgroundMutableFileParentBase*>(this))->RecvDeleteMe()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundMutableFile::Msg_PBackgroundFileHandleConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundMutableFileParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundMutableFile::Msg_PBackgroundFileHandleConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            FileMode mode{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(mode)))))) {
                FatalError("Error deserializing 'FileMode'");
                return MsgValueError;
            }
            // Sentinel = 'mode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70386086)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileMode'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PBackgroundFileHandleParent* actor = (static_cast<BackgroundMutableFileParentBase*>(this))->AllocPBackgroundFileHandleParent(mode);
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundFileHandleParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundFileHandleParent.PutEntry(actor);

            if ((!((static_cast<BackgroundMutableFileParentBase*>(this))->RecvPBackgroundFileHandleConstructor(std::move(actor), std::move(mode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundMutableFile::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundMutableFileParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundMutableFileParent::Result
{
    switch (msg__.type()) {
    case PBackgroundMutableFile::Msg_GetFileId__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundMutableFileParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundMutableFile::Msg_GetFileId", OTHER);

            int32_t id__ = Id();
            int64_t fileId{};
            if ((!((static_cast<BackgroundMutableFileParentBase*>(this))->RecvGetFileId((&(fileId)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBackgroundMutableFile::Reply_GetFileId(id__);

            WriteIPDLParam(reply__, this, fileId);
            // Sentinel = 'fileId'
            (reply__)->WriteSentinel(139199054);

            if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundMutableFileParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundMutableFileParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundMutableFileParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundMutableFileParent::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundFileHandleParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundFileHandleParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundFileHandleParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundFileHandleParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundMutableFileParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundMutableFileParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundMutableFile", PBackgroundMutableFileMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundMutableFileParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
