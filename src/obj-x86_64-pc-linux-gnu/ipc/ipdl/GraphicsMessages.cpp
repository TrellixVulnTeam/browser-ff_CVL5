//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gfx/GraphicsMessages.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct D3D11DeviceStatus|
//
namespace mozilla {
namespace gfx {
auto D3D11DeviceStatus::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(D3D11DeviceStatus, sequenceNumber_) - offsetof(D3D11DeviceStatus, featureLevel_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::D3D11DeviceStatus>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isWARP());
    // Sentinel = 'isWARP'
    (aMsg)->WriteSentinel(130941463);
    WriteIPDLParam(aMsg, aActor, (aVar).textureSharingWorks());
    // Sentinel = 'textureSharingWorks'
    (aMsg)->WriteSentinel(1344473076);
    WriteIPDLParam(aMsg, aActor, (aVar).adapter());
    // Sentinel = 'adapter'
    (aMsg)->WriteSentinel(188941026);
    WriteIPDLParam(aMsg, aActor, (aVar).formatOptions());
    // Sentinel = 'formatOptions'
    (aMsg)->WriteSentinel(636290422);
    (aMsg)->WriteBytes((&((aVar).featureLevel())), 8);
    // Sentinel = 'featureLevel | sequenceNumber'
    (aMsg)->WriteSentinel(2858814307);
}

auto IPDLParamTraits<mozilla::gfx::D3D11DeviceStatus>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isWARP())))))) {
        aActor->FatalError("Error deserializing 'isWARP' (bool) member of 'D3D11DeviceStatus'");
        return false;
    }
    // Sentinel = 'isWARP'
    if ((!((aMsg)->ReadSentinel(aIter, 130941463)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isWARP' (bool) member of 'D3D11DeviceStatus'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureSharingWorks())))))) {
        aActor->FatalError("Error deserializing 'textureSharingWorks' (bool) member of 'D3D11DeviceStatus'");
        return false;
    }
    // Sentinel = 'textureSharingWorks'
    if ((!((aMsg)->ReadSentinel(aIter, 1344473076)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'textureSharingWorks' (bool) member of 'D3D11DeviceStatus'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->adapter())))))) {
        aActor->FatalError("Error deserializing 'adapter' (DxgiAdapterDesc) member of 'D3D11DeviceStatus'");
        return false;
    }
    // Sentinel = 'adapter'
    if ((!((aMsg)->ReadSentinel(aIter, 188941026)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'adapter' (DxgiAdapterDesc) member of 'D3D11DeviceStatus'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->formatOptions())))))) {
        aActor->FatalError("Error deserializing 'formatOptions' (VideoFormatOptionSet) member of 'D3D11DeviceStatus'");
        return false;
    }
    // Sentinel = 'formatOptions'
    if ((!((aMsg)->ReadSentinel(aIter, 636290422)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'formatOptions' (VideoFormatOptionSet) member of 'D3D11DeviceStatus'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->featureLevel())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'featureLevel | sequenceNumber'
    if ((!((aMsg)->ReadSentinel(aIter, 2858814307)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DevicePrefs|
//
namespace mozilla {
namespace gfx {
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::DevicePrefs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).hwCompositing());
    // Sentinel = 'hwCompositing'
    (aMsg)->WriteSentinel(629867884);
    WriteIPDLParam(aMsg, aActor, (aVar).d3d11Compositing());
    // Sentinel = 'd3d11Compositing'
    (aMsg)->WriteSentinel(774899178);
    WriteIPDLParam(aMsg, aActor, (aVar).oglCompositing());
    // Sentinel = 'oglCompositing'
    (aMsg)->WriteSentinel(722273743);
    WriteIPDLParam(aMsg, aActor, (aVar).useD2D1());
    // Sentinel = 'useD2D1'
    (aMsg)->WriteSentinel(172229177);
    WriteIPDLParam(aMsg, aActor, (aVar).webGPU());
    // Sentinel = 'webGPU'
    (aMsg)->WriteSentinel(135987755);
    WriteIPDLParam(aMsg, aActor, (aVar).d3d11HwAngle());
    // Sentinel = 'd3d11HwAngle'
    (aMsg)->WriteSentinel(407307268);
}

auto IPDLParamTraits<mozilla::gfx::DevicePrefs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hwCompositing())))))) {
        aActor->FatalError("Error deserializing 'hwCompositing' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    // Sentinel = 'hwCompositing'
    if ((!((aMsg)->ReadSentinel(aIter, 629867884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hwCompositing' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->d3d11Compositing())))))) {
        aActor->FatalError("Error deserializing 'd3d11Compositing' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    // Sentinel = 'd3d11Compositing'
    if ((!((aMsg)->ReadSentinel(aIter, 774899178)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'd3d11Compositing' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->oglCompositing())))))) {
        aActor->FatalError("Error deserializing 'oglCompositing' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    // Sentinel = 'oglCompositing'
    if ((!((aMsg)->ReadSentinel(aIter, 722273743)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'oglCompositing' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->useD2D1())))))) {
        aActor->FatalError("Error deserializing 'useD2D1' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    // Sentinel = 'useD2D1'
    if ((!((aMsg)->ReadSentinel(aIter, 172229177)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'useD2D1' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->webGPU())))))) {
        aActor->FatalError("Error deserializing 'webGPU' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    // Sentinel = 'webGPU'
    if ((!((aMsg)->ReadSentinel(aIter, 135987755)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'webGPU' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->d3d11HwAngle())))))) {
        aActor->FatalError("Error deserializing 'd3d11HwAngle' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    // Sentinel = 'd3d11HwAngle'
    if ((!((aMsg)->ReadSentinel(aIter, 407307268)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'd3d11HwAngle' (FeatureStatus) member of 'DevicePrefs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ContentDeviceData|
//
namespace mozilla {
namespace gfx {
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::ContentDeviceData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).prefs());
    // Sentinel = 'prefs'
    (aMsg)->WriteSentinel(107676193);
    WriteIPDLParam(aMsg, aActor, (aVar).d3d11());
    // Sentinel = 'd3d11'
    (aMsg)->WriteSentinel(75759966);
    WriteIPDLParam(aMsg, aActor, (aVar).cmsOutputProfileData());
    // Sentinel = 'cmsOutputProfileData'
    (aMsg)->WriteSentinel(1454376992);
}

auto IPDLParamTraits<mozilla::gfx::ContentDeviceData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->prefs())))))) {
        aActor->FatalError("Error deserializing 'prefs' (DevicePrefs) member of 'ContentDeviceData'");
        return false;
    }
    // Sentinel = 'prefs'
    if ((!((aMsg)->ReadSentinel(aIter, 107676193)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'prefs' (DevicePrefs) member of 'ContentDeviceData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->d3d11())))))) {
        aActor->FatalError("Error deserializing 'd3d11' (D3D11DeviceStatus) member of 'ContentDeviceData'");
        return false;
    }
    // Sentinel = 'd3d11'
    if ((!((aMsg)->ReadSentinel(aIter, 75759966)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'd3d11' (D3D11DeviceStatus) member of 'ContentDeviceData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cmsOutputProfileData())))))) {
        aActor->FatalError("Error deserializing 'cmsOutputProfileData' (uint8_t[]) member of 'ContentDeviceData'");
        return false;
    }
    // Sentinel = 'cmsOutputProfileData'
    if ((!((aMsg)->ReadSentinel(aIter, 1454376992)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cmsOutputProfileData' (uint8_t[]) member of 'ContentDeviceData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FeatureFailure|
//
namespace mozilla {
namespace gfx {
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::FeatureFailure>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).status());
    // Sentinel = 'status'
    (aMsg)->WriteSentinel(154731173);
    WriteIPDLParam(aMsg, aActor, (aVar).message());
    // Sentinel = 'message'
    (aMsg)->WriteSentinel(197198566);
    WriteIPDLParam(aMsg, aActor, (aVar).failureId());
    // Sentinel = 'failureId'
    (aMsg)->WriteSentinel(306447254);
}

auto IPDLParamTraits<mozilla::gfx::FeatureFailure>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->status())))))) {
        aActor->FatalError("Error deserializing 'status' (FeatureStatus) member of 'FeatureFailure'");
        return false;
    }
    // Sentinel = 'status'
    if ((!((aMsg)->ReadSentinel(aIter, 154731173)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'status' (FeatureStatus) member of 'FeatureFailure'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->message())))))) {
        aActor->FatalError("Error deserializing 'message' (nsCString) member of 'FeatureFailure'");
        return false;
    }
    // Sentinel = 'message'
    if ((!((aMsg)->ReadSentinel(aIter, 197198566)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'message' (nsCString) member of 'FeatureFailure'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->failureId())))))) {
        aActor->FatalError("Error deserializing 'failureId' (nsCString) member of 'FeatureFailure'");
        return false;
    }
    // Sentinel = 'failureId'
    if ((!((aMsg)->ReadSentinel(aIter, 306447254)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'failureId' (nsCString) member of 'FeatureFailure'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GPUDeviceData|
//
namespace mozilla {
namespace gfx {
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::GPUDeviceData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).d3d11Compositing());
    // Sentinel = 'd3d11Compositing'
    (aMsg)->WriteSentinel(774899178);
    WriteIPDLParam(aMsg, aActor, (aVar).oglCompositing());
    // Sentinel = 'oglCompositing'
    (aMsg)->WriteSentinel(722273743);
    WriteIPDLParam(aMsg, aActor, (aVar).gpuDevice());
    // Sentinel = 'gpuDevice'
    (aMsg)->WriteSentinel(304743325);
    WriteIPDLParam(aMsg, aActor, (aVar).webGPU());
    // Sentinel = 'webGPU'
    (aMsg)->WriteSentinel(135987755);
}

auto IPDLParamTraits<mozilla::gfx::GPUDeviceData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->d3d11Compositing())))))) {
        aActor->FatalError("Error deserializing 'd3d11Compositing' (FeatureFailure?) member of 'GPUDeviceData'");
        return false;
    }
    // Sentinel = 'd3d11Compositing'
    if ((!((aMsg)->ReadSentinel(aIter, 774899178)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'd3d11Compositing' (FeatureFailure?) member of 'GPUDeviceData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->oglCompositing())))))) {
        aActor->FatalError("Error deserializing 'oglCompositing' (FeatureFailure?) member of 'GPUDeviceData'");
        return false;
    }
    // Sentinel = 'oglCompositing'
    if ((!((aMsg)->ReadSentinel(aIter, 722273743)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'oglCompositing' (FeatureFailure?) member of 'GPUDeviceData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->gpuDevice())))))) {
        aActor->FatalError("Error deserializing 'gpuDevice' (D3D11DeviceStatus?) member of 'GPUDeviceData'");
        return false;
    }
    // Sentinel = 'gpuDevice'
    if ((!((aMsg)->ReadSentinel(aIter, 304743325)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'gpuDevice' (D3D11DeviceStatus?) member of 'GPUDeviceData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->webGPU())))))) {
        aActor->FatalError("Error deserializing 'webGPU' (FeatureFailure?) member of 'GPUDeviceData'");
        return false;
    }
    // Sentinel = 'webGPU'
    if ((!((aMsg)->ReadSentinel(aIter, 135987755)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'webGPU' (FeatureFailure?) member of 'GPUDeviceData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union GfxVarValue|
//
namespace mozilla {
namespace gfx {
auto GfxVarValue::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TBackendType:
        {
            (ptr_BackendType())->~BackendType__tdef();
            break;
        }
    case Tbool:
        {
            (ptr_bool())->~bool__tdef();
            break;
        }
    case TgfxImageFormat:
        {
            (ptr_gfxImageFormat())->~gfxImageFormat__tdef();
            break;
        }
    case TIntSize:
        {
            (ptr_IntSize())->~IntSize__tdef();
            break;
        }
    case TnsCString:
        {
            (ptr_nsCString())->~nsCString__tdef();
            break;
        }
    case TnsString:
        {
            (ptr_nsString())->~nsString__tdef();
            break;
        }
    case Tint32_t:
        {
            (ptr_int32_t())->~int32_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(const BackendType& aOther)
{
    new (mozilla::KnownNotNull, ptr_BackendType()) BackendType(aOther);
    mType = TBackendType;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(BackendType&& aOther)
{
    new (mozilla::KnownNotNull, ptr_BackendType()) BackendType(std::move(aOther));
    mType = TBackendType;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(const bool& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(aOther);
    mType = Tbool;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(bool&& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(std::move(aOther));
    mType = Tbool;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(const gfxImageFormat& aOther)
{
    new (mozilla::KnownNotNull, ptr_gfxImageFormat()) gfxImageFormat(aOther);
    mType = TgfxImageFormat;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(gfxImageFormat&& aOther)
{
    new (mozilla::KnownNotNull, ptr_gfxImageFormat()) gfxImageFormat(std::move(aOther));
    mType = TgfxImageFormat;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(const IntSize& aOther)
{
    new (mozilla::KnownNotNull, ptr_IntSize()) IntSize(aOther);
    mType = TIntSize;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(IntSize&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IntSize()) IntSize(std::move(aOther));
    mType = TIntSize;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(const nsCString& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(aOther);
    mType = TnsCString;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(nsCString&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move(aOther));
    mType = TnsCString;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(const nsString& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsString()) nsString(aOther);
    mType = TnsString;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(nsString&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsString()) nsString(std::move(aOther));
    mType = TnsString;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(const int32_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(aOther);
    mType = Tint32_t;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(int32_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(std::move(aOther));
    mType = Tint32_t;
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(const GfxVarValue& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TBackendType:
        {
            new (mozilla::KnownNotNull, ptr_BackendType()) BackendType((aOther).get_BackendType());
            break;
        }
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool((aOther).get_bool());
            break;
        }
    case TgfxImageFormat:
        {
            new (mozilla::KnownNotNull, ptr_gfxImageFormat()) gfxImageFormat((aOther).get_gfxImageFormat());
            break;
        }
    case TIntSize:
        {
            new (mozilla::KnownNotNull, ptr_IntSize()) IntSize((aOther).get_IntSize());
            break;
        }
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString((aOther).get_nsCString());
            break;
        }
    case TnsString:
        {
            new (mozilla::KnownNotNull, ptr_nsString()) nsString((aOther).get_nsString());
            break;
        }
    case Tint32_t:
        {
            new (mozilla::KnownNotNull, ptr_int32_t()) int32_t((aOther).get_int32_t());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT GfxVarValue::GfxVarValue(GfxVarValue&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TBackendType:
        {
            new (mozilla::KnownNotNull, ptr_BackendType()) BackendType(std::move((aOther).get_BackendType()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool(std::move((aOther).get_bool()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TgfxImageFormat:
        {
            new (mozilla::KnownNotNull, ptr_gfxImageFormat()) gfxImageFormat(std::move((aOther).get_gfxImageFormat()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIntSize:
        {
            new (mozilla::KnownNotNull, ptr_IntSize()) IntSize(std::move((aOther).get_IntSize()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move((aOther).get_nsCString()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TnsString:
        {
            new (mozilla::KnownNotNull, ptr_nsString()) nsString(std::move((aOther).get_nsString()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tint32_t:
        {
            new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(std::move((aOther).get_int32_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

GfxVarValue::~GfxVarValue()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto GfxVarValue::operator=(const BackendType& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TBackendType)) {
        new (mozilla::KnownNotNull, ptr_BackendType()) BackendType;
    }
    (*(ptr_BackendType())) = aRhs;
    mType = TBackendType;
    return (*(this));
}

auto GfxVarValue::operator=(BackendType&& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TBackendType)) {
        new (mozilla::KnownNotNull, ptr_BackendType()) BackendType;
    }
    (*(ptr_BackendType())) = std::move(aRhs);
    mType = TBackendType;
    return (*(this));
}

auto GfxVarValue::operator=(const bool& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = aRhs;
    mType = Tbool;
    return (*(this));
}

auto GfxVarValue::operator=(bool&& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = std::move(aRhs);
    mType = Tbool;
    return (*(this));
}

auto GfxVarValue::operator=(const gfxImageFormat& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TgfxImageFormat)) {
        new (mozilla::KnownNotNull, ptr_gfxImageFormat()) gfxImageFormat;
    }
    (*(ptr_gfxImageFormat())) = aRhs;
    mType = TgfxImageFormat;
    return (*(this));
}

auto GfxVarValue::operator=(gfxImageFormat&& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TgfxImageFormat)) {
        new (mozilla::KnownNotNull, ptr_gfxImageFormat()) gfxImageFormat;
    }
    (*(ptr_gfxImageFormat())) = std::move(aRhs);
    mType = TgfxImageFormat;
    return (*(this));
}

auto GfxVarValue::operator=(const IntSize& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TIntSize)) {
        new (mozilla::KnownNotNull, ptr_IntSize()) IntSize;
    }
    (*(ptr_IntSize())) = aRhs;
    mType = TIntSize;
    return (*(this));
}

auto GfxVarValue::operator=(IntSize&& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TIntSize)) {
        new (mozilla::KnownNotNull, ptr_IntSize()) IntSize;
    }
    (*(ptr_IntSize())) = std::move(aRhs);
    mType = TIntSize;
    return (*(this));
}

auto GfxVarValue::operator=(const nsCString& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = aRhs;
    mType = TnsCString;
    return (*(this));
}

auto GfxVarValue::operator=(nsCString&& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = std::move(aRhs);
    mType = TnsCString;
    return (*(this));
}

auto GfxVarValue::operator=(const nsString& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TnsString)) {
        new (mozilla::KnownNotNull, ptr_nsString()) nsString;
    }
    (*(ptr_nsString())) = aRhs;
    mType = TnsString;
    return (*(this));
}

auto GfxVarValue::operator=(nsString&& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(TnsString)) {
        new (mozilla::KnownNotNull, ptr_nsString()) nsString;
    }
    (*(ptr_nsString())) = std::move(aRhs);
    mType = TnsString;
    return (*(this));
}

auto GfxVarValue::operator=(const int32_t& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(Tint32_t)) {
        new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
    }
    (*(ptr_int32_t())) = aRhs;
    mType = Tint32_t;
    return (*(this));
}

auto GfxVarValue::operator=(int32_t&& aRhs) -> GfxVarValue&
{
    if (MaybeDestroy(Tint32_t)) {
        new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
    }
    (*(ptr_int32_t())) = std::move(aRhs);
    mType = Tint32_t;
    return (*(this));
}

auto GfxVarValue::operator=(const GfxVarValue& aRhs) -> GfxVarValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TBackendType:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_BackendType()) BackendType;
            }
            (*(ptr_BackendType())) = (aRhs).get_BackendType();
            break;
        }
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = (aRhs).get_bool();
            break;
        }
    case TgfxImageFormat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_gfxImageFormat()) gfxImageFormat;
            }
            (*(ptr_gfxImageFormat())) = (aRhs).get_gfxImageFormat();
            break;
        }
    case TIntSize:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IntSize()) IntSize;
            }
            (*(ptr_IntSize())) = (aRhs).get_IntSize();
            break;
        }
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = (aRhs).get_nsCString();
            break;
        }
    case TnsString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsString()) nsString;
            }
            (*(ptr_nsString())) = (aRhs).get_nsString();
            break;
        }
    case Tint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
            }
            (*(ptr_int32_t())) = (aRhs).get_int32_t();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto GfxVarValue::operator=(GfxVarValue&& aRhs) -> GfxVarValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TBackendType:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_BackendType()) BackendType;
            }
            (*(ptr_BackendType())) = std::move((aRhs).get_BackendType());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = std::move((aRhs).get_bool());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TgfxImageFormat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_gfxImageFormat()) gfxImageFormat;
            }
            (*(ptr_gfxImageFormat())) = std::move((aRhs).get_gfxImageFormat());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIntSize:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IntSize()) IntSize;
            }
            (*(ptr_IntSize())) = std::move((aRhs).get_IntSize());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = std::move((aRhs).get_nsCString());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TnsString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsString()) nsString;
            }
            (*(ptr_nsString())) = std::move((aRhs).get_nsString());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
            }
            (*(ptr_int32_t())) = std::move((aRhs).get_int32_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::GfxVarValue>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::gfx::GfxVarValue union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'GfxVarValue'
    (aMsg)->WriteSentinel(420742220);

    switch (type) {
    case union__::TBackendType:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_BackendType());
            // Sentinel = 'TBackendType'
            (aMsg)->WriteSentinel(481952927);
            return;
        }
    case union__::Tbool:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_bool());
            // Sentinel = 'Tbool'
            (aMsg)->WriteSentinel(96993793);
            return;
        }
    case union__::TgfxImageFormat:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_gfxImageFormat());
            // Sentinel = 'TgfxImageFormat'
            (aMsg)->WriteSentinel(776472038);
            return;
        }
    case union__::TIntSize:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IntSize());
            // Sentinel = 'TIntSize'
            (aMsg)->WriteSentinel(224330523);
            return;
        }
    case union__::TnsCString:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsCString());
            // Sentinel = 'TnsCString'
            (aMsg)->WriteSentinel(353960944);
            return;
        }
    case union__::TnsString:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsString());
            // Sentinel = 'TnsString'
            (aMsg)->WriteSentinel(302908333);
            return;
        }
    case union__::Tint32_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_int32_t());
            // Sentinel = 'Tint32_t'
            (aMsg)->WriteSentinel(217252568);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::gfx::GfxVarValue>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::gfx::GfxVarValue union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union GfxVarValue");
        return false;
    }
    // Sentinel = 'GfxVarValue'
    if ((!((aMsg)->ReadSentinel(aIter, 420742220)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union GfxVarValue");
        return false;
    }

    switch (type) {
    case union__::TBackendType:
        {
            mozilla::gfx::BackendType tmp = mozilla::gfx::BackendType();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_BackendType())))))) {
                aActor->FatalError("Error deserializing variant TBackendType of union GfxVarValue");
                return false;
            }
            // Sentinel = 'TBackendType'
            if ((!((aMsg)->ReadSentinel(aIter, 481952927)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TBackendType of union GfxVarValue");
                return false;
            }
            return true;
        }
    case union__::Tbool:
        {
            bool tmp = bool();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_bool())))))) {
                aActor->FatalError("Error deserializing variant Tbool of union GfxVarValue");
                return false;
            }
            // Sentinel = 'Tbool'
            if ((!((aMsg)->ReadSentinel(aIter, 96993793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tbool of union GfxVarValue");
                return false;
            }
            return true;
        }
    case union__::TgfxImageFormat:
        {
            gfxImageFormat tmp = gfxImageFormat();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_gfxImageFormat())))))) {
                aActor->FatalError("Error deserializing variant TgfxImageFormat of union GfxVarValue");
                return false;
            }
            // Sentinel = 'TgfxImageFormat'
            if ((!((aMsg)->ReadSentinel(aIter, 776472038)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TgfxImageFormat of union GfxVarValue");
                return false;
            }
            return true;
        }
    case union__::TIntSize:
        {
            mozilla::gfx::IntSize tmp = mozilla::gfx::IntSize();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IntSize())))))) {
                aActor->FatalError("Error deserializing variant TIntSize of union GfxVarValue");
                return false;
            }
            // Sentinel = 'TIntSize'
            if ((!((aMsg)->ReadSentinel(aIter, 224330523)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIntSize of union GfxVarValue");
                return false;
            }
            return true;
        }
    case union__::TnsCString:
        {
            nsCString tmp = nsCString();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsCString())))))) {
                aActor->FatalError("Error deserializing variant TnsCString of union GfxVarValue");
                return false;
            }
            // Sentinel = 'TnsCString'
            if ((!((aMsg)->ReadSentinel(aIter, 353960944)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsCString of union GfxVarValue");
                return false;
            }
            return true;
        }
    case union__::TnsString:
        {
            nsString tmp = nsString();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsString())))))) {
                aActor->FatalError("Error deserializing variant TnsString of union GfxVarValue");
                return false;
            }
            // Sentinel = 'TnsString'
            if ((!((aMsg)->ReadSentinel(aIter, 302908333)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsString of union GfxVarValue");
                return false;
            }
            return true;
        }
    case union__::Tint32_t:
        {
            int32_t tmp = int32_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_int32_t())))))) {
                aActor->FatalError("Error deserializing variant Tint32_t of union GfxVarValue");
                return false;
            }
            // Sentinel = 'Tint32_t'
            if ((!((aMsg)->ReadSentinel(aIter, 217252568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tint32_t of union GfxVarValue");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GfxVarUpdate|
//
namespace mozilla {
namespace gfx {
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::GfxVarUpdate>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
    (aMsg)->WriteBytes((&((aVar).index())), 4);
    // Sentinel = 'index'
    (aMsg)->WriteSentinel(104333849);
}

auto IPDLParamTraits<mozilla::gfx::GfxVarUpdate>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (GfxVarValue) member of 'GfxVarUpdate'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (GfxVarValue) member of 'GfxVarUpdate'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->index())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'index'
    if ((!((aMsg)->ReadSentinel(aIter, 104333849)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GfxInfoFeatureStatus|
//
namespace mozilla {
namespace gfx {
auto GfxInfoFeatureStatus::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(GfxInfoFeatureStatus, status_) - offsetof(GfxInfoFeatureStatus, feature_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::GfxInfoFeatureStatus>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).failureId());
    // Sentinel = 'failureId'
    (aMsg)->WriteSentinel(306447254);
    (aMsg)->WriteBytes((&((aVar).feature())), 8);
    // Sentinel = 'feature | status'
    (aMsg)->WriteSentinel(888407629);
}

auto IPDLParamTraits<mozilla::gfx::GfxInfoFeatureStatus>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->failureId())))))) {
        aActor->FatalError("Error deserializing 'failureId' (nsCString) member of 'GfxInfoFeatureStatus'");
        return false;
    }
    // Sentinel = 'failureId'
    if ((!((aMsg)->ReadSentinel(aIter, 306447254)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'failureId' (nsCString) member of 'GfxInfoFeatureStatus'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->feature())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'feature | status'
    if ((!((aMsg)->ReadSentinel(aIter, 888407629)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
