//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PHttpBackgroundChannelParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/HttpBackgroundChannelParent.h"
#include "mozilla/net/NeckoMessageUtils.h"

#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/extensions/PStreamFilterParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PHttpBackgroundChannelParent::PHttpBackgroundChannelParent() :
    mozilla::ipc::IProtocol(PHttpBackgroundChannelMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PHttpBackgroundChannelParent);
}

PHttpBackgroundChannelParent::~PHttpBackgroundChannelParent()
{
    MOZ_COUNT_DTOR(PHttpBackgroundChannelParent);
}

auto PHttpBackgroundChannelParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PHttpBackgroundChannelParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHttpBackgroundChannelParent::SendOnStartRequest(
        const nsHttpResponseHead& responseHead,
        const bool& useResponseHead,
        const nsHttpHeaderArray& requestHeaders,
        const HttpChannelOnStartRequestArgs& args) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_OnStartRequest(Id());

    WriteIPDLParam(msg__, this, responseHead);
    // Sentinel = 'responseHead'
    (msg__)->WriteSentinel(549651682);
    WriteIPDLParam(msg__, this, useResponseHead);
    // Sentinel = 'useResponseHead'
    (msg__)->WriteSentinel(831260175);
    WriteIPDLParam(msg__, this, requestHeaders);
    // Sentinel = 'requestHeaders'
    (msg__)->WriteSentinel(732693958);
    WriteIPDLParam(msg__, this, args);
    // Sentinel = 'args'
    (msg__)->WriteSentinel(69140910);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnStartRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendOnTransportAndData(
        const nsresult& channelStatus,
        const nsresult& transportStatus,
        const uint64_t& offset,
        const uint32_t& count,
        const nsDependentCSubstring& data,
        const bool& dataFromSocketProcess) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_OnTransportAndData(Id());

    WriteIPDLParam(msg__, this, channelStatus);
    // Sentinel = 'channelStatus'
    (msg__)->WriteSentinel(618136926);
    WriteIPDLParam(msg__, this, transportStatus);
    // Sentinel = 'transportStatus'
    (msg__)->WriteSentinel(865273458);
    WriteIPDLParam(msg__, this, offset);
    // Sentinel = 'offset'
    (msg__)->WriteSentinel(147653256);
    WriteIPDLParam(msg__, this, count);
    // Sentinel = 'count'
    (msg__)->WriteSentinel(106889770);
    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);
    WriteIPDLParam(msg__, this, dataFromSocketProcess);
    // Sentinel = 'dataFromSocketProcess'
    (msg__)->WriteSentinel(1537869943);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnTransportAndData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendOnStopRequest(
        const nsresult& channelStatus,
        const ResourceTimingStructArgs& timing,
        const TimeStamp& lastActiveTabOptimization,
        const nsHttpHeaderArray& responseTrailers,
        const nsTArray<ConsoleReportCollected>& consoleReport,
        const bool& fromSocketProcess) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_OnStopRequest(Id());

    WriteIPDLParam(msg__, this, channelStatus);
    // Sentinel = 'channelStatus'
    (msg__)->WriteSentinel(618136926);
    WriteIPDLParam(msg__, this, timing);
    // Sentinel = 'timing'
    (msg__)->WriteSentinel(150798985);
    WriteIPDLParam(msg__, this, lastActiveTabOptimization);
    // Sentinel = 'lastActiveTabOptimization'
    (msg__)->WriteSentinel(2190412335);
    WriteIPDLParam(msg__, this, responseTrailers);
    // Sentinel = 'responseTrailers'
    (msg__)->WriteSentinel(961873590);
    WriteIPDLParam(msg__, this, consoleReport);
    // Sentinel = 'consoleReport'
    (msg__)->WriteSentinel(634652016);
    WriteIPDLParam(msg__, this, fromSocketProcess);
    // Sentinel = 'fromSocketProcess'
    (msg__)->WriteSentinel(1049626365);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnStopRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendOnConsoleReport(const nsTArray<ConsoleReportCollected>& consoleReport) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_OnConsoleReport(Id());

    WriteIPDLParam(msg__, this, consoleReport);
    // Sentinel = 'consoleReport'
    (msg__)->WriteSentinel(634652016);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnConsoleReport", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendOnProgress(
        const int64_t& progress,
        const int64_t& progressMax) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_OnProgress(Id());

    WriteIPDLParam(msg__, this, progress);
    // Sentinel = 'progress'
    (msg__)->WriteSentinel(261292918);
    WriteIPDLParam(msg__, this, progressMax);
    // Sentinel = 'progressMax'
    (msg__)->WriteSentinel(471205020);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnProgress", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendOnStatus(const nsresult& status) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_OnStatus(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnStatus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendOnAfterLastPart(const nsresult& aStatus) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_OnAfterLastPart(Id());

    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_OnAfterLastPart", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendNotifyClassificationFlags(
        const uint32_t& aClassificationFlags,
        const bool& aIsThirdParty) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_NotifyClassificationFlags(Id());

    WriteIPDLParam(msg__, this, aClassificationFlags);
    // Sentinel = 'aClassificationFlags'
    (msg__)->WriteSentinel(1390741499);
    WriteIPDLParam(msg__, this, aIsThirdParty);
    // Sentinel = 'aIsThirdParty'
    (msg__)->WriteSentinel(584058153);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_NotifyClassificationFlags", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendNotifyFlashPluginStateChanged(const FlashPluginState& aState) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_NotifyFlashPluginStateChanged(Id());

    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_NotifyFlashPluginStateChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendSetClassifierMatchedInfo(const ClassifierInfo& info) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_SetClassifierMatchedInfo(Id());

    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_SetClassifierMatchedInfo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendSetClassifierMatchedTrackingInfo(const ClassifierInfo& info) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_SetClassifierMatchedTrackingInfo(Id());

    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_SetClassifierMatchedTrackingInfo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::SendAttachStreamFilter(Endpoint<mozilla::extensions::PStreamFilterParent>&& aEndpoint) -> bool
{
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg_AttachStreamFilter(Id());

    WriteIPDLParam(msg__, this, std::move(aEndpoint));
    // Sentinel = 'aEndpoint'
    (msg__)->WriteSentinel(292225955);




    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg_AttachStreamFilter", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpBackgroundChannelParent::Send__delete__(PHttpBackgroundChannelParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PHttpBackgroundChannel::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PHttpBackgroundChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpBackgroundChannelParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpBackgroundChannel::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PHttpBackgroundChannelMsgStart, actor);
    return sendok__;
}

auto PHttpBackgroundChannelParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpBackgroundChannelParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpBackgroundChannelParent::OnMessageReceived(const Message& msg__) -> PHttpBackgroundChannelParent::Result
{
    switch (msg__.type()) {
    case PHttpBackgroundChannel::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHttpBackgroundChannelParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpBackgroundChannelParent::Result
{
    return MsgNotKnown;
}

auto PHttpBackgroundChannelParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpBackgroundChannelParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHttpBackgroundChannelParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PHttpBackgroundChannelParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PHttpBackgroundChannelParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHttpBackgroundChannel", PHttpBackgroundChannelMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PHttpBackgroundChannelParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
