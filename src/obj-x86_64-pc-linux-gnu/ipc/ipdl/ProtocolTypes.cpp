//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/ProtocolTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ProtocolFdMapping|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::ProtocolFdMapping>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).fd());
    // Sentinel = 'fd'
    (aMsg)->WriteSentinel(20054219);
    (aMsg)->WriteBytes((&((aVar).protocolId())), 4);
    // Sentinel = 'protocolId'
    (aMsg)->WriteSentinel(395248672);
}

auto IPDLParamTraits<mozilla::ipc::ProtocolFdMapping>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fd())))))) {
        aActor->FatalError("Error deserializing 'fd' (FileDescriptor) member of 'ProtocolFdMapping'");
        return false;
    }
    // Sentinel = 'fd'
    if ((!((aMsg)->ReadSentinel(aIter, 20054219)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fd' (FileDescriptor) member of 'ProtocolFdMapping'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->protocolId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'protocolId'
    if ((!((aMsg)->ReadSentinel(aIter, 395248672)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
