//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PBenchmarkStorageChild.h"
#include "mozilla/BenchmarkStorageChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PContentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


MOZ_IMPLICIT PBenchmarkStorageChild::PBenchmarkStorageChild() :
    mozilla::ipc::IProtocol(PBenchmarkStorageMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBenchmarkStorageChild);
}

PBenchmarkStorageChild::~PBenchmarkStorageChild()
{
    MOZ_COUNT_DTOR(PBenchmarkStorageChild);
}

auto PBenchmarkStorageChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PBenchmarkStorageChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PBenchmarkStorageChild::SendPut(
        const nsCString& aDbName,
        const nsCString& aKey,
        const int32_t& aValue) -> bool
{
    IPC::Message* msg__ = PBenchmarkStorage::Msg_Put(Id());

    WriteIPDLParam(msg__, this, aDbName);
    // Sentinel = 'aDbName'
    (msg__)->WriteSentinel(164233865);
    WriteIPDLParam(msg__, this, aKey);
    // Sentinel = 'aKey'
    (msg__)->WriteSentinel(61604235);
    WriteIPDLParam(msg__, this, aValue);
    // Sentinel = 'aValue'
    (msg__)->WriteSentinel(135332447);




    if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBenchmarkStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg_Put", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBenchmarkStorageChild::SendGet(
        const nsCString& aDbName,
        const nsCString& aKey,
        mozilla::ipc::ResolveCallback<int32_t>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBenchmarkStorage::Msg_Get(Id());

    WriteIPDLParam(msg__, this, aDbName);
    // Sentinel = 'aDbName'
    (msg__)->WriteSentinel(164233865);
    WriteIPDLParam(msg__, this, aKey);
    // Sentinel = 'aKey'
    (msg__)->WriteSentinel(61604235);




    if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBenchmarkStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg_Get", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBenchmarkStorageChild::SendGet(
        const nsCString& aDbName,
        const nsCString& aKey) -> RefPtr<GetPromise>
{
    RefPtr<MozPromise<int32_t, ResponseRejectReason, true>::Private> promise__ = new MozPromise<int32_t, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGet(std::move(aDbName), std::move(aKey), [promise__](int32_t&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBenchmarkStorageChild::SendCheckVersion(
        const nsCString& aDbName,
        const int32_t& aVersion) -> bool
{
    IPC::Message* msg__ = PBenchmarkStorage::Msg_CheckVersion(Id());

    WriteIPDLParam(msg__, this, aDbName);
    // Sentinel = 'aDbName'
    (msg__)->WriteSentinel(164233865);
    WriteIPDLParam(msg__, this, aVersion);
    // Sentinel = 'aVersion'
    (msg__)->WriteSentinel(240452424);




    if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBenchmarkStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg_CheckVersion", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBenchmarkStorageChild::Send__delete__(PBenchmarkStorageChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PBenchmarkStorage::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBenchmarkStorageChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PBenchmarkStorageMsgStart, actor);
    return sendok__;
}

auto PBenchmarkStorageChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBenchmarkStorageChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBenchmarkStorageChild::OnMessageReceived(const Message& msg__) -> PBenchmarkStorageChild::Result
{
    switch (msg__.type()) {
    case PBenchmarkStorage::Reply_Get__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBenchmarkStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg_Get", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<int32_t> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                int32_t aValue{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aValue)))))) {
                    FatalError("Error deserializing 'int32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'aValue'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135332447)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aValue));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PBenchmarkStorage::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBenchmarkStorageChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBenchmarkStorageChild::Result
{
    return MsgNotKnown;
}

auto PBenchmarkStorageChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBenchmarkStorageChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBenchmarkStorageChild::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PBenchmarkStorageChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PBenchmarkStorageChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBenchmarkStorage", PBenchmarkStorageMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PBenchmarkStorageChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
