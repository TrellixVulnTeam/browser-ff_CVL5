//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gfx/PVRManagerParent.h"
#include "VRManagerParent.h"
#include "VRMessageUtils.h"
#include "gfxVR.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gfx/PVRLayerParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gfx {


auto PVRManagerParent::RecvPVRLayerConstructor(
        PVRLayerParent* actor,
        const uint32_t& aDisplayID,
        const uint32_t& aGroup) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PVRManagerParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PVRManagerParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PVRManagerParent::EnteredCxxStack() -> void
{
}

auto PVRManagerParent::ExitedCxxStack() -> void
{
}

auto PVRManagerParent::EnteredCall() -> void
{
}

auto PVRManagerParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PVRManagerParent::PVRManagerParent() :
    mozilla::ipc::IToplevelProtocol("PVRManagerParent", PVRManagerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PVRManagerParent);
}

PVRManagerParent::~PVRManagerParent()
{
    MOZ_COUNT_DTOR(PVRManagerParent);
}

auto PVRManagerParent::ManagedPVRLayerParent(nsTArray<PVRLayerParent*>& aArr) const -> void
{
    mManagedPVRLayerParent.ToArray(aArr);
}

auto PVRManagerParent::ManagedPVRLayerParent() const -> const ManagedContainer<PVRLayerParent>&
{
    return mManagedPVRLayerParent;
}

auto PVRManagerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPVRLayerParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPVRLayerParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PVRManagerParent::OpenPVRLayerEndpoint(PVRLayerParent* aActor) -> ManagedEndpoint<PVRLayerChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PVRLayerParent actor");
        return ManagedEndpoint<PVRLayerChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPVRLayerParent.PutEntry(aActor);

    return ManagedEndpoint<PVRLayerChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PVRManagerParent::BindPVRLayerEndpoint(
        ManagedEndpoint<PVRLayerParent> aEndpoint,
        PVRLayerParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PVRLayerParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPVRLayerParent.PutEntry(aActor);

    return true;
}

auto PVRManagerParent::SendUpdateDisplayInfo(const VRDisplayInfo& aDisplayInfo) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_UpdateDisplayInfo(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aDisplayInfo);
    // Sentinel = 'aDisplayInfo'
    (msg__)->WriteSentinel(510198980);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_UpdateDisplayInfo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerParent::SendUpdateRuntimeCapabilities(const VRDisplayCapabilityFlags& aCapabilities) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_UpdateRuntimeCapabilities(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aCapabilities);
    // Sentinel = 'aCapabilities'
    (msg__)->WriteSentinel(584975660);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_UpdateRuntimeCapabilities", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerParent::SendReplyGamepadVibrateHaptic(const uint32_t& aPromiseID) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_ReplyGamepadVibrateHaptic(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPromiseID);
    // Sentinel = 'aPromiseID'
    (msg__)->WriteSentinel(363398094);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_ReplyGamepadVibrateHaptic", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerParent::SendNotifyPuppetCommandBufferCompleted(const bool& aSuccess) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_NotifyPuppetCommandBufferCompleted(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aSuccess);
    // Sentinel = 'aSuccess'
    (msg__)->WriteSentinel(236323643);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_NotifyPuppetCommandBufferCompleted", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerParent::SendNotifyPuppetResetComplete() -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_NotifyPuppetResetComplete(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_NotifyPuppetResetComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PVRLayerMsgStart:
{
            PVRLayerParent* actor = static_cast<PVRLayerParent*>(aListener);
            auto& container = mManagedPVRLayerParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PVRManagerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PVRLayerMsgStart:
        static_cast<VRManagerParent*>(this)->DeallocPVRLayerParent(static_cast<PVRLayerParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PVRManagerParent::OnMessageReceived(const Message& msg__) -> PVRManagerParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PVRManager::Msg_PVRLayerConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_PVRLayerConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            uint32_t aDisplayID{};
            uint32_t aGroup{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDisplayID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDisplayID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 354812869)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGroup)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGroup'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136184431)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PVRLayerParent* actor = (static_cast<VRManagerParent*>(this))->AllocPVRLayerParent(aDisplayID, aGroup);
            if (!actor) {
                NS_WARNING("Cannot bind null PVRLayerParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPVRLayerParent.PutEntry(actor);

            if ((!((static_cast<VRManagerParent*>(this))->RecvPVRLayerConstructor(std::move(actor), std::move(aDisplayID), std::move(aGroup))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_DetectRuntimes__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_DetectRuntimes", OTHER);

            if ((!((static_cast<VRManagerParent*>(this))->RecvDetectRuntimes()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_RefreshDisplays__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_RefreshDisplays", OTHER);

            if ((!((static_cast<VRManagerParent*>(this))->RecvRefreshDisplays()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_SetGroupMask__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_SetGroupMask", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aDisplayID{};
            uint32_t aGroupMask{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDisplayID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDisplayID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 354812869)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGroupMask)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGroupMask'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 360842235)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerParent*>(this))->RecvSetGroupMask(std::move(aDisplayID), std::move(aGroupMask))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_SetHaveEventListener__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_SetHaveEventListener", OTHER);

            PickleIterator iter__{msg__};
            bool aHaveEventListener{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHaveEventListener)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aHaveEventListener'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1111164718)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerParent*>(this))->RecvSetHaveEventListener(std::move(aHaveEventListener))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_ControllerListenerAdded__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_ControllerListenerAdded", OTHER);

            if ((!((static_cast<VRManagerParent*>(this))->RecvControllerListenerAdded()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_ControllerListenerRemoved__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_ControllerListenerRemoved", OTHER);

            if ((!((static_cast<VRManagerParent*>(this))->RecvControllerListenerRemoved()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_VibrateHaptic__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_VibrateHaptic", OTHER);

            PickleIterator iter__{msg__};
            GamepadHandle aGamepadHandle{};
            uint32_t aHapticIndex{};
            double aIntensity{};
            double aDuration{};
            uint32_t aPromiseID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGamepadHandle)))))) {
                FatalError("Error deserializing 'GamepadHandle'");
                return MsgValueError;
            }
            // Sentinel = 'aGamepadHandle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 663618909)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GamepadHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHapticIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aHapticIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 500040883)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIntensity)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aIntensity'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 367854633)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDuration)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aDuration'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296551336)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 363398094)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerParent*>(this))->RecvVibrateHaptic(std::move(aGamepadHandle), std::move(aHapticIndex), std::move(aIntensity), std::move(aDuration), std::move(aPromiseID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_StopVibrateHaptic__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_StopVibrateHaptic", OTHER);

            PickleIterator iter__{msg__};
            GamepadHandle aGamepadHandle{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGamepadHandle)))))) {
                FatalError("Error deserializing 'GamepadHandle'");
                return MsgValueError;
            }
            // Sentinel = 'aGamepadHandle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 663618909)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GamepadHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerParent*>(this))->RecvStopVibrateHaptic(std::move(aGamepadHandle))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_StartVRNavigation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_StartVRNavigation", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aDeviceID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDeviceID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDeviceID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 280429375)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerParent*>(this))->RecvStartVRNavigation(std::move(aDeviceID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_StopVRNavigation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_StopVRNavigation", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aDeviceID{};
            TimeDuration aDuration{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDeviceID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDeviceID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 280429375)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDuration)))))) {
                FatalError("Error deserializing 'TimeDuration'");
                return MsgValueError;
            }
            // Sentinel = 'aDuration'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296551336)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeDuration'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerParent*>(this))->RecvStopVRNavigation(std::move(aDeviceID), std::move(aDuration))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_StartActivity__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_StartActivity", OTHER);

            if ((!((static_cast<VRManagerParent*>(this))->RecvStartActivity()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_StopActivity__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_StopActivity", OTHER);

            if ((!((static_cast<VRManagerParent*>(this))->RecvStopActivity()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_RunPuppet__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_RunPuppet", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<uint64_t> buffer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buffer)))))) {
                FatalError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'buffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144769659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerParent*>(this))->RecvRunPuppet(std::move(buffer))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_ResetPuppet__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_ResetPuppet", OTHER);

            if ((!((static_cast<VRManagerParent*>(this))->RecvResetPuppet()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PVRManagerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PVRManagerParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PVRManagerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PVRManagerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVRManagerParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRManagerParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRManagerParent::ClearSubtree() -> void
{
    for (auto it = mManagedPVRLayerParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPVRLayerParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPVRLayerParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPVRLayerParent.Clear();

}



} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::PVRManagerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gfx::PVRManagerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PVRManager", PVRManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gfx::PVRManagerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
