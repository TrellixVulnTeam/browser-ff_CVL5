//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gfx/PGPUParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/gfx/GPUParent.h"
#include "mozilla/layers/LayersMessageUtils.h"

#include "mozilla/layers/PAPZInputBridgeParent.h"
#include "mozilla/layers/PCompositorManagerParent.h"
#include "mozilla/layers/PImageBridgeParent.h"
#include "mozilla/PProfilerParent.h"
#include "mozilla/gfx/PVRGPUParent.h"
#include "mozilla/gfx/PVRManagerParent.h"
#include "mozilla/layers/PVideoBridgeParent.h"
#include "mozilla/gfx/PVsyncBridgeParent.h"
#include "mozilla/layers/PUiCompositorControllerParent.h"
#include "mozilla/PRemoteDecoderManagerParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gfx {


auto PGPUParent::RecvPAPZInputBridgeConstructor(
        PAPZInputBridgeParent* actor,
        const LayersId& aLayersId) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PGPUParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PGPUParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PGPUParent::EnteredCxxStack() -> void
{
}

auto PGPUParent::ExitedCxxStack() -> void
{
}

auto PGPUParent::EnteredCall() -> void
{
}

auto PGPUParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PGPUParent::PGPUParent() :
    mozilla::ipc::IToplevelProtocol("PGPUParent", PGPUMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PGPUParent);
}

PGPUParent::~PGPUParent()
{
    MOZ_COUNT_DTOR(PGPUParent);
}

auto PGPUParent::ManagedPAPZInputBridgeParent(nsTArray<PAPZInputBridgeParent*>& aArr) const -> void
{
    mManagedPAPZInputBridgeParent.ToArray(aArr);
}

auto PGPUParent::ManagedPAPZInputBridgeParent() const -> const ManagedContainer<PAPZInputBridgeParent>&
{
    return mManagedPAPZInputBridgeParent;
}

auto PGPUParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPAPZInputBridgeParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPAPZInputBridgeParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PGPUParent::OpenPAPZInputBridgeEndpoint(PAPZInputBridgeParent* aActor) -> ManagedEndpoint<PAPZInputBridgeChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PAPZInputBridgeParent actor");
        return ManagedEndpoint<PAPZInputBridgeChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPAPZInputBridgeParent.PutEntry(aActor);

    return ManagedEndpoint<PAPZInputBridgeChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGPUParent::BindPAPZInputBridgeEndpoint(
        ManagedEndpoint<PAPZInputBridgeParent> aEndpoint,
        PAPZInputBridgeParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PAPZInputBridgeParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPAPZInputBridgeParent.PutEntry(aActor);

    return true;
}

auto PGPUParent::SendInitComplete(const GPUDeviceData& data) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_InitComplete(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_InitComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendReportCheckerboard(
        const uint32_t& severity,
        const nsCString& log) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_ReportCheckerboard(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, severity);
    // Sentinel = 'severity'
    (msg__)->WriteSentinel(260309884);
    WriteIPDLParam(msg__, this, log);
    // Sentinel = 'log'
    (msg__)->WriteSentinel(42729795);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_ReportCheckerboard", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendGraphicsError(const nsCString& aError) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_GraphicsError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aError);
    // Sentinel = 'aError'
    (msg__)->WriteSentinel(135463532);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_GraphicsError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendInitCrashReporter(const NativeThreadId& threadId) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_InitCrashReporter(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, threadId);
    // Sentinel = 'threadId'
    (msg__)->WriteSentinel(248185638);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_InitCrashReporter", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendCreateVRProcess() -> bool
{
    IPC::Message* msg__ = PGPU::Msg_CreateVRProcess(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_CreateVRProcess", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendShutdownVRProcess() -> bool
{
    IPC::Message* msg__ = PGPU::Msg_ShutdownVRProcess(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_ShutdownVRProcess", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendNotifyUiObservers(const nsCString& aTopic) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_NotifyUiObservers(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aTopic);
    // Sentinel = 'aTopic'
    (msg__)->WriteSentinel(137429601);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_NotifyUiObservers", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendAccumulateChildHistograms(const nsTArray<HistogramAccumulation>& accumulations) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_AccumulateChildHistograms(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, accumulations);
    // Sentinel = 'accumulations'
    (msg__)->WriteSentinel(632030585);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_AccumulateChildHistograms", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendAccumulateChildKeyedHistograms(const nsTArray<KeyedHistogramAccumulation>& accumulations) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_AccumulateChildKeyedHistograms(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, accumulations);
    // Sentinel = 'accumulations'
    (msg__)->WriteSentinel(632030585);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_AccumulateChildKeyedHistograms", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendUpdateChildScalars(const nsTArray<ScalarAction>& actions) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_UpdateChildScalars(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, actions);
    // Sentinel = 'actions'
    (msg__)->WriteSentinel(193200882);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_UpdateChildScalars", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendUpdateChildKeyedScalars(const nsTArray<KeyedScalarAction>& actions) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_UpdateChildKeyedScalars(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, actions);
    // Sentinel = 'actions'
    (msg__)->WriteSentinel(193200882);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_UpdateChildKeyedScalars", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendRecordChildEvents(const nsTArray<ChildEventData>& events) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_RecordChildEvents(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, events);
    // Sentinel = 'events'
    (msg__)->WriteSentinel(149619350);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_RecordChildEvents", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendRecordDiscardedData(const DiscardedData& data) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_RecordDiscardedData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_RecordDiscardedData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendNotifyDeviceReset(const GPUDeviceData& status) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_NotifyDeviceReset(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_NotifyDeviceReset", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendAddMemoryReport(const MemoryReport& aReport) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_AddMemoryReport(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aReport);
    // Sentinel = 'aReport'
    (msg__)->WriteSentinel(184025822);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_AddMemoryReport", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendUpdateFeature(
        const Feature& aFeature,
        const FeatureFailure& aChange) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_UpdateFeature(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFeature);
    // Sentinel = 'aFeature'
    (msg__)->WriteSentinel(229966638);
    WriteIPDLParam(msg__, this, aChange);
    // Sentinel = 'aChange'
    (msg__)->WriteSentinel(172556968);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_UpdateFeature", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendUsedFallback(
        const Fallback& aFallback,
        const nsCString& message) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_UsedFallback(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFallback);
    // Sentinel = 'aFallback'
    (msg__)->WriteSentinel(281609074);
    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_UsedFallback", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendBHRThreadHang(const HangDetails& aDetails) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_BHRThreadHang(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aDetails);
    // Sentinel = 'aDetails'
    (msg__)->WriteSentinel(228066088);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_BHRThreadHang", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::SendUpdateMediaCodecsSupported(const MediaCodecsSupported& aSupported) -> bool
{
    IPC::Message* msg__ = PGPU::Msg_UpdateMediaCodecsSupported(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aSupported);
    // Sentinel = 'aSupported'
    (msg__)->WriteSentinel(378799144);




    if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGPU::Msg_UpdateMediaCodecsSupported", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGPUParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PAPZInputBridgeMsgStart:
{
            PAPZInputBridgeParent* actor = static_cast<PAPZInputBridgeParent*>(aListener);
            auto& container = mManagedPAPZInputBridgeParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PGPUParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    default:
        FatalError("unreached");
        return;
    }
}

auto PGPUParent::OnMessageReceived(const Message& msg__) -> PGPUParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PGPU::Msg_PAPZInputBridgeConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_PAPZInputBridgeConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            LayersId aLayersId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLayersId)))))) {
                FatalError("Error deserializing 'LayersId'");
                return MsgValueError;
            }
            // Sentinel = 'aLayersId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 291439487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PAPZInputBridgeParent> actor = (static_cast<GPUParent*>(this))->AllocPAPZInputBridgeParent(aLayersId);
            if (!actor) {
                NS_WARNING("Cannot bind null PAPZInputBridgeParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPAPZInputBridgeParent.PutEntry(actor);

            if ((!((static_cast<GPUParent*>(this))->RecvPAPZInputBridgeConstructor(actor, std::move(aLayersId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_Init__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_Init", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<GfxVarUpdate> vars{};
            DevicePrefs devicePrefs{};
            nsTArray<LayerTreeIdMapping> mapping{};
            nsTArray<GfxInfoFeatureStatus> features{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vars)))))) {
                FatalError("Error deserializing 'GfxVarUpdate[]'");
                return MsgValueError;
            }
            // Sentinel = 'vars'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72745405)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GfxVarUpdate[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(devicePrefs)))))) {
                FatalError("Error deserializing 'DevicePrefs'");
                return MsgValueError;
            }
            // Sentinel = 'devicePrefs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 445645937)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DevicePrefs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(mapping)))))) {
                FatalError("Error deserializing 'LayerTreeIdMapping[]'");
                return MsgValueError;
            }
            // Sentinel = 'mapping'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 196477677)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayerTreeIdMapping[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(features)))))) {
                FatalError("Error deserializing 'GfxInfoFeatureStatus[]'");
                return MsgValueError;
            }
            // Sentinel = 'features'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 250348384)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GfxInfoFeatureStatus[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInit(std::move(vars), std::move(devicePrefs), std::move(mapping), std::move(features))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_InitCompositorManager__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_InitCompositorManager", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::layers::PCompositorManagerParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PCompositorManagerParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PCompositorManagerParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInitCompositorManager(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_InitVsyncBridge__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_InitVsyncBridge", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::gfx::PVsyncBridgeParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gfx::PVsyncBridgeParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gfx::PVsyncBridgeParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInitVsyncBridge(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_InitImageBridge__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_InitImageBridge", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::layers::PImageBridgeParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PImageBridgeParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PImageBridgeParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInitImageBridge(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_InitVideoBridge__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_InitVideoBridge", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::layers::PVideoBridgeParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PVideoBridgeParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PVideoBridgeParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInitVideoBridge(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_InitVRManager__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_InitVRManager", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::gfx::PVRManagerParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gfx::PVRManagerParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gfx::PVRManagerParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInitVRManager(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_InitUiCompositorController__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_InitUiCompositorController", OTHER);

            PickleIterator iter__{msg__};
            LayersId rootLayerTreeId{};
            Endpoint<mozilla::layers::PUiCompositorControllerParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rootLayerTreeId)))))) {
                FatalError("Error deserializing 'LayersId'");
                return MsgValueError;
            }
            // Sentinel = 'rootLayerTreeId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 828507647)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PUiCompositorControllerParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PUiCompositorControllerParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInitUiCompositorController(std::move(rootLayerTreeId), std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_InitProfiler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_InitProfiler", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::PProfilerChild> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::PProfilerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::PProfilerChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInitProfiler(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_InitVR__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_InitVR", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::gfx::PVRGPUChild> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gfx::PVRGPUChild>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gfx::PVRGPUChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvInitVR(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_UpdateVar__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_UpdateVar", OTHER);

            PickleIterator iter__{msg__};
            GfxVarUpdate var{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(var)))))) {
                FatalError("Error deserializing 'GfxVarUpdate'");
                return MsgValueError;
            }
            // Sentinel = 'var'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 43581770)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GfxVarUpdate'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvUpdateVar(std::move(var))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_PreferenceUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_PreferenceUpdate", OTHER);

            PickleIterator iter__{msg__};
            Pref pref{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pref)))))) {
                FatalError("Error deserializing 'Pref'");
                return MsgValueError;
            }
            // Sentinel = 'pref'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 71958958)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Pref'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvPreferenceUpdate(std::move(pref))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_NewContentCompositorManager__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_NewContentCompositorManager", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::layers::PCompositorManagerParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PCompositorManagerParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PCompositorManagerParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvNewContentCompositorManager(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_NewContentImageBridge__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_NewContentImageBridge", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::layers::PImageBridgeParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PImageBridgeParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PImageBridgeParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvNewContentImageBridge(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_NewContentVRManager__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_NewContentVRManager", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::gfx::PVRManagerParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gfx::PVRManagerParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gfx::PVRManagerParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvNewContentVRManager(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_NewContentRemoteDecoderManager__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_NewContentRemoteDecoderManager", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::PRemoteDecoderManagerParent> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::PRemoteDecoderManagerParent>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::PRemoteDecoderManagerParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvNewContentRemoteDecoderManager(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_RemoveLayerTreeIdMapping__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_RemoveLayerTreeIdMapping", OTHER);

            PickleIterator iter__{msg__};
            LayerTreeIdMapping mapping{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(mapping)))))) {
                FatalError("Error deserializing 'LayerTreeIdMapping'");
                return MsgValueError;
            }
            // Sentinel = 'mapping'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 196477677)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayerTreeIdMapping'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvRemoveLayerTreeIdMapping(std::move(mapping))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_NotifyGpuObservers__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_NotifyGpuObservers", OTHER);

            PickleIterator iter__{msg__};
            nsCString aTopic{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTopic)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aTopic'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137429601)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvNotifyGpuObservers(std::move(aTopic))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_RequestMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_RequestMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            uint32_t generation{};
            bool anonymize{};
            bool minimizeMemoryUsage{};
            mozilla::Maybe<FileDescriptor> DMDFile{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(generation)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'generation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 381158445)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(anonymize)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'anonymize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 321127387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(minimizeMemoryUsage)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'minimizeMemoryUsage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1321600977)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(DMDFile)))))) {
                FatalError("Error deserializing 'FileDescriptor?'");
                return MsgValueError;
            }
            // Sentinel = 'DMDFile'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143983190)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            RequestMemoryReportResolver resolver = [proxy__, seqno__, id__](const uint32_t& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PGPUParent* self__ = static_cast<PGPUParent*>(proxy__->Get());

                IPC::Message* reply__ = PGPU::Reply_RequestMemoryReport(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aGeneration'
                (reply__)->WriteSentinel(430179438);

                if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PGPUParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<GPUParent*>(this))->RecvRequestMemoryReport(std::move(generation), std::move(anonymize), std::move(minimizeMemoryUsage), std::move(DMDFile), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_ShutdownVR__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_ShutdownVR", OTHER);

            if ((!((static_cast<GPUParent*>(this))->RecvShutdownVR()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_UpdatePerfStatsCollectionMask__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_UpdatePerfStatsCollectionMask", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aMask{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMask)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMask'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 93454830)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GPUParent*>(this))->RecvUpdatePerfStatsCollectionMask(std::move(aMask))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGPU::Msg_CollectPerfStatsJSON__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_CollectPerfStatsJSON", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            CollectPerfStatsJSONResolver resolver = [proxy__, seqno__, id__](const nsCString& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PGPUParent* self__ = static_cast<PGPUParent*>(proxy__->Get());

                IPC::Message* reply__ = PGPU::Reply_CollectPerfStatsJSON(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aStats'
                (reply__)->WriteSentinel(137953905);

                if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PGPUParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<GPUParent*>(this))->RecvCollectPerfStatsJSON(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PGPUParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGPUParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    switch (msg__.type()) {
    case PGPU::Msg_AddLayerTreeIdMapping__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_AddLayerTreeIdMapping", OTHER);

            PickleIterator iter__{msg__};
            LayerTreeIdMapping mapping{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(mapping)))))) {
                FatalError("Error deserializing 'LayerTreeIdMapping'");
                return MsgValueError;
            }
            // Sentinel = 'mapping'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 196477677)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayerTreeIdMapping'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<GPUParent*>(this))->RecvAddLayerTreeIdMapping(std::move(mapping))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PGPU::Reply_AddLayerTreeIdMapping(id__);


            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PGPU::Msg_GetDeviceStatus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_GetDeviceStatus", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            GPUDeviceData status{};
            if ((!((static_cast<GPUParent*>(this))->RecvGetDeviceStatus((&(status)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PGPU::Reply_GetDeviceStatus(id__);

            WriteIPDLParam(reply__, this, status);
            // Sentinel = 'status'
            (reply__)->WriteSentinel(154731173);

            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PGPU::Msg_SimulateDeviceReset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGPU::Msg_SimulateDeviceReset", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            GPUDeviceData status{};
            if ((!((static_cast<GPUParent*>(this))->RecvSimulateDeviceReset((&(status)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PGPU::Reply_SimulateDeviceReset(id__);

            WriteIPDLParam(reply__, this, status);
            // Sentinel = 'status'
            (reply__)->WriteSentinel(154731173);

            if (mozilla::ipc::LoggingEnabledFor("PGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGPUParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGPUParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGPUParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PGPUParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGPUParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGPUParent::ClearSubtree() -> void
{
    for (auto it = mManagedPAPZInputBridgeParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPAPZInputBridgeParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPAPZInputBridgeParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPAPZInputBridgeParent.Clear();

}



} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::PGPUParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gfx::PGPUParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGPU", PGPUMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gfx::PGPUParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
