//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PrefsTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union PrefValue|
//
namespace mozilla {
namespace dom {
auto PrefValue::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TnsCString:
        {
            (ptr_nsCString())->~nsCString__tdef();
            break;
        }
    case Tint32_t:
        {
            (ptr_int32_t())->~int32_t__tdef();
            break;
        }
    case Tbool:
        {
            (ptr_bool())->~bool__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT PrefValue::PrefValue(const nsCString& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(aOther);
    mType = TnsCString;
}

MOZ_IMPLICIT PrefValue::PrefValue(nsCString&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move(aOther));
    mType = TnsCString;
}

MOZ_IMPLICIT PrefValue::PrefValue(const int32_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(aOther);
    mType = Tint32_t;
}

MOZ_IMPLICIT PrefValue::PrefValue(int32_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(std::move(aOther));
    mType = Tint32_t;
}

MOZ_IMPLICIT PrefValue::PrefValue(const bool& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(aOther);
    mType = Tbool;
}

MOZ_IMPLICIT PrefValue::PrefValue(bool&& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(std::move(aOther));
    mType = Tbool;
}

MOZ_IMPLICIT PrefValue::PrefValue(const PrefValue& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString((aOther).get_nsCString());
            break;
        }
    case Tint32_t:
        {
            new (mozilla::KnownNotNull, ptr_int32_t()) int32_t((aOther).get_int32_t());
            break;
        }
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool((aOther).get_bool());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT PrefValue::PrefValue(PrefValue&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move((aOther).get_nsCString()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tint32_t:
        {
            new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(std::move((aOther).get_int32_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool(std::move((aOther).get_bool()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

PrefValue::~PrefValue()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto PrefValue::operator=(const nsCString& aRhs) -> PrefValue&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = aRhs;
    mType = TnsCString;
    return (*(this));
}

auto PrefValue::operator=(nsCString&& aRhs) -> PrefValue&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = std::move(aRhs);
    mType = TnsCString;
    return (*(this));
}

auto PrefValue::operator=(const int32_t& aRhs) -> PrefValue&
{
    if (MaybeDestroy(Tint32_t)) {
        new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
    }
    (*(ptr_int32_t())) = aRhs;
    mType = Tint32_t;
    return (*(this));
}

auto PrefValue::operator=(int32_t&& aRhs) -> PrefValue&
{
    if (MaybeDestroy(Tint32_t)) {
        new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
    }
    (*(ptr_int32_t())) = std::move(aRhs);
    mType = Tint32_t;
    return (*(this));
}

auto PrefValue::operator=(const bool& aRhs) -> PrefValue&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = aRhs;
    mType = Tbool;
    return (*(this));
}

auto PrefValue::operator=(bool&& aRhs) -> PrefValue&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = std::move(aRhs);
    mType = Tbool;
    return (*(this));
}

auto PrefValue::operator=(const PrefValue& aRhs) -> PrefValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = (aRhs).get_nsCString();
            break;
        }
    case Tint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
            }
            (*(ptr_int32_t())) = (aRhs).get_int32_t();
            break;
        }
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = (aRhs).get_bool();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto PrefValue::operator=(PrefValue&& aRhs) -> PrefValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = std::move((aRhs).get_nsCString());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
            }
            (*(ptr_int32_t())) = std::move((aRhs).get_int32_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = std::move((aRhs).get_bool());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PrefValue>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::PrefValue union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'PrefValue'
    (aMsg)->WriteSentinel(290784139);

    switch (type) {
    case union__::TnsCString:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsCString());
            // Sentinel = 'TnsCString'
            (aMsg)->WriteSentinel(353960944);
            return;
        }
    case union__::Tint32_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_int32_t());
            // Sentinel = 'Tint32_t'
            (aMsg)->WriteSentinel(217252568);
            return;
        }
    case union__::Tbool:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_bool());
            // Sentinel = 'Tbool'
            (aMsg)->WriteSentinel(96993793);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::PrefValue>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::PrefValue union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union PrefValue");
        return false;
    }
    // Sentinel = 'PrefValue'
    if ((!((aMsg)->ReadSentinel(aIter, 290784139)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union PrefValue");
        return false;
    }

    switch (type) {
    case union__::TnsCString:
        {
            nsCString tmp = nsCString();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsCString())))))) {
                aActor->FatalError("Error deserializing variant TnsCString of union PrefValue");
                return false;
            }
            // Sentinel = 'TnsCString'
            if ((!((aMsg)->ReadSentinel(aIter, 353960944)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsCString of union PrefValue");
                return false;
            }
            return true;
        }
    case union__::Tint32_t:
        {
            int32_t tmp = int32_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_int32_t())))))) {
                aActor->FatalError("Error deserializing variant Tint32_t of union PrefValue");
                return false;
            }
            // Sentinel = 'Tint32_t'
            if ((!((aMsg)->ReadSentinel(aIter, 217252568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tint32_t of union PrefValue");
                return false;
            }
            return true;
        }
    case union__::Tbool:
        {
            bool tmp = bool();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_bool())))))) {
                aActor->FatalError("Error deserializing variant Tbool of union PrefValue");
                return false;
            }
            // Sentinel = 'Tbool'
            if ((!((aMsg)->ReadSentinel(aIter, 96993793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tbool of union PrefValue");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct Pref|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::Pref>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).isLocked());
    // Sentinel = 'isLocked'
    (aMsg)->WriteSentinel(241369903);
    WriteIPDLParam(aMsg, aActor, (aVar).defaultValue());
    // Sentinel = 'defaultValue'
    (aMsg)->WriteSentinel(529597667);
    WriteIPDLParam(aMsg, aActor, (aVar).userValue());
    // Sentinel = 'userValue'
    (aMsg)->WriteSentinel(317850557);
}

auto IPDLParamTraits<mozilla::dom::Pref>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'Pref'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'Pref'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isLocked())))))) {
        aActor->FatalError("Error deserializing 'isLocked' (bool) member of 'Pref'");
        return false;
    }
    // Sentinel = 'isLocked'
    if ((!((aMsg)->ReadSentinel(aIter, 241369903)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isLocked' (bool) member of 'Pref'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->defaultValue())))))) {
        aActor->FatalError("Error deserializing 'defaultValue' (PrefValue?) member of 'Pref'");
        return false;
    }
    // Sentinel = 'defaultValue'
    if ((!((aMsg)->ReadSentinel(aIter, 529597667)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'defaultValue' (PrefValue?) member of 'Pref'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->userValue())))))) {
        aActor->FatalError("Error deserializing 'userValue' (PrefValue?) member of 'Pref'");
        return false;
    }
    // Sentinel = 'userValue'
    if ((!((aMsg)->ReadSentinel(aIter, 317850557)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'userValue' (PrefValue?) member of 'Pref'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
