//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PServiceWorkerManagerParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/ServiceWorkerManagerParent.h"

#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/dom/PServiceWorkerUpdaterParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PServiceWorkerManagerParent::RecvPServiceWorkerUpdaterConstructor(
        PServiceWorkerUpdaterParent* actor,
        const OriginAttributes& originAttributes,
        const nsCString& scope) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PServiceWorkerManagerParent::PServiceWorkerManagerParent() :
    mozilla::ipc::IProtocol(PServiceWorkerManagerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PServiceWorkerManagerParent);
}

PServiceWorkerManagerParent::~PServiceWorkerManagerParent()
{
    MOZ_COUNT_DTOR(PServiceWorkerManagerParent);
}

auto PServiceWorkerManagerParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PServiceWorkerManagerParent::ManagedPServiceWorkerUpdaterParent(nsTArray<PServiceWorkerUpdaterParent*>& aArr) const -> void
{
    mManagedPServiceWorkerUpdaterParent.ToArray(aArr);
}

auto PServiceWorkerManagerParent::ManagedPServiceWorkerUpdaterParent() const -> const ManagedContainer<PServiceWorkerUpdaterParent>&
{
    return mManagedPServiceWorkerUpdaterParent;
}

auto PServiceWorkerManagerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPServiceWorkerUpdaterParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPServiceWorkerUpdaterParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PServiceWorkerManagerParent::OpenPServiceWorkerUpdaterEndpoint(PServiceWorkerUpdaterParent* aActor) -> ManagedEndpoint<PServiceWorkerUpdaterChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PServiceWorkerUpdaterParent actor");
        return ManagedEndpoint<PServiceWorkerUpdaterChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPServiceWorkerUpdaterParent.PutEntry(aActor);

    return ManagedEndpoint<PServiceWorkerUpdaterChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PServiceWorkerManagerParent::BindPServiceWorkerUpdaterEndpoint(
        ManagedEndpoint<PServiceWorkerUpdaterParent> aEndpoint,
        PServiceWorkerUpdaterParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PServiceWorkerUpdaterParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPServiceWorkerUpdaterParent.PutEntry(aActor);

    return true;
}

auto PServiceWorkerManagerParent::SendNotifyRegister(const ServiceWorkerRegistrationData& data) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_NotifyRegister(Id());

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifyRegister", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerParent::SendNotifySoftUpdate(
        const OriginAttributes& originAttributes,
        const nsString& scope) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_NotifySoftUpdate(Id());

    WriteIPDLParam(msg__, this, originAttributes);
    // Sentinel = 'originAttributes'
    (msg__)->WriteSentinel(947259056);
    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifySoftUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerParent::SendNotifyUnregister(
        const PrincipalInfo& principalInfo,
        const nsString& scope) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_NotifyUnregister(Id());

    WriteIPDLParam(msg__, this, principalInfo);
    // Sentinel = 'principalInfo'
    (msg__)->WriteSentinel(633472335);
    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifyUnregister", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerParent::SendNotifyRemove(const nsCString& host) -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_NotifyRemove(Id());

    WriteIPDLParam(msg__, this, host);
    // Sentinel = 'host'
    (msg__)->WriteSentinel(72024511);




    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifyRemove", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerParent::SendNotifyRemoveAll() -> bool
{
    IPC::Message* msg__ = PServiceWorkerManager::Msg_NotifyRemoveAll(Id());





    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_NotifyRemoveAll", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PServiceWorkerManagerParent::Send__delete__(PServiceWorkerManagerParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PServiceWorkerManager::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerManagerParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PServiceWorkerManagerMsgStart, actor);
    return sendok__;
}

auto PServiceWorkerManagerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PServiceWorkerUpdaterMsgStart:
{
            PServiceWorkerUpdaterParent* actor = static_cast<PServiceWorkerUpdaterParent*>(aListener);
            auto& container = mManagedPServiceWorkerUpdaterParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PServiceWorkerManagerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PServiceWorkerUpdaterMsgStart:
        static_cast<ServiceWorkerManagerParent*>(this)->DeallocPServiceWorkerUpdaterParent(static_cast<PServiceWorkerUpdaterParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PServiceWorkerManagerParent::OnMessageReceived(const Message& msg__) -> PServiceWorkerManagerParent::Result
{
    switch (msg__.type()) {
    case PServiceWorkerManager::Msg_Register__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_Register", OTHER);

            PickleIterator iter__{msg__};
            ServiceWorkerRegistrationData data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'ServiceWorkerRegistrationData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ServiceWorkerRegistrationData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerParent*>(this))->RecvRegister(std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_Unregister__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_Unregister", OTHER);

            PickleIterator iter__{msg__};
            PrincipalInfo principalInfo{};
            nsString scope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principalInfo)))))) {
                FatalError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            // Sentinel = 'principalInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 633472335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerParent*>(this))->RecvUnregister(std::move(principalInfo), std::move(scope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_PropagateSoftUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PropagateSoftUpdate", OTHER);

            PickleIterator iter__{msg__};
            OriginAttributes originAttributes{};
            nsString scope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'originAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 947259056)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerParent*>(this))->RecvPropagateSoftUpdate(std::move(originAttributes), std::move(scope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_PropagateUnregister__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PropagateUnregister", OTHER);

            PickleIterator iter__{msg__};
            PrincipalInfo principalInfo{};
            nsString scope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principalInfo)))))) {
                FatalError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            // Sentinel = 'principalInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 633472335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerParent*>(this))->RecvPropagateUnregister(std::move(principalInfo), std::move(scope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_PropagateRemove__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PropagateRemove", OTHER);

            PickleIterator iter__{msg__};
            nsCString host{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(host)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'host'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72024511)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ServiceWorkerManagerParent*>(this))->RecvPropagateRemove(std::move(host))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_PropagateRemoveAll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PropagateRemoveAll", OTHER);

            if ((!((static_cast<ServiceWorkerManagerParent*>(this))->RecvPropagateRemoveAll()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_Shutdown", OTHER);

            if ((!((static_cast<ServiceWorkerManagerParent*>(this))->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Msg_PServiceWorkerUpdaterConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerManager::Msg_PServiceWorkerUpdaterConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            OriginAttributes originAttributes{};
            nsCString scope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'originAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 947259056)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PServiceWorkerUpdaterParent* actor = (static_cast<ServiceWorkerManagerParent*>(this))->AllocPServiceWorkerUpdaterParent(originAttributes, scope);
            if (!actor) {
                NS_WARNING("Cannot bind null PServiceWorkerUpdaterParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPServiceWorkerUpdaterParent.PutEntry(actor);

            if ((!((static_cast<ServiceWorkerManagerParent*>(this))->RecvPServiceWorkerUpdaterConstructor(std::move(actor), std::move(originAttributes), std::move(scope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerManager::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PServiceWorkerManagerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PServiceWorkerManagerParent::Result
{
    return MsgNotKnown;
}

auto PServiceWorkerManagerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PServiceWorkerManagerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PServiceWorkerManagerParent::ClearSubtree() -> void
{
    for (auto it = mManagedPServiceWorkerUpdaterParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPServiceWorkerUpdaterParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPServiceWorkerUpdaterParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPServiceWorkerUpdaterParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PServiceWorkerManagerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PServiceWorkerManagerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PServiceWorkerManager", PServiceWorkerManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PServiceWorkerManagerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
