//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/widget/LookAndFeelTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LookAndFeelInt|
//
namespace mozilla {
namespace widget {
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::LookAndFeelInt>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    (aMsg)->WriteBytes((&((aVar).value())), 4);
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
}

auto IPDLParamTraits<mozilla::widget::LookAndFeelInt>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (IntID) member of 'LookAndFeelInt'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (IntID) member of 'LookAndFeelInt'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->value())), 4)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LookAndFeelFont|
//
namespace mozilla {
namespace widget {
auto LookAndFeelFont::operator==(const LookAndFeelFont& _o) const -> bool
{
    if ((!((haveFont()) == ((_o).haveFont())))) {
        return false;
    }
    if ((!((name()) == ((_o).name())))) {
        return false;
    }
    if ((!((size()) == ((_o).size())))) {
        return false;
    }
    if ((!((weight()) == ((_o).weight())))) {
        return false;
    }
    if ((!((italic()) == ((_o).italic())))) {
        return false;
    }
    return true;
}

auto LookAndFeelFont::operator!=(const LookAndFeelFont& _o) const -> bool
{
    return (!(operator==(_o)));
}

auto LookAndFeelFont::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(LookAndFeelFont, weight_) - offsetof(LookAndFeelFont, size_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::LookAndFeelFont>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).haveFont());
    // Sentinel = 'haveFont'
    (aMsg)->WriteSentinel(241238844);
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).italic());
    // Sentinel = 'italic'
    (aMsg)->WriteSentinel(146604663);
    (aMsg)->WriteBytes((&((aVar).size())), 8);
    // Sentinel = 'size | weight'
    (aMsg)->WriteSentinel(583009536);
}

auto IPDLParamTraits<mozilla::widget::LookAndFeelFont>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->haveFont())))))) {
        aActor->FatalError("Error deserializing 'haveFont' (bool) member of 'LookAndFeelFont'");
        return false;
    }
    // Sentinel = 'haveFont'
    if ((!((aMsg)->ReadSentinel(aIter, 241238844)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'haveFont' (bool) member of 'LookAndFeelFont'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'LookAndFeelFont'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'LookAndFeelFont'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->italic())))))) {
        aActor->FatalError("Error deserializing 'italic' (bool) member of 'LookAndFeelFont'");
        return false;
    }
    // Sentinel = 'italic'
    if ((!((aMsg)->ReadSentinel(aIter, 146604663)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'italic' (bool) member of 'LookAndFeelFont'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->size())), 8)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'size | weight'
    if ((!((aMsg)->ReadSentinel(aIter, 583009536)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LookAndFeelColor|
//
namespace mozilla {
namespace widget {
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::LookAndFeelColor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).color());
    // Sentinel = 'color'
    (aMsg)->WriteSentinel(105120288);
}

auto IPDLParamTraits<mozilla::widget::LookAndFeelColor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (ColorID) member of 'LookAndFeelColor'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (ColorID) member of 'LookAndFeelColor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->color())))))) {
        aActor->FatalError("Error deserializing 'color' (nscolor) member of 'LookAndFeelColor'");
        return false;
    }
    // Sentinel = 'color'
    if ((!((aMsg)->ReadSentinel(aIter, 105120288)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'color' (nscolor) member of 'LookAndFeelColor'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LookAndFeelCache|
//
namespace mozilla {
namespace widget {
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::LookAndFeelCache>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).mInts());
    // Sentinel = 'mInts'
    (aMsg)->WriteSentinel(99549708);
    WriteIPDLParam(aMsg, aActor, (aVar).mFonts());
    // Sentinel = 'mFonts'
    (aMsg)->WriteSentinel(139657848);
    WriteIPDLParam(aMsg, aActor, (aVar).mColors());
    // Sentinel = 'mColors'
    (aMsg)->WriteSentinel(185795296);
}

auto IPDLParamTraits<mozilla::widget::LookAndFeelCache>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mInts())))))) {
        aActor->FatalError("Error deserializing 'mInts' (LookAndFeelInt[]) member of 'LookAndFeelCache'");
        return false;
    }
    // Sentinel = 'mInts'
    if ((!((aMsg)->ReadSentinel(aIter, 99549708)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mInts' (LookAndFeelInt[]) member of 'LookAndFeelCache'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mFonts())))))) {
        aActor->FatalError("Error deserializing 'mFonts' (LookAndFeelFont[]) member of 'LookAndFeelCache'");
        return false;
    }
    // Sentinel = 'mFonts'
    if ((!((aMsg)->ReadSentinel(aIter, 139657848)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mFonts' (LookAndFeelFont[]) member of 'LookAndFeelCache'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mColors())))))) {
        aActor->FatalError("Error deserializing 'mColors' (LookAndFeelColor[]) member of 'LookAndFeelCache'");
        return false;
    }
    // Sentinel = 'mColors'
    if ((!((aMsg)->ReadSentinel(aIter, 185795296)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mColors' (LookAndFeelColor[]) member of 'LookAndFeelCache'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LookAndFeelTables|
//
namespace mozilla {
namespace widget {
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::LookAndFeelTables>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).ints());
    // Sentinel = 'ints'
    (aMsg)->WriteSentinel(72155583);
    WriteIPDLParam(aMsg, aActor, (aVar).floats());
    // Sentinel = 'floats'
    (aMsg)->WriteSentinel(146801290);
    WriteIPDLParam(aMsg, aActor, (aVar).colors());
    // Sentinel = 'colors'
    (aMsg)->WriteSentinel(148308627);
    WriteIPDLParam(aMsg, aActor, (aVar).fonts());
    // Sentinel = 'fonts'
    (aMsg)->WriteSentinel(107217451);
    WriteIPDLParam(aMsg, aActor, (aVar).intMap());
    // Sentinel = 'intMap'
    (aMsg)->WriteSentinel(143327850);
    WriteIPDLParam(aMsg, aActor, (aVar).floatMap());
    // Sentinel = 'floatMap'
    (aMsg)->WriteSentinel(244581173);
    WriteIPDLParam(aMsg, aActor, (aVar).colorMap());
    // Sentinel = 'colorMap'
    (aMsg)->WriteSentinel(247268158);
    WriteIPDLParam(aMsg, aActor, (aVar).fontMap());
    // Sentinel = 'fontMap'
    (aMsg)->WriteSentinel(192545494);
    WriteIPDLParam(aMsg, aActor, (aVar).passwordEcho());
    // Sentinel = 'passwordEcho'
    (aMsg)->WriteSentinel(551355635);
    (aMsg)->WriteBytes((&((aVar).passwordChar())), 2);
    // Sentinel = 'passwordChar'
    (aMsg)->WriteSentinel(551093490);
}

auto IPDLParamTraits<mozilla::widget::LookAndFeelTables>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ints())))))) {
        aActor->FatalError("Error deserializing 'ints' (int32_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'ints'
    if ((!((aMsg)->ReadSentinel(aIter, 72155583)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ints' (int32_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->floats())))))) {
        aActor->FatalError("Error deserializing 'floats' (float[]) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'floats'
    if ((!((aMsg)->ReadSentinel(aIter, 146801290)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'floats' (float[]) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->colors())))))) {
        aActor->FatalError("Error deserializing 'colors' (nscolor[]) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'colors'
    if ((!((aMsg)->ReadSentinel(aIter, 148308627)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'colors' (nscolor[]) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fonts())))))) {
        aActor->FatalError("Error deserializing 'fonts' (LookAndFeelFont[]) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'fonts'
    if ((!((aMsg)->ReadSentinel(aIter, 107217451)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fonts' (LookAndFeelFont[]) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->intMap())))))) {
        aActor->FatalError("Error deserializing 'intMap' (uint8_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'intMap'
    if ((!((aMsg)->ReadSentinel(aIter, 143327850)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'intMap' (uint8_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->floatMap())))))) {
        aActor->FatalError("Error deserializing 'floatMap' (uint8_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'floatMap'
    if ((!((aMsg)->ReadSentinel(aIter, 244581173)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'floatMap' (uint8_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->colorMap())))))) {
        aActor->FatalError("Error deserializing 'colorMap' (uint8_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'colorMap'
    if ((!((aMsg)->ReadSentinel(aIter, 247268158)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'colorMap' (uint8_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fontMap())))))) {
        aActor->FatalError("Error deserializing 'fontMap' (uint8_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'fontMap'
    if ((!((aMsg)->ReadSentinel(aIter, 192545494)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fontMap' (uint8_t[]) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->passwordEcho())))))) {
        aActor->FatalError("Error deserializing 'passwordEcho' (bool) member of 'LookAndFeelTables'");
        return false;
    }
    // Sentinel = 'passwordEcho'
    if ((!((aMsg)->ReadSentinel(aIter, 551355635)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'passwordEcho' (bool) member of 'LookAndFeelTables'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->passwordChar())), 2)))) {
        aActor->FatalError("Error bulk reading fields from uint16_t");
        return false;
    }
    // Sentinel = 'passwordChar'
    if ((!((aMsg)->ReadSentinel(aIter, 551093490)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint16_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LookAndFeelTheme|
//
namespace mozilla {
namespace widget {
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::LookAndFeelTheme>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).themeName());
    // Sentinel = 'themeName'
    (aMsg)->WriteSentinel(306250645);
    WriteIPDLParam(aMsg, aActor, (aVar).preferDarkTheme());
    // Sentinel = 'preferDarkTheme'
    (aMsg)->WriteSentinel(810354170);
}

auto IPDLParamTraits<mozilla::widget::LookAndFeelTheme>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->themeName())))))) {
        aActor->FatalError("Error deserializing 'themeName' (nsCString) member of 'LookAndFeelTheme'");
        return false;
    }
    // Sentinel = 'themeName'
    if ((!((aMsg)->ReadSentinel(aIter, 306250645)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'themeName' (nsCString) member of 'LookAndFeelTheme'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preferDarkTheme())))))) {
        aActor->FatalError("Error deserializing 'preferDarkTheme' (bool) member of 'LookAndFeelTheme'");
        return false;
    }
    // Sentinel = 'preferDarkTheme'
    if ((!((aMsg)->ReadSentinel(aIter, 810354170)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preferDarkTheme' (bool) member of 'LookAndFeelTheme'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FullLookAndFeel|
//
namespace mozilla {
namespace widget {
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::FullLookAndFeel>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).tables());
    // Sentinel = 'tables'
    (aMsg)->WriteSentinel(145490556);
    WriteIPDLParam(aMsg, aActor, (aVar).theme());
    // Sentinel = 'theme'
    (aMsg)->WriteSentinel(106365460);
}

auto IPDLParamTraits<mozilla::widget::FullLookAndFeel>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tables())))))) {
        aActor->FatalError("Error deserializing 'tables' (LookAndFeelTables) member of 'FullLookAndFeel'");
        return false;
    }
    // Sentinel = 'tables'
    if ((!((aMsg)->ReadSentinel(aIter, 145490556)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tables' (LookAndFeelTables) member of 'FullLookAndFeel'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->theme())))))) {
        aActor->FatalError("Error deserializing 'theme' (LookAndFeelTheme) member of 'FullLookAndFeel'");
        return false;
    }
    // Sentinel = 'theme'
    if ((!((aMsg)->ReadSentinel(aIter, 106365460)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'theme' (LookAndFeelTheme) member of 'FullLookAndFeel'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union LookAndFeelData|
//
namespace mozilla {
namespace widget {
auto LookAndFeelData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TLookAndFeelCache:
        {
            (ptr_LookAndFeelCache())->~LookAndFeelCache__tdef();
            break;
        }
    case TFullLookAndFeel:
        {
            (ptr_FullLookAndFeel())->~FullLookAndFeel__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT LookAndFeelData::LookAndFeelData(const LookAndFeelCache& aOther)
{
    new (mozilla::KnownNotNull, ptr_LookAndFeelCache()) LookAndFeelCache(aOther);
    mType = TLookAndFeelCache;
}

MOZ_IMPLICIT LookAndFeelData::LookAndFeelData(LookAndFeelCache&& aOther)
{
    new (mozilla::KnownNotNull, ptr_LookAndFeelCache()) LookAndFeelCache(std::move(aOther));
    mType = TLookAndFeelCache;
}

MOZ_IMPLICIT LookAndFeelData::LookAndFeelData(const FullLookAndFeel& aOther)
{
    new (mozilla::KnownNotNull, ptr_FullLookAndFeel()) FullLookAndFeel(aOther);
    mType = TFullLookAndFeel;
}

MOZ_IMPLICIT LookAndFeelData::LookAndFeelData(FullLookAndFeel&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FullLookAndFeel()) FullLookAndFeel(std::move(aOther));
    mType = TFullLookAndFeel;
}

MOZ_IMPLICIT LookAndFeelData::LookAndFeelData(const LookAndFeelData& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TLookAndFeelCache:
        {
            new (mozilla::KnownNotNull, ptr_LookAndFeelCache()) LookAndFeelCache((aOther).get_LookAndFeelCache());
            break;
        }
    case TFullLookAndFeel:
        {
            new (mozilla::KnownNotNull, ptr_FullLookAndFeel()) FullLookAndFeel((aOther).get_FullLookAndFeel());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT LookAndFeelData::LookAndFeelData(LookAndFeelData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TLookAndFeelCache:
        {
            new (mozilla::KnownNotNull, ptr_LookAndFeelCache()) LookAndFeelCache(std::move((aOther).get_LookAndFeelCache()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFullLookAndFeel:
        {
            new (mozilla::KnownNotNull, ptr_FullLookAndFeel()) FullLookAndFeel(std::move((aOther).get_FullLookAndFeel()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

LookAndFeelData::~LookAndFeelData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto LookAndFeelData::operator=(const LookAndFeelCache& aRhs) -> LookAndFeelData&
{
    if (MaybeDestroy(TLookAndFeelCache)) {
        new (mozilla::KnownNotNull, ptr_LookAndFeelCache()) LookAndFeelCache;
    }
    (*(ptr_LookAndFeelCache())) = aRhs;
    mType = TLookAndFeelCache;
    return (*(this));
}

auto LookAndFeelData::operator=(LookAndFeelCache&& aRhs) -> LookAndFeelData&
{
    if (MaybeDestroy(TLookAndFeelCache)) {
        new (mozilla::KnownNotNull, ptr_LookAndFeelCache()) LookAndFeelCache;
    }
    (*(ptr_LookAndFeelCache())) = std::move(aRhs);
    mType = TLookAndFeelCache;
    return (*(this));
}

auto LookAndFeelData::operator=(const FullLookAndFeel& aRhs) -> LookAndFeelData&
{
    if (MaybeDestroy(TFullLookAndFeel)) {
        new (mozilla::KnownNotNull, ptr_FullLookAndFeel()) FullLookAndFeel;
    }
    (*(ptr_FullLookAndFeel())) = aRhs;
    mType = TFullLookAndFeel;
    return (*(this));
}

auto LookAndFeelData::operator=(FullLookAndFeel&& aRhs) -> LookAndFeelData&
{
    if (MaybeDestroy(TFullLookAndFeel)) {
        new (mozilla::KnownNotNull, ptr_FullLookAndFeel()) FullLookAndFeel;
    }
    (*(ptr_FullLookAndFeel())) = std::move(aRhs);
    mType = TFullLookAndFeel;
    return (*(this));
}

auto LookAndFeelData::operator=(const LookAndFeelData& aRhs) -> LookAndFeelData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TLookAndFeelCache:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LookAndFeelCache()) LookAndFeelCache;
            }
            (*(ptr_LookAndFeelCache())) = (aRhs).get_LookAndFeelCache();
            break;
        }
    case TFullLookAndFeel:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FullLookAndFeel()) FullLookAndFeel;
            }
            (*(ptr_FullLookAndFeel())) = (aRhs).get_FullLookAndFeel();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto LookAndFeelData::operator=(LookAndFeelData&& aRhs) -> LookAndFeelData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TLookAndFeelCache:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_LookAndFeelCache()) LookAndFeelCache;
            }
            (*(ptr_LookAndFeelCache())) = std::move((aRhs).get_LookAndFeelCache());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFullLookAndFeel:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FullLookAndFeel()) FullLookAndFeel;
            }
            (*(ptr_FullLookAndFeel())) = std::move((aRhs).get_FullLookAndFeel());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::LookAndFeelData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::widget::LookAndFeelData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'LookAndFeelData'
    (aMsg)->WriteSentinel(750781855);

    switch (type) {
    case union__::TLookAndFeelCache:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_LookAndFeelCache());
            // Sentinel = 'TLookAndFeelCache'
            (aMsg)->WriteSentinel(942605901);
            return;
        }
    case union__::TFullLookAndFeel:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FullLookAndFeel());
            // Sentinel = 'TFullLookAndFeel'
            (aMsg)->WriteSentinel(855705100);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::widget::LookAndFeelData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::widget::LookAndFeelData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union LookAndFeelData");
        return false;
    }
    // Sentinel = 'LookAndFeelData'
    if ((!((aMsg)->ReadSentinel(aIter, 750781855)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union LookAndFeelData");
        return false;
    }

    switch (type) {
    case union__::TLookAndFeelCache:
        {
            mozilla::widget::LookAndFeelCache tmp = mozilla::widget::LookAndFeelCache();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_LookAndFeelCache())))))) {
                aActor->FatalError("Error deserializing variant TLookAndFeelCache of union LookAndFeelData");
                return false;
            }
            // Sentinel = 'TLookAndFeelCache'
            if ((!((aMsg)->ReadSentinel(aIter, 942605901)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TLookAndFeelCache of union LookAndFeelData");
                return false;
            }
            return true;
        }
    case union__::TFullLookAndFeel:
        {
            mozilla::widget::FullLookAndFeel tmp = mozilla::widget::FullLookAndFeel();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FullLookAndFeel())))))) {
                aActor->FatalError("Error deserializing variant TFullLookAndFeel of union LookAndFeelData");
                return false;
            }
            // Sentinel = 'TFullLookAndFeel'
            if ((!((aMsg)->ReadSentinel(aIter, 855705100)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFullLookAndFeel of union LookAndFeelData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
