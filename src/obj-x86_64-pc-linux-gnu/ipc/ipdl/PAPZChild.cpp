//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PAPZChild.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/APZChild.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/RepaintRequest.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "nsRegion.h"

#include "mozilla/layers/PCompositorBridgeChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


MOZ_IMPLICIT PAPZChild::PAPZChild() :
    mozilla::ipc::IProtocol(PAPZMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PAPZChild);
}

PAPZChild::~PAPZChild()
{
    MOZ_COUNT_DTOR(PAPZChild);
}

auto PAPZChild::Manager() const -> PCompositorBridgeChild*
{
    return static_cast<PCompositorBridgeChild*>(IProtocol::Manager());
}

auto PAPZChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PAPZChild::Send__delete__(PAPZChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PAPZ::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PAPZMsgStart, actor);
    return sendok__;
}

auto PAPZChild::SendDestroy() -> bool
{
    IPC::Message* msg__ = PAPZ::Msg_Destroy(Id());





    if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZ::Msg_Destroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZChild::OnMessageReceived(const Message& msg__) -> PAPZChild::Result
{
    switch (msg__.type()) {
    case PAPZ::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PAPZ::Msg_LayerTransforms__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_LayerTransforms", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<MatrixMessage> aTransforms{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTransforms)))))) {
                FatalError("Error deserializing 'MatrixMessage[]'");
                return MsgValueError;
            }
            // Sentinel = 'aTransforms'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 446235793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MatrixMessage[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvLayerTransforms(std::move(aTransforms))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_RequestContentRepaint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_RequestContentRepaint", OTHER);

            PickleIterator iter__{msg__};
            RepaintRequest request{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(request)))))) {
                FatalError("Error deserializing 'RepaintRequest'");
                return MsgValueError;
            }
            // Sentinel = 'request'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 202703626)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RepaintRequest'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvRequestContentRepaint(std::move(request))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_UpdateOverscrollVelocity__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_UpdateOverscrollVelocity", OTHER);

            PickleIterator iter__{msg__};
            ScrollableLayerGuid aGuid{};
            float aX{};
            float aY{};
            bool aIsRootContent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsRootContent)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsRootContent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 683410845)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvUpdateOverscrollVelocity(std::move(aGuid), std::move(aX), std::move(aY), std::move(aIsRootContent))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_UpdateOverscrollOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_UpdateOverscrollOffset", OTHER);

            PickleIterator iter__{msg__};
            ScrollableLayerGuid aGuid{};
            float aX{};
            float aY{};
            bool aIsRootContent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsRootContent)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsRootContent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 683410845)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvUpdateOverscrollOffset(std::move(aGuid), std::move(aX), std::move(aY), std::move(aIsRootContent))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_NotifyMozMouseScrollEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyMozMouseScrollEvent", OTHER);

            PickleIterator iter__{msg__};
            ViewID aScrollId{};
            nsString aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollId)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293602174)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvNotifyMozMouseScrollEvent(std::move(aScrollId), std::move(aEvent))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_NotifyAPZStateChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyAPZStateChange", OTHER);

            PickleIterator iter__{msg__};
            ScrollableLayerGuid aGuid{};
            GeckoContentController_APZStateChange aChange{};
            int aArg{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChange)))))) {
                FatalError("Error deserializing 'GeckoContentController_APZStateChange'");
                return MsgValueError;
            }
            // Sentinel = 'aChange'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 172556968)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GeckoContentController_APZStateChange'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArg)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'aArg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60162428)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvNotifyAPZStateChange(std::move(aGuid), std::move(aChange), std::move(aArg))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_NotifyFlushComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyFlushComplete", OTHER);

            if ((!((static_cast<APZChild*>(this))->RecvNotifyFlushComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_NotifyAsyncScrollbarDragInitiated__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyAsyncScrollbarDragInitiated", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aDragBlockId{};
            ViewID aScrollId{};
            ScrollDirection aDirection{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDragBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDragBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 484246648)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollId)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293602174)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDirection)))))) {
                FatalError("Error deserializing 'ScrollDirection'");
                return MsgValueError;
            }
            // Sentinel = 'aDirection'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 356647939)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollDirection'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvNotifyAsyncScrollbarDragInitiated(std::move(aDragBlockId), std::move(aScrollId), std::move(aDirection))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_NotifyAsyncScrollbarDragRejected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyAsyncScrollbarDragRejected", OTHER);

            PickleIterator iter__{msg__};
            ViewID aScrollId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollId)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293602174)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvNotifyAsyncScrollbarDragRejected(std::move(aScrollId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_NotifyAsyncAutoscrollRejected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_NotifyAsyncAutoscrollRejected", OTHER);

            PickleIterator iter__{msg__};
            ViewID aScrollId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollId)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293602174)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZChild*>(this))->RecvNotifyAsyncAutoscrollRejected(std::move(aScrollId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZ::Msg_Destroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZ::Msg_Destroy", OTHER);

            if ((!((static_cast<APZChild*>(this))->RecvDestroy()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAPZChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZChild::Result
{
    return MsgNotKnown;
}

auto PAPZChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAPZChild::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PAPZChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PAPZChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PAPZ", PAPZMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PAPZChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
