//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "gfxipc/ShadowLayerUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/plugins/PPluginBackgroundDestroyerParent.h"
#include "mozilla/plugins/PPluginBackgroundDestroyerChild.h"
#include "mozilla/plugins/PPluginModuleParent.h"
#include "mozilla/plugins/PPluginModuleChild.h"
#include "mozilla/plugins/PPluginScriptableObjectParent.h"
#include "mozilla/plugins/PPluginScriptableObjectChild.h"
#include "mozilla/plugins/PBrowserStreamParent.h"
#include "mozilla/plugins/PBrowserStreamChild.h"
#include "mozilla/plugins/PStreamNotifyParent.h"
#include "mozilla/plugins/PStreamNotifyChild.h"
#include "mozilla/plugins/PPluginSurfaceParent.h"
#include "mozilla/plugins/PPluginSurfaceChild.h"
#include "mozilla/plugins/PPluginInstance.h"
#include "mozilla/plugins/PPluginInstanceParent.h"
#include "mozilla/plugins/PPluginInstanceChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {
namespace PPluginInstance {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginInstanceParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginInstanceChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CreateChildPluginWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateChildPluginWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CreateChildPluginWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CreateChildPluginWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_CreateChildPopupSurrogate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateChildPopupSurrogate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NPP_SetWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_SetWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_SetWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_SetWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_GetValue_NPPVpluginScriptableNPObject(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_GetValue_NPPVpluginScriptableNPObject__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_GetValue_NPPVpluginScriptableNPObject(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_GetValue_NPPVpluginScriptableNPObject__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_SetValue_NPNVprivateModeBool(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_SetValue_NPNVprivateModeBool__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_SetValue_NPNVprivateModeBool(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_SetValue_NPNVprivateModeBool__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_SetValue_NPNVCSSZoomFactor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_SetValue_NPNVCSSZoomFactor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_SetValue_NPNVCSSZoomFactor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_SetValue_NPNVCSSZoomFactor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_SetValue_NPNVmuteAudioBool(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_SetValue_NPNVmuteAudioBool__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_SetValue_NPNVmuteAudioBool(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_SetValue_NPNVmuteAudioBool__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_HandleEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_HandleEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_HandleEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_HandleEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_HandleEvent_Shmem(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_HandleEvent_Shmem__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_HandleEvent_Shmem(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_HandleEvent_Shmem__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_HandleEvent_IOSurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_HandleEvent_IOSurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_HandleEvent_IOSurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_HandleEvent_IOSurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Paint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Paint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Paint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Paint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_WindowPosChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WindowPosChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ContentsScaleFactorChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ContentsScaleFactorChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AsyncSetWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AsyncSetWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateBackground(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateBackground__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NPP_DidComposite(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_DidComposite__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NPP_Destroy(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_Destroy__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_Destroy(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_Destroy__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_NPNVWindowNPObject(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_NPNVWindowNPObject__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_NPNVWindowNPObject(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_NPNVWindowNPObject__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_NPNVPluginElementNPObject(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_NPNVPluginElementNPObject__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_NPNVPluginElementNPObject(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_NPNVPluginElementNPObject__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_NPNVprivateModeBool(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_NPNVprivateModeBool__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_NPNVprivateModeBool(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_NPNVprivateModeBool__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_NPNVnetscapeWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_NPNVnetscapeWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_NPNVnetscapeWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_NPNVnetscapeWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_NPNVdocumentOrigin(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_NPNVdocumentOrigin__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_NPNVdocumentOrigin(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_NPNVdocumentOrigin__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_DrawingModelSupport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_DrawingModelSupport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_DrawingModelSupport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_DrawingModelSupport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_SupportsAsyncBitmapSurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_SupportsAsyncBitmapSurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_SupportsAsyncBitmapSurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_SupportsAsyncBitmapSurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_SupportsAsyncDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_SupportsAsyncDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_SupportsAsyncDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_SupportsAsyncDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValue_PreferredDXGIAdapter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValue_PreferredDXGIAdapter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValue_PreferredDXGIAdapter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValue_PreferredDXGIAdapter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_SetValue_NPPVpluginWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetValue_NPPVpluginWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetValue_NPPVpluginWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetValue_NPPVpluginWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_SetValue_NPPVpluginTransparent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetValue_NPPVpluginTransparent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetValue_NPPVpluginTransparent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetValue_NPPVpluginTransparent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_SetValue_NPPVpluginDrawingModel(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetValue_NPPVpluginDrawingModel__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetValue_NPPVpluginDrawingModel(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetValue_NPPVpluginDrawingModel__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_SetValue_NPPVpluginEventModel(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetValue_NPPVpluginEventModel__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetValue_NPPVpluginEventModel(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetValue_NPPVpluginEventModel__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_SetValue_NPPVpluginIsPlayingAudio(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetValue_NPPVpluginIsPlayingAudio__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetValue_NPPVpluginIsPlayingAudio(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetValue_NPPVpluginIsPlayingAudio__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_PostURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_PostURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_PostURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_PostURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PStreamNotifyConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PStreamNotifyConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PStreamNotifyConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PStreamNotifyConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_InvalidateRect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_InvalidateRect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RevokeCurrentDirectSurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RevokeCurrentDirectSurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RevokeCurrentDirectSurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RevokeCurrentDirectSurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InitDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_InitDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_InitDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_FinalizeDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FinalizeDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_FinalizeDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_FinalizeDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ShowDirectBitmap(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShowDirectBitmap__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ShowDirectBitmap(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ShowDirectBitmap__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ShowDirectDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShowDirectDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ShowDirectDXGISurface(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ShowDirectDXGISurface__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Show(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Show__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Show(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Show__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PPluginSurfaceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPluginSurfaceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPluginSurfaceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPluginSurfaceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_PushPopupsEnabledState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_PushPopupsEnabledState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_PushPopupsEnabledState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_PushPopupsEnabledState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_PopPopupsEnabledState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_PopPopupsEnabledState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_PopPopupsEnabledState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_PopPopupsEnabledState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_GetValueForURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_GetValueForURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_GetValueForURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_GetValueForURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_SetValueForURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetValueForURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetValueForURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetValueForURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_ConvertPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_ConvertPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_ConvertPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_ConvertPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RedrawPlugin(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RedrawPlugin__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetNetscapeWindowAsParent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetNetscapeWindowAsParent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetCompositionString(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetCompositionString__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetCompositionString(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetCompositionString__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RequestCommitOrCancel(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestCommitOrCancel__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PPluginScriptableObjectConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPluginScriptableObjectConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPluginScriptableObjectConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPluginScriptableObjectConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PBrowserStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PBrowserStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PBrowserStreamConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PBrowserStreamConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_NewStream(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_NewStream__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPP_NewStream(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPP_NewStream__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PluginFocusChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PluginFocusChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PluginFocusChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PluginFocusChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetPluginFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetPluginFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SetPluginFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SetPluginFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_UpdateWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_UpdateWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_UpdateWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PPluginBackgroundDestroyerConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPluginBackgroundDestroyerConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPluginBackgroundDestroyerConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPluginBackgroundDestroyerConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PPluginInstance
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IOSurfaceDescriptor|
//
namespace mozilla {
namespace plugins {
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::IOSurfaceDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).contentsScaleFactor())), 8);
    // Sentinel = 'contentsScaleFactor'
    (aMsg)->WriteSentinel(1304102838);
    (aMsg)->WriteBytes((&((aVar).surfaceId())), 4);
    // Sentinel = 'surfaceId'
    (aMsg)->WriteSentinel(315884439);
}

auto IPDLParamTraits<mozilla::plugins::IOSurfaceDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->contentsScaleFactor())), 8)))) {
        aActor->FatalError("Error bulk reading fields from double");
        return false;
    }
    // Sentinel = 'contentsScaleFactor'
    if ((!((aMsg)->ReadSentinel(aIter, 1304102838)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from double");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->surfaceId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'surfaceId'
    if ((!((aMsg)->ReadSentinel(aIter, 315884439)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union SurfaceDescriptor|
//
namespace mozilla {
namespace plugins {
auto SurfaceDescriptor::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TShmem:
        {
            (ptr_Shmem())->~Shmem__tdef();
            break;
        }
    case TSurfaceDescriptorX11:
        {
            (ptr_SurfaceDescriptorX11())->~SurfaceDescriptorX11__tdef();
            break;
        }
    case TPPluginSurfaceParent:
        {
            (ptr_PPluginSurfaceParent())->~PPluginSurfaceParent__tdef();
            break;
        }
    case TPPluginSurfaceChild:
        {
            (ptr_PPluginSurfaceChild())->~PPluginSurfaceChild__tdef();
            break;
        }
    case TIOSurfaceDescriptor:
        {
            (ptr_IOSurfaceDescriptor())->~IOSurfaceDescriptor__tdef();
            break;
        }
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(Shmem&& aOther)
{
    new (mozilla::KnownNotNull, ptr_Shmem()) Shmem(aOther);
    mType = TShmem;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptorX11& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11(aOther);
    mType = TSurfaceDescriptorX11;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptorX11&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11(std::move(aOther));
    mType = TSurfaceDescriptorX11;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(PPluginSurfaceParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PPluginSurfaceParent()) PPluginSurfaceParent*(const_cast<PPluginSurfaceParent*>(aOther));
    mType = TPPluginSurfaceParent;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(PPluginSurfaceChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PPluginSurfaceChild()) PPluginSurfaceChild*(const_cast<PPluginSurfaceChild*>(aOther));
    mType = TPPluginSurfaceChild;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const IOSurfaceDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_IOSurfaceDescriptor()) IOSurfaceDescriptor(aOther);
    mType = TIOSurfaceDescriptor;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(IOSurfaceDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IOSurfaceDescriptor()) IOSurfaceDescriptor(std::move(aOther));
    mType = TIOSurfaceDescriptor;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(const SurfaceDescriptor& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TShmem:
        {
            new (mozilla::KnownNotNull, ptr_Shmem()) Shmem((aOther).get_Shmem());
            break;
        }
    case TSurfaceDescriptorX11:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11((aOther).get_SurfaceDescriptorX11());
            break;
        }
    case TPPluginSurfaceParent:
        {
            new (mozilla::KnownNotNull, ptr_PPluginSurfaceParent()) PPluginSurfaceParent*(const_cast<PPluginSurfaceParent*>((aOther).get_PPluginSurfaceParent()));
            break;
        }
    case TPPluginSurfaceChild:
        {
            new (mozilla::KnownNotNull, ptr_PPluginSurfaceChild()) PPluginSurfaceChild*(const_cast<PPluginSurfaceChild*>((aOther).get_PPluginSurfaceChild()));
            break;
        }
    case TIOSurfaceDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_IOSurfaceDescriptor()) IOSurfaceDescriptor((aOther).get_IOSurfaceDescriptor());
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT SurfaceDescriptor::SurfaceDescriptor(SurfaceDescriptor&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TShmem:
        {
            new (mozilla::KnownNotNull, ptr_Shmem()) Shmem(std::move((aOther).get_Shmem()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorX11:
        {
            new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11(std::move((aOther).get_SurfaceDescriptorX11()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPPluginSurfaceParent:
        {
            new (mozilla::KnownNotNull, ptr_PPluginSurfaceParent()) PPluginSurfaceParent*(const_cast<PPluginSurfaceParent*>(std::move((aOther).get_PPluginSurfaceParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPPluginSurfaceChild:
        {
            new (mozilla::KnownNotNull, ptr_PPluginSurfaceChild()) PPluginSurfaceChild*(const_cast<PPluginSurfaceChild*>(std::move((aOther).get_PPluginSurfaceChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIOSurfaceDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_IOSurfaceDescriptor()) IOSurfaceDescriptor(std::move((aOther).get_IOSurfaceDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

SurfaceDescriptor::~SurfaceDescriptor()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto SurfaceDescriptor::operator=(Shmem&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TShmem)) {
        new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
    }
    (*(ptr_Shmem())) = aRhs;
    mType = TShmem;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptorX11& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorX11)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11;
    }
    (*(ptr_SurfaceDescriptorX11())) = aRhs;
    mType = TSurfaceDescriptorX11;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptorX11&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TSurfaceDescriptorX11)) {
        new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11;
    }
    (*(ptr_SurfaceDescriptorX11())) = std::move(aRhs);
    mType = TSurfaceDescriptorX11;
    return (*(this));
}

auto SurfaceDescriptor::operator=(PPluginSurfaceParent* aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TPPluginSurfaceParent)) {
        new (mozilla::KnownNotNull, ptr_PPluginSurfaceParent()) PPluginSurfaceParent*;
    }
    (*(ptr_PPluginSurfaceParent())) = const_cast<PPluginSurfaceParent*>(aRhs);
    mType = TPPluginSurfaceParent;
    return (*(this));
}

auto SurfaceDescriptor::operator=(PPluginSurfaceChild* aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TPPluginSurfaceChild)) {
        new (mozilla::KnownNotNull, ptr_PPluginSurfaceChild()) PPluginSurfaceChild*;
    }
    (*(ptr_PPluginSurfaceChild())) = const_cast<PPluginSurfaceChild*>(aRhs);
    mType = TPPluginSurfaceChild;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const IOSurfaceDescriptor& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TIOSurfaceDescriptor)) {
        new (mozilla::KnownNotNull, ptr_IOSurfaceDescriptor()) IOSurfaceDescriptor;
    }
    (*(ptr_IOSurfaceDescriptor())) = aRhs;
    mType = TIOSurfaceDescriptor;
    return (*(this));
}

auto SurfaceDescriptor::operator=(IOSurfaceDescriptor&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(TIOSurfaceDescriptor)) {
        new (mozilla::KnownNotNull, ptr_IOSurfaceDescriptor()) IOSurfaceDescriptor;
    }
    (*(ptr_IOSurfaceDescriptor())) = std::move(aRhs);
    mType = TIOSurfaceDescriptor;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const null_t& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto SurfaceDescriptor::operator=(null_t&& aRhs) -> SurfaceDescriptor&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto SurfaceDescriptor::operator=(const SurfaceDescriptor& aRhs) -> SurfaceDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TShmem:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
            }
            (*(ptr_Shmem())) = (aRhs).get_Shmem();
            break;
        }
    case TSurfaceDescriptorX11:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11;
            }
            (*(ptr_SurfaceDescriptorX11())) = (aRhs).get_SurfaceDescriptorX11();
            break;
        }
    case TPPluginSurfaceParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PPluginSurfaceParent()) PPluginSurfaceParent*;
            }
            (*(ptr_PPluginSurfaceParent())) = const_cast<PPluginSurfaceParent*>((aRhs).get_PPluginSurfaceParent());
            break;
        }
    case TPPluginSurfaceChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PPluginSurfaceChild()) PPluginSurfaceChild*;
            }
            (*(ptr_PPluginSurfaceChild())) = const_cast<PPluginSurfaceChild*>((aRhs).get_PPluginSurfaceChild());
            break;
        }
    case TIOSurfaceDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IOSurfaceDescriptor()) IOSurfaceDescriptor;
            }
            (*(ptr_IOSurfaceDescriptor())) = (aRhs).get_IOSurfaceDescriptor();
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto SurfaceDescriptor::operator=(SurfaceDescriptor&& aRhs) -> SurfaceDescriptor&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TShmem:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
            }
            (*(ptr_Shmem())) = std::move((aRhs).get_Shmem());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSurfaceDescriptorX11:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SurfaceDescriptorX11()) SurfaceDescriptorX11;
            }
            (*(ptr_SurfaceDescriptorX11())) = std::move((aRhs).get_SurfaceDescriptorX11());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPPluginSurfaceParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PPluginSurfaceParent()) PPluginSurfaceParent*;
            }
            (*(ptr_PPluginSurfaceParent())) = const_cast<PPluginSurfaceParent*>(std::move((aRhs).get_PPluginSurfaceParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPPluginSurfaceChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PPluginSurfaceChild()) PPluginSurfaceChild*;
            }
            (*(ptr_PPluginSurfaceChild())) = const_cast<PPluginSurfaceChild*>(std::move((aRhs).get_PPluginSurfaceChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIOSurfaceDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IOSurfaceDescriptor()) IOSurfaceDescriptor;
            }
            (*(ptr_IOSurfaceDescriptor())) = std::move((aRhs).get_IOSurfaceDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::SurfaceDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::plugins::SurfaceDescriptor union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'SurfaceDescriptor'
    (aMsg)->WriteSentinel(1018496745);

    switch (type) {
    case union__::TShmem:
        {
            WriteIPDLParam(aMsg, aActor, std::move((aVar).get_Shmem()));
            // Sentinel = 'TShmem'
            (aMsg)->WriteSentinel(129696335);
            return;
        }
    case union__::TSurfaceDescriptorX11:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SurfaceDescriptorX11());
            // Sentinel = 'TSurfaceDescriptorX11'
            (aMsg)->WriteSentinel(1508902903);
            return;
        }
    case union__::TPPluginSurfaceParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PPluginSurfaceParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PPluginSurfaceParent());
                // Sentinel = 'TPPluginSurfaceParent'
                (aMsg)->WriteSentinel(1493567559);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPPluginSurfaceChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PPluginSurfaceChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PPluginSurfaceChild());
                // Sentinel = 'TPPluginSurfaceChild'
                (aMsg)->WriteSentinel(1350764481);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TIOSurfaceDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IOSurfaceDescriptor());
            // Sentinel = 'TIOSurfaceDescriptor'
            (aMsg)->WriteSentinel(1312884693);
            return;
        }
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::plugins::SurfaceDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::plugins::SurfaceDescriptor union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union SurfaceDescriptor");
        return false;
    }
    // Sentinel = 'SurfaceDescriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 1018496745)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union SurfaceDescriptor");
        return false;
    }

    switch (type) {
    case union__::TShmem:
        {
            mozilla::ipc::Shmem tmp = mozilla::ipc::Shmem();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_Shmem())))))) {
                aActor->FatalError("Error deserializing variant TShmem of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TShmem'
            if ((!((aMsg)->ReadSentinel(aIter, 129696335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TShmem of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TSurfaceDescriptorX11:
        {
            mozilla::layers::SurfaceDescriptorX11 tmp = mozilla::layers::SurfaceDescriptorX11();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SurfaceDescriptorX11())))))) {
                aActor->FatalError("Error deserializing variant TSurfaceDescriptorX11 of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TSurfaceDescriptorX11'
            if ((!((aMsg)->ReadSentinel(aIter, 1508902903)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSurfaceDescriptorX11 of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TPPluginSurfaceParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::plugins::PPluginSurfaceChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PPluginSurfaceChild())))))) {
                aActor->FatalError("Error deserializing variant TPPluginSurfaceParent of union SurfaceDescriptor");
                return false;
            }
            if ((!((*((&((aVar)->get_PPluginSurfaceChild()))))))) {
                aActor->FatalError("Error deserializing variant TPPluginSurfaceParent of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TPPluginSurfaceParent'
            if ((!((aMsg)->ReadSentinel(aIter, 1493567559)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPPluginSurfaceParent of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TPPluginSurfaceChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::plugins::PPluginSurfaceParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PPluginSurfaceParent())))))) {
                aActor->FatalError("Error deserializing variant TPPluginSurfaceChild of union SurfaceDescriptor");
                return false;
            }
            if ((!((*((&((aVar)->get_PPluginSurfaceParent()))))))) {
                aActor->FatalError("Error deserializing variant TPPluginSurfaceChild of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TPPluginSurfaceChild'
            if ((!((aMsg)->ReadSentinel(aIter, 1350764481)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPPluginSurfaceChild of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::TIOSurfaceDescriptor:
        {
            mozilla::plugins::IOSurfaceDescriptor tmp = mozilla::plugins::IOSurfaceDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IOSurfaceDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TIOSurfaceDescriptor of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'TIOSurfaceDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 1312884693)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIOSurfaceDescriptor of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union SurfaceDescriptor");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union SurfaceDescriptor");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
