//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/indexedDB/ActorsChild.h"
#include "mozilla/dom/quota/SerializationHelpers.h"
#include "mozilla/ipc/IPCCore.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace indexedDB {


auto PBackgroundIDBFactoryChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBackgroundIDBFactoryChild::RecvPBackgroundIDBDatabaseConstructor(
        PBackgroundIDBDatabaseChild* actor,
        const DatabaseSpec& spec,
        PBackgroundIDBFactoryRequestChild* request) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundIDBFactoryChild::PBackgroundIDBFactoryChild() :
    mozilla::ipc::IProtocol(PBackgroundIDBFactoryMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBackgroundIDBFactoryChild);
}

PBackgroundIDBFactoryChild::~PBackgroundIDBFactoryChild()
{
    MOZ_COUNT_DTOR(PBackgroundIDBFactoryChild);
}

auto PBackgroundIDBFactoryChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PBackgroundIDBFactoryChild::ManagedPBackgroundIDBDatabaseChild(nsTArray<PBackgroundIDBDatabaseChild*>& aArr) const -> void
{
    mManagedPBackgroundIDBDatabaseChild.ToArray(aArr);
}

auto PBackgroundIDBFactoryChild::ManagedPBackgroundIDBDatabaseChild() const -> const ManagedContainer<PBackgroundIDBDatabaseChild>&
{
    return mManagedPBackgroundIDBDatabaseChild;
}

auto PBackgroundIDBFactoryChild::ManagedPBackgroundIDBFactoryRequestChild(nsTArray<PBackgroundIDBFactoryRequestChild*>& aArr) const -> void
{
    mManagedPBackgroundIDBFactoryRequestChild.ToArray(aArr);
}

auto PBackgroundIDBFactoryChild::ManagedPBackgroundIDBFactoryRequestChild() const -> const ManagedContainer<PBackgroundIDBFactoryRequestChild>&
{
    return mManagedPBackgroundIDBFactoryRequestChild;
}

auto PBackgroundIDBFactoryChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundIDBDatabaseChild.Count();
    total += mManagedPBackgroundIDBFactoryRequestChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundIDBDatabaseChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundIDBFactoryRequestChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundIDBFactoryChild::OpenPBackgroundIDBDatabaseEndpoint(PBackgroundIDBDatabaseChild* aActor) -> ManagedEndpoint<PBackgroundIDBDatabaseParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseChild actor");
        return ManagedEndpoint<PBackgroundIDBDatabaseParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBDatabaseChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBDatabaseParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBFactoryChild::BindPBackgroundIDBDatabaseEndpoint(
        ManagedEndpoint<PBackgroundIDBDatabaseChild> aEndpoint,
        PBackgroundIDBDatabaseChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBDatabaseChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBFactoryChild::OpenPBackgroundIDBFactoryRequestEndpoint(PBackgroundIDBFactoryRequestChild* aActor) -> ManagedEndpoint<PBackgroundIDBFactoryRequestParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBFactoryRequestChild actor");
        return ManagedEndpoint<PBackgroundIDBFactoryRequestParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBFactoryRequestChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBFactoryRequestParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBFactoryChild::BindPBackgroundIDBFactoryRequestEndpoint(
        ManagedEndpoint<PBackgroundIDBFactoryRequestChild> aEndpoint,
        PBackgroundIDBFactoryRequestChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBFactoryRequestChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBFactoryRequestChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBFactoryChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBFactory::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBFactoryChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBFactoryChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBFactory::Msg_DeleteMe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBFactoryChild::SendPBackgroundIDBFactoryRequestConstructor(const FactoryRequestParams& params) -> PBackgroundIDBFactoryRequestChild*
{
    PBackgroundIDBFactoryRequestChild* actor = (static_cast<indexedDB::BackgroundFactoryChild*>(this))->AllocPBackgroundIDBFactoryRequestChild(params);
    return SendPBackgroundIDBFactoryRequestConstructor(actor, params);
}

auto PBackgroundIDBFactoryChild::SendPBackgroundIDBFactoryRequestConstructor(
        PBackgroundIDBFactoryRequestChild* actor,
        const FactoryRequestParams& params) -> PBackgroundIDBFactoryRequestChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundIDBFactoryRequestChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBFactoryRequestChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundIDBFactory::Msg_PBackgroundIDBFactoryRequestConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, params);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(146997893);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBFactoryChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBFactoryChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBFactory::Msg_PBackgroundIDBFactoryRequestConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundIDBFactoryRequestChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundIDBFactoryRequestMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBFactoryChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBDatabaseMsgStart:
{
            PBackgroundIDBDatabaseChild* actor = static_cast<PBackgroundIDBDatabaseChild*>(aListener);
            auto& container = mManagedPBackgroundIDBDatabaseChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundIDBFactoryRequestMsgStart:
{
            PBackgroundIDBFactoryRequestChild* actor = static_cast<PBackgroundIDBFactoryRequestChild*>(aListener);
            auto& container = mManagedPBackgroundIDBFactoryRequestChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundIDBFactoryChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBDatabaseMsgStart:
        static_cast<indexedDB::BackgroundFactoryChild*>(this)->DeallocPBackgroundIDBDatabaseChild(static_cast<PBackgroundIDBDatabaseChild*>(aListener));
        return;
    case PBackgroundIDBFactoryRequestMsgStart:
        static_cast<indexedDB::BackgroundFactoryChild*>(this)->DeallocPBackgroundIDBFactoryRequestChild(static_cast<PBackgroundIDBFactoryRequestChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundIDBFactoryChild::OnMessageReceived(const Message& msg__) -> PBackgroundIDBFactoryChild::Result
{
    switch (msg__.type()) {
    case PBackgroundIDBFactory::Reply_PBackgroundIDBFactoryRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBFactory::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBFactoryChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBFactoryChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBFactory::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBackgroundIDBFactoryChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBackgroundIDBFactory'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBackgroundIDBFactory'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundIDBFactory'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<indexedDB::BackgroundFactoryChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBackgroundIDBFactoryMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundIDBFactory::Msg_PBackgroundIDBDatabaseConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBFactoryChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBFactoryChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBFactory::Msg_PBackgroundIDBDatabaseConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            DatabaseSpec spec{};
            PBackgroundIDBFactoryRequestChild* request{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(spec)))))) {
                FatalError("Error deserializing 'DatabaseSpec'");
                return MsgValueError;
            }
            // Sentinel = 'spec'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72155564)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DatabaseSpec'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(request)))))) {
                FatalError("Error deserializing 'PBackgroundIDBFactoryRequest'");
                return MsgValueError;
            }
            if ((!((*((&(request))))))) {
                FatalError("Error deserializing 'PBackgroundIDBFactoryRequest'");
                return MsgValueError;
            }
            // Sentinel = 'request'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 202703626)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundIDBFactoryRequest'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PBackgroundIDBDatabaseChild* actor = (static_cast<indexedDB::BackgroundFactoryChild*>(this))->AllocPBackgroundIDBDatabaseChild(spec, request);
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundIDBDatabaseChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundIDBDatabaseChild.PutEntry(actor);

            if ((!((static_cast<indexedDB::BackgroundFactoryChild*>(this))->RecvPBackgroundIDBDatabaseConstructor(std::move(actor), std::move(spec), std::move(request))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundIDBFactoryChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBFactoryChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundIDBFactoryChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBFactoryChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundIDBFactoryChild::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundIDBDatabaseChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBDatabaseChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBDatabaseChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBDatabaseChild.Clear();

    for (auto it = mManagedPBackgroundIDBFactoryRequestChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBFactoryRequestChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBFactoryRequestChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBFactoryRequestChild.Clear();

}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::PBackgroundIDBFactoryChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::PBackgroundIDBFactoryChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundIDBFactory", PBackgroundIDBFactoryMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::indexedDB::PBackgroundIDBFactoryChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
