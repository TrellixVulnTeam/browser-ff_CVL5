//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PVideoBridgeParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/VideoBridgeParent.h"

#include "mozilla/layers/PTextureParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PVideoBridgeParent::RecvPTextureConstructor(
        PTextureParent* actor,
        const SurfaceDescriptor& aSharedData,
        const ReadLockDescriptor& aReadLock,
        const LayersBackend& aBackend,
        const TextureFlags& aTextureFlags,
        const uint64_t& aSerial) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PVideoBridgeParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PVideoBridgeParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PVideoBridgeParent::EnteredCxxStack() -> void
{
}

auto PVideoBridgeParent::ExitedCxxStack() -> void
{
}

auto PVideoBridgeParent::EnteredCall() -> void
{
}

auto PVideoBridgeParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PVideoBridgeParent::PVideoBridgeParent() :
    mozilla::ipc::IToplevelProtocol("PVideoBridgeParent", PVideoBridgeMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PVideoBridgeParent);
}

PVideoBridgeParent::~PVideoBridgeParent()
{
    MOZ_COUNT_DTOR(PVideoBridgeParent);
}

auto PVideoBridgeParent::ManagedPTextureParent(nsTArray<PTextureParent*>& aArr) const -> void
{
    mManagedPTextureParent.ToArray(aArr);
}

auto PVideoBridgeParent::ManagedPTextureParent() const -> const ManagedContainer<PTextureParent>&
{
    return mManagedPTextureParent;
}

auto PVideoBridgeParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPTextureParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPTextureParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PVideoBridgeParent::OpenPTextureEndpoint(PTextureParent* aActor) -> ManagedEndpoint<PTextureChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PTextureParent actor");
        return ManagedEndpoint<PTextureChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPTextureParent.PutEntry(aActor);

    return ManagedEndpoint<PTextureChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PVideoBridgeParent::BindPTextureEndpoint(
        ManagedEndpoint<PTextureParent> aEndpoint,
        PTextureParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PTextureParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPTextureParent.PutEntry(aActor);

    return true;
}

auto PVideoBridgeParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PTextureMsgStart:
{
            PTextureParent* actor = static_cast<PTextureParent*>(aListener);
            auto& container = mManagedPTextureParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PVideoBridgeParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PTextureMsgStart:
        static_cast<VideoBridgeParent*>(this)->DeallocPTextureParent(static_cast<PTextureParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PVideoBridgeParent::OnMessageReceived(const Message& msg__) -> PVideoBridgeParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PVideoBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVideoBridgeParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PVideoBridge::Msg_PTextureConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVideoBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVideoBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVideoBridge::Msg_PTextureConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            SurfaceDescriptor aSharedData{};
            ReadLockDescriptor aReadLock{};
            LayersBackend aBackend{};
            TextureFlags aTextureFlags{};
            uint64_t aSerial{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSharedData)))))) {
                FatalError("Error deserializing 'SurfaceDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'aSharedData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 420480051)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReadLock)))))) {
                FatalError("Error deserializing 'ReadLockDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'aReadLock'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 279774055)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ReadLockDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBackend)))))) {
                FatalError("Error deserializing 'LayersBackend'");
                return MsgValueError;
            }
            // Sentinel = 'aBackend'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 221119242)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersBackend'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTextureFlags)))))) {
                FatalError("Error deserializing 'TextureFlags'");
                return MsgValueError;
            }
            // Sentinel = 'aTextureFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 614139200)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextureFlags'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSerial)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSerial'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 181011138)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PTextureParent* actor = (static_cast<VideoBridgeParent*>(this))->AllocPTextureParent(aSharedData, aReadLock, aBackend, aTextureFlags, aSerial);
            if (!actor) {
                NS_WARNING("Cannot bind null PTextureParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPTextureParent.PutEntry(actor);

            if ((!((static_cast<VideoBridgeParent*>(this))->RecvPTextureConstructor(std::move(actor), std::move(aSharedData), std::move(aReadLock), std::move(aBackend), std::move(aTextureFlags), std::move(aSerial))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PVideoBridgeParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PVideoBridgeParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PVideoBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVideoBridgeParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PVideoBridgeParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PVideoBridgeParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVideoBridgeParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVideoBridgeParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVideoBridgeParent::ClearSubtree() -> void
{
    for (auto it = mManagedPTextureParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPTextureParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPTextureParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPTextureParent.Clear();

}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PVideoBridgeParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PVideoBridgeParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PVideoBridge", PVideoBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PVideoBridgeParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
