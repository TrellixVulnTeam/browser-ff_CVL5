//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPStorageChild.h"
#include "GMPStorageChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


MOZ_IMPLICIT PGMPStorageChild::PGMPStorageChild() :
    mozilla::ipc::IProtocol(PGMPStorageMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PGMPStorageChild);
}

PGMPStorageChild::~PGMPStorageChild()
{
    MOZ_COUNT_DTOR(PGMPStorageChild);
}

auto PGMPStorageChild::Manager() const -> PGMPChild*
{
    return static_cast<PGMPChild*>(IProtocol::Manager());
}

auto PGMPStorageChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PGMPStorageChild::SendOpen(const nsCString& aRecordName) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Open(Id());

    WriteIPDLParam(msg__, this, aRecordName);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(424805442);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg_Open", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPStorageChild::SendRead(const nsCString& aRecordName) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Read(Id());

    WriteIPDLParam(msg__, this, aRecordName);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(424805442);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg_Read", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPStorageChild::SendWrite(
        const nsCString& aRecordName,
        const nsTArray<uint8_t>& aBytes) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Write(Id());

    WriteIPDLParam(msg__, this, aRecordName);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(424805442);
    WriteIPDLParam(msg__, this, aBytes);
    // Sentinel = 'aBytes'
    (msg__)->WriteSentinel(135463529);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg_Write", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPStorageChild::SendClose(const nsCString& aRecordName) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Close(Id());

    WriteIPDLParam(msg__, this, aRecordName);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(424805442);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg_Close", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPStorageChild::Send__delete__(PGMPStorageChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PGMPStorage::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPStorageChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPStorage::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PGMPStorageMsgStart, actor);
    return sendok__;
}

auto PGMPStorageChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPStorageChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPStorageChild::OnMessageReceived(const Message& msg__) -> PGMPStorageChild::Result
{
    switch (msg__.type()) {
    case PGMPStorage::Msg_OpenComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg_OpenComplete", OTHER);

            PickleIterator iter__{msg__};
            nsCString aRecordName{};
            GMPErr aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRecordName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 424805442)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPStorageChild*>(this))->RecvOpenComplete(std::move(aRecordName), std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_ReadComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg_ReadComplete", OTHER);

            PickleIterator iter__{msg__};
            nsCString aRecordName{};
            GMPErr aStatus{};
            nsTArray<uint8_t> aBytes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRecordName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 424805442)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBytes)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aBytes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135463529)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPStorageChild*>(this))->RecvReadComplete(std::move(aRecordName), std::move(aStatus), std::move(aBytes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_WriteComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg_WriteComplete", OTHER);

            PickleIterator iter__{msg__};
            nsCString aRecordName{};
            GMPErr aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRecordName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 424805442)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPStorageChild*>(this))->RecvWriteComplete(std::move(aRecordName), std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPStorage::Msg_Shutdown", OTHER);

            if ((!((static_cast<GMPStorageChild*>(this))->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPStorageChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPStorageChild::Result
{
    return MsgNotKnown;
}

auto PGMPStorageChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPStorageChild::Result
{
    return MsgNotKnown;
}

auto PGMPStorageChild::ClearSubtree() -> void
{
}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPStorageChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPStorageChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMPStorage", PGMPStorageMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPStorageChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
