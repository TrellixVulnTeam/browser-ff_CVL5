//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBVersionChangeTransactionChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/indexedDB/ActorsChild.h"

#include "mozilla/dom/indexedDB/PBackgroundIDBCursorChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBRequestChild.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace indexedDB {


auto PBackgroundIDBVersionChangeTransactionChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundIDBVersionChangeTransactionChild::PBackgroundIDBVersionChangeTransactionChild() :
    mozilla::ipc::IProtocol(PBackgroundIDBVersionChangeTransactionMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBackgroundIDBVersionChangeTransactionChild);
}

PBackgroundIDBVersionChangeTransactionChild::~PBackgroundIDBVersionChangeTransactionChild()
{
    MOZ_COUNT_DTOR(PBackgroundIDBVersionChangeTransactionChild);
}

auto PBackgroundIDBVersionChangeTransactionChild::Manager() const -> PBackgroundIDBDatabaseChild*
{
    return static_cast<PBackgroundIDBDatabaseChild*>(IProtocol::Manager());
}

auto PBackgroundIDBVersionChangeTransactionChild::ManagedPBackgroundIDBCursorChild(nsTArray<PBackgroundIDBCursorChild*>& aArr) const -> void
{
    mManagedPBackgroundIDBCursorChild.ToArray(aArr);
}

auto PBackgroundIDBVersionChangeTransactionChild::ManagedPBackgroundIDBCursorChild() const -> const ManagedContainer<PBackgroundIDBCursorChild>&
{
    return mManagedPBackgroundIDBCursorChild;
}

auto PBackgroundIDBVersionChangeTransactionChild::ManagedPBackgroundIDBRequestChild(nsTArray<PBackgroundIDBRequestChild*>& aArr) const -> void
{
    mManagedPBackgroundIDBRequestChild.ToArray(aArr);
}

auto PBackgroundIDBVersionChangeTransactionChild::ManagedPBackgroundIDBRequestChild() const -> const ManagedContainer<PBackgroundIDBRequestChild>&
{
    return mManagedPBackgroundIDBRequestChild;
}

auto PBackgroundIDBVersionChangeTransactionChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundIDBCursorChild.Count();
    total += mManagedPBackgroundIDBRequestChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundIDBCursorChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundIDBRequestChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundIDBVersionChangeTransactionChild::OpenPBackgroundIDBCursorEndpoint(PBackgroundIDBCursorChild* aActor) -> ManagedEndpoint<PBackgroundIDBCursorParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBCursorChild actor");
        return ManagedEndpoint<PBackgroundIDBCursorParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBCursorChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBCursorParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBVersionChangeTransactionChild::BindPBackgroundIDBCursorEndpoint(
        ManagedEndpoint<PBackgroundIDBCursorChild> aEndpoint,
        PBackgroundIDBCursorChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBCursorChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBCursorChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBVersionChangeTransactionChild::OpenPBackgroundIDBRequestEndpoint(PBackgroundIDBRequestChild* aActor) -> ManagedEndpoint<PBackgroundIDBRequestParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBRequestChild actor");
        return ManagedEndpoint<PBackgroundIDBRequestParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBRequestChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBRequestParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBVersionChangeTransactionChild::BindPBackgroundIDBRequestEndpoint(
        ManagedEndpoint<PBackgroundIDBRequestChild> aEndpoint,
        PBackgroundIDBRequestChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBRequestChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBRequestChild.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_DeleteMe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendCommit(const mozilla::Maybe<int64_t>& lastRequest) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_Commit(Id());

    WriteIPDLParam(msg__, this, lastRequest);
    // Sentinel = 'lastRequest'
    (msg__)->WriteSentinel(458359966);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_Commit", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendAbort(const nsresult& resultCode) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_Abort(Id());

    WriteIPDLParam(msg__, this, resultCode);
    // Sentinel = 'resultCode'
    (msg__)->WriteSentinel(388498459);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_Abort", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendCreateObjectStore(const ObjectStoreMetadata& metadata) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_CreateObjectStore(Id());

    WriteIPDLParam(msg__, this, metadata);
    // Sentinel = 'metadata'
    (msg__)->WriteSentinel(248251202);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_CreateObjectStore", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendDeleteObjectStore(const int64_t& objectStoreId) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_DeleteObjectStore(Id());

    WriteIPDLParam(msg__, this, objectStoreId);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(620234034);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_DeleteObjectStore", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendRenameObjectStore(
        const int64_t& objectStoreId,
        const nsString& name) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_RenameObjectStore(Id());

    WriteIPDLParam(msg__, this, objectStoreId);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(620234034);
    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_RenameObjectStore", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendCreateIndex(
        const int64_t& objectStoreId,
        const IndexMetadata& metadata) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_CreateIndex(Id());

    WriteIPDLParam(msg__, this, objectStoreId);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(620234034);
    WriteIPDLParam(msg__, this, metadata);
    // Sentinel = 'metadata'
    (msg__)->WriteSentinel(248251202);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_CreateIndex", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendDeleteIndex(
        const int64_t& objectStoreId,
        const int64_t& indexId) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_DeleteIndex(Id());

    WriteIPDLParam(msg__, this, objectStoreId);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(620234034);
    WriteIPDLParam(msg__, this, indexId);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(190841542);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_DeleteIndex", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendRenameIndex(
        const int64_t& objectStoreId,
        const int64_t& indexId,
        const nsString& name) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_RenameIndex(Id());

    WriteIPDLParam(msg__, this, objectStoreId);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(620234034);
    WriteIPDLParam(msg__, this, indexId);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(190841542);
    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_RenameIndex", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendPBackgroundIDBCursorConstructor(
        PBackgroundIDBCursorChild* actor,
        const OpenCursorParams& params) -> PBackgroundIDBCursorChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundIDBCursorChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBCursorChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_PBackgroundIDBCursorConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, params);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(146997893);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_PBackgroundIDBCursorConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundIDBCursorChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundIDBCursorMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBVersionChangeTransactionChild::SendPBackgroundIDBRequestConstructor(const RequestParams& params) -> PBackgroundIDBRequestChild*
{
    PBackgroundIDBRequestChild* actor = (static_cast<indexedDB::BackgroundVersionChangeTransactionChild*>(this))->AllocPBackgroundIDBRequestChild(params);
    return SendPBackgroundIDBRequestConstructor(actor, params);
}

auto PBackgroundIDBVersionChangeTransactionChild::SendPBackgroundIDBRequestConstructor(
        PBackgroundIDBRequestChild* actor,
        const RequestParams& params) -> PBackgroundIDBRequestChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundIDBRequestChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBRequestChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundIDBVersionChangeTransaction::Msg_PBackgroundIDBRequestConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, params);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(146997893);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBVersionChangeTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_PBackgroundIDBRequestConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundIDBRequestChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundIDBRequestMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBVersionChangeTransactionChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBCursorMsgStart:
{
            PBackgroundIDBCursorChild* actor = static_cast<PBackgroundIDBCursorChild*>(aListener);
            auto& container = mManagedPBackgroundIDBCursorChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundIDBRequestMsgStart:
{
            PBackgroundIDBRequestChild* actor = static_cast<PBackgroundIDBRequestChild*>(aListener);
            auto& container = mManagedPBackgroundIDBRequestChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundIDBVersionChangeTransactionChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBRequestMsgStart:
        static_cast<indexedDB::BackgroundVersionChangeTransactionChild*>(this)->DeallocPBackgroundIDBRequestChild(static_cast<PBackgroundIDBRequestChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundIDBVersionChangeTransactionChild::OnMessageReceived(const Message& msg__) -> PBackgroundIDBVersionChangeTransactionChild::Result
{
    switch (msg__.type()) {
    case PBackgroundIDBVersionChangeTransaction::Reply_PBackgroundIDBCursorConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBVersionChangeTransaction::Reply_PBackgroundIDBRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBVersionChangeTransaction::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBVersionChangeTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBackgroundIDBVersionChangeTransactionChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBackgroundIDBVersionChangeTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBackgroundIDBVersionChangeTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundIDBVersionChangeTransaction'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<indexedDB::BackgroundVersionChangeTransactionChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBackgroundIDBVersionChangeTransactionMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundIDBVersionChangeTransaction::Msg_Complete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBVersionChangeTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBVersionChangeTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBVersionChangeTransaction::Msg_Complete", OTHER);

            PickleIterator iter__{msg__};
            nsresult result{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(result)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'result'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223840)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<indexedDB::BackgroundVersionChangeTransactionChild*>(this))->RecvComplete(std::move(result))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundIDBVersionChangeTransactionChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBVersionChangeTransactionChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundIDBVersionChangeTransactionChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBVersionChangeTransactionChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundIDBVersionChangeTransactionChild::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundIDBCursorChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBCursorChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBCursorChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBCursorChild.Clear();

    for (auto it = mManagedPBackgroundIDBRequestChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBRequestChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBRequestChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBRequestChild.Clear();

}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::PBackgroundIDBVersionChangeTransactionChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::PBackgroundIDBVersionChangeTransactionChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundIDBVersionChangeTransaction", PBackgroundIDBVersionChangeTransactionMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::indexedDB::PBackgroundIDBVersionChangeTransactionChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
