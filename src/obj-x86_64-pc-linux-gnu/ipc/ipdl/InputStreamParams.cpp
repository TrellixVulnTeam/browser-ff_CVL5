//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/ipc/InputStreamParams.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HeaderEntry|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::HeaderEntry>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
}

auto IPDLParamTraits<mozilla::ipc::HeaderEntry>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'HeaderEntry'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'HeaderEntry'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (nsCString) member of 'HeaderEntry'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (nsCString) member of 'HeaderEntry'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StringInputStreamParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::StringInputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::ipc::StringInputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsCString) member of 'StringInputStreamParams'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsCString) member of 'StringInputStreamParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileInputStreamParams|
//
namespace mozilla {
namespace ipc {
auto FileInputStreamParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(FileInputStreamParams, ioFlags_) - offsetof(FileInputStreamParams, fileDescriptorIndex_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::FileInputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).fileDescriptorIndex())), 12);
    // Sentinel = 'fileDescriptorIndex | behaviorFlags | ioFlags'
    (aMsg)->WriteSentinel(2447970610);
}

auto IPDLParamTraits<mozilla::ipc::FileInputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->fileDescriptorIndex())), 12)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'fileDescriptorIndex | behaviorFlags | ioFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 2447970610)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MultiplexInputStreamParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::MultiplexInputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).streams());
    // Sentinel = 'streams'
    (aMsg)->WriteSentinel(203555584);
    WriteIPDLParam(aMsg, aActor, (aVar).status());
    // Sentinel = 'status'
    (aMsg)->WriteSentinel(154731173);
    WriteIPDLParam(aMsg, aActor, (aVar).startedReadingCurrent());
    // Sentinel = 'startedReadingCurrent'
    (aMsg)->WriteSentinel(1583614101);
    (aMsg)->WriteBytes((&((aVar).currentStream())), 4);
    // Sentinel = 'currentStream'
    (aMsg)->WriteSentinel(644810096);
}

auto IPDLParamTraits<mozilla::ipc::MultiplexInputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->streams())))))) {
        aActor->FatalError("Error deserializing 'streams' (InputStreamParams[]) member of 'MultiplexInputStreamParams'");
        return false;
    }
    // Sentinel = 'streams'
    if ((!((aMsg)->ReadSentinel(aIter, 203555584)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'streams' (InputStreamParams[]) member of 'MultiplexInputStreamParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->status())))))) {
        aActor->FatalError("Error deserializing 'status' (nsresult) member of 'MultiplexInputStreamParams'");
        return false;
    }
    // Sentinel = 'status'
    if ((!((aMsg)->ReadSentinel(aIter, 154731173)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'status' (nsresult) member of 'MultiplexInputStreamParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->startedReadingCurrent())))))) {
        aActor->FatalError("Error deserializing 'startedReadingCurrent' (bool) member of 'MultiplexInputStreamParams'");
        return false;
    }
    // Sentinel = 'startedReadingCurrent'
    if ((!((aMsg)->ReadSentinel(aIter, 1583614101)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'startedReadingCurrent' (bool) member of 'MultiplexInputStreamParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->currentStream())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'currentStream'
    if ((!((aMsg)->ReadSentinel(aIter, 644810096)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SlicedInputStreamParams|
//
namespace mozilla {
namespace ipc {
auto SlicedInputStreamParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(SlicedInputStreamParams, curPos_) - offsetof(SlicedInputStreamParams, start_)) == 16,
        "Bad assumptions about field layout!");
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::SlicedInputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).stream());
    // Sentinel = 'stream'
    (aMsg)->WriteSentinel(153223821);
    WriteIPDLParam(aMsg, aActor, (aVar).closed());
    // Sentinel = 'closed'
    (aMsg)->WriteSentinel(146211451);
    (aMsg)->WriteBytes((&((aVar).start())), 24);
    // Sentinel = 'start | length | curPos'
    (aMsg)->WriteSentinel(1747781797);
}

auto IPDLParamTraits<mozilla::ipc::SlicedInputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stream())))))) {
        aActor->FatalError("Error deserializing 'stream' (InputStreamParams) member of 'SlicedInputStreamParams'");
        return false;
    }
    // Sentinel = 'stream'
    if ((!((aMsg)->ReadSentinel(aIter, 153223821)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stream' (InputStreamParams) member of 'SlicedInputStreamParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->closed())))))) {
        aActor->FatalError("Error deserializing 'closed' (bool) member of 'SlicedInputStreamParams'");
        return false;
    }
    // Sentinel = 'closed'
    if ((!((aMsg)->ReadSentinel(aIter, 146211451)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'closed' (bool) member of 'SlicedInputStreamParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->start())), 24)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'start | length | curPos'
    if ((!((aMsg)->ReadSentinel(aIter, 1747781797)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteLazyInputStreamRef|
//
namespace mozilla {
namespace ipc {
auto RemoteLazyInputStreamRef::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(RemoteLazyInputStreamRef, length_) - offsetof(RemoteLazyInputStreamRef, start_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::RemoteLazyInputStreamRef>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    (aMsg)->WriteBytes((&((aVar).start())), 16);
    // Sentinel = 'start | length'
    (aMsg)->WriteSentinel(684983661);
}

auto IPDLParamTraits<mozilla::ipc::RemoteLazyInputStreamRef>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsID) member of 'RemoteLazyInputStreamRef'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsID) member of 'RemoteLazyInputStreamRef'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->start())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'start | length'
    if ((!((aMsg)->ReadSentinel(aIter, 684983661)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union RemoteLazyInputStreamParams|
//
namespace mozilla {
namespace ipc {
auto RemoteLazyInputStreamParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TRemoteLazyInputStreamRef:
        {
            (ptr_RemoteLazyInputStreamRef())->~RemoteLazyInputStreamRef__tdef();
            break;
        }
    case TPRemoteLazyInputStreamParent:
        {
            (ptr_PRemoteLazyInputStreamParent())->~PRemoteLazyInputStreamParent__tdef();
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            (ptr_PRemoteLazyInputStreamChild())->~PRemoteLazyInputStreamChild__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT RemoteLazyInputStreamParams::RemoteLazyInputStreamParams(const RemoteLazyInputStreamRef& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamRef()) RemoteLazyInputStreamRef(aOther);
    mType = TRemoteLazyInputStreamRef;
}

MOZ_IMPLICIT RemoteLazyInputStreamParams::RemoteLazyInputStreamParams(RemoteLazyInputStreamRef&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamRef()) RemoteLazyInputStreamRef(std::move(aOther));
    mType = TRemoteLazyInputStreamRef;
}

MOZ_IMPLICIT RemoteLazyInputStreamParams::RemoteLazyInputStreamParams(PRemoteLazyInputStreamParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*(const_cast<PRemoteLazyInputStreamParent*>(aOther));
    mType = TPRemoteLazyInputStreamParent;
}

MOZ_IMPLICIT RemoteLazyInputStreamParams::RemoteLazyInputStreamParams(PRemoteLazyInputStreamChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*(const_cast<PRemoteLazyInputStreamChild*>(aOther));
    mType = TPRemoteLazyInputStreamChild;
}

MOZ_IMPLICIT RemoteLazyInputStreamParams::RemoteLazyInputStreamParams(const RemoteLazyInputStreamParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TRemoteLazyInputStreamRef:
        {
            new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamRef()) RemoteLazyInputStreamRef((aOther).get_RemoteLazyInputStreamRef());
            break;
        }
    case TPRemoteLazyInputStreamParent:
        {
            new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*(const_cast<PRemoteLazyInputStreamParent*>((aOther).get_PRemoteLazyInputStreamParent()));
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*(const_cast<PRemoteLazyInputStreamChild*>((aOther).get_PRemoteLazyInputStreamChild()));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT RemoteLazyInputStreamParams::RemoteLazyInputStreamParams(RemoteLazyInputStreamParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TRemoteLazyInputStreamRef:
        {
            new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamRef()) RemoteLazyInputStreamRef(std::move((aOther).get_RemoteLazyInputStreamRef()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPRemoteLazyInputStreamParent:
        {
            new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*(const_cast<PRemoteLazyInputStreamParent*>(std::move((aOther).get_PRemoteLazyInputStreamParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*(const_cast<PRemoteLazyInputStreamChild*>(std::move((aOther).get_PRemoteLazyInputStreamChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

RemoteLazyInputStreamParams::~RemoteLazyInputStreamParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto RemoteLazyInputStreamParams::operator=(const RemoteLazyInputStreamRef& aRhs) -> RemoteLazyInputStreamParams&
{
    if (MaybeDestroy(TRemoteLazyInputStreamRef)) {
        new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamRef()) RemoteLazyInputStreamRef;
    }
    (*(ptr_RemoteLazyInputStreamRef())) = aRhs;
    mType = TRemoteLazyInputStreamRef;
    return (*(this));
}

auto RemoteLazyInputStreamParams::operator=(RemoteLazyInputStreamRef&& aRhs) -> RemoteLazyInputStreamParams&
{
    if (MaybeDestroy(TRemoteLazyInputStreamRef)) {
        new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamRef()) RemoteLazyInputStreamRef;
    }
    (*(ptr_RemoteLazyInputStreamRef())) = std::move(aRhs);
    mType = TRemoteLazyInputStreamRef;
    return (*(this));
}

auto RemoteLazyInputStreamParams::operator=(PRemoteLazyInputStreamParent* aRhs) -> RemoteLazyInputStreamParams&
{
    if (MaybeDestroy(TPRemoteLazyInputStreamParent)) {
        new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*;
    }
    (*(ptr_PRemoteLazyInputStreamParent())) = const_cast<PRemoteLazyInputStreamParent*>(aRhs);
    mType = TPRemoteLazyInputStreamParent;
    return (*(this));
}

auto RemoteLazyInputStreamParams::operator=(PRemoteLazyInputStreamChild* aRhs) -> RemoteLazyInputStreamParams&
{
    if (MaybeDestroy(TPRemoteLazyInputStreamChild)) {
        new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*;
    }
    (*(ptr_PRemoteLazyInputStreamChild())) = const_cast<PRemoteLazyInputStreamChild*>(aRhs);
    mType = TPRemoteLazyInputStreamChild;
    return (*(this));
}

auto RemoteLazyInputStreamParams::operator=(const RemoteLazyInputStreamParams& aRhs) -> RemoteLazyInputStreamParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TRemoteLazyInputStreamRef:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamRef()) RemoteLazyInputStreamRef;
            }
            (*(ptr_RemoteLazyInputStreamRef())) = (aRhs).get_RemoteLazyInputStreamRef();
            break;
        }
    case TPRemoteLazyInputStreamParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*;
            }
            (*(ptr_PRemoteLazyInputStreamParent())) = const_cast<PRemoteLazyInputStreamParent*>((aRhs).get_PRemoteLazyInputStreamParent());
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*;
            }
            (*(ptr_PRemoteLazyInputStreamChild())) = const_cast<PRemoteLazyInputStreamChild*>((aRhs).get_PRemoteLazyInputStreamChild());
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto RemoteLazyInputStreamParams::operator=(RemoteLazyInputStreamParams&& aRhs) -> RemoteLazyInputStreamParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TRemoteLazyInputStreamRef:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamRef()) RemoteLazyInputStreamRef;
            }
            (*(ptr_RemoteLazyInputStreamRef())) = std::move((aRhs).get_RemoteLazyInputStreamRef());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPRemoteLazyInputStreamParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamParent()) PRemoteLazyInputStreamParent*;
            }
            (*(ptr_PRemoteLazyInputStreamParent())) = const_cast<PRemoteLazyInputStreamParent*>(std::move((aRhs).get_PRemoteLazyInputStreamParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPRemoteLazyInputStreamChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PRemoteLazyInputStreamChild()) PRemoteLazyInputStreamChild*;
            }
            (*(ptr_PRemoteLazyInputStreamChild())) = const_cast<PRemoteLazyInputStreamChild*>(std::move((aRhs).get_PRemoteLazyInputStreamChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::RemoteLazyInputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::ipc::RemoteLazyInputStreamParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'RemoteLazyInputStreamParams'
    (aMsg)->WriteSentinel(2550008557);

    switch (type) {
    case union__::TRemoteLazyInputStreamRef:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteLazyInputStreamRef());
            // Sentinel = 'TRemoteLazyInputStreamRef'
            (aMsg)->WriteSentinel(2160134650);
            return;
        }
    case union__::TPRemoteLazyInputStreamParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PRemoteLazyInputStreamParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PRemoteLazyInputStreamParent());
                // Sentinel = 'TPRemoteLazyInputStreamParent'
                (aMsg)->WriteSentinel(2857569175);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPRemoteLazyInputStreamChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PRemoteLazyInputStreamChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PRemoteLazyInputStreamChild());
                // Sentinel = 'TPRemoteLazyInputStreamChild'
                (aMsg)->WriteSentinel(2659191569);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::ipc::RemoteLazyInputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::ipc::RemoteLazyInputStreamParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union RemoteLazyInputStreamParams");
        return false;
    }
    // Sentinel = 'RemoteLazyInputStreamParams'
    if ((!((aMsg)->ReadSentinel(aIter, 2550008557)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union RemoteLazyInputStreamParams");
        return false;
    }

    switch (type) {
    case union__::TRemoteLazyInputStreamRef:
        {
            mozilla::ipc::RemoteLazyInputStreamRef tmp = mozilla::ipc::RemoteLazyInputStreamRef();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteLazyInputStreamRef())))))) {
                aActor->FatalError("Error deserializing variant TRemoteLazyInputStreamRef of union RemoteLazyInputStreamParams");
                return false;
            }
            // Sentinel = 'TRemoteLazyInputStreamRef'
            if ((!((aMsg)->ReadSentinel(aIter, 2160134650)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteLazyInputStreamRef of union RemoteLazyInputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TPRemoteLazyInputStreamParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::PRemoteLazyInputStreamChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PRemoteLazyInputStreamChild())))))) {
                aActor->FatalError("Error deserializing variant TPRemoteLazyInputStreamParent of union RemoteLazyInputStreamParams");
                return false;
            }
            if ((!((*((&((aVar)->get_PRemoteLazyInputStreamChild()))))))) {
                aActor->FatalError("Error deserializing variant TPRemoteLazyInputStreamParent of union RemoteLazyInputStreamParams");
                return false;
            }
            // Sentinel = 'TPRemoteLazyInputStreamParent'
            if ((!((aMsg)->ReadSentinel(aIter, 2857569175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPRemoteLazyInputStreamParent of union RemoteLazyInputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TPRemoteLazyInputStreamChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::PRemoteLazyInputStreamParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PRemoteLazyInputStreamParent())))))) {
                aActor->FatalError("Error deserializing variant TPRemoteLazyInputStreamChild of union RemoteLazyInputStreamParams");
                return false;
            }
            if ((!((*((&((aVar)->get_PRemoteLazyInputStreamParent()))))))) {
                aActor->FatalError("Error deserializing variant TPRemoteLazyInputStreamChild of union RemoteLazyInputStreamParams");
                return false;
            }
            // Sentinel = 'TPRemoteLazyInputStreamChild'
            if ((!((aMsg)->ReadSentinel(aIter, 2659191569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPRemoteLazyInputStreamChild of union RemoteLazyInputStreamParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCRemoteStreamType|
//
namespace mozilla {
namespace ipc {
auto IPCRemoteStreamType::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TPChildToParentStreamParent:
        {
            (ptr_PChildToParentStreamParent())->~PChildToParentStreamParent__tdef();
            break;
        }
    case TPChildToParentStreamChild:
        {
            (ptr_PChildToParentStreamChild())->~PChildToParentStreamChild__tdef();
            break;
        }
    case TPParentToChildStreamParent:
        {
            (ptr_PParentToChildStreamParent())->~PParentToChildStreamParent__tdef();
            break;
        }
    case TPParentToChildStreamChild:
        {
            (ptr_PParentToChildStreamChild())->~PParentToChildStreamChild__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCRemoteStreamType::IPCRemoteStreamType(PChildToParentStreamParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PChildToParentStreamParent()) PChildToParentStreamParent*(const_cast<PChildToParentStreamParent*>(aOther));
    mType = TPChildToParentStreamParent;
}

MOZ_IMPLICIT IPCRemoteStreamType::IPCRemoteStreamType(PChildToParentStreamChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PChildToParentStreamChild()) PChildToParentStreamChild*(const_cast<PChildToParentStreamChild*>(aOther));
    mType = TPChildToParentStreamChild;
}

MOZ_IMPLICIT IPCRemoteStreamType::IPCRemoteStreamType(PParentToChildStreamParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PParentToChildStreamParent()) PParentToChildStreamParent*(const_cast<PParentToChildStreamParent*>(aOther));
    mType = TPParentToChildStreamParent;
}

MOZ_IMPLICIT IPCRemoteStreamType::IPCRemoteStreamType(PParentToChildStreamChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PParentToChildStreamChild()) PParentToChildStreamChild*(const_cast<PParentToChildStreamChild*>(aOther));
    mType = TPParentToChildStreamChild;
}

MOZ_IMPLICIT IPCRemoteStreamType::IPCRemoteStreamType(const IPCRemoteStreamType& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TPChildToParentStreamParent:
        {
            new (mozilla::KnownNotNull, ptr_PChildToParentStreamParent()) PChildToParentStreamParent*(const_cast<PChildToParentStreamParent*>((aOther).get_PChildToParentStreamParent()));
            break;
        }
    case TPChildToParentStreamChild:
        {
            new (mozilla::KnownNotNull, ptr_PChildToParentStreamChild()) PChildToParentStreamChild*(const_cast<PChildToParentStreamChild*>((aOther).get_PChildToParentStreamChild()));
            break;
        }
    case TPParentToChildStreamParent:
        {
            new (mozilla::KnownNotNull, ptr_PParentToChildStreamParent()) PParentToChildStreamParent*(const_cast<PParentToChildStreamParent*>((aOther).get_PParentToChildStreamParent()));
            break;
        }
    case TPParentToChildStreamChild:
        {
            new (mozilla::KnownNotNull, ptr_PParentToChildStreamChild()) PParentToChildStreamChild*(const_cast<PParentToChildStreamChild*>((aOther).get_PParentToChildStreamChild()));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCRemoteStreamType::IPCRemoteStreamType(IPCRemoteStreamType&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TPChildToParentStreamParent:
        {
            new (mozilla::KnownNotNull, ptr_PChildToParentStreamParent()) PChildToParentStreamParent*(const_cast<PChildToParentStreamParent*>(std::move((aOther).get_PChildToParentStreamParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPChildToParentStreamChild:
        {
            new (mozilla::KnownNotNull, ptr_PChildToParentStreamChild()) PChildToParentStreamChild*(const_cast<PChildToParentStreamChild*>(std::move((aOther).get_PChildToParentStreamChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPParentToChildStreamParent:
        {
            new (mozilla::KnownNotNull, ptr_PParentToChildStreamParent()) PParentToChildStreamParent*(const_cast<PParentToChildStreamParent*>(std::move((aOther).get_PParentToChildStreamParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPParentToChildStreamChild:
        {
            new (mozilla::KnownNotNull, ptr_PParentToChildStreamChild()) PParentToChildStreamChild*(const_cast<PParentToChildStreamChild*>(std::move((aOther).get_PParentToChildStreamChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCRemoteStreamType::~IPCRemoteStreamType()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCRemoteStreamType::operator=(PChildToParentStreamParent* aRhs) -> IPCRemoteStreamType&
{
    if (MaybeDestroy(TPChildToParentStreamParent)) {
        new (mozilla::KnownNotNull, ptr_PChildToParentStreamParent()) PChildToParentStreamParent*;
    }
    (*(ptr_PChildToParentStreamParent())) = const_cast<PChildToParentStreamParent*>(aRhs);
    mType = TPChildToParentStreamParent;
    return (*(this));
}

auto IPCRemoteStreamType::operator=(PChildToParentStreamChild* aRhs) -> IPCRemoteStreamType&
{
    if (MaybeDestroy(TPChildToParentStreamChild)) {
        new (mozilla::KnownNotNull, ptr_PChildToParentStreamChild()) PChildToParentStreamChild*;
    }
    (*(ptr_PChildToParentStreamChild())) = const_cast<PChildToParentStreamChild*>(aRhs);
    mType = TPChildToParentStreamChild;
    return (*(this));
}

auto IPCRemoteStreamType::operator=(PParentToChildStreamParent* aRhs) -> IPCRemoteStreamType&
{
    if (MaybeDestroy(TPParentToChildStreamParent)) {
        new (mozilla::KnownNotNull, ptr_PParentToChildStreamParent()) PParentToChildStreamParent*;
    }
    (*(ptr_PParentToChildStreamParent())) = const_cast<PParentToChildStreamParent*>(aRhs);
    mType = TPParentToChildStreamParent;
    return (*(this));
}

auto IPCRemoteStreamType::operator=(PParentToChildStreamChild* aRhs) -> IPCRemoteStreamType&
{
    if (MaybeDestroy(TPParentToChildStreamChild)) {
        new (mozilla::KnownNotNull, ptr_PParentToChildStreamChild()) PParentToChildStreamChild*;
    }
    (*(ptr_PParentToChildStreamChild())) = const_cast<PParentToChildStreamChild*>(aRhs);
    mType = TPParentToChildStreamChild;
    return (*(this));
}

auto IPCRemoteStreamType::operator=(const IPCRemoteStreamType& aRhs) -> IPCRemoteStreamType&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPChildToParentStreamParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PChildToParentStreamParent()) PChildToParentStreamParent*;
            }
            (*(ptr_PChildToParentStreamParent())) = const_cast<PChildToParentStreamParent*>((aRhs).get_PChildToParentStreamParent());
            break;
        }
    case TPChildToParentStreamChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PChildToParentStreamChild()) PChildToParentStreamChild*;
            }
            (*(ptr_PChildToParentStreamChild())) = const_cast<PChildToParentStreamChild*>((aRhs).get_PChildToParentStreamChild());
            break;
        }
    case TPParentToChildStreamParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PParentToChildStreamParent()) PParentToChildStreamParent*;
            }
            (*(ptr_PParentToChildStreamParent())) = const_cast<PParentToChildStreamParent*>((aRhs).get_PParentToChildStreamParent());
            break;
        }
    case TPParentToChildStreamChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PParentToChildStreamChild()) PParentToChildStreamChild*;
            }
            (*(ptr_PParentToChildStreamChild())) = const_cast<PParentToChildStreamChild*>((aRhs).get_PParentToChildStreamChild());
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCRemoteStreamType::operator=(IPCRemoteStreamType&& aRhs) -> IPCRemoteStreamType&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPChildToParentStreamParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PChildToParentStreamParent()) PChildToParentStreamParent*;
            }
            (*(ptr_PChildToParentStreamParent())) = const_cast<PChildToParentStreamParent*>(std::move((aRhs).get_PChildToParentStreamParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPChildToParentStreamChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PChildToParentStreamChild()) PChildToParentStreamChild*;
            }
            (*(ptr_PChildToParentStreamChild())) = const_cast<PChildToParentStreamChild*>(std::move((aRhs).get_PChildToParentStreamChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPParentToChildStreamParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PParentToChildStreamParent()) PParentToChildStreamParent*;
            }
            (*(ptr_PParentToChildStreamParent())) = const_cast<PParentToChildStreamParent*>(std::move((aRhs).get_PParentToChildStreamParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPParentToChildStreamChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PParentToChildStreamChild()) PParentToChildStreamChild*;
            }
            (*(ptr_PParentToChildStreamChild())) = const_cast<PParentToChildStreamChild*>(std::move((aRhs).get_PParentToChildStreamChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::IPCRemoteStreamType>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::ipc::IPCRemoteStreamType union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCRemoteStreamType'
    (aMsg)->WriteSentinel(1174931287);

    switch (type) {
    case union__::TPChildToParentStreamParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PChildToParentStreamParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PChildToParentStreamParent());
                // Sentinel = 'TPChildToParentStreamParent'
                (aMsg)->WriteSentinel(2400062092);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPChildToParentStreamChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PChildToParentStreamChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PChildToParentStreamChild());
                // Sentinel = 'TPChildToParentStreamChild'
                (aMsg)->WriteSentinel(2219182598);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPParentToChildStreamParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PParentToChildStreamParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PParentToChildStreamParent());
                // Sentinel = 'TPParentToChildStreamParent'
                (aMsg)->WriteSentinel(2417035916);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPParentToChildStreamChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PParentToChildStreamChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PParentToChildStreamChild());
                // Sentinel = 'TPParentToChildStreamChild'
                (aMsg)->WriteSentinel(2236156422);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::ipc::IPCRemoteStreamType>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::ipc::IPCRemoteStreamType union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCRemoteStreamType");
        return false;
    }
    // Sentinel = 'IPCRemoteStreamType'
    if ((!((aMsg)->ReadSentinel(aIter, 1174931287)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCRemoteStreamType");
        return false;
    }

    switch (type) {
    case union__::TPChildToParentStreamParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::ipc::PChildToParentStreamChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PChildToParentStreamChild())))))) {
                aActor->FatalError("Error deserializing variant TPChildToParentStreamParent of union IPCRemoteStreamType");
                return false;
            }
            if ((!((*((&((aVar)->get_PChildToParentStreamChild()))))))) {
                aActor->FatalError("Error deserializing variant TPChildToParentStreamParent of union IPCRemoteStreamType");
                return false;
            }
            // Sentinel = 'TPChildToParentStreamParent'
            if ((!((aMsg)->ReadSentinel(aIter, 2400062092)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPChildToParentStreamParent of union IPCRemoteStreamType");
                return false;
            }
            return true;
        }
    case union__::TPChildToParentStreamChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::ipc::PChildToParentStreamParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PChildToParentStreamParent())))))) {
                aActor->FatalError("Error deserializing variant TPChildToParentStreamChild of union IPCRemoteStreamType");
                return false;
            }
            if ((!((*((&((aVar)->get_PChildToParentStreamParent()))))))) {
                aActor->FatalError("Error deserializing variant TPChildToParentStreamChild of union IPCRemoteStreamType");
                return false;
            }
            // Sentinel = 'TPChildToParentStreamChild'
            if ((!((aMsg)->ReadSentinel(aIter, 2219182598)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPChildToParentStreamChild of union IPCRemoteStreamType");
                return false;
            }
            return true;
        }
    case union__::TPParentToChildStreamParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::ipc::PParentToChildStreamChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PParentToChildStreamChild())))))) {
                aActor->FatalError("Error deserializing variant TPParentToChildStreamParent of union IPCRemoteStreamType");
                return false;
            }
            if ((!((*((&((aVar)->get_PParentToChildStreamChild()))))))) {
                aActor->FatalError("Error deserializing variant TPParentToChildStreamParent of union IPCRemoteStreamType");
                return false;
            }
            // Sentinel = 'TPParentToChildStreamParent'
            if ((!((aMsg)->ReadSentinel(aIter, 2417035916)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPParentToChildStreamParent of union IPCRemoteStreamType");
                return false;
            }
            return true;
        }
    case union__::TPParentToChildStreamChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::ipc::PParentToChildStreamParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PParentToChildStreamParent())))))) {
                aActor->FatalError("Error deserializing variant TPParentToChildStreamChild of union IPCRemoteStreamType");
                return false;
            }
            if ((!((*((&((aVar)->get_PParentToChildStreamParent()))))))) {
                aActor->FatalError("Error deserializing variant TPParentToChildStreamChild of union IPCRemoteStreamType");
                return false;
            }
            // Sentinel = 'TPParentToChildStreamChild'
            if ((!((aMsg)->ReadSentinel(aIter, 2236156422)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPParentToChildStreamChild of union IPCRemoteStreamType");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCRemoteStreamParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::IPCRemoteStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).delayedStart());
    // Sentinel = 'delayedStart'
    (aMsg)->WriteSentinel(528549095);
    WriteIPDLParam(aMsg, aActor, (aVar).stream());
    // Sentinel = 'stream'
    (aMsg)->WriteSentinel(153223821);
    (aMsg)->WriteBytes((&((aVar).length())), 8);
    // Sentinel = 'length'
    (aMsg)->WriteSentinel(147063427);
}

auto IPDLParamTraits<mozilla::ipc::IPCRemoteStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->delayedStart())))))) {
        aActor->FatalError("Error deserializing 'delayedStart' (bool) member of 'IPCRemoteStreamParams'");
        return false;
    }
    // Sentinel = 'delayedStart'
    if ((!((aMsg)->ReadSentinel(aIter, 528549095)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'delayedStart' (bool) member of 'IPCRemoteStreamParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stream())))))) {
        aActor->FatalError("Error deserializing 'stream' (IPCRemoteStreamType) member of 'IPCRemoteStreamParams'");
        return false;
    }
    // Sentinel = 'stream'
    if ((!((aMsg)->ReadSentinel(aIter, 153223821)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stream' (IPCRemoteStreamType) member of 'IPCRemoteStreamParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->length())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'length'
    if ((!((aMsg)->ReadSentinel(aIter, 147063427)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union InputStreamParams|
//
namespace mozilla {
namespace ipc {
auto InputStreamParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TStringInputStreamParams:
        {
            (ptr_StringInputStreamParams())->~StringInputStreamParams__tdef();
            break;
        }
    case TFileInputStreamParams:
        {
            (ptr_FileInputStreamParams())->~FileInputStreamParams__tdef();
            break;
        }
    case TBufferedInputStreamParams:
        {
            delete ptr_BufferedInputStreamParams();
            break;
        }
    case TMIMEInputStreamParams:
        {
            delete ptr_MIMEInputStreamParams();
            break;
        }
    case TMultiplexInputStreamParams:
        {
            delete ptr_MultiplexInputStreamParams();
            break;
        }
    case TSlicedInputStreamParams:
        {
            delete ptr_SlicedInputStreamParams();
            break;
        }
    case TRemoteLazyInputStreamParams:
        {
            (ptr_RemoteLazyInputStreamParams())->~RemoteLazyInputStreamParams__tdef();
            break;
        }
    case TInputStreamLengthWrapperParams:
        {
            delete ptr_InputStreamLengthWrapperParams();
            break;
        }
    case TIPCRemoteStreamParams:
        {
            (ptr_IPCRemoteStreamParams())->~IPCRemoteStreamParams__tdef();
            break;
        }
    case TEncryptedFileInputStreamParams:
        {
            (ptr_EncryptedFileInputStreamParams())->~EncryptedFileInputStreamParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const StringInputStreamParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_StringInputStreamParams()) StringInputStreamParams(aOther);
    mType = TStringInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(StringInputStreamParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StringInputStreamParams()) StringInputStreamParams(std::move(aOther));
    mType = TStringInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const FileInputStreamParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileInputStreamParams()) FileInputStreamParams(aOther);
    mType = TFileInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(FileInputStreamParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileInputStreamParams()) FileInputStreamParams(std::move(aOther));
    mType = TFileInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const BufferedInputStreamParams& aOther)
{
    ptr_BufferedInputStreamParams() = new BufferedInputStreamParams(aOther);
    mType = TBufferedInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(BufferedInputStreamParams&& aOther)
{
    ptr_BufferedInputStreamParams() = new BufferedInputStreamParams(std::move(aOther));
    mType = TBufferedInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const MIMEInputStreamParams& aOther)
{
    ptr_MIMEInputStreamParams() = new MIMEInputStreamParams(aOther);
    mType = TMIMEInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(MIMEInputStreamParams&& aOther)
{
    ptr_MIMEInputStreamParams() = new MIMEInputStreamParams(std::move(aOther));
    mType = TMIMEInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const MultiplexInputStreamParams& aOther)
{
    ptr_MultiplexInputStreamParams() = new MultiplexInputStreamParams(aOther);
    mType = TMultiplexInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(MultiplexInputStreamParams&& aOther)
{
    ptr_MultiplexInputStreamParams() = new MultiplexInputStreamParams(std::move(aOther));
    mType = TMultiplexInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const SlicedInputStreamParams& aOther)
{
    ptr_SlicedInputStreamParams() = new SlicedInputStreamParams(aOther);
    mType = TSlicedInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(SlicedInputStreamParams&& aOther)
{
    ptr_SlicedInputStreamParams() = new SlicedInputStreamParams(std::move(aOther));
    mType = TSlicedInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const RemoteLazyInputStreamParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamParams()) RemoteLazyInputStreamParams(aOther);
    mType = TRemoteLazyInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(RemoteLazyInputStreamParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamParams()) RemoteLazyInputStreamParams(std::move(aOther));
    mType = TRemoteLazyInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const InputStreamLengthWrapperParams& aOther)
{
    ptr_InputStreamLengthWrapperParams() = new InputStreamLengthWrapperParams(aOther);
    mType = TInputStreamLengthWrapperParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(InputStreamLengthWrapperParams&& aOther)
{
    ptr_InputStreamLengthWrapperParams() = new InputStreamLengthWrapperParams(std::move(aOther));
    mType = TInputStreamLengthWrapperParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const IPCRemoteStreamParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCRemoteStreamParams()) IPCRemoteStreamParams(aOther);
    mType = TIPCRemoteStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(IPCRemoteStreamParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCRemoteStreamParams()) IPCRemoteStreamParams(std::move(aOther));
    mType = TIPCRemoteStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const EncryptedFileInputStreamParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_EncryptedFileInputStreamParams()) EncryptedFileInputStreamParams(aOther);
    mType = TEncryptedFileInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(EncryptedFileInputStreamParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_EncryptedFileInputStreamParams()) EncryptedFileInputStreamParams(std::move(aOther));
    mType = TEncryptedFileInputStreamParams;
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(const InputStreamParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TStringInputStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_StringInputStreamParams()) StringInputStreamParams((aOther).get_StringInputStreamParams());
            break;
        }
    case TFileInputStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_FileInputStreamParams()) FileInputStreamParams((aOther).get_FileInputStreamParams());
            break;
        }
    case TBufferedInputStreamParams:
        {
            ptr_BufferedInputStreamParams() = new BufferedInputStreamParams((aOther).get_BufferedInputStreamParams());
            break;
        }
    case TMIMEInputStreamParams:
        {
            ptr_MIMEInputStreamParams() = new MIMEInputStreamParams((aOther).get_MIMEInputStreamParams());
            break;
        }
    case TMultiplexInputStreamParams:
        {
            ptr_MultiplexInputStreamParams() = new MultiplexInputStreamParams((aOther).get_MultiplexInputStreamParams());
            break;
        }
    case TSlicedInputStreamParams:
        {
            ptr_SlicedInputStreamParams() = new SlicedInputStreamParams((aOther).get_SlicedInputStreamParams());
            break;
        }
    case TRemoteLazyInputStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamParams()) RemoteLazyInputStreamParams((aOther).get_RemoteLazyInputStreamParams());
            break;
        }
    case TInputStreamLengthWrapperParams:
        {
            ptr_InputStreamLengthWrapperParams() = new InputStreamLengthWrapperParams((aOther).get_InputStreamLengthWrapperParams());
            break;
        }
    case TIPCRemoteStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_IPCRemoteStreamParams()) IPCRemoteStreamParams((aOther).get_IPCRemoteStreamParams());
            break;
        }
    case TEncryptedFileInputStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_EncryptedFileInputStreamParams()) EncryptedFileInputStreamParams((aOther).get_EncryptedFileInputStreamParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT InputStreamParams::InputStreamParams(InputStreamParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TStringInputStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_StringInputStreamParams()) StringInputStreamParams(std::move((aOther).get_StringInputStreamParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileInputStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_FileInputStreamParams()) FileInputStreamParams(std::move((aOther).get_FileInputStreamParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TBufferedInputStreamParams:
        {
            ptr_BufferedInputStreamParams() = (aOther).ptr_BufferedInputStreamParams();
            break;
        }
    case TMIMEInputStreamParams:
        {
            ptr_MIMEInputStreamParams() = (aOther).ptr_MIMEInputStreamParams();
            break;
        }
    case TMultiplexInputStreamParams:
        {
            ptr_MultiplexInputStreamParams() = (aOther).ptr_MultiplexInputStreamParams();
            break;
        }
    case TSlicedInputStreamParams:
        {
            ptr_SlicedInputStreamParams() = (aOther).ptr_SlicedInputStreamParams();
            break;
        }
    case TRemoteLazyInputStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamParams()) RemoteLazyInputStreamParams(std::move((aOther).get_RemoteLazyInputStreamParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInputStreamLengthWrapperParams:
        {
            ptr_InputStreamLengthWrapperParams() = (aOther).ptr_InputStreamLengthWrapperParams();
            break;
        }
    case TIPCRemoteStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_IPCRemoteStreamParams()) IPCRemoteStreamParams(std::move((aOther).get_IPCRemoteStreamParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TEncryptedFileInputStreamParams:
        {
            new (mozilla::KnownNotNull, ptr_EncryptedFileInputStreamParams()) EncryptedFileInputStreamParams(std::move((aOther).get_EncryptedFileInputStreamParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

InputStreamParams::~InputStreamParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto InputStreamParams::operator=(const StringInputStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TStringInputStreamParams)) {
        new (mozilla::KnownNotNull, ptr_StringInputStreamParams()) StringInputStreamParams;
    }
    (*(ptr_StringInputStreamParams())) = aRhs;
    mType = TStringInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(StringInputStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TStringInputStreamParams)) {
        new (mozilla::KnownNotNull, ptr_StringInputStreamParams()) StringInputStreamParams;
    }
    (*(ptr_StringInputStreamParams())) = std::move(aRhs);
    mType = TStringInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const FileInputStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TFileInputStreamParams)) {
        new (mozilla::KnownNotNull, ptr_FileInputStreamParams()) FileInputStreamParams;
    }
    (*(ptr_FileInputStreamParams())) = aRhs;
    mType = TFileInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(FileInputStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TFileInputStreamParams)) {
        new (mozilla::KnownNotNull, ptr_FileInputStreamParams()) FileInputStreamParams;
    }
    (*(ptr_FileInputStreamParams())) = std::move(aRhs);
    mType = TFileInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const BufferedInputStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TBufferedInputStreamParams)) {
        ptr_BufferedInputStreamParams() = new BufferedInputStreamParams;
    }
    (*(ptr_BufferedInputStreamParams())) = aRhs;
    mType = TBufferedInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(BufferedInputStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TBufferedInputStreamParams)) {
        ptr_BufferedInputStreamParams() = new BufferedInputStreamParams;
    }
    (*(ptr_BufferedInputStreamParams())) = std::move(aRhs);
    mType = TBufferedInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const MIMEInputStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TMIMEInputStreamParams)) {
        ptr_MIMEInputStreamParams() = new MIMEInputStreamParams;
    }
    (*(ptr_MIMEInputStreamParams())) = aRhs;
    mType = TMIMEInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(MIMEInputStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TMIMEInputStreamParams)) {
        ptr_MIMEInputStreamParams() = new MIMEInputStreamParams;
    }
    (*(ptr_MIMEInputStreamParams())) = std::move(aRhs);
    mType = TMIMEInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const MultiplexInputStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TMultiplexInputStreamParams)) {
        ptr_MultiplexInputStreamParams() = new MultiplexInputStreamParams;
    }
    (*(ptr_MultiplexInputStreamParams())) = aRhs;
    mType = TMultiplexInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(MultiplexInputStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TMultiplexInputStreamParams)) {
        ptr_MultiplexInputStreamParams() = new MultiplexInputStreamParams;
    }
    (*(ptr_MultiplexInputStreamParams())) = std::move(aRhs);
    mType = TMultiplexInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const SlicedInputStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TSlicedInputStreamParams)) {
        ptr_SlicedInputStreamParams() = new SlicedInputStreamParams;
    }
    (*(ptr_SlicedInputStreamParams())) = aRhs;
    mType = TSlicedInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(SlicedInputStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TSlicedInputStreamParams)) {
        ptr_SlicedInputStreamParams() = new SlicedInputStreamParams;
    }
    (*(ptr_SlicedInputStreamParams())) = std::move(aRhs);
    mType = TSlicedInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const RemoteLazyInputStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TRemoteLazyInputStreamParams)) {
        new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamParams()) RemoteLazyInputStreamParams;
    }
    (*(ptr_RemoteLazyInputStreamParams())) = aRhs;
    mType = TRemoteLazyInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(RemoteLazyInputStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TRemoteLazyInputStreamParams)) {
        new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamParams()) RemoteLazyInputStreamParams;
    }
    (*(ptr_RemoteLazyInputStreamParams())) = std::move(aRhs);
    mType = TRemoteLazyInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const InputStreamLengthWrapperParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TInputStreamLengthWrapperParams)) {
        ptr_InputStreamLengthWrapperParams() = new InputStreamLengthWrapperParams;
    }
    (*(ptr_InputStreamLengthWrapperParams())) = aRhs;
    mType = TInputStreamLengthWrapperParams;
    return (*(this));
}

auto InputStreamParams::operator=(InputStreamLengthWrapperParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TInputStreamLengthWrapperParams)) {
        ptr_InputStreamLengthWrapperParams() = new InputStreamLengthWrapperParams;
    }
    (*(ptr_InputStreamLengthWrapperParams())) = std::move(aRhs);
    mType = TInputStreamLengthWrapperParams;
    return (*(this));
}

auto InputStreamParams::operator=(const IPCRemoteStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TIPCRemoteStreamParams)) {
        new (mozilla::KnownNotNull, ptr_IPCRemoteStreamParams()) IPCRemoteStreamParams;
    }
    (*(ptr_IPCRemoteStreamParams())) = aRhs;
    mType = TIPCRemoteStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(IPCRemoteStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TIPCRemoteStreamParams)) {
        new (mozilla::KnownNotNull, ptr_IPCRemoteStreamParams()) IPCRemoteStreamParams;
    }
    (*(ptr_IPCRemoteStreamParams())) = std::move(aRhs);
    mType = TIPCRemoteStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const EncryptedFileInputStreamParams& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TEncryptedFileInputStreamParams)) {
        new (mozilla::KnownNotNull, ptr_EncryptedFileInputStreamParams()) EncryptedFileInputStreamParams;
    }
    (*(ptr_EncryptedFileInputStreamParams())) = aRhs;
    mType = TEncryptedFileInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(EncryptedFileInputStreamParams&& aRhs) -> InputStreamParams&
{
    if (MaybeDestroy(TEncryptedFileInputStreamParams)) {
        new (mozilla::KnownNotNull, ptr_EncryptedFileInputStreamParams()) EncryptedFileInputStreamParams;
    }
    (*(ptr_EncryptedFileInputStreamParams())) = std::move(aRhs);
    mType = TEncryptedFileInputStreamParams;
    return (*(this));
}

auto InputStreamParams::operator=(const InputStreamParams& aRhs) -> InputStreamParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TStringInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StringInputStreamParams()) StringInputStreamParams;
            }
            (*(ptr_StringInputStreamParams())) = (aRhs).get_StringInputStreamParams();
            break;
        }
    case TFileInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileInputStreamParams()) FileInputStreamParams;
            }
            (*(ptr_FileInputStreamParams())) = (aRhs).get_FileInputStreamParams();
            break;
        }
    case TBufferedInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                ptr_BufferedInputStreamParams() = new BufferedInputStreamParams;
            }
            (*(ptr_BufferedInputStreamParams())) = (aRhs).get_BufferedInputStreamParams();
            break;
        }
    case TMIMEInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                ptr_MIMEInputStreamParams() = new MIMEInputStreamParams;
            }
            (*(ptr_MIMEInputStreamParams())) = (aRhs).get_MIMEInputStreamParams();
            break;
        }
    case TMultiplexInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                ptr_MultiplexInputStreamParams() = new MultiplexInputStreamParams;
            }
            (*(ptr_MultiplexInputStreamParams())) = (aRhs).get_MultiplexInputStreamParams();
            break;
        }
    case TSlicedInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                ptr_SlicedInputStreamParams() = new SlicedInputStreamParams;
            }
            (*(ptr_SlicedInputStreamParams())) = (aRhs).get_SlicedInputStreamParams();
            break;
        }
    case TRemoteLazyInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamParams()) RemoteLazyInputStreamParams;
            }
            (*(ptr_RemoteLazyInputStreamParams())) = (aRhs).get_RemoteLazyInputStreamParams();
            break;
        }
    case TInputStreamLengthWrapperParams:
        {
            if (MaybeDestroy(t)) {
                ptr_InputStreamLengthWrapperParams() = new InputStreamLengthWrapperParams;
            }
            (*(ptr_InputStreamLengthWrapperParams())) = (aRhs).get_InputStreamLengthWrapperParams();
            break;
        }
    case TIPCRemoteStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCRemoteStreamParams()) IPCRemoteStreamParams;
            }
            (*(ptr_IPCRemoteStreamParams())) = (aRhs).get_IPCRemoteStreamParams();
            break;
        }
    case TEncryptedFileInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_EncryptedFileInputStreamParams()) EncryptedFileInputStreamParams;
            }
            (*(ptr_EncryptedFileInputStreamParams())) = (aRhs).get_EncryptedFileInputStreamParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto InputStreamParams::operator=(InputStreamParams&& aRhs) -> InputStreamParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TStringInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StringInputStreamParams()) StringInputStreamParams;
            }
            (*(ptr_StringInputStreamParams())) = std::move((aRhs).get_StringInputStreamParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileInputStreamParams()) FileInputStreamParams;
            }
            (*(ptr_FileInputStreamParams())) = std::move((aRhs).get_FileInputStreamParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TBufferedInputStreamParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_BufferedInputStreamParams() = (aRhs).ptr_BufferedInputStreamParams();
            break;
        }
    case TMIMEInputStreamParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_MIMEInputStreamParams() = (aRhs).ptr_MIMEInputStreamParams();
            break;
        }
    case TMultiplexInputStreamParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_MultiplexInputStreamParams() = (aRhs).ptr_MultiplexInputStreamParams();
            break;
        }
    case TSlicedInputStreamParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_SlicedInputStreamParams() = (aRhs).ptr_SlicedInputStreamParams();
            break;
        }
    case TRemoteLazyInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RemoteLazyInputStreamParams()) RemoteLazyInputStreamParams;
            }
            (*(ptr_RemoteLazyInputStreamParams())) = std::move((aRhs).get_RemoteLazyInputStreamParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInputStreamLengthWrapperParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_InputStreamLengthWrapperParams() = (aRhs).ptr_InputStreamLengthWrapperParams();
            break;
        }
    case TIPCRemoteStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCRemoteStreamParams()) IPCRemoteStreamParams;
            }
            (*(ptr_IPCRemoteStreamParams())) = std::move((aRhs).get_IPCRemoteStreamParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TEncryptedFileInputStreamParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_EncryptedFileInputStreamParams()) EncryptedFileInputStreamParams;
            }
            (*(ptr_EncryptedFileInputStreamParams())) = std::move((aRhs).get_EncryptedFileInputStreamParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::InputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::ipc::InputStreamParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'InputStreamParams'
    (aMsg)->WriteSentinel(1032128225);

    switch (type) {
    case union__::TStringInputStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StringInputStreamParams());
            // Sentinel = 'TStringInputStreamParams'
            (aMsg)->WriteSentinel(2010057132);
            return;
        }
    case union__::TFileInputStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileInputStreamParams());
            // Sentinel = 'TFileInputStreamParams'
            (aMsg)->WriteSentinel(1641154741);
            return;
        }
    case union__::TBufferedInputStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_BufferedInputStreamParams());
            // Sentinel = 'TBufferedInputStreamParams'
            (aMsg)->WriteSentinel(2300971608);
            return;
        }
    case union__::TMIMEInputStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_MIMEInputStreamParams());
            // Sentinel = 'TMIMEInputStreamParams'
            (aMsg)->WriteSentinel(1532495965);
            return;
        }
    case union__::TMultiplexInputStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_MultiplexInputStreamParams());
            // Sentinel = 'TMultiplexInputStreamParams'
            (aMsg)->WriteSentinel(2563443449);
            return;
        }
    case union__::TSlicedInputStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SlicedInputStreamParams());
            // Sentinel = 'TSlicedInputStreamParams'
            (aMsg)->WriteSentinel(1963526537);
            return;
        }
    case union__::TRemoteLazyInputStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RemoteLazyInputStreamParams());
            // Sentinel = 'TRemoteLazyInputStreamParams'
            (aMsg)->WriteSentinel(2704214849);
            return;
        }
    case union__::TInputStreamLengthWrapperParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InputStreamLengthWrapperParams());
            // Sentinel = 'TInputStreamLengthWrapperParams'
            (aMsg)->WriteSentinel(3313962104);
            return;
        }
    case union__::TIPCRemoteStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCRemoteStreamParams());
            // Sentinel = 'TIPCRemoteStreamParams'
            (aMsg)->WriteSentinel(1554516077);
            return;
        }
    case union__::TEncryptedFileInputStreamParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_EncryptedFileInputStreamParams());
            // Sentinel = 'TEncryptedFileInputStreamParams'
            (aMsg)->WriteSentinel(3287944291);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::ipc::InputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::ipc::InputStreamParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union InputStreamParams");
        return false;
    }
    // Sentinel = 'InputStreamParams'
    if ((!((aMsg)->ReadSentinel(aIter, 1032128225)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union InputStreamParams");
        return false;
    }

    switch (type) {
    case union__::TStringInputStreamParams:
        {
            mozilla::ipc::StringInputStreamParams tmp = mozilla::ipc::StringInputStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StringInputStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TStringInputStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TStringInputStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2010057132)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStringInputStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TFileInputStreamParams:
        {
            mozilla::ipc::FileInputStreamParams tmp = mozilla::ipc::FileInputStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileInputStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TFileInputStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TFileInputStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1641154741)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileInputStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TBufferedInputStreamParams:
        {
            mozilla::ipc::BufferedInputStreamParams tmp = mozilla::ipc::BufferedInputStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_BufferedInputStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TBufferedInputStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TBufferedInputStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2300971608)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TBufferedInputStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TMIMEInputStreamParams:
        {
            mozilla::ipc::MIMEInputStreamParams tmp = mozilla::ipc::MIMEInputStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_MIMEInputStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TMIMEInputStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TMIMEInputStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1532495965)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TMIMEInputStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TMultiplexInputStreamParams:
        {
            mozilla::ipc::MultiplexInputStreamParams tmp = mozilla::ipc::MultiplexInputStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_MultiplexInputStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TMultiplexInputStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TMultiplexInputStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2563443449)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TMultiplexInputStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TSlicedInputStreamParams:
        {
            mozilla::ipc::SlicedInputStreamParams tmp = mozilla::ipc::SlicedInputStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SlicedInputStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TSlicedInputStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TSlicedInputStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1963526537)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSlicedInputStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TRemoteLazyInputStreamParams:
        {
            mozilla::ipc::RemoteLazyInputStreamParams tmp = mozilla::ipc::RemoteLazyInputStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RemoteLazyInputStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TRemoteLazyInputStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TRemoteLazyInputStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2704214849)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRemoteLazyInputStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TInputStreamLengthWrapperParams:
        {
            mozilla::ipc::InputStreamLengthWrapperParams tmp = mozilla::ipc::InputStreamLengthWrapperParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InputStreamLengthWrapperParams())))))) {
                aActor->FatalError("Error deserializing variant TInputStreamLengthWrapperParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TInputStreamLengthWrapperParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3313962104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInputStreamLengthWrapperParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TIPCRemoteStreamParams:
        {
            mozilla::ipc::IPCRemoteStreamParams tmp = mozilla::ipc::IPCRemoteStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCRemoteStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TIPCRemoteStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TIPCRemoteStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1554516077)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCRemoteStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    case union__::TEncryptedFileInputStreamParams:
        {
            mozilla::ipc::EncryptedFileInputStreamParams tmp = mozilla::ipc::EncryptedFileInputStreamParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_EncryptedFileInputStreamParams())))))) {
                aActor->FatalError("Error deserializing variant TEncryptedFileInputStreamParams of union InputStreamParams");
                return false;
            }
            // Sentinel = 'TEncryptedFileInputStreamParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3287944291)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TEncryptedFileInputStreamParams of union InputStreamParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct EncryptedFileInputStreamParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::EncryptedFileInputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).fileInputStreamParams());
    // Sentinel = 'fileInputStreamParams'
    (aMsg)->WriteSentinel(1564018817);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    (aMsg)->WriteBytes((&((aVar).blockSize())), 4);
    // Sentinel = 'blockSize'
    (aMsg)->WriteSentinel(304939943);
}

auto IPDLParamTraits<mozilla::ipc::EncryptedFileInputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fileInputStreamParams())))))) {
        aActor->FatalError("Error deserializing 'fileInputStreamParams' (FileInputStreamParams) member of 'EncryptedFileInputStreamParams'");
        return false;
    }
    // Sentinel = 'fileInputStreamParams'
    if ((!((aMsg)->ReadSentinel(aIter, 1564018817)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fileInputStreamParams' (FileInputStreamParams) member of 'EncryptedFileInputStreamParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (uint8_t[]) member of 'EncryptedFileInputStreamParams'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (uint8_t[]) member of 'EncryptedFileInputStreamParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->blockSize())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'blockSize'
    if ((!((aMsg)->ReadSentinel(aIter, 304939943)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct BufferedInputStreamParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::BufferedInputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalStream());
    // Sentinel = 'optionalStream'
    (aMsg)->WriteSentinel(743376339);
    (aMsg)->WriteBytes((&((aVar).bufferSize())), 4);
    // Sentinel = 'bufferSize'
    (aMsg)->WriteSentinel(376243222);
}

auto IPDLParamTraits<mozilla::ipc::BufferedInputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalStream())))))) {
        aActor->FatalError("Error deserializing 'optionalStream' (InputStreamParams?) member of 'BufferedInputStreamParams'");
        return false;
    }
    // Sentinel = 'optionalStream'
    if ((!((aMsg)->ReadSentinel(aIter, 743376339)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalStream' (InputStreamParams?) member of 'BufferedInputStreamParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->bufferSize())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'bufferSize'
    if ((!((aMsg)->ReadSentinel(aIter, 376243222)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MIMEInputStreamParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::MIMEInputStreamParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalStream());
    // Sentinel = 'optionalStream'
    (aMsg)->WriteSentinel(743376339);
    WriteIPDLParam(aMsg, aActor, (aVar).headers());
    // Sentinel = 'headers'
    (aMsg)->WriteSentinel(188220125);
    WriteIPDLParam(aMsg, aActor, (aVar).startedReading());
    // Sentinel = 'startedReading'
    (aMsg)->WriteSentinel(728892850);
}

auto IPDLParamTraits<mozilla::ipc::MIMEInputStreamParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalStream())))))) {
        aActor->FatalError("Error deserializing 'optionalStream' (InputStreamParams?) member of 'MIMEInputStreamParams'");
        return false;
    }
    // Sentinel = 'optionalStream'
    if ((!((aMsg)->ReadSentinel(aIter, 743376339)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalStream' (InputStreamParams?) member of 'MIMEInputStreamParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headers())))))) {
        aActor->FatalError("Error deserializing 'headers' (HeaderEntry[]) member of 'MIMEInputStreamParams'");
        return false;
    }
    // Sentinel = 'headers'
    if ((!((aMsg)->ReadSentinel(aIter, 188220125)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headers' (HeaderEntry[]) member of 'MIMEInputStreamParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->startedReading())))))) {
        aActor->FatalError("Error deserializing 'startedReading' (bool) member of 'MIMEInputStreamParams'");
        return false;
    }
    // Sentinel = 'startedReading'
    if ((!((aMsg)->ReadSentinel(aIter, 728892850)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'startedReading' (bool) member of 'MIMEInputStreamParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InputStreamLengthWrapperParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::InputStreamLengthWrapperParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).stream());
    // Sentinel = 'stream'
    (aMsg)->WriteSentinel(153223821);
    WriteIPDLParam(aMsg, aActor, (aVar).consumed());
    // Sentinel = 'consumed'
    (aMsg)->WriteSentinel(256181087);
    (aMsg)->WriteBytes((&((aVar).length())), 8);
    // Sentinel = 'length'
    (aMsg)->WriteSentinel(147063427);
}

auto IPDLParamTraits<mozilla::ipc::InputStreamLengthWrapperParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stream())))))) {
        aActor->FatalError("Error deserializing 'stream' (InputStreamParams) member of 'InputStreamLengthWrapperParams'");
        return false;
    }
    // Sentinel = 'stream'
    if ((!((aMsg)->ReadSentinel(aIter, 153223821)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stream' (InputStreamParams) member of 'InputStreamLengthWrapperParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->consumed())))))) {
        aActor->FatalError("Error deserializing 'consumed' (bool) member of 'InputStreamLengthWrapperParams'");
        return false;
    }
    // Sentinel = 'consumed'
    if ((!((aMsg)->ReadSentinel(aIter, 256181087)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'consumed' (bool) member of 'InputStreamLengthWrapperParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->length())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'length'
    if ((!((aMsg)->ReadSentinel(aIter, 147063427)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
