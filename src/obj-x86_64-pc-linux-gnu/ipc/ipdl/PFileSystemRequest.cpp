//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/PFileSystemRequest.h"
#include "mozilla/dom/PFileSystemRequestParent.h"
#include "mozilla/dom/PFileSystemRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PFileSystemRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PFileSystemRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PFileSystemRequestChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PFileSystemRequest
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemFileResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemFileResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).blob());
    // Sentinel = 'blob'
    (aMsg)->WriteSentinel(68157856);
}

auto IPDLParamTraits<mozilla::dom::FileSystemFileResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blob())))))) {
        aActor->FatalError("Error deserializing 'blob' (IPCBlob) member of 'FileSystemFileResponse'");
        return false;
    }
    // Sentinel = 'blob'
    if ((!((aMsg)->ReadSentinel(aIter, 68157856)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blob' (IPCBlob) member of 'FileSystemFileResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemDirectoryResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).realPath());
    // Sentinel = 'realPath'
    (aMsg)->WriteSentinel(242221874);
}

auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->realPath())))))) {
        aActor->FatalError("Error deserializing 'realPath' (nsString) member of 'FileSystemDirectoryResponse'");
        return false;
    }
    // Sentinel = 'realPath'
    if ((!((aMsg)->ReadSentinel(aIter, 242221874)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'realPath' (nsString) member of 'FileSystemDirectoryResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemDirectoryListingResponseFile|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryListingResponseFile>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).blob());
    // Sentinel = 'blob'
    (aMsg)->WriteSentinel(68157856);
}

auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryListingResponseFile>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blob())))))) {
        aActor->FatalError("Error deserializing 'blob' (IPCBlob) member of 'FileSystemDirectoryListingResponseFile'");
        return false;
    }
    // Sentinel = 'blob'
    if ((!((aMsg)->ReadSentinel(aIter, 68157856)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blob' (IPCBlob) member of 'FileSystemDirectoryListingResponseFile'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemDirectoryListingResponseDirectory|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryListingResponseDirectory>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).directoryRealPath());
    // Sentinel = 'directoryRealPath'
    (aMsg)->WriteSentinel(1053951719);
}

auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryListingResponseDirectory>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->directoryRealPath())))))) {
        aActor->FatalError("Error deserializing 'directoryRealPath' (nsString) member of 'FileSystemDirectoryListingResponseDirectory'");
        return false;
    }
    // Sentinel = 'directoryRealPath'
    if ((!((aMsg)->ReadSentinel(aIter, 1053951719)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'directoryRealPath' (nsString) member of 'FileSystemDirectoryListingResponseDirectory'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union FileSystemDirectoryListingResponseData|
//
namespace mozilla {
namespace dom {
auto FileSystemDirectoryListingResponseData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TFileSystemDirectoryListingResponseFile:
        {
            (ptr_FileSystemDirectoryListingResponseFile())->~FileSystemDirectoryListingResponseFile__tdef();
            break;
        }
    case TFileSystemDirectoryListingResponseDirectory:
        {
            (ptr_FileSystemDirectoryListingResponseDirectory())->~FileSystemDirectoryListingResponseDirectory__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT FileSystemDirectoryListingResponseData::FileSystemDirectoryListingResponseData(const FileSystemDirectoryListingResponseFile& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseFile()) FileSystemDirectoryListingResponseFile(aOther);
    mType = TFileSystemDirectoryListingResponseFile;
}

MOZ_IMPLICIT FileSystemDirectoryListingResponseData::FileSystemDirectoryListingResponseData(FileSystemDirectoryListingResponseFile&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseFile()) FileSystemDirectoryListingResponseFile(std::move(aOther));
    mType = TFileSystemDirectoryListingResponseFile;
}

MOZ_IMPLICIT FileSystemDirectoryListingResponseData::FileSystemDirectoryListingResponseData(const FileSystemDirectoryListingResponseDirectory& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseDirectory()) FileSystemDirectoryListingResponseDirectory(aOther);
    mType = TFileSystemDirectoryListingResponseDirectory;
}

MOZ_IMPLICIT FileSystemDirectoryListingResponseData::FileSystemDirectoryListingResponseData(FileSystemDirectoryListingResponseDirectory&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseDirectory()) FileSystemDirectoryListingResponseDirectory(std::move(aOther));
    mType = TFileSystemDirectoryListingResponseDirectory;
}

MOZ_IMPLICIT FileSystemDirectoryListingResponseData::FileSystemDirectoryListingResponseData(const FileSystemDirectoryListingResponseData& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TFileSystemDirectoryListingResponseFile:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseFile()) FileSystemDirectoryListingResponseFile((aOther).get_FileSystemDirectoryListingResponseFile());
            break;
        }
    case TFileSystemDirectoryListingResponseDirectory:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseDirectory()) FileSystemDirectoryListingResponseDirectory((aOther).get_FileSystemDirectoryListingResponseDirectory());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT FileSystemDirectoryListingResponseData::FileSystemDirectoryListingResponseData(FileSystemDirectoryListingResponseData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TFileSystemDirectoryListingResponseFile:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseFile()) FileSystemDirectoryListingResponseFile(std::move((aOther).get_FileSystemDirectoryListingResponseFile()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemDirectoryListingResponseDirectory:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseDirectory()) FileSystemDirectoryListingResponseDirectory(std::move((aOther).get_FileSystemDirectoryListingResponseDirectory()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

FileSystemDirectoryListingResponseData::~FileSystemDirectoryListingResponseData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto FileSystemDirectoryListingResponseData::operator=(const FileSystemDirectoryListingResponseFile& aRhs) -> FileSystemDirectoryListingResponseData&
{
    if (MaybeDestroy(TFileSystemDirectoryListingResponseFile)) {
        new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseFile()) FileSystemDirectoryListingResponseFile;
    }
    (*(ptr_FileSystemDirectoryListingResponseFile())) = aRhs;
    mType = TFileSystemDirectoryListingResponseFile;
    return (*(this));
}

auto FileSystemDirectoryListingResponseData::operator=(FileSystemDirectoryListingResponseFile&& aRhs) -> FileSystemDirectoryListingResponseData&
{
    if (MaybeDestroy(TFileSystemDirectoryListingResponseFile)) {
        new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseFile()) FileSystemDirectoryListingResponseFile;
    }
    (*(ptr_FileSystemDirectoryListingResponseFile())) = std::move(aRhs);
    mType = TFileSystemDirectoryListingResponseFile;
    return (*(this));
}

auto FileSystemDirectoryListingResponseData::operator=(const FileSystemDirectoryListingResponseDirectory& aRhs) -> FileSystemDirectoryListingResponseData&
{
    if (MaybeDestroy(TFileSystemDirectoryListingResponseDirectory)) {
        new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseDirectory()) FileSystemDirectoryListingResponseDirectory;
    }
    (*(ptr_FileSystemDirectoryListingResponseDirectory())) = aRhs;
    mType = TFileSystemDirectoryListingResponseDirectory;
    return (*(this));
}

auto FileSystemDirectoryListingResponseData::operator=(FileSystemDirectoryListingResponseDirectory&& aRhs) -> FileSystemDirectoryListingResponseData&
{
    if (MaybeDestroy(TFileSystemDirectoryListingResponseDirectory)) {
        new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseDirectory()) FileSystemDirectoryListingResponseDirectory;
    }
    (*(ptr_FileSystemDirectoryListingResponseDirectory())) = std::move(aRhs);
    mType = TFileSystemDirectoryListingResponseDirectory;
    return (*(this));
}

auto FileSystemDirectoryListingResponseData::operator=(const FileSystemDirectoryListingResponseData& aRhs) -> FileSystemDirectoryListingResponseData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileSystemDirectoryListingResponseFile:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseFile()) FileSystemDirectoryListingResponseFile;
            }
            (*(ptr_FileSystemDirectoryListingResponseFile())) = (aRhs).get_FileSystemDirectoryListingResponseFile();
            break;
        }
    case TFileSystemDirectoryListingResponseDirectory:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseDirectory()) FileSystemDirectoryListingResponseDirectory;
            }
            (*(ptr_FileSystemDirectoryListingResponseDirectory())) = (aRhs).get_FileSystemDirectoryListingResponseDirectory();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto FileSystemDirectoryListingResponseData::operator=(FileSystemDirectoryListingResponseData&& aRhs) -> FileSystemDirectoryListingResponseData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileSystemDirectoryListingResponseFile:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseFile()) FileSystemDirectoryListingResponseFile;
            }
            (*(ptr_FileSystemDirectoryListingResponseFile())) = std::move((aRhs).get_FileSystemDirectoryListingResponseFile());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemDirectoryListingResponseDirectory:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponseDirectory()) FileSystemDirectoryListingResponseDirectory;
            }
            (*(ptr_FileSystemDirectoryListingResponseDirectory())) = std::move((aRhs).get_FileSystemDirectoryListingResponseDirectory());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryListingResponseData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::FileSystemDirectoryListingResponseData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'FileSystemDirectoryListingResponseData'
    (aMsg)->WriteSentinel(713822046);

    switch (type) {
    case union__::TFileSystemDirectoryListingResponseFile:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemDirectoryListingResponseFile());
            // Sentinel = 'TFileSystemDirectoryListingResponseFile'
            (aMsg)->WriteSentinel(929894328);
            return;
        }
    case union__::TFileSystemDirectoryListingResponseDirectory:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemDirectoryListingResponseDirectory());
            // Sentinel = 'TFileSystemDirectoryListingResponseDirectory'
            (aMsg)->WriteSentinel(2357596653);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryListingResponseData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::FileSystemDirectoryListingResponseData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union FileSystemDirectoryListingResponseData");
        return false;
    }
    // Sentinel = 'FileSystemDirectoryListingResponseData'
    if ((!((aMsg)->ReadSentinel(aIter, 713822046)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union FileSystemDirectoryListingResponseData");
        return false;
    }

    switch (type) {
    case union__::TFileSystemDirectoryListingResponseFile:
        {
            mozilla::dom::FileSystemDirectoryListingResponseFile tmp = mozilla::dom::FileSystemDirectoryListingResponseFile();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemDirectoryListingResponseFile())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemDirectoryListingResponseFile of union FileSystemDirectoryListingResponseData");
                return false;
            }
            // Sentinel = 'TFileSystemDirectoryListingResponseFile'
            if ((!((aMsg)->ReadSentinel(aIter, 929894328)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemDirectoryListingResponseFile of union FileSystemDirectoryListingResponseData");
                return false;
            }
            return true;
        }
    case union__::TFileSystemDirectoryListingResponseDirectory:
        {
            mozilla::dom::FileSystemDirectoryListingResponseDirectory tmp = mozilla::dom::FileSystemDirectoryListingResponseDirectory();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemDirectoryListingResponseDirectory())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemDirectoryListingResponseDirectory of union FileSystemDirectoryListingResponseData");
                return false;
            }
            // Sentinel = 'TFileSystemDirectoryListingResponseDirectory'
            if ((!((aMsg)->ReadSentinel(aIter, 2357596653)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemDirectoryListingResponseDirectory of union FileSystemDirectoryListingResponseData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemDirectoryListingResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryListingResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::FileSystemDirectoryListingResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (FileSystemDirectoryListingResponseData[]) member of 'FileSystemDirectoryListingResponse'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (FileSystemDirectoryListingResponseData[]) member of 'FileSystemDirectoryListingResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemFilesResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemFilesResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::FileSystemFilesResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (FileSystemFileResponse[]) member of 'FileSystemFilesResponse'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (FileSystemFileResponse[]) member of 'FileSystemFilesResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileSystemErrorResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemErrorResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).error());
    // Sentinel = 'error'
    (aMsg)->WriteSentinel(107741739);
}

auto IPDLParamTraits<mozilla::dom::FileSystemErrorResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->error())))))) {
        aActor->FatalError("Error deserializing 'error' (nsresult) member of 'FileSystemErrorResponse'");
        return false;
    }
    // Sentinel = 'error'
    if ((!((aMsg)->ReadSentinel(aIter, 107741739)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'error' (nsresult) member of 'FileSystemErrorResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union FileSystemResponseValue|
//
namespace mozilla {
namespace dom {
auto FileSystemResponseValue::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TFileSystemDirectoryResponse:
        {
            (ptr_FileSystemDirectoryResponse())->~FileSystemDirectoryResponse__tdef();
            break;
        }
    case TFileSystemDirectoryListingResponse:
        {
            (ptr_FileSystemDirectoryListingResponse())->~FileSystemDirectoryListingResponse__tdef();
            break;
        }
    case TFileSystemFileResponse:
        {
            (ptr_FileSystemFileResponse())->~FileSystemFileResponse__tdef();
            break;
        }
    case TFileSystemFilesResponse:
        {
            (ptr_FileSystemFilesResponse())->~FileSystemFilesResponse__tdef();
            break;
        }
    case TFileSystemErrorResponse:
        {
            (ptr_FileSystemErrorResponse())->~FileSystemErrorResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(const FileSystemDirectoryResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemDirectoryResponse()) FileSystemDirectoryResponse(aOther);
    mType = TFileSystemDirectoryResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(FileSystemDirectoryResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemDirectoryResponse()) FileSystemDirectoryResponse(std::move(aOther));
    mType = TFileSystemDirectoryResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(const FileSystemDirectoryListingResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponse()) FileSystemDirectoryListingResponse(aOther);
    mType = TFileSystemDirectoryListingResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(FileSystemDirectoryListingResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponse()) FileSystemDirectoryListingResponse(std::move(aOther));
    mType = TFileSystemDirectoryListingResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(const FileSystemFileResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemFileResponse()) FileSystemFileResponse(aOther);
    mType = TFileSystemFileResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(FileSystemFileResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemFileResponse()) FileSystemFileResponse(std::move(aOther));
    mType = TFileSystemFileResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(const FileSystemFilesResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemFilesResponse()) FileSystemFilesResponse(aOther);
    mType = TFileSystemFilesResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(FileSystemFilesResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemFilesResponse()) FileSystemFilesResponse(std::move(aOther));
    mType = TFileSystemFilesResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(const FileSystemErrorResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemErrorResponse()) FileSystemErrorResponse(aOther);
    mType = TFileSystemErrorResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(FileSystemErrorResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileSystemErrorResponse()) FileSystemErrorResponse(std::move(aOther));
    mType = TFileSystemErrorResponse;
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(const FileSystemResponseValue& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TFileSystemDirectoryResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemDirectoryResponse()) FileSystemDirectoryResponse((aOther).get_FileSystemDirectoryResponse());
            break;
        }
    case TFileSystemDirectoryListingResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponse()) FileSystemDirectoryListingResponse((aOther).get_FileSystemDirectoryListingResponse());
            break;
        }
    case TFileSystemFileResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemFileResponse()) FileSystemFileResponse((aOther).get_FileSystemFileResponse());
            break;
        }
    case TFileSystemFilesResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemFilesResponse()) FileSystemFilesResponse((aOther).get_FileSystemFilesResponse());
            break;
        }
    case TFileSystemErrorResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemErrorResponse()) FileSystemErrorResponse((aOther).get_FileSystemErrorResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT FileSystemResponseValue::FileSystemResponseValue(FileSystemResponseValue&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TFileSystemDirectoryResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemDirectoryResponse()) FileSystemDirectoryResponse(std::move((aOther).get_FileSystemDirectoryResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemDirectoryListingResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponse()) FileSystemDirectoryListingResponse(std::move((aOther).get_FileSystemDirectoryListingResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemFileResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemFileResponse()) FileSystemFileResponse(std::move((aOther).get_FileSystemFileResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemFilesResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemFilesResponse()) FileSystemFilesResponse(std::move((aOther).get_FileSystemFilesResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemErrorResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileSystemErrorResponse()) FileSystemErrorResponse(std::move((aOther).get_FileSystemErrorResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

FileSystemResponseValue::~FileSystemResponseValue()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto FileSystemResponseValue::operator=(const FileSystemDirectoryResponse& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemDirectoryResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemDirectoryResponse()) FileSystemDirectoryResponse;
    }
    (*(ptr_FileSystemDirectoryResponse())) = aRhs;
    mType = TFileSystemDirectoryResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(FileSystemDirectoryResponse&& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemDirectoryResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemDirectoryResponse()) FileSystemDirectoryResponse;
    }
    (*(ptr_FileSystemDirectoryResponse())) = std::move(aRhs);
    mType = TFileSystemDirectoryResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(const FileSystemDirectoryListingResponse& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemDirectoryListingResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponse()) FileSystemDirectoryListingResponse;
    }
    (*(ptr_FileSystemDirectoryListingResponse())) = aRhs;
    mType = TFileSystemDirectoryListingResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(FileSystemDirectoryListingResponse&& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemDirectoryListingResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponse()) FileSystemDirectoryListingResponse;
    }
    (*(ptr_FileSystemDirectoryListingResponse())) = std::move(aRhs);
    mType = TFileSystemDirectoryListingResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(const FileSystemFileResponse& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemFileResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemFileResponse()) FileSystemFileResponse;
    }
    (*(ptr_FileSystemFileResponse())) = aRhs;
    mType = TFileSystemFileResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(FileSystemFileResponse&& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemFileResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemFileResponse()) FileSystemFileResponse;
    }
    (*(ptr_FileSystemFileResponse())) = std::move(aRhs);
    mType = TFileSystemFileResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(const FileSystemFilesResponse& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemFilesResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemFilesResponse()) FileSystemFilesResponse;
    }
    (*(ptr_FileSystemFilesResponse())) = aRhs;
    mType = TFileSystemFilesResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(FileSystemFilesResponse&& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemFilesResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemFilesResponse()) FileSystemFilesResponse;
    }
    (*(ptr_FileSystemFilesResponse())) = std::move(aRhs);
    mType = TFileSystemFilesResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(const FileSystemErrorResponse& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemErrorResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemErrorResponse()) FileSystemErrorResponse;
    }
    (*(ptr_FileSystemErrorResponse())) = aRhs;
    mType = TFileSystemErrorResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(FileSystemErrorResponse&& aRhs) -> FileSystemResponseValue&
{
    if (MaybeDestroy(TFileSystemErrorResponse)) {
        new (mozilla::KnownNotNull, ptr_FileSystemErrorResponse()) FileSystemErrorResponse;
    }
    (*(ptr_FileSystemErrorResponse())) = std::move(aRhs);
    mType = TFileSystemErrorResponse;
    return (*(this));
}

auto FileSystemResponseValue::operator=(const FileSystemResponseValue& aRhs) -> FileSystemResponseValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileSystemDirectoryResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemDirectoryResponse()) FileSystemDirectoryResponse;
            }
            (*(ptr_FileSystemDirectoryResponse())) = (aRhs).get_FileSystemDirectoryResponse();
            break;
        }
    case TFileSystemDirectoryListingResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponse()) FileSystemDirectoryListingResponse;
            }
            (*(ptr_FileSystemDirectoryListingResponse())) = (aRhs).get_FileSystemDirectoryListingResponse();
            break;
        }
    case TFileSystemFileResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemFileResponse()) FileSystemFileResponse;
            }
            (*(ptr_FileSystemFileResponse())) = (aRhs).get_FileSystemFileResponse();
            break;
        }
    case TFileSystemFilesResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemFilesResponse()) FileSystemFilesResponse;
            }
            (*(ptr_FileSystemFilesResponse())) = (aRhs).get_FileSystemFilesResponse();
            break;
        }
    case TFileSystemErrorResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemErrorResponse()) FileSystemErrorResponse;
            }
            (*(ptr_FileSystemErrorResponse())) = (aRhs).get_FileSystemErrorResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto FileSystemResponseValue::operator=(FileSystemResponseValue&& aRhs) -> FileSystemResponseValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileSystemDirectoryResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemDirectoryResponse()) FileSystemDirectoryResponse;
            }
            (*(ptr_FileSystemDirectoryResponse())) = std::move((aRhs).get_FileSystemDirectoryResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemDirectoryListingResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemDirectoryListingResponse()) FileSystemDirectoryListingResponse;
            }
            (*(ptr_FileSystemDirectoryListingResponse())) = std::move((aRhs).get_FileSystemDirectoryListingResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemFileResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemFileResponse()) FileSystemFileResponse;
            }
            (*(ptr_FileSystemFileResponse())) = std::move((aRhs).get_FileSystemFileResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemFilesResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemFilesResponse()) FileSystemFilesResponse;
            }
            (*(ptr_FileSystemFilesResponse())) = std::move((aRhs).get_FileSystemFilesResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileSystemErrorResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileSystemErrorResponse()) FileSystemErrorResponse;
            }
            (*(ptr_FileSystemErrorResponse())) = std::move((aRhs).get_FileSystemErrorResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileSystemResponseValue>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::FileSystemResponseValue union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'FileSystemResponseValue'
    (aMsg)->WriteSentinel(1852574034);

    switch (type) {
    case union__::TFileSystemDirectoryResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemDirectoryResponse());
            // Sentinel = 'TFileSystemDirectoryResponse'
            (aMsg)->WriteSentinel(2694712158);
            return;
        }
    case union__::TFileSystemDirectoryListingResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemDirectoryListingResponse());
            // Sentinel = 'TFileSystemDirectoryListingResponse'
            (aMsg)->WriteSentinel(4209905208);
            return;
        }
    case union__::TFileSystemFileResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemFileResponse());
            // Sentinel = 'TFileSystemFileResponse'
            (aMsg)->WriteSentinel(1798506793);
            return;
        }
    case union__::TFileSystemFilesResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemFilesResponse());
            // Sentinel = 'TFileSystemFilesResponse'
            (aMsg)->WriteSentinel(1964509596);
            return;
        }
    case union__::TFileSystemErrorResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileSystemErrorResponse());
            // Sentinel = 'TFileSystemErrorResponse'
            (aMsg)->WriteSentinel(1981024691);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::FileSystemResponseValue>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::FileSystemResponseValue union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union FileSystemResponseValue");
        return false;
    }
    // Sentinel = 'FileSystemResponseValue'
    if ((!((aMsg)->ReadSentinel(aIter, 1852574034)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union FileSystemResponseValue");
        return false;
    }

    switch (type) {
    case union__::TFileSystemDirectoryResponse:
        {
            mozilla::dom::FileSystemDirectoryResponse tmp = mozilla::dom::FileSystemDirectoryResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemDirectoryResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemDirectoryResponse of union FileSystemResponseValue");
                return false;
            }
            // Sentinel = 'TFileSystemDirectoryResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2694712158)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemDirectoryResponse of union FileSystemResponseValue");
                return false;
            }
            return true;
        }
    case union__::TFileSystemDirectoryListingResponse:
        {
            mozilla::dom::FileSystemDirectoryListingResponse tmp = mozilla::dom::FileSystemDirectoryListingResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemDirectoryListingResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemDirectoryListingResponse of union FileSystemResponseValue");
                return false;
            }
            // Sentinel = 'TFileSystemDirectoryListingResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 4209905208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemDirectoryListingResponse of union FileSystemResponseValue");
                return false;
            }
            return true;
        }
    case union__::TFileSystemFileResponse:
        {
            mozilla::dom::FileSystemFileResponse tmp = mozilla::dom::FileSystemFileResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemFileResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemFileResponse of union FileSystemResponseValue");
                return false;
            }
            // Sentinel = 'TFileSystemFileResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1798506793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemFileResponse of union FileSystemResponseValue");
                return false;
            }
            return true;
        }
    case union__::TFileSystemFilesResponse:
        {
            mozilla::dom::FileSystemFilesResponse tmp = mozilla::dom::FileSystemFilesResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemFilesResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemFilesResponse of union FileSystemResponseValue");
                return false;
            }
            // Sentinel = 'TFileSystemFilesResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1964509596)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemFilesResponse of union FileSystemResponseValue");
                return false;
            }
            return true;
        }
    case union__::TFileSystemErrorResponse:
        {
            mozilla::dom::FileSystemErrorResponse tmp = mozilla::dom::FileSystemErrorResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileSystemErrorResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileSystemErrorResponse of union FileSystemResponseValue");
                return false;
            }
            // Sentinel = 'TFileSystemErrorResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1981024691)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileSystemErrorResponse of union FileSystemResponseValue");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
