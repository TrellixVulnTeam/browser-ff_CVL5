//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PClientManagerParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/dom/PClientHandleParent.h"
#include "mozilla/dom/PClientManagerOpParent.h"
#include "mozilla/dom/PClientNavigateOpParent.h"
#include "mozilla/dom/PClientSourceParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PClientManagerParent::RecvPClientHandleConstructor(
        PClientHandleParent* actor,
        const IPCClientInfo& aClientInfo) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PClientManagerParent::RecvPClientManagerOpConstructor(
        PClientManagerOpParent* actor,
        const ClientOpConstructorArgs& aArgs) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PClientManagerParent::RecvPClientSourceConstructor(
        PClientSourceParent* actor,
        const ClientSourceConstructorArgs& aArgs) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PClientManagerParent::PClientManagerParent() :
    mozilla::ipc::IProtocol(PClientManagerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PClientManagerParent);
}

PClientManagerParent::~PClientManagerParent()
{
    MOZ_COUNT_DTOR(PClientManagerParent);
}

auto PClientManagerParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PClientManagerParent::ManagedPClientHandleParent(nsTArray<PClientHandleParent*>& aArr) const -> void
{
    mManagedPClientHandleParent.ToArray(aArr);
}

auto PClientManagerParent::ManagedPClientHandleParent() const -> const ManagedContainer<PClientHandleParent>&
{
    return mManagedPClientHandleParent;
}

auto PClientManagerParent::ManagedPClientManagerOpParent(nsTArray<PClientManagerOpParent*>& aArr) const -> void
{
    mManagedPClientManagerOpParent.ToArray(aArr);
}

auto PClientManagerParent::ManagedPClientManagerOpParent() const -> const ManagedContainer<PClientManagerOpParent>&
{
    return mManagedPClientManagerOpParent;
}

auto PClientManagerParent::ManagedPClientNavigateOpParent(nsTArray<PClientNavigateOpParent*>& aArr) const -> void
{
    mManagedPClientNavigateOpParent.ToArray(aArr);
}

auto PClientManagerParent::ManagedPClientNavigateOpParent() const -> const ManagedContainer<PClientNavigateOpParent>&
{
    return mManagedPClientNavigateOpParent;
}

auto PClientManagerParent::ManagedPClientSourceParent(nsTArray<PClientSourceParent*>& aArr) const -> void
{
    mManagedPClientSourceParent.ToArray(aArr);
}

auto PClientManagerParent::ManagedPClientSourceParent() const -> const ManagedContainer<PClientSourceParent>&
{
    return mManagedPClientSourceParent;
}

auto PClientManagerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPClientHandleParent.Count();
    total += mManagedPClientManagerOpParent.Count();
    total += mManagedPClientNavigateOpParent.Count();
    total += mManagedPClientSourceParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPClientHandleParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPClientManagerOpParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPClientNavigateOpParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPClientSourceParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PClientManagerParent::OpenPClientHandleEndpoint(PClientHandleParent* aActor) -> ManagedEndpoint<PClientHandleChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientHandleParent actor");
        return ManagedEndpoint<PClientHandleChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientHandleParent.PutEntry(aActor);

    return ManagedEndpoint<PClientHandleChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientManagerParent::BindPClientHandleEndpoint(
        ManagedEndpoint<PClientHandleParent> aEndpoint,
        PClientHandleParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientHandleParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientHandleParent.PutEntry(aActor);

    return true;
}

auto PClientManagerParent::OpenPClientManagerOpEndpoint(PClientManagerOpParent* aActor) -> ManagedEndpoint<PClientManagerOpChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientManagerOpParent actor");
        return ManagedEndpoint<PClientManagerOpChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientManagerOpParent.PutEntry(aActor);

    return ManagedEndpoint<PClientManagerOpChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientManagerParent::BindPClientManagerOpEndpoint(
        ManagedEndpoint<PClientManagerOpParent> aEndpoint,
        PClientManagerOpParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientManagerOpParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientManagerOpParent.PutEntry(aActor);

    return true;
}

auto PClientManagerParent::OpenPClientNavigateOpEndpoint(PClientNavigateOpParent* aActor) -> ManagedEndpoint<PClientNavigateOpChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientNavigateOpParent actor");
        return ManagedEndpoint<PClientNavigateOpChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientNavigateOpParent.PutEntry(aActor);

    return ManagedEndpoint<PClientNavigateOpChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientManagerParent::BindPClientNavigateOpEndpoint(
        ManagedEndpoint<PClientNavigateOpParent> aEndpoint,
        PClientNavigateOpParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientNavigateOpParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientNavigateOpParent.PutEntry(aActor);

    return true;
}

auto PClientManagerParent::OpenPClientSourceEndpoint(PClientSourceParent* aActor) -> ManagedEndpoint<PClientSourceChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientSourceParent actor");
        return ManagedEndpoint<PClientSourceChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientSourceParent.PutEntry(aActor);

    return ManagedEndpoint<PClientSourceChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientManagerParent::BindPClientSourceEndpoint(
        ManagedEndpoint<PClientSourceParent> aEndpoint,
        PClientSourceParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientSourceParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientSourceParent.PutEntry(aActor);

    return true;
}

auto PClientManagerParent::SendPClientNavigateOpConstructor(const ClientNavigateOpConstructorArgs& aArgs) -> PClientNavigateOpParent*
{
    PClientNavigateOpParent* actor = (this)->AllocPClientNavigateOpParent(aArgs);
    return SendPClientNavigateOpConstructor(actor, aArgs);
}

auto PClientManagerParent::SendPClientNavigateOpConstructor(
        PClientNavigateOpParent* actor,
        const ClientNavigateOpConstructorArgs& aArgs) -> PClientNavigateOpParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PClientNavigateOpParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPClientNavigateOpParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PClientManager::Msg_PClientNavigateOpConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PClientManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientManagerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientManager::Msg_PClientNavigateOpConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PClientNavigateOpParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PClientNavigateOpMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PClientManagerParent::Send__delete__(PClientManagerParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PClientManager::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PClientManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientManagerParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientManager::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PClientManagerMsgStart, actor);
    return sendok__;
}

auto PClientManagerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientHandleMsgStart:
{
            PClientHandleParent* actor = static_cast<PClientHandleParent*>(aListener);
            auto& container = mManagedPClientHandleParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PClientManagerOpMsgStart:
{
            PClientManagerOpParent* actor = static_cast<PClientManagerOpParent*>(aListener);
            auto& container = mManagedPClientManagerOpParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PClientNavigateOpMsgStart:
{
            PClientNavigateOpParent* actor = static_cast<PClientNavigateOpParent*>(aListener);
            auto& container = mManagedPClientNavigateOpParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PClientSourceMsgStart:
{
            PClientSourceParent* actor = static_cast<PClientSourceParent*>(aListener);
            auto& container = mManagedPClientSourceParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PClientManagerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientHandleMsgStart:
        this->DeallocPClientHandleParent(static_cast<PClientHandleParent*>(aListener));
        return;
    case PClientManagerOpMsgStart:
        this->DeallocPClientManagerOpParent(static_cast<PClientManagerOpParent*>(aListener));
        return;
    case PClientNavigateOpMsgStart:
        this->DeallocPClientNavigateOpParent(static_cast<PClientNavigateOpParent*>(aListener));
        return;
    case PClientSourceMsgStart:
        this->DeallocPClientSourceParent(static_cast<PClientSourceParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PClientManagerParent::OnMessageReceived(const Message& msg__) -> PClientManagerParent::Result
{
    switch (msg__.type()) {
    case PClientManager::Msg_Teardown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientManager::Msg_Teardown", OTHER);

            if ((!((this)->RecvTeardown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientManager::Msg_PClientHandleConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientManager::Msg_PClientHandleConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            IPCClientInfo aClientInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClientInfo)))))) {
                FatalError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aClientInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422315085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PClientHandleParent* actor = (this)->AllocPClientHandleParent(aClientInfo);
            if (!actor) {
                NS_WARNING("Cannot bind null PClientHandleParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPClientHandleParent.PutEntry(actor);

            if ((!((this)->RecvPClientHandleConstructor(std::move(actor), std::move(aClientInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientManager::Msg_PClientManagerOpConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientManager::Msg_PClientManagerOpConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            ClientOpConstructorArgs aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'ClientOpConstructorArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClientOpConstructorArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PClientManagerOpParent* actor = (this)->AllocPClientManagerOpParent(aArgs);
            if (!actor) {
                NS_WARNING("Cannot bind null PClientManagerOpParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPClientManagerOpParent.PutEntry(actor);

            if ((!((this)->RecvPClientManagerOpConstructor(std::move(actor), std::move(aArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientManager::Msg_PClientSourceConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientManager::Msg_PClientSourceConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            ClientSourceConstructorArgs aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'ClientSourceConstructorArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClientSourceConstructorArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PClientSourceParent* actor = (this)->AllocPClientSourceParent(aArgs);
            if (!actor) {
                NS_WARNING("Cannot bind null PClientSourceParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPClientSourceParent.PutEntry(actor);

            if ((!((this)->RecvPClientSourceConstructor(std::move(actor), std::move(aArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientManager::Reply_PClientNavigateOpConstructor__ID:
        {
            return MsgProcessed;
        }
    case PClientManager::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PClientManagerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PClientManagerParent::Result
{
    return MsgNotKnown;
}

auto PClientManagerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PClientManagerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PClientManagerParent::ClearSubtree() -> void
{
    for (auto it = mManagedPClientHandleParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientHandleParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientHandleParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientHandleParent.Clear();

    for (auto it = mManagedPClientManagerOpParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientManagerOpParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientManagerOpParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientManagerOpParent.Clear();

    for (auto it = mManagedPClientNavigateOpParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientNavigateOpParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientNavigateOpParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientNavigateOpParent.Clear();

    for (auto it = mManagedPClientSourceParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientSourceParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientSourceParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientSourceParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PClientManagerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PClientManagerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PClientManager", PClientManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PClientManagerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
