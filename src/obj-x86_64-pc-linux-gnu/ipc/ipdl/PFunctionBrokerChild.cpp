//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PFunctionBrokerChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {


auto PFunctionBrokerChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PFunctionBrokerChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PFunctionBrokerChild::EnteredCxxStack() -> void
{
}

auto PFunctionBrokerChild::ExitedCxxStack() -> void
{
}

auto PFunctionBrokerChild::EnteredCall() -> void
{
}

auto PFunctionBrokerChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PFunctionBrokerChild::PFunctionBrokerChild() :
    mozilla::ipc::IToplevelProtocol("PFunctionBrokerChild", PFunctionBrokerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PFunctionBrokerChild);
}

PFunctionBrokerChild::~PFunctionBrokerChild()
{
    MOZ_COUNT_DTOR(PFunctionBrokerChild);
}

auto PFunctionBrokerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PFunctionBrokerChild::SendBrokerFunction(
        const FunctionHookId& aFunctionId,
        const IpdlTuple& aFunctionParams,
        IpdlTuple* aFunctionRet) -> bool
{
    IPC::Message* msg__ = PFunctionBroker::Msg_BrokerFunction(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFunctionId);
    // Sentinel = 'aFunctionId'
    (msg__)->WriteSentinel(435487829);
    WriteIPDLParam(msg__, this, aFunctionParams);
    // Sentinel = 'aFunctionParams'
    (msg__)->WriteSentinel(798754316);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PFunctionBrokerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PFunctionBrokerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PFunctionBroker::Msg_BrokerFunction", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PFunctionBroker::Msg_BrokerFunction", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PFunctionBrokerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PFunctionBrokerChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aFunctionRet)))) {
        FatalError("Error deserializing 'IpdlTuple'");
        return false;
    }
    // Sentinel = 'aFunctionRet'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 517670099)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'IpdlTuple'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PFunctionBrokerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PFunctionBrokerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PFunctionBrokerChild::OnMessageReceived(const Message& msg__) -> PFunctionBrokerChild::Result
{
    switch (msg__.type()) {
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PFunctionBrokerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PFunctionBrokerChild::Result
{
    return MsgNotKnown;
}

auto PFunctionBrokerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PFunctionBrokerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PFunctionBrokerChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PFunctionBrokerChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PFunctionBrokerChild::ClearSubtree() -> void
{
}



} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PFunctionBrokerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::plugins::PFunctionBrokerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PFunctionBroker", PFunctionBrokerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::plugins::PFunctionBrokerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
