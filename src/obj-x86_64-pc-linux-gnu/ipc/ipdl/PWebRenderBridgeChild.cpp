//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PWebRenderBridgeChild.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/WebRenderBridgeChild.h"
#include "mozilla/layers/WebRenderMessageUtils.h"

#include "mozilla/layers/PCompositorBridgeChild.h"
#include "mozilla/layers/PTextureChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PWebRenderBridgeChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PWebRenderBridgeChild::PWebRenderBridgeChild() :
    mozilla::ipc::IProtocol(PWebRenderBridgeMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PWebRenderBridgeChild);
}

PWebRenderBridgeChild::~PWebRenderBridgeChild()
{
    MOZ_COUNT_DTOR(PWebRenderBridgeChild);
}

auto PWebRenderBridgeChild::Manager() const -> PCompositorBridgeChild*
{
    return static_cast<PCompositorBridgeChild*>(IProtocol::Manager());
}

auto PWebRenderBridgeChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebRenderBridgeChild::SendEnsureConnected(
        TextureFactoryIdentifier* textureFactoryIdentifier,
        MaybeIdNamespace* maybeIdNamespace,
        nsCString* error) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_EnsureConnected(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_EnsureConnected", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_EnsureConnected", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, textureFactoryIdentifier)))) {
        FatalError("Error deserializing 'TextureFactoryIdentifier'");
        return false;
    }
    // Sentinel = 'textureFactoryIdentifier'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 2096630253)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'TextureFactoryIdentifier'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, maybeIdNamespace)))) {
        FatalError("Error deserializing 'MaybeIdNamespace'");
        return false;
    }
    // Sentinel = 'maybeIdNamespace'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 895092297)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'MaybeIdNamespace'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, error)))) {
        FatalError("Error deserializing 'nsCString'");
        return false;
    }
    // Sentinel = 'error'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107741739)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebRenderBridgeChild::SendNewCompositable(
        const CompositableHandle& handle,
        const TextureInfo& info) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_NewCompositable(Id());

    WriteIPDLParam(msg__, this, handle);
    // Sentinel = 'handle'
    (msg__)->WriteSentinel(142344813);
    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_NewCompositable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendReleaseCompositable(const CompositableHandle& compositable) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_ReleaseCompositable(Id());

    WriteIPDLParam(msg__, this, compositable);
    // Sentinel = 'compositable'
    (msg__)->WriteSentinel(551879939);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ReleaseCompositable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendDeleteCompositorAnimations(const nsTArray<uint64_t>& aIds) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_DeleteCompositorAnimations(Id());

    WriteIPDLParam(msg__, this, aIds);
    // Sentinel = 'aIds'
    (msg__)->WriteSentinel(60686722);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_DeleteCompositorAnimations", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendSetDisplayList(
        DisplayListData&& displayList,
        const nsTArray<OpDestroy>& toDestroy,
        const uint64_t& fwdTransactionId,
        const TransactionId& transactionId,
        const bool& containsSVGGroup,
        const VsyncId& vsyncId,
        const TimeStamp& vsyncStartTime,
        const TimeStamp& refreshStartTime,
        const TimeStamp& txnStartTime,
        const nsCString& txnURL,
        const TimeStamp& fwdTime,
        const nsTArray<CompositionPayload>& payloads) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_SetDisplayList(Id());

    WriteIPDLParam(msg__, this, std::move(displayList));
    // Sentinel = 'displayList'
    (msg__)->WriteSentinel(458753171);
    WriteIPDLParam(msg__, this, toDestroy);
    // Sentinel = 'toDestroy'
    (msg__)->WriteSentinel(311100366);
    WriteIPDLParam(msg__, this, fwdTransactionId);
    // Sentinel = 'fwdTransactionId'
    (msg__)->WriteSentinel(930940533);
    WriteIPDLParam(msg__, this, transactionId);
    // Sentinel = 'transactionId'
    (msg__)->WriteSentinel(642319700);
    WriteIPDLParam(msg__, this, containsSVGGroup);
    // Sentinel = 'containsSVGGroup'
    (msg__)->WriteSentinel(914163293);
    WriteIPDLParam(msg__, this, vsyncId);
    // Sentinel = 'vsyncId'
    (msg__)->WriteSentinel(203883233);
    WriteIPDLParam(msg__, this, vsyncStartTime);
    // Sentinel = 'vsyncStartTime'
    (msg__)->WriteSentinel(747177425);
    WriteIPDLParam(msg__, this, refreshStartTime);
    // Sentinel = 'refreshStartTime'
    (msg__)->WriteSentinel(941753997);
    WriteIPDLParam(msg__, this, txnStartTime);
    // Sentinel = 'txnStartTime'
    (msg__)->WriteSentinel(551290104);
    WriteIPDLParam(msg__, this, txnURL);
    // Sentinel = 'txnURL'
    (msg__)->WriteSentinel(146604622);
    WriteIPDLParam(msg__, this, fwdTime);
    // Sentinel = 'fwdTime'
    (msg__)->WriteSentinel(190382801);
    WriteIPDLParam(msg__, this, payloads);
    // Sentinel = 'payloads'
    (msg__)->WriteSentinel(255525726);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetDisplayList", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendEmptyTransaction(
        const FocusTarget& focusTarget,
        MaybeTransactionData&& transationData,
        const nsTArray<OpDestroy>& toDestroy,
        const uint64_t& fwdTransactionId,
        const TransactionId& transactionId,
        const VsyncId& vsyncId,
        const TimeStamp& vsyncStartTime,
        const TimeStamp& refreshStartTime,
        const TimeStamp& txnStartTime,
        const nsCString& txnURL,
        const TimeStamp& fwdTime,
        const nsTArray<CompositionPayload>& payloads) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_EmptyTransaction(Id());

    WriteIPDLParam(msg__, this, focusTarget);
    // Sentinel = 'focusTarget'
    (msg__)->WriteSentinel(455279752);
    WriteIPDLParam(msg__, this, std::move(transationData));
    // Sentinel = 'transationData'
    (msg__)->WriteSentinel(739771838);
    WriteIPDLParam(msg__, this, toDestroy);
    // Sentinel = 'toDestroy'
    (msg__)->WriteSentinel(311100366);
    WriteIPDLParam(msg__, this, fwdTransactionId);
    // Sentinel = 'fwdTransactionId'
    (msg__)->WriteSentinel(930940533);
    WriteIPDLParam(msg__, this, transactionId);
    // Sentinel = 'transactionId'
    (msg__)->WriteSentinel(642319700);
    WriteIPDLParam(msg__, this, vsyncId);
    // Sentinel = 'vsyncId'
    (msg__)->WriteSentinel(203883233);
    WriteIPDLParam(msg__, this, vsyncStartTime);
    // Sentinel = 'vsyncStartTime'
    (msg__)->WriteSentinel(747177425);
    WriteIPDLParam(msg__, this, refreshStartTime);
    // Sentinel = 'refreshStartTime'
    (msg__)->WriteSentinel(941753997);
    WriteIPDLParam(msg__, this, txnStartTime);
    // Sentinel = 'txnStartTime'
    (msg__)->WriteSentinel(551290104);
    WriteIPDLParam(msg__, this, txnURL);
    // Sentinel = 'txnURL'
    (msg__)->WriteSentinel(146604622);
    WriteIPDLParam(msg__, this, fwdTime);
    // Sentinel = 'fwdTime'
    (msg__)->WriteSentinel(190382801);
    WriteIPDLParam(msg__, this, payloads);
    // Sentinel = 'payloads'
    (msg__)->WriteSentinel(255525726);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_EmptyTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendSetFocusTarget(const FocusTarget& focusTarget) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_SetFocusTarget(Id());

    WriteIPDLParam(msg__, this, focusTarget);
    // Sentinel = 'focusTarget'
    (msg__)->WriteSentinel(455279752);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetFocusTarget", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendUpdateResources(
        const IdNamespace& aIdNamespace,
        const nsTArray<OpUpdateResource>& aResourceUpdates,
        const nsTArray<RefCountedShmem>& aSmallShmems,
        nsTArray<Shmem>&& aLargeShmems) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_UpdateResources(Id());

    WriteIPDLParam(msg__, this, aIdNamespace);
    // Sentinel = 'aIdNamespace'
    (msg__)->WriteSentinel(487523484);
    WriteIPDLParam(msg__, this, aResourceUpdates);
    // Sentinel = 'aResourceUpdates'
    (msg__)->WriteSentinel(916522624);
    WriteIPDLParam(msg__, this, aSmallShmems);
    // Sentinel = 'aSmallShmems'
    (msg__)->WriteSentinel(508691656);
    WriteIPDLParam(msg__, this, std::move(aLargeShmems));
    // Sentinel = 'aLargeShmems'
    (msg__)->WriteSentinel(499975354);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_UpdateResources", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendParentCommands(const nsTArray<WebRenderParentCommand>& commands) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_ParentCommands(Id());

    WriteIPDLParam(msg__, this, commands);
    // Sentinel = 'commands'
    (msg__)->WriteSentinel(249627475);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ParentCommands", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendGetSnapshot(
        PTextureChild* texture,
        bool* aNeedsYFlip) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_GetSnapshot(Id());

    MOZ_RELEASE_ASSERT(texture, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, texture);
    // Sentinel = 'texture'
    (msg__)->WriteSentinel(207684370);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_GetSnapshot", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_GetSnapshot", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aNeedsYFlip)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aNeedsYFlip'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 415237173)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebRenderBridgeChild::SendSetLayersObserverEpoch(const LayersObserverEpoch& childEpoch) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_SetLayersObserverEpoch(Id());

    WriteIPDLParam(msg__, this, childEpoch);
    // Sentinel = 'childEpoch'
    (msg__)->WriteSentinel(364381172);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetLayersObserverEpoch", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendClearCachedResources() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_ClearCachedResources(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ClearCachedResources", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendInvalidateRenderedFrame() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_InvalidateRenderedFrame(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_InvalidateRenderedFrame", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendScheduleComposite() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_ScheduleComposite(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ScheduleComposite", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendCapture() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_Capture(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_Capture", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendToggleCaptureSequence() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_ToggleCaptureSequence(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ToggleCaptureSequence", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendSyncWithCompositor() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_SyncWithCompositor(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SyncWithCompositor", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_SyncWithCompositor", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PWebRenderBridgeChild::SendSetConfirmedTargetAPZC(
        const uint64_t& aInputBlockId,
        const nsTArray<ScrollableLayerGuid>& aTargets) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_SetConfirmedTargetAPZC(Id());

    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aTargets);
    // Sentinel = 'aTargets'
    (msg__)->WriteSentinel(235012924);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetConfirmedTargetAPZC", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendSetTestSampleTime(const TimeStamp& sampleTime) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_SetTestSampleTime(Id());

    WriteIPDLParam(msg__, this, sampleTime);
    // Sentinel = 'sampleTime'
    (msg__)->WriteSentinel(380896274);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetTestSampleTime", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_SetTestSampleTime", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PWebRenderBridgeChild::SendLeaveTestMode() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_LeaveTestMode(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_LeaveTestMode", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_LeaveTestMode", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PWebRenderBridgeChild::SendGetAnimationValue(
        const uint64_t& aCompositorAnimationsId,
        OMTAValue* value) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_GetAnimationValue(Id());

    WriteIPDLParam(msg__, this, aCompositorAnimationsId);
    // Sentinel = 'aCompositorAnimationsId'
    (msg__)->WriteSentinel(1874397521);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_GetAnimationValue", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_GetAnimationValue", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'OMTAValue'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'OMTAValue'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebRenderBridgeChild::SendSetAsyncScrollOffset(
        const ViewID& scrollId,
        const float& x,
        const float& y) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_SetAsyncScrollOffset(Id());

    WriteIPDLParam(msg__, this, scrollId);
    // Sentinel = 'scrollId'
    (msg__)->WriteSentinel(253100861);
    WriteIPDLParam(msg__, this, x);
    // Sentinel = 'x'
    (msg__)->WriteSentinel(7929977);
    WriteIPDLParam(msg__, this, y);
    // Sentinel = 'y'
    (msg__)->WriteSentinel(7995514);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetAsyncScrollOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_SetAsyncScrollOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PWebRenderBridgeChild::SendSetAsyncZoom(
        const ViewID& scrollId,
        const float& zoom) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_SetAsyncZoom(Id());

    WriteIPDLParam(msg__, this, scrollId);
    // Sentinel = 'scrollId'
    (msg__)->WriteSentinel(253100861);
    WriteIPDLParam(msg__, this, zoom);
    // Sentinel = 'zoom'
    (msg__)->WriteSentinel(75760070);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetAsyncZoom", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_SetAsyncZoom", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PWebRenderBridgeChild::SendFlushApzRepaints() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_FlushApzRepaints(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_FlushApzRepaints", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendGetAPZTestData(APZTestData* data) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_GetAPZTestData(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_GetAPZTestData", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_GetAPZTestData", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, data)))) {
        FatalError("Error deserializing 'APZTestData'");
        return false;
    }
    // Sentinel = 'data'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'APZTestData'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebRenderBridgeChild::SendGetFrameUniformity(FrameUniformityData* data) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_GetFrameUniformity(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_GetFrameUniformity", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_GetFrameUniformity", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, data)))) {
        FatalError("Error deserializing 'FrameUniformityData'");
        return false;
    }
    // Sentinel = 'data'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'FrameUniformityData'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PWebRenderBridgeChild::SendShutdown() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeChild::SendShutdownSync() -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_ShutdownSync(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ShutdownSync", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PWebRenderBridge::Msg_ShutdownSync", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PWebRenderBridgeChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebRenderBridgeChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebRenderBridgeChild::OnMessageReceived(const Message& msg__) -> PWebRenderBridgeChild::Result
{
    switch (msg__.type()) {
    case PWebRenderBridge::Msg_WrUpdated__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_WrUpdated", OTHER);

            PickleIterator iter__{msg__};
            IdNamespace aNewIdNamespace{};
            TextureFactoryIdentifier textureFactoryIdentifier{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNewIdNamespace)))))) {
                FatalError("Error deserializing 'IdNamespace'");
                return MsgValueError;
            }
            // Sentinel = 'aNewIdNamespace'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 757990854)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IdNamespace'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(textureFactoryIdentifier)))))) {
                FatalError("Error deserializing 'TextureFactoryIdentifier'");
                return MsgValueError;
            }
            // Sentinel = 'textureFactoryIdentifier'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2096630253)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextureFactoryIdentifier'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebRenderBridgeChild*>(this))->RecvWrUpdated(std::move(aNewIdNamespace), std::move(textureFactoryIdentifier))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_WrReleasedImages__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_WrReleasedImages", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<ExternalImageKeyPair> pairs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pairs)))))) {
                FatalError("Error deserializing 'ExternalImageKeyPair[]'");
                return MsgValueError;
            }
            // Sentinel = 'pairs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105579040)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ExternalImageKeyPair[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebRenderBridgeChild*>(this))->RecvWrReleasedImages(std::move(pairs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWebRenderBridgeChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWebRenderBridge'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWebRenderBridge'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebRenderBridge'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebRenderBridgeChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWebRenderBridgeMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebRenderBridgeChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebRenderBridgeChild::Result
{
    return MsgNotKnown;
}

auto PWebRenderBridgeChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebRenderBridgeChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebRenderBridgeChild::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PWebRenderBridgeChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PWebRenderBridgeChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebRenderBridge", PWebRenderBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PWebRenderBridgeChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
