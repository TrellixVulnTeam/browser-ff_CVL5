//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBrowserBridgeParent.h"
#include "ipc/nsGUIEventIPC.h"
#include "mozilla/LayoutMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/BrowserBridgeParent.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/TabMessageUtils.h"
#include "nsDocShellLoadState.h"
#include "nsRect.h"

#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/a11y/PDocAccessibleParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBrowserBridgeParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBrowserBridgeParent::PBrowserBridgeParent() :
    mozilla::ipc::IProtocol(PBrowserBridgeMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PBrowserBridgeParent);
}

PBrowserBridgeParent::~PBrowserBridgeParent()
{
    MOZ_COUNT_DTOR(PBrowserBridgeParent);
}

auto PBrowserBridgeParent::Manager() const -> PBrowserParent*
{
    return static_cast<PBrowserParent*>(IProtocol::Manager());
}

auto PBrowserBridgeParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PBrowserBridgeParent::SendRequestFocus(
        const bool& canRaise,
        const CallerType& aCallerType) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_RequestFocus(Id());

    WriteIPDLParam(msg__, this, canRaise);
    // Sentinel = 'canRaise'
    (msg__)->WriteSentinel(234816295);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_RequestFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeParent::SendMoveFocus(
        const bool& forward,
        const bool& forDocumentNavigation) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_MoveFocus(Id());

    WriteIPDLParam(msg__, this, forward);
    // Sentinel = 'forward'
    (msg__)->WriteSentinel(200016630);
    WriteIPDLParam(msg__, this, forDocumentNavigation);
    // Sentinel = 'forDocumentNavigation'
    (msg__)->WriteSentinel(1571555479);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_MoveFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeParent::SendSetEmbeddedDocAccessibleCOMProxy(const IDispatchHolder& aCOMProxy) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_SetEmbeddedDocAccessibleCOMProxy(Id());

    WriteIPDLParam(msg__, this, aCOMProxy);
    // Sentinel = 'aCOMProxy'
    (msg__)->WriteSentinel(261030755);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_SetEmbeddedDocAccessibleCOMProxy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeParent::SendMaybeFireEmbedderLoadEvents(const EmbedderElementEventType& aFireEventAtEmbeddingElement) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_MaybeFireEmbedderLoadEvents(Id());

    WriteIPDLParam(msg__, this, aFireEventAtEmbeddingElement);
    // Sentinel = 'aFireEventAtEmbeddingElement'
    (msg__)->WriteSentinel(2607483624);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_MaybeFireEmbedderLoadEvents", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeParent::SendScrollRectIntoView(
        const nsRect& aRect,
        const ScrollAxis& aVertical,
        const ScrollAxis& aHorizontal,
        const ScrollFlags& aScrollFlags,
        const int32_t& aAppUnitsPerDevPixel) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_ScrollRectIntoView(Id());

    WriteIPDLParam(msg__, this, aRect);
    // Sentinel = 'aRect'
    (msg__)->WriteSentinel(94044656);
    WriteIPDLParam(msg__, this, aVertical);
    // Sentinel = 'aVertical'
    (msg__)->WriteSentinel(298845084);
    WriteIPDLParam(msg__, this, aHorizontal);
    // Sentinel = 'aHorizontal'
    (msg__)->WriteSentinel(447022220);
    WriteIPDLParam(msg__, this, aScrollFlags);
    // Sentinel = 'aScrollFlags'
    (msg__)->WriteSentinel(510592190);
    WriteIPDLParam(msg__, this, aAppUnitsPerDevPixel);
    // Sentinel = 'aAppUnitsPerDevPixel'
    (msg__)->WriteSentinel(1366296542);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_ScrollRectIntoView", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeParent::SendSubFrameCrashed() -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_SubFrameCrashed(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_SubFrameCrashed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeParent::SendIntrinsicSizeOrRatioChanged(
        const mozilla::Maybe<IntrinsicSize>& aIntrinsicSize,
        const mozilla::Maybe<AspectRatio>& aIntrinsicRatio) -> bool
{
    IPC::Message* msg__ = PBrowserBridge::Msg_IntrinsicSizeOrRatioChanged(Id());

    WriteIPDLParam(msg__, this, aIntrinsicSize);
    // Sentinel = 'aIntrinsicSize'
    (msg__)->WriteSentinel(708052400);
    WriteIPDLParam(msg__, this, aIntrinsicRatio);
    // Sentinel = 'aIntrinsicRatio'
    (msg__)->WriteSentinel(807667220);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowserBridge::Msg_IntrinsicSizeOrRatioChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserBridgeParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBrowserBridgeParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBrowserBridgeParent::OnMessageReceived(const Message& msg__) -> PBrowserBridgeParent::Result
{
    switch (msg__.type()) {
    case PBrowserBridge::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBrowserBridgeParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBrowserBridge'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBrowserBridge'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowserBridge'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBrowserBridgeMsgStart, actor);

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_LoadURL__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_LoadURL", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsDocShellLoadState> aLoadState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadState)))))) {
                FatalError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 349570019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvLoadURL(aLoadState)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_ResumeLoad__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_ResumeLoad", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aPendingSwitchID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPendingSwitchID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPendingSwitchID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 892798502)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvResumeLoad(std::move(aPendingSwitchID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_Show__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_Show", OTHER);

            PickleIterator iter__{msg__};
            OwnerShowInfo info{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'OwnerShowInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OwnerShowInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvShow(std::move(info))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_ScrollbarPreferenceChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_ScrollbarPreferenceChanged", OTHER);

            PickleIterator iter__{msg__};
            ScrollbarPreference pref{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pref)))))) {
                FatalError("Error deserializing 'ScrollbarPreference'");
                return MsgValueError;
            }
            // Sentinel = 'pref'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 71958958)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollbarPreference'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvScrollbarPreferenceChanged(std::move(pref))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_UpdateDimensions__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_UpdateDimensions", OTHER);

            PickleIterator iter__{msg__};
            nsIntRect rect{};
            ScreenIntSize size{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rect)))))) {
                FatalError("Error deserializing 'nsIntRect'");
                return MsgValueError;
            }
            // Sentinel = 'rect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70582703)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIntRect'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(size)))))) {
                FatalError("Error deserializing 'ScreenIntSize'");
                return MsgValueError;
            }
            // Sentinel = 'size'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73662908)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenIntSize'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvUpdateDimensions(std::move(rect), std::move(size))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_RenderLayers__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_RenderLayers", OTHER);

            PickleIterator iter__{msg__};
            bool aEnabled{};
            LayersObserverEpoch aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 224789261)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvRenderLayers(std::move(aEnabled), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_UpdateEffects__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_UpdateEffects", OTHER);

            PickleIterator iter__{msg__};
            EffectsInfo aEffects{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEffects)))))) {
                FatalError("Error deserializing 'EffectsInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aEffects'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 225248034)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'EffectsInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvUpdateEffects(std::move(aEffects))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_NavigateByKey__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_NavigateByKey", OTHER);

            PickleIterator iter__{msg__};
            bool aForward{};
            bool aForDocumentNavigation{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForward)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aForward'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236258103)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForDocumentNavigation)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aForDocumentNavigation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1667434712)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvNavigateByKey(std::move(aForward), std::move(aForDocumentNavigation))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_DispatchSynthesizedMouseEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_DispatchSynthesizedMouseEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvDispatchSynthesizedMouseEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_Activate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_Activate", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvActivate(std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_Deactivate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_Deactivate", OTHER);

            PickleIterator iter__{msg__};
            bool aWindowLowering{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowLowering)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowLowering'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 809502241)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvDeactivate(std::move(aWindowLowering), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_SetIsUnderHiddenEmbedderElement__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_SetIsUnderHiddenEmbedderElement", OTHER);

            PickleIterator iter__{msg__};
            bool aIsUnderHiddenEmbedderElement{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsUnderHiddenEmbedderElement)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsUnderHiddenEmbedderElement'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2795113290)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvSetIsUnderHiddenEmbedderElement(std::move(aIsUnderHiddenEmbedderElement))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_WillChangeProcess__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_WillChangeProcess", OTHER);

            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvWillChangeProcess()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowserBridge::Msg_SetEmbedderAccessible__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowserBridge::Msg_SetEmbedderAccessible", OTHER);

            PickleIterator iter__{msg__};
            PDocAccessibleParent* aDoc{};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDoc)))))) {
                FatalError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            if ((!((*((&(aDoc))))))) {
                FatalError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            // Sentinel = 'aDoc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60096888)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserBridgeParent*>(this))->RecvSetEmbedderAccessible(std::move(aDoc), std::move(aID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBrowserBridgeParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBrowserBridgeParent::Result
{
    return MsgNotKnown;
}

auto PBrowserBridgeParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBrowserBridgeParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBrowserBridgeParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBrowserBridgeParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBrowserBridgeParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBrowserBridge", PBrowserBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBrowserBridgeParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
