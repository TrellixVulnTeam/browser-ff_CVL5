//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PWindowGlobalParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/FeaturePolicyUtils.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/WindowGlobalParent.h"
#include "mozilla/ipc/TransportSecurityInfoUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "nsDocShellLoadState.h"
#include "nsITransportSecurityInfo.h"

#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/dom/PInProcessParent.h"
#include "mozilla/dom/PBrowserBridgeParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PWindowGlobalParent::PWindowGlobalParent() :
    mozilla::ipc::IProtocol(PWindowGlobalMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWindowGlobalParent);
}

PWindowGlobalParent::~PWindowGlobalParent()
{
    MOZ_COUNT_DTOR(PWindowGlobalParent);
}

auto PWindowGlobalParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWindowGlobalParent::Send__delete__(PWindowGlobalParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PWindowGlobal::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PWindowGlobalMsgStart, actor);
    return sendok__;
}

auto PWindowGlobalParent::SendMakeFrameLocal(
        const MaybeDiscardedBrowsingContext& aFrameContext,
        const uint64_t& aSwitchId) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_MakeFrameLocal(Id());

    WriteIPDLParam(msg__, this, aFrameContext);
    // Sentinel = 'aFrameContext'
    (msg__)->WriteSentinel(585565490);
    WriteIPDLParam(msg__, this, aSwitchId);
    // Sentinel = 'aSwitchId'
    (msg__)->WriteSentinel(297730945);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_MakeFrameLocal", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalParent::SendMakeFrameRemote(
        const MaybeDiscardedBrowsingContext& aFrameContext,
        ManagedEndpoint<mozilla::dom::PBrowserBridgeChild>&& aEndpoint,
        const TabId& aTabId,
        const LayersId& aLayersId,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWindowGlobal::Msg_MakeFrameRemote(Id());

    WriteIPDLParam(msg__, this, aFrameContext);
    // Sentinel = 'aFrameContext'
    (msg__)->WriteSentinel(585565490);
    WriteIPDLParam(msg__, this, std::move(aEndpoint));
    // Sentinel = 'aEndpoint'
    (msg__)->WriteSentinel(292225955);
    WriteIPDLParam(msg__, this, aTabId);
    // Sentinel = 'aTabId'
    (msg__)->WriteSentinel(126878246);
    WriteIPDLParam(msg__, this, aLayersId);
    // Sentinel = 'aLayersId'
    (msg__)->WriteSentinel(291439487);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_MakeFrameRemote", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWindowGlobalParent::SendMakeFrameRemote(
        const MaybeDiscardedBrowsingContext& aFrameContext,
        ManagedEndpoint<mozilla::dom::PBrowserBridgeChild>&& aEndpoint,
        const TabId& aTabId,
        const LayersId& aLayersId) -> RefPtr<MakeFrameRemotePromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendMakeFrameRemote(std::move(aFrameContext), std::move(aEndpoint), std::move(aTabId), std::move(aLayersId), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWindowGlobalParent::SendDrawSnapshot(
        const mozilla::Maybe<IntRect>& aRect,
        const float& aScale,
        const nscolor& aBackgroundColor,
        const uint32_t& aFlags,
        mozilla::ipc::ResolveCallback<PaintFragment>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWindowGlobal::Msg_DrawSnapshot(Id());

    WriteIPDLParam(msg__, this, aRect);
    // Sentinel = 'aRect'
    (msg__)->WriteSentinel(94044656);
    WriteIPDLParam(msg__, this, aScale);
    // Sentinel = 'aScale'
    (msg__)->WriteSentinel(131531338);
    WriteIPDLParam(msg__, this, aBackgroundColor);
    // Sentinel = 'aBackgroundColor'
    (msg__)->WriteSentinel(884999777);
    WriteIPDLParam(msg__, this, aFlags);
    // Sentinel = 'aFlags'
    (msg__)->WriteSentinel(129892943);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_DrawSnapshot", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWindowGlobalParent::SendDrawSnapshot(
        const mozilla::Maybe<IntRect>& aRect,
        const float& aScale,
        const nscolor& aBackgroundColor,
        const uint32_t& aFlags) -> RefPtr<DrawSnapshotPromise>
{
    RefPtr<MozPromise<PaintFragment, ResponseRejectReason, true>::Private> promise__ = new MozPromise<PaintFragment, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendDrawSnapshot(std::move(aRect), std::move(aScale), std::move(aBackgroundColor), std::move(aFlags), [promise__](PaintFragment&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWindowGlobalParent::SendGetSecurityInfo(
        mozilla::ipc::ResolveCallback<mozilla::Maybe<nsCString>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWindowGlobal::Msg_GetSecurityInfo(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_GetSecurityInfo", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWindowGlobalParent::SendGetSecurityInfo() -> RefPtr<GetSecurityInfoPromise>
{
    RefPtr<MozPromise<mozilla::Maybe<nsCString>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<mozilla::Maybe<nsCString>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetSecurityInfo([promise__](mozilla::Maybe<nsCString>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWindowGlobalParent::SendDispatchSecurityPolicyViolation(const nsString& aViolationEventJSON) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_DispatchSecurityPolicyViolation(Id());

    WriteIPDLParam(msg__, this, aViolationEventJSON);
    // Sentinel = 'aViolationEventJSON'
    (msg__)->WriteSentinel(1266878291);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_DispatchSecurityPolicyViolation", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalParent::SendSaveStorageAccessPermissionGranted() -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_SaveStorageAccessPermissionGranted(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_SaveStorageAccessPermissionGranted", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalParent::SendAddBlockedFrameNodeByClassifier(const MaybeDiscardedBrowsingContext& aNode) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_AddBlockedFrameNodeByClassifier(Id());

    WriteIPDLParam(msg__, this, aNode);
    // Sentinel = 'aNode'
    (msg__)->WriteSentinel(94110184);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_AddBlockedFrameNodeByClassifier", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalParent::SendResetScalingZoom() -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_ResetScalingZoom(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_ResetScalingZoom", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalParent::SendSetContainerFeaturePolicy(FeaturePolicy* aContainerFeaturePolicy) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_SetContainerFeaturePolicy(Id());

    WriteIPDLParam(msg__, this, aContainerFeaturePolicy);
    // Sentinel = 'aContainerFeaturePolicy'
    (msg__)->WriteSentinel(1834158401);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_SetContainerFeaturePolicy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalParent::SendRawMessage(
        const JSActorMessageMeta& aMetadata,
        const mozilla::Maybe<ClonedMessageData>& aData,
        const mozilla::Maybe<ClonedMessageData>& aStack) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_RawMessage(Id());

    WriteIPDLParam(msg__, this, aMetadata);
    // Sentinel = 'aMetadata'
    (msg__)->WriteSentinel(288752515);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);
    WriteIPDLParam(msg__, this, aStack);
    // Sentinel = 'aStack'
    (msg__)->WriteSentinel(135201368);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_RawMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWindowGlobalParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWindowGlobalParent::OnMessageReceived(const Message& msg__) -> PWindowGlobalParent::Result
{
    switch (msg__.type()) {
    case PWindowGlobal::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PWindowGlobal::Reply_MakeFrameRemote__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_MakeFrameRemote", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool success{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(success)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'success'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200082170)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(success));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PWindowGlobal::Reply_DrawSnapshot__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_DrawSnapshot", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<PaintFragment> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                PaintFragment retval{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(retval)))))) {
                    FatalError("Error deserializing 'PaintFragment'");
                    return MsgValueError;
                }
                // Sentinel = 'retval'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151716495)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'PaintFragment'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(retval));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PWindowGlobal::Reply_GetSecurityInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_GetSecurityInfo", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<mozilla::Maybe<nsCString>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                mozilla::Maybe<nsCString> serializedSecInfo{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(serializedSecInfo)))))) {
                    FatalError("Error deserializing 'nsCString?'");
                    return MsgValueError;
                }
                // Sentinel = 'serializedSecInfo'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1050412756)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsCString?'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(serializedSecInfo));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PWindowGlobal::Msg_RawMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_RawMessage", OTHER);

            PickleIterator iter__{msg__};
            JSActorMessageMeta aMetadata{};
            mozilla::Maybe<ClonedMessageData> aData{};
            mozilla::Maybe<ClonedMessageData> aStack{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMetadata)))))) {
                FatalError("Error deserializing 'JSActorMessageMeta'");
                return MsgValueError;
            }
            // Sentinel = 'aMetadata'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 288752515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'JSActorMessageMeta'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStack)))))) {
                FatalError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            // Sentinel = 'aStack'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135201368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvRawMessage(std::move(aMetadata), std::move(aData), std::move(aStack))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_LoadURI__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_LoadURI", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aTargetBC{};
            RefPtr<nsDocShellLoadState> aLoadState{};
            bool aSetNavigating{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTargetBC)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aTargetBC'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 287245134)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadState)))))) {
                FatalError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 349570019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSetNavigating)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aSetNavigating'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 686556566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvLoadURI(std::move(aTargetBC), aLoadState, std::move(aSetNavigating))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_InternalLoad__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_InternalLoad", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsDocShellLoadState> aLoadState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadState)))))) {
                FatalError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 349570019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvInternalLoad(aLoadState)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateDocumentURI__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentURI", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> aUri{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUri)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aUri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64225682)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateDocumentURI(aUri)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateDocumentPrincipal__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentPrincipal", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIPrincipal> aPrincipal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'aPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364381188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateDocumentPrincipal(aPrincipal)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateDocumentHasLoaded__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentHasLoaded", OTHER);

            PickleIterator iter__{msg__};
            bool aDocumentHasLoaded{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDocumentHasLoaded)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aDocumentHasLoaded'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1117259526)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateDocumentHasLoaded(std::move(aDocumentHasLoaded))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateDocumentHasUserInteracted__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentHasUserInteracted", OTHER);

            PickleIterator iter__{msg__};
            bool aDocumentHasUserInteracted{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDocumentHasUserInteracted)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aDocumentHasUserInteracted'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2324695647)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateDocumentHasUserInteracted(std::move(aDocumentHasUserInteracted))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateSandboxFlags__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateSandboxFlags", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aSandboxFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSandboxFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSandboxFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 590611742)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateSandboxFlags(std::move(aSandboxFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateDocumentCspSettings__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentCspSettings", OTHER);

            PickleIterator iter__{msg__};
            bool aBlockAllMixedContent{};
            bool aUpgradeInsecureRequests{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBlockAllMixedContent)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aBlockAllMixedContent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1473906744)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUpgradeInsecureRequests)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aUpgradeInsecureRequests'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2002848196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateDocumentCspSettings(std::move(aBlockAllMixedContent), std::move(aUpgradeInsecureRequests))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateCookieJarSettings__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateCookieJarSettings", OTHER);

            PickleIterator iter__{msg__};
            CookieJarSettingsArgs cookieJarSettings{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cookieJarSettings)))))) {
                FatalError("Error deserializing 'CookieJarSettingsArgs'");
                return MsgValueError;
            }
            // Sentinel = 'cookieJarSettings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1031800553)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CookieJarSettingsArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateCookieJarSettings(std::move(cookieJarSettings))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateDocumentTitle__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentTitle", OTHER);

            PickleIterator iter__{msg__};
            nsString aTitle{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTitle)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aTitle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137167460)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateDocumentTitle(std::move(aTitle))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateDocumentSecurityInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentSecurityInfo", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsITransportSecurityInfo> aSecurityInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSecurityInfo)))))) {
                FatalError("Error deserializing 'nsITransportSecurityInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aSecurityInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 610075974)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsITransportSecurityInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateDocumentSecurityInfo(aSecurityInfo)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_UpdateHttpsOnlyStatus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateHttpsOnlyStatus", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aHttpsOnlyStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHttpsOnlyStatus)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aHttpsOnlyStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 920323739)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvUpdateHttpsOnlyStatus(std::move(aHttpsOnlyStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_SetIsInitialDocument__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_SetIsInitialDocument", OTHER);

            PickleIterator iter__{msg__};
            bool aIsInitialDocument{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsInitialDocument)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsInitialDocument'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1108150055)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvSetIsInitialDocument(std::move(aIsInitialDocument))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_Share__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_Share", OTHER);

            PickleIterator iter__{msg__};
            IPCWebShareData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'IPCWebShareData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCWebShareData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            ShareResolver resolver = [proxy__, seqno__, id__](const nsresult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWindowGlobalParent* self__ = static_cast<PWindowGlobalParent*>(proxy__->Get());

                IPC::Message* reply__ = PWindowGlobal::Reply_Share(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'rv'
                (reply__)->WriteSentinel(22806761);

                if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWindowGlobalParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvShare(std::move(aData), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_GetContentBlockingEvents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_GetContentBlockingEvents", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetContentBlockingEventsResolver resolver = [proxy__, seqno__, id__](const uint32_t& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWindowGlobalParent* self__ = static_cast<PWindowGlobalParent*>(proxy__->Get());

                IPC::Message* reply__ = PWindowGlobal::Reply_GetContentBlockingEvents(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'events'
                (reply__)->WriteSentinel(149619350);

                if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWindowGlobalParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvGetContentBlockingEvents(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_SetClientInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_SetClientInfo", OTHER);

            PickleIterator iter__{msg__};
            IPCClientInfo aClientInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClientInfo)))))) {
                FatalError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aClientInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422315085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvSetClientInfo(std::move(aClientInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_CheckPermitUnload__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_CheckPermitUnload", OTHER);

            PickleIterator iter__{msg__};
            bool aHasInProcessBlocker{};
            XPCOMPermitUnloadAction aAction{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHasInProcessBlocker)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aHasInProcessBlocker'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1345652694)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAction)))))) {
                FatalError("Error deserializing 'XPCOMPermitUnloadAction'");
                return MsgValueError;
            }
            // Sentinel = 'aAction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175768256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'XPCOMPermitUnloadAction'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            CheckPermitUnloadResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWindowGlobalParent* self__ = static_cast<PWindowGlobalParent*>(proxy__->Get());

                IPC::Message* reply__ = PWindowGlobal::Reply_CheckPermitUnload(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'permitUnload'
                (reply__)->WriteSentinel(547816693);

                if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWindowGlobalParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvCheckPermitUnload(std::move(aHasInProcessBlocker), std::move(aAction), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_ExpectPageUseCounters__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_ExpectPageUseCounters", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedWindowContext aTop{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTop)))))) {
                FatalError("Error deserializing 'MaybeDiscardedWindowContext'");
                return MsgValueError;
            }
            // Sentinel = 'aTop'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64094613)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedWindowContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvExpectPageUseCounters(std::move(aTop))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_AccumulatePageUseCounters__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_AccumulatePageUseCounters", OTHER);

            PickleIterator iter__{msg__};
            UseCounters aUseCounters{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUseCounters)))))) {
                FatalError("Error deserializing 'UseCounters'");
                return MsgValueError;
            }
            // Sentinel = 'aUseCounters'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 514131170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UseCounters'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalParent*>(this))->RecvAccumulatePageUseCounters(std::move(aUseCounters))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_Destroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_Destroy", OTHER);

            if ((!((static_cast<WindowGlobalParent*>(this))->RecvDestroy()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWindowGlobalParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWindowGlobalParent::Result
{
    return MsgNotKnown;
}

auto PWindowGlobalParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWindowGlobalParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWindowGlobalParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PWindowGlobalParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PWindowGlobalParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWindowGlobal", PWindowGlobalMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PWindowGlobalParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
