//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gfx/PVRManagerChild.h"
#include "VRManagerChild.h"
#include "VRMessageUtils.h"
#include "gfxVR.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gfx/PVRLayerChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gfx {


auto PVRManagerChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PVRManagerChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PVRManagerChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PVRManagerChild::EnteredCxxStack() -> void
{
}

auto PVRManagerChild::ExitedCxxStack() -> void
{
}

auto PVRManagerChild::EnteredCall() -> void
{
}

auto PVRManagerChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PVRManagerChild::PVRManagerChild() :
    mozilla::ipc::IToplevelProtocol("PVRManagerChild", PVRManagerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PVRManagerChild);
}

PVRManagerChild::~PVRManagerChild()
{
    MOZ_COUNT_DTOR(PVRManagerChild);
}

auto PVRManagerChild::ManagedPVRLayerChild(nsTArray<PVRLayerChild*>& aArr) const -> void
{
    mManagedPVRLayerChild.ToArray(aArr);
}

auto PVRManagerChild::ManagedPVRLayerChild() const -> const ManagedContainer<PVRLayerChild>&
{
    return mManagedPVRLayerChild;
}

auto PVRManagerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPVRLayerChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPVRLayerChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PVRManagerChild::OpenPVRLayerEndpoint(PVRLayerChild* aActor) -> ManagedEndpoint<PVRLayerParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PVRLayerChild actor");
        return ManagedEndpoint<PVRLayerParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPVRLayerChild.PutEntry(aActor);

    return ManagedEndpoint<PVRLayerParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PVRManagerChild::BindPVRLayerEndpoint(
        ManagedEndpoint<PVRLayerChild> aEndpoint,
        PVRLayerChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PVRLayerChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPVRLayerChild.PutEntry(aActor);

    return true;
}

auto PVRManagerChild::SendPVRLayerConstructor(
        const uint32_t& aDisplayID,
        const uint32_t& aGroup) -> PVRLayerChild*
{
    PVRLayerChild* actor = (static_cast<VRManagerChild*>(this))->AllocPVRLayerChild(aDisplayID, aGroup);
    return SendPVRLayerConstructor(actor, aDisplayID, aGroup);
}

auto PVRManagerChild::SendPVRLayerConstructor(
        PVRLayerChild* actor,
        const uint32_t& aDisplayID,
        const uint32_t& aGroup) -> PVRLayerChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PVRLayerChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPVRLayerChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PVRManager::Msg_PVRLayerConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aDisplayID);
    // Sentinel = 'aDisplayID'
    (msg__)->WriteSentinel(354812869);
    WriteIPDLParam(msg__, this, aGroup);
    // Sentinel = 'aGroup'
    (msg__)->WriteSentinel(136184431);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_PVRLayerConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PVRLayerChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PVRLayerMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PVRManagerChild::SendDetectRuntimes() -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_DetectRuntimes(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_DetectRuntimes", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendRefreshDisplays() -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_RefreshDisplays(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_RefreshDisplays", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendSetGroupMask(
        const uint32_t& aDisplayID,
        const uint32_t& aGroupMask) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_SetGroupMask(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aDisplayID);
    // Sentinel = 'aDisplayID'
    (msg__)->WriteSentinel(354812869);
    WriteIPDLParam(msg__, this, aGroupMask);
    // Sentinel = 'aGroupMask'
    (msg__)->WriteSentinel(360842235);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_SetGroupMask", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendSetHaveEventListener(const bool& aHaveEventListener) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_SetHaveEventListener(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aHaveEventListener);
    // Sentinel = 'aHaveEventListener'
    (msg__)->WriteSentinel(1111164718);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_SetHaveEventListener", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendControllerListenerAdded() -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_ControllerListenerAdded(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_ControllerListenerAdded", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendControllerListenerRemoved() -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_ControllerListenerRemoved(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_ControllerListenerRemoved", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendVibrateHaptic(
        const GamepadHandle& aGamepadHandle,
        const uint32_t& aHapticIndex,
        const double& aIntensity,
        const double& aDuration,
        const uint32_t& aPromiseID) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_VibrateHaptic(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGamepadHandle);
    // Sentinel = 'aGamepadHandle'
    (msg__)->WriteSentinel(663618909);
    WriteIPDLParam(msg__, this, aHapticIndex);
    // Sentinel = 'aHapticIndex'
    (msg__)->WriteSentinel(500040883);
    WriteIPDLParam(msg__, this, aIntensity);
    // Sentinel = 'aIntensity'
    (msg__)->WriteSentinel(367854633);
    WriteIPDLParam(msg__, this, aDuration);
    // Sentinel = 'aDuration'
    (msg__)->WriteSentinel(296551336);
    WriteIPDLParam(msg__, this, aPromiseID);
    // Sentinel = 'aPromiseID'
    (msg__)->WriteSentinel(363398094);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_VibrateHaptic", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendStopVibrateHaptic(const GamepadHandle& aGamepadHandle) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_StopVibrateHaptic(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGamepadHandle);
    // Sentinel = 'aGamepadHandle'
    (msg__)->WriteSentinel(663618909);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_StopVibrateHaptic", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendStartVRNavigation(const uint32_t& aDeviceID) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_StartVRNavigation(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aDeviceID);
    // Sentinel = 'aDeviceID'
    (msg__)->WriteSentinel(280429375);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_StartVRNavigation", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendStopVRNavigation(
        const uint32_t& aDeviceID,
        const TimeDuration& aDuration) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_StopVRNavigation(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aDeviceID);
    // Sentinel = 'aDeviceID'
    (msg__)->WriteSentinel(280429375);
    WriteIPDLParam(msg__, this, aDuration);
    // Sentinel = 'aDuration'
    (msg__)->WriteSentinel(296551336);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_StopVRNavigation", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendStartActivity() -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_StartActivity(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_StartActivity", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendStopActivity() -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_StopActivity(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_StopActivity", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendRunPuppet(const nsTArray<uint64_t>& buffer) -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_RunPuppet(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, buffer);
    // Sentinel = 'buffer'
    (msg__)->WriteSentinel(144769659);




    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_RunPuppet", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::SendResetPuppet() -> bool
{
    IPC::Message* msg__ = PVRManager::Msg_ResetPuppet(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRManager::Msg_ResetPuppet", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRManagerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PVRLayerMsgStart:
{
            PVRLayerChild* actor = static_cast<PVRLayerChild*>(aListener);
            auto& container = mManagedPVRLayerChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PVRManagerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PVRLayerMsgStart:
        static_cast<VRManagerChild*>(this)->DeallocPVRLayerChild(static_cast<PVRLayerChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PVRManagerChild::OnMessageReceived(const Message& msg__) -> PVRManagerChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PVRManager::Reply_PVRLayerConstructor__ID:
        {
            return MsgProcessed;
        }
    case PVRManager::Msg_UpdateDisplayInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_UpdateDisplayInfo", OTHER);

            PickleIterator iter__{msg__};
            VRDisplayInfo aDisplayInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDisplayInfo)))))) {
                FatalError("Error deserializing 'VRDisplayInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aDisplayInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 510198980)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VRDisplayInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerChild*>(this))->RecvUpdateDisplayInfo(std::move(aDisplayInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_UpdateRuntimeCapabilities__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_UpdateRuntimeCapabilities", OTHER);

            PickleIterator iter__{msg__};
            VRDisplayCapabilityFlags aCapabilities{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCapabilities)))))) {
                FatalError("Error deserializing 'VRDisplayCapabilityFlags'");
                return MsgValueError;
            }
            // Sentinel = 'aCapabilities'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 584975660)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VRDisplayCapabilityFlags'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerChild*>(this))->RecvUpdateRuntimeCapabilities(std::move(aCapabilities))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_ReplyGamepadVibrateHaptic__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_ReplyGamepadVibrateHaptic", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPromiseID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPromiseID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPromiseID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 363398094)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerChild*>(this))->RecvReplyGamepadVibrateHaptic(std::move(aPromiseID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_NotifyPuppetCommandBufferCompleted__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_NotifyPuppetCommandBufferCompleted", OTHER);

            PickleIterator iter__{msg__};
            bool aSuccess{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSuccess)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aSuccess'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236323643)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<VRManagerChild*>(this))->RecvNotifyPuppetCommandBufferCompleted(std::move(aSuccess))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PVRManager::Msg_NotifyPuppetResetComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRManager::Msg_NotifyPuppetResetComplete", OTHER);

            if ((!((static_cast<VRManagerChild*>(this))->RecvNotifyPuppetResetComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PVRManagerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PVRManagerChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PVRManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRManagerChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PVRManagerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PVRManagerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVRManagerChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRManagerChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRManagerChild::ClearSubtree() -> void
{
    for (auto it = mManagedPVRLayerChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPVRLayerChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPVRLayerChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPVRLayerChild.Clear();

}



} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::PVRManagerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gfx::PVRManagerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PVRManager", PVRManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gfx::PVRManagerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
