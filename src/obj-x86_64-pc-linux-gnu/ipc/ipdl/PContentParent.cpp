//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentParent.h"
#include "ipc/DataStorageIPCUtils.h"
#include "ipc/MediaControlIPC.h"
#include "mozilla/AlertNotificationIPCSerializer.h"
#include "mozilla/AntiTrackingIPCUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/PermissionDelegateIPCUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/chrome/RegistryMessageUtils.h"
#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/CSPMessageUtils.h"
#include "mozilla/dom/ContentParent.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/FeaturePolicyUtils.h"
#include "mozilla/dom/MediaSessionIPCUtils.h"
#include "mozilla/dom/MessagePort.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/dom/SessionHistoryEntry.h"
#include "mozilla/dom/ipc/StructuredCloneData.h"
#include "mozilla/ipc/ByteBufUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "nsDocShellLoadState.h"
#include "nsGeoPositionIPCSerialiser.h"
#include "nsILayoutHistoryState.h"
#include "nsPoint.h"

#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/layers/PCompositorManagerParent.h"
#include "mozilla/dom/PContentPermissionRequestParent.h"
#include "mozilla/dom/PCycleCollectWithLogsParent.h"
#include "mozilla/dom/PExternalHelperAppParent.h"
#include "mozilla/dom/PHandlerServiceParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/hal_sandbox/PHalParent.h"
#include "mozilla/devtools/PHeapSnapshotTempFileHelperParent.h"
#include "mozilla/PProcessHangMonitorParent.h"
#include "mozilla/layers/PImageBridgeParent.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/dom/PLoginReputationParent.h"
#include "mozilla/media/PMediaParent.h"
#include "mozilla/net/PNeckoParent.h"
#include "mozilla/extensions/PStreamFilterParent.h"
#include "mozilla/gmp/PGMPContentParent.h"
#include "mozilla/gmp/PGMPServiceParent.h"
#include "mozilla/plugins/PPluginModuleParent.h"
#include "mozilla/gmp/PGMPParent.h"
#include "mozilla/embedding/PPrintingParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/docshell/POfflineCacheUpdateParent.h"
#include "mozilla/dom/PSpeechSynthesisParent.h"
#include "mozilla/ipc/PTestShellParent.h"
#include "mozilla/PRemoteSpellcheckEngineParent.h"
#include "mozilla/PWebBrowserPersistDocumentParent.h"
#include "mozilla/dom/PWebrtcGlobalParent.h"
#include "mozilla/dom/PWindowGlobalParent.h"
#include "mozilla/dom/PPresentationParent.h"
#include "mozilla/dom/PURLClassifierParent.h"
#include "mozilla/dom/PURLClassifierLocalParent.h"
#include "mozilla/gfx/PVRManagerParent.h"
#include "mozilla/PRemoteDecoderManagerParent.h"
#include "mozilla/PProfilerParent.h"
#include "mozilla/loader/PScriptCacheParent.h"
#include "mozilla/dom/PSessionStorageObserverParent.h"
#include "mozilla/PBenchmarkStorageParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PContentParent::RecvPFileDescriptorSetConstructor(
        PFileDescriptorSetParent* actor,
        const FileDescriptor& fd) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPWebBrowserPersistDocumentConstructor(
        PWebBrowserPersistDocumentParent* actor,
        PBrowserParent* aBrowser,
        const MaybeDiscardedBrowsingContext& aContext) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPRemoteSpellcheckEngineConstructor(PRemoteSpellcheckEngineParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPHalConstructor(PHalParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPHeapSnapshotTempFileHelperConstructor(PHeapSnapshotTempFileHelperParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPNeckoConstructor(PNeckoParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPPrintingConstructor(PPrintingParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPChildToParentStreamConstructor(PChildToParentStreamParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPSpeechSynthesisConstructor(PSpeechSynthesisParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPMediaConstructor(PMediaParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPWebrtcGlobalConstructor(PWebrtcGlobalParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPPresentationConstructor(PPresentationParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPURLClassifierConstructor(
        PURLClassifierParent* actor,
        const Principal& principal,
        bool* success) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPURLClassifierLocalConstructor(
        PURLClassifierLocalParent* actor,
        nsIURI* uri,
        nsTArray<IPCURLClassifierFeature>&& features) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPLoginReputationConstructor(
        PLoginReputationParent* actor,
        nsIURI* formURI) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPSessionStorageObserverConstructor(PSessionStorageObserverParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPBenchmarkStorageConstructor(PBenchmarkStorageParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPExternalHelperAppConstructor(
        PExternalHelperAppParent* actor,
        nsIURI* uri,
        const mozilla::Maybe<LoadInfoArgs>& loadInfoArgs,
        const nsCString& aMimeContentType,
        const nsCString& aContentDisposition,
        const uint32_t& aContentDispositionHint,
        const nsString& aContentDispositionFilename,
        const bool& aForceSave,
        const int64_t& aContentLength,
        const bool& aWasFileChannel,
        nsIURI* aReferrer,
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aShouldCloseWindow) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPHandlerServiceConstructor(PHandlerServiceParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPOfflineCacheUpdateConstructor(
        POfflineCacheUpdateParent* actor,
        nsIURI* manifestURI,
        nsIURI* documentURI,
        const PrincipalInfo& loadingPrincipal,
        const bool& stickDocument,
        const CookieJarSettingsArgs& cookieJarSettings) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::RecvPContentPermissionRequestConstructor(
        PContentPermissionRequestParent* actor,
        nsTArray<PermissionRequest>&& aRequests,
        const Principal& aPrincipal,
        const Principal& aTopLevelPrincipal,
        const bool& aIsHandlingUserInput,
        const bool& aMaybeUnsafePermissionDelegate,
        const TabId& tabId) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PContentParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PContentParent::EnteredCxxStack() -> void
{
}

auto PContentParent::ExitedCxxStack() -> void
{
}

auto PContentParent::EnteredCall() -> void
{
}

auto PContentParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PContentParent::PContentParent() :
    mozilla::ipc::IToplevelProtocol("PContentParent", PContentMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PContentParent);
}

PContentParent::~PContentParent()
{
    MOZ_COUNT_DTOR(PContentParent);
}

auto PContentParent::ManagedPBrowserParent(nsTArray<PBrowserParent*>& aArr) const -> void
{
    mManagedPBrowserParent.ToArray(aArr);
}

auto PContentParent::ManagedPBrowserParent() const -> const ManagedContainer<PBrowserParent>&
{
    return mManagedPBrowserParent;
}

auto PContentParent::ManagedPContentPermissionRequestParent(nsTArray<PContentPermissionRequestParent*>& aArr) const -> void
{
    mManagedPContentPermissionRequestParent.ToArray(aArr);
}

auto PContentParent::ManagedPContentPermissionRequestParent() const -> const ManagedContainer<PContentPermissionRequestParent>&
{
    return mManagedPContentPermissionRequestParent;
}

auto PContentParent::ManagedPCycleCollectWithLogsParent(nsTArray<PCycleCollectWithLogsParent*>& aArr) const -> void
{
    mManagedPCycleCollectWithLogsParent.ToArray(aArr);
}

auto PContentParent::ManagedPCycleCollectWithLogsParent() const -> const ManagedContainer<PCycleCollectWithLogsParent>&
{
    return mManagedPCycleCollectWithLogsParent;
}

auto PContentParent::ManagedPExternalHelperAppParent(nsTArray<PExternalHelperAppParent*>& aArr) const -> void
{
    mManagedPExternalHelperAppParent.ToArray(aArr);
}

auto PContentParent::ManagedPExternalHelperAppParent() const -> const ManagedContainer<PExternalHelperAppParent>&
{
    return mManagedPExternalHelperAppParent;
}

auto PContentParent::ManagedPFileDescriptorSetParent(nsTArray<PFileDescriptorSetParent*>& aArr) const -> void
{
    mManagedPFileDescriptorSetParent.ToArray(aArr);
}

auto PContentParent::ManagedPFileDescriptorSetParent() const -> const ManagedContainer<PFileDescriptorSetParent>&
{
    return mManagedPFileDescriptorSetParent;
}

auto PContentParent::ManagedPHalParent(nsTArray<PHalParent*>& aArr) const -> void
{
    mManagedPHalParent.ToArray(aArr);
}

auto PContentParent::ManagedPHalParent() const -> const ManagedContainer<PHalParent>&
{
    return mManagedPHalParent;
}

auto PContentParent::ManagedPHandlerServiceParent(nsTArray<PHandlerServiceParent*>& aArr) const -> void
{
    mManagedPHandlerServiceParent.ToArray(aArr);
}

auto PContentParent::ManagedPHandlerServiceParent() const -> const ManagedContainer<PHandlerServiceParent>&
{
    return mManagedPHandlerServiceParent;
}

auto PContentParent::ManagedPHeapSnapshotTempFileHelperParent(nsTArray<PHeapSnapshotTempFileHelperParent*>& aArr) const -> void
{
    mManagedPHeapSnapshotTempFileHelperParent.ToArray(aArr);
}

auto PContentParent::ManagedPHeapSnapshotTempFileHelperParent() const -> const ManagedContainer<PHeapSnapshotTempFileHelperParent>&
{
    return mManagedPHeapSnapshotTempFileHelperParent;
}

auto PContentParent::ManagedPRemoteLazyInputStreamParent(nsTArray<PRemoteLazyInputStreamParent*>& aArr) const -> void
{
    mManagedPRemoteLazyInputStreamParent.ToArray(aArr);
}

auto PContentParent::ManagedPRemoteLazyInputStreamParent() const -> const ManagedContainer<PRemoteLazyInputStreamParent>&
{
    return mManagedPRemoteLazyInputStreamParent;
}

auto PContentParent::ManagedPMediaParent(nsTArray<PMediaParent*>& aArr) const -> void
{
    mManagedPMediaParent.ToArray(aArr);
}

auto PContentParent::ManagedPMediaParent() const -> const ManagedContainer<PMediaParent>&
{
    return mManagedPMediaParent;
}

auto PContentParent::ManagedPNeckoParent(nsTArray<PNeckoParent*>& aArr) const -> void
{
    mManagedPNeckoParent.ToArray(aArr);
}

auto PContentParent::ManagedPNeckoParent() const -> const ManagedContainer<PNeckoParent>&
{
    return mManagedPNeckoParent;
}

auto PContentParent::ManagedPOfflineCacheUpdateParent(nsTArray<POfflineCacheUpdateParent*>& aArr) const -> void
{
    mManagedPOfflineCacheUpdateParent.ToArray(aArr);
}

auto PContentParent::ManagedPOfflineCacheUpdateParent() const -> const ManagedContainer<POfflineCacheUpdateParent>&
{
    return mManagedPOfflineCacheUpdateParent;
}

auto PContentParent::ManagedPPrintingParent(nsTArray<PPrintingParent*>& aArr) const -> void
{
    mManagedPPrintingParent.ToArray(aArr);
}

auto PContentParent::ManagedPPrintingParent() const -> const ManagedContainer<PPrintingParent>&
{
    return mManagedPPrintingParent;
}

auto PContentParent::ManagedPChildToParentStreamParent(nsTArray<PChildToParentStreamParent*>& aArr) const -> void
{
    mManagedPChildToParentStreamParent.ToArray(aArr);
}

auto PContentParent::ManagedPChildToParentStreamParent() const -> const ManagedContainer<PChildToParentStreamParent>&
{
    return mManagedPChildToParentStreamParent;
}

auto PContentParent::ManagedPParentToChildStreamParent(nsTArray<PParentToChildStreamParent*>& aArr) const -> void
{
    mManagedPParentToChildStreamParent.ToArray(aArr);
}

auto PContentParent::ManagedPParentToChildStreamParent() const -> const ManagedContainer<PParentToChildStreamParent>&
{
    return mManagedPParentToChildStreamParent;
}

auto PContentParent::ManagedPSpeechSynthesisParent(nsTArray<PSpeechSynthesisParent*>& aArr) const -> void
{
    mManagedPSpeechSynthesisParent.ToArray(aArr);
}

auto PContentParent::ManagedPSpeechSynthesisParent() const -> const ManagedContainer<PSpeechSynthesisParent>&
{
    return mManagedPSpeechSynthesisParent;
}

auto PContentParent::ManagedPTestShellParent(nsTArray<PTestShellParent*>& aArr) const -> void
{
    mManagedPTestShellParent.ToArray(aArr);
}

auto PContentParent::ManagedPTestShellParent() const -> const ManagedContainer<PTestShellParent>&
{
    return mManagedPTestShellParent;
}

auto PContentParent::ManagedPRemoteSpellcheckEngineParent(nsTArray<PRemoteSpellcheckEngineParent*>& aArr) const -> void
{
    mManagedPRemoteSpellcheckEngineParent.ToArray(aArr);
}

auto PContentParent::ManagedPRemoteSpellcheckEngineParent() const -> const ManagedContainer<PRemoteSpellcheckEngineParent>&
{
    return mManagedPRemoteSpellcheckEngineParent;
}

auto PContentParent::ManagedPWebBrowserPersistDocumentParent(nsTArray<PWebBrowserPersistDocumentParent*>& aArr) const -> void
{
    mManagedPWebBrowserPersistDocumentParent.ToArray(aArr);
}

auto PContentParent::ManagedPWebBrowserPersistDocumentParent() const -> const ManagedContainer<PWebBrowserPersistDocumentParent>&
{
    return mManagedPWebBrowserPersistDocumentParent;
}

auto PContentParent::ManagedPWebrtcGlobalParent(nsTArray<PWebrtcGlobalParent*>& aArr) const -> void
{
    mManagedPWebrtcGlobalParent.ToArray(aArr);
}

auto PContentParent::ManagedPWebrtcGlobalParent() const -> const ManagedContainer<PWebrtcGlobalParent>&
{
    return mManagedPWebrtcGlobalParent;
}

auto PContentParent::ManagedPPresentationParent(nsTArray<PPresentationParent*>& aArr) const -> void
{
    mManagedPPresentationParent.ToArray(aArr);
}

auto PContentParent::ManagedPPresentationParent() const -> const ManagedContainer<PPresentationParent>&
{
    return mManagedPPresentationParent;
}

auto PContentParent::ManagedPURLClassifierParent(nsTArray<PURLClassifierParent*>& aArr) const -> void
{
    mManagedPURLClassifierParent.ToArray(aArr);
}

auto PContentParent::ManagedPURLClassifierParent() const -> const ManagedContainer<PURLClassifierParent>&
{
    return mManagedPURLClassifierParent;
}

auto PContentParent::ManagedPURLClassifierLocalParent(nsTArray<PURLClassifierLocalParent*>& aArr) const -> void
{
    mManagedPURLClassifierLocalParent.ToArray(aArr);
}

auto PContentParent::ManagedPURLClassifierLocalParent() const -> const ManagedContainer<PURLClassifierLocalParent>&
{
    return mManagedPURLClassifierLocalParent;
}

auto PContentParent::ManagedPScriptCacheParent(nsTArray<PScriptCacheParent*>& aArr) const -> void
{
    mManagedPScriptCacheParent.ToArray(aArr);
}

auto PContentParent::ManagedPScriptCacheParent() const -> const ManagedContainer<PScriptCacheParent>&
{
    return mManagedPScriptCacheParent;
}

auto PContentParent::ManagedPLoginReputationParent(nsTArray<PLoginReputationParent*>& aArr) const -> void
{
    mManagedPLoginReputationParent.ToArray(aArr);
}

auto PContentParent::ManagedPLoginReputationParent() const -> const ManagedContainer<PLoginReputationParent>&
{
    return mManagedPLoginReputationParent;
}

auto PContentParent::ManagedPSessionStorageObserverParent(nsTArray<PSessionStorageObserverParent*>& aArr) const -> void
{
    mManagedPSessionStorageObserverParent.ToArray(aArr);
}

auto PContentParent::ManagedPSessionStorageObserverParent() const -> const ManagedContainer<PSessionStorageObserverParent>&
{
    return mManagedPSessionStorageObserverParent;
}

auto PContentParent::ManagedPBenchmarkStorageParent(nsTArray<PBenchmarkStorageParent*>& aArr) const -> void
{
    mManagedPBenchmarkStorageParent.ToArray(aArr);
}

auto PContentParent::ManagedPBenchmarkStorageParent() const -> const ManagedContainer<PBenchmarkStorageParent>&
{
    return mManagedPBenchmarkStorageParent;
}

auto PContentParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBrowserParent.Count();
    total += mManagedPContentPermissionRequestParent.Count();
    total += mManagedPCycleCollectWithLogsParent.Count();
    total += mManagedPExternalHelperAppParent.Count();
    total += mManagedPFileDescriptorSetParent.Count();
    total += mManagedPHalParent.Count();
    total += mManagedPHandlerServiceParent.Count();
    total += mManagedPHeapSnapshotTempFileHelperParent.Count();
    total += mManagedPRemoteLazyInputStreamParent.Count();
    total += mManagedPMediaParent.Count();
    total += mManagedPNeckoParent.Count();
    total += mManagedPOfflineCacheUpdateParent.Count();
    total += mManagedPPrintingParent.Count();
    total += mManagedPChildToParentStreamParent.Count();
    total += mManagedPParentToChildStreamParent.Count();
    total += mManagedPSpeechSynthesisParent.Count();
    total += mManagedPTestShellParent.Count();
    total += mManagedPRemoteSpellcheckEngineParent.Count();
    total += mManagedPWebBrowserPersistDocumentParent.Count();
    total += mManagedPWebrtcGlobalParent.Count();
    total += mManagedPPresentationParent.Count();
    total += mManagedPURLClassifierParent.Count();
    total += mManagedPURLClassifierLocalParent.Count();
    total += mManagedPScriptCacheParent.Count();
    total += mManagedPLoginReputationParent.Count();
    total += mManagedPSessionStorageObserverParent.Count();
    total += mManagedPBenchmarkStorageParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBrowserParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPContentPermissionRequestParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPCycleCollectWithLogsParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPExternalHelperAppParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPFileDescriptorSetParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPHalParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPHandlerServiceParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPHeapSnapshotTempFileHelperParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPRemoteLazyInputStreamParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPMediaParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPNeckoParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPOfflineCacheUpdateParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPrintingParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPChildToParentStreamParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPParentToChildStreamParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPSpeechSynthesisParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPTestShellParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPRemoteSpellcheckEngineParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPWebBrowserPersistDocumentParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPWebrtcGlobalParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPresentationParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPURLClassifierParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPURLClassifierLocalParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPScriptCacheParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPLoginReputationParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPSessionStorageObserverParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBenchmarkStorageParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PContentParent::OpenPBrowserEndpoint(PBrowserParent* aActor) -> ManagedEndpoint<PBrowserChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserParent actor");
        return ManagedEndpoint<PBrowserChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBrowserParent.PutEntry(aActor);

    return ManagedEndpoint<PBrowserChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPBrowserEndpoint(
        ManagedEndpoint<PBrowserParent> aEndpoint,
        PBrowserParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBrowserParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPContentPermissionRequestEndpoint(PContentPermissionRequestParent* aActor) -> ManagedEndpoint<PContentPermissionRequestChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PContentPermissionRequestParent actor");
        return ManagedEndpoint<PContentPermissionRequestChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPContentPermissionRequestParent.PutEntry(aActor);

    return ManagedEndpoint<PContentPermissionRequestChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPContentPermissionRequestEndpoint(
        ManagedEndpoint<PContentPermissionRequestParent> aEndpoint,
        PContentPermissionRequestParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PContentPermissionRequestParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPContentPermissionRequestParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPCycleCollectWithLogsEndpoint(PCycleCollectWithLogsParent* aActor) -> ManagedEndpoint<PCycleCollectWithLogsChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PCycleCollectWithLogsParent actor");
        return ManagedEndpoint<PCycleCollectWithLogsChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPCycleCollectWithLogsParent.PutEntry(aActor);

    return ManagedEndpoint<PCycleCollectWithLogsChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPCycleCollectWithLogsEndpoint(
        ManagedEndpoint<PCycleCollectWithLogsParent> aEndpoint,
        PCycleCollectWithLogsParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PCycleCollectWithLogsParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPCycleCollectWithLogsParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPExternalHelperAppEndpoint(PExternalHelperAppParent* aActor) -> ManagedEndpoint<PExternalHelperAppChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PExternalHelperAppParent actor");
        return ManagedEndpoint<PExternalHelperAppChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPExternalHelperAppParent.PutEntry(aActor);

    return ManagedEndpoint<PExternalHelperAppChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPExternalHelperAppEndpoint(
        ManagedEndpoint<PExternalHelperAppParent> aEndpoint,
        PExternalHelperAppParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PExternalHelperAppParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPExternalHelperAppParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPFileDescriptorSetEndpoint(PFileDescriptorSetParent* aActor) -> ManagedEndpoint<PFileDescriptorSetChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PFileDescriptorSetParent actor");
        return ManagedEndpoint<PFileDescriptorSetChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPFileDescriptorSetParent.PutEntry(aActor);

    return ManagedEndpoint<PFileDescriptorSetChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPFileDescriptorSetEndpoint(
        ManagedEndpoint<PFileDescriptorSetParent> aEndpoint,
        PFileDescriptorSetParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PFileDescriptorSetParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPFileDescriptorSetParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPHalEndpoint(PHalParent* aActor) -> ManagedEndpoint<PHalChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PHalParent actor");
        return ManagedEndpoint<PHalChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPHalParent.PutEntry(aActor);

    return ManagedEndpoint<PHalChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPHalEndpoint(
        ManagedEndpoint<PHalParent> aEndpoint,
        PHalParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PHalParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPHalParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPHandlerServiceEndpoint(PHandlerServiceParent* aActor) -> ManagedEndpoint<PHandlerServiceChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PHandlerServiceParent actor");
        return ManagedEndpoint<PHandlerServiceChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPHandlerServiceParent.PutEntry(aActor);

    return ManagedEndpoint<PHandlerServiceChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPHandlerServiceEndpoint(
        ManagedEndpoint<PHandlerServiceParent> aEndpoint,
        PHandlerServiceParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PHandlerServiceParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPHandlerServiceParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPHeapSnapshotTempFileHelperEndpoint(PHeapSnapshotTempFileHelperParent* aActor) -> ManagedEndpoint<PHeapSnapshotTempFileHelperChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PHeapSnapshotTempFileHelperParent actor");
        return ManagedEndpoint<PHeapSnapshotTempFileHelperChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPHeapSnapshotTempFileHelperParent.PutEntry(aActor);

    return ManagedEndpoint<PHeapSnapshotTempFileHelperChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPHeapSnapshotTempFileHelperEndpoint(
        ManagedEndpoint<PHeapSnapshotTempFileHelperParent> aEndpoint,
        PHeapSnapshotTempFileHelperParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PHeapSnapshotTempFileHelperParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPHeapSnapshotTempFileHelperParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPRemoteLazyInputStreamEndpoint(PRemoteLazyInputStreamParent* aActor) -> ManagedEndpoint<PRemoteLazyInputStreamChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteLazyInputStreamParent actor");
        return ManagedEndpoint<PRemoteLazyInputStreamChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPRemoteLazyInputStreamParent.PutEntry(aActor);

    return ManagedEndpoint<PRemoteLazyInputStreamChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPRemoteLazyInputStreamEndpoint(
        ManagedEndpoint<PRemoteLazyInputStreamParent> aEndpoint,
        PRemoteLazyInputStreamParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteLazyInputStreamParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPRemoteLazyInputStreamParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPMediaEndpoint(PMediaParent* aActor) -> ManagedEndpoint<PMediaChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PMediaParent actor");
        return ManagedEndpoint<PMediaChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPMediaParent.PutEntry(aActor);

    return ManagedEndpoint<PMediaChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPMediaEndpoint(
        ManagedEndpoint<PMediaParent> aEndpoint,
        PMediaParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PMediaParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPMediaParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPNeckoEndpoint(PNeckoParent* aActor) -> ManagedEndpoint<PNeckoChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PNeckoParent actor");
        return ManagedEndpoint<PNeckoChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPNeckoParent.PutEntry(aActor);

    return ManagedEndpoint<PNeckoChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPNeckoEndpoint(
        ManagedEndpoint<PNeckoParent> aEndpoint,
        PNeckoParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PNeckoParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPNeckoParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPOfflineCacheUpdateEndpoint(POfflineCacheUpdateParent* aActor) -> ManagedEndpoint<POfflineCacheUpdateChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null POfflineCacheUpdateParent actor");
        return ManagedEndpoint<POfflineCacheUpdateChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPOfflineCacheUpdateParent.PutEntry(aActor);

    return ManagedEndpoint<POfflineCacheUpdateChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPOfflineCacheUpdateEndpoint(
        ManagedEndpoint<POfflineCacheUpdateParent> aEndpoint,
        POfflineCacheUpdateParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null POfflineCacheUpdateParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPOfflineCacheUpdateParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPPrintingEndpoint(PPrintingParent* aActor) -> ManagedEndpoint<PPrintingChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintingParent actor");
        return ManagedEndpoint<PPrintingChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPrintingParent.PutEntry(aActor);

    return ManagedEndpoint<PPrintingChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPPrintingEndpoint(
        ManagedEndpoint<PPrintingParent> aEndpoint,
        PPrintingParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintingParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPrintingParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPChildToParentStreamEndpoint(PChildToParentStreamParent* aActor) -> ManagedEndpoint<PChildToParentStreamChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PChildToParentStreamParent actor");
        return ManagedEndpoint<PChildToParentStreamChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPChildToParentStreamParent.PutEntry(aActor);

    return ManagedEndpoint<PChildToParentStreamChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPChildToParentStreamEndpoint(
        ManagedEndpoint<PChildToParentStreamParent> aEndpoint,
        PChildToParentStreamParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PChildToParentStreamParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPChildToParentStreamParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPParentToChildStreamEndpoint(PParentToChildStreamParent* aActor) -> ManagedEndpoint<PParentToChildStreamChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PParentToChildStreamParent actor");
        return ManagedEndpoint<PParentToChildStreamChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPParentToChildStreamParent.PutEntry(aActor);

    return ManagedEndpoint<PParentToChildStreamChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPParentToChildStreamEndpoint(
        ManagedEndpoint<PParentToChildStreamParent> aEndpoint,
        PParentToChildStreamParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PParentToChildStreamParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPParentToChildStreamParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPSpeechSynthesisEndpoint(PSpeechSynthesisParent* aActor) -> ManagedEndpoint<PSpeechSynthesisChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisParent actor");
        return ManagedEndpoint<PSpeechSynthesisChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPSpeechSynthesisParent.PutEntry(aActor);

    return ManagedEndpoint<PSpeechSynthesisChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPSpeechSynthesisEndpoint(
        ManagedEndpoint<PSpeechSynthesisParent> aEndpoint,
        PSpeechSynthesisParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPSpeechSynthesisParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPTestShellEndpoint(PTestShellParent* aActor) -> ManagedEndpoint<PTestShellChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PTestShellParent actor");
        return ManagedEndpoint<PTestShellChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPTestShellParent.PutEntry(aActor);

    return ManagedEndpoint<PTestShellChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPTestShellEndpoint(
        ManagedEndpoint<PTestShellParent> aEndpoint,
        PTestShellParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PTestShellParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPTestShellParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPRemoteSpellcheckEngineEndpoint(PRemoteSpellcheckEngineParent* aActor) -> ManagedEndpoint<PRemoteSpellcheckEngineChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteSpellcheckEngineParent actor");
        return ManagedEndpoint<PRemoteSpellcheckEngineChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPRemoteSpellcheckEngineParent.PutEntry(aActor);

    return ManagedEndpoint<PRemoteSpellcheckEngineChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPRemoteSpellcheckEngineEndpoint(
        ManagedEndpoint<PRemoteSpellcheckEngineParent> aEndpoint,
        PRemoteSpellcheckEngineParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteSpellcheckEngineParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPRemoteSpellcheckEngineParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPWebBrowserPersistDocumentEndpoint(PWebBrowserPersistDocumentParent* aActor) -> ManagedEndpoint<PWebBrowserPersistDocumentChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistDocumentParent actor");
        return ManagedEndpoint<PWebBrowserPersistDocumentChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistDocumentParent.PutEntry(aActor);

    return ManagedEndpoint<PWebBrowserPersistDocumentChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPWebBrowserPersistDocumentEndpoint(
        ManagedEndpoint<PWebBrowserPersistDocumentParent> aEndpoint,
        PWebBrowserPersistDocumentParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistDocumentParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWebBrowserPersistDocumentParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPWebrtcGlobalEndpoint(PWebrtcGlobalParent* aActor) -> ManagedEndpoint<PWebrtcGlobalChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebrtcGlobalParent actor");
        return ManagedEndpoint<PWebrtcGlobalChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWebrtcGlobalParent.PutEntry(aActor);

    return ManagedEndpoint<PWebrtcGlobalChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPWebrtcGlobalEndpoint(
        ManagedEndpoint<PWebrtcGlobalParent> aEndpoint,
        PWebrtcGlobalParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebrtcGlobalParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWebrtcGlobalParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPPresentationEndpoint(PPresentationParent* aActor) -> ManagedEndpoint<PPresentationChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationParent actor");
        return ManagedEndpoint<PPresentationChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPresentationParent.PutEntry(aActor);

    return ManagedEndpoint<PPresentationChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPPresentationEndpoint(
        ManagedEndpoint<PPresentationParent> aEndpoint,
        PPresentationParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPresentationParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPURLClassifierEndpoint(PURLClassifierParent* aActor) -> ManagedEndpoint<PURLClassifierChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PURLClassifierParent actor");
        return ManagedEndpoint<PURLClassifierChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPURLClassifierParent.PutEntry(aActor);

    return ManagedEndpoint<PURLClassifierChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPURLClassifierEndpoint(
        ManagedEndpoint<PURLClassifierParent> aEndpoint,
        PURLClassifierParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PURLClassifierParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPURLClassifierParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPURLClassifierLocalEndpoint(PURLClassifierLocalParent* aActor) -> ManagedEndpoint<PURLClassifierLocalChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PURLClassifierLocalParent actor");
        return ManagedEndpoint<PURLClassifierLocalChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPURLClassifierLocalParent.PutEntry(aActor);

    return ManagedEndpoint<PURLClassifierLocalChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPURLClassifierLocalEndpoint(
        ManagedEndpoint<PURLClassifierLocalParent> aEndpoint,
        PURLClassifierLocalParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PURLClassifierLocalParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPURLClassifierLocalParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPScriptCacheEndpoint(PScriptCacheParent* aActor) -> ManagedEndpoint<PScriptCacheChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PScriptCacheParent actor");
        return ManagedEndpoint<PScriptCacheChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPScriptCacheParent.PutEntry(aActor);

    return ManagedEndpoint<PScriptCacheChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPScriptCacheEndpoint(
        ManagedEndpoint<PScriptCacheParent> aEndpoint,
        PScriptCacheParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PScriptCacheParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPScriptCacheParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPLoginReputationEndpoint(PLoginReputationParent* aActor) -> ManagedEndpoint<PLoginReputationChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PLoginReputationParent actor");
        return ManagedEndpoint<PLoginReputationChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPLoginReputationParent.PutEntry(aActor);

    return ManagedEndpoint<PLoginReputationChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPLoginReputationEndpoint(
        ManagedEndpoint<PLoginReputationParent> aEndpoint,
        PLoginReputationParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PLoginReputationParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPLoginReputationParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPSessionStorageObserverEndpoint(PSessionStorageObserverParent* aActor) -> ManagedEndpoint<PSessionStorageObserverChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PSessionStorageObserverParent actor");
        return ManagedEndpoint<PSessionStorageObserverChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPSessionStorageObserverParent.PutEntry(aActor);

    return ManagedEndpoint<PSessionStorageObserverChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPSessionStorageObserverEndpoint(
        ManagedEndpoint<PSessionStorageObserverParent> aEndpoint,
        PSessionStorageObserverParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PSessionStorageObserverParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPSessionStorageObserverParent.PutEntry(aActor);

    return true;
}

auto PContentParent::OpenPBenchmarkStorageEndpoint(PBenchmarkStorageParent* aActor) -> ManagedEndpoint<PBenchmarkStorageChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBenchmarkStorageParent actor");
        return ManagedEndpoint<PBenchmarkStorageChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBenchmarkStorageParent.PutEntry(aActor);

    return ManagedEndpoint<PBenchmarkStorageChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentParent::BindPBenchmarkStorageEndpoint(
        ManagedEndpoint<PBenchmarkStorageParent> aEndpoint,
        PBenchmarkStorageParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBenchmarkStorageParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBenchmarkStorageParent.PutEntry(aActor);

    return true;
}

auto PContentParent::SendConstructBrowser(
        ManagedEndpoint<mozilla::dom::PBrowserChild>&& browserEp,
        ManagedEndpoint<mozilla::dom::PWindowGlobalChild>&& windowEp,
        const TabId& tabId,
        const IPCTabContext& context,
        const WindowGlobalInit& windowInit,
        const uint32_t& chromeFlags,
        const ContentParentId& cpId,
        const bool& isForBrowser,
        const bool& isTopLevel) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ConstructBrowser(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(browserEp));
    // Sentinel = 'browserEp'
    (msg__)->WriteSentinel(318833594);
    WriteIPDLParam(msg__, this, std::move(windowEp));
    // Sentinel = 'windowEp'
    (msg__)->WriteSentinel(255984462);
    WriteIPDLParam(msg__, this, tabId);
    // Sentinel = 'tabId'
    (msg__)->WriteSentinel(99156453);
    WriteIPDLParam(msg__, this, context);
    // Sentinel = 'context'
    (msg__)->WriteSentinel(199164678);
    WriteIPDLParam(msg__, this, windowInit);
    // Sentinel = 'windowInit'
    (msg__)->WriteSentinel(388891693);
    WriteIPDLParam(msg__, this, chromeFlags);
    // Sentinel = 'chromeFlags'
    (msg__)->WriteSentinel(446760044);
    WriteIPDLParam(msg__, this, cpId);
    // Sentinel = 'cpId'
    (msg__)->WriteSentinel(64356737);
    WriteIPDLParam(msg__, this, isForBrowser);
    // Sentinel = 'isForBrowser'
    (msg__)->WriteSentinel(523371752);
    WriteIPDLParam(msg__, this, isTopLevel);
    // Sentinel = 'isTopLevel'
    (msg__)->WriteSentinel(371196936);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ConstructBrowser", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPFileDescriptorSetConstructor(const FileDescriptor& fd) -> PFileDescriptorSetParent*
{
    PFileDescriptorSetParent* actor = (static_cast<ContentParent*>(this))->AllocPFileDescriptorSetParent(fd);
    return SendPFileDescriptorSetConstructor(actor, fd);
}

auto PContentParent::SendPFileDescriptorSetConstructor(
        PFileDescriptorSetParent* actor,
        const FileDescriptor& fd) -> PFileDescriptorSetParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PFileDescriptorSetParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPFileDescriptorSetParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PFileDescriptorSetConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, fd);
    // Sentinel = 'fd'
    (msg__)->WriteSentinel(20054219);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PFileDescriptorSetConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PFileDescriptorSetParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PFileDescriptorSetMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentParent::SendPWebBrowserPersistDocumentConstructor(
        PBrowserParent* aBrowser,
        const MaybeDiscardedBrowsingContext& aContext) -> PWebBrowserPersistDocumentParent*
{
    PWebBrowserPersistDocumentParent* actor = (static_cast<ContentParent*>(this))->AllocPWebBrowserPersistDocumentParent(aBrowser, aContext);
    return SendPWebBrowserPersistDocumentConstructor(actor, aBrowser, aContext);
}

auto PContentParent::SendPWebBrowserPersistDocumentConstructor(
        PWebBrowserPersistDocumentParent* actor,
        PBrowserParent* aBrowser,
        const MaybeDiscardedBrowsingContext& aContext) -> PWebBrowserPersistDocumentParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistDocumentParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistDocumentParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PWebBrowserPersistDocumentConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aBrowser);
    // Sentinel = 'aBrowser'
    (msg__)->WriteSentinel(237372230);
    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PWebBrowserPersistDocumentConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PWebBrowserPersistDocumentParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PWebBrowserPersistDocumentMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentParent::SendRawMessage(
        const JSActorMessageMeta& aMetadata,
        const mozilla::Maybe<ClonedMessageData>& aData,
        const mozilla::Maybe<ClonedMessageData>& aStack) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RawMessage(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMetadata);
    // Sentinel = 'aMetadata'
    (msg__)->WriteSentinel(288752515);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);
    WriteIPDLParam(msg__, this, aStack);
    // Sentinel = 'aStack'
    (msg__)->WriteSentinel(135201368);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RawMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendInitGMPService(Endpoint<mozilla::gmp::PGMPServiceChild>&& service) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitGMPService(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(service));
    // Sentinel = 'service'
    (msg__)->WriteSentinel(201458418);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitGMPService", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendInitProcessHangMonitor(Endpoint<mozilla::PProcessHangMonitorChild>&& hangMonitor) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitProcessHangMonitor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(hangMonitor));
    // Sentinel = 'hangMonitor'
    (msg__)->WriteSentinel(445514887);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitProcessHangMonitor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendInitProfiler(Endpoint<mozilla::PProfilerChild>&& aEndpoint) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitProfiler(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(aEndpoint));
    // Sentinel = 'aEndpoint'
    (msg__)->WriteSentinel(292225955);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitProfiler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendInitRendering(
        Endpoint<mozilla::layers::PCompositorManagerChild>&& compositor,
        Endpoint<mozilla::layers::PImageBridgeChild>&& imageBridge,
        Endpoint<mozilla::gfx::PVRManagerChild>&& vr,
        Endpoint<mozilla::PRemoteDecoderManagerChild>&& video,
        const nsTArray<uint32_t>& namespaces) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitRendering(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(compositor));
    // Sentinel = 'compositor'
    (msg__)->WriteSentinel(393217104);
    WriteIPDLParam(msg__, this, std::move(imageBridge));
    // Sentinel = 'imageBridge'
    (msg__)->WriteSentinel(436012113);
    WriteIPDLParam(msg__, this, std::move(vr));
    // Sentinel = 'vr'
    (msg__)->WriteSentinel(23068905);
    WriteIPDLParam(msg__, this, std::move(video));
    // Sentinel = 'video'
    (msg__)->WriteSentinel(106693144);
    WriteIPDLParam(msg__, this, namespaces);
    // Sentinel = 'namespaces'
    (msg__)->WriteSentinel(381027361);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitRendering", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendReinitRendering(
        Endpoint<mozilla::layers::PCompositorManagerChild>&& compositor,
        Endpoint<mozilla::layers::PImageBridgeChild>&& bridge,
        Endpoint<mozilla::gfx::PVRManagerChild>&& vr,
        Endpoint<mozilla::PRemoteDecoderManagerChild>&& video,
        const nsTArray<uint32_t>& namespaces) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ReinitRendering(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(compositor));
    // Sentinel = 'compositor'
    (msg__)->WriteSentinel(393217104);
    WriteIPDLParam(msg__, this, std::move(bridge));
    // Sentinel = 'bridge'
    (msg__)->WriteSentinel(143589998);
    WriteIPDLParam(msg__, this, std::move(vr));
    // Sentinel = 'vr'
    (msg__)->WriteSentinel(23068905);
    WriteIPDLParam(msg__, this, std::move(video));
    // Sentinel = 'video'
    (msg__)->WriteSentinel(106693144);
    WriteIPDLParam(msg__, this, namespaces);
    // Sentinel = 'namespaces'
    (msg__)->WriteSentinel(381027361);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ReinitRendering", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNetworkLinkTypeChange(const uint32_t& type) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NetworkLinkTypeChange(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, type);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(75760067);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NetworkLinkTypeChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendReinitRenderingForDeviceReset() -> bool
{
    IPC::Message* msg__ = PContent::Msg_ReinitRenderingForDeviceReset(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ReinitRenderingForDeviceReset", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetProcessSandbox(const mozilla::Maybe<FileDescriptor>& aBroker) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetProcessSandbox(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aBroker);
    // Sentinel = 'aBroker'
    (msg__)->WriteSentinel(179110599);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetProcessSandbox", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRequestMemoryReport(
        const uint32_t& generation,
        const bool& anonymize,
        const bool& minimizeMemoryUsage,
        const mozilla::Maybe<FileDescriptor>& DMDFile,
        mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_RequestMemoryReport(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, generation);
    // Sentinel = 'generation'
    (msg__)->WriteSentinel(381158445);
    WriteIPDLParam(msg__, this, anonymize);
    // Sentinel = 'anonymize'
    (msg__)->WriteSentinel(321127387);
    WriteIPDLParam(msg__, this, minimizeMemoryUsage);
    // Sentinel = 'minimizeMemoryUsage'
    (msg__)->WriteSentinel(1321600977);
    WriteIPDLParam(msg__, this, DMDFile);
    // Sentinel = 'DMDFile'
    (msg__)->WriteSentinel(143983190);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RequestMemoryReport", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendRequestMemoryReport(
        const uint32_t& generation,
        const bool& anonymize,
        const bool& minimizeMemoryUsage,
        const mozilla::Maybe<FileDescriptor>& DMDFile) -> RefPtr<RequestMemoryReportPromise>
{
    RefPtr<MozPromise<uint32_t, ResponseRejectReason, true>::Private> promise__ = new MozPromise<uint32_t, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendRequestMemoryReport(std::move(generation), std::move(anonymize), std::move(minimizeMemoryUsage), std::move(DMDFile), [promise__](uint32_t&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendRequestPerformanceMetrics(const nsID& aID) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RequestPerformanceMetrics(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RequestPerformanceMetrics", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGetUntrustedModulesData(
        mozilla::ipc::ResolveCallback<mozilla::Maybe<UntrustedModulesData>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_GetUntrustedModulesData(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetUntrustedModulesData", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendGetUntrustedModulesData() -> RefPtr<GetUntrustedModulesDataPromise>
{
    RefPtr<MozPromise<mozilla::Maybe<UntrustedModulesData>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<mozilla::Maybe<UntrustedModulesData>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetUntrustedModulesData([promise__](mozilla::Maybe<UntrustedModulesData>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendBidiKeyboardNotify(
        const bool& isLangRTL,
        const bool& haveBidiKeyboards) -> bool
{
    IPC::Message* msg__ = PContent::Msg_BidiKeyboardNotify(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, isLangRTL);
    // Sentinel = 'isLangRTL'
    (msg__)->WriteSentinel(290980689);
    WriteIPDLParam(msg__, this, haveBidiKeyboards);
    // Sentinel = 'haveBidiKeyboards'
    (msg__)->WriteSentinel(1003161281);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BidiKeyboardNotify", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPCycleCollectWithLogsConstructor(
        const bool& dumpAllTraces,
        const FileDescriptor& gcLog,
        const FileDescriptor& ccLog) -> PCycleCollectWithLogsParent*
{
    PCycleCollectWithLogsParent* actor = (static_cast<ContentParent*>(this))->AllocPCycleCollectWithLogsParent(dumpAllTraces, gcLog, ccLog);
    return SendPCycleCollectWithLogsConstructor(actor, dumpAllTraces, gcLog, ccLog);
}

auto PContentParent::SendPCycleCollectWithLogsConstructor(
        PCycleCollectWithLogsParent* actor,
        const bool& dumpAllTraces,
        const FileDescriptor& gcLog,
        const FileDescriptor& ccLog) -> PCycleCollectWithLogsParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PCycleCollectWithLogsParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPCycleCollectWithLogsParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PCycleCollectWithLogsConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, dumpAllTraces);
    // Sentinel = 'dumpAllTraces'
    (msg__)->WriteSentinel(610600242);
    WriteIPDLParam(msg__, this, gcLog);
    // Sentinel = 'gcLog'
    (msg__)->WriteSentinel(96272877);
    WriteIPDLParam(msg__, this, ccLog);
    // Sentinel = 'ccLog'
    (msg__)->WriteSentinel(94962153);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PCycleCollectWithLogsConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PCycleCollectWithLogsParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PCycleCollectWithLogsMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentParent::SendPTestShellConstructor() -> PTestShellParent*
{
    PTestShellParent* actor = (static_cast<ContentParent*>(this))->AllocPTestShellParent();
    return SendPTestShellConstructor(actor);
}

auto PContentParent::SendPTestShellConstructor(PTestShellParent* actor) -> PTestShellParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PTestShellParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPTestShellParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PTestShellConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PTestShellConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PTestShellParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PTestShellMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentParent::SendPScriptCacheConstructor(
        const FileDescOrError& cacheFile,
        const bool& wantCacheData) -> PScriptCacheParent*
{
    PScriptCacheParent* actor = (static_cast<ContentParent*>(this))->AllocPScriptCacheParent(cacheFile, wantCacheData);
    return SendPScriptCacheConstructor(actor, cacheFile, wantCacheData);
}

auto PContentParent::SendPScriptCacheConstructor(
        PScriptCacheParent* actor,
        const FileDescOrError& cacheFile,
        const bool& wantCacheData) -> PScriptCacheParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PScriptCacheParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPScriptCacheParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PScriptCacheConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, cacheFile);
    // Sentinel = 'cacheFile'
    (msg__)->WriteSentinel(289014645);
    WriteIPDLParam(msg__, this, wantCacheData);
    // Sentinel = 'wantCacheData'
    (msg__)->WriteSentinel(602080521);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PScriptCacheConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PScriptCacheParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PScriptCacheMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentParent::SendRegisterChrome(
        const nsTArray<ChromePackage>& packages,
        const nsTArray<SubstitutionMapping>& substitutions,
        const nsTArray<OverrideMapping>& overrides,
        const nsCString& locale,
        const bool& reset) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RegisterChrome(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, packages);
    // Sentinel = 'packages'
    (msg__)->WriteSentinel(244187968);
    WriteIPDLParam(msg__, this, substitutions);
    // Sentinel = 'substitutions'
    (msg__)->WriteSentinel(668861873);
    WriteIPDLParam(msg__, this, overrides);
    // Sentinel = 'overrides'
    (msg__)->WriteSentinel(324404180);
    WriteIPDLParam(msg__, this, locale);
    // Sentinel = 'locale'
    (msg__)->WriteSentinel(145031793);
    WriteIPDLParam(msg__, this, reset);
    // Sentinel = 'reset'
    (msg__)->WriteSentinel(107610660);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RegisterChrome", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRegisterChromeItem(const ChromeRegistryItem& item) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RegisterChromeItem(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, item);
    // Sentinel = 'item'
    (msg__)->WriteSentinel(70975920);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RegisterChromeItem", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendClearImageCache(
        const bool& privateLoader,
        const bool& chrome) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ClearImageCache(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, privateLoader);
    // Sentinel = 'privateLoader'
    (msg__)->WriteSentinel(635372883);
    WriteIPDLParam(msg__, this, chrome);
    // Sentinel = 'chrome'
    (msg__)->WriteSentinel(146014847);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ClearImageCache", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendClearStyleSheetCache(const mozilla::Maybe<RefPtr<nsIPrincipal>>& aForPrincipal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ClearStyleSheetCache(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aForPrincipal);
    // Sentinel = 'aForPrincipal'
    (msg__)->WriteSentinel(593429803);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ClearStyleSheetCache", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetOffline(const bool& offline) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetOffline(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, offline);
    // Sentinel = 'offline'
    (msg__)->WriteSentinel(194904804);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetOffline", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetConnectivity(const bool& connectivity) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetConnectivity(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, connectivity);
    // Sentinel = 'connectivity'
    (msg__)->WriteSentinel(548734240);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetConnectivity", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetCaptivePortalState(const int32_t& aState) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetCaptivePortalState(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetCaptivePortalState", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNotifyVisited(const nsTArray<VisitedQueryResult>& uri) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyVisited(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyVisited", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendThemeChanged(
        const LookAndFeelData& lookAndFeelData,
        const ThemeChangeKind& aKind) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ThemeChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, lookAndFeelData);
    // Sentinel = 'lookAndFeelData'
    (msg__)->WriteSentinel(782239167);
    WriteIPDLParam(msg__, this, aKind);
    // Sentinel = 'aKind'
    (msg__)->WriteSentinel(93389288);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ThemeChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdateSystemParameters(const nsTArray<SystemParameterKVPair>& aUpdates) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateSystemParameters(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aUpdates);
    // Sentinel = 'aUpdates'
    (msg__)->WriteSentinel(236192568);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateSystemParameters", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPreferenceUpdate(const Pref& pref) -> bool
{
    IPC::Message* msg__ = PContent::Msg_PreferenceUpdate(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, pref);
    // Sentinel = 'pref'
    (msg__)->WriteSentinel(71958958);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PreferenceUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendVarUpdate(const GfxVarUpdate& var) -> bool
{
    IPC::Message* msg__ = PContent::Msg_VarUpdate(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, var);
    // Sentinel = 'var'
    (msg__)->WriteSentinel(43581770);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_VarUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdatePerfStatsCollectionMask(const uint64_t& aMask) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdatePerfStatsCollectionMask(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMask);
    // Sentinel = 'aMask'
    (msg__)->WriteSentinel(93454830);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdatePerfStatsCollectionMask", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendCollectPerfStatsJSON(
        mozilla::ipc::ResolveCallback<nsCString>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_CollectPerfStatsJSON(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CollectPerfStatsJSON", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendCollectPerfStatsJSON() -> RefPtr<CollectPerfStatsJSONPromise>
{
    RefPtr<MozPromise<nsCString, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsCString, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendCollectPerfStatsJSON([promise__](nsCString&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendDataStoragePut(
        const nsString& aFilename,
        const DataStorageItem& aItem) -> bool
{
    IPC::Message* msg__ = PContent::Msg_DataStoragePut(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFilename);
    // Sentinel = 'aFilename'
    (msg__)->WriteSentinel(287048579);
    WriteIPDLParam(msg__, this, aItem);
    // Sentinel = 'aItem'
    (msg__)->WriteSentinel(94437873);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DataStoragePut", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendDataStorageRemove(
        const nsString& aFilename,
        const nsCString& aKey,
        const DataStorageType& aType) -> bool
{
    IPC::Message* msg__ = PContent::Msg_DataStorageRemove(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFilename);
    // Sentinel = 'aFilename'
    (msg__)->WriteSentinel(287048579);
    WriteIPDLParam(msg__, this, aKey);
    // Sentinel = 'aKey'
    (msg__)->WriteSentinel(61604235);
    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DataStorageRemove", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendDataStorageClear(const nsString& aFilename) -> bool
{
    IPC::Message* msg__ = PContent::Msg_DataStorageClear(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFilename);
    // Sentinel = 'aFilename'
    (msg__)->WriteSentinel(287048579);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DataStorageClear", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNotifyAlertsObserver(
        const nsCString& topic,
        const nsString& data) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyAlertsObserver(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, topic);
    // Sentinel = 'topic'
    (msg__)->WriteSentinel(109707808);
    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyAlertsObserver", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGeolocationUpdate(nsIDOMGeoPosition* aPosition) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GeolocationUpdate(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPosition);
    // Sentinel = 'aPosition'
    (msg__)->WriteSentinel(303104951);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GeolocationUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGeolocationError(const uint16_t& errorCode) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GeolocationError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, errorCode);
    // Sentinel = 'errorCode'
    (msg__)->WriteSentinel(312345510);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GeolocationError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdateDictionaryList(const nsTArray<nsCString>& dictionaries) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateDictionaryList(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, dictionaries);
    // Sentinel = 'dictionaries'
    (msg__)->WriteSentinel(540738815);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateDictionaryList", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdateFontList(const nsTArray<SystemFontListEntry>& fontList) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateFontList(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, fontList);
    // Sentinel = 'fontList'
    (msg__)->WriteSentinel(249430868);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateFontList", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRebuildFontList(const bool& aFulLRebuild) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RebuildFontList(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFulLRebuild);
    // Sentinel = 'aFulLRebuild'
    (msg__)->WriteSentinel(489227420);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RebuildFontList", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendFontListChanged() -> bool
{
    IPC::Message* msg__ = PContent::Msg_FontListChanged(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FontListChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdateAppLocales(const nsTArray<nsCString>& appLocales) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateAppLocales(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, appLocales);
    // Sentinel = 'appLocales'
    (msg__)->WriteSentinel(367395845);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateAppLocales", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdateRequestedLocales(const nsTArray<nsCString>& requestedLocales) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateRequestedLocales(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, requestedLocales);
    // Sentinel = 'requestedLocales'
    (msg__)->WriteSentinel(951977622);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateRequestedLocales", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRegisterStringBundles(const nsTArray<StringBundleDescriptor>& stringBundles) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RegisterStringBundles(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, stringBundles);
    // Sentinel = 'stringBundles'
    (msg__)->WriteSentinel(640484709);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RegisterStringBundles", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdateSharedData(
        const FileDescriptor& mapFile,
        const uint32_t& aSize,
        const nsTArray<IPCBlob>& blobs,
        const nsTArray<nsCString>& changedKeys) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateSharedData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, mapFile);
    // Sentinel = 'mapFile'
    (msg__)->WriteSentinel(185074367);
    WriteIPDLParam(msg__, this, aSize);
    // Sentinel = 'aSize'
    (msg__)->WriteSentinel(97124861);
    WriteIPDLParam(msg__, this, blobs);
    // Sentinel = 'blobs'
    (msg__)->WriteSentinel(102957587);
    WriteIPDLParam(msg__, this, changedKeys);
    // Sentinel = 'changedKeys'
    (msg__)->WriteSentinel(437781607);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateSharedData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendAddPermission(const Permission& permission) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AddPermission(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, permission);
    // Sentinel = 'permission'
    (msg__)->WriteSentinel(394921034);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AddPermission", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRemoveAllPermissions() -> bool
{
    IPC::Message* msg__ = PContent::Msg_RemoveAllPermissions(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RemoveAllPermissions", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendFlushMemory(const nsString& reason) -> bool
{
    IPC::Message* msg__ = PContent::Msg_FlushMemory(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, reason);
    // Sentinel = 'reason'
    (msg__)->WriteSentinel(148112009);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FlushMemory", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendApplicationBackground() -> bool
{
    IPC::Message* msg__ = PContent::Msg_ApplicationBackground(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ApplicationBackground", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendApplicationForeground() -> bool
{
    IPC::Message* msg__ = PContent::Msg_ApplicationForeground(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ApplicationForeground", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGarbageCollect() -> bool
{
    IPC::Message* msg__ = PContent::Msg_GarbageCollect(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GarbageCollect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendCycleCollect() -> bool
{
    IPC::Message* msg__ = PContent::Msg_CycleCollect(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CycleCollect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUnlinkGhosts() -> bool
{
    IPC::Message* msg__ = PContent::Msg_UnlinkGhosts(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UnlinkGhosts", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendActivateA11y(
        const uint32_t& aMainChromeTid,
        const uint32_t& aMsaaID) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ActivateA11y(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMainChromeTid);
    // Sentinel = 'aMainChromeTid'
    (msg__)->WriteSentinel(668599654);
    WriteIPDLParam(msg__, this, aMsaaID);
    // Sentinel = 'aMsaaID'
    (msg__)->WriteSentinel(171442801);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ActivateA11y", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendShutdownA11y() -> bool
{
    IPC::Message* msg__ = PContent::Msg_ShutdownA11y(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ShutdownA11y", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendAppInfo(
        const nsCString& version,
        const nsCString& buildID,
        const nsCString& name,
        const nsCString& UAName,
        const nsCString& ID,
        const nsCString& vendor,
        const nsCString& sourceURL,
        const nsCString& updateURL) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AppInfo(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, version);
    // Sentinel = 'version'
    (msg__)->WriteSentinel(204210951);
    WriteIPDLParam(msg__, this, buildID);
    // Sentinel = 'buildID'
    (msg__)->WriteSentinel(187826846);
    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);
    WriteIPDLParam(msg__, this, UAName);
    // Sentinel = 'UAName'
    (msg__)->WriteSentinel(115540504);
    WriteIPDLParam(msg__, this, ID);
    // Sentinel = 'ID'
    (msg__)->WriteSentinel(14155918);
    WriteIPDLParam(msg__, this, vendor);
    // Sentinel = 'vendor'
    (msg__)->WriteSentinel(150405775);
    WriteIPDLParam(msg__, this, sourceURL);
    // Sentinel = 'sourceURL'
    (msg__)->WriteSentinel(316474245);
    WriteIPDLParam(msg__, this, updateURL);
    // Sentinel = 'updateURL'
    (msg__)->WriteSentinel(309265271);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AppInfo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRemoteType(const nsCString& aRemoteType) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RemoteType(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aRemoteType);
    // Sentinel = 'aRemoteType'
    (msg__)->WriteSentinel(437847152);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RemoteType", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendInitServiceWorkers(const ServiceWorkerConfiguration& aConfig) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitServiceWorkers(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aConfig);
    // Sentinel = 'aConfig'
    (msg__)->WriteSentinel(177078968);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitServiceWorkers", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendInitBlobURLs(const nsTArray<BlobURLRegistrationData>& registrations) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitBlobURLs(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, registrations);
    // Sentinel = 'registrations'
    (msg__)->WriteSentinel(648873359);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitBlobURLs", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendInitJSActorInfos(
        const nsTArray<JSProcessActorInfo>& aContentInfos,
        const nsTArray<JSWindowActorInfo>& aWindowInfos) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitJSActorInfos(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContentInfos);
    // Sentinel = 'aContentInfos'
    (msg__)->WriteSentinel(600638780);
    WriteIPDLParam(msg__, this, aWindowInfos);
    // Sentinel = 'aWindowInfos'
    (msg__)->WriteSentinel(518522073);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitJSActorInfos", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUnregisterJSWindowActor(const nsCString& name) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UnregisterJSWindowActor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UnregisterJSWindowActor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUnregisterJSProcessActor(const nsCString& name) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UnregisterJSProcessActor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UnregisterJSProcessActor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetXPCOMProcessAttributes(
        const XPCOMInitData& xpcomInit,
        const StructuredCloneData& initialData,
        const LookAndFeelData& lookAndFeeldata,
        const nsTArray<SystemFontListEntry>& systemFontList,
        const mozilla::Maybe<SharedMemoryHandle>& sharedUASheetHandle,
        const uintptr_t& sharedUASheetAddress,
        const nsTArray<SharedMemoryHandle>& sharedFontListBlocks) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetXPCOMProcessAttributes(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, xpcomInit);
    // Sentinel = 'xpcomInit'
    (msg__)->WriteSentinel(316998588);
    WriteIPDLParam(msg__, this, initialData);
    // Sentinel = 'initialData'
    (msg__)->WriteSentinel(451413093);
    WriteIPDLParam(msg__, this, lookAndFeeldata);
    // Sentinel = 'lookAndFeeldata'
    (msg__)->WriteSentinel(790627807);
    WriteIPDLParam(msg__, this, systemFontList);
    // Sentinel = 'systemFontList'
    (msg__)->WriteSentinel(746194393);
    WriteIPDLParam(msg__, this, sharedUASheetHandle);
    // Sentinel = 'sharedUASheetHandle'
    (msg__)->WriteSentinel(1232406355);
    WriteIPDLParam(msg__, this, sharedUASheetAddress);
    // Sentinel = 'sharedUASheetAddress'
    (msg__)->WriteSentinel(1361643469);
    WriteIPDLParam(msg__, this, sharedFontListBlocks);
    // Sentinel = 'sharedFontListBlocks'
    (msg__)->WriteSentinel(1412827145);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetXPCOMProcessAttributes", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendLastPrivateDocShellDestroyed() -> bool
{
    IPC::Message* msg__ = PContent::Msg_LastPrivateDocShellDestroyed(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_LastPrivateDocShellDestroyed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNotifyProcessPriorityChanged(const ProcessPriority& priority) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyProcessPriorityChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, priority);
    // Sentinel = 'priority'
    (msg__)->WriteSentinel(262865795);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyProcessPriorityChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendMinimizeMemoryUsage() -> bool
{
    IPC::Message* msg__ = PContent::Msg_MinimizeMemoryUsage(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_MinimizeMemoryUsage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendLoadAndRegisterSheet(
        nsIURI* uri,
        const uint32_t& type) -> bool
{
    IPC::Message* msg__ = PContent::Msg_LoadAndRegisterSheet(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);
    WriteIPDLParam(msg__, this, type);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(75760067);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_LoadAndRegisterSheet", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUnregisterSheet(
        nsIURI* uri,
        const uint32_t& type) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UnregisterSheet(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);
    WriteIPDLParam(msg__, this, type);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(75760067);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UnregisterSheet", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNotifyIdleObserver(
        const uint64_t& observerId,
        const nsCString& topic,
        const nsString& str) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyIdleObserver(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, observerId);
    // Sentinel = 'observerId'
    (msg__)->WriteSentinel(386335766);
    WriteIPDLParam(msg__, this, topic);
    // Sentinel = 'topic'
    (msg__)->WriteSentinel(109707808);
    WriteIPDLParam(msg__, this, str);
    // Sentinel = 'str'
    (msg__)->WriteSentinel(45482330);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyIdleObserver", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendInvokeDragSession(
        const nsTArray<IPCDataTransfer>& transfers,
        const uint32_t& action) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InvokeDragSession(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, transfers);
    // Sentinel = 'transfers'
    (msg__)->WriteSentinel(323290073);
    WriteIPDLParam(msg__, this, action);
    // Sentinel = 'action'
    (msg__)->WriteSentinel(143786623);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InvokeDragSession", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendEndDragSession(
        const bool& aDoneDrag,
        const bool& aUserCancelled,
        const LayoutDeviceIntPoint& aDragEndPoint,
        const uint32_t& aKeyModifiers) -> bool
{
    IPC::Message* msg__ = PContent::Msg_EndDragSession(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aDoneDrag);
    // Sentinel = 'aDoneDrag'
    (msg__)->WriteSentinel(280429414);
    WriteIPDLParam(msg__, this, aUserCancelled);
    // Sentinel = 'aUserCancelled'
    (msg__)->WriteSentinel(682493308);
    WriteIPDLParam(msg__, this, aDragEndPoint);
    // Sentinel = 'aDragEndPoint'
    (msg__)->WriteSentinel(567411969);
    WriteIPDLParam(msg__, this, aKeyModifiers);
    // Sentinel = 'aKeyModifiers'
    (msg__)->WriteSentinel(588645677);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_EndDragSession", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendDomainSetChanged(
        const uint32_t& aSetType,
        const uint32_t& aChangeType,
        nsIURI* aDomain) -> bool
{
    IPC::Message* msg__ = PContent::Msg_DomainSetChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aSetType);
    // Sentinel = 'aSetType'
    (msg__)->WriteSentinel(234292016);
    WriteIPDLParam(msg__, this, aChangeType);
    // Sentinel = 'aChangeType'
    (msg__)->WriteSentinel(417924170);
    WriteIPDLParam(msg__, this, aDomain);
    // Sentinel = 'aDomain'
    (msg__)->WriteSentinel(176685754);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DomainSetChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendShutdown() -> bool
{
    IPC::Message* msg__ = PContent::Msg_Shutdown(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendLoadProcessScript(const nsString& url) -> bool
{
    IPC::Message* msg__ = PContent::Msg_LoadProcessScript(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_LoadProcessScript", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdateWindow(const uintptr_t& aChildId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateWindow(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aChildId);
    // Sentinel = 'aChildId'
    (msg__)->WriteSentinel(221512435);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateWindow", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNotifyPresentationReceiverLaunched(
        PBrowserParent* aIframe,
        const nsString& aSessionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPresentationReceiverLaunched(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(aIframe, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aIframe);
    // Sentinel = 'aIframe'
    (msg__)->WriteSentinel(176947894);
    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPresentationReceiverLaunched", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNotifyPresentationReceiverCleanUp(const nsString& aSessionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPresentationReceiverCleanUp(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPresentationReceiverCleanUp", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNotifyEmptyHTTPCache() -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyEmptyHTTPCache(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyEmptyHTTPCache", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPush(
        const nsCString& scope,
        const Principal& principal,
        const nsString& messageId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_Push(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, messageId);
    // Sentinel = 'messageId'
    (msg__)->WriteSentinel(310576019);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_Push", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPushWithData(
        const nsCString& scope,
        const Principal& principal,
        const nsString& messageId,
        const nsTArray<uint8_t>& data) -> bool
{
    IPC::Message* msg__ = PContent::Msg_PushWithData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, messageId);
    // Sentinel = 'messageId'
    (msg__)->WriteSentinel(310576019);
    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PushWithData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPushSubscriptionChange(
        const nsCString& scope,
        const Principal& principal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_PushSubscriptionChange(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PushSubscriptionChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGetFilesResponse(
        const nsID& aID,
        const GetFilesResponseResult& aResult) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetFilesResponse(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aResult);
    // Sentinel = 'aResult'
    (msg__)->WriteSentinel(185205473);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetFilesResponse", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendBlobURLRegistration(
        const nsCString& aURI,
        const IPCBlob& aBlob,
        const Principal& aPrincipal,
        const mozilla::Maybe<nsID>& aAgentClusterId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_BlobURLRegistration(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);
    WriteIPDLParam(msg__, this, aBlob);
    // Sentinel = 'aBlob'
    (msg__)->WriteSentinel(91619809);
    WriteIPDLParam(msg__, this, aPrincipal);
    // Sentinel = 'aPrincipal'
    (msg__)->WriteSentinel(364381188);
    WriteIPDLParam(msg__, this, aAgentClusterId);
    // Sentinel = 'aAgentClusterId'
    (msg__)->WriteSentinel(776537568);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BlobURLRegistration", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendBlobURLUnregistration(const nsCString& aURI) -> bool
{
    IPC::Message* msg__ = PContent::Msg_BlobURLUnregistration(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BlobURLUnregistration", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGMPsChanged(const nsTArray<GMPCapabilityData>& capabilities) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GMPsChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, capabilities);
    // Sentinel = 'capabilities'
    (msg__)->WriteSentinel(527434987);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GMPsChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPParentToChildStreamConstructor() -> PParentToChildStreamParent*
{
    PParentToChildStreamParent* actor = (static_cast<ContentParent*>(this))->AllocPParentToChildStreamParent();
    return SendPParentToChildStreamConstructor(actor);
}

auto PContentParent::SendPParentToChildStreamConstructor(PParentToChildStreamParent* actor) -> PParentToChildStreamParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PParentToChildStreamParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPParentToChildStreamParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PParentToChildStreamConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PParentToChildStreamConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PParentToChildStreamParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PParentToChildStreamMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentParent::SendProvideAnonymousTemporaryFile(
        const uint64_t& aID,
        const FileDescOrError& aFD) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ProvideAnonymousTemporaryFile(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aFD);
    // Sentinel = 'aFD'
    (msg__)->WriteSentinel(32899308);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ProvideAnonymousTemporaryFile", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetPermissionsWithKey(
        const nsCString& aPermissionKey,
        const nsTArray<Permission>& aPermissions) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetPermissionsWithKey(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPermissionKey);
    // Sentinel = 'aPermissionKey'
    (msg__)->WriteSentinel(708511156);
    WriteIPDLParam(msg__, this, aPermissions);
    // Sentinel = 'aPermissions'
    (msg__)->WriteSentinel(527697150);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetPermissionsWithKey", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRefreshScreens(const nsTArray<ScreenDetails>& aScreens) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RefreshScreens(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aScreens);
    // Sentinel = 'aScreens'
    (msg__)->WriteSentinel(234029877);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RefreshScreens", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPRemoteLazyInputStreamConstructor(
        PRemoteLazyInputStreamParent* actor,
        const nsID& aID,
        const uint64_t& aSize) -> PRemoteLazyInputStreamParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PRemoteLazyInputStreamParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPRemoteLazyInputStreamParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PRemoteLazyInputStreamConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aSize);
    // Sentinel = 'aSize'
    (msg__)->WriteSentinel(97124861);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PRemoteLazyInputStreamConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PRemoteLazyInputStreamParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PRemoteLazyInputStreamMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentParent::SendSetPluginList(
        const uint32_t& pluginEpoch,
        const nsTArray<PluginTag>& plugins,
        const nsTArray<FakePluginTag>& fakePlugins) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetPluginList(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, pluginEpoch);
    // Sentinel = 'pluginEpoch'
    (msg__)->WriteSentinel(460260479);
    WriteIPDLParam(msg__, this, plugins);
    // Sentinel = 'plugins'
    (msg__)->WriteSentinel(202244867);
    WriteIPDLParam(msg__, this, fakePlugins);
    // Sentinel = 'fakePlugins'
    (msg__)->WriteSentinel(440992890);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetPluginList", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendShareCodeCoverageMutex(const CrossProcessMutexHandle& handle) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ShareCodeCoverageMutex(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, handle);
    // Sentinel = 'handle'
    (msg__)->WriteSentinel(142344813);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ShareCodeCoverageMutex", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendFlushCodeCoverageCounters(
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_FlushCodeCoverageCounters(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FlushCodeCoverageCounters", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendFlushCodeCoverageCounters() -> RefPtr<FlushCodeCoverageCountersPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendFlushCodeCoverageCounters([promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendSetInputEventQueueEnabled() -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetInputEventQueueEnabled(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetInputEventQueueEnabled", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendFlushInputEventQueue() -> bool
{
    IPC::Message* msg__ = PContent::Msg_FlushInputEventQueue(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FlushInputEventQueue", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendResumeInputEventQueue() -> bool
{
    IPC::Message* msg__ = PContent::Msg_ResumeInputEventQueue(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ResumeInputEventQueue", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSuspendInputEventQueue() -> bool
{
    IPC::Message* msg__ = PContent::Msg_SuspendInputEventQueue(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SuspendInputEventQueue", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendAddDynamicScalars(const nsTArray<DynamicScalarDefinition>& definitions) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AddDynamicScalars(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, definitions);
    // Sentinel = 'definitions'
    (msg__)->WriteSentinel(455279773);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AddDynamicScalars", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendCrossProcessRedirect(
        const RedirectToRealChannelArgs& args,
        nsTArray<Endpoint<mozilla::extensions::PStreamFilterParent>>&& aEndpoint,
        mozilla::ipc::ResolveCallback<nsresult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_CrossProcessRedirect(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, args);
    // Sentinel = 'args'
    (msg__)->WriteSentinel(69140910);
    WriteIPDLParam(msg__, this, std::move(aEndpoint));
    // Sentinel = 'aEndpoint'
    (msg__)->WriteSentinel(292225955);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CrossProcessRedirect", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendCrossProcessRedirect(
        const RedirectToRealChannelArgs& args,
        nsTArray<Endpoint<mozilla::extensions::PStreamFilterParent>>&& aEndpoint) -> RefPtr<CrossProcessRedirectPromise>
{
    RefPtr<MozPromise<nsresult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsresult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendCrossProcessRedirect(std::move(args), std::move(aEndpoint), [promise__](nsresult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendStartDelayedAutoplayMediaComponents(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_StartDelayedAutoplayMediaComponents(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_StartDelayedAutoplayMediaComponents", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUpdateMediaControlAction(
        const MaybeDiscardedBrowsingContext& aContext,
        const MediaControlAction& aAction) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateMediaControlAction(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aAction);
    // Sentinel = 'aAction'
    (msg__)->WriteSentinel(175768256);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateMediaControlAction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRegisterBrowsingContextGroup(
        const uint64_t& aGroupId,
        const nsTArray<SyncedContextInitializer>& aInits) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RegisterBrowsingContextGroup(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGroupId);
    // Sentinel = 'aGroupId'
    (msg__)->WriteSentinel(233964316);
    WriteIPDLParam(msg__, this, aInits);
    // Sentinel = 'aInits'
    (msg__)->WriteSentinel(134677097);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RegisterBrowsingContextGroup", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendLoadURI(
        const MaybeDiscardedBrowsingContext& aContext,
        nsDocShellLoadState* aLoadState,
        const bool& aSetNavigating,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_LoadURI(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aLoadState);
    // Sentinel = 'aLoadState'
    (msg__)->WriteSentinel(349570019);
    WriteIPDLParam(msg__, this, aSetNavigating);
    // Sentinel = 'aSetNavigating'
    (msg__)->WriteSentinel(686556566);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_LoadURI", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendLoadURI(
        const MaybeDiscardedBrowsingContext& aContext,
        nsDocShellLoadState* aLoadState,
        const bool& aSetNavigating) -> RefPtr<LoadURIPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendLoadURI(std::move(aContext), std::move(aLoadState), std::move(aSetNavigating), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendInternalLoad(nsDocShellLoadState* aLoadState) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InternalLoad(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aLoadState);
    // Sentinel = 'aLoadState'
    (msg__)->WriteSentinel(349570019);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InternalLoad", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendDisplayLoadError(
        const MaybeDiscardedBrowsingContext& aContext,
        const nsString& aURI) -> bool
{
    IPC::Message* msg__ = PContent::Msg_DisplayLoadError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DisplayLoadError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGoBack(
        const MaybeDiscardedBrowsingContext& aContext,
        const mozilla::Maybe<int32_t>& aCancelContentJSEpoch,
        const bool& aRequireUserInteraction) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GoBack(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCancelContentJSEpoch);
    // Sentinel = 'aCancelContentJSEpoch'
    (msg__)->WriteSentinel(1473841167);
    WriteIPDLParam(msg__, this, aRequireUserInteraction);
    // Sentinel = 'aRequireUserInteraction'
    (msg__)->WriteSentinel(1862076766);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GoBack", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGoForward(
        const MaybeDiscardedBrowsingContext& aContext,
        const mozilla::Maybe<int32_t>& aCancelContentJSEpoch,
        const bool& aRequireUserInteraction) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GoForward(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCancelContentJSEpoch);
    // Sentinel = 'aCancelContentJSEpoch'
    (msg__)->WriteSentinel(1473841167);
    WriteIPDLParam(msg__, this, aRequireUserInteraction);
    // Sentinel = 'aRequireUserInteraction'
    (msg__)->WriteSentinel(1862076766);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GoForward", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendGoToIndex(
        const MaybeDiscardedBrowsingContext& aContext,
        const int32_t& aIndex,
        const mozilla::Maybe<int32_t>& aCancelContentJSEpoch) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GoToIndex(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);
    WriteIPDLParam(msg__, this, aCancelContentJSEpoch);
    // Sentinel = 'aCancelContentJSEpoch'
    (msg__)->WriteSentinel(1473841167);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GoToIndex", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendReload(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint32_t& aReloadFlags) -> bool
{
    IPC::Message* msg__ = PContent::Msg_Reload(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aReloadFlags);
    // Sentinel = 'aReloadFlags'
    (msg__)->WriteSentinel(499451046);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_Reload", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendStopLoad(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint32_t& aStopFlags) -> bool
{
    IPC::Message* msg__ = PContent::Msg_StopLoad(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aStopFlags);
    // Sentinel = 'aStopFlags'
    (msg__)->WriteSentinel(360317941);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_StopLoad", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendOnAllowAccessFor(
        const MaybeDiscardedBrowsingContext& aParentContext,
        const nsCString& aTrackingOrigin,
        const uint32_t& aCookieBehavior,
        const StorageAccessPermissionGrantedReason& aReason) -> bool
{
    IPC::Message* msg__ = PContent::Msg_OnAllowAccessFor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aParentContext);
    // Sentinel = 'aParentContext'
    (msg__)->WriteSentinel(692454833);
    WriteIPDLParam(msg__, this, aTrackingOrigin);
    // Sentinel = 'aTrackingOrigin'
    (msg__)->WriteSentinel(792331773);
    WriteIPDLParam(msg__, this, aCookieBehavior);
    // Sentinel = 'aCookieBehavior'
    (msg__)->WriteSentinel(772408812);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_OnAllowAccessFor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendOnContentBlockingDecision(
        const MaybeDiscardedBrowsingContext& aContext,
        const BlockingDecision& aReason,
        const uint32_t& aRejectedReason) -> bool
{
    IPC::Message* msg__ = PContent::Msg_OnContentBlockingDecision(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);
    WriteIPDLParam(msg__, this, aRejectedReason);
    // Sentinel = 'aRejectedReason'
    (msg__)->WriteSentinel(781059568);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_OnContentBlockingDecision", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendAbortOrientationPendingPromises(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AbortOrientationPendingPromises(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AbortOrientationPendingPromises", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendHistoryCommitIndexAndLength(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint32_t& aIndex,
        const uint32_t& aLength,
        const nsID& aChangeID) -> bool
{
    IPC::Message* msg__ = PContent::Msg_HistoryCommitIndexAndLength(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);
    WriteIPDLParam(msg__, this, aLength);
    // Sentinel = 'aLength'
    (msg__)->WriteSentinel(179045060);
    WriteIPDLParam(msg__, this, aChangeID);
    // Sentinel = 'aChangeID'
    (msg__)->WriteSentinel(275710773);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_HistoryCommitIndexAndLength", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendDispatchLocationChangeEvent(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_DispatchLocationChangeEvent(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DispatchLocationChangeEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendDispatchBeforeUnloadToSubtree(
        const MaybeDiscardedBrowsingContext& aStartingAt,
        mozilla::ipc::ResolveCallback<PermitUnloadResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_DispatchBeforeUnloadToSubtree(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aStartingAt);
    // Sentinel = 'aStartingAt'
    (msg__)->WriteSentinel(441844835);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DispatchBeforeUnloadToSubtree", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendDispatchBeforeUnloadToSubtree(const MaybeDiscardedBrowsingContext& aStartingAt) -> RefPtr<DispatchBeforeUnloadToSubtreePromise>
{
    RefPtr<MozPromise<PermitUnloadResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<PermitUnloadResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendDispatchBeforeUnloadToSubtree(std::move(aStartingAt), [promise__](PermitUnloadResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendUpdateMediaCodecsSupported(
        const RemoteDecodeIn& aLocation,
        const MediaCodecsSupported& aSupported) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateMediaCodecsSupported(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aLocation);
    // Sentinel = 'aLocation'
    (msg__)->WriteSentinel(292094875);
    WriteIPDLParam(msg__, this, aSupported);
    // Sentinel = 'aSupported'
    (msg__)->WriteSentinel(378799144);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateMediaCodecsSupported", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendScriptError(
        const nsString& message,
        const nsString& sourceName,
        const nsString& sourceLine,
        const uint32_t& lineNumber,
        const uint32_t& colNumber,
        const uint32_t& flags,
        const nsCString& category,
        const bool& privateWindow,
        const uint64_t& innerWindowId,
        const bool& fromChromeContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ScriptError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);
    WriteIPDLParam(msg__, this, sourceName);
    // Sentinel = 'sourceName'
    (msg__)->WriteSentinel(387580947);
    WriteIPDLParam(msg__, this, sourceLine);
    // Sentinel = 'sourceLine'
    (msg__)->WriteSentinel(388760602);
    WriteIPDLParam(msg__, this, lineNumber);
    // Sentinel = 'lineNumber'
    (msg__)->WriteSentinel(374932498);
    WriteIPDLParam(msg__, this, colNumber);
    // Sentinel = 'colNumber'
    (msg__)->WriteSentinel(304284584);
    WriteIPDLParam(msg__, this, flags);
    // Sentinel = 'flags'
    (msg__)->WriteSentinel(102171150);
    WriteIPDLParam(msg__, this, category);
    // Sentinel = 'category'
    (msg__)->WriteSentinel(247333727);
    WriteIPDLParam(msg__, this, privateWindow);
    // Sentinel = 'privateWindow'
    (msg__)->WriteSentinel(642778484);
    WriteIPDLParam(msg__, this, innerWindowId);
    // Sentinel = 'innerWindowId'
    (msg__)->WriteSentinel(627967298);
    WriteIPDLParam(msg__, this, fromChromeContext);
    // Sentinel = 'fromChromeContext'
    (msg__)->WriteSentinel(1038485240);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ScriptError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendReportFrameTimingData(
        const uint64_t& innerWindowId,
        const nsString& entryName,
        const nsString& initiatorType,
        UniquePtr<PerformanceTimingData>&& aData) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ReportFrameTimingData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, innerWindowId);
    // Sentinel = 'innerWindowId'
    (msg__)->WriteSentinel(627967298);
    WriteIPDLParam(msg__, this, entryName);
    // Sentinel = 'entryName'
    (msg__)->WriteSentinel(315950004);
    WriteIPDLParam(msg__, this, initiatorType);
    // Sentinel = 'initiatorType'
    (msg__)->WriteSentinel(642647414);
    WriteIPDLParam(msg__, this, std::move(aData));
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ReportFrameTimingData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendCommitBrowsingContextTransaction(
        const MaybeDiscardedBrowsingContext& aContext,
        const BrowsingContextTransaction& aTransaction,
        const uint64_t& aEpoch) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CommitBrowsingContextTransaction(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aTransaction);
    // Sentinel = 'aTransaction'
    (msg__)->WriteSentinel(523371752);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CommitBrowsingContextTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendAsyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AsyncMessage(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AsyncMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendNotifyPushSubscriptionModifiedObservers(
        const nsCString& scope,
        const Principal& principal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPushSubscriptionModifiedObservers(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushSubscriptionModifiedObservers", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendPushError(
        const nsCString& scope,
        const Principal& principal,
        const nsString& message,
        const uint32_t& flags) -> bool
{
    IPC::Message* msg__ = PContent::Msg_PushError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);
    WriteIPDLParam(msg__, this, flags);
    // Sentinel = 'flags'
    (msg__)->WriteSentinel(102171150);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PushError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendCreateBrowsingContext(
        const uint64_t& aGroupId,
        const BrowsingContextInitializer& aInit) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CreateBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGroupId);
    // Sentinel = 'aGroupId'
    (msg__)->WriteSentinel(233964316);
    WriteIPDLParam(msg__, this, aInit);
    // Sentinel = 'aInit'
    (msg__)->WriteSentinel(94241270);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CreateBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendDiscardBrowsingContext(
        const MaybeDiscardedBrowsingContext& aContext,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_DiscardBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DiscardBrowsingContext", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendDiscardBrowsingContext(const MaybeDiscardedBrowsingContext& aContext) -> RefPtr<DiscardBrowsingContextPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendDiscardBrowsingContext(std::move(aContext), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendAdjustWindowFocus(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aCheckPermission,
        const bool& aIsVisible) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AdjustWindowFocus(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCheckPermission);
    // Sentinel = 'aCheckPermission'
    (msg__)->WriteSentinel(878380649);
    WriteIPDLParam(msg__, this, aIsVisible);
    // Sentinel = 'aIsVisible'
    (msg__)->WriteSentinel(353567724);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AdjustWindowFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendWindowClose(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aTrustedCaller) -> bool
{
    IPC::Message* msg__ = PContent::Msg_WindowClose(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aTrustedCaller);
    // Sentinel = 'aTrustedCaller'
    (msg__)->WriteSentinel(706479520);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_WindowClose", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendWindowFocus(
        const MaybeDiscardedBrowsingContext& aContext,
        const CallerType& aCallerType,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_WindowFocus(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_WindowFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendWindowBlur(
        const MaybeDiscardedBrowsingContext& aContext,
        const CallerType& aCallerType) -> bool
{
    IPC::Message* msg__ = PContent::Msg_WindowBlur(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_WindowBlur", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendRaiseWindow(
        const MaybeDiscardedBrowsingContext& aContext,
        const CallerType& aCallerType,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RaiseWindow(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RaiseWindow", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendClearFocus(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ClearFocus(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ClearFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetFocusedBrowsingContext(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetFocusedBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetFocusedBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetActiveBrowsingContext(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetActiveBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetActiveBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendUnsetActiveBrowsingContext(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UnsetActiveBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UnsetActiveBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetFocusedElement(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aNeedsFocus) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetFocusedElement(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aNeedsFocus);
    // Sentinel = 'aNeedsFocus'
    (msg__)->WriteSentinel(419759185);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetFocusedElement", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendFinalizeFocusOuter(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aCanFocus,
        const CallerType& aCallerType) -> bool
{
    IPC::Message* msg__ = PContent::Msg_FinalizeFocusOuter(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCanFocus);
    // Sentinel = 'aCanFocus'
    (msg__)->WriteSentinel(275055476);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FinalizeFocusOuter", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendBlurToChild(
        const MaybeDiscardedBrowsingContext& aFocusedBrowsingContext,
        const MaybeDiscardedBrowsingContext& aBrowsingContextToClear,
        const MaybeDiscardedBrowsingContext& aAncestorBrowsingContextToFocus,
        const bool& aIsLeavingDocument,
        const bool& aAdjustWidget,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_BlurToChild(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFocusedBrowsingContext);
    // Sentinel = 'aFocusedBrowsingContext'
    (msg__)->WriteSentinel(1842153819);
    WriteIPDLParam(msg__, this, aBrowsingContextToClear);
    // Sentinel = 'aBrowsingContextToClear'
    (msg__)->WriteSentinel(1859127612);
    WriteIPDLParam(msg__, this, aAncestorBrowsingContextToFocus);
    // Sentinel = 'aAncestorBrowsingContextToFocus'
    (msg__)->WriteSentinel(3344239764);
    WriteIPDLParam(msg__, this, aIsLeavingDocument);
    // Sentinel = 'aIsLeavingDocument'
    (msg__)->WriteSentinel(1103169315);
    WriteIPDLParam(msg__, this, aAdjustWidget);
    // Sentinel = 'aAdjustWidget'
    (msg__)->WriteSentinel(594609457);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BlurToChild", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendSetupFocusedAndActive(
        const MaybeDiscardedBrowsingContext& aFocusedBrowsingContext,
        const MaybeDiscardedBrowsingContext& aActiveBrowsingContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetupFocusedAndActive(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFocusedBrowsingContext);
    // Sentinel = 'aFocusedBrowsingContext'
    (msg__)->WriteSentinel(1842153819);
    WriteIPDLParam(msg__, this, aActiveBrowsingContext);
    // Sentinel = 'aActiveBrowsingContext'
    (msg__)->WriteSentinel(1678444782);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetupFocusedAndActive", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendReviseActiveBrowsingContext(
        const MaybeDiscardedBrowsingContext& aActiveBrowsingContext,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ReviseActiveBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aActiveBrowsingContext);
    // Sentinel = 'aActiveBrowsingContext'
    (msg__)->WriteSentinel(1678444782);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ReviseActiveBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendMaybeExitFullscreen(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_MaybeExitFullscreen(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_MaybeExitFullscreen", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendWindowPostMessage(
        const MaybeDiscardedBrowsingContext& aContext,
        const ClonedOrErrorMessageData& aMessage,
        const PostMessageData& aData) -> bool
{
    IPC::Message* msg__ = PContent::Msg_WindowPostMessage(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_WindowPostMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendCommitWindowContextTransaction(
        const MaybeDiscardedWindowContext& aContext,
        const WindowContextTransaction& aTransaction,
        const uint64_t& aEpoch) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CommitWindowContextTransaction(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aTransaction);
    // Sentinel = 'aTransaction'
    (msg__)->WriteSentinel(523371752);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CommitWindowContextTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendCreateWindowContext(const WindowContextInitializer& aInit) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CreateWindowContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aInit);
    // Sentinel = 'aInit'
    (msg__)->WriteSentinel(94241270);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CreateWindowContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentParent::SendDiscardWindowContext(
        const uint64_t& aContextId,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_DiscardWindowContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContextId);
    // Sentinel = 'aContextId'
    (msg__)->WriteSentinel(361497588);




    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DiscardWindowContext", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendDiscardWindowContext(const uint64_t& aContextId) -> RefPtr<DiscardWindowContextPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendDiscardWindowContext(std::move(aContextId), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::SendFlushFOGData(
        mozilla::ipc::ResolveCallback<ByteBuf>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_FlushFOGData(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FlushFOGData", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentParent::SendFlushFOGData() -> RefPtr<FlushFOGDataPromise>
{
    RefPtr<MozPromise<ByteBuf, ResponseRejectReason, true>::Private> promise__ = new MozPromise<ByteBuf, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendFlushFOGData([promise__](ByteBuf&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBrowserMsgStart:
{
            PBrowserParent* actor = static_cast<PBrowserParent*>(aListener);
            auto& container = mManagedPBrowserParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PContentPermissionRequestMsgStart:
{
            PContentPermissionRequestParent* actor = static_cast<PContentPermissionRequestParent*>(aListener);
            auto& container = mManagedPContentPermissionRequestParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PCycleCollectWithLogsMsgStart:
{
            PCycleCollectWithLogsParent* actor = static_cast<PCycleCollectWithLogsParent*>(aListener);
            auto& container = mManagedPCycleCollectWithLogsParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PExternalHelperAppMsgStart:
{
            PExternalHelperAppParent* actor = static_cast<PExternalHelperAppParent*>(aListener);
            auto& container = mManagedPExternalHelperAppParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PFileDescriptorSetMsgStart:
{
            PFileDescriptorSetParent* actor = static_cast<PFileDescriptorSetParent*>(aListener);
            auto& container = mManagedPFileDescriptorSetParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PHalMsgStart:
{
            PHalParent* actor = static_cast<PHalParent*>(aListener);
            auto& container = mManagedPHalParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PHandlerServiceMsgStart:
{
            PHandlerServiceParent* actor = static_cast<PHandlerServiceParent*>(aListener);
            auto& container = mManagedPHandlerServiceParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PHeapSnapshotTempFileHelperMsgStart:
{
            PHeapSnapshotTempFileHelperParent* actor = static_cast<PHeapSnapshotTempFileHelperParent*>(aListener);
            auto& container = mManagedPHeapSnapshotTempFileHelperParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PRemoteLazyInputStreamMsgStart:
{
            PRemoteLazyInputStreamParent* actor = static_cast<PRemoteLazyInputStreamParent*>(aListener);
            auto& container = mManagedPRemoteLazyInputStreamParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PMediaMsgStart:
{
            PMediaParent* actor = static_cast<PMediaParent*>(aListener);
            auto& container = mManagedPMediaParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PNeckoMsgStart:
{
            PNeckoParent* actor = static_cast<PNeckoParent*>(aListener);
            auto& container = mManagedPNeckoParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case POfflineCacheUpdateMsgStart:
{
            POfflineCacheUpdateParent* actor = static_cast<POfflineCacheUpdateParent*>(aListener);
            auto& container = mManagedPOfflineCacheUpdateParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPrintingMsgStart:
{
            PPrintingParent* actor = static_cast<PPrintingParent*>(aListener);
            auto& container = mManagedPPrintingParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PChildToParentStreamMsgStart:
{
            PChildToParentStreamParent* actor = static_cast<PChildToParentStreamParent*>(aListener);
            auto& container = mManagedPChildToParentStreamParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PParentToChildStreamMsgStart:
{
            PParentToChildStreamParent* actor = static_cast<PParentToChildStreamParent*>(aListener);
            auto& container = mManagedPParentToChildStreamParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PSpeechSynthesisMsgStart:
{
            PSpeechSynthesisParent* actor = static_cast<PSpeechSynthesisParent*>(aListener);
            auto& container = mManagedPSpeechSynthesisParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PTestShellMsgStart:
{
            PTestShellParent* actor = static_cast<PTestShellParent*>(aListener);
            auto& container = mManagedPTestShellParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PRemoteSpellcheckEngineMsgStart:
{
            PRemoteSpellcheckEngineParent* actor = static_cast<PRemoteSpellcheckEngineParent*>(aListener);
            auto& container = mManagedPRemoteSpellcheckEngineParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PWebBrowserPersistDocumentMsgStart:
{
            PWebBrowserPersistDocumentParent* actor = static_cast<PWebBrowserPersistDocumentParent*>(aListener);
            auto& container = mManagedPWebBrowserPersistDocumentParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PWebrtcGlobalMsgStart:
{
            PWebrtcGlobalParent* actor = static_cast<PWebrtcGlobalParent*>(aListener);
            auto& container = mManagedPWebrtcGlobalParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPresentationMsgStart:
{
            PPresentationParent* actor = static_cast<PPresentationParent*>(aListener);
            auto& container = mManagedPPresentationParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PURLClassifierMsgStart:
{
            PURLClassifierParent* actor = static_cast<PURLClassifierParent*>(aListener);
            auto& container = mManagedPURLClassifierParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PURLClassifierLocalMsgStart:
{
            PURLClassifierLocalParent* actor = static_cast<PURLClassifierLocalParent*>(aListener);
            auto& container = mManagedPURLClassifierLocalParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PScriptCacheMsgStart:
{
            PScriptCacheParent* actor = static_cast<PScriptCacheParent*>(aListener);
            auto& container = mManagedPScriptCacheParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PLoginReputationMsgStart:
{
            PLoginReputationParent* actor = static_cast<PLoginReputationParent*>(aListener);
            auto& container = mManagedPLoginReputationParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PSessionStorageObserverMsgStart:
{
            PSessionStorageObserverParent* actor = static_cast<PSessionStorageObserverParent*>(aListener);
            auto& container = mManagedPSessionStorageObserverParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBenchmarkStorageMsgStart:
{
            PBenchmarkStorageParent* actor = static_cast<PBenchmarkStorageParent*>(aListener);
            auto& container = mManagedPBenchmarkStorageParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PContentParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PContentPermissionRequestMsgStart:
        static_cast<ContentParent*>(this)->DeallocPContentPermissionRequestParent(static_cast<PContentPermissionRequestParent*>(aListener));
        return;
    case PCycleCollectWithLogsMsgStart:
        static_cast<ContentParent*>(this)->DeallocPCycleCollectWithLogsParent(static_cast<PCycleCollectWithLogsParent*>(aListener));
        return;
    case PFileDescriptorSetMsgStart:
        static_cast<ContentParent*>(this)->DeallocPFileDescriptorSetParent(static_cast<PFileDescriptorSetParent*>(aListener));
        return;
    case PHalMsgStart:
        static_cast<ContentParent*>(this)->DeallocPHalParent(static_cast<PHalParent*>(aListener));
        return;
    case PHeapSnapshotTempFileHelperMsgStart:
        static_cast<ContentParent*>(this)->DeallocPHeapSnapshotTempFileHelperParent(static_cast<PHeapSnapshotTempFileHelperParent*>(aListener));
        return;
    case PMediaMsgStart:
        static_cast<ContentParent*>(this)->DeallocPMediaParent(static_cast<PMediaParent*>(aListener));
        return;
    case PNeckoMsgStart:
        static_cast<ContentParent*>(this)->DeallocPNeckoParent(static_cast<PNeckoParent*>(aListener));
        return;
    case PPrintingMsgStart:
        static_cast<ContentParent*>(this)->DeallocPPrintingParent(static_cast<PPrintingParent*>(aListener));
        return;
    case PChildToParentStreamMsgStart:
        static_cast<ContentParent*>(this)->DeallocPChildToParentStreamParent(static_cast<PChildToParentStreamParent*>(aListener));
        return;
    case PParentToChildStreamMsgStart:
        static_cast<ContentParent*>(this)->DeallocPParentToChildStreamParent(static_cast<PParentToChildStreamParent*>(aListener));
        return;
    case PSpeechSynthesisMsgStart:
        static_cast<ContentParent*>(this)->DeallocPSpeechSynthesisParent(static_cast<PSpeechSynthesisParent*>(aListener));
        return;
    case PTestShellMsgStart:
        static_cast<ContentParent*>(this)->DeallocPTestShellParent(static_cast<PTestShellParent*>(aListener));
        return;
    case PRemoteSpellcheckEngineMsgStart:
        static_cast<ContentParent*>(this)->DeallocPRemoteSpellcheckEngineParent(static_cast<PRemoteSpellcheckEngineParent*>(aListener));
        return;
    case PWebBrowserPersistDocumentMsgStart:
        static_cast<ContentParent*>(this)->DeallocPWebBrowserPersistDocumentParent(static_cast<PWebBrowserPersistDocumentParent*>(aListener));
        return;
    case PWebrtcGlobalMsgStart:
        static_cast<ContentParent*>(this)->DeallocPWebrtcGlobalParent(static_cast<PWebrtcGlobalParent*>(aListener));
        return;
    case PPresentationMsgStart:
        static_cast<ContentParent*>(this)->DeallocPPresentationParent(static_cast<PPresentationParent*>(aListener));
        return;
    case PURLClassifierMsgStart:
        static_cast<ContentParent*>(this)->DeallocPURLClassifierParent(static_cast<PURLClassifierParent*>(aListener));
        return;
    case PURLClassifierLocalMsgStart:
        static_cast<ContentParent*>(this)->DeallocPURLClassifierLocalParent(static_cast<PURLClassifierLocalParent*>(aListener));
        return;
    case PScriptCacheMsgStart:
        static_cast<ContentParent*>(this)->DeallocPScriptCacheParent(static_cast<PScriptCacheParent*>(aListener));
        return;
    case PLoginReputationMsgStart:
        static_cast<ContentParent*>(this)->DeallocPLoginReputationParent(static_cast<PLoginReputationParent*>(aListener));
        return;
    case PSessionStorageObserverMsgStart:
        static_cast<ContentParent*>(this)->DeallocPSessionStorageObserverParent(static_cast<PSessionStorageObserverParent*>(aListener));
        return;
    case PBenchmarkStorageMsgStart:
        static_cast<ContentParent*>(this)->DeallocPBenchmarkStorageParent(static_cast<PBenchmarkStorageParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PContentParent::OnMessageReceived(const Message& msg__) -> PContentParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PContent::Msg_ConstructPopupBrowser__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ConstructPopupBrowser", OTHER);

            PickleIterator iter__{msg__};
            ManagedEndpoint<mozilla::dom::PBrowserParent> browserEp{};
            ManagedEndpoint<mozilla::dom::PWindowGlobalParent> windowEp{};
            TabId tabId{};
            IPCTabContext context{};
            WindowGlobalInit windowInit{};
            uint32_t chromeFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(browserEp)))))) {
                FatalError("Error deserializing 'ManagedEndpoint<mozilla::dom::PBrowserParent>'");
                return MsgValueError;
            }
            // Sentinel = 'browserEp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 318833594)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ManagedEndpoint<mozilla::dom::PBrowserParent>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(windowEp)))))) {
                FatalError("Error deserializing 'ManagedEndpoint<mozilla::dom::PWindowGlobalParent>'");
                return MsgValueError;
            }
            // Sentinel = 'windowEp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 255984462)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ManagedEndpoint<mozilla::dom::PWindowGlobalParent>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(tabId)))))) {
                FatalError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            // Sentinel = 'tabId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99156453)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(context)))))) {
                FatalError("Error deserializing 'IPCTabContext'");
                return MsgValueError;
            }
            // Sentinel = 'context'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 199164678)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCTabContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(windowInit)))))) {
                FatalError("Error deserializing 'WindowGlobalInit'");
                return MsgValueError;
            }
            // Sentinel = 'windowInit'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 388891693)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowGlobalInit'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(chromeFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'chromeFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 446760044)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvConstructPopupBrowser(std::move(browserEp), std::move(windowEp), std::move(tabId), std::move(context), std::move(windowInit), std::move(chromeFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CloneDocumentTreeInto__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CloneDocumentTreeInto", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aSourceBc{};
            MaybeDiscardedBrowsingContext aTargetBc{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSourceBc)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aSourceBc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296551288)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTargetBc)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aTargetBc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 289342318)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvCloneDocumentTreeInto(std::move(aSourceBc), std::move(aTargetBc))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_PFileDescriptorSetConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Msg_PFileDescriptorSetConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PFileDescriptorSetConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            FileDescriptor fd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fd)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'fd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20054219)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PFileDescriptorSetParent* actor = (static_cast<ContentParent*>(this))->AllocPFileDescriptorSetParent(fd);
            if (!actor) {
                NS_WARNING("Cannot bind null PFileDescriptorSetParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPFileDescriptorSetParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPFileDescriptorSetConstructor(std::move(actor), std::move(fd))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_PWebBrowserPersistDocumentConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Msg_PWebBrowserPersistDocumentConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PWebBrowserPersistDocumentConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            PBrowserParent* aBrowser{};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBrowser)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'aBrowser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 237372230)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PWebBrowserPersistDocumentParent* actor = (static_cast<ContentParent*>(this))->AllocPWebBrowserPersistDocumentParent(aBrowser, aContext);
            if (!actor) {
                NS_WARNING("Cannot bind null PWebBrowserPersistDocumentParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPWebBrowserPersistDocumentParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPWebBrowserPersistDocumentConstructor(std::move(actor), aBrowser, std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RawMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RawMessage", OTHER);

            PickleIterator iter__{msg__};
            JSActorMessageMeta aMetadata{};
            mozilla::Maybe<ClonedMessageData> aData{};
            mozilla::Maybe<ClonedMessageData> aStack{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMetadata)))))) {
                FatalError("Error deserializing 'JSActorMessageMeta'");
                return MsgValueError;
            }
            // Sentinel = 'aMetadata'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 288752515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'JSActorMessageMeta'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStack)))))) {
                FatalError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            // Sentinel = 'aStack'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135201368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRawMessage(std::move(aMetadata), std::move(aData), std::move(aStack))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_RequestMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RequestMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<uint32_t> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                uint32_t aGeneration{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                    FatalError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'aGeneration'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aGeneration));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_GetUntrustedModulesData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetUntrustedModulesData", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<mozilla::Maybe<UntrustedModulesData>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                mozilla::Maybe<UntrustedModulesData> data{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                    FatalError("Error deserializing 'UntrustedModulesData?'");
                    return MsgValueError;
                }
                // Sentinel = 'data'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'UntrustedModulesData?'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(data));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_PCycleCollectWithLogsConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PTestShellConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PScriptCacheConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_CollectPerfStatsJSON__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CollectPerfStatsJSON", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsCString> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsCString aStats{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStats)))))) {
                    FatalError("Error deserializing 'nsCString'");
                    return MsgValueError;
                }
                // Sentinel = 'aStats'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137953905)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aStats));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_PParentToChildStreamConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PRemoteLazyInputStreamConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_FlushCodeCoverageCounters__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FlushCodeCoverageCounters", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool unused{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(unused)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'unused'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 155517589)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(unused));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_CrossProcessRedirect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CrossProcessRedirect", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsresult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsresult rv{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rv)))))) {
                    FatalError("Error deserializing 'nsresult'");
                    return MsgValueError;
                }
                // Sentinel = 'rv'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 22806761)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(rv));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_LoadURI__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_LoadURI", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool aSuccess{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSuccess)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'aSuccess'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236323643)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aSuccess));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_DispatchBeforeUnloadToSubtree__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DispatchBeforeUnloadToSubtree", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<PermitUnloadResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                PermitUnloadResult result{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(result)))))) {
                    FatalError("Error deserializing 'PermitUnloadResult'");
                    return MsgValueError;
                }
                // Sentinel = 'result'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223840)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'PermitUnloadResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(result));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Msg_SessionHistoryUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryUpdate", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aTopContext{};
            int32_t aIndex{};
            int32_t aLength{};
            nsID aChangeID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTopContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aTopContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 433915002)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLength)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aLength'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179045060)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChangeID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aChangeID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 275710773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSessionHistoryUpdate(std::move(aTopContext), std::move(aIndex), std::move(aLength), std::move(aChangeID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SynchronizeLayoutHistoryState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SynchronizeLayoutHistoryState", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            RefPtr<nsILayoutHistoryState> aState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'nsILayoutHistoryState'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsILayoutHistoryState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSynchronizeLayoutHistoryState(std::move(aContext), aState)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SessionHistoryEntryTitle__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryEntryTitle", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            nsString aTitle{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTitle)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aTitle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137167460)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSessionHistoryEntryTitle(std::move(aContext), std::move(aTitle))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SessionHistoryEntryScrollRestorationIsManual__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryEntryScrollRestorationIsManual", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aIsManual{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsManual)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsManual'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 282526588)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSessionHistoryEntryScrollRestorationIsManual(std::move(aContext), std::move(aIsManual))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SessionHistoryEntryCacheKey__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryEntryCacheKey", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint32_t aCacheKey{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCacheKey)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCacheKey'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 272827231)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSessionHistoryEntryCacheKey(std::move(aContext), std::move(aCacheKey))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SessionHistoryEntryStoreWindowNameInContiguousEntries__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryEntryStoreWindowNameInContiguousEntries", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            nsString aName{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92537315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSessionHistoryEntryStoreWindowNameInContiguousEntries(std::move(aContext), std::move(aName))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GetLoadingSessionHistoryInfoFromParent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetLoadingSessionHistoryInfoFromParent", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetLoadingSessionHistoryInfoFromParentResolver resolver = [proxy__, seqno__, id__](Tuple<const mozilla::Maybe<LoadingSessionHistoryInfo>&, const int32_t&, const int32_t&> aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_GetLoadingSessionHistoryInfoFromParent(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, mozilla::Get<0>(aParam));
                // Sentinel = 'aLoadingInfo'
                (reply__)->WriteSentinel(500827308);
                WriteIPDLParam(reply__, self__, mozilla::Get<1>(aParam));
                // Sentinel = 'aRequestedIndex'
                (reply__)->WriteSentinel(804849164);
                WriteIPDLParam(reply__, self__, mozilla::Get<2>(aParam));
                // Sentinel = 'aLength'
                (reply__)->WriteSentinel(179045060);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvGetLoadingSessionHistoryInfoFromParent(std::move(aContext), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitBackground__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitBackground", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::ipc::PBackgroundParent> aEndpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::ipc::PBackgroundParent>'");
                return MsgValueError;
            }
            // Sentinel = 'aEndpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::ipc::PBackgroundParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvInitBackground(std::move(aEndpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CreateGMPService__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateGMPService", OTHER);

            if ((!((static_cast<ContentParent*>(this))->RecvCreateGMPService()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitStreamFilter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitStreamFilter", OTHER);

            PickleIterator iter__{msg__};
            uint64_t channelId{};
            nsString addonId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(channelId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'channelId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301138823)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addonId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'addonId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 183894708)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            InitStreamFilterResolver resolver = [proxy__, seqno__, id__](Endpoint<mozilla::extensions::PStreamFilterChild>&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_InitStreamFilter(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, std::move(aParam));
                // Sentinel = 'aEndpoint'
                (reply__)->WriteSentinel(292225955);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvInitStreamFilter(std::move(channelId), std::move(addonId), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PRemoteSpellcheckEngineConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PRemoteSpellcheckEngineConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PRemoteSpellcheckEngineParent* actor = (static_cast<ContentParent*>(this))->AllocPRemoteSpellcheckEngineParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PRemoteSpellcheckEngineParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPRemoteSpellcheckEngineParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPRemoteSpellcheckEngineConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitCrashReporter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitCrashReporter", OTHER);

            PickleIterator iter__{msg__};
            NativeThreadId tid{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(tid)))))) {
                FatalError("Error deserializing 'NativeThreadId'");
                return MsgValueError;
            }
            // Sentinel = 'tid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 43319618)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NativeThreadId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvInitCrashReporter(std::move(tid))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AccumulateMixedContentHSTS__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AccumulateMixedContentHSTS", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> aURI{};
            bool aActive{};
            OriginAttributes aOriginAttributes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActive)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aActive'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 176095934)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOriginAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'aOriginAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1021839089)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAccumulateMixedContentHSTS(aURI, std::move(aActive), std::move(aOriginAttributes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PHalConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PHalConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PHalParent* actor = (static_cast<ContentParent*>(this))->AllocPHalParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PHalParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPHalParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPHalConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PHeapSnapshotTempFileHelperConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PHeapSnapshotTempFileHelperConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PHeapSnapshotTempFileHelperParent* actor = (static_cast<ContentParent*>(this))->AllocPHeapSnapshotTempFileHelperParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PHeapSnapshotTempFileHelperParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPHeapSnapshotTempFileHelperParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPHeapSnapshotTempFileHelperConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PNeckoConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PNeckoConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PNeckoParent* actor = (static_cast<ContentParent*>(this))->AllocPNeckoParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PNeckoParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPNeckoParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPNeckoConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PPrintingConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PPrintingConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPrintingParent* actor = (static_cast<ContentParent*>(this))->AllocPPrintingParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PPrintingParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPrintingParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPPrintingConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PChildToParentStreamConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PChildToParentStreamConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PChildToParentStreamParent* actor = (static_cast<ContentParent*>(this))->AllocPChildToParentStreamParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PChildToParentStreamParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPChildToParentStreamParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPChildToParentStreamConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PSpeechSynthesisConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PSpeechSynthesisConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PSpeechSynthesisParent* actor = (static_cast<ContentParent*>(this))->AllocPSpeechSynthesisParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PSpeechSynthesisParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPSpeechSynthesisParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPSpeechSynthesisConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PMediaConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PMediaConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PMediaParent* actor = (static_cast<ContentParent*>(this))->AllocPMediaParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PMediaParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPMediaParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPMediaConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PWebrtcGlobalConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PWebrtcGlobalConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PWebrtcGlobalParent* actor = (static_cast<ContentParent*>(this))->AllocPWebrtcGlobalParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PWebrtcGlobalParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPWebrtcGlobalParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPWebrtcGlobalConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PPresentationConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PPresentationConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPresentationParent* actor = (static_cast<ContentParent*>(this))->AllocPPresentationParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PPresentationParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPresentationParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPPresentationConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CreateAudioIPCConnection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateAudioIPCConnection", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            CreateAudioIPCConnectionResolver resolver = [proxy__, seqno__, id__](const FileDescOrError& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_CreateAudioIPCConnection(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'fd'
                (reply__)->WriteSentinel(20054219);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvCreateAudioIPCConnection(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PURLClassifierLocalConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PURLClassifierLocalConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            RefPtr<nsIURI> uri{};
            nsTArray<IPCURLClassifierFeature> features{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(features)))))) {
                FatalError("Error deserializing 'IPCURLClassifierFeature[]'");
                return MsgValueError;
            }
            // Sentinel = 'features'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 250348384)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCURLClassifierFeature[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PURLClassifierLocalParent* actor = (static_cast<ContentParent*>(this))->AllocPURLClassifierLocalParent(uri, features);
            if (!actor) {
                NS_WARNING("Cannot bind null PURLClassifierLocalParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPURLClassifierLocalParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPURLClassifierLocalConstructor(std::move(actor), uri, std::move(features))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PLoginReputationConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PLoginReputationConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            RefPtr<nsIURI> formURI{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(formURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'formURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 189072037)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PLoginReputationParent* actor = (static_cast<ContentParent*>(this))->AllocPLoginReputationParent(formURI);
            if (!actor) {
                NS_WARNING("Cannot bind null PLoginReputationParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPLoginReputationParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPLoginReputationConstructor(std::move(actor), formURI)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PSessionStorageObserverConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PSessionStorageObserverConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PSessionStorageObserverParent* actor = (static_cast<ContentParent*>(this))->AllocPSessionStorageObserverParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PSessionStorageObserverParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPSessionStorageObserverParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPSessionStorageObserverConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PBenchmarkStorageConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PBenchmarkStorageConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PBenchmarkStorageParent* actor = (static_cast<ContentParent*>(this))->AllocPBenchmarkStorageParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PBenchmarkStorageParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBenchmarkStorageParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPBenchmarkStorageConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_StartVisitedQueries__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_StartVisitedQueries", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<RefPtr<nsIURI>> uri{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'nsIURI[]'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvStartVisitedQueries(std::move(uri))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetURITitle__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetURITitle", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> uri{};
            nsString title{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(title)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'title'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109445667)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetURITitle(uri, std::move(title))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_LoadURIExternal__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_LoadURIExternal", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> uri{};
            RefPtr<nsIPrincipal> triggeringPrincipal{};
            MaybeDiscardedBrowsingContext browsingContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(triggeringPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'triggeringPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1325729749)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(browsingContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'browsingContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 844695121)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvLoadURIExternal(uri, triggeringPrincipal, std::move(browsingContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ExtProtocolChannelConnectParent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ExtProtocolChannelConnectParent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t registrarId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(registrarId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'registrarId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 464585857)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvExtProtocolChannelConnectParent(std::move(registrarId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ShowAlert__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ShowAlert", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIAlertNotification> alert{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(alert)))))) {
                FatalError("Error deserializing 'nsIAlertNotification'");
                return MsgValueError;
            }
            // Sentinel = 'alert'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102826521)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIAlertNotification'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvShowAlert(alert)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CloseAlert__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CloseAlert", OTHER);

            PickleIterator iter__{msg__};
            nsString name{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(name)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69075362)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvCloseAlert(std::move(name))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DisableNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DisableNotifications", OTHER);

            PickleIterator iter__{msg__};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvDisableNotifications(std::move(principal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_OpenNotificationSettings__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_OpenNotificationSettings", OTHER);

            PickleIterator iter__{msg__};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvOpenNotificationSettings(std::move(principal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AddSecurityState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddSecurityState", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedWindowContext aContext{};
            uint32_t aStateFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedWindowContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedWindowContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStateFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStateFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 428606544)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAddSecurityState(std::move(aContext), std::move(aStateFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotificationEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotificationEvent", OTHER);

            PickleIterator iter__{msg__};
            nsString type{};
            NotificationEventData data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(type)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'type'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760067)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'NotificationEventData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NotificationEventData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotificationEvent(std::move(type), std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PExternalHelperAppConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PExternalHelperAppConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            RefPtr<nsIURI> uri{};
            mozilla::Maybe<LoadInfoArgs> loadInfoArgs{};
            nsCString aMimeContentType{};
            nsCString aContentDisposition{};
            uint32_t aContentDispositionHint{};
            nsString aContentDispositionFilename{};
            bool aForceSave{};
            int64_t aContentLength{};
            bool aWasFileChannel{};
            RefPtr<nsIURI> aReferrer{};
            MaybeDiscardedBrowsingContext aContext{};
            bool aShouldCloseWindow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loadInfoArgs)))))) {
                FatalError("Error deserializing 'LoadInfoArgs?'");
                return MsgValueError;
            }
            // Sentinel = 'loadInfoArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 514000058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LoadInfoArgs?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMimeContentType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aMimeContentType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 888538727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentDisposition)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aContentDisposition'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1279461330)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentDispositionHint)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aContentDispositionHint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1865812325)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentDispositionFilename)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aContentDispositionFilename'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2558331635)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForceSave)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aForceSave'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 350946272)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentLength)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aContentLength'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 694158751)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWasFileChannel)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aWasFileChannel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 759367110)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReferrer)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aReferrer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293340063)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aShouldCloseWindow)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aShouldCloseWindow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1134888767)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PExternalHelperAppParent> actor = (static_cast<ContentParent*>(this))->AllocPExternalHelperAppParent(uri, loadInfoArgs, aMimeContentType, aContentDisposition, aContentDispositionHint, aContentDispositionFilename, aForceSave, aContentLength, aWasFileChannel, aReferrer, aContext, aShouldCloseWindow);
            if (!actor) {
                NS_WARNING("Cannot bind null PExternalHelperAppParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPExternalHelperAppParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPExternalHelperAppConstructor(actor, uri, std::move(loadInfoArgs), std::move(aMimeContentType), std::move(aContentDisposition), std::move(aContentDispositionHint), std::move(aContentDispositionFilename), std::move(aForceSave), std::move(aContentLength), std::move(aWasFileChannel), aReferrer, std::move(aContext), std::move(aShouldCloseWindow))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PHandlerServiceConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PHandlerServiceConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PHandlerServiceParent> actor = (static_cast<ContentParent*>(this))->AllocPHandlerServiceParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PHandlerServiceParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPHandlerServiceParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPHandlerServiceConstructor(actor)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AddGeolocationListener__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddGeolocationListener", OTHER);

            PickleIterator iter__{msg__};
            bool highAccuracy{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(highAccuracy)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'highAccuracy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 513737932)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAddGeolocationListener(std::move(highAccuracy))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RemoveGeolocationListener__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RemoveGeolocationListener", OTHER);

            if ((!((static_cast<ContentParent*>(this))->RecvRemoveGeolocationListener()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetGeolocationHigherAccuracy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetGeolocationHigherAccuracy", OTHER);

            PickleIterator iter__{msg__};
            bool enable{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(enable)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'enable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 141623912)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetGeolocationHigherAccuracy(std::move(enable))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ConsoleMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ConsoleMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString message{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvConsoleMessage(std::move(message))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ScriptErrorWithStack__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ScriptErrorWithStack", OTHER);

            PickleIterator iter__{msg__};
            nsString message{};
            nsString sourceName{};
            nsString sourceLine{};
            uint32_t lineNumber{};
            uint32_t colNumber{};
            uint32_t flags{};
            nsCString category{};
            bool privateWindow{};
            bool fromChromeContext{};
            ClonedMessageData stack{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'sourceName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 387580947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceLine)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'sourceLine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 388760602)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lineNumber)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'lineNumber'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 374932498)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(colNumber)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'colNumber'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 304284584)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102171150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(category)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'category'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 247333727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(privateWindow)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'privateWindow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 642778484)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fromChromeContext)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'fromChromeContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1038485240)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stack)))))) {
                FatalError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'stack'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107479575)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvScriptErrorWithStack(std::move(message), std::move(sourceName), std::move(sourceLine), std::move(lineNumber), std::move(colNumber), std::move(flags), std::move(category), std::move(privateWindow), std::move(fromChromeContext), std::move(stack))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetClipboard__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetClipboard", OTHER);

            PickleIterator iter__{msg__};
            IPCDataTransfer aDataTransfer{};
            bool aIsPrivateData{};
            Principal aRequestingPrincipal{};
            nsContentPolicyType aContentPolicyType{};
            int32_t aWhichClipboard{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDataTransfer)))))) {
                FatalError("Error deserializing 'IPCDataTransfer'");
                return MsgValueError;
            }
            // Sentinel = 'aDataTransfer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 581567777)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCDataTransfer'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsPrivateData)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsPrivateData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 680396147)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestingPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestingPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1431439403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentPolicyType)))))) {
                FatalError("Error deserializing 'nsContentPolicyType'");
                return MsgValueError;
            }
            // Sentinel = 'aContentPolicyType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1145767759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsContentPolicyType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWhichClipboard)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWhichClipboard'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776996325)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetClipboard(std::move(aDataTransfer), std::move(aIsPrivateData), std::move(aRequestingPrincipal), std::move(aContentPolicyType), std::move(aWhichClipboard))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_EmptyClipboard__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_EmptyClipboard", OTHER);

            PickleIterator iter__{msg__};
            int32_t aWhichClipboard{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWhichClipboard)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWhichClipboard'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776996325)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvEmptyClipboard(std::move(aWhichClipboard))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PlaySound__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PlaySound", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> aURL{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURL)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 58130773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvPlaySound(aURL)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_Beep__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_Beep", OTHER);

            if ((!((static_cast<ContentParent*>(this))->RecvBeep()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PlayEventSound__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PlayEventSound", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aEventId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEventId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEventId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 230294289)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvPlayEventSound(std::move(aEventId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PrivateDocShellsExist__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PrivateDocShellsExist", OTHER);

            PickleIterator iter__{msg__};
            bool aExist{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aExist)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aExist'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135922287)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvPrivateDocShellsExist(std::move(aExist))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FirstIdle__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FirstIdle", OTHER);

            if ((!((static_cast<ContentParent*>(this))->RecvFirstIdle()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DeviceReset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DeviceReset", OTHER);

            if ((!((static_cast<ContentParent*>(this))->RecvDeviceReset()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CopyFavicon__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CopyFavicon", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> oldURI{};
            RefPtr<nsIURI> newURI{};
            bool isPrivate{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(oldURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'oldURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137888304)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(newURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'newURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 140182075)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isPrivate)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isPrivate'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 310576056)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvCopyFavicon(oldURI, newURI, std::move(isPrivate))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RecordingDeviceEvents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RecordingDeviceEvents", OTHER);

            PickleIterator iter__{msg__};
            nsString recordingStatus{};
            nsString pageURL{};
            bool isAudio{};
            bool isVideo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(recordingStatus)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'recordingStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 833685058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pageURL)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'pageURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 182649489)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isAudio)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isAudio'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186516175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isVideo)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isVideo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 189727444)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRecordingDeviceEvents(std::move(recordingStatus), std::move(pageURL), std::move(isAudio), std::move(isVideo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GraphicsError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GraphicsError", OTHER);

            PickleIterator iter__{msg__};
            nsCString aError{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aError)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aError'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135463532)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvGraphicsError(std::move(aError))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AddIdleObserver__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddIdleObserver", OTHER);

            PickleIterator iter__{msg__};
            uint64_t observerId{};
            uint32_t idleTimeInS{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(observerId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'observerId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 386335766)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(idleTimeInS)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'idleTimeInS'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 434832440)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAddIdleObserver(std::move(observerId), std::move(idleTimeInS))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RemoveIdleObserver__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RemoveIdleObserver", OTHER);

            PickleIterator iter__{msg__};
            uint64_t observerId{};
            uint32_t idleTimeInS{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(observerId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'observerId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 386335766)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(idleTimeInS)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'idleTimeInS'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 434832440)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRemoveIdleObserver(std::move(observerId), std::move(idleTimeInS))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_BackUpXResources__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BackUpXResources", OTHER);

            PickleIterator iter__{msg__};
            FileDescriptor aXSocketFd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aXSocketFd)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'aXSocketFd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 349569997)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvBackUpXResources(std::move(aXSocketFd))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RequestAnonymousTemporaryFile__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RequestAnonymousTemporaryFile", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRequestAnonymousTemporaryFile(std::move(aID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_POfflineCacheUpdateConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_POfflineCacheUpdateConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            RefPtr<nsIURI> manifestURI{};
            RefPtr<nsIURI> documentURI{};
            PrincipalInfo loadingPrincipal{};
            bool stickDocument{};
            CookieJarSettingsArgs cookieJarSettings{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(manifestURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'manifestURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 449643592)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(documentURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'documentURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 453706832)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loadingPrincipal)))))) {
                FatalError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            // Sentinel = 'loadingPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 927139457)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stickDocument)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'stickDocument'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 628032862)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cookieJarSettings)))))) {
                FatalError("Error deserializing 'CookieJarSettingsArgs'");
                return MsgValueError;
            }
            // Sentinel = 'cookieJarSettings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1031800553)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CookieJarSettingsArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<POfflineCacheUpdateParent> actor = (static_cast<ContentParent*>(this))->AllocPOfflineCacheUpdateParent(manifestURI, documentURI, loadingPrincipal, stickDocument, cookieJarSettings);
            if (!actor) {
                NS_WARNING("Cannot bind null POfflineCacheUpdateParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPOfflineCacheUpdateParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPOfflineCacheUpdateConstructor(actor, manifestURI, documentURI, std::move(loadingPrincipal), std::move(stickDocument), std::move(cookieJarSettings))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetOfflinePermission__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetOfflinePermission", OTHER);

            PickleIterator iter__{msg__};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetOfflinePermission(std::move(principal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FinishShutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FinishShutdown", OTHER);

            if ((!((static_cast<ContentParent*>(this))->RecvFinishShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateDropEffect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateDropEffect", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aDragAction{};
            uint32_t aDropEffect{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDragAction)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDragAction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 411370558)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDropEffect)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDropEffect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 419759172)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvUpdateDropEffect(std::move(aDragAction), std::move(aDropEffect))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PContentPermissionRequestConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PContentPermissionRequestConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsTArray<PermissionRequest> aRequests{};
            Principal aPrincipal{};
            Principal aTopLevelPrincipal{};
            bool aIsHandlingUserInput{};
            bool aMaybeUnsafePermissionDelegate{};
            TabId tabId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequests)))))) {
                FatalError("Error deserializing 'PermissionRequest[]'");
                return MsgValueError;
            }
            // Sentinel = 'aRequests'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301728702)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PermissionRequest[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364381188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTopLevelPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aTopLevelPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1128007471)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsHandlingUserInput)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsHandlingUserInput'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1357514738)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMaybeUnsafePermissionDelegate)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aMaybeUnsafePermissionDelegate'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3078949878)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(tabId)))))) {
                FatalError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            // Sentinel = 'tabId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99156453)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PContentPermissionRequestParent* actor = (static_cast<ContentParent*>(this))->AllocPContentPermissionRequestParent(aRequests, aPrincipal, aTopLevelPrincipal, aIsHandlingUserInput, aMaybeUnsafePermissionDelegate, tabId);
            if (!actor) {
                NS_WARNING("Cannot bind null PContentPermissionRequestParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPContentPermissionRequestParent.PutEntry(actor);

            if ((!((static_cast<ContentParent*>(this))->RecvPContentPermissionRequestConstructor(std::move(actor), std::move(aRequests), std::move(aPrincipal), std::move(aTopLevelPrincipal), std::move(aIsHandlingUserInput), std::move(aMaybeUnsafePermissionDelegate), std::move(tabId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ShutdownProfile__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ShutdownProfile", OTHER);

            PickleIterator iter__{msg__};
            nsCString aProfile{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProfile)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aProfile'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 237437747)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvShutdownProfile(std::move(aProfile))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetCharacterMap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetCharacterMap", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aGeneration{};
            Pointer aFacePtr{};
            gfxSparseBitSet aMap{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGeneration'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFacePtr)))))) {
                FatalError("Error deserializing 'Pointer'");
                return MsgValueError;
            }
            // Sentinel = 'aFacePtr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 218956551)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Pointer'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMap)))))) {
                FatalError("Error deserializing 'gfxSparseBitSet'");
                return MsgValueError;
            }
            // Sentinel = 'aMap'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60883328)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'gfxSparseBitSet'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetCharacterMap(std::move(aGeneration), std::move(aFacePtr), std::move(aMap))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetupFamilyCharMap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetupFamilyCharMap", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aGeneration{};
            Pointer aFamilyPtr{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGeneration'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFamilyPtr)))))) {
                FatalError("Error deserializing 'Pointer'");
                return MsgValueError;
            }
            // Sentinel = 'aFamilyPtr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 353174522)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Pointer'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetupFamilyCharMap(std::move(aGeneration), std::move(aFamilyPtr))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_StartCmapLoading__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_StartCmapLoading", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aGeneration{};
            uint32_t aStartIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGeneration'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435749992)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvStartCmapLoading(std::move(aGeneration), std::move(aStartIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CreateWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateWindow", OTHER);

            PickleIterator iter__{msg__};
            PBrowserParent* aThisTab{};
            MaybeDiscardedBrowsingContext aParent{};
            PBrowserParent* aNewTab{};
            uint32_t aChromeFlags{};
            bool aCalledFromJS{};
            bool aWidthSpecified{};
            bool aForPrinting{};
            bool aForWindowDotPrint{};
            RefPtr<nsIURI> aURIToLoad{};
            nsCString aFeatures{};
            float aFullZoom{};
            Principal aTriggeringPrincipal{};
            RefPtr<nsIContentSecurityPolicy> aCsp{};
            RefPtr<nsIReferrerInfo> aReferrerInfo{};
            OriginAttributes aOriginAttributes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aThisTab)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!((*((&(aThisTab))))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'aThisTab'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 231015185)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aParent)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aParent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179962572)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNewTab)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!((*((&(aNewTab))))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'aNewTab'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175571619)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChromeFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aChromeFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 500040877)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCalledFromJS)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCalledFromJS'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 569967832)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWidthSpecified)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aWidthSpecified'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 790562286)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForPrinting)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aForPrinting'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 511313108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForWindowDotPrint)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aForWindowDotPrint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1123813173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURIToLoad)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aURIToLoad'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 321258389)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFeatures)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aFeatures'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 290849697)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFullZoom)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aFullZoom'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293143450)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTriggeringPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aTriggeringPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1413089302)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCsp)))))) {
                FatalError("Error deserializing 'nsIContentSecurityPolicy'");
                return MsgValueError;
            }
            // Sentinel = 'aCsp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61276552)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIContentSecurityPolicy'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReferrerInfo)))))) {
                FatalError("Error deserializing 'nsIReferrerInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aReferrerInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 597755179)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIReferrerInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOriginAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'aOriginAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1021839089)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            CreateWindowResolver resolver = [proxy__, seqno__, id__](const CreatedWindowInfo& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_CreateWindow(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'window'
                (reply__)->WriteSentinel(152437401);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvCreateWindow(aThisTab, std::move(aParent), aNewTab, std::move(aChromeFlags), std::move(aCalledFromJS), std::move(aWidthSpecified), std::move(aForPrinting), std::move(aForWindowDotPrint), aURIToLoad, std::move(aFeatures), std::move(aFullZoom), std::move(aTriggeringPrincipal), aCsp, aReferrerInfo, std::move(aOriginAttributes), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CreateWindowInDifferentProcess__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateWindowInDifferentProcess", OTHER);

            PickleIterator iter__{msg__};
            PBrowserParent* aThisTab{};
            MaybeDiscardedBrowsingContext aParent{};
            uint32_t aChromeFlags{};
            bool aCalledFromJS{};
            bool aWidthSpecified{};
            RefPtr<nsIURI> aURIToLoad{};
            nsCString aFeatures{};
            float aFullZoom{};
            nsString aName{};
            RefPtr<nsIPrincipal> aTriggeringPrincipal{};
            RefPtr<nsIContentSecurityPolicy> aCsp{};
            RefPtr<nsIReferrerInfo> aReferrerInfo{};
            OriginAttributes aOriginAttributes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aThisTab)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!((*((&(aThisTab))))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'aThisTab'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 231015185)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aParent)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aParent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179962572)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChromeFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aChromeFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 500040877)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCalledFromJS)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCalledFromJS'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 569967832)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWidthSpecified)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aWidthSpecified'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 790562286)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURIToLoad)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aURIToLoad'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 321258389)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFeatures)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aFeatures'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 290849697)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFullZoom)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aFullZoom'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293143450)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92537315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTriggeringPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'aTriggeringPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1413089302)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCsp)))))) {
                FatalError("Error deserializing 'nsIContentSecurityPolicy'");
                return MsgValueError;
            }
            // Sentinel = 'aCsp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61276552)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIContentSecurityPolicy'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReferrerInfo)))))) {
                FatalError("Error deserializing 'nsIReferrerInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aReferrerInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 597755179)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIReferrerInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOriginAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'aOriginAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1021839089)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvCreateWindowInDifferentProcess(aThisTab, std::move(aParent), std::move(aChromeFlags), std::move(aCalledFromJS), std::move(aWidthSpecified), aURIToLoad, std::move(aFeatures), std::move(aFullZoom), std::move(aName), aTriggeringPrincipal, aCsp, aReferrerInfo, std::move(aOriginAttributes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyBenchmarkResult__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyBenchmarkResult", OTHER);

            PickleIterator iter__{msg__};
            nsString aCodecName{};
            uint32_t aDecodeFPS{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCodecName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aCodecName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 340394945)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDecodeFPS)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDecodeFPS'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 335283087)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyBenchmarkResult(std::move(aCodecName), std::move(aDecodeFPS))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPushObservers__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushObservers", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};
            nsString messageId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(messageId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'messageId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 310576019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyPushObservers(std::move(scope), std::move(principal), std::move(messageId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPushObserversWithData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushObserversWithData", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};
            nsString messageId{};
            nsTArray<uint8_t> data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(messageId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'messageId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 310576019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyPushObserversWithData(std::move(scope), std::move(principal), std::move(messageId), std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPushSubscriptionChangeObservers__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushSubscriptionChangeObservers", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyPushSubscriptionChangeObservers(std::move(scope), std::move(principal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GetFilesRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetFilesRequest", OTHER);

            PickleIterator iter__{msg__};
            nsID aID{};
            nsString aDirectory{};
            bool aRecursiveFlag{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDirectory)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aDirectory'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358941719)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRecursiveFlag)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aRecursiveFlag'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 701498772)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvGetFilesRequest(std::move(aID), std::move(aDirectory), std::move(aRecursiveFlag))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DeleteGetFilesRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DeleteGetFilesRequest", OTHER);

            PickleIterator iter__{msg__};
            nsID aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvDeleteGetFilesRequest(std::move(aID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_StoreAndBroadcastBlobURLRegistration__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_StoreAndBroadcastBlobURLRegistration", OTHER);

            PickleIterator iter__{msg__};
            nsCString url{};
            IPCBlob blob{};
            Principal principal{};
            mozilla::Maybe<nsID> aAgentClusterId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(blob)))))) {
                FatalError("Error deserializing 'IPCBlob'");
                return MsgValueError;
            }
            // Sentinel = 'blob'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 68157856)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCBlob'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAgentClusterId)))))) {
                FatalError("Error deserializing 'nsID?'");
                return MsgValueError;
            }
            // Sentinel = 'aAgentClusterId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776537568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvStoreAndBroadcastBlobURLRegistration(std::move(url), std::move(blob), std::move(principal), std::move(aAgentClusterId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UnstoreAndBroadcastBlobURLUnregistration__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UnstoreAndBroadcastBlobURLUnregistration", OTHER);

            PickleIterator iter__{msg__};
            nsCString url{};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvUnstoreAndBroadcastBlobURLUnregistration(std::move(url), std::move(principal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AccumulateChildHistograms__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AccumulateChildHistograms", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<HistogramAccumulation> accumulations{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(accumulations)))))) {
                FatalError("Error deserializing 'HistogramAccumulation[]'");
                return MsgValueError;
            }
            // Sentinel = 'accumulations'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 632030585)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HistogramAccumulation[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAccumulateChildHistograms(std::move(accumulations))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AccumulateChildKeyedHistograms__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AccumulateChildKeyedHistograms", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<KeyedHistogramAccumulation> accumulations{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(accumulations)))))) {
                FatalError("Error deserializing 'KeyedHistogramAccumulation[]'");
                return MsgValueError;
            }
            // Sentinel = 'accumulations'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 632030585)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'KeyedHistogramAccumulation[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAccumulateChildKeyedHistograms(std::move(accumulations))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateChildScalars__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateChildScalars", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<ScalarAction> updates{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(updates)))))) {
                FatalError("Error deserializing 'ScalarAction[]'");
                return MsgValueError;
            }
            // Sentinel = 'updates'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 199951095)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScalarAction[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvUpdateChildScalars(std::move(updates))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateChildKeyedScalars__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateChildKeyedScalars", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<KeyedScalarAction> updates{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(updates)))))) {
                FatalError("Error deserializing 'KeyedScalarAction[]'");
                return MsgValueError;
            }
            // Sentinel = 'updates'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 199951095)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'KeyedScalarAction[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvUpdateChildKeyedScalars(std::move(updates))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RecordChildEvents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RecordChildEvents", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<ChildEventData> events{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(events)))))) {
                FatalError("Error deserializing 'ChildEventData[]'");
                return MsgValueError;
            }
            // Sentinel = 'events'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 149619350)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ChildEventData[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRecordChildEvents(std::move(events))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RecordDiscardedData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RecordDiscardedData", OTHER);

            PickleIterator iter__{msg__};
            DiscardedData data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'DiscardedData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DiscardedData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRecordDiscardedData(std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_A11yHandlerControl__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_A11yHandlerControl", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPid{};
            IHandlerControlHolder aHandlerControl{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPid)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61735295)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHandlerControl)))))) {
                FatalError("Error deserializing 'IHandlerControlHolder'");
                return MsgValueError;
            }
            // Sentinel = 'aHandlerControl'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 778634753)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IHandlerControlHolder'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvA11yHandlerControl(std::move(aPid), std::move(aHandlerControl))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AddMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            MemoryReport aReport{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReport)))))) {
                FatalError("Error deserializing 'MemoryReport'");
                return MsgValueError;
            }
            // Sentinel = 'aReport'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184025822)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MemoryReport'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAddMemoryReport(std::move(aReport))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_MaybeReloadPlugins__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_MaybeReloadPlugins", OTHER);

            if ((!((static_cast<ContentParent*>(this))->RecvMaybeReloadPlugins()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_BHRThreadHang__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BHRThreadHang", OTHER);

            PickleIterator iter__{msg__};
            HangDetails aHangDetails{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHangDetails)))))) {
                FatalError("Error deserializing 'HangDetails'");
                return MsgValueError;
            }
            // Sentinel = 'aHangDetails'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 488113318)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HangDetails'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvBHRThreadHang(std::move(aHangDetails))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AddPerformanceMetrics__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddPerformanceMetrics", OTHER);

            PickleIterator iter__{msg__};
            nsID aID{};
            nsTArray<PerformanceInfo> aMetrics{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMetrics)))))) {
                FatalError("Error deserializing 'PerformanceInfo[]'");
                return MsgValueError;
            }
            // Sentinel = 'aMetrics'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235471673)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PerformanceInfo[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAddPerformanceMetrics(std::move(aID), std::move(aMetrics))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AddCertException__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddCertException", OTHER);

            PickleIterator iter__{msg__};
            nsCString aSerializedCert{};
            uint32_t aFlags{};
            nsCString aHostName{};
            int32_t aPort{};
            bool aIsTemporary{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSerializedCert)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aSerializedCert'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 794625532)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 129892943)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHostName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aHostName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 290128769)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPort)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPort'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97452551)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsTemporary)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsTemporary'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 509805793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            AddCertExceptionResolver resolver = [proxy__, seqno__, id__](const nsresult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_AddCertException(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'success'
                (reply__)->WriteSentinel(200082170);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvAddCertException(std::move(aSerializedCert), std::move(aFlags), std::move(aHostName), std::move(aPort), std::move(aIsTemporary), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AutomaticStorageAccessPermissionCanBeGranted__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AutomaticStorageAccessPermissionCanBeGranted", OTHER);

            PickleIterator iter__{msg__};
            Principal aPrincipal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364381188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            AutomaticStorageAccessPermissionCanBeGrantedResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_AutomaticStorageAccessPermissionCanBeGranted(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'success'
                (reply__)->WriteSentinel(200082170);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvAutomaticStorageAccessPermissionCanBeGranted(std::move(aPrincipal), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_StorageAccessPermissionGrantedForOrigin__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_StorageAccessPermissionGrantedForOrigin", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aTopLevelWindowId{};
            MaybeDiscardedBrowsingContext aParentContext{};
            Principal aTrackingPrincipal{};
            nsCString aTrackingOrigin{};
            int aAllowMode{};
            mozilla::Maybe<StorageAccessPermissionGrantedReason> aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTopLevelWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aTopLevelWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1006700210)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aParentContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aParentContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 692454833)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrackingPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aTrackingPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1135609655)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrackingOrigin)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aTrackingOrigin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 792331773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAllowMode)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'aAllowMode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 353108966)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'StorageAccessPermissionGrantedReason?'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'StorageAccessPermissionGrantedReason?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            StorageAccessPermissionGrantedForOriginResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_StorageAccessPermissionGrantedForOrigin(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'unused'
                (reply__)->WriteSentinel(155517589);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvStorageAccessPermissionGrantedForOrigin(std::move(aTopLevelWindowId), std::move(aParentContext), std::move(aTrackingPrincipal), std::move(aTrackingOrigin), std::move(aAllowMode), std::move(aReason), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CompleteAllowAccessFor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CompleteAllowAccessFor", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aParentContext{};
            uint64_t aTopLevelWindowId{};
            Principal aTrackingPrincipal{};
            nsCString aTrackingOrigin{};
            uint32_t aCookieBehavior{};
            StorageAccessPermissionGrantedReason aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aParentContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aParentContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 692454833)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTopLevelWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aTopLevelWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1006700210)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrackingPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aTrackingPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1135609655)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrackingOrigin)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aTrackingOrigin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 792331773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCookieBehavior)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCookieBehavior'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 772408812)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'StorageAccessPermissionGrantedReason'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'StorageAccessPermissionGrantedReason'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            CompleteAllowAccessForResolver resolver = [proxy__, seqno__, id__](const mozilla::Maybe<StorageAccessPromptChoices>& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_CompleteAllowAccessFor(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'choice'
                (reply__)->WriteSentinel(142738028);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvCompleteAllowAccessFor(std::move(aParentContext), std::move(aTopLevelWindowId), std::move(aTrackingPrincipal), std::move(aTrackingOrigin), std::move(aCookieBehavior), std::move(aReason), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_StoreUserInteractionAsPermission__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_StoreUserInteractionAsPermission", OTHER);

            PickleIterator iter__{msg__};
            Principal aPrincipal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364381188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvStoreUserInteractionAsPermission(std::move(aPrincipal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyMediaPlaybackChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaPlaybackChanged", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            MediaPlaybackState aState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'MediaPlaybackState'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaPlaybackState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyMediaPlaybackChanged(std::move(aContext), std::move(aState))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyMediaAudibleChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaAudibleChanged", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            MediaAudibleState aState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'MediaAudibleState'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaAudibleState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyMediaAudibleChanged(std::move(aContext), std::move(aState))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPictureInPictureModeChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPictureInPictureModeChanged", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aEnabled{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 224789261)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyPictureInPictureModeChanged(std::move(aContext), std::move(aEnabled))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyMediaSessionUpdated__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaSessionUpdated", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aIsCreated{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsCreated)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsCreated'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 344261590)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyMediaSessionUpdated(std::move(aContext), std::move(aIsCreated))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyUpdateMediaMetadata__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyUpdateMediaMetadata", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            mozilla::Maybe<MediaMetadataBase> aMetadata{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMetadata)))))) {
                FatalError("Error deserializing 'MediaMetadataBase?'");
                return MsgValueError;
            }
            // Sentinel = 'aMetadata'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 288752515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaMetadataBase?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyUpdateMediaMetadata(std::move(aContext), std::move(aMetadata))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyMediaSessionPlaybackStateChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaSessionPlaybackStateChanged", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            MediaSessionPlaybackState aMetadata{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMetadata)))))) {
                FatalError("Error deserializing 'MediaSessionPlaybackState'");
                return MsgValueError;
            }
            // Sentinel = 'aMetadata'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 288752515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaSessionPlaybackState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyMediaSessionPlaybackStateChanged(std::move(aContext), std::move(aMetadata))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyMediaSessionSupportedActionChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaSessionSupportedActionChanged", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            MediaSessionAction aAction{};
            bool aEnabled{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAction)))))) {
                FatalError("Error deserializing 'MediaSessionAction'");
                return MsgValueError;
            }
            // Sentinel = 'aAction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175768256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaSessionAction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 224789261)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyMediaSessionSupportedActionChanged(std::move(aContext), std::move(aAction), std::move(aEnabled))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyMediaFullScreenState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaFullScreenState", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aIsInFullScreen{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsInFullScreen)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsInFullScreen'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 754320840)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyMediaFullScreenState(std::move(aContext), std::move(aIsInFullScreen))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPositionStateChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPositionStateChanged", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            PositionState aState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'PositionState'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PositionState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyPositionStateChanged(std::move(aContext), std::move(aState))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GetModulesTrust__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetModulesTrust", OTHER);

            PickleIterator iter__{msg__};
            ModulePaths aModPaths{};
            bool aRunAtNormalPriority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModPaths)))))) {
                FatalError("Error deserializing 'ModulePaths'");
                return MsgValueError;
            }
            // Sentinel = 'aModPaths'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284033922)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ModulePaths'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRunAtNormalPriority)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aRunAtNormalPriority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1380517911)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetModulesTrustResolver resolver = [proxy__, seqno__, id__](mozilla::Maybe<ModulesMapResult>&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_GetModulesTrust(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, std::move(aParam));
                // Sentinel = 'modMapResult'
                (reply__)->WriteSentinel(519963870);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvGetModulesTrust(std::move(aModPaths), std::move(aRunAtNormalPriority), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ReportServiceWorkerShutdownProgress__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ReportServiceWorkerShutdownProgress", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aShutdownStateId{};
            Progress aProgress{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aShutdownStateId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aShutdownStateId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 925238892)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProgress)))))) {
                FatalError("Error deserializing 'Progress'");
                return MsgValueError;
            }
            // Sentinel = 'aProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301794231)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Progress'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvReportServiceWorkerShutdownProgress(std::move(aShutdownStateId), std::move(aProgress))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AbortOtherOrientationPendingPromises__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AbortOtherOrientationPendingPromises", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAbortOtherOrientationPendingPromises(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_HistoryReload__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_HistoryReload", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint32_t aReloadFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReloadFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aReloadFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 499451046)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvHistoryReload(std::move(aContext), std::move(aReloadFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyOnHistoryReload__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyOnHistoryReload", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aForceReload{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForceReload)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aForceReload'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 500499624)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            NotifyOnHistoryReloadResolver resolver = [proxy__, seqno__, id__](Tuple<const bool&, const mozilla::Maybe<RefPtr<nsDocShellLoadState>>&, const mozilla::Maybe<bool>&> aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_NotifyOnHistoryReload(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, mozilla::Get<0>(aParam));
                // Sentinel = 'canReload'
                (reply__)->WriteSentinel(295043978);
                WriteIPDLParam(reply__, self__, mozilla::Get<1>(aParam));
                // Sentinel = 'loadState'
                (reply__)->WriteSentinel(304808866);
                WriteIPDLParam(reply__, self__, mozilla::Get<2>(aParam));
                // Sentinel = 'reloadActiveEntry'
                (reply__)->WriteSentinel(1029506790);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyOnHistoryReload(std::move(aContext), std::move(aForceReload), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_HistoryCommit__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_HistoryCommit", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint64_t aLoadID{};
            nsID aChangeID{};
            uint32_t aLoadType{};
            bool aPersist{};
            bool aCloneEntryChildren{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 170328687)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChangeID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aChangeID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 275710773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 286589828)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPersist)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aPersist'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 238617420)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCloneEntryChildren)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCloneEntryChildren'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1242171278)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvHistoryCommit(std::move(aContext), std::move(aLoadID), std::move(aChangeID), std::move(aLoadType), std::move(aPersist), std::move(aCloneEntryChildren))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_HistoryGo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_HistoryGo", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            int32_t aOffset{};
            uint64_t aHistoryEpoch{};
            bool aRequireUserInteraction{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHistoryEpoch)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aHistoryEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 611255619)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequireUserInteraction)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aRequireUserInteraction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1862076766)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            HistoryGoResolver resolver = [proxy__, seqno__, id__](const int32_t& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_HistoryGo(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'requestedIndex'
                (reply__)->WriteSentinel(738788811);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvHistoryGo(std::move(aContext), std::move(aOffset), std::move(aHistoryEpoch), std::move(aRequireUserInteraction), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_BlobURLDataRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BlobURLDataRequest", OTHER);

            PickleIterator iter__{msg__};
            nsCString aBlobURL{};
            RefPtr<nsIPrincipal> aTriggeringPrincipal{};
            RefPtr<nsIPrincipal> aLoadingPrincipal{};
            OriginAttributes aOriginAttributes{};
            uint64_t aInnerWindowId{};
            mozilla::Maybe<nsID> aAgentClusterId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBlobURL)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aBlobURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 218628820)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTriggeringPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'aTriggeringPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1413089302)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadingPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadingPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1001719490)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOriginAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'aOriginAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1021839089)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInnerWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInnerWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 689767811)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAgentClusterId)))))) {
                FatalError("Error deserializing 'nsID?'");
                return MsgValueError;
            }
            // Sentinel = 'aAgentClusterId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776537568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            BlobURLDataRequestResolver resolver = [proxy__, seqno__, id__](const BlobURLDataRequestResult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_BlobURLDataRequest(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aResult'
                (reply__)->WriteSentinel(185205473);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvBlobURLDataRequest(std::move(aBlobURL), aTriggeringPrincipal, aLoadingPrincipal, std::move(aOriginAttributes), std::move(aInnerWindowId), std::move(aAgentClusterId), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetActiveSessionHistoryEntry__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetActiveSessionHistoryEntry", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext context{};
            mozilla::Maybe<nsPoint> previousScrollPosition{};
            SessionHistoryInfo info{};
            uint32_t loadType{};
            uint32_t updatedCacheKey{};
            nsID changeID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(context)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'context'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 199164678)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(previousScrollPosition)))))) {
                FatalError("Error deserializing 'nsPoint?'");
                return MsgValueError;
            }
            // Sentinel = 'previousScrollPosition'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1792346434)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsPoint?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'SessionHistoryInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SessionHistoryInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loadType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'loadType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 246088515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(updatedCacheKey)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'updatedCacheKey'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 804062693)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(changeID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'changeID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235209460)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetActiveSessionHistoryEntry(std::move(context), std::move(previousScrollPosition), std::move(info), std::move(loadType), std::move(updatedCacheKey), std::move(changeID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ReplaceActiveSessionHistoryEntry__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ReplaceActiveSessionHistoryEntry", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext context{};
            SessionHistoryInfo info{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(context)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'context'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 199164678)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'SessionHistoryInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SessionHistoryInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvReplaceActiveSessionHistoryEntry(std::move(context), std::move(info))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RemoveDynEntriesFromActiveSessionHistoryEntry__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RemoveDynEntriesFromActiveSessionHistoryEntry", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRemoveDynEntriesFromActiveSessionHistoryEntry(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RemoveFromSessionHistory__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RemoveFromSessionHistory", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            nsID changeID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(changeID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'changeID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235209460)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRemoveFromSessionHistory(std::move(aContext), std::move(changeID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ScriptError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ScriptError", OTHER);

            PickleIterator iter__{msg__};
            nsString message{};
            nsString sourceName{};
            nsString sourceLine{};
            uint32_t lineNumber{};
            uint32_t colNumber{};
            uint32_t flags{};
            nsCString category{};
            bool privateWindow{};
            uint64_t innerWindowId{};
            bool fromChromeContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'sourceName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 387580947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceLine)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'sourceLine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 388760602)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lineNumber)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'lineNumber'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 374932498)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(colNumber)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'colNumber'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 304284584)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102171150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(category)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'category'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 247333727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(privateWindow)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'privateWindow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 642778484)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(innerWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'innerWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 627967298)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fromChromeContext)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'fromChromeContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1038485240)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvScriptError(std::move(message), std::move(sourceName), std::move(sourceLine), std::move(lineNumber), std::move(colNumber), std::move(flags), std::move(category), std::move(privateWindow), std::move(innerWindowId), std::move(fromChromeContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ReportFrameTimingData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ReportFrameTimingData", OTHER);

            PickleIterator iter__{msg__};
            uint64_t innerWindowId{};
            nsString entryName{};
            nsString initiatorType{};
            UniquePtr<PerformanceTimingData> aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(innerWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'innerWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 627967298)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(entryName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'entryName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 315950004)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(initiatorType)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'initiatorType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 642647414)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'UniquePtr<PerformanceTimingData>'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UniquePtr<PerformanceTimingData>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvReportFrameTimingData(std::move(innerWindowId), std::move(entryName), std::move(initiatorType), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CommitBrowsingContextTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CommitBrowsingContextTransaction", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            BrowsingContextTransaction aTransaction{};
            uint64_t aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTransaction)))))) {
                FatalError("Error deserializing 'BrowsingContextTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTransaction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 523371752)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BrowsingContextTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvCommitBrowsingContextTransaction(std::move(aContext), std::move(aTransaction), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AsyncMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AsyncMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString aMessage{};
            ClonedMessageData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAsyncMessage(std::move(aMessage), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPushSubscriptionModifiedObservers__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushSubscriptionModifiedObservers", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvNotifyPushSubscriptionModifiedObservers(std::move(scope), std::move(principal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PushError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PushError", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};
            nsString message{};
            uint32_t flags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102171150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvPushError(std::move(scope), std::move(principal), std::move(message), std::move(flags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CreateBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aGroupId{};
            BrowsingContextInitializer aInit{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGroupId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGroupId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233964316)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInit)))))) {
                FatalError("Error deserializing 'BrowsingContextInitializer'");
                return MsgValueError;
            }
            // Sentinel = 'aInit'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94241270)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BrowsingContextInitializer'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvCreateBrowsingContext(std::move(aGroupId), std::move(aInit))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_DiscardBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DiscardBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool unused{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(unused)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'unused'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 155517589)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(unused));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Msg_DiscardBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DiscardBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            DiscardBrowsingContextResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentParent* self__ = static_cast<PContentParent*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_DiscardBrowsingContext(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'unused'
                (reply__)->WriteSentinel(155517589);

                if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentParent*>(this))->RecvDiscardBrowsingContext(std::move(aContext), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AdjustWindowFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AdjustWindowFocus", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aCheckPermission{};
            bool aIsVisible{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCheckPermission)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCheckPermission'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 878380649)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsVisible)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsVisible'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 353567724)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvAdjustWindowFocus(std::move(aContext), std::move(aCheckPermission), std::move(aIsVisible))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_WindowClose__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_WindowClose", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aTrustedCaller{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrustedCaller)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aTrustedCaller'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 706479520)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvWindowClose(std::move(aContext), std::move(aTrustedCaller))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_WindowFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_WindowFocus", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            CallerType aCallerType{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvWindowFocus(std::move(aContext), std::move(aCallerType), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_WindowBlur__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_WindowBlur", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            CallerType aCallerType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvWindowBlur(std::move(aContext), std::move(aCallerType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RaiseWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RaiseWindow", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            CallerType aCallerType{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvRaiseWindow(std::move(aContext), std::move(aCallerType), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ClearFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ClearFocus", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvClearFocus(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetFocusedBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetFocusedBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetFocusedBrowsingContext(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetActiveBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetActiveBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetActiveBrowsingContext(std::move(aContext), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UnsetActiveBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UnsetActiveBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvUnsetActiveBrowsingContext(std::move(aContext), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetFocusedElement__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetFocusedElement", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aNeedsFocus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNeedsFocus)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aNeedsFocus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 419759185)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetFocusedElement(std::move(aContext), std::move(aNeedsFocus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FinalizeFocusOuter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FinalizeFocusOuter", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aCanFocus{};
            CallerType aCallerType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCanFocus)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCanFocus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 275055476)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvFinalizeFocusOuter(std::move(aContext), std::move(aCanFocus), std::move(aCallerType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InsertNewFocusActionId__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InsertNewFocusActionId", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvInsertNewFocusActionId(std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_BlurToParent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BlurToParent", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aFocusedBrowsingContext{};
            MaybeDiscardedBrowsingContext aBrowsingContextToClear{};
            MaybeDiscardedBrowsingContext aAncestorBrowsingContextToFocus{};
            bool aIsLeavingDocument{};
            bool aAdjustWidget{};
            bool aBrowsingContextToClearHandled{};
            bool aAncestorBrowsingContextToFocusHandled{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFocusedBrowsingContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aFocusedBrowsingContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1842153819)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBrowsingContextToClear)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aBrowsingContextToClear'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1859127612)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAncestorBrowsingContextToFocus)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aAncestorBrowsingContextToFocus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3344239764)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsLeavingDocument)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsLeavingDocument'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1103169315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAdjustWidget)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aAdjustWidget'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 594609457)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBrowsingContextToClearHandled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aBrowsingContextToClearHandled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3118074860)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAncestorBrowsingContextToFocusHandled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aAncestorBrowsingContextToFocusHandled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 701894468)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvBlurToParent(std::move(aFocusedBrowsingContext), std::move(aBrowsingContextToClear), std::move(aAncestorBrowsingContextToFocus), std::move(aIsLeavingDocument), std::move(aAdjustWidget), std::move(aBrowsingContextToClearHandled), std::move(aAncestorBrowsingContextToFocusHandled), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_MaybeExitFullscreen__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_MaybeExitFullscreen", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvMaybeExitFullscreen(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_WindowPostMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_WindowPostMessage", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            ClonedOrErrorMessageData aMessage{};
            PostMessageData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'ClonedOrErrorMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedOrErrorMessageData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'PostMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PostMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvWindowPostMessage(std::move(aContext), std::move(aMessage), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CommitWindowContextTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CommitWindowContextTransaction", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedWindowContext aContext{};
            WindowContextTransaction aTransaction{};
            uint64_t aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedWindowContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedWindowContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTransaction)))))) {
                FatalError("Error deserializing 'WindowContextTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTransaction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 523371752)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowContextTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvCommitWindowContextTransaction(std::move(aContext), std::move(aTransaction), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_DiscardWindowContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DiscardWindowContext", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool unused{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(unused)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'unused'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 155517589)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(unused));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Msg_FOGData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FOGData", OTHER);

            PickleIterator iter__{msg__};
            ByteBuf buf{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buf)))))) {
                FatalError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            // Sentinel = 'buf'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41484606)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvFOGData(std::move(buf))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_FlushFOGData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FlushFOGData", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<ByteBuf> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                ByteBuf buf{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buf)))))) {
                    FatalError("Error deserializing 'ByteBuf'");
                    return MsgValueError;
                }
                // Sentinel = 'buf'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41484606)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'ByteBuf'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(buf));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Msg_SetContainerFeaturePolicy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetContainerFeaturePolicy", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContainerContext{};
            RefPtr<FeaturePolicy> aContainerFeaturePolicy{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContainerContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContainerContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1015744234)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContainerFeaturePolicy)))))) {
                FatalError("Error deserializing 'FeaturePolicy'");
                return MsgValueError;
            }
            // Sentinel = 'aContainerFeaturePolicy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1834158401)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FeaturePolicy'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentParent*>(this))->RecvSetContainerFeaturePolicy(std::move(aContainerContext), aContainerFeaturePolicy)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PContentParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PContentParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    switch (msg__.type()) {
    case PContent::Msg_LoadPlugin__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_LoadPlugin", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPluginId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPluginId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPluginId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 294323070)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            nsresult aResult{};
            uint32_t aRunID{};
            Endpoint<mozilla::plugins::PPluginModuleParent> aEndpoint{};
            if ((!((static_cast<ContentParent*>(this))->RecvLoadPlugin(std::move(aPluginId), (&(aResult)), (&(aRunID)), (&(aEndpoint)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_LoadPlugin(id__);

            WriteIPDLParam(reply__, this, aResult);
            // Sentinel = 'aResult'
            (reply__)->WriteSentinel(185205473);
            WriteIPDLParam(reply__, this, aRunID);
            // Sentinel = 'aRunID'
            (reply__)->WriteSentinel(131727908);
            WriteIPDLParam(reply__, this, std::move(aEndpoint));
            // Sentinel = 'aEndpoint'
            (reply__)->WriteSentinel(292225955);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_ConnectPluginBridge__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ConnectPluginBridge", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPluginId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPluginId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPluginId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 294323070)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            nsresult rv{};
            Endpoint<mozilla::plugins::PPluginModuleParent> aEndpoint{};
            if ((!((static_cast<ContentParent*>(this))->RecvConnectPluginBridge(std::move(aPluginId), (&(rv)), (&(aEndpoint)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_ConnectPluginBridge(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);
            WriteIPDLParam(reply__, this, std::move(aEndpoint));
            // Sentinel = 'aEndpoint'
            (reply__)->WriteSentinel(292225955);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_IsSecureURI__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_IsSecureURI", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aType{};
            RefPtr<nsIURI> aURI{};
            uint32_t aFlags{};
            OriginAttributes aOriginAttributes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 129892943)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOriginAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'aOriginAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1021839089)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            bool isSecureURI{};
            if ((!((static_cast<ContentParent*>(this))->RecvIsSecureURI(std::move(aType), aURI, std::move(aFlags), std::move(aOriginAttributes), (&(isSecureURI)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_IsSecureURI(id__);

            WriteIPDLParam(reply__, this, isSecureURI);
            // Sentinel = 'isSecureURI'
            (reply__)->WriteSentinel(441189428);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_PURLClassifierConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PURLClassifierConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            bool success{};
            PURLClassifierParent* actor = (static_cast<ContentParent*>(this))->AllocPURLClassifierParent(principal, (&(success)));
            if (!actor) {
                NS_WARNING("Cannot bind null PURLClassifierParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPURLClassifierParent.PutEntry(actor);

            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<ContentParent*>(this))->RecvPURLClassifierConstructor(std::move(actor), std::move(principal), (&(success)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }
            reply__ = PContent::Reply_PURLClassifierConstructor(id__);

            WriteIPDLParam(reply__, this, success);
            // Sentinel = 'success'
            (reply__)->WriteSentinel(200082170);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }
    case PContent::Msg_GetGfxVars__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetGfxVars", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            nsTArray<GfxVarUpdate> vars{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetGfxVars((&(vars)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetGfxVars(id__);

            WriteIPDLParam(reply__, this, vars);
            // Sentinel = 'vars'
            (reply__)->WriteSentinel(72745405);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_SyncMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SyncMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString aMessage{};
            ClonedMessageData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            nsTArray<StructuredCloneData> retval{};
            if ((!((static_cast<ContentParent*>(this))->RecvSyncMessage(std::move(aMessage), std::move(aData), (&(retval)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_SyncMessage(id__);

            WriteIPDLParam(reply__, this, retval);
            // Sentinel = 'retval'
            (reply__)->WriteSentinel(151716495);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_GetClipboard__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetClipboard", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> aTypes{};
            int32_t aWhichClipboard{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTypes)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aTypes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 140575351)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWhichClipboard)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWhichClipboard'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776996325)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            IPCDataTransfer dataTransfer{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetClipboard(std::move(aTypes), std::move(aWhichClipboard), (&(dataTransfer)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetClipboard(id__);

            WriteIPDLParam(reply__, this, dataTransfer);
            // Sentinel = 'dataTransfer'
            (reply__)->WriteSentinel(524027104);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_GetExternalClipboardFormats__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetExternalClipboardFormats", OTHER);

            PickleIterator iter__{msg__};
            int32_t aWhichClipboard{};
            bool aPlainTextOnly{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWhichClipboard)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWhichClipboard'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776996325)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPlainTextOnly)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aPlainTextOnly'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 686622109)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            nsTArray<nsCString> aTypes{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetExternalClipboardFormats(std::move(aWhichClipboard), std::move(aPlainTextOnly), (&(aTypes)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetExternalClipboardFormats(id__);

            WriteIPDLParam(reply__, this, aTypes);
            // Sentinel = 'aTypes'
            (reply__)->WriteSentinel(140575351);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_ClipboardHasType__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ClipboardHasType", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> aTypes{};
            int32_t aWhichClipboard{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTypes)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aTypes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 140575351)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWhichClipboard)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWhichClipboard'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776996325)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            bool hasType{};
            if ((!((static_cast<ContentParent*>(this))->RecvClipboardHasType(std::move(aTypes), std::move(aWhichClipboard), (&(hasType)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_ClipboardHasType(id__);

            WriteIPDLParam(reply__, this, hasType);
            // Sentinel = 'hasType'
            (reply__)->WriteSentinel(191103711);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_GetIconForExtension__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetIconForExtension", OTHER);

            PickleIterator iter__{msg__};
            nsCString aFileExt{};
            uint32_t aIconSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFileExt)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aFileExt'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 223544083)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIconSize)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIconSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 286196614)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            nsTArray<uint8_t> bits{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetIconForExtension(std::move(aFileExt), std::move(aIconSize), (&(bits)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetIconForExtension(id__);

            WriteIPDLParam(reply__, this, bits);
            // Sentinel = 'bits'
            (reply__)->WriteSentinel(69337523);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_BeginDriverCrashGuard__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BeginDriverCrashGuard", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aGuardType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuardType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGuardType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 356647927)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            bool crashDetected{};
            if ((!((static_cast<ContentParent*>(this))->RecvBeginDriverCrashGuard(std::move(aGuardType), (&(crashDetected)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_BeginDriverCrashGuard(id__);

            WriteIPDLParam(reply__, this, crashDetected);
            // Sentinel = 'crashDetected'
            (reply__)->WriteSentinel(610731316);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_EndDriverCrashGuard__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_EndDriverCrashGuard", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aGuardType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuardType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGuardType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 356647927)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<ContentParent*>(this))->RecvEndDriverCrashGuard(std::move(aGuardType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_EndDriverCrashGuard(id__);


            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_GetGraphicsDeviceInitData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetGraphicsDeviceInitData", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            ContentDeviceData aData{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetGraphicsDeviceInitData((&(aData)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetGraphicsDeviceInitData(id__);

            WriteIPDLParam(reply__, this, aData);
            // Sentinel = 'aData'
            (reply__)->WriteSentinel(90571228);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_GetOutputColorProfileData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetOutputColorProfileData", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            nsTArray<uint8_t> aOutputColorProfileData{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetOutputColorProfileData((&(aOutputColorProfileData)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetOutputColorProfileData(id__);

            WriteIPDLParam(reply__, this, aOutputColorProfileData);
            // Sentinel = 'aOutputColorProfileData'
            (reply__)->WriteSentinel(1877608765);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_GetFontListShmBlock__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetFontListShmBlock", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aGeneration{};
            uint32_t aIndex{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGeneration'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            SharedMemoryHandle aHandle{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetFontListShmBlock(std::move(aGeneration), std::move(aIndex), (&(aHandle)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetFontListShmBlock(id__);

            WriteIPDLParam(reply__, this, aHandle);
            // Sentinel = 'aHandle'
            (reply__)->WriteSentinel(174326446);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_InitializeFamily__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitializeFamily", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aGeneration{};
            uint32_t aFamilyIndex{};
            bool aLoadCmaps{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGeneration'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFamilyIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFamilyIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 501089468)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadCmaps)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadCmaps'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 342885334)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<ContentParent*>(this))->RecvInitializeFamily(std::move(aGeneration), std::move(aFamilyIndex), std::move(aLoadCmaps))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_InitializeFamily(id__);


            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_InitOtherFamilyNames__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitOtherFamilyNames", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aGeneration{};
            bool aDefer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGeneration)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGeneration'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430179438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDefer)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aDefer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 128057928)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            bool aLoaded{};
            if ((!((static_cast<ContentParent*>(this))->RecvInitOtherFamilyNames(std::move(aGeneration), std::move(aDefer), (&(aLoaded)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_InitOtherFamilyNames(id__);

            WriteIPDLParam(reply__, this, aLoaded);
            // Sentinel = 'aLoaded'
            (reply__)->WriteSentinel(176095915);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_GetHyphDict__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetHyphDict", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> aURI{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            SharedMemoryHandle aHandle{};
            uint32_t aSize{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetHyphDict(aURI, (&(aHandle)), (&(aSize)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetHyphDict(id__);

            WriteIPDLParam(reply__, this, aHandle);
            // Sentinel = 'aHandle'
            (reply__)->WriteSentinel(174326446);
            WriteIPDLParam(reply__, this, aSize);
            // Sentinel = 'aSize'
            (reply__)->WriteSentinel(97124861);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_UngrabPointer__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UngrabPointer", OTHER);

            PickleIterator iter__{msg__};
            uint32_t time{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(time)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'time'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72221104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<ContentParent*>(this))->RecvUngrabPointer(std::move(time))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_UngrabPointer(id__);


            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_RemovePermission__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RemovePermission", OTHER);

            PickleIterator iter__{msg__};
            Principal principal{};
            nsCString permissionType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(permissionType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'permissionType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 749864428)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            nsresult rv{};
            if ((!((static_cast<ContentParent*>(this))->RecvRemovePermission(std::move(principal), std::move(permissionType), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_RemovePermission(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PContent::Msg_GetA11yContentId__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetA11yContentId", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            uint32_t aContentId{};
            if ((!((static_cast<ContentParent*>(this))->RecvGetA11yContentId((&(aContentId)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PContent::Reply_GetA11yContentId(id__);

            WriteIPDLParam(reply__, this, aContentId);
            // Sentinel = 'aContentId'
            (reply__)->WriteSentinel(358876138);

            if (mozilla::ipc::LoggingEnabledFor("PContentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PContentParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PContentParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PContentParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PContentParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PContentParent::ClearSubtree() -> void
{
    for (auto it = mManagedPBrowserParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBrowserParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBrowserParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBrowserParent.Clear();

    for (auto it = mManagedPContentPermissionRequestParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPContentPermissionRequestParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPContentPermissionRequestParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPContentPermissionRequestParent.Clear();

    for (auto it = mManagedPCycleCollectWithLogsParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPCycleCollectWithLogsParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPCycleCollectWithLogsParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPCycleCollectWithLogsParent.Clear();

    for (auto it = mManagedPExternalHelperAppParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPExternalHelperAppParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPExternalHelperAppParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPExternalHelperAppParent.Clear();

    for (auto it = mManagedPFileDescriptorSetParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPFileDescriptorSetParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPFileDescriptorSetParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPFileDescriptorSetParent.Clear();

    for (auto it = mManagedPHalParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPHalParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPHalParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPHalParent.Clear();

    for (auto it = mManagedPHandlerServiceParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPHandlerServiceParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPHandlerServiceParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPHandlerServiceParent.Clear();

    for (auto it = mManagedPHeapSnapshotTempFileHelperParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPHeapSnapshotTempFileHelperParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPHeapSnapshotTempFileHelperParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPHeapSnapshotTempFileHelperParent.Clear();

    for (auto it = mManagedPRemoteLazyInputStreamParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPRemoteLazyInputStreamParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPRemoteLazyInputStreamParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPRemoteLazyInputStreamParent.Clear();

    for (auto it = mManagedPMediaParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPMediaParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPMediaParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPMediaParent.Clear();

    for (auto it = mManagedPNeckoParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPNeckoParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPNeckoParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPNeckoParent.Clear();

    for (auto it = mManagedPOfflineCacheUpdateParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPOfflineCacheUpdateParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPOfflineCacheUpdateParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPOfflineCacheUpdateParent.Clear();

    for (auto it = mManagedPPrintingParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPrintingParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPrintingParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPrintingParent.Clear();

    for (auto it = mManagedPChildToParentStreamParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPChildToParentStreamParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPChildToParentStreamParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPChildToParentStreamParent.Clear();

    for (auto it = mManagedPParentToChildStreamParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPParentToChildStreamParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPParentToChildStreamParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPParentToChildStreamParent.Clear();

    for (auto it = mManagedPSpeechSynthesisParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPSpeechSynthesisParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPSpeechSynthesisParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPSpeechSynthesisParent.Clear();

    for (auto it = mManagedPTestShellParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPTestShellParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPTestShellParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPTestShellParent.Clear();

    for (auto it = mManagedPRemoteSpellcheckEngineParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPRemoteSpellcheckEngineParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPRemoteSpellcheckEngineParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPRemoteSpellcheckEngineParent.Clear();

    for (auto it = mManagedPWebBrowserPersistDocumentParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWebBrowserPersistDocumentParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWebBrowserPersistDocumentParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWebBrowserPersistDocumentParent.Clear();

    for (auto it = mManagedPWebrtcGlobalParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWebrtcGlobalParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWebrtcGlobalParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWebrtcGlobalParent.Clear();

    for (auto it = mManagedPPresentationParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPresentationParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPresentationParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPresentationParent.Clear();

    for (auto it = mManagedPURLClassifierParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPURLClassifierParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPURLClassifierParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPURLClassifierParent.Clear();

    for (auto it = mManagedPURLClassifierLocalParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPURLClassifierLocalParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPURLClassifierLocalParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPURLClassifierLocalParent.Clear();

    for (auto it = mManagedPScriptCacheParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPScriptCacheParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPScriptCacheParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPScriptCacheParent.Clear();

    for (auto it = mManagedPLoginReputationParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPLoginReputationParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPLoginReputationParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPLoginReputationParent.Clear();

    for (auto it = mManagedPSessionStorageObserverParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPSessionStorageObserverParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPSessionStorageObserverParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPSessionStorageObserverParent.Clear();

    for (auto it = mManagedPBenchmarkStorageParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBenchmarkStorageParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBenchmarkStorageParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBenchmarkStorageParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PContentParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PContentParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PContent", PContentMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PContentParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
