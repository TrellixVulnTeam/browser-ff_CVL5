//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PAPZInputBridgeParent.h"
#include "InputData.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/APZInputBridge.h"
#include "mozilla/layers/APZInputBridgeParent.h"
#include "mozilla/layers/ScrollableLayerGuid.h"

#include "mozilla/gfx/PGPUParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PAPZInputBridgeParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PAPZInputBridgeParent::PAPZInputBridgeParent() :
    mozilla::ipc::IProtocol(PAPZInputBridgeMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PAPZInputBridgeParent);
}

PAPZInputBridgeParent::~PAPZInputBridgeParent()
{
    MOZ_COUNT_DTOR(PAPZInputBridgeParent);
}

auto PAPZInputBridgeParent::Manager() const -> PGPUParent*
{
    return static_cast<PGPUParent*>(IProtocol::Manager());
}

auto PAPZInputBridgeParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PAPZInputBridgeParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZInputBridgeParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZInputBridgeParent::OnMessageReceived(const Message& msg__) -> PAPZInputBridgeParent::Result
{
    switch (msg__.type()) {
    case PAPZInputBridge::Msg_UpdateWheelTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_UpdateWheelTransaction", OTHER);

            PickleIterator iter__{msg__};
            LayoutDeviceIntPoint aRefPoint{};
            EventMessage aEventMessage{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRefPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aRefPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 285213577)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEventMessage)))))) {
                FatalError("Error deserializing 'EventMessage'");
                return MsgValueError;
            }
            // Sentinel = 'aEventMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 596772137)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'EventMessage'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvUpdateWheelTransaction(std::move(aRefPoint), std::move(aEventMessage))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZInputBridge::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PAPZInputBridgeParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PAPZInputBridge'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PAPZInputBridge'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PAPZInputBridge'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZInputBridgeParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PAPZInputBridgeMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAPZInputBridgeParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZInputBridgeParent::Result
{
    switch (msg__.type()) {
    case PAPZInputBridge::Msg_ReceiveMultiTouchInputEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveMultiTouchInputEvent", OTHER);

            PickleIterator iter__{msg__};
            MultiTouchInput aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'MultiTouchInput'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MultiTouchInput'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            APZEventResult aOutResult{};
            MultiTouchInput aOutEvent{};
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvReceiveMultiTouchInputEvent(std::move(aEvent), (&(aOutResult)), (&(aOutEvent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PAPZInputBridge::Reply_ReceiveMultiTouchInputEvent(id__);

            WriteIPDLParam(reply__, this, aOutResult);
            // Sentinel = 'aOutResult'
            (reply__)->WriteSentinel(365626393);
            WriteIPDLParam(reply__, this, aOutEvent);
            // Sentinel = 'aOutEvent'
            (reply__)->WriteSentinel(293929884);

            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PAPZInputBridge::Msg_ReceiveMouseInputEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveMouseInputEvent", OTHER);

            PickleIterator iter__{msg__};
            MouseInput aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'MouseInput'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MouseInput'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            APZEventResult aOutResult{};
            MouseInput aOutEvent{};
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvReceiveMouseInputEvent(std::move(aEvent), (&(aOutResult)), (&(aOutEvent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PAPZInputBridge::Reply_ReceiveMouseInputEvent(id__);

            WriteIPDLParam(reply__, this, aOutResult);
            // Sentinel = 'aOutResult'
            (reply__)->WriteSentinel(365626393);
            WriteIPDLParam(reply__, this, aOutEvent);
            // Sentinel = 'aOutEvent'
            (reply__)->WriteSentinel(293929884);

            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PAPZInputBridge::Msg_ReceivePanGestureInputEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceivePanGestureInputEvent", OTHER);

            PickleIterator iter__{msg__};
            PanGestureInput aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'PanGestureInput'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PanGestureInput'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            APZEventResult aOutResult{};
            PanGestureInput aOutEvent{};
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvReceivePanGestureInputEvent(std::move(aEvent), (&(aOutResult)), (&(aOutEvent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PAPZInputBridge::Reply_ReceivePanGestureInputEvent(id__);

            WriteIPDLParam(reply__, this, aOutResult);
            // Sentinel = 'aOutResult'
            (reply__)->WriteSentinel(365626393);
            WriteIPDLParam(reply__, this, aOutEvent);
            // Sentinel = 'aOutEvent'
            (reply__)->WriteSentinel(293929884);

            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PAPZInputBridge::Msg_ReceivePinchGestureInputEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceivePinchGestureInputEvent", OTHER);

            PickleIterator iter__{msg__};
            PinchGestureInput aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'PinchGestureInput'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PinchGestureInput'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            APZEventResult aOutResult{};
            PinchGestureInput aOutEvent{};
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvReceivePinchGestureInputEvent(std::move(aEvent), (&(aOutResult)), (&(aOutEvent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PAPZInputBridge::Reply_ReceivePinchGestureInputEvent(id__);

            WriteIPDLParam(reply__, this, aOutResult);
            // Sentinel = 'aOutResult'
            (reply__)->WriteSentinel(365626393);
            WriteIPDLParam(reply__, this, aOutEvent);
            // Sentinel = 'aOutEvent'
            (reply__)->WriteSentinel(293929884);

            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PAPZInputBridge::Msg_ReceiveTapGestureInputEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveTapGestureInputEvent", OTHER);

            PickleIterator iter__{msg__};
            TapGestureInput aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'TapGestureInput'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TapGestureInput'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            APZEventResult aOutResult{};
            TapGestureInput aOutEvent{};
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvReceiveTapGestureInputEvent(std::move(aEvent), (&(aOutResult)), (&(aOutEvent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PAPZInputBridge::Reply_ReceiveTapGestureInputEvent(id__);

            WriteIPDLParam(reply__, this, aOutResult);
            // Sentinel = 'aOutResult'
            (reply__)->WriteSentinel(365626393);
            WriteIPDLParam(reply__, this, aOutEvent);
            // Sentinel = 'aOutEvent'
            (reply__)->WriteSentinel(293929884);

            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PAPZInputBridge::Msg_ReceiveScrollWheelInputEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveScrollWheelInputEvent", OTHER);

            PickleIterator iter__{msg__};
            ScrollWheelInput aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'ScrollWheelInput'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollWheelInput'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            APZEventResult aOutResult{};
            ScrollWheelInput aOutEvent{};
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvReceiveScrollWheelInputEvent(std::move(aEvent), (&(aOutResult)), (&(aOutEvent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PAPZInputBridge::Reply_ReceiveScrollWheelInputEvent(id__);

            WriteIPDLParam(reply__, this, aOutResult);
            // Sentinel = 'aOutResult'
            (reply__)->WriteSentinel(365626393);
            WriteIPDLParam(reply__, this, aOutEvent);
            // Sentinel = 'aOutEvent'
            (reply__)->WriteSentinel(293929884);

            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PAPZInputBridge::Msg_ReceiveKeyboardInputEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ReceiveKeyboardInputEvent", OTHER);

            PickleIterator iter__{msg__};
            KeyboardInput aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'KeyboardInput'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'KeyboardInput'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            APZEventResult aOutResult{};
            KeyboardInput aOutEvent{};
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvReceiveKeyboardInputEvent(std::move(aEvent), (&(aOutResult)), (&(aOutEvent)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PAPZInputBridge::Reply_ReceiveKeyboardInputEvent(id__);

            WriteIPDLParam(reply__, this, aOutResult);
            // Sentinel = 'aOutResult'
            (reply__)->WriteSentinel(365626393);
            WriteIPDLParam(reply__, this, aOutEvent);
            // Sentinel = 'aOutEvent'
            (reply__)->WriteSentinel(293929884);

            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PAPZInputBridge::Msg_ProcessUnhandledEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZInputBridge::Msg_ProcessUnhandledEvent", OTHER);

            PickleIterator iter__{msg__};
            LayoutDeviceIntPoint aRefPoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRefPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aRefPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 285213577)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            LayoutDeviceIntPoint aOutRefPoint{};
            ScrollableLayerGuid aOutTargetGuid{};
            uint64_t aOutFocusSequenceNumber{};
            LayersId aOutLayersId{};
            if ((!((static_cast<APZInputBridgeParent*>(this))->RecvProcessUnhandledEvent(std::move(aRefPoint), (&(aOutRefPoint)), (&(aOutTargetGuid)), (&(aOutFocusSequenceNumber)), (&(aOutLayersId)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PAPZInputBridge::Reply_ProcessUnhandledEvent(id__);

            WriteIPDLParam(reply__, this, aOutRefPoint);
            // Sentinel = 'aOutRefPoint'
            (reply__)->WriteSentinel(506528961);
            WriteIPDLParam(reply__, this, aOutTargetGuid);
            // Sentinel = 'aOutTargetGuid'
            (reply__)->WriteSentinel(691799434);
            WriteIPDLParam(reply__, this, aOutFocusSequenceNumber);
            // Sentinel = 'aOutFocusSequenceNumber'
            (reply__)->WriteSentinel(1841105212);
            WriteIPDLParam(reply__, this, aOutLayersId);
            // Sentinel = 'aOutLayersId'
            (reply__)->WriteSentinel(512754871);

            if (mozilla::ipc::LoggingEnabledFor("PAPZInputBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZInputBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAPZInputBridgeParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZInputBridgeParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAPZInputBridgeParent::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PAPZInputBridgeParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PAPZInputBridgeParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PAPZInputBridge", PAPZInputBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PAPZInputBridgeParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
