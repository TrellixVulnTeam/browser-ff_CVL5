//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PHttpChannelParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/net/NeckoMessageUtils.h"

#include "mozilla/net/PNeckoParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PHttpChannelParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PHttpChannelParent::PHttpChannelParent() :
    mozilla::ipc::IProtocol(PHttpChannelMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PHttpChannelParent);
}

PHttpChannelParent::~PHttpChannelParent()
{
    MOZ_COUNT_DTOR(PHttpChannelParent);
}

auto PHttpChannelParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PHttpChannelParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHttpChannelParent::SendFailedAsyncOpen(const nsresult& status) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_FailedAsyncOpen(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_FailedAsyncOpen", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendOnStartRequestSent() -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_OnStartRequestSent(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_OnStartRequestSent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendRedirect1Begin(
        const uint32_t& registrarId,
        const URIParams& newOriginalUri,
        const uint32_t& newLoadFlags,
        const uint32_t& redirectFlags,
        const ParentLoadInfoForwarderArgs& loadInfoForwarder,
        const nsHttpResponseHead& responseHead,
        const nsCString& securityInfoSerialization,
        const uint64_t& channelId,
        const NetAddr& oldPeerAddr,
        const ResourceTimingStructArgs& timing) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_Redirect1Begin(Id());

    WriteIPDLParam(msg__, this, registrarId);
    // Sentinel = 'registrarId'
    (msg__)->WriteSentinel(464585857);
    WriteIPDLParam(msg__, this, newOriginalUri);
    // Sentinel = 'newOriginalUri'
    (msg__)->WriteSentinel(719127984);
    WriteIPDLParam(msg__, this, newLoadFlags);
    // Sentinel = 'newLoadFlags'
    (msg__)->WriteSentinel(516293816);
    WriteIPDLParam(msg__, this, redirectFlags);
    // Sentinel = 'redirectFlags'
    (msg__)->WriteSentinel(620889408);
    WriteIPDLParam(msg__, this, loadInfoForwarder);
    // Sentinel = 'loadInfoForwarder'
    (msg__)->WriteSentinel(1020528345);
    WriteIPDLParam(msg__, this, responseHead);
    // Sentinel = 'responseHead'
    (msg__)->WriteSentinel(549651682);
    WriteIPDLParam(msg__, this, securityInfoSerialization);
    // Sentinel = 'securityInfoSerialization'
    (msg__)->WriteSentinel(2263026275);
    WriteIPDLParam(msg__, this, channelId);
    // Sentinel = 'channelId'
    (msg__)->WriteSentinel(301138823);
    WriteIPDLParam(msg__, this, oldPeerAddr);
    // Sentinel = 'oldPeerAddr'
    (msg__)->WriteSentinel(433128519);
    WriteIPDLParam(msg__, this, timing);
    // Sentinel = 'timing'
    (msg__)->WriteSentinel(150798985);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_Redirect1Begin", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendRedirect3Complete() -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_Redirect3Complete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_Redirect3Complete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendReportSecurityMessage(
        const nsString& messageTag,
        const nsString& messageCategory) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_ReportSecurityMessage(Id());

    WriteIPDLParam(msg__, this, messageTag);
    // Sentinel = 'messageTag'
    (msg__)->WriteSentinel(379061250);
    WriteIPDLParam(msg__, this, messageCategory);
    // Sentinel = 'messageCategory'
    (msg__)->WriteSentinel(816252452);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_ReportSecurityMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendDeleteSelf() -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_DeleteSelf(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_DeleteSelf", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendIssueDeprecationWarning(
        const uint32_t& warning,
        const bool& asError) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_IssueDeprecationWarning(Id());

    WriteIPDLParam(msg__, this, warning);
    // Sentinel = 'warning'
    (msg__)->WriteSentinel(201196279);
    WriteIPDLParam(msg__, this, asError);
    // Sentinel = 'asError'
    (msg__)->WriteSentinel(187106015);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_IssueDeprecationWarning", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendLogBlockedCORSRequest(
        const nsString& message,
        const nsCString& category) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_LogBlockedCORSRequest(Id());

    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);
    WriteIPDLParam(msg__, this, category);
    // Sentinel = 'category'
    (msg__)->WriteSentinel(247333727);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_LogBlockedCORSRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendLogMimeTypeMismatch(
        const nsCString& messageName,
        const bool& warning,
        const nsString& url,
        const nsString& contentType) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_LogMimeTypeMismatch(Id());

    WriteIPDLParam(msg__, this, messageName);
    // Sentinel = 'messageName'
    (msg__)->WriteSentinel(452133991);
    WriteIPDLParam(msg__, this, warning);
    // Sentinel = 'warning'
    (msg__)->WriteSentinel(201196279);
    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);
    WriteIPDLParam(msg__, this, contentType);
    // Sentinel = 'contentType'
    (msg__)->WriteSentinel(465241246);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_LogMimeTypeMismatch", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendOriginalCacheInputStreamAvailable(const mozilla::Maybe<IPCStream>& stream) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_OriginalCacheInputStreamAvailable(Id());

    WriteIPDLParam(msg__, this, stream);
    // Sentinel = 'stream'
    (msg__)->WriteSentinel(153223821);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_OriginalCacheInputStreamAvailable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendAltDataCacheInputStreamAvailable(const mozilla::Maybe<IPCStream>& stream) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_AltDataCacheInputStreamAvailable(Id());

    WriteIPDLParam(msg__, this, stream);
    // Sentinel = 'stream'
    (msg__)->WriteSentinel(153223821);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_AltDataCacheInputStreamAvailable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::SendSetPriority(const int16_t& priority) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_SetPriority(Id());

    WriteIPDLParam(msg__, this, priority);
    // Sentinel = 'priority'
    (msg__)->WriteSentinel(262865795);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_SetPriority", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpChannelParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpChannelParent::OnMessageReceived(const Message& msg__) -> PHttpChannelParent::Result
{
    switch (msg__.type()) {
    case PHttpChannel::Msg_SetClassOfService__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_SetClassOfService", OTHER);

            PickleIterator iter__{msg__};
            uint32_t cos{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cos)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'cos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41746758)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetClassOfService(std::move(cos))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_Suspend__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_Suspend", OTHER);

            if ((!((this)->RecvSuspend()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_Resume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_Resume", OTHER);

            if ((!((this)->RecvResume()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_Cancel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_Cancel", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};
            uint32_t requestBlockingReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestBlockingReason)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'requestBlockingReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1599867035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvCancel(std::move(status), std::move(requestBlockingReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_Redirect2Verify__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_Redirect2Verify", OTHER);

            PickleIterator iter__{msg__};
            nsresult result{};
            RequestHeaderTuples changedHeaders{};
            uint32_t sourceRequestBlockingReason{};
            mozilla::Maybe<ChildLoadInfoForwarderArgs> targetLoadInfoForwarder{};
            uint32_t loadFlags{};
            RefPtr<nsIReferrerInfo> referrerInfo{};
            mozilla::Maybe<URIParams> apiRedirectTo{};
            mozilla::Maybe<CorsPreflightArgs> corsPreflightArgs{};
            bool chooseAppcache{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(result)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'result'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223840)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(changedHeaders)))))) {
                FatalError("Error deserializing 'RequestHeaderTuples'");
                return MsgValueError;
            }
            // Sentinel = 'changedHeaders'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 688522631)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RequestHeaderTuples'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceRequestBlockingReason)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'sourceRequestBlockingReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2614692620)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(targetLoadInfoForwarder)))))) {
                FatalError("Error deserializing 'ChildLoadInfoForwarderArgs?'");
                return MsgValueError;
            }
            // Sentinel = 'targetLoadInfoForwarder'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1854474560)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ChildLoadInfoForwarderArgs?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loadFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'loadFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 297665422)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(referrerInfo)))))) {
                FatalError("Error deserializing 'nsIReferrerInfo'");
                return MsgValueError;
            }
            // Sentinel = 'referrerInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 540214506)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIReferrerInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(apiRedirectTo)))))) {
                FatalError("Error deserializing 'URIParams?'");
                return MsgValueError;
            }
            // Sentinel = 'apiRedirectTo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 606143792)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'URIParams?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(corsPreflightArgs)))))) {
                FatalError("Error deserializing 'CorsPreflightArgs?'");
                return MsgValueError;
            }
            // Sentinel = 'corsPreflightArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1048250090)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CorsPreflightArgs?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(chooseAppcache)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'chooseAppcache'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 709690775)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvRedirect2Verify(std::move(result), std::move(changedHeaders), std::move(sourceRequestBlockingReason), std::move(targetLoadInfoForwarder), std::move(loadFlags), referrerInfo, std::move(apiRedirectTo), std::move(corsPreflightArgs), std::move(chooseAppcache))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_DocumentChannelCleanup__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_DocumentChannelCleanup", OTHER);

            PickleIterator iter__{msg__};
            bool clearCacheEntry{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(clearCacheEntry)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'clearCacheEntry'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 779486702)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvDocumentChannelCleanup(std::move(clearCacheEntry))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_MarkOfflineCacheEntryAsForeign__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_MarkOfflineCacheEntryAsForeign", OTHER);

            if ((!((this)->RecvMarkOfflineCacheEntryAsForeign()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_RemoveCorsPreflightCacheEntry__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_RemoveCorsPreflightCacheEntry", OTHER);

            PickleIterator iter__{msg__};
            URIParams uri{};
            PrincipalInfo requestingPrincipal{};
            OriginAttributes originAttributes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'URIParams'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'URIParams'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestingPrincipal)))))) {
                FatalError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            // Sentinel = 'requestingPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1344079850)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'originAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 947259056)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvRemoveCorsPreflightCacheEntry(std::move(uri), std::move(requestingPrincipal), std::move(originAttributes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_DeletingChannel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_DeletingChannel", OTHER);

            if ((!((this)->RecvDeletingChannel()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_OpenOriginalCacheInputStream__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_OpenOriginalCacheInputStream", OTHER);

            if ((!((this)->RecvOpenOriginalCacheInputStream()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_OpenAltDataCacheInputStream__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_OpenAltDataCacheInputStream", OTHER);

            PickleIterator iter__{msg__};
            nsCString aType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOpenAltDataCacheInputStream(std::move(aType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_BytesRead__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_BytesRead", OTHER);

            PickleIterator iter__{msg__};
            int32_t count{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(count)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'count'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106889770)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvBytesRead(std::move(count))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PHttpChannelParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PHttpChannel'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PHttpChannel'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpChannel'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PHttpChannelMsgStart, actor);

            return MsgProcessed;
        }
    case PHttpChannel::Msg_SetPriority__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_SetPriority", OTHER);

            PickleIterator iter__{msg__};
            int16_t priority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(priority)))))) {
                FatalError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            // Sentinel = 'priority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 262865795)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetPriority(std::move(priority))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHttpChannelParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpChannelParent::Result
{
    return MsgNotKnown;
}

auto PHttpChannelParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpChannelParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHttpChannelParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PHttpChannelParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PHttpChannelParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHttpChannel", PHttpChannelMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PHttpChannelParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
