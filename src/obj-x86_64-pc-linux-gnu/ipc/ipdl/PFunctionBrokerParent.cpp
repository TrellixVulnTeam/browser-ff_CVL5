//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PFunctionBrokerParent.h"
#include "mozilla/ProfilerLabels.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {


auto PFunctionBrokerParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PFunctionBrokerParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PFunctionBrokerParent::EnteredCxxStack() -> void
{
}

auto PFunctionBrokerParent::ExitedCxxStack() -> void
{
}

auto PFunctionBrokerParent::EnteredCall() -> void
{
}

auto PFunctionBrokerParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PFunctionBrokerParent::PFunctionBrokerParent() :
    mozilla::ipc::IToplevelProtocol("PFunctionBrokerParent", PFunctionBrokerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PFunctionBrokerParent);
}

PFunctionBrokerParent::~PFunctionBrokerParent()
{
    MOZ_COUNT_DTOR(PFunctionBrokerParent);
}

auto PFunctionBrokerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PFunctionBrokerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PFunctionBrokerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PFunctionBrokerParent::OnMessageReceived(const Message& msg__) -> PFunctionBrokerParent::Result
{
    switch (msg__.type()) {
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PFunctionBrokerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PFunctionBrokerParent::Result
{
    switch (msg__.type()) {
    case PFunctionBroker::Msg_BrokerFunction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PFunctionBrokerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PFunctionBrokerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PFunctionBroker::Msg_BrokerFunction", OTHER);

            PickleIterator iter__{msg__};
            FunctionHookId aFunctionId{};
            IpdlTuple aFunctionParams{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFunctionId)))))) {
                FatalError("Error deserializing 'FunctionHookId'");
                return MsgValueError;
            }
            // Sentinel = 'aFunctionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435487829)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FunctionHookId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFunctionParams)))))) {
                FatalError("Error deserializing 'IpdlTuple'");
                return MsgValueError;
            }
            // Sentinel = 'aFunctionParams'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 798754316)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IpdlTuple'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            IpdlTuple aFunctionRet{};
            if ((!((this)->RecvBrokerFunction(std::move(aFunctionId), std::move(aFunctionParams), (&(aFunctionRet)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PFunctionBroker::Reply_BrokerFunction(id__);

            WriteIPDLParam(reply__, this, aFunctionRet);
            // Sentinel = 'aFunctionRet'
            (reply__)->WriteSentinel(517670099);

            if (mozilla::ipc::LoggingEnabledFor("PFunctionBrokerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PFunctionBrokerParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PFunctionBrokerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PFunctionBrokerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PFunctionBrokerParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PFunctionBrokerParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PFunctionBrokerParent::ClearSubtree() -> void
{
}



} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PFunctionBrokerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::plugins::PFunctionBrokerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PFunctionBroker", PFunctionBrokerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::plugins::PFunctionBrokerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
