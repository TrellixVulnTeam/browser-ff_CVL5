//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PAltServiceParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/AltServiceParent.h"

#include "mozilla/net/PSocketProcessParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PAltServiceParent::PAltServiceParent() :
    mozilla::ipc::IProtocol(PAltServiceMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PAltServiceParent);
}

PAltServiceParent::~PAltServiceParent()
{
    MOZ_COUNT_DTOR(PAltServiceParent);
}

auto PAltServiceParent::Manager() const -> PSocketProcessParent*
{
    return static_cast<PSocketProcessParent*>(IProtocol::Manager());
}

auto PAltServiceParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PAltServiceParent::Send__delete__(PAltServiceParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PAltService::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PAltServiceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAltServiceParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAltService::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PAltServiceMsgStart, actor);
    return sendok__;
}

auto PAltServiceParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAltServiceParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAltServiceParent::OnMessageReceived(const Message& msg__) -> PAltServiceParent::Result
{
    switch (msg__.type()) {
    case PAltService::Msg_ClearHostMapping__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAltServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAltServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAltService::Msg_ClearHostMapping", OTHER);

            PickleIterator iter__{msg__};
            nsCString host{};
            int32_t port{};
            OriginAttributes originAttributes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(host)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'host'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72024511)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(port)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'port'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73990598)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'originAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 947259056)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<AltServiceParent*>(this))->RecvClearHostMapping(std::move(host), std::move(port), std::move(originAttributes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAltService::Msg_ProcessHeader__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAltServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAltServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAltService::Msg_ProcessHeader", OTHER);

            PickleIterator iter__{msg__};
            nsCString buf{};
            nsCString originScheme{};
            nsCString originHost{};
            int32_t originPort{};
            nsCString username{};
            bool privateBrowsing{};
            nsTArray<ProxyInfoCloneArgs> proxyInfo{};
            uint32_t caps{};
            OriginAttributes originAttributes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buf)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'buf'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41484606)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originScheme)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originScheme'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 538445022)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originHost)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originHost'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 383648807)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originPort)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'originPort'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 385614894)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(username)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'username'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 260506465)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(privateBrowsing)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'privateBrowsing'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 844957255)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(proxyInfo)))))) {
                FatalError("Error deserializing 'ProxyInfoCloneArgs[]'");
                return MsgValueError;
            }
            // Sentinel = 'proxyInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 325583823)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ProxyInfoCloneArgs[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(caps)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'caps'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67502504)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originAttributes)))))) {
                FatalError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            // Sentinel = 'originAttributes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 947259056)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OriginAttributes'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<AltServiceParent*>(this))->RecvProcessHeader(std::move(buf), std::move(originScheme), std::move(originHost), std::move(originPort), std::move(username), std::move(privateBrowsing), std::move(proxyInfo), std::move(caps), std::move(originAttributes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAltService::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAltServiceParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAltServiceParent::Result
{
    return MsgNotKnown;
}

auto PAltServiceParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAltServiceParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAltServiceParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PAltServiceParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PAltServiceParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PAltService", PAltServiceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PAltServiceParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
