//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PMediaTransportChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/MediaTransportChild.h"
#include "mozilla/dom/RTCStatsReportBinding.h"
#include "mozilla/media/webrtc/WebrtcIPCTraits.h"
#include "mozilla/net/NrIceStunAddrMessageUtils.h"

#include "mozilla/ipc/PBackgroundChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PMediaTransportChild::PMediaTransportChild() :
    mozilla::ipc::IProtocol(PMediaTransportMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PMediaTransportChild);
}

PMediaTransportChild::~PMediaTransportChild()
{
    MOZ_COUNT_DTOR(PMediaTransportChild);
}

auto PMediaTransportChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PMediaTransportChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PMediaTransportChild::Send__delete__(PMediaTransportChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PMediaTransport::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PMediaTransportMsgStart, actor);
    return sendok__;
}

auto PMediaTransportChild::SendGetIceLog(
        const nsCString& pattern,
        mozilla::ipc::ResolveCallback<WebrtcGlobalLog>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PMediaTransport::Msg_GetIceLog(Id());

    WriteIPDLParam(msg__, this, pattern);
    // Sentinel = 'pattern'
    (msg__)->WriteSentinel(200409855);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_GetIceLog", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PMediaTransportChild::SendGetIceLog(const nsCString& pattern) -> RefPtr<GetIceLogPromise>
{
    RefPtr<MozPromise<WebrtcGlobalLog, ResponseRejectReason, true>::Private> promise__ = new MozPromise<WebrtcGlobalLog, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetIceLog(std::move(pattern), [promise__](WebrtcGlobalLog&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PMediaTransportChild::SendClearIceLog() -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_ClearIceLog(Id());





    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_ClearIceLog", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendEnterPrivateMode() -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_EnterPrivateMode(Id());





    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_EnterPrivateMode", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendExitPrivateMode() -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_ExitPrivateMode(Id());





    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_ExitPrivateMode", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendCreateIceCtx(
        const string& name,
        const nsTArray<RTCIceServer>& iceServers,
        const RTCIceTransportPolicy& icePolicy) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_CreateIceCtx(Id());

    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);
    WriteIPDLParam(msg__, this, iceServers);
    // Sentinel = 'iceServers'
    (msg__)->WriteSentinel(369230876);
    WriteIPDLParam(msg__, this, icePolicy);
    // Sentinel = 'icePolicy'
    (msg__)->WriteSentinel(298451874);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_CreateIceCtx", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendSetProxyConfig(const WebrtcProxyConfig& proxyConfig) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_SetProxyConfig(Id());

    WriteIPDLParam(msg__, this, proxyConfig);
    // Sentinel = 'proxyConfig'
    (msg__)->WriteSentinel(472188057);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_SetProxyConfig", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendEnsureProvisionalTransport(
        const string& transportId,
        const string& localUfrag,
        const string& localPwd,
        const int& componentCount) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_EnsureProvisionalTransport(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, localUfrag);
    // Sentinel = 'localUfrag'
    (msg__)->WriteSentinel(372245505);
    WriteIPDLParam(msg__, this, localPwd);
    // Sentinel = 'localPwd'
    (msg__)->WriteSentinel(244974391);
    WriteIPDLParam(msg__, this, componentCount);
    // Sentinel = 'componentCount'
    (msg__)->WriteSentinel(735512029);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_EnsureProvisionalTransport", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendSetTargetForDefaultLocalAddressLookup(
        const string& targetIp,
        const uint16_t& targetPort) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_SetTargetForDefaultLocalAddressLookup(Id());

    WriteIPDLParam(msg__, this, targetIp);
    // Sentinel = 'targetIp'
    (msg__)->WriteSentinel(250610497);
    WriteIPDLParam(msg__, this, targetPort);
    // Sentinel = 'targetPort'
    (msg__)->WriteSentinel(383976493);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_SetTargetForDefaultLocalAddressLookup", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendStartIceGathering(
        const bool& defaultRouteOnly,
        const bool& obfuscateHostAddresses,
        const NrIceStunAddrArray& stunAddrs) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_StartIceGathering(Id());

    WriteIPDLParam(msg__, this, defaultRouteOnly);
    // Sentinel = 'defaultRouteOnly'
    (msg__)->WriteSentinel(930678423);
    WriteIPDLParam(msg__, this, obfuscateHostAddresses);
    // Sentinel = 'obfuscateHostAddresses'
    (msg__)->WriteSentinel(1725761785);
    WriteIPDLParam(msg__, this, stunAddrs);
    // Sentinel = 'stunAddrs'
    (msg__)->WriteSentinel(315818937);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_StartIceGathering", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendActivateTransport(
        const string& transportId,
        const string& localUfrag,
        const string& localPwd,
        const int& componentCount,
        const string& remoteUfrag,
        const string& remotePwd,
        const nsTArray<uint8_t>& keyDer,
        const nsTArray<uint8_t>& certDer,
        const int& authType,
        const bool& dtlsClient,
        const DtlsDigestList& digests,
        const bool& privacyRequested) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_ActivateTransport(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, localUfrag);
    // Sentinel = 'localUfrag'
    (msg__)->WriteSentinel(372245505);
    WriteIPDLParam(msg__, this, localPwd);
    // Sentinel = 'localPwd'
    (msg__)->WriteSentinel(244974391);
    WriteIPDLParam(msg__, this, componentCount);
    // Sentinel = 'componentCount'
    (msg__)->WriteSentinel(735512029);
    WriteIPDLParam(msg__, this, remoteUfrag);
    // Sentinel = 'remoteUfrag'
    (msg__)->WriteSentinel(460981378);
    WriteIPDLParam(msg__, this, remotePwd);
    // Sentinel = 'remotePwd'
    (msg__)->WriteSentinel(316801976);
    WriteIPDLParam(msg__, this, keyDer);
    // Sentinel = 'keyDer'
    (msg__)->WriteSentinel(141361765);
    WriteIPDLParam(msg__, this, certDer);
    // Sentinel = 'certDer'
    (msg__)->WriteSentinel(187433674);
    WriteIPDLParam(msg__, this, authType);
    // Sentinel = 'authType'
    (msg__)->WriteSentinel(251855701);
    WriteIPDLParam(msg__, this, dtlsClient);
    // Sentinel = 'dtlsClient'
    (msg__)->WriteSentinel(375129111);
    WriteIPDLParam(msg__, this, digests);
    // Sentinel = 'digests'
    (msg__)->WriteSentinel(193200884);
    WriteIPDLParam(msg__, this, privacyRequested);
    // Sentinel = 'privacyRequested'
    (msg__)->WriteSentinel(959383217);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_ActivateTransport", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendRemoveTransportsExcept(const StringVector& transportIds) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_RemoveTransportsExcept(Id());

    WriteIPDLParam(msg__, this, transportIds);
    // Sentinel = 'transportIds'
    (msg__)->WriteSentinel(560727310);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_RemoveTransportsExcept", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendStartIceChecks(
        const bool& isControlling,
        const StringVector& iceOptions) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_StartIceChecks(Id());

    WriteIPDLParam(msg__, this, isControlling);
    // Sentinel = 'isControlling'
    (msg__)->WriteSentinel(628950376);
    WriteIPDLParam(msg__, this, iceOptions);
    // Sentinel = 'iceOptions'
    (msg__)->WriteSentinel(370410526);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_StartIceChecks", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendSendPacket(
        const string& transportId,
        const MediaPacket& packet) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_SendPacket(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, packet);
    // Sentinel = 'packet'
    (msg__)->WriteSentinel(144048761);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_SendPacket", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendAddIceCandidate(
        const string& transportId,
        const string& candidate,
        const string& ufrag,
        const string& obfuscatedAddr) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_AddIceCandidate(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, candidate);
    // Sentinel = 'candidate'
    (msg__)->WriteSentinel(301138846);
    WriteIPDLParam(msg__, this, ufrag);
    // Sentinel = 'ufrag'
    (msg__)->WriteSentinel(107282966);
    WriteIPDLParam(msg__, this, obfuscatedAddr);
    // Sentinel = 'obfuscatedAddr'
    (msg__)->WriteSentinel(718407068);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_AddIceCandidate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendUpdateNetworkState(const bool& online) -> bool
{
    IPC::Message* msg__ = PMediaTransport::Msg_UpdateNetworkState(Id());

    WriteIPDLParam(msg__, this, online);
    // Sentinel = 'online'
    (msg__)->WriteSentinel(150078086);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_UpdateNetworkState", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaTransportChild::SendGetIceStats(
        const string& transportId,
        const double& now,
        mozilla::ipc::ResolveCallback<NotReallyMovableButLetsPretendItIsRTCStatsCollection>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PMediaTransport::Msg_GetIceStats(Id());

    WriteIPDLParam(msg__, this, transportId);
    // Sentinel = 'transportId'
    (msg__)->WriteSentinel(475923611);
    WriteIPDLParam(msg__, this, now);
    // Sentinel = 'now'
    (msg__)->WriteSentinel(44171605);




    if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaTransportChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMediaTransport::Msg_GetIceStats", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PMediaTransportChild::SendGetIceStats(
        const string& transportId,
        const double& now) -> RefPtr<GetIceStatsPromise>
{
    RefPtr<MozPromise<NotReallyMovableButLetsPretendItIsRTCStatsCollection, ResponseRejectReason, true>::Private> promise__ = new MozPromise<NotReallyMovableButLetsPretendItIsRTCStatsCollection, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetIceStats(std::move(transportId), std::move(now), [promise__](NotReallyMovableButLetsPretendItIsRTCStatsCollection&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PMediaTransportChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PMediaTransportChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PMediaTransportChild::OnMessageReceived(const Message& msg__) -> PMediaTransportChild::Result
{
    switch (msg__.type()) {
    case PMediaTransport::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PMediaTransport::Reply_GetIceLog__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_GetIceLog", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<WebrtcGlobalLog> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                WebrtcGlobalLog loglines{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loglines)))))) {
                    FatalError("Error deserializing 'WebrtcGlobalLog'");
                    return MsgValueError;
                }
                // Sentinel = 'loglines'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 253887326)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'WebrtcGlobalLog'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(loglines));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PMediaTransport::Reply_GetIceStats__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_GetIceStats", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<NotReallyMovableButLetsPretendItIsRTCStatsCollection> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                NotReallyMovableButLetsPretendItIsRTCStatsCollection stats{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stats)))))) {
                    FatalError("Error deserializing 'NotReallyMovableButLetsPretendItIsRTCStatsCollection'");
                    return MsgValueError;
                }
                // Sentinel = 'stats'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 110232112)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'NotReallyMovableButLetsPretendItIsRTCStatsCollection'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(stats));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PMediaTransport::Msg_OnCandidate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnCandidate", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            CandidateInfo candidateInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(candidateInfo)))))) {
                FatalError("Error deserializing 'CandidateInfo'");
                return MsgValueError;
            }
            // Sentinel = 'candidateInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 605291818)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CandidateInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportChild*>(this))->RecvOnCandidate(std::move(transportId), std::move(candidateInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_OnAlpnNegotiated__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnAlpnNegotiated", OTHER);

            PickleIterator iter__{msg__};
            string alpn{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(alpn)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'alpn'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 68813228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportChild*>(this))->RecvOnAlpnNegotiated(std::move(alpn))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_OnGatheringStateChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnGatheringStateChange", OTHER);

            PickleIterator iter__{msg__};
            int state{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(state)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'state'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109314594)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportChild*>(this))->RecvOnGatheringStateChange(std::move(state))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_OnConnectionStateChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnConnectionStateChange", OTHER);

            PickleIterator iter__{msg__};
            int state{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(state)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'state'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109314594)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportChild*>(this))->RecvOnConnectionStateChange(std::move(state))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_OnPacketReceived__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnPacketReceived", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            MediaPacket packet{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(packet)))))) {
                FatalError("Error deserializing 'MediaPacket'");
                return MsgValueError;
            }
            // Sentinel = 'packet'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144048761)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaPacket'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportChild*>(this))->RecvOnPacketReceived(std::move(transportId), std::move(packet))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_OnEncryptedSending__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnEncryptedSending", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            MediaPacket packet{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(packet)))))) {
                FatalError("Error deserializing 'MediaPacket'");
                return MsgValueError;
            }
            // Sentinel = 'packet'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144048761)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaPacket'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportChild*>(this))->RecvOnEncryptedSending(std::move(transportId), std::move(packet))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_OnStateChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnStateChange", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            int state{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(state)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'state'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109314594)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportChild*>(this))->RecvOnStateChange(std::move(transportId), std::move(state))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMediaTransport::Msg_OnRtcpStateChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaTransportChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaTransportChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMediaTransport::Msg_OnRtcpStateChange", OTHER);

            PickleIterator iter__{msg__};
            string transportId{};
            int state{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transportId)))))) {
                FatalError("Error deserializing 'string'");
                return MsgValueError;
            }
            // Sentinel = 'transportId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 475923611)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'string'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(state)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'state'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109314594)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MediaTransportChild*>(this))->RecvOnRtcpStateChange(std::move(transportId), std::move(state))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PMediaTransportChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PMediaTransportChild::Result
{
    return MsgNotKnown;
}

auto PMediaTransportChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PMediaTransportChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PMediaTransportChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PMediaTransportChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PMediaTransportChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PMediaTransport", PMediaTransportMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PMediaTransportChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
