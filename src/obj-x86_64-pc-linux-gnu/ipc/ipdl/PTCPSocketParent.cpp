//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PTCPSocketParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/network/TCPSocketParent.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/net/NeckoMessageUtils.h"

#include "mozilla/net/PNeckoParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PTCPSocketParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PTCPSocketParent::PTCPSocketParent() :
    mozilla::ipc::IProtocol(PTCPSocketMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PTCPSocketParent);
}

PTCPSocketParent::~PTCPSocketParent()
{
    MOZ_COUNT_DTOR(PTCPSocketParent);
}

auto PTCPSocketParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PTCPSocketParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PTCPSocketParent::SendCallback(
        const nsString& type,
        const CallbackData& data,
        const uint32_t& readyState) -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_Callback(Id());

    WriteIPDLParam(msg__, this, type);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(75760067);
    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);
    WriteIPDLParam(msg__, this, readyState);
    // Sentinel = 'readyState'
    (msg__)->WriteSentinel(377750551);




    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_Callback", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketParent::SendUpdateBufferedAmount(
        const uint32_t& bufferedAmount,
        const uint32_t& trackingNumber) -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_UpdateBufferedAmount(Id());

    WriteIPDLParam(msg__, this, bufferedAmount);
    // Sentinel = 'bufferedAmount'
    (msg__)->WriteSentinel(711919032);
    WriteIPDLParam(msg__, this, trackingNumber);
    // Sentinel = 'trackingNumber'
    (msg__)->WriteSentinel(726664637);




    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_UpdateBufferedAmount", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketParent::SendRequestDelete() -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_RequestDelete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_RequestDelete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketParent::Send__delete__(PTCPSocketParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PTCPSocket::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PTCPSocketMsgStart, actor);
    return sendok__;
}

auto PTCPSocketParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTCPSocketParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTCPSocketParent::OnMessageReceived(const Message& msg__) -> PTCPSocketParent::Result
{
    switch (msg__.type()) {
    case PTCPSocket::Msg_Open__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_Open", OTHER);

            PickleIterator iter__{msg__};
            nsString host{};
            uint16_t port{};
            bool useSSL{};
            bool useArrayBuffers{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(host)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'host'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72024511)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(port)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'port'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73990598)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(useSSL)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'useSSL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142737984)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(useArrayBuffers)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'useArrayBuffers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 815007258)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::TCPSocketParent*>(this))->RecvOpen(std::move(host), std::move(port), std::move(useSSL), std::move(useArrayBuffers))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_Data__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_Data", OTHER);

            PickleIterator iter__{msg__};
            SendableData data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'SendableData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SendableData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::TCPSocketParent*>(this))->RecvData(std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_StartTLS__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_StartTLS", OTHER);

            if ((!((static_cast<mozilla::dom::TCPSocketParent*>(this))->RecvStartTLS()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_Suspend__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_Suspend", OTHER);

            if ((!((static_cast<mozilla::dom::TCPSocketParent*>(this))->RecvSuspend()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_Resume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_Resume", OTHER);

            if ((!((static_cast<mozilla::dom::TCPSocketParent*>(this))->RecvResume()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_Close", OTHER);

            if ((!((static_cast<mozilla::dom::TCPSocketParent*>(this))->RecvClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_RequestDelete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_RequestDelete", OTHER);

            if ((!((static_cast<mozilla::dom::TCPSocketParent*>(this))->RecvRequestDelete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PTCPSocket::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PTCPSocketParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PTCPSocket'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PTCPSocket'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PTCPSocket'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::TCPSocketParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PTCPSocketMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PTCPSocketParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PTCPSocketParent::Result
{
    return MsgNotKnown;
}

auto PTCPSocketParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PTCPSocketParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTCPSocketParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PTCPSocketParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PTCPSocketParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PTCPSocket", PTCPSocketMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PTCPSocketParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
