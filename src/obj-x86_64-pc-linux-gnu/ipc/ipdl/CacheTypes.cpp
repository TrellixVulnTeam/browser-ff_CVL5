//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/cache/IPCUtils.h"
#include "mozilla/dom/FetchIPCTypes.h"
#include "mozilla/dom/cache/PCacheParent.h"
#include "mozilla/dom/cache/PCacheChild.h"
#include "mozilla/dom/cache/PCacheStreamControlParent.h"
#include "mozilla/dom/cache/PCacheStreamControlChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/dom/cache/CacheTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheQueryParams|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheQueryParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).ignoreSearch());
    // Sentinel = 'ignoreSearch'
    (aMsg)->WriteSentinel(534643931);
    WriteIPDLParam(aMsg, aActor, (aVar).ignoreMethod());
    // Sentinel = 'ignoreMethod'
    (aMsg)->WriteSentinel(536610022);
    WriteIPDLParam(aMsg, aActor, (aVar).ignoreVary());
    // Sentinel = 'ignoreVary'
    (aMsg)->WriteSentinel(381223975);
    WriteIPDLParam(aMsg, aActor, (aVar).cacheNameSet());
    // Sentinel = 'cacheNameSet'
    (aMsg)->WriteSentinel(501023906);
    WriteIPDLParam(aMsg, aActor, (aVar).cacheName());
    // Sentinel = 'cacheName'
    (aMsg)->WriteSentinel(289670006);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheQueryParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ignoreSearch())))))) {
        aActor->FatalError("Error deserializing 'ignoreSearch' (bool) member of 'CacheQueryParams'");
        return false;
    }
    // Sentinel = 'ignoreSearch'
    if ((!((aMsg)->ReadSentinel(aIter, 534643931)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ignoreSearch' (bool) member of 'CacheQueryParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ignoreMethod())))))) {
        aActor->FatalError("Error deserializing 'ignoreMethod' (bool) member of 'CacheQueryParams'");
        return false;
    }
    // Sentinel = 'ignoreMethod'
    if ((!((aMsg)->ReadSentinel(aIter, 536610022)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ignoreMethod' (bool) member of 'CacheQueryParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ignoreVary())))))) {
        aActor->FatalError("Error deserializing 'ignoreVary' (bool) member of 'CacheQueryParams'");
        return false;
    }
    // Sentinel = 'ignoreVary'
    if ((!((aMsg)->ReadSentinel(aIter, 381223975)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ignoreVary' (bool) member of 'CacheQueryParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cacheNameSet())))))) {
        aActor->FatalError("Error deserializing 'cacheNameSet' (bool) member of 'CacheQueryParams'");
        return false;
    }
    // Sentinel = 'cacheNameSet'
    if ((!((aMsg)->ReadSentinel(aIter, 501023906)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cacheNameSet' (bool) member of 'CacheQueryParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cacheName())))))) {
        aActor->FatalError("Error deserializing 'cacheName' (nsString) member of 'CacheQueryParams'");
        return false;
    }
    // Sentinel = 'cacheName'
    if ((!((aMsg)->ReadSentinel(aIter, 289670006)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cacheName' (nsString) member of 'CacheQueryParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheReadStream|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheReadStream>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        WriteIPDLParam(aMsg, aActor, (aVar).controlParent());
        // Sentinel = 'control'
        (aMsg)->WriteSentinel(200016642);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        WriteIPDLParam(aMsg, aActor, (aVar).controlChild());
        // Sentinel = 'control'
        (aMsg)->WriteSentinel(200016642);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).stream());
    // Sentinel = 'stream'
    (aMsg)->WriteSentinel(153223821);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheReadStream>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsID) member of 'CacheReadStream'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsID) member of 'CacheReadStream'");
        return false;
    }
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->controlParent())))))) {
            aActor->FatalError("Error deserializing 'controlParent' (PCacheStreamControl) member of 'CacheReadStream'");
            return false;
        }
        // Sentinel = 'control'
        if ((!((aMsg)->ReadSentinel(aIter, 200016642)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'controlParent' (PCacheStreamControl) member of 'CacheReadStream'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->controlChild())))))) {
            aActor->FatalError("Error deserializing 'controlChild' (PCacheStreamControl) member of 'CacheReadStream'");
            return false;
        }
        // Sentinel = 'control'
        if ((!((aMsg)->ReadSentinel(aIter, 200016642)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'controlChild' (PCacheStreamControl) member of 'CacheReadStream'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stream())))))) {
        aActor->FatalError("Error deserializing 'stream' (IPCStream?) member of 'CacheReadStream'");
        return false;
    }
    // Sentinel = 'stream'
    if ((!((aMsg)->ReadSentinel(aIter, 153223821)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stream' (IPCStream?) member of 'CacheReadStream'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HeadersEntry|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::HeadersEntry>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
}

auto IPDLParamTraits<mozilla::dom::cache::HeadersEntry>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'HeadersEntry'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'HeadersEntry'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (nsCString) member of 'HeadersEntry'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (nsCString) member of 'HeadersEntry'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheRequest|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).method());
    // Sentinel = 'method'
    (aMsg)->WriteSentinel(148308610);
    WriteIPDLParam(aMsg, aActor, (aVar).urlWithoutQuery());
    // Sentinel = 'urlWithoutQuery'
    (aMsg)->WriteSentinel(851510878);
    WriteIPDLParam(aMsg, aActor, (aVar).urlQuery());
    // Sentinel = 'urlQuery'
    (aMsg)->WriteSentinel(256574314);
    WriteIPDLParam(aMsg, aActor, (aVar).urlFragment());
    // Sentinel = 'urlFragment'
    (aMsg)->WriteSentinel(454821000);
    WriteIPDLParam(aMsg, aActor, (aVar).headers());
    // Sentinel = 'headers'
    (aMsg)->WriteSentinel(188220125);
    WriteIPDLParam(aMsg, aActor, (aVar).headersGuard());
    // Sentinel = 'headersGuard'
    (aMsg)->WriteSentinel(522912976);
    WriteIPDLParam(aMsg, aActor, (aVar).referrer());
    // Sentinel = 'referrer'
    (aMsg)->WriteSentinel(252838750);
    WriteIPDLParam(aMsg, aActor, (aVar).referrerPolicy());
    // Sentinel = 'referrerPolicy'
    (aMsg)->WriteSentinel(729482702);
    WriteIPDLParam(aMsg, aActor, (aVar).mode());
    // Sentinel = 'mode'
    (aMsg)->WriteSentinel(70386086);
    WriteIPDLParam(aMsg, aActor, (aVar).credentials());
    // Sentinel = 'credentials'
    (aMsg)->WriteSentinel(454689935);
    WriteIPDLParam(aMsg, aActor, (aVar).body());
    // Sentinel = 'body'
    (aMsg)->WriteSentinel(68813231);
    WriteIPDLParam(aMsg, aActor, (aVar).contentPolicyType());
    // Sentinel = 'contentPolicyType'
    (aMsg)->WriteSentinel(1066927886);
    WriteIPDLParam(aMsg, aActor, (aVar).requestCache());
    // Sentinel = 'requestCache'
    (aMsg)->WriteSentinel(544736478);
    WriteIPDLParam(aMsg, aActor, (aVar).requestRedirect());
    // Sentinel = 'requestRedirect'
    (aMsg)->WriteSentinel(843974204);
    WriteIPDLParam(aMsg, aActor, (aVar).integrity());
    // Sentinel = 'integrity'
    (aMsg)->WriteSentinel(320537568);
    WriteIPDLParam(aMsg, aActor, (aVar).loadingEmbedderPolicy());
    // Sentinel = 'loadingEmbedderPolicy'
    (aMsg)->WriteSentinel(1541343335);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->method())))))) {
        aActor->FatalError("Error deserializing 'method' (nsCString) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'method'
    if ((!((aMsg)->ReadSentinel(aIter, 148308610)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'method' (nsCString) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->urlWithoutQuery())))))) {
        aActor->FatalError("Error deserializing 'urlWithoutQuery' (nsCString) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'urlWithoutQuery'
    if ((!((aMsg)->ReadSentinel(aIter, 851510878)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'urlWithoutQuery' (nsCString) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->urlQuery())))))) {
        aActor->FatalError("Error deserializing 'urlQuery' (nsCString) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'urlQuery'
    if ((!((aMsg)->ReadSentinel(aIter, 256574314)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'urlQuery' (nsCString) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->urlFragment())))))) {
        aActor->FatalError("Error deserializing 'urlFragment' (nsCString) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'urlFragment'
    if ((!((aMsg)->ReadSentinel(aIter, 454821000)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'urlFragment' (nsCString) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headers())))))) {
        aActor->FatalError("Error deserializing 'headers' (HeadersEntry[]) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'headers'
    if ((!((aMsg)->ReadSentinel(aIter, 188220125)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headers' (HeadersEntry[]) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headersGuard())))))) {
        aActor->FatalError("Error deserializing 'headersGuard' (HeadersGuardEnum) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'headersGuard'
    if ((!((aMsg)->ReadSentinel(aIter, 522912976)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headersGuard' (HeadersGuardEnum) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrer())))))) {
        aActor->FatalError("Error deserializing 'referrer' (nsString) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'referrer'
    if ((!((aMsg)->ReadSentinel(aIter, 252838750)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrer' (nsString) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrerPolicy())))))) {
        aActor->FatalError("Error deserializing 'referrerPolicy' (ReferrerPolicy) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'referrerPolicy'
    if ((!((aMsg)->ReadSentinel(aIter, 729482702)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrerPolicy' (ReferrerPolicy) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mode())))))) {
        aActor->FatalError("Error deserializing 'mode' (RequestMode) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'mode'
    if ((!((aMsg)->ReadSentinel(aIter, 70386086)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mode' (RequestMode) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->credentials())))))) {
        aActor->FatalError("Error deserializing 'credentials' (RequestCredentials) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'credentials'
    if ((!((aMsg)->ReadSentinel(aIter, 454689935)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'credentials' (RequestCredentials) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->body())))))) {
        aActor->FatalError("Error deserializing 'body' (CacheReadStream?) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'body'
    if ((!((aMsg)->ReadSentinel(aIter, 68813231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'body' (CacheReadStream?) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentPolicyType())))))) {
        aActor->FatalError("Error deserializing 'contentPolicyType' (nsContentPolicyType) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'contentPolicyType'
    if ((!((aMsg)->ReadSentinel(aIter, 1066927886)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentPolicyType' (nsContentPolicyType) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestCache())))))) {
        aActor->FatalError("Error deserializing 'requestCache' (RequestCache) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'requestCache'
    if ((!((aMsg)->ReadSentinel(aIter, 544736478)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestCache' (RequestCache) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestRedirect())))))) {
        aActor->FatalError("Error deserializing 'requestRedirect' (RequestRedirect) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'requestRedirect'
    if ((!((aMsg)->ReadSentinel(aIter, 843974204)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestRedirect' (RequestRedirect) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->integrity())))))) {
        aActor->FatalError("Error deserializing 'integrity' (nsString) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'integrity'
    if ((!((aMsg)->ReadSentinel(aIter, 320537568)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'integrity' (nsString) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadingEmbedderPolicy())))))) {
        aActor->FatalError("Error deserializing 'loadingEmbedderPolicy' (CrossOriginEmbedderPolicy) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'loadingEmbedderPolicy'
    if ((!((aMsg)->ReadSentinel(aIter, 1541343335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadingEmbedderPolicy' (CrossOriginEmbedderPolicy) member of 'CacheRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo?) member of 'CacheRequest'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo?) member of 'CacheRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheResponse|
//
namespace mozilla {
namespace dom {
namespace cache {
auto CacheResponse::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(CacheResponse, paddingInfo_) - offsetof(CacheResponse, status_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).urlList());
    // Sentinel = 'urlList'
    (aMsg)->WriteSentinel(197591792);
    WriteIPDLParam(aMsg, aActor, (aVar).statusText());
    // Sentinel = 'statusText'
    (aMsg)->WriteSentinel(397411402);
    WriteIPDLParam(aMsg, aActor, (aVar).headers());
    // Sentinel = 'headers'
    (aMsg)->WriteSentinel(188220125);
    WriteIPDLParam(aMsg, aActor, (aVar).headersGuard());
    // Sentinel = 'headersGuard'
    (aMsg)->WriteSentinel(522912976);
    WriteIPDLParam(aMsg, aActor, (aVar).body());
    // Sentinel = 'body'
    (aMsg)->WriteSentinel(68813231);
    WriteIPDLParam(aMsg, aActor, (aVar).channelInfo());
    // Sentinel = 'channelInfo'
    (aMsg)->WriteSentinel(442106982);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    (aMsg)->WriteBytes((&((aVar).paddingSize())), 8);
    // Sentinel = 'paddingSize'
    (aMsg)->WriteSentinel(446628979);
    (aMsg)->WriteBytes((&((aVar).status())), 8);
    // Sentinel = 'status | paddingInfo'
    (aMsg)->WriteSentinel(1378355140);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (ResponseType) member of 'CacheResponse'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (ResponseType) member of 'CacheResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->urlList())))))) {
        aActor->FatalError("Error deserializing 'urlList' (nsCString[]) member of 'CacheResponse'");
        return false;
    }
    // Sentinel = 'urlList'
    if ((!((aMsg)->ReadSentinel(aIter, 197591792)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'urlList' (nsCString[]) member of 'CacheResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->statusText())))))) {
        aActor->FatalError("Error deserializing 'statusText' (nsCString) member of 'CacheResponse'");
        return false;
    }
    // Sentinel = 'statusText'
    if ((!((aMsg)->ReadSentinel(aIter, 397411402)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'statusText' (nsCString) member of 'CacheResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headers())))))) {
        aActor->FatalError("Error deserializing 'headers' (HeadersEntry[]) member of 'CacheResponse'");
        return false;
    }
    // Sentinel = 'headers'
    if ((!((aMsg)->ReadSentinel(aIter, 188220125)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headers' (HeadersEntry[]) member of 'CacheResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->headersGuard())))))) {
        aActor->FatalError("Error deserializing 'headersGuard' (HeadersGuardEnum) member of 'CacheResponse'");
        return false;
    }
    // Sentinel = 'headersGuard'
    if ((!((aMsg)->ReadSentinel(aIter, 522912976)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'headersGuard' (HeadersGuardEnum) member of 'CacheResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->body())))))) {
        aActor->FatalError("Error deserializing 'body' (CacheReadStream?) member of 'CacheResponse'");
        return false;
    }
    // Sentinel = 'body'
    if ((!((aMsg)->ReadSentinel(aIter, 68813231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'body' (CacheReadStream?) member of 'CacheResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->channelInfo())))))) {
        aActor->FatalError("Error deserializing 'channelInfo' (IPCChannelInfo) member of 'CacheResponse'");
        return false;
    }
    // Sentinel = 'channelInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 442106982)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'channelInfo' (IPCChannelInfo) member of 'CacheResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo?) member of 'CacheResponse'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo?) member of 'CacheResponse'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->paddingSize())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'paddingSize'
    if ((!((aMsg)->ReadSentinel(aIter, 446628979)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->status())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'status | paddingInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1378355140)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheRequestResponse|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheRequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).request());
    // Sentinel = 'request'
    (aMsg)->WriteSentinel(202703626);
    WriteIPDLParam(aMsg, aActor, (aVar).response());
    // Sentinel = 'response'
    (aMsg)->WriteSentinel(260965232);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheRequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->request())))))) {
        aActor->FatalError("Error deserializing 'request' (CacheRequest) member of 'CacheRequestResponse'");
        return false;
    }
    // Sentinel = 'request'
    if ((!((aMsg)->ReadSentinel(aIter, 202703626)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'request' (CacheRequest) member of 'CacheRequestResponse'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->response())))))) {
        aActor->FatalError("Error deserializing 'response' (CacheResponse) member of 'CacheRequestResponse'");
        return false;
    }
    // Sentinel = 'response'
    if ((!((aMsg)->ReadSentinel(aIter, 260965232)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'response' (CacheResponse) member of 'CacheRequestResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheMatchArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheMatchArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).request());
    // Sentinel = 'request'
    (aMsg)->WriteSentinel(202703626);
    WriteIPDLParam(aMsg, aActor, (aVar).params());
    // Sentinel = 'params'
    (aMsg)->WriteSentinel(146997893);
    WriteIPDLParam(aMsg, aActor, (aVar).openMode());
    // Sentinel = 'openMode'
    (aMsg)->WriteSentinel(247595832);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheMatchArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->request())))))) {
        aActor->FatalError("Error deserializing 'request' (CacheRequest) member of 'CacheMatchArgs'");
        return false;
    }
    // Sentinel = 'request'
    if ((!((aMsg)->ReadSentinel(aIter, 202703626)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'request' (CacheRequest) member of 'CacheMatchArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->params())))))) {
        aActor->FatalError("Error deserializing 'params' (CacheQueryParams) member of 'CacheMatchArgs'");
        return false;
    }
    // Sentinel = 'params'
    if ((!((aMsg)->ReadSentinel(aIter, 146997893)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'params' (CacheQueryParams) member of 'CacheMatchArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->openMode())))))) {
        aActor->FatalError("Error deserializing 'openMode' (OpenMode) member of 'CacheMatchArgs'");
        return false;
    }
    // Sentinel = 'openMode'
    if ((!((aMsg)->ReadSentinel(aIter, 247595832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'openMode' (OpenMode) member of 'CacheMatchArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheMatchAllArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheMatchAllArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).maybeRequest());
    // Sentinel = 'maybeRequest'
    (aMsg)->WriteSentinel(534054136);
    WriteIPDLParam(aMsg, aActor, (aVar).params());
    // Sentinel = 'params'
    (aMsg)->WriteSentinel(146997893);
    WriteIPDLParam(aMsg, aActor, (aVar).openMode());
    // Sentinel = 'openMode'
    (aMsg)->WriteSentinel(247595832);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheMatchAllArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->maybeRequest())))))) {
        aActor->FatalError("Error deserializing 'maybeRequest' (CacheRequest?) member of 'CacheMatchAllArgs'");
        return false;
    }
    // Sentinel = 'maybeRequest'
    if ((!((aMsg)->ReadSentinel(aIter, 534054136)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'maybeRequest' (CacheRequest?) member of 'CacheMatchAllArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->params())))))) {
        aActor->FatalError("Error deserializing 'params' (CacheQueryParams) member of 'CacheMatchAllArgs'");
        return false;
    }
    // Sentinel = 'params'
    if ((!((aMsg)->ReadSentinel(aIter, 146997893)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'params' (CacheQueryParams) member of 'CacheMatchAllArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->openMode())))))) {
        aActor->FatalError("Error deserializing 'openMode' (OpenMode) member of 'CacheMatchAllArgs'");
        return false;
    }
    // Sentinel = 'openMode'
    if ((!((aMsg)->ReadSentinel(aIter, 247595832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'openMode' (OpenMode) member of 'CacheMatchAllArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CachePutAllArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CachePutAllArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestResponseList());
    // Sentinel = 'requestResponseList'
    (aMsg)->WriteSentinel(1343490037);
}

auto IPDLParamTraits<mozilla::dom::cache::CachePutAllArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestResponseList())))))) {
        aActor->FatalError("Error deserializing 'requestResponseList' (CacheRequestResponse[]) member of 'CachePutAllArgs'");
        return false;
    }
    // Sentinel = 'requestResponseList'
    if ((!((aMsg)->ReadSentinel(aIter, 1343490037)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestResponseList' (CacheRequestResponse[]) member of 'CachePutAllArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheDeleteArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheDeleteArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).request());
    // Sentinel = 'request'
    (aMsg)->WriteSentinel(202703626);
    WriteIPDLParam(aMsg, aActor, (aVar).params());
    // Sentinel = 'params'
    (aMsg)->WriteSentinel(146997893);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheDeleteArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->request())))))) {
        aActor->FatalError("Error deserializing 'request' (CacheRequest) member of 'CacheDeleteArgs'");
        return false;
    }
    // Sentinel = 'request'
    if ((!((aMsg)->ReadSentinel(aIter, 202703626)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'request' (CacheRequest) member of 'CacheDeleteArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->params())))))) {
        aActor->FatalError("Error deserializing 'params' (CacheQueryParams) member of 'CacheDeleteArgs'");
        return false;
    }
    // Sentinel = 'params'
    if ((!((aMsg)->ReadSentinel(aIter, 146997893)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'params' (CacheQueryParams) member of 'CacheDeleteArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheKeysArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheKeysArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).maybeRequest());
    // Sentinel = 'maybeRequest'
    (aMsg)->WriteSentinel(534054136);
    WriteIPDLParam(aMsg, aActor, (aVar).params());
    // Sentinel = 'params'
    (aMsg)->WriteSentinel(146997893);
    WriteIPDLParam(aMsg, aActor, (aVar).openMode());
    // Sentinel = 'openMode'
    (aMsg)->WriteSentinel(247595832);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheKeysArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->maybeRequest())))))) {
        aActor->FatalError("Error deserializing 'maybeRequest' (CacheRequest?) member of 'CacheKeysArgs'");
        return false;
    }
    // Sentinel = 'maybeRequest'
    if ((!((aMsg)->ReadSentinel(aIter, 534054136)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'maybeRequest' (CacheRequest?) member of 'CacheKeysArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->params())))))) {
        aActor->FatalError("Error deserializing 'params' (CacheQueryParams) member of 'CacheKeysArgs'");
        return false;
    }
    // Sentinel = 'params'
    if ((!((aMsg)->ReadSentinel(aIter, 146997893)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'params' (CacheQueryParams) member of 'CacheKeysArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->openMode())))))) {
        aActor->FatalError("Error deserializing 'openMode' (OpenMode) member of 'CacheKeysArgs'");
        return false;
    }
    // Sentinel = 'openMode'
    if ((!((aMsg)->ReadSentinel(aIter, 247595832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'openMode' (OpenMode) member of 'CacheKeysArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageMatchArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageMatchArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).request());
    // Sentinel = 'request'
    (aMsg)->WriteSentinel(202703626);
    WriteIPDLParam(aMsg, aActor, (aVar).params());
    // Sentinel = 'params'
    (aMsg)->WriteSentinel(146997893);
    WriteIPDLParam(aMsg, aActor, (aVar).openMode());
    // Sentinel = 'openMode'
    (aMsg)->WriteSentinel(247595832);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageMatchArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->request())))))) {
        aActor->FatalError("Error deserializing 'request' (CacheRequest) member of 'StorageMatchArgs'");
        return false;
    }
    // Sentinel = 'request'
    if ((!((aMsg)->ReadSentinel(aIter, 202703626)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'request' (CacheRequest) member of 'StorageMatchArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->params())))))) {
        aActor->FatalError("Error deserializing 'params' (CacheQueryParams) member of 'StorageMatchArgs'");
        return false;
    }
    // Sentinel = 'params'
    if ((!((aMsg)->ReadSentinel(aIter, 146997893)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'params' (CacheQueryParams) member of 'StorageMatchArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->openMode())))))) {
        aActor->FatalError("Error deserializing 'openMode' (OpenMode) member of 'StorageMatchArgs'");
        return false;
    }
    // Sentinel = 'openMode'
    if ((!((aMsg)->ReadSentinel(aIter, 247595832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'openMode' (OpenMode) member of 'StorageMatchArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageHasArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageHasArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageHasArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (nsString) member of 'StorageHasArgs'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (nsString) member of 'StorageHasArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageOpenArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageOpenArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageOpenArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (nsString) member of 'StorageOpenArgs'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (nsString) member of 'StorageOpenArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageDeleteArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageDeleteArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageDeleteArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (nsString) member of 'StorageDeleteArgs'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (nsString) member of 'StorageDeleteArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageKeysArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageKeysArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::cache::StorageKeysArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union CacheOpArgs|
//
namespace mozilla {
namespace dom {
namespace cache {
auto CacheOpArgs::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TCacheMatchArgs:
        {
            (ptr_CacheMatchArgs())->~CacheMatchArgs__tdef();
            break;
        }
    case TCacheMatchAllArgs:
        {
            (ptr_CacheMatchAllArgs())->~CacheMatchAllArgs__tdef();
            break;
        }
    case TCachePutAllArgs:
        {
            (ptr_CachePutAllArgs())->~CachePutAllArgs__tdef();
            break;
        }
    case TCacheDeleteArgs:
        {
            (ptr_CacheDeleteArgs())->~CacheDeleteArgs__tdef();
            break;
        }
    case TCacheKeysArgs:
        {
            (ptr_CacheKeysArgs())->~CacheKeysArgs__tdef();
            break;
        }
    case TStorageMatchArgs:
        {
            (ptr_StorageMatchArgs())->~StorageMatchArgs__tdef();
            break;
        }
    case TStorageHasArgs:
        {
            (ptr_StorageHasArgs())->~StorageHasArgs__tdef();
            break;
        }
    case TStorageOpenArgs:
        {
            (ptr_StorageOpenArgs())->~StorageOpenArgs__tdef();
            break;
        }
    case TStorageDeleteArgs:
        {
            (ptr_StorageDeleteArgs())->~StorageDeleteArgs__tdef();
            break;
        }
    case TStorageKeysArgs:
        {
            (ptr_StorageKeysArgs())->~StorageKeysArgs__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const CacheMatchArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheMatchArgs()) CacheMatchArgs(aOther);
    mType = TCacheMatchArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(CacheMatchArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheMatchArgs()) CacheMatchArgs(std::move(aOther));
    mType = TCacheMatchArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const CacheMatchAllArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheMatchAllArgs()) CacheMatchAllArgs(aOther);
    mType = TCacheMatchAllArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(CacheMatchAllArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheMatchAllArgs()) CacheMatchAllArgs(std::move(aOther));
    mType = TCacheMatchAllArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const CachePutAllArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_CachePutAllArgs()) CachePutAllArgs(aOther);
    mType = TCachePutAllArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(CachePutAllArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CachePutAllArgs()) CachePutAllArgs(std::move(aOther));
    mType = TCachePutAllArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const CacheDeleteArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheDeleteArgs()) CacheDeleteArgs(aOther);
    mType = TCacheDeleteArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(CacheDeleteArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheDeleteArgs()) CacheDeleteArgs(std::move(aOther));
    mType = TCacheDeleteArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const CacheKeysArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheKeysArgs()) CacheKeysArgs(aOther);
    mType = TCacheKeysArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(CacheKeysArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheKeysArgs()) CacheKeysArgs(std::move(aOther));
    mType = TCacheKeysArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const StorageMatchArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageMatchArgs()) StorageMatchArgs(aOther);
    mType = TStorageMatchArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(StorageMatchArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageMatchArgs()) StorageMatchArgs(std::move(aOther));
    mType = TStorageMatchArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const StorageHasArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageHasArgs()) StorageHasArgs(aOther);
    mType = TStorageHasArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(StorageHasArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageHasArgs()) StorageHasArgs(std::move(aOther));
    mType = TStorageHasArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const StorageOpenArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageOpenArgs()) StorageOpenArgs(aOther);
    mType = TStorageOpenArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(StorageOpenArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageOpenArgs()) StorageOpenArgs(std::move(aOther));
    mType = TStorageOpenArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const StorageDeleteArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageDeleteArgs()) StorageDeleteArgs(aOther);
    mType = TStorageDeleteArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(StorageDeleteArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageDeleteArgs()) StorageDeleteArgs(std::move(aOther));
    mType = TStorageDeleteArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const StorageKeysArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageKeysArgs()) StorageKeysArgs(aOther);
    mType = TStorageKeysArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(StorageKeysArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageKeysArgs()) StorageKeysArgs(std::move(aOther));
    mType = TStorageKeysArgs;
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(const CacheOpArgs& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TCacheMatchArgs:
        {
            new (mozilla::KnownNotNull, ptr_CacheMatchArgs()) CacheMatchArgs((aOther).get_CacheMatchArgs());
            break;
        }
    case TCacheMatchAllArgs:
        {
            new (mozilla::KnownNotNull, ptr_CacheMatchAllArgs()) CacheMatchAllArgs((aOther).get_CacheMatchAllArgs());
            break;
        }
    case TCachePutAllArgs:
        {
            new (mozilla::KnownNotNull, ptr_CachePutAllArgs()) CachePutAllArgs((aOther).get_CachePutAllArgs());
            break;
        }
    case TCacheDeleteArgs:
        {
            new (mozilla::KnownNotNull, ptr_CacheDeleteArgs()) CacheDeleteArgs((aOther).get_CacheDeleteArgs());
            break;
        }
    case TCacheKeysArgs:
        {
            new (mozilla::KnownNotNull, ptr_CacheKeysArgs()) CacheKeysArgs((aOther).get_CacheKeysArgs());
            break;
        }
    case TStorageMatchArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageMatchArgs()) StorageMatchArgs((aOther).get_StorageMatchArgs());
            break;
        }
    case TStorageHasArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageHasArgs()) StorageHasArgs((aOther).get_StorageHasArgs());
            break;
        }
    case TStorageOpenArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageOpenArgs()) StorageOpenArgs((aOther).get_StorageOpenArgs());
            break;
        }
    case TStorageDeleteArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageDeleteArgs()) StorageDeleteArgs((aOther).get_StorageDeleteArgs());
            break;
        }
    case TStorageKeysArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageKeysArgs()) StorageKeysArgs((aOther).get_StorageKeysArgs());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT CacheOpArgs::CacheOpArgs(CacheOpArgs&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TCacheMatchArgs:
        {
            new (mozilla::KnownNotNull, ptr_CacheMatchArgs()) CacheMatchArgs(std::move((aOther).get_CacheMatchArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCacheMatchAllArgs:
        {
            new (mozilla::KnownNotNull, ptr_CacheMatchAllArgs()) CacheMatchAllArgs(std::move((aOther).get_CacheMatchAllArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCachePutAllArgs:
        {
            new (mozilla::KnownNotNull, ptr_CachePutAllArgs()) CachePutAllArgs(std::move((aOther).get_CachePutAllArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCacheDeleteArgs:
        {
            new (mozilla::KnownNotNull, ptr_CacheDeleteArgs()) CacheDeleteArgs(std::move((aOther).get_CacheDeleteArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCacheKeysArgs:
        {
            new (mozilla::KnownNotNull, ptr_CacheKeysArgs()) CacheKeysArgs(std::move((aOther).get_CacheKeysArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageMatchArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageMatchArgs()) StorageMatchArgs(std::move((aOther).get_StorageMatchArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageHasArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageHasArgs()) StorageHasArgs(std::move((aOther).get_StorageHasArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageOpenArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageOpenArgs()) StorageOpenArgs(std::move((aOther).get_StorageOpenArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageDeleteArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageDeleteArgs()) StorageDeleteArgs(std::move((aOther).get_StorageDeleteArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageKeysArgs:
        {
            new (mozilla::KnownNotNull, ptr_StorageKeysArgs()) StorageKeysArgs(std::move((aOther).get_StorageKeysArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

CacheOpArgs::~CacheOpArgs()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto CacheOpArgs::operator=(const CacheMatchArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCacheMatchArgs)) {
        new (mozilla::KnownNotNull, ptr_CacheMatchArgs()) CacheMatchArgs;
    }
    (*(ptr_CacheMatchArgs())) = aRhs;
    mType = TCacheMatchArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(CacheMatchArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCacheMatchArgs)) {
        new (mozilla::KnownNotNull, ptr_CacheMatchArgs()) CacheMatchArgs;
    }
    (*(ptr_CacheMatchArgs())) = std::move(aRhs);
    mType = TCacheMatchArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const CacheMatchAllArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCacheMatchAllArgs)) {
        new (mozilla::KnownNotNull, ptr_CacheMatchAllArgs()) CacheMatchAllArgs;
    }
    (*(ptr_CacheMatchAllArgs())) = aRhs;
    mType = TCacheMatchAllArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(CacheMatchAllArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCacheMatchAllArgs)) {
        new (mozilla::KnownNotNull, ptr_CacheMatchAllArgs()) CacheMatchAllArgs;
    }
    (*(ptr_CacheMatchAllArgs())) = std::move(aRhs);
    mType = TCacheMatchAllArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const CachePutAllArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCachePutAllArgs)) {
        new (mozilla::KnownNotNull, ptr_CachePutAllArgs()) CachePutAllArgs;
    }
    (*(ptr_CachePutAllArgs())) = aRhs;
    mType = TCachePutAllArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(CachePutAllArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCachePutAllArgs)) {
        new (mozilla::KnownNotNull, ptr_CachePutAllArgs()) CachePutAllArgs;
    }
    (*(ptr_CachePutAllArgs())) = std::move(aRhs);
    mType = TCachePutAllArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const CacheDeleteArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCacheDeleteArgs)) {
        new (mozilla::KnownNotNull, ptr_CacheDeleteArgs()) CacheDeleteArgs;
    }
    (*(ptr_CacheDeleteArgs())) = aRhs;
    mType = TCacheDeleteArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(CacheDeleteArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCacheDeleteArgs)) {
        new (mozilla::KnownNotNull, ptr_CacheDeleteArgs()) CacheDeleteArgs;
    }
    (*(ptr_CacheDeleteArgs())) = std::move(aRhs);
    mType = TCacheDeleteArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const CacheKeysArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCacheKeysArgs)) {
        new (mozilla::KnownNotNull, ptr_CacheKeysArgs()) CacheKeysArgs;
    }
    (*(ptr_CacheKeysArgs())) = aRhs;
    mType = TCacheKeysArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(CacheKeysArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TCacheKeysArgs)) {
        new (mozilla::KnownNotNull, ptr_CacheKeysArgs()) CacheKeysArgs;
    }
    (*(ptr_CacheKeysArgs())) = std::move(aRhs);
    mType = TCacheKeysArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const StorageMatchArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageMatchArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageMatchArgs()) StorageMatchArgs;
    }
    (*(ptr_StorageMatchArgs())) = aRhs;
    mType = TStorageMatchArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(StorageMatchArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageMatchArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageMatchArgs()) StorageMatchArgs;
    }
    (*(ptr_StorageMatchArgs())) = std::move(aRhs);
    mType = TStorageMatchArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const StorageHasArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageHasArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageHasArgs()) StorageHasArgs;
    }
    (*(ptr_StorageHasArgs())) = aRhs;
    mType = TStorageHasArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(StorageHasArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageHasArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageHasArgs()) StorageHasArgs;
    }
    (*(ptr_StorageHasArgs())) = std::move(aRhs);
    mType = TStorageHasArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const StorageOpenArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageOpenArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageOpenArgs()) StorageOpenArgs;
    }
    (*(ptr_StorageOpenArgs())) = aRhs;
    mType = TStorageOpenArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(StorageOpenArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageOpenArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageOpenArgs()) StorageOpenArgs;
    }
    (*(ptr_StorageOpenArgs())) = std::move(aRhs);
    mType = TStorageOpenArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const StorageDeleteArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageDeleteArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageDeleteArgs()) StorageDeleteArgs;
    }
    (*(ptr_StorageDeleteArgs())) = aRhs;
    mType = TStorageDeleteArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(StorageDeleteArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageDeleteArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageDeleteArgs()) StorageDeleteArgs;
    }
    (*(ptr_StorageDeleteArgs())) = std::move(aRhs);
    mType = TStorageDeleteArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const StorageKeysArgs& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageKeysArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageKeysArgs()) StorageKeysArgs;
    }
    (*(ptr_StorageKeysArgs())) = aRhs;
    mType = TStorageKeysArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(StorageKeysArgs&& aRhs) -> CacheOpArgs&
{
    if (MaybeDestroy(TStorageKeysArgs)) {
        new (mozilla::KnownNotNull, ptr_StorageKeysArgs()) StorageKeysArgs;
    }
    (*(ptr_StorageKeysArgs())) = std::move(aRhs);
    mType = TStorageKeysArgs;
    return (*(this));
}

auto CacheOpArgs::operator=(const CacheOpArgs& aRhs) -> CacheOpArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TCacheMatchArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheMatchArgs()) CacheMatchArgs;
            }
            (*(ptr_CacheMatchArgs())) = (aRhs).get_CacheMatchArgs();
            break;
        }
    case TCacheMatchAllArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheMatchAllArgs()) CacheMatchAllArgs;
            }
            (*(ptr_CacheMatchAllArgs())) = (aRhs).get_CacheMatchAllArgs();
            break;
        }
    case TCachePutAllArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CachePutAllArgs()) CachePutAllArgs;
            }
            (*(ptr_CachePutAllArgs())) = (aRhs).get_CachePutAllArgs();
            break;
        }
    case TCacheDeleteArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheDeleteArgs()) CacheDeleteArgs;
            }
            (*(ptr_CacheDeleteArgs())) = (aRhs).get_CacheDeleteArgs();
            break;
        }
    case TCacheKeysArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheKeysArgs()) CacheKeysArgs;
            }
            (*(ptr_CacheKeysArgs())) = (aRhs).get_CacheKeysArgs();
            break;
        }
    case TStorageMatchArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageMatchArgs()) StorageMatchArgs;
            }
            (*(ptr_StorageMatchArgs())) = (aRhs).get_StorageMatchArgs();
            break;
        }
    case TStorageHasArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageHasArgs()) StorageHasArgs;
            }
            (*(ptr_StorageHasArgs())) = (aRhs).get_StorageHasArgs();
            break;
        }
    case TStorageOpenArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageOpenArgs()) StorageOpenArgs;
            }
            (*(ptr_StorageOpenArgs())) = (aRhs).get_StorageOpenArgs();
            break;
        }
    case TStorageDeleteArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageDeleteArgs()) StorageDeleteArgs;
            }
            (*(ptr_StorageDeleteArgs())) = (aRhs).get_StorageDeleteArgs();
            break;
        }
    case TStorageKeysArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageKeysArgs()) StorageKeysArgs;
            }
            (*(ptr_StorageKeysArgs())) = (aRhs).get_StorageKeysArgs();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto CacheOpArgs::operator=(CacheOpArgs&& aRhs) -> CacheOpArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TCacheMatchArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheMatchArgs()) CacheMatchArgs;
            }
            (*(ptr_CacheMatchArgs())) = std::move((aRhs).get_CacheMatchArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCacheMatchAllArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheMatchAllArgs()) CacheMatchAllArgs;
            }
            (*(ptr_CacheMatchAllArgs())) = std::move((aRhs).get_CacheMatchAllArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCachePutAllArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CachePutAllArgs()) CachePutAllArgs;
            }
            (*(ptr_CachePutAllArgs())) = std::move((aRhs).get_CachePutAllArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCacheDeleteArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheDeleteArgs()) CacheDeleteArgs;
            }
            (*(ptr_CacheDeleteArgs())) = std::move((aRhs).get_CacheDeleteArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCacheKeysArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheKeysArgs()) CacheKeysArgs;
            }
            (*(ptr_CacheKeysArgs())) = std::move((aRhs).get_CacheKeysArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageMatchArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageMatchArgs()) StorageMatchArgs;
            }
            (*(ptr_StorageMatchArgs())) = std::move((aRhs).get_StorageMatchArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageHasArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageHasArgs()) StorageHasArgs;
            }
            (*(ptr_StorageHasArgs())) = std::move((aRhs).get_StorageHasArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageOpenArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageOpenArgs()) StorageOpenArgs;
            }
            (*(ptr_StorageOpenArgs())) = std::move((aRhs).get_StorageOpenArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageDeleteArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageDeleteArgs()) StorageDeleteArgs;
            }
            (*(ptr_StorageDeleteArgs())) = std::move((aRhs).get_StorageDeleteArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageKeysArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageKeysArgs()) StorageKeysArgs;
            }
            (*(ptr_StorageKeysArgs())) = std::move((aRhs).get_StorageKeysArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::cache::CacheOpArgs union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'CacheOpArgs'
    (aMsg)->WriteSentinel(400098337);

    switch (type) {
    case union__::TCacheMatchArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CacheMatchArgs());
            // Sentinel = 'TCacheMatchArgs'
            (aMsg)->WriteSentinel(729679267);
            return;
        }
    case union__::TCacheMatchAllArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CacheMatchAllArgs());
            // Sentinel = 'TCacheMatchAllArgs'
            (aMsg)->WriteSentinel(1043007164);
            return;
        }
    case union__::TCachePutAllArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CachePutAllArgs());
            // Sentinel = 'TCachePutAllArgs'
            (aMsg)->WriteSentinel(833357320);
            return;
        }
    case union__::TCacheDeleteArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CacheDeleteArgs());
            // Sentinel = 'TCacheDeleteArgs'
            (aMsg)->WriteSentinel(829228553);
            return;
        }
    case union__::TCacheKeysArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CacheKeysArgs());
            // Sentinel = 'TCacheKeysArgs'
            (aMsg)->WriteSentinel(641860946);
            return;
        }
    case union__::TStorageMatchArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageMatchArgs());
            // Sentinel = 'TStorageMatchArgs'
            (aMsg)->WriteSentinel(994444964);
            return;
        }
    case union__::TStorageHasArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageHasArgs());
            // Sentinel = 'TStorageHasArgs'
            (aMsg)->WriteSentinel(774637011);
            return;
        }
    case union__::TStorageOpenArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageOpenArgs());
            // Sentinel = 'TStorageOpenArgs'
            (aMsg)->WriteSentinel(887424585);
            return;
        }
    case union__::TStorageDeleteArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageDeleteArgs());
            // Sentinel = 'TStorageDeleteArgs'
            (aMsg)->WriteSentinel(1110837002);
            return;
        }
    case union__::TStorageKeysArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageKeysArgs());
            // Sentinel = 'TStorageKeysArgs'
            (aMsg)->WriteSentinel(889783891);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::cache::CacheOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::cache::CacheOpArgs union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union CacheOpArgs");
        return false;
    }
    // Sentinel = 'CacheOpArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 400098337)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union CacheOpArgs");
        return false;
    }

    switch (type) {
    case union__::TCacheMatchArgs:
        {
            mozilla::dom::cache::CacheMatchArgs tmp = mozilla::dom::cache::CacheMatchArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CacheMatchArgs())))))) {
                aActor->FatalError("Error deserializing variant TCacheMatchArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TCacheMatchArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 729679267)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCacheMatchArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TCacheMatchAllArgs:
        {
            mozilla::dom::cache::CacheMatchAllArgs tmp = mozilla::dom::cache::CacheMatchAllArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CacheMatchAllArgs())))))) {
                aActor->FatalError("Error deserializing variant TCacheMatchAllArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TCacheMatchAllArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1043007164)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCacheMatchAllArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TCachePutAllArgs:
        {
            mozilla::dom::cache::CachePutAllArgs tmp = mozilla::dom::cache::CachePutAllArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CachePutAllArgs())))))) {
                aActor->FatalError("Error deserializing variant TCachePutAllArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TCachePutAllArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 833357320)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCachePutAllArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TCacheDeleteArgs:
        {
            mozilla::dom::cache::CacheDeleteArgs tmp = mozilla::dom::cache::CacheDeleteArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CacheDeleteArgs())))))) {
                aActor->FatalError("Error deserializing variant TCacheDeleteArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TCacheDeleteArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 829228553)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCacheDeleteArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TCacheKeysArgs:
        {
            mozilla::dom::cache::CacheKeysArgs tmp = mozilla::dom::cache::CacheKeysArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CacheKeysArgs())))))) {
                aActor->FatalError("Error deserializing variant TCacheKeysArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TCacheKeysArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 641860946)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCacheKeysArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TStorageMatchArgs:
        {
            mozilla::dom::cache::StorageMatchArgs tmp = mozilla::dom::cache::StorageMatchArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageMatchArgs())))))) {
                aActor->FatalError("Error deserializing variant TStorageMatchArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TStorageMatchArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 994444964)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageMatchArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TStorageHasArgs:
        {
            mozilla::dom::cache::StorageHasArgs tmp = mozilla::dom::cache::StorageHasArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageHasArgs())))))) {
                aActor->FatalError("Error deserializing variant TStorageHasArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TStorageHasArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 774637011)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageHasArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TStorageOpenArgs:
        {
            mozilla::dom::cache::StorageOpenArgs tmp = mozilla::dom::cache::StorageOpenArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageOpenArgs())))))) {
                aActor->FatalError("Error deserializing variant TStorageOpenArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TStorageOpenArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 887424585)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageOpenArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TStorageDeleteArgs:
        {
            mozilla::dom::cache::StorageDeleteArgs tmp = mozilla::dom::cache::StorageDeleteArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageDeleteArgs())))))) {
                aActor->FatalError("Error deserializing variant TStorageDeleteArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TStorageDeleteArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1110837002)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageDeleteArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    case union__::TStorageKeysArgs:
        {
            mozilla::dom::cache::StorageKeysArgs tmp = mozilla::dom::cache::StorageKeysArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageKeysArgs())))))) {
                aActor->FatalError("Error deserializing variant TStorageKeysArgs of union CacheOpArgs");
                return false;
            }
            // Sentinel = 'TStorageKeysArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 889783891)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageKeysArgs of union CacheOpArgs");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheMatchResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheMatchResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).maybeResponse());
    // Sentinel = 'maybeResponse'
    (aMsg)->WriteSentinel(624690526);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheMatchResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->maybeResponse())))))) {
        aActor->FatalError("Error deserializing 'maybeResponse' (CacheResponse?) member of 'CacheMatchResult'");
        return false;
    }
    // Sentinel = 'maybeResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 624690526)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'maybeResponse' (CacheResponse?) member of 'CacheMatchResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheMatchAllResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheMatchAllResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).responseList());
    // Sentinel = 'responseList'
    (aMsg)->WriteSentinel(554894604);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheMatchAllResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->responseList())))))) {
        aActor->FatalError("Error deserializing 'responseList' (CacheResponse[]) member of 'CacheMatchAllResult'");
        return false;
    }
    // Sentinel = 'responseList'
    if ((!((aMsg)->ReadSentinel(aIter, 554894604)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'responseList' (CacheResponse[]) member of 'CacheMatchAllResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CachePutAllResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CachePutAllResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::cache::CachePutAllResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheDeleteResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheDeleteResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).success());
    // Sentinel = 'success'
    (aMsg)->WriteSentinel(200082170);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheDeleteResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->success())))))) {
        aActor->FatalError("Error deserializing 'success' (bool) member of 'CacheDeleteResult'");
        return false;
    }
    // Sentinel = 'success'
    if ((!((aMsg)->ReadSentinel(aIter, 200082170)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'success' (bool) member of 'CacheDeleteResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CacheKeysResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheKeysResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestList());
    // Sentinel = 'requestList'
    (aMsg)->WriteSentinel(469894310);
}

auto IPDLParamTraits<mozilla::dom::cache::CacheKeysResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestList())))))) {
        aActor->FatalError("Error deserializing 'requestList' (CacheRequest[]) member of 'CacheKeysResult'");
        return false;
    }
    // Sentinel = 'requestList'
    if ((!((aMsg)->ReadSentinel(aIter, 469894310)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestList' (CacheRequest[]) member of 'CacheKeysResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageMatchResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageMatchResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).maybeResponse());
    // Sentinel = 'maybeResponse'
    (aMsg)->WriteSentinel(624690526);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageMatchResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->maybeResponse())))))) {
        aActor->FatalError("Error deserializing 'maybeResponse' (CacheResponse?) member of 'StorageMatchResult'");
        return false;
    }
    // Sentinel = 'maybeResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 624690526)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'maybeResponse' (CacheResponse?) member of 'StorageMatchResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageHasResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageHasResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).success());
    // Sentinel = 'success'
    (aMsg)->WriteSentinel(200082170);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageHasResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->success())))))) {
        aActor->FatalError("Error deserializing 'success' (bool) member of 'StorageHasResult'");
        return false;
    }
    // Sentinel = 'success'
    if ((!((aMsg)->ReadSentinel(aIter, 200082170)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'success' (bool) member of 'StorageHasResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageOpenResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageOpenResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        WriteIPDLParam(aMsg, aActor, (aVar).actorParent());
        // Sentinel = 'actor'
        (aMsg)->WriteSentinel(102892058);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        WriteIPDLParam(aMsg, aActor, (aVar).actorChild());
        // Sentinel = 'actor'
        (aMsg)->WriteSentinel(102892058);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).ns());
    // Sentinel = 'ns'
    (aMsg)->WriteSentinel(22085858);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageOpenResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->actorParent())))))) {
            aActor->FatalError("Error deserializing 'actorParent' (PCache) member of 'StorageOpenResult'");
            return false;
        }
        // Sentinel = 'actor'
        if ((!((aMsg)->ReadSentinel(aIter, 102892058)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'actorParent' (PCache) member of 'StorageOpenResult'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->actorChild())))))) {
            aActor->FatalError("Error deserializing 'actorChild' (PCache) member of 'StorageOpenResult'");
            return false;
        }
        // Sentinel = 'actor'
        if ((!((aMsg)->ReadSentinel(aIter, 102892058)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'actorChild' (PCache) member of 'StorageOpenResult'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ns())))))) {
        aActor->FatalError("Error deserializing 'ns' (Namespace) member of 'StorageOpenResult'");
        return false;
    }
    // Sentinel = 'ns'
    if ((!((aMsg)->ReadSentinel(aIter, 22085858)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ns' (Namespace) member of 'StorageOpenResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageDeleteResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageDeleteResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).success());
    // Sentinel = 'success'
    (aMsg)->WriteSentinel(200082170);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageDeleteResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->success())))))) {
        aActor->FatalError("Error deserializing 'success' (bool) member of 'StorageDeleteResult'");
        return false;
    }
    // Sentinel = 'success'
    if ((!((aMsg)->ReadSentinel(aIter, 200082170)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'success' (bool) member of 'StorageDeleteResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageKeysResult|
//
namespace mozilla {
namespace dom {
namespace cache {
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::StorageKeysResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).keyList());
    // Sentinel = 'keyList'
    (aMsg)->WriteSentinel(192152294);
}

auto IPDLParamTraits<mozilla::dom::cache::StorageKeysResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keyList())))))) {
        aActor->FatalError("Error deserializing 'keyList' (nsString[]) member of 'StorageKeysResult'");
        return false;
    }
    // Sentinel = 'keyList'
    if ((!((aMsg)->ReadSentinel(aIter, 192152294)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keyList' (nsString[]) member of 'StorageKeysResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union CacheOpResult|
//
namespace mozilla {
namespace dom {
namespace cache {
auto CacheOpResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tvoid_t:
        {
            (ptr_void_t())->~void_t__tdef();
            break;
        }
    case TCacheMatchResult:
        {
            (ptr_CacheMatchResult())->~CacheMatchResult__tdef();
            break;
        }
    case TCacheMatchAllResult:
        {
            (ptr_CacheMatchAllResult())->~CacheMatchAllResult__tdef();
            break;
        }
    case TCachePutAllResult:
        {
            (ptr_CachePutAllResult())->~CachePutAllResult__tdef();
            break;
        }
    case TCacheDeleteResult:
        {
            (ptr_CacheDeleteResult())->~CacheDeleteResult__tdef();
            break;
        }
    case TCacheKeysResult:
        {
            (ptr_CacheKeysResult())->~CacheKeysResult__tdef();
            break;
        }
    case TStorageMatchResult:
        {
            (ptr_StorageMatchResult())->~StorageMatchResult__tdef();
            break;
        }
    case TStorageHasResult:
        {
            (ptr_StorageHasResult())->~StorageHasResult__tdef();
            break;
        }
    case TStorageOpenResult:
        {
            (ptr_StorageOpenResult())->~StorageOpenResult__tdef();
            break;
        }
    case TStorageDeleteResult:
        {
            (ptr_StorageDeleteResult())->~StorageDeleteResult__tdef();
            break;
        }
    case TStorageKeysResult:
        {
            (ptr_StorageKeysResult())->~StorageKeysResult__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const void_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(aOther);
    mType = Tvoid_t;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(void_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move(aOther));
    mType = Tvoid_t;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const CacheMatchResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheMatchResult()) CacheMatchResult(aOther);
    mType = TCacheMatchResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(CacheMatchResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheMatchResult()) CacheMatchResult(std::move(aOther));
    mType = TCacheMatchResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const CacheMatchAllResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheMatchAllResult()) CacheMatchAllResult(aOther);
    mType = TCacheMatchAllResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(CacheMatchAllResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheMatchAllResult()) CacheMatchAllResult(std::move(aOther));
    mType = TCacheMatchAllResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const CachePutAllResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_CachePutAllResult()) CachePutAllResult(aOther);
    mType = TCachePutAllResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(CachePutAllResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CachePutAllResult()) CachePutAllResult(std::move(aOther));
    mType = TCachePutAllResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const CacheDeleteResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheDeleteResult()) CacheDeleteResult(aOther);
    mType = TCacheDeleteResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(CacheDeleteResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheDeleteResult()) CacheDeleteResult(std::move(aOther));
    mType = TCacheDeleteResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const CacheKeysResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheKeysResult()) CacheKeysResult(aOther);
    mType = TCacheKeysResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(CacheKeysResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CacheKeysResult()) CacheKeysResult(std::move(aOther));
    mType = TCacheKeysResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const StorageMatchResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageMatchResult()) StorageMatchResult(aOther);
    mType = TStorageMatchResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(StorageMatchResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageMatchResult()) StorageMatchResult(std::move(aOther));
    mType = TStorageMatchResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const StorageHasResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageHasResult()) StorageHasResult(aOther);
    mType = TStorageHasResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(StorageHasResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageHasResult()) StorageHasResult(std::move(aOther));
    mType = TStorageHasResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const StorageOpenResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageOpenResult()) StorageOpenResult(aOther);
    mType = TStorageOpenResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(StorageOpenResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageOpenResult()) StorageOpenResult(std::move(aOther));
    mType = TStorageOpenResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const StorageDeleteResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageDeleteResult()) StorageDeleteResult(aOther);
    mType = TStorageDeleteResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(StorageDeleteResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageDeleteResult()) StorageDeleteResult(std::move(aOther));
    mType = TStorageDeleteResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const StorageKeysResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageKeysResult()) StorageKeysResult(aOther);
    mType = TStorageKeysResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(StorageKeysResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageKeysResult()) StorageKeysResult(std::move(aOther));
    mType = TStorageKeysResult;
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(const CacheOpResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t((aOther).get_void_t());
            break;
        }
    case TCacheMatchResult:
        {
            new (mozilla::KnownNotNull, ptr_CacheMatchResult()) CacheMatchResult((aOther).get_CacheMatchResult());
            break;
        }
    case TCacheMatchAllResult:
        {
            new (mozilla::KnownNotNull, ptr_CacheMatchAllResult()) CacheMatchAllResult((aOther).get_CacheMatchAllResult());
            break;
        }
    case TCachePutAllResult:
        {
            new (mozilla::KnownNotNull, ptr_CachePutAllResult()) CachePutAllResult((aOther).get_CachePutAllResult());
            break;
        }
    case TCacheDeleteResult:
        {
            new (mozilla::KnownNotNull, ptr_CacheDeleteResult()) CacheDeleteResult((aOther).get_CacheDeleteResult());
            break;
        }
    case TCacheKeysResult:
        {
            new (mozilla::KnownNotNull, ptr_CacheKeysResult()) CacheKeysResult((aOther).get_CacheKeysResult());
            break;
        }
    case TStorageMatchResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageMatchResult()) StorageMatchResult((aOther).get_StorageMatchResult());
            break;
        }
    case TStorageHasResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageHasResult()) StorageHasResult((aOther).get_StorageHasResult());
            break;
        }
    case TStorageOpenResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageOpenResult()) StorageOpenResult((aOther).get_StorageOpenResult());
            break;
        }
    case TStorageDeleteResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageDeleteResult()) StorageDeleteResult((aOther).get_StorageDeleteResult());
            break;
        }
    case TStorageKeysResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageKeysResult()) StorageKeysResult((aOther).get_StorageKeysResult());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT CacheOpResult::CacheOpResult(CacheOpResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move((aOther).get_void_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCacheMatchResult:
        {
            new (mozilla::KnownNotNull, ptr_CacheMatchResult()) CacheMatchResult(std::move((aOther).get_CacheMatchResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCacheMatchAllResult:
        {
            new (mozilla::KnownNotNull, ptr_CacheMatchAllResult()) CacheMatchAllResult(std::move((aOther).get_CacheMatchAllResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCachePutAllResult:
        {
            new (mozilla::KnownNotNull, ptr_CachePutAllResult()) CachePutAllResult(std::move((aOther).get_CachePutAllResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCacheDeleteResult:
        {
            new (mozilla::KnownNotNull, ptr_CacheDeleteResult()) CacheDeleteResult(std::move((aOther).get_CacheDeleteResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCacheKeysResult:
        {
            new (mozilla::KnownNotNull, ptr_CacheKeysResult()) CacheKeysResult(std::move((aOther).get_CacheKeysResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageMatchResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageMatchResult()) StorageMatchResult(std::move((aOther).get_StorageMatchResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageHasResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageHasResult()) StorageHasResult(std::move((aOther).get_StorageHasResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageOpenResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageOpenResult()) StorageOpenResult(std::move((aOther).get_StorageOpenResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageDeleteResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageDeleteResult()) StorageDeleteResult(std::move((aOther).get_StorageDeleteResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageKeysResult:
        {
            new (mozilla::KnownNotNull, ptr_StorageKeysResult()) StorageKeysResult(std::move((aOther).get_StorageKeysResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

CacheOpResult::~CacheOpResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto CacheOpResult::operator=(const void_t& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = aRhs;
    mType = Tvoid_t;
    return (*(this));
}

auto CacheOpResult::operator=(void_t&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = std::move(aRhs);
    mType = Tvoid_t;
    return (*(this));
}

auto CacheOpResult::operator=(const CacheMatchResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCacheMatchResult)) {
        new (mozilla::KnownNotNull, ptr_CacheMatchResult()) CacheMatchResult;
    }
    (*(ptr_CacheMatchResult())) = aRhs;
    mType = TCacheMatchResult;
    return (*(this));
}

auto CacheOpResult::operator=(CacheMatchResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCacheMatchResult)) {
        new (mozilla::KnownNotNull, ptr_CacheMatchResult()) CacheMatchResult;
    }
    (*(ptr_CacheMatchResult())) = std::move(aRhs);
    mType = TCacheMatchResult;
    return (*(this));
}

auto CacheOpResult::operator=(const CacheMatchAllResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCacheMatchAllResult)) {
        new (mozilla::KnownNotNull, ptr_CacheMatchAllResult()) CacheMatchAllResult;
    }
    (*(ptr_CacheMatchAllResult())) = aRhs;
    mType = TCacheMatchAllResult;
    return (*(this));
}

auto CacheOpResult::operator=(CacheMatchAllResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCacheMatchAllResult)) {
        new (mozilla::KnownNotNull, ptr_CacheMatchAllResult()) CacheMatchAllResult;
    }
    (*(ptr_CacheMatchAllResult())) = std::move(aRhs);
    mType = TCacheMatchAllResult;
    return (*(this));
}

auto CacheOpResult::operator=(const CachePutAllResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCachePutAllResult)) {
        new (mozilla::KnownNotNull, ptr_CachePutAllResult()) CachePutAllResult;
    }
    (*(ptr_CachePutAllResult())) = aRhs;
    mType = TCachePutAllResult;
    return (*(this));
}

auto CacheOpResult::operator=(CachePutAllResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCachePutAllResult)) {
        new (mozilla::KnownNotNull, ptr_CachePutAllResult()) CachePutAllResult;
    }
    (*(ptr_CachePutAllResult())) = std::move(aRhs);
    mType = TCachePutAllResult;
    return (*(this));
}

auto CacheOpResult::operator=(const CacheDeleteResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCacheDeleteResult)) {
        new (mozilla::KnownNotNull, ptr_CacheDeleteResult()) CacheDeleteResult;
    }
    (*(ptr_CacheDeleteResult())) = aRhs;
    mType = TCacheDeleteResult;
    return (*(this));
}

auto CacheOpResult::operator=(CacheDeleteResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCacheDeleteResult)) {
        new (mozilla::KnownNotNull, ptr_CacheDeleteResult()) CacheDeleteResult;
    }
    (*(ptr_CacheDeleteResult())) = std::move(aRhs);
    mType = TCacheDeleteResult;
    return (*(this));
}

auto CacheOpResult::operator=(const CacheKeysResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCacheKeysResult)) {
        new (mozilla::KnownNotNull, ptr_CacheKeysResult()) CacheKeysResult;
    }
    (*(ptr_CacheKeysResult())) = aRhs;
    mType = TCacheKeysResult;
    return (*(this));
}

auto CacheOpResult::operator=(CacheKeysResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TCacheKeysResult)) {
        new (mozilla::KnownNotNull, ptr_CacheKeysResult()) CacheKeysResult;
    }
    (*(ptr_CacheKeysResult())) = std::move(aRhs);
    mType = TCacheKeysResult;
    return (*(this));
}

auto CacheOpResult::operator=(const StorageMatchResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageMatchResult)) {
        new (mozilla::KnownNotNull, ptr_StorageMatchResult()) StorageMatchResult;
    }
    (*(ptr_StorageMatchResult())) = aRhs;
    mType = TStorageMatchResult;
    return (*(this));
}

auto CacheOpResult::operator=(StorageMatchResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageMatchResult)) {
        new (mozilla::KnownNotNull, ptr_StorageMatchResult()) StorageMatchResult;
    }
    (*(ptr_StorageMatchResult())) = std::move(aRhs);
    mType = TStorageMatchResult;
    return (*(this));
}

auto CacheOpResult::operator=(const StorageHasResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageHasResult)) {
        new (mozilla::KnownNotNull, ptr_StorageHasResult()) StorageHasResult;
    }
    (*(ptr_StorageHasResult())) = aRhs;
    mType = TStorageHasResult;
    return (*(this));
}

auto CacheOpResult::operator=(StorageHasResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageHasResult)) {
        new (mozilla::KnownNotNull, ptr_StorageHasResult()) StorageHasResult;
    }
    (*(ptr_StorageHasResult())) = std::move(aRhs);
    mType = TStorageHasResult;
    return (*(this));
}

auto CacheOpResult::operator=(const StorageOpenResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageOpenResult)) {
        new (mozilla::KnownNotNull, ptr_StorageOpenResult()) StorageOpenResult;
    }
    (*(ptr_StorageOpenResult())) = aRhs;
    mType = TStorageOpenResult;
    return (*(this));
}

auto CacheOpResult::operator=(StorageOpenResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageOpenResult)) {
        new (mozilla::KnownNotNull, ptr_StorageOpenResult()) StorageOpenResult;
    }
    (*(ptr_StorageOpenResult())) = std::move(aRhs);
    mType = TStorageOpenResult;
    return (*(this));
}

auto CacheOpResult::operator=(const StorageDeleteResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageDeleteResult)) {
        new (mozilla::KnownNotNull, ptr_StorageDeleteResult()) StorageDeleteResult;
    }
    (*(ptr_StorageDeleteResult())) = aRhs;
    mType = TStorageDeleteResult;
    return (*(this));
}

auto CacheOpResult::operator=(StorageDeleteResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageDeleteResult)) {
        new (mozilla::KnownNotNull, ptr_StorageDeleteResult()) StorageDeleteResult;
    }
    (*(ptr_StorageDeleteResult())) = std::move(aRhs);
    mType = TStorageDeleteResult;
    return (*(this));
}

auto CacheOpResult::operator=(const StorageKeysResult& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageKeysResult)) {
        new (mozilla::KnownNotNull, ptr_StorageKeysResult()) StorageKeysResult;
    }
    (*(ptr_StorageKeysResult())) = aRhs;
    mType = TStorageKeysResult;
    return (*(this));
}

auto CacheOpResult::operator=(StorageKeysResult&& aRhs) -> CacheOpResult&
{
    if (MaybeDestroy(TStorageKeysResult)) {
        new (mozilla::KnownNotNull, ptr_StorageKeysResult()) StorageKeysResult;
    }
    (*(ptr_StorageKeysResult())) = std::move(aRhs);
    mType = TStorageKeysResult;
    return (*(this));
}

auto CacheOpResult::operator=(const CacheOpResult& aRhs) -> CacheOpResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = (aRhs).get_void_t();
            break;
        }
    case TCacheMatchResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheMatchResult()) CacheMatchResult;
            }
            (*(ptr_CacheMatchResult())) = (aRhs).get_CacheMatchResult();
            break;
        }
    case TCacheMatchAllResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheMatchAllResult()) CacheMatchAllResult;
            }
            (*(ptr_CacheMatchAllResult())) = (aRhs).get_CacheMatchAllResult();
            break;
        }
    case TCachePutAllResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CachePutAllResult()) CachePutAllResult;
            }
            (*(ptr_CachePutAllResult())) = (aRhs).get_CachePutAllResult();
            break;
        }
    case TCacheDeleteResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheDeleteResult()) CacheDeleteResult;
            }
            (*(ptr_CacheDeleteResult())) = (aRhs).get_CacheDeleteResult();
            break;
        }
    case TCacheKeysResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheKeysResult()) CacheKeysResult;
            }
            (*(ptr_CacheKeysResult())) = (aRhs).get_CacheKeysResult();
            break;
        }
    case TStorageMatchResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageMatchResult()) StorageMatchResult;
            }
            (*(ptr_StorageMatchResult())) = (aRhs).get_StorageMatchResult();
            break;
        }
    case TStorageHasResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageHasResult()) StorageHasResult;
            }
            (*(ptr_StorageHasResult())) = (aRhs).get_StorageHasResult();
            break;
        }
    case TStorageOpenResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageOpenResult()) StorageOpenResult;
            }
            (*(ptr_StorageOpenResult())) = (aRhs).get_StorageOpenResult();
            break;
        }
    case TStorageDeleteResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageDeleteResult()) StorageDeleteResult;
            }
            (*(ptr_StorageDeleteResult())) = (aRhs).get_StorageDeleteResult();
            break;
        }
    case TStorageKeysResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageKeysResult()) StorageKeysResult;
            }
            (*(ptr_StorageKeysResult())) = (aRhs).get_StorageKeysResult();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto CacheOpResult::operator=(CacheOpResult&& aRhs) -> CacheOpResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = std::move((aRhs).get_void_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCacheMatchResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheMatchResult()) CacheMatchResult;
            }
            (*(ptr_CacheMatchResult())) = std::move((aRhs).get_CacheMatchResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCacheMatchAllResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheMatchAllResult()) CacheMatchAllResult;
            }
            (*(ptr_CacheMatchAllResult())) = std::move((aRhs).get_CacheMatchAllResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCachePutAllResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CachePutAllResult()) CachePutAllResult;
            }
            (*(ptr_CachePutAllResult())) = std::move((aRhs).get_CachePutAllResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCacheDeleteResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheDeleteResult()) CacheDeleteResult;
            }
            (*(ptr_CacheDeleteResult())) = std::move((aRhs).get_CacheDeleteResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCacheKeysResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CacheKeysResult()) CacheKeysResult;
            }
            (*(ptr_CacheKeysResult())) = std::move((aRhs).get_CacheKeysResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageMatchResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageMatchResult()) StorageMatchResult;
            }
            (*(ptr_StorageMatchResult())) = std::move((aRhs).get_StorageMatchResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageHasResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageHasResult()) StorageHasResult;
            }
            (*(ptr_StorageHasResult())) = std::move((aRhs).get_StorageHasResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageOpenResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageOpenResult()) StorageOpenResult;
            }
            (*(ptr_StorageOpenResult())) = std::move((aRhs).get_StorageOpenResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageDeleteResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageDeleteResult()) StorageDeleteResult;
            }
            (*(ptr_StorageDeleteResult())) = std::move((aRhs).get_StorageDeleteResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageKeysResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageKeysResult()) StorageKeysResult;
            }
            (*(ptr_StorageKeysResult())) = std::move((aRhs).get_StorageKeysResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::cache::CacheOpResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::cache::CacheOpResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'CacheOpResult'
    (aMsg)->WriteSentinel(566363411);

    switch (type) {
    case union__::Tvoid_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_void_t());
            // Sentinel = 'Tvoid_t'
            (aMsg)->WriteSentinel(189006554);
            return;
        }
    case union__::TCacheMatchResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CacheMatchResult());
            // Sentinel = 'TCacheMatchResult'
            (aMsg)->WriteSentinel(946538133);
            return;
        }
    case union__::TCacheMatchAllResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CacheMatchAllResult());
            // Sentinel = 'TCacheMatchAllResult'
            (aMsg)->WriteSentinel(1296697262);
            return;
        }
    case union__::TCachePutAllResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CachePutAllResult());
            // Sentinel = 'TCachePutAllResult'
            (aMsg)->WriteSentinel(1063454458);
            return;
        }
    case union__::TCacheDeleteResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CacheDeleteResult());
            // Sentinel = 'TCacheDeleteResult'
            (aMsg)->WriteSentinel(1059456763);
            return;
        }
    case union__::TCacheKeysResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CacheKeysResult());
            // Sentinel = 'TCacheKeysResult'
            (aMsg)->WriteSentinel(848102980);
            return;
        }
    case union__::TStorageMatchResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageMatchResult());
            // Sentinel = 'TStorageMatchResult'
            (aMsg)->WriteSentinel(1244989334);
            return;
        }
    case union__::TStorageHasResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageHasResult());
            // Sentinel = 'TStorageHasResult'
            (aMsg)->WriteSentinel(997787333);
            return;
        }
    case union__::TStorageOpenResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageOpenResult());
            // Sentinel = 'TStorageOpenResult'
            (aMsg)->WriteSentinel(1126041403);
            return;
        }
    case union__::TStorageDeleteResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageDeleteResult());
            // Sentinel = 'TStorageDeleteResult'
            (aMsg)->WriteSentinel(1374750716);
            return;
        }
    case union__::TStorageKeysResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageKeysResult());
            // Sentinel = 'TStorageKeysResult'
            (aMsg)->WriteSentinel(1129711429);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::cache::CacheOpResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::cache::CacheOpResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union CacheOpResult");
        return false;
    }
    // Sentinel = 'CacheOpResult'
    if ((!((aMsg)->ReadSentinel(aIter, 566363411)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union CacheOpResult");
        return false;
    }

    switch (type) {
    case union__::Tvoid_t:
        {
            mozilla::void_t tmp = mozilla::void_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_void_t())))))) {
                aActor->FatalError("Error deserializing variant Tvoid_t of union CacheOpResult");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((aMsg)->ReadSentinel(aIter, 189006554)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tvoid_t of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TCacheMatchResult:
        {
            mozilla::dom::cache::CacheMatchResult tmp = mozilla::dom::cache::CacheMatchResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CacheMatchResult())))))) {
                aActor->FatalError("Error deserializing variant TCacheMatchResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TCacheMatchResult'
            if ((!((aMsg)->ReadSentinel(aIter, 946538133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCacheMatchResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TCacheMatchAllResult:
        {
            mozilla::dom::cache::CacheMatchAllResult tmp = mozilla::dom::cache::CacheMatchAllResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CacheMatchAllResult())))))) {
                aActor->FatalError("Error deserializing variant TCacheMatchAllResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TCacheMatchAllResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1296697262)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCacheMatchAllResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TCachePutAllResult:
        {
            mozilla::dom::cache::CachePutAllResult tmp = mozilla::dom::cache::CachePutAllResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CachePutAllResult())))))) {
                aActor->FatalError("Error deserializing variant TCachePutAllResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TCachePutAllResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1063454458)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCachePutAllResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TCacheDeleteResult:
        {
            mozilla::dom::cache::CacheDeleteResult tmp = mozilla::dom::cache::CacheDeleteResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CacheDeleteResult())))))) {
                aActor->FatalError("Error deserializing variant TCacheDeleteResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TCacheDeleteResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1059456763)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCacheDeleteResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TCacheKeysResult:
        {
            mozilla::dom::cache::CacheKeysResult tmp = mozilla::dom::cache::CacheKeysResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CacheKeysResult())))))) {
                aActor->FatalError("Error deserializing variant TCacheKeysResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TCacheKeysResult'
            if ((!((aMsg)->ReadSentinel(aIter, 848102980)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCacheKeysResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TStorageMatchResult:
        {
            mozilla::dom::cache::StorageMatchResult tmp = mozilla::dom::cache::StorageMatchResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageMatchResult())))))) {
                aActor->FatalError("Error deserializing variant TStorageMatchResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TStorageMatchResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1244989334)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageMatchResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TStorageHasResult:
        {
            mozilla::dom::cache::StorageHasResult tmp = mozilla::dom::cache::StorageHasResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageHasResult())))))) {
                aActor->FatalError("Error deserializing variant TStorageHasResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TStorageHasResult'
            if ((!((aMsg)->ReadSentinel(aIter, 997787333)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageHasResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TStorageOpenResult:
        {
            mozilla::dom::cache::StorageOpenResult tmp = mozilla::dom::cache::StorageOpenResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageOpenResult())))))) {
                aActor->FatalError("Error deserializing variant TStorageOpenResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TStorageOpenResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1126041403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageOpenResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TStorageDeleteResult:
        {
            mozilla::dom::cache::StorageDeleteResult tmp = mozilla::dom::cache::StorageDeleteResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageDeleteResult())))))) {
                aActor->FatalError("Error deserializing variant TStorageDeleteResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TStorageDeleteResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1374750716)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageDeleteResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    case union__::TStorageKeysResult:
        {
            mozilla::dom::cache::StorageKeysResult tmp = mozilla::dom::cache::StorageKeysResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageKeysResult())))))) {
                aActor->FatalError("Error deserializing variant TStorageKeysResult of union CacheOpResult");
                return false;
            }
            // Sentinel = 'TStorageKeysResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1129711429)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageKeysResult of union CacheOpResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
