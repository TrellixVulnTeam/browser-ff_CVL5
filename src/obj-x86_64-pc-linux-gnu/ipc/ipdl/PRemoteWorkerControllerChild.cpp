//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PRemoteWorkerControllerChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/RemoteWorkerControllerChild.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PFetchEventOpChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PRemoteWorkerControllerChild::PRemoteWorkerControllerChild() :
    mozilla::ipc::IProtocol(PRemoteWorkerControllerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PRemoteWorkerControllerChild);
}

PRemoteWorkerControllerChild::~PRemoteWorkerControllerChild()
{
    MOZ_COUNT_DTOR(PRemoteWorkerControllerChild);
}

auto PRemoteWorkerControllerChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PRemoteWorkerControllerChild::ManagedPFetchEventOpChild(nsTArray<PFetchEventOpChild*>& aArr) const -> void
{
    mManagedPFetchEventOpChild.ToArray(aArr);
}

auto PRemoteWorkerControllerChild::ManagedPFetchEventOpChild() const -> const ManagedContainer<PFetchEventOpChild>&
{
    return mManagedPFetchEventOpChild;
}

auto PRemoteWorkerControllerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPFetchEventOpChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPFetchEventOpChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PRemoteWorkerControllerChild::OpenPFetchEventOpEndpoint(PFetchEventOpChild* aActor) -> ManagedEndpoint<PFetchEventOpParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PFetchEventOpChild actor");
        return ManagedEndpoint<PFetchEventOpParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPFetchEventOpChild.PutEntry(aActor);

    return ManagedEndpoint<PFetchEventOpParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PRemoteWorkerControllerChild::BindPFetchEventOpEndpoint(
        ManagedEndpoint<PFetchEventOpChild> aEndpoint,
        PFetchEventOpChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PFetchEventOpChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPFetchEventOpChild.PutEntry(aActor);

    return true;
}

auto PRemoteWorkerControllerChild::SendPFetchEventOpConstructor(const ServiceWorkerFetchEventOpArgs& aArgs) -> PFetchEventOpChild*
{
    PFetchEventOpChild* actor = (static_cast<RemoteWorkerControllerChild*>(this))->AllocPFetchEventOpChild(aArgs);
    return SendPFetchEventOpConstructor(actor, aArgs);
}

auto PRemoteWorkerControllerChild::SendPFetchEventOpConstructor(
        PFetchEventOpChild* actor,
        const ServiceWorkerFetchEventOpArgs& aArgs) -> PFetchEventOpChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PFetchEventOpChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPFetchEventOpChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PRemoteWorkerController::Msg_PFetchEventOpConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteWorkerControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_PFetchEventOpConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PFetchEventOpChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PFetchEventOpMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PRemoteWorkerControllerChild::Send__delete__(PRemoteWorkerControllerChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PRemoteWorkerController::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteWorkerControllerChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PRemoteWorkerControllerMsgStart, actor);
    return sendok__;
}

auto PRemoteWorkerControllerChild::SendShutdown(
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteWorkerController::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteWorkerControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_Shutdown", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteWorkerControllerChild::SendShutdown() -> RefPtr<ShutdownPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendShutdown([promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteWorkerControllerChild::SendExecServiceWorkerOp(
        const ServiceWorkerOpArgs& aArgs,
        mozilla::ipc::ResolveCallback<ServiceWorkerOpResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteWorkerController::Msg_ExecServiceWorkerOp(Id());

    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteWorkerControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_ExecServiceWorkerOp", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteWorkerControllerChild::SendExecServiceWorkerOp(const ServiceWorkerOpArgs& aArgs) -> RefPtr<ExecServiceWorkerOpPromise>
{
    RefPtr<MozPromise<ServiceWorkerOpResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<ServiceWorkerOpResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendExecServiceWorkerOp(std::move(aArgs), [promise__](ServiceWorkerOpResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteWorkerControllerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PFetchEventOpMsgStart:
{
            PFetchEventOpChild* actor = static_cast<PFetchEventOpChild*>(aListener);
            auto& container = mManagedPFetchEventOpChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PRemoteWorkerControllerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PFetchEventOpMsgStart:
        static_cast<RemoteWorkerControllerChild*>(this)->DeallocPFetchEventOpChild(static_cast<PFetchEventOpChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PRemoteWorkerControllerChild::OnMessageReceived(const Message& msg__) -> PRemoteWorkerControllerChild::Result
{
    switch (msg__.type()) {
    case PRemoteWorkerController::Msg_CreationFailed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteWorkerControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_CreationFailed", OTHER);

            if ((!((static_cast<RemoteWorkerControllerChild*>(this))->RecvCreationFailed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteWorkerController::Msg_CreationSucceeded__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteWorkerControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_CreationSucceeded", OTHER);

            if ((!((static_cast<RemoteWorkerControllerChild*>(this))->RecvCreationSucceeded()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteWorkerController::Msg_ErrorReceived__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteWorkerControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_ErrorReceived", OTHER);

            PickleIterator iter__{msg__};
            ErrorValue aError{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aError)))))) {
                FatalError("Error deserializing 'ErrorValue'");
                return MsgValueError;
            }
            // Sentinel = 'aError'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135463532)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ErrorValue'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteWorkerControllerChild*>(this))->RecvErrorReceived(std::move(aError))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteWorkerController::Msg_Terminated__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteWorkerControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_Terminated", OTHER);

            if ((!((static_cast<RemoteWorkerControllerChild*>(this))->RecvTerminated()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteWorkerController::Msg_SetServiceWorkerSkipWaitingFlag__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteWorkerControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_SetServiceWorkerSkipWaitingFlag", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            SetServiceWorkerSkipWaitingFlagResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteWorkerControllerChild* self__ = static_cast<PRemoteWorkerControllerChild*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteWorkerController::Reply_SetServiceWorkerSkipWaitingFlag(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aOk'
                (reply__)->WriteSentinel(36634908);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteWorkerControllerChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteWorkerControllerChild*>(this))->RecvSetServiceWorkerSkipWaitingFlag(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteWorkerController::Reply_PFetchEventOpConstructor__ID:
        {
            return MsgProcessed;
        }
    case PRemoteWorkerController::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PRemoteWorkerController::Reply_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteWorkerControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_Shutdown", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool aOk{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOk)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'aOk'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 36634908)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aOk));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRemoteWorkerController::Reply_ExecServiceWorkerOp__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteWorkerControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteWorkerControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteWorkerController::Msg_ExecServiceWorkerOp", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<ServiceWorkerOpResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                ServiceWorkerOpResult aResult{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResult)))))) {
                    FatalError("Error deserializing 'ServiceWorkerOpResult'");
                    return MsgValueError;
                }
                // Sentinel = 'aResult'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205473)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'ServiceWorkerOpResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aResult));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemoteWorkerControllerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteWorkerControllerChild::Result
{
    return MsgNotKnown;
}

auto PRemoteWorkerControllerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteWorkerControllerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemoteWorkerControllerChild::ClearSubtree() -> void
{
    for (auto it = mManagedPFetchEventOpChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPFetchEventOpChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPFetchEventOpChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPFetchEventOpChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PRemoteWorkerControllerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PRemoteWorkerControllerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemoteWorkerController", PRemoteWorkerControllerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PRemoteWorkerControllerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
