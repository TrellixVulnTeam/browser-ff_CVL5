//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PWebBrowserPersistDocumentParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/WebBrowserPersistDocumentParent.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "nsIReferrerInfo.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/PWebBrowserPersistResourcesParent.h"
#include "mozilla/PWebBrowserPersistSerializeParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


MOZ_IMPLICIT PWebBrowserPersistDocumentParent::PWebBrowserPersistDocumentParent() :
    mozilla::ipc::IProtocol(PWebBrowserPersistDocumentMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWebBrowserPersistDocumentParent);
}

PWebBrowserPersistDocumentParent::~PWebBrowserPersistDocumentParent()
{
    MOZ_COUNT_DTOR(PWebBrowserPersistDocumentParent);
}

auto PWebBrowserPersistDocumentParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PWebBrowserPersistDocumentParent::ManagedPWebBrowserPersistResourcesParent(nsTArray<PWebBrowserPersistResourcesParent*>& aArr) const -> void
{
    mManagedPWebBrowserPersistResourcesParent.ToArray(aArr);
}

auto PWebBrowserPersistDocumentParent::ManagedPWebBrowserPersistResourcesParent() const -> const ManagedContainer<PWebBrowserPersistResourcesParent>&
{
    return mManagedPWebBrowserPersistResourcesParent;
}

auto PWebBrowserPersistDocumentParent::ManagedPWebBrowserPersistSerializeParent(nsTArray<PWebBrowserPersistSerializeParent*>& aArr) const -> void
{
    mManagedPWebBrowserPersistSerializeParent.ToArray(aArr);
}

auto PWebBrowserPersistDocumentParent::ManagedPWebBrowserPersistSerializeParent() const -> const ManagedContainer<PWebBrowserPersistSerializeParent>&
{
    return mManagedPWebBrowserPersistSerializeParent;
}

auto PWebBrowserPersistDocumentParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPWebBrowserPersistResourcesParent.Count();
    total += mManagedPWebBrowserPersistSerializeParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPWebBrowserPersistResourcesParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPWebBrowserPersistSerializeParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PWebBrowserPersistDocumentParent::OpenPWebBrowserPersistResourcesEndpoint(PWebBrowserPersistResourcesParent* aActor) -> ManagedEndpoint<PWebBrowserPersistResourcesChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistResourcesParent actor");
        return ManagedEndpoint<PWebBrowserPersistResourcesChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistResourcesParent.PutEntry(aActor);

    return ManagedEndpoint<PWebBrowserPersistResourcesChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PWebBrowserPersistDocumentParent::BindPWebBrowserPersistResourcesEndpoint(
        ManagedEndpoint<PWebBrowserPersistResourcesParent> aEndpoint,
        PWebBrowserPersistResourcesParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistResourcesParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWebBrowserPersistResourcesParent.PutEntry(aActor);

    return true;
}

auto PWebBrowserPersistDocumentParent::OpenPWebBrowserPersistSerializeEndpoint(PWebBrowserPersistSerializeParent* aActor) -> ManagedEndpoint<PWebBrowserPersistSerializeChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistSerializeParent actor");
        return ManagedEndpoint<PWebBrowserPersistSerializeChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistSerializeParent.PutEntry(aActor);

    return ManagedEndpoint<PWebBrowserPersistSerializeChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PWebBrowserPersistDocumentParent::BindPWebBrowserPersistSerializeEndpoint(
        ManagedEndpoint<PWebBrowserPersistSerializeParent> aEndpoint,
        PWebBrowserPersistSerializeParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistSerializeParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWebBrowserPersistSerializeParent.PutEntry(aActor);

    return true;
}

auto PWebBrowserPersistDocumentParent::SendSetPersistFlags(const uint32_t& aNewFlags) -> bool
{
    IPC::Message* msg__ = PWebBrowserPersistDocument::Msg_SetPersistFlags(Id());

    WriteIPDLParam(msg__, this, aNewFlags);
    // Sentinel = 'aNewFlags'
    (msg__)->WriteSentinel(283181945);




    if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebBrowserPersistDocumentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_SetPersistFlags", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebBrowserPersistDocumentParent::SendPWebBrowserPersistResourcesConstructor() -> PWebBrowserPersistResourcesParent*
{
    PWebBrowserPersistResourcesParent* actor = (static_cast<WebBrowserPersistDocumentParent*>(this))->AllocPWebBrowserPersistResourcesParent();
    return SendPWebBrowserPersistResourcesConstructor(actor);
}

auto PWebBrowserPersistDocumentParent::SendPWebBrowserPersistResourcesConstructor(PWebBrowserPersistResourcesParent* actor) -> PWebBrowserPersistResourcesParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistResourcesParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistResourcesParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PWebBrowserPersistDocument::Msg_PWebBrowserPersistResourcesConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebBrowserPersistDocumentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_PWebBrowserPersistResourcesConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PWebBrowserPersistResourcesParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PWebBrowserPersistResourcesMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PWebBrowserPersistDocumentParent::SendPWebBrowserPersistSerializeConstructor(
        const WebBrowserPersistURIMap& aMap,
        const nsCString& aRequestedContentType,
        const uint32_t& aEncoderFlags,
        const uint32_t& aWrapColumn) -> PWebBrowserPersistSerializeParent*
{
    PWebBrowserPersistSerializeParent* actor = (static_cast<WebBrowserPersistDocumentParent*>(this))->AllocPWebBrowserPersistSerializeParent(aMap, aRequestedContentType, aEncoderFlags, aWrapColumn);
    return SendPWebBrowserPersistSerializeConstructor(actor, aMap, aRequestedContentType, aEncoderFlags, aWrapColumn);
}

auto PWebBrowserPersistDocumentParent::SendPWebBrowserPersistSerializeConstructor(
        PWebBrowserPersistSerializeParent* actor,
        const WebBrowserPersistURIMap& aMap,
        const nsCString& aRequestedContentType,
        const uint32_t& aEncoderFlags,
        const uint32_t& aWrapColumn) -> PWebBrowserPersistSerializeParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistSerializeParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistSerializeParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PWebBrowserPersistDocument::Msg_PWebBrowserPersistSerializeConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aMap);
    // Sentinel = 'aMap'
    (msg__)->WriteSentinel(60883328);
    WriteIPDLParam(msg__, this, aRequestedContentType);
    // Sentinel = 'aRequestedContentType'
    (msg__)->WriteSentinel(1563297937);
    WriteIPDLParam(msg__, this, aEncoderFlags);
    // Sentinel = 'aEncoderFlags'
    (msg__)->WriteSentinel(582354191);
    WriteIPDLParam(msg__, this, aWrapColumn);
    // Sentinel = 'aWrapColumn'
    (msg__)->WriteSentinel(432669802);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebBrowserPersistDocumentParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_PWebBrowserPersistSerializeConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PWebBrowserPersistSerializeParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PWebBrowserPersistSerializeMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PWebBrowserPersistDocumentParent::Send__delete__(PWebBrowserPersistDocumentParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PWebBrowserPersistDocument::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebBrowserPersistDocumentParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PWebBrowserPersistDocumentMsgStart, actor);
    return sendok__;
}

auto PWebBrowserPersistDocumentParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PWebBrowserPersistResourcesMsgStart:
{
            PWebBrowserPersistResourcesParent* actor = static_cast<PWebBrowserPersistResourcesParent*>(aListener);
            auto& container = mManagedPWebBrowserPersistResourcesParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PWebBrowserPersistSerializeMsgStart:
{
            PWebBrowserPersistSerializeParent* actor = static_cast<PWebBrowserPersistSerializeParent*>(aListener);
            auto& container = mManagedPWebBrowserPersistSerializeParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PWebBrowserPersistDocumentParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PWebBrowserPersistResourcesMsgStart:
        static_cast<WebBrowserPersistDocumentParent*>(this)->DeallocPWebBrowserPersistResourcesParent(static_cast<PWebBrowserPersistResourcesParent*>(aListener));
        return;
    case PWebBrowserPersistSerializeMsgStart:
        static_cast<WebBrowserPersistDocumentParent*>(this)->DeallocPWebBrowserPersistSerializeParent(static_cast<PWebBrowserPersistSerializeParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PWebBrowserPersistDocumentParent::OnMessageReceived(const Message& msg__) -> PWebBrowserPersistDocumentParent::Result
{
    switch (msg__.type()) {
    case PWebBrowserPersistDocument::Msg_Attributes__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistDocumentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_Attributes", OTHER);

            PickleIterator iter__{msg__};
            WebBrowserPersistDocumentAttrs aAttrs{};
            mozilla::Maybe<IPCStream> stream{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAttrs)))))) {
                FatalError("Error deserializing 'WebBrowserPersistDocumentAttrs'");
                return MsgValueError;
            }
            // Sentinel = 'aAttrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135529072)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebBrowserPersistDocumentAttrs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stream)))))) {
                FatalError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            // Sentinel = 'stream'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223821)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebBrowserPersistDocumentParent*>(this))->RecvAttributes(std::move(aAttrs), std::move(stream))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebBrowserPersistDocument::Msg_InitFailure__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistDocumentParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_InitFailure", OTHER);

            PickleIterator iter__{msg__};
            nsresult aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebBrowserPersistDocumentParent*>(this))->RecvInitFailure(std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebBrowserPersistDocument::Reply_PWebBrowserPersistResourcesConstructor__ID:
        {
            return MsgProcessed;
        }
    case PWebBrowserPersistDocument::Reply_PWebBrowserPersistSerializeConstructor__ID:
        {
            return MsgProcessed;
        }
    case PWebBrowserPersistDocument::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebBrowserPersistDocumentParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebBrowserPersistDocumentParent::Result
{
    return MsgNotKnown;
}

auto PWebBrowserPersistDocumentParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebBrowserPersistDocumentParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebBrowserPersistDocumentParent::ClearSubtree() -> void
{
    for (auto it = mManagedPWebBrowserPersistResourcesParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWebBrowserPersistResourcesParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWebBrowserPersistResourcesParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWebBrowserPersistResourcesParent.Clear();

    for (auto it = mManagedPWebBrowserPersistSerializeParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWebBrowserPersistSerializeParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWebBrowserPersistSerializeParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWebBrowserPersistSerializeParent.Clear();

}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PWebBrowserPersistDocumentParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PWebBrowserPersistDocumentParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebBrowserPersistDocument", PWebBrowserPersistDocumentMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PWebBrowserPersistDocumentParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
