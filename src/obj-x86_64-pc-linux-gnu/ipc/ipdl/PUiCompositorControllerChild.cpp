//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PUiCompositorControllerChild.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/layers/UiCompositorControllerChild.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PUiCompositorControllerChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PUiCompositorControllerChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PUiCompositorControllerChild::EnteredCxxStack() -> void
{
}

auto PUiCompositorControllerChild::ExitedCxxStack() -> void
{
}

auto PUiCompositorControllerChild::EnteredCall() -> void
{
}

auto PUiCompositorControllerChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PUiCompositorControllerChild::PUiCompositorControllerChild() :
    mozilla::ipc::IToplevelProtocol("PUiCompositorControllerChild", PUiCompositorControllerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PUiCompositorControllerChild);
}

PUiCompositorControllerChild::~PUiCompositorControllerChild()
{
    MOZ_COUNT_DTOR(PUiCompositorControllerChild);
}

auto PUiCompositorControllerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PUiCompositorControllerChild::SendPause() -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_Pause(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_Pause", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PUiCompositorController::Msg_Pause", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PUiCompositorControllerChild::SendResume() -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_Resume(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_Resume", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PUiCompositorController::Msg_Resume", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PUiCompositorControllerChild::SendResumeAndResize(
        const int32_t& aX,
        const int32_t& aY,
        const int32_t& aWidth,
        const int32_t& aHeight) -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_ResumeAndResize(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);
    WriteIPDLParam(msg__, this, aWidth);
    // Sentinel = 'aWidth'
    (msg__)->WriteSentinel(136249954);
    WriteIPDLParam(msg__, this, aHeight);
    // Sentinel = 'aHeight'
    (msg__)->WriteSentinel(175375035);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_ResumeAndResize", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PUiCompositorController::Msg_ResumeAndResize", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PUiCompositorControllerChild::SendInvalidateAndRender() -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_InvalidateAndRender(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_InvalidateAndRender", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerChild::SendMaxToolbarHeight(const int32_t& aHeight) -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_MaxToolbarHeight(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aHeight);
    // Sentinel = 'aHeight'
    (msg__)->WriteSentinel(175375035);




    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_MaxToolbarHeight", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerChild::SendFixedBottomOffset(const int32_t& aOffset) -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_FixedBottomOffset(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);




    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_FixedBottomOffset", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerChild::SendDefaultClearColor(const uint32_t& aColor) -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_DefaultClearColor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aColor);
    // Sentinel = 'aColor'
    (msg__)->WriteSentinel(132842081);




    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_DefaultClearColor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerChild::SendRequestScreenPixels() -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_RequestScreenPixels(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_RequestScreenPixels", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerChild::SendEnableLayerUpdateNotifications(const bool& aEnable) -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_EnableLayerUpdateNotifications(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aEnable);
    // Sentinel = 'aEnable'
    (msg__)->WriteSentinel(173605545);




    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_EnableLayerUpdateNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PUiCompositorControllerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PUiCompositorControllerChild::OnMessageReceived(const Message& msg__) -> PUiCompositorControllerChild::Result
{
    switch (msg__.type()) {
    case PUiCompositorController::Msg_ToolbarAnimatorMessageFromCompositor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_ToolbarAnimatorMessageFromCompositor", OTHER);

            PickleIterator iter__{msg__};
            int32_t aMessage{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<UiCompositorControllerChild*>(this))->RecvToolbarAnimatorMessageFromCompositor(std::move(aMessage))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUiCompositorController::Msg_RootFrameMetrics__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_RootFrameMetrics", OTHER);

            PickleIterator iter__{msg__};
            ScreenPoint aScrollOffset{};
            CSSToScreenScale aZoom{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollOffset)))))) {
                FatalError("Error deserializing 'ScreenPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 601163064)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aZoom)))))) {
                FatalError("Error deserializing 'CSSToScreenScale'");
                return MsgValueError;
            }
            // Sentinel = 'aZoom'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222023)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CSSToScreenScale'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<UiCompositorControllerChild*>(this))->RecvRootFrameMetrics(std::move(aScrollOffset), std::move(aZoom))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUiCompositorController::Msg_ScreenPixels__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_ScreenPixels", OTHER);

            PickleIterator iter__{msg__};
            Shmem aMem{};
            ScreenIntSize aSize{};
            bool aNeedsYFlip{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMem)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'aMem'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61211009)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSize)))))) {
                FatalError("Error deserializing 'ScreenIntSize'");
                return MsgValueError;
            }
            // Sentinel = 'aSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97124861)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenIntSize'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNeedsYFlip)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aNeedsYFlip'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 415237173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<UiCompositorControllerChild*>(this))->RecvScreenPixels(std::move(aMem), std::move(aSize), std::move(aNeedsYFlip))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PUiCompositorControllerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PUiCompositorControllerChild::Result
{
    return MsgNotKnown;
}

auto PUiCompositorControllerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PUiCompositorControllerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PUiCompositorControllerChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PUiCompositorControllerChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PUiCompositorControllerChild::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PUiCompositorControllerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PUiCompositorControllerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PUiCompositorController", PUiCompositorControllerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PUiCompositorControllerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
