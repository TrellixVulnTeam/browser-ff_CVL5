//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/PPresentationRequestParent.h"
#include "mozilla/dom/PPresentationRequestChild.h"
#include "mozilla/dom/PPresentationBuilderParent.h"
#include "mozilla/dom/PPresentationBuilderChild.h"
#include "mozilla/dom/PPresentation.h"
#include "mozilla/dom/PPresentationParent.h"
#include "mozilla/dom/PPresentationChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PPresentation {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PPresentationParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PPresentationChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_NotifyAvailableChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyAvailableChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifySessionStateChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifySessionStateChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifySessionConnect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifySessionConnect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyCloseSessionTransport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyCloseSessionTransport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PPresentationBuilderConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPresentationBuilderConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPresentationBuilderConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPresentationBuilderConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RegisterAvailabilityHandler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RegisterAvailabilityHandler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UnregisterAvailabilityHandler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnregisterAvailabilityHandler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RegisterSessionHandler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RegisterSessionHandler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UnregisterSessionHandler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnregisterSessionHandler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RegisterRespondingHandler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RegisterRespondingHandler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UnregisterRespondingHandler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UnregisterRespondingHandler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PPresentationRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPresentationRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPresentationRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPresentationRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NotifyReceiverReady(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyReceiverReady__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyTransportClosed(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyTransportClosed__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PPresentation
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StartSessionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::StartSessionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).urls());
    // Sentinel = 'urls'
    (aMsg)->WriteSentinel(75039175);
    WriteIPDLParam(aMsg, aActor, (aVar).sessionId());
    // Sentinel = 'sessionId'
    (aMsg)->WriteSentinel(320603058);
    WriteIPDLParam(aMsg, aActor, (aVar).origin());
    // Sentinel = 'origin'
    (aMsg)->WriteSentinel(150143625);
    WriteIPDLParam(aMsg, aActor, (aVar).deviceId());
    // Sentinel = 'deviceId'
    (aMsg)->WriteSentinel(242025246);
    WriteIPDLParam(aMsg, aActor, (aVar).tabId());
    // Sentinel = 'tabId'
    (aMsg)->WriteSentinel(99156453);
    WriteIPDLParam(aMsg, aActor, (aVar).principal());
    // Sentinel = 'principal'
    (aMsg)->WriteSentinel(319620035);
    (aMsg)->WriteBytes((&((aVar).windowId())), 8);
    // Sentinel = 'windowId'
    (aMsg)->WriteSentinel(255722310);
}

auto IPDLParamTraits<mozilla::dom::StartSessionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->urls())))))) {
        aActor->FatalError("Error deserializing 'urls' (nsString[]) member of 'StartSessionRequest'");
        return false;
    }
    // Sentinel = 'urls'
    if ((!((aMsg)->ReadSentinel(aIter, 75039175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'urls' (nsString[]) member of 'StartSessionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sessionId())))))) {
        aActor->FatalError("Error deserializing 'sessionId' (nsString) member of 'StartSessionRequest'");
        return false;
    }
    // Sentinel = 'sessionId'
    if ((!((aMsg)->ReadSentinel(aIter, 320603058)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sessionId' (nsString) member of 'StartSessionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->origin())))))) {
        aActor->FatalError("Error deserializing 'origin' (nsString) member of 'StartSessionRequest'");
        return false;
    }
    // Sentinel = 'origin'
    if ((!((aMsg)->ReadSentinel(aIter, 150143625)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'origin' (nsString) member of 'StartSessionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->deviceId())))))) {
        aActor->FatalError("Error deserializing 'deviceId' (nsString) member of 'StartSessionRequest'");
        return false;
    }
    // Sentinel = 'deviceId'
    if ((!((aMsg)->ReadSentinel(aIter, 242025246)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'deviceId' (nsString) member of 'StartSessionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tabId())))))) {
        aActor->FatalError("Error deserializing 'tabId' (TabId) member of 'StartSessionRequest'");
        return false;
    }
    // Sentinel = 'tabId'
    if ((!((aMsg)->ReadSentinel(aIter, 99156453)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tabId' (TabId) member of 'StartSessionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principal())))))) {
        aActor->FatalError("Error deserializing 'principal' (nsIPrincipal) member of 'StartSessionRequest'");
        return false;
    }
    // Sentinel = 'principal'
    if ((!((aMsg)->ReadSentinel(aIter, 319620035)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principal' (nsIPrincipal) member of 'StartSessionRequest'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->windowId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'windowId'
    if ((!((aMsg)->ReadSentinel(aIter, 255722310)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SendSessionMessageRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SendSessionMessageRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).sessionId());
    // Sentinel = 'sessionId'
    (aMsg)->WriteSentinel(320603058);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    (aMsg)->WriteBytes((&((aVar).role())), 1);
    // Sentinel = 'role'
    (aMsg)->WriteSentinel(72745395);
}

auto IPDLParamTraits<mozilla::dom::SendSessionMessageRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sessionId())))))) {
        aActor->FatalError("Error deserializing 'sessionId' (nsString) member of 'SendSessionMessageRequest'");
        return false;
    }
    // Sentinel = 'sessionId'
    if ((!((aMsg)->ReadSentinel(aIter, 320603058)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sessionId' (nsString) member of 'SendSessionMessageRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsString) member of 'SendSessionMessageRequest'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsString) member of 'SendSessionMessageRequest'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->role())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'role'
    if ((!((aMsg)->ReadSentinel(aIter, 72745395)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CloseSessionRequest|
//
namespace mozilla {
namespace dom {
auto CloseSessionRequest::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(CloseSessionRequest, closedReason_) - offsetof(CloseSessionRequest, role_)) == 1,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::CloseSessionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).sessionId());
    // Sentinel = 'sessionId'
    (aMsg)->WriteSentinel(320603058);
    (aMsg)->WriteBytes((&((aVar).role())), 2);
    // Sentinel = 'role | closedReason'
    (aMsg)->WriteSentinel(1203111761);
}

auto IPDLParamTraits<mozilla::dom::CloseSessionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sessionId())))))) {
        aActor->FatalError("Error deserializing 'sessionId' (nsString) member of 'CloseSessionRequest'");
        return false;
    }
    // Sentinel = 'sessionId'
    if ((!((aMsg)->ReadSentinel(aIter, 320603058)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sessionId' (nsString) member of 'CloseSessionRequest'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->role())), 2)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'role | closedReason'
    if ((!((aMsg)->ReadSentinel(aIter, 1203111761)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TerminateSessionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::TerminateSessionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).sessionId());
    // Sentinel = 'sessionId'
    (aMsg)->WriteSentinel(320603058);
    (aMsg)->WriteBytes((&((aVar).role())), 1);
    // Sentinel = 'role'
    (aMsg)->WriteSentinel(72745395);
}

auto IPDLParamTraits<mozilla::dom::TerminateSessionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sessionId())))))) {
        aActor->FatalError("Error deserializing 'sessionId' (nsString) member of 'TerminateSessionRequest'");
        return false;
    }
    // Sentinel = 'sessionId'
    if ((!((aMsg)->ReadSentinel(aIter, 320603058)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sessionId' (nsString) member of 'TerminateSessionRequest'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->role())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'role'
    if ((!((aMsg)->ReadSentinel(aIter, 72745395)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ReconnectSessionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ReconnectSessionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).urls());
    // Sentinel = 'urls'
    (aMsg)->WriteSentinel(75039175);
    WriteIPDLParam(aMsg, aActor, (aVar).sessionId());
    // Sentinel = 'sessionId'
    (aMsg)->WriteSentinel(320603058);
    (aMsg)->WriteBytes((&((aVar).role())), 1);
    // Sentinel = 'role'
    (aMsg)->WriteSentinel(72745395);
}

auto IPDLParamTraits<mozilla::dom::ReconnectSessionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->urls())))))) {
        aActor->FatalError("Error deserializing 'urls' (nsString[]) member of 'ReconnectSessionRequest'");
        return false;
    }
    // Sentinel = 'urls'
    if ((!((aMsg)->ReadSentinel(aIter, 75039175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'urls' (nsString[]) member of 'ReconnectSessionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sessionId())))))) {
        aActor->FatalError("Error deserializing 'sessionId' (nsString) member of 'ReconnectSessionRequest'");
        return false;
    }
    // Sentinel = 'sessionId'
    if ((!((aMsg)->ReadSentinel(aIter, 320603058)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sessionId' (nsString) member of 'ReconnectSessionRequest'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->role())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'role'
    if ((!((aMsg)->ReadSentinel(aIter, 72745395)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct BuildTransportRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::BuildTransportRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).sessionId());
    // Sentinel = 'sessionId'
    (aMsg)->WriteSentinel(320603058);
    (aMsg)->WriteBytes((&((aVar).role())), 1);
    // Sentinel = 'role'
    (aMsg)->WriteSentinel(72745395);
}

auto IPDLParamTraits<mozilla::dom::BuildTransportRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sessionId())))))) {
        aActor->FatalError("Error deserializing 'sessionId' (nsString) member of 'BuildTransportRequest'");
        return false;
    }
    // Sentinel = 'sessionId'
    if ((!((aMsg)->ReadSentinel(aIter, 320603058)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sessionId' (nsString) member of 'BuildTransportRequest'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->role())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'role'
    if ((!((aMsg)->ReadSentinel(aIter, 72745395)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union PresentationIPCRequest|
//
namespace mozilla {
namespace dom {
auto PresentationIPCRequest::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TStartSessionRequest:
        {
            (ptr_StartSessionRequest())->~StartSessionRequest__tdef();
            break;
        }
    case TSendSessionMessageRequest:
        {
            (ptr_SendSessionMessageRequest())->~SendSessionMessageRequest__tdef();
            break;
        }
    case TCloseSessionRequest:
        {
            (ptr_CloseSessionRequest())->~CloseSessionRequest__tdef();
            break;
        }
    case TTerminateSessionRequest:
        {
            (ptr_TerminateSessionRequest())->~TerminateSessionRequest__tdef();
            break;
        }
    case TReconnectSessionRequest:
        {
            (ptr_ReconnectSessionRequest())->~ReconnectSessionRequest__tdef();
            break;
        }
    case TBuildTransportRequest:
        {
            (ptr_BuildTransportRequest())->~BuildTransportRequest__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(const StartSessionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_StartSessionRequest()) StartSessionRequest(aOther);
    mType = TStartSessionRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(StartSessionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StartSessionRequest()) StartSessionRequest(std::move(aOther));
    mType = TStartSessionRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(const SendSessionMessageRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_SendSessionMessageRequest()) SendSessionMessageRequest(aOther);
    mType = TSendSessionMessageRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(SendSessionMessageRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SendSessionMessageRequest()) SendSessionMessageRequest(std::move(aOther));
    mType = TSendSessionMessageRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(const CloseSessionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_CloseSessionRequest()) CloseSessionRequest(aOther);
    mType = TCloseSessionRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(CloseSessionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CloseSessionRequest()) CloseSessionRequest(std::move(aOther));
    mType = TCloseSessionRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(const TerminateSessionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_TerminateSessionRequest()) TerminateSessionRequest(aOther);
    mType = TTerminateSessionRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(TerminateSessionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_TerminateSessionRequest()) TerminateSessionRequest(std::move(aOther));
    mType = TTerminateSessionRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(const ReconnectSessionRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_ReconnectSessionRequest()) ReconnectSessionRequest(aOther);
    mType = TReconnectSessionRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(ReconnectSessionRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ReconnectSessionRequest()) ReconnectSessionRequest(std::move(aOther));
    mType = TReconnectSessionRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(const BuildTransportRequest& aOther)
{
    new (mozilla::KnownNotNull, ptr_BuildTransportRequest()) BuildTransportRequest(aOther);
    mType = TBuildTransportRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(BuildTransportRequest&& aOther)
{
    new (mozilla::KnownNotNull, ptr_BuildTransportRequest()) BuildTransportRequest(std::move(aOther));
    mType = TBuildTransportRequest;
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(const PresentationIPCRequest& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TStartSessionRequest:
        {
            new (mozilla::KnownNotNull, ptr_StartSessionRequest()) StartSessionRequest((aOther).get_StartSessionRequest());
            break;
        }
    case TSendSessionMessageRequest:
        {
            new (mozilla::KnownNotNull, ptr_SendSessionMessageRequest()) SendSessionMessageRequest((aOther).get_SendSessionMessageRequest());
            break;
        }
    case TCloseSessionRequest:
        {
            new (mozilla::KnownNotNull, ptr_CloseSessionRequest()) CloseSessionRequest((aOther).get_CloseSessionRequest());
            break;
        }
    case TTerminateSessionRequest:
        {
            new (mozilla::KnownNotNull, ptr_TerminateSessionRequest()) TerminateSessionRequest((aOther).get_TerminateSessionRequest());
            break;
        }
    case TReconnectSessionRequest:
        {
            new (mozilla::KnownNotNull, ptr_ReconnectSessionRequest()) ReconnectSessionRequest((aOther).get_ReconnectSessionRequest());
            break;
        }
    case TBuildTransportRequest:
        {
            new (mozilla::KnownNotNull, ptr_BuildTransportRequest()) BuildTransportRequest((aOther).get_BuildTransportRequest());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT PresentationIPCRequest::PresentationIPCRequest(PresentationIPCRequest&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TStartSessionRequest:
        {
            new (mozilla::KnownNotNull, ptr_StartSessionRequest()) StartSessionRequest(std::move((aOther).get_StartSessionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSendSessionMessageRequest:
        {
            new (mozilla::KnownNotNull, ptr_SendSessionMessageRequest()) SendSessionMessageRequest(std::move((aOther).get_SendSessionMessageRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCloseSessionRequest:
        {
            new (mozilla::KnownNotNull, ptr_CloseSessionRequest()) CloseSessionRequest(std::move((aOther).get_CloseSessionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TTerminateSessionRequest:
        {
            new (mozilla::KnownNotNull, ptr_TerminateSessionRequest()) TerminateSessionRequest(std::move((aOther).get_TerminateSessionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TReconnectSessionRequest:
        {
            new (mozilla::KnownNotNull, ptr_ReconnectSessionRequest()) ReconnectSessionRequest(std::move((aOther).get_ReconnectSessionRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TBuildTransportRequest:
        {
            new (mozilla::KnownNotNull, ptr_BuildTransportRequest()) BuildTransportRequest(std::move((aOther).get_BuildTransportRequest()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

PresentationIPCRequest::~PresentationIPCRequest()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto PresentationIPCRequest::operator=(const StartSessionRequest& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TStartSessionRequest)) {
        new (mozilla::KnownNotNull, ptr_StartSessionRequest()) StartSessionRequest;
    }
    (*(ptr_StartSessionRequest())) = aRhs;
    mType = TStartSessionRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(StartSessionRequest&& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TStartSessionRequest)) {
        new (mozilla::KnownNotNull, ptr_StartSessionRequest()) StartSessionRequest;
    }
    (*(ptr_StartSessionRequest())) = std::move(aRhs);
    mType = TStartSessionRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(const SendSessionMessageRequest& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TSendSessionMessageRequest)) {
        new (mozilla::KnownNotNull, ptr_SendSessionMessageRequest()) SendSessionMessageRequest;
    }
    (*(ptr_SendSessionMessageRequest())) = aRhs;
    mType = TSendSessionMessageRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(SendSessionMessageRequest&& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TSendSessionMessageRequest)) {
        new (mozilla::KnownNotNull, ptr_SendSessionMessageRequest()) SendSessionMessageRequest;
    }
    (*(ptr_SendSessionMessageRequest())) = std::move(aRhs);
    mType = TSendSessionMessageRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(const CloseSessionRequest& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TCloseSessionRequest)) {
        new (mozilla::KnownNotNull, ptr_CloseSessionRequest()) CloseSessionRequest;
    }
    (*(ptr_CloseSessionRequest())) = aRhs;
    mType = TCloseSessionRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(CloseSessionRequest&& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TCloseSessionRequest)) {
        new (mozilla::KnownNotNull, ptr_CloseSessionRequest()) CloseSessionRequest;
    }
    (*(ptr_CloseSessionRequest())) = std::move(aRhs);
    mType = TCloseSessionRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(const TerminateSessionRequest& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TTerminateSessionRequest)) {
        new (mozilla::KnownNotNull, ptr_TerminateSessionRequest()) TerminateSessionRequest;
    }
    (*(ptr_TerminateSessionRequest())) = aRhs;
    mType = TTerminateSessionRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(TerminateSessionRequest&& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TTerminateSessionRequest)) {
        new (mozilla::KnownNotNull, ptr_TerminateSessionRequest()) TerminateSessionRequest;
    }
    (*(ptr_TerminateSessionRequest())) = std::move(aRhs);
    mType = TTerminateSessionRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(const ReconnectSessionRequest& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TReconnectSessionRequest)) {
        new (mozilla::KnownNotNull, ptr_ReconnectSessionRequest()) ReconnectSessionRequest;
    }
    (*(ptr_ReconnectSessionRequest())) = aRhs;
    mType = TReconnectSessionRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(ReconnectSessionRequest&& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TReconnectSessionRequest)) {
        new (mozilla::KnownNotNull, ptr_ReconnectSessionRequest()) ReconnectSessionRequest;
    }
    (*(ptr_ReconnectSessionRequest())) = std::move(aRhs);
    mType = TReconnectSessionRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(const BuildTransportRequest& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TBuildTransportRequest)) {
        new (mozilla::KnownNotNull, ptr_BuildTransportRequest()) BuildTransportRequest;
    }
    (*(ptr_BuildTransportRequest())) = aRhs;
    mType = TBuildTransportRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(BuildTransportRequest&& aRhs) -> PresentationIPCRequest&
{
    if (MaybeDestroy(TBuildTransportRequest)) {
        new (mozilla::KnownNotNull, ptr_BuildTransportRequest()) BuildTransportRequest;
    }
    (*(ptr_BuildTransportRequest())) = std::move(aRhs);
    mType = TBuildTransportRequest;
    return (*(this));
}

auto PresentationIPCRequest::operator=(const PresentationIPCRequest& aRhs) -> PresentationIPCRequest&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TStartSessionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StartSessionRequest()) StartSessionRequest;
            }
            (*(ptr_StartSessionRequest())) = (aRhs).get_StartSessionRequest();
            break;
        }
    case TSendSessionMessageRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SendSessionMessageRequest()) SendSessionMessageRequest;
            }
            (*(ptr_SendSessionMessageRequest())) = (aRhs).get_SendSessionMessageRequest();
            break;
        }
    case TCloseSessionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CloseSessionRequest()) CloseSessionRequest;
            }
            (*(ptr_CloseSessionRequest())) = (aRhs).get_CloseSessionRequest();
            break;
        }
    case TTerminateSessionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_TerminateSessionRequest()) TerminateSessionRequest;
            }
            (*(ptr_TerminateSessionRequest())) = (aRhs).get_TerminateSessionRequest();
            break;
        }
    case TReconnectSessionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ReconnectSessionRequest()) ReconnectSessionRequest;
            }
            (*(ptr_ReconnectSessionRequest())) = (aRhs).get_ReconnectSessionRequest();
            break;
        }
    case TBuildTransportRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_BuildTransportRequest()) BuildTransportRequest;
            }
            (*(ptr_BuildTransportRequest())) = (aRhs).get_BuildTransportRequest();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto PresentationIPCRequest::operator=(PresentationIPCRequest&& aRhs) -> PresentationIPCRequest&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TStartSessionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StartSessionRequest()) StartSessionRequest;
            }
            (*(ptr_StartSessionRequest())) = std::move((aRhs).get_StartSessionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSendSessionMessageRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SendSessionMessageRequest()) SendSessionMessageRequest;
            }
            (*(ptr_SendSessionMessageRequest())) = std::move((aRhs).get_SendSessionMessageRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCloseSessionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CloseSessionRequest()) CloseSessionRequest;
            }
            (*(ptr_CloseSessionRequest())) = std::move((aRhs).get_CloseSessionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TTerminateSessionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_TerminateSessionRequest()) TerminateSessionRequest;
            }
            (*(ptr_TerminateSessionRequest())) = std::move((aRhs).get_TerminateSessionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TReconnectSessionRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ReconnectSessionRequest()) ReconnectSessionRequest;
            }
            (*(ptr_ReconnectSessionRequest())) = std::move((aRhs).get_ReconnectSessionRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TBuildTransportRequest:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_BuildTransportRequest()) BuildTransportRequest;
            }
            (*(ptr_BuildTransportRequest())) = std::move((aRhs).get_BuildTransportRequest());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PresentationIPCRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::PresentationIPCRequest union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'PresentationIPCRequest'
    (aMsg)->WriteSentinel(1688144066);

    switch (type) {
    case union__::TStartSessionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StartSessionRequest());
            // Sentinel = 'TStartSessionRequest'
            (aMsg)->WriteSentinel(1408305200);
            return;
        }
    case union__::TSendSessionMessageRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SendSessionMessageRequest());
            // Sentinel = 'TSendSessionMessageRequest'
            (aMsg)->WriteSentinel(2311522929);
            return;
        }
    case union__::TCloseSessionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CloseSessionRequest());
            // Sentinel = 'TCloseSessionRequest'
            (aMsg)->WriteSentinel(1380845592);
            return;
        }
    case union__::TTerminateSessionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_TerminateSessionRequest());
            // Sentinel = 'TTerminateSessionRequest'
            (aMsg)->WriteSentinel(2010253771);
            return;
        }
    case union__::TReconnectSessionRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ReconnectSessionRequest());
            // Sentinel = 'TReconnectSessionRequest'
            (aMsg)->WriteSentinel(1996818883);
            return;
        }
    case union__::TBuildTransportRequest:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_BuildTransportRequest());
            // Sentinel = 'TBuildTransportRequest'
            (aMsg)->WriteSentinel(1678706939);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::PresentationIPCRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::PresentationIPCRequest union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union PresentationIPCRequest");
        return false;
    }
    // Sentinel = 'PresentationIPCRequest'
    if ((!((aMsg)->ReadSentinel(aIter, 1688144066)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union PresentationIPCRequest");
        return false;
    }

    switch (type) {
    case union__::TStartSessionRequest:
        {
            mozilla::dom::StartSessionRequest tmp = mozilla::dom::StartSessionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StartSessionRequest())))))) {
                aActor->FatalError("Error deserializing variant TStartSessionRequest of union PresentationIPCRequest");
                return false;
            }
            // Sentinel = 'TStartSessionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 1408305200)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStartSessionRequest of union PresentationIPCRequest");
                return false;
            }
            return true;
        }
    case union__::TSendSessionMessageRequest:
        {
            mozilla::dom::SendSessionMessageRequest tmp = mozilla::dom::SendSessionMessageRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SendSessionMessageRequest())))))) {
                aActor->FatalError("Error deserializing variant TSendSessionMessageRequest of union PresentationIPCRequest");
                return false;
            }
            // Sentinel = 'TSendSessionMessageRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 2311522929)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSendSessionMessageRequest of union PresentationIPCRequest");
                return false;
            }
            return true;
        }
    case union__::TCloseSessionRequest:
        {
            mozilla::dom::CloseSessionRequest tmp = mozilla::dom::CloseSessionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CloseSessionRequest())))))) {
                aActor->FatalError("Error deserializing variant TCloseSessionRequest of union PresentationIPCRequest");
                return false;
            }
            // Sentinel = 'TCloseSessionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 1380845592)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCloseSessionRequest of union PresentationIPCRequest");
                return false;
            }
            return true;
        }
    case union__::TTerminateSessionRequest:
        {
            mozilla::dom::TerminateSessionRequest tmp = mozilla::dom::TerminateSessionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_TerminateSessionRequest())))))) {
                aActor->FatalError("Error deserializing variant TTerminateSessionRequest of union PresentationIPCRequest");
                return false;
            }
            // Sentinel = 'TTerminateSessionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 2010253771)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TTerminateSessionRequest of union PresentationIPCRequest");
                return false;
            }
            return true;
        }
    case union__::TReconnectSessionRequest:
        {
            mozilla::dom::ReconnectSessionRequest tmp = mozilla::dom::ReconnectSessionRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ReconnectSessionRequest())))))) {
                aActor->FatalError("Error deserializing variant TReconnectSessionRequest of union PresentationIPCRequest");
                return false;
            }
            // Sentinel = 'TReconnectSessionRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 1996818883)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TReconnectSessionRequest of union PresentationIPCRequest");
                return false;
            }
            return true;
        }
    case union__::TBuildTransportRequest:
        {
            mozilla::dom::BuildTransportRequest tmp = mozilla::dom::BuildTransportRequest();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_BuildTransportRequest())))))) {
                aActor->FatalError("Error deserializing variant TBuildTransportRequest of union PresentationIPCRequest");
                return false;
            }
            // Sentinel = 'TBuildTransportRequest'
            if ((!((aMsg)->ReadSentinel(aIter, 1678706939)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TBuildTransportRequest of union PresentationIPCRequest");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
