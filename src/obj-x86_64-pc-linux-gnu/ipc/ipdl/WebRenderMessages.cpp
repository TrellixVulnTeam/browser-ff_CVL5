//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/WebRenderMessageUtils.h"
#include "mozilla/layers/PTextureParent.h"
#include "mozilla/layers/PTextureChild.h"
#include "mozilla/layers/WebRenderMessages.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RefCountedShmem|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::RefCountedShmem>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, std::move((aVar).buffer()));
    // Sentinel = 'buffer'
    (aMsg)->WriteSentinel(144769659);
}

auto IPDLParamTraits<mozilla::layers::RefCountedShmem>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->buffer())))))) {
        aActor->FatalError("Error deserializing 'buffer' (Shmem) member of 'RefCountedShmem'");
        return false;
    }
    // Sentinel = 'buffer'
    if ((!((aMsg)->ReadSentinel(aIter, 144769659)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'buffer' (Shmem) member of 'RefCountedShmem'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddPrivateExternalImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddPrivateExternalImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).externalImageId());
    // Sentinel = 'externalImageId'
    (aMsg)->WriteSentinel(827852276);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    WriteIPDLParam(aMsg, aActor, (aVar).descriptor());
    // Sentinel = 'descriptor'
    (aMsg)->WriteSentinel(384894016);
}

auto IPDLParamTraits<mozilla::layers::OpAddPrivateExternalImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->externalImageId())))))) {
        aActor->FatalError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpAddPrivateExternalImage'");
        return false;
    }
    // Sentinel = 'externalImageId'
    if ((!((aMsg)->ReadSentinel(aIter, 827852276)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpAddPrivateExternalImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpAddPrivateExternalImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpAddPrivateExternalImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->descriptor())))))) {
        aActor->FatalError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpAddPrivateExternalImage'");
        return false;
    }
    // Sentinel = 'descriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 384894016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpAddPrivateExternalImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddSharedExternalImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddSharedExternalImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).externalImageId());
    // Sentinel = 'externalImageId'
    (aMsg)->WriteSentinel(827852276);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::layers::OpAddSharedExternalImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->externalImageId())))))) {
        aActor->FatalError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpAddSharedExternalImage'");
        return false;
    }
    // Sentinel = 'externalImageId'
    if ((!((aMsg)->ReadSentinel(aIter, 827852276)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpAddSharedExternalImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpAddSharedExternalImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpAddSharedExternalImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpPushExternalImageForTexture|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpPushExternalImageForTexture>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).externalImageId());
    // Sentinel = 'externalImageId'
    (aMsg)->WriteSentinel(827852276);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureParent(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureParent());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        MOZ_RELEASE_ASSERT((aVar).textureChild(), "NULL actor value passed to non-nullable param");
        WriteIPDLParam(aMsg, aActor, (aVar).textureChild());
        // Sentinel = 'texture'
        (aMsg)->WriteSentinel(207684370);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).isUpdate());
    // Sentinel = 'isUpdate'
    (aMsg)->WriteSentinel(245564224);
}

auto IPDLParamTraits<mozilla::layers::OpPushExternalImageForTexture>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->externalImageId())))))) {
        aActor->FatalError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpPushExternalImageForTexture'");
        return false;
    }
    // Sentinel = 'externalImageId'
    if ((!((aMsg)->ReadSentinel(aIter, 827852276)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpPushExternalImageForTexture'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpPushExternalImageForTexture'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpPushExternalImageForTexture'");
        return false;
    }
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureParent())))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'OpPushExternalImageForTexture'");
            return false;
        }
        if ((!((*((&((aVar)->textureParent()))))))) {
            aActor->FatalError("Error deserializing 'textureParent' (PTexture) member of 'OpPushExternalImageForTexture'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureParent' (PTexture) member of 'OpPushExternalImageForTexture'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->textureChild())))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'OpPushExternalImageForTexture'");
            return false;
        }
        if ((!((*((&((aVar)->textureChild()))))))) {
            aActor->FatalError("Error deserializing 'textureChild' (PTexture) member of 'OpPushExternalImageForTexture'");
            return false;
        }
        // Sentinel = 'texture'
        if ((!((aMsg)->ReadSentinel(aIter, 207684370)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'textureChild' (PTexture) member of 'OpPushExternalImageForTexture'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isUpdate())))))) {
        aActor->FatalError("Error deserializing 'isUpdate' (bool) member of 'OpPushExternalImageForTexture'");
        return false;
    }
    // Sentinel = 'isUpdate'
    if ((!((aMsg)->ReadSentinel(aIter, 245564224)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isUpdate' (bool) member of 'OpPushExternalImageForTexture'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddCompositorAnimations|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddCompositorAnimations>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::layers::OpAddCompositorAnimations>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (CompositorAnimations) member of 'OpAddCompositorAnimations'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (CompositorAnimations) member of 'OpAddCompositorAnimations'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddPipelineIdForCompositable|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddPipelineIdForCompositable>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).pipelineId());
    // Sentinel = 'pipelineId'
    (aMsg)->WriteSentinel(382731268);
    WriteIPDLParam(aMsg, aActor, (aVar).handle());
    // Sentinel = 'handle'
    (aMsg)->WriteSentinel(142344813);
    WriteIPDLParam(aMsg, aActor, (aVar).isAsync());
    // Sentinel = 'isAsync'
    (aMsg)->WriteSentinel(189989595);
}

auto IPDLParamTraits<mozilla::layers::OpAddPipelineIdForCompositable>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->pipelineId())))))) {
        aActor->FatalError("Error deserializing 'pipelineId' (PipelineId) member of 'OpAddPipelineIdForCompositable'");
        return false;
    }
    // Sentinel = 'pipelineId'
    if ((!((aMsg)->ReadSentinel(aIter, 382731268)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'pipelineId' (PipelineId) member of 'OpAddPipelineIdForCompositable'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handle())))))) {
        aActor->FatalError("Error deserializing 'handle' (CompositableHandle) member of 'OpAddPipelineIdForCompositable'");
        return false;
    }
    // Sentinel = 'handle'
    if ((!((aMsg)->ReadSentinel(aIter, 142344813)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handle' (CompositableHandle) member of 'OpAddPipelineIdForCompositable'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isAsync())))))) {
        aActor->FatalError("Error deserializing 'isAsync' (bool) member of 'OpAddPipelineIdForCompositable'");
        return false;
    }
    // Sentinel = 'isAsync'
    if ((!((aMsg)->ReadSentinel(aIter, 189989595)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isAsync' (bool) member of 'OpAddPipelineIdForCompositable'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpRemovePipelineIdForCompositable|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpRemovePipelineIdForCompositable>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).pipelineId());
    // Sentinel = 'pipelineId'
    (aMsg)->WriteSentinel(382731268);
}

auto IPDLParamTraits<mozilla::layers::OpRemovePipelineIdForCompositable>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->pipelineId())))))) {
        aActor->FatalError("Error deserializing 'pipelineId' (PipelineId) member of 'OpRemovePipelineIdForCompositable'");
        return false;
    }
    // Sentinel = 'pipelineId'
    if ((!((aMsg)->ReadSentinel(aIter, 382731268)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'pipelineId' (PipelineId) member of 'OpRemovePipelineIdForCompositable'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpReleaseTextureOfImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpReleaseTextureOfImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::layers::OpReleaseTextureOfImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpReleaseTextureOfImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpReleaseTextureOfImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUpdateAsyncImagePipeline|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUpdateAsyncImagePipeline>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).pipelineId());
    // Sentinel = 'pipelineId'
    (aMsg)->WriteSentinel(382731268);
    WriteIPDLParam(aMsg, aActor, (aVar).scBounds());
    // Sentinel = 'scBounds'
    (aMsg)->WriteSentinel(241500994);
    WriteIPDLParam(aMsg, aActor, (aVar).rotation());
    // Sentinel = 'rotation'
    (aMsg)->WriteSentinel(261423985);
    WriteIPDLParam(aMsg, aActor, (aVar).filter());
    // Sentinel = 'filter'
    (aMsg)->WriteSentinel(146735751);
    WriteIPDLParam(aMsg, aActor, (aVar).mixBlendMode());
    // Sentinel = 'mixBlendMode'
    (aMsg)->WriteSentinel(520488121);
}

auto IPDLParamTraits<mozilla::layers::OpUpdateAsyncImagePipeline>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->pipelineId())))))) {
        aActor->FatalError("Error deserializing 'pipelineId' (PipelineId) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    // Sentinel = 'pipelineId'
    if ((!((aMsg)->ReadSentinel(aIter, 382731268)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'pipelineId' (PipelineId) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scBounds())))))) {
        aActor->FatalError("Error deserializing 'scBounds' (LayoutDeviceRect) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    // Sentinel = 'scBounds'
    if ((!((aMsg)->ReadSentinel(aIter, 241500994)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scBounds' (LayoutDeviceRect) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rotation())))))) {
        aActor->FatalError("Error deserializing 'rotation' (Rotation) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    // Sentinel = 'rotation'
    if ((!((aMsg)->ReadSentinel(aIter, 261423985)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rotation' (Rotation) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filter())))))) {
        aActor->FatalError("Error deserializing 'filter' (ImageRendering) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    // Sentinel = 'filter'
    if ((!((aMsg)->ReadSentinel(aIter, 146735751)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filter' (ImageRendering) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mixBlendMode())))))) {
        aActor->FatalError("Error deserializing 'mixBlendMode' (MixBlendMode) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    // Sentinel = 'mixBlendMode'
    if ((!((aMsg)->ReadSentinel(aIter, 520488121)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mixBlendMode' (MixBlendMode) member of 'OpUpdateAsyncImagePipeline'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUpdatedAsyncImagePipeline|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUpdatedAsyncImagePipeline>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).pipelineId());
    // Sentinel = 'pipelineId'
    (aMsg)->WriteSentinel(382731268);
}

auto IPDLParamTraits<mozilla::layers::OpUpdatedAsyncImagePipeline>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->pipelineId())))))) {
        aActor->FatalError("Error deserializing 'pipelineId' (PipelineId) member of 'OpUpdatedAsyncImagePipeline'");
        return false;
    }
    // Sentinel = 'pipelineId'
    if ((!((aMsg)->ReadSentinel(aIter, 382731268)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'pipelineId' (PipelineId) member of 'OpUpdatedAsyncImagePipeline'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union WebRenderParentCommand|
//
namespace mozilla {
namespace layers {
auto WebRenderParentCommand::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TOpAddPipelineIdForCompositable:
        {
            (ptr_OpAddPipelineIdForCompositable())->~OpAddPipelineIdForCompositable__tdef();
            break;
        }
    case TOpRemovePipelineIdForCompositable:
        {
            (ptr_OpRemovePipelineIdForCompositable())->~OpRemovePipelineIdForCompositable__tdef();
            break;
        }
    case TOpReleaseTextureOfImage:
        {
            (ptr_OpReleaseTextureOfImage())->~OpReleaseTextureOfImage__tdef();
            break;
        }
    case TOpUpdateAsyncImagePipeline:
        {
            (ptr_OpUpdateAsyncImagePipeline())->~OpUpdateAsyncImagePipeline__tdef();
            break;
        }
    case TOpUpdatedAsyncImagePipeline:
        {
            (ptr_OpUpdatedAsyncImagePipeline())->~OpUpdatedAsyncImagePipeline__tdef();
            break;
        }
    case TCompositableOperation:
        {
            (ptr_CompositableOperation())->~CompositableOperation__tdef();
            break;
        }
    case TOpAddCompositorAnimations:
        {
            (ptr_OpAddCompositorAnimations())->~OpAddCompositorAnimations__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(const OpAddPipelineIdForCompositable& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddPipelineIdForCompositable()) OpAddPipelineIdForCompositable(aOther);
    mType = TOpAddPipelineIdForCompositable;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(OpAddPipelineIdForCompositable&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddPipelineIdForCompositable()) OpAddPipelineIdForCompositable(std::move(aOther));
    mType = TOpAddPipelineIdForCompositable;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(const OpRemovePipelineIdForCompositable& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRemovePipelineIdForCompositable()) OpRemovePipelineIdForCompositable(aOther);
    mType = TOpRemovePipelineIdForCompositable;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(OpRemovePipelineIdForCompositable&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpRemovePipelineIdForCompositable()) OpRemovePipelineIdForCompositable(std::move(aOther));
    mType = TOpRemovePipelineIdForCompositable;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(const OpReleaseTextureOfImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpReleaseTextureOfImage()) OpReleaseTextureOfImage(aOther);
    mType = TOpReleaseTextureOfImage;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(OpReleaseTextureOfImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpReleaseTextureOfImage()) OpReleaseTextureOfImage(std::move(aOther));
    mType = TOpReleaseTextureOfImage;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(const OpUpdateAsyncImagePipeline& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdateAsyncImagePipeline()) OpUpdateAsyncImagePipeline(aOther);
    mType = TOpUpdateAsyncImagePipeline;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(OpUpdateAsyncImagePipeline&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdateAsyncImagePipeline()) OpUpdateAsyncImagePipeline(std::move(aOther));
    mType = TOpUpdateAsyncImagePipeline;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(const OpUpdatedAsyncImagePipeline& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdatedAsyncImagePipeline()) OpUpdatedAsyncImagePipeline(aOther);
    mType = TOpUpdatedAsyncImagePipeline;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(OpUpdatedAsyncImagePipeline&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdatedAsyncImagePipeline()) OpUpdatedAsyncImagePipeline(std::move(aOther));
    mType = TOpUpdatedAsyncImagePipeline;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(const CompositableOperation& aOther)
{
    new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation(aOther);
    mType = TCompositableOperation;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(CompositableOperation&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation(std::move(aOther));
    mType = TCompositableOperation;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(const OpAddCompositorAnimations& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddCompositorAnimations()) OpAddCompositorAnimations(aOther);
    mType = TOpAddCompositorAnimations;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(OpAddCompositorAnimations&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddCompositorAnimations()) OpAddCompositorAnimations(std::move(aOther));
    mType = TOpAddCompositorAnimations;
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(const WebRenderParentCommand& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TOpAddPipelineIdForCompositable:
        {
            new (mozilla::KnownNotNull, ptr_OpAddPipelineIdForCompositable()) OpAddPipelineIdForCompositable((aOther).get_OpAddPipelineIdForCompositable());
            break;
        }
    case TOpRemovePipelineIdForCompositable:
        {
            new (mozilla::KnownNotNull, ptr_OpRemovePipelineIdForCompositable()) OpRemovePipelineIdForCompositable((aOther).get_OpRemovePipelineIdForCompositable());
            break;
        }
    case TOpReleaseTextureOfImage:
        {
            new (mozilla::KnownNotNull, ptr_OpReleaseTextureOfImage()) OpReleaseTextureOfImage((aOther).get_OpReleaseTextureOfImage());
            break;
        }
    case TOpUpdateAsyncImagePipeline:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdateAsyncImagePipeline()) OpUpdateAsyncImagePipeline((aOther).get_OpUpdateAsyncImagePipeline());
            break;
        }
    case TOpUpdatedAsyncImagePipeline:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdatedAsyncImagePipeline()) OpUpdatedAsyncImagePipeline((aOther).get_OpUpdatedAsyncImagePipeline());
            break;
        }
    case TCompositableOperation:
        {
            new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation((aOther).get_CompositableOperation());
            break;
        }
    case TOpAddCompositorAnimations:
        {
            new (mozilla::KnownNotNull, ptr_OpAddCompositorAnimations()) OpAddCompositorAnimations((aOther).get_OpAddCompositorAnimations());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT WebRenderParentCommand::WebRenderParentCommand(WebRenderParentCommand&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TOpAddPipelineIdForCompositable:
        {
            new (mozilla::KnownNotNull, ptr_OpAddPipelineIdForCompositable()) OpAddPipelineIdForCompositable(std::move((aOther).get_OpAddPipelineIdForCompositable()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpRemovePipelineIdForCompositable:
        {
            new (mozilla::KnownNotNull, ptr_OpRemovePipelineIdForCompositable()) OpRemovePipelineIdForCompositable(std::move((aOther).get_OpRemovePipelineIdForCompositable()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpReleaseTextureOfImage:
        {
            new (mozilla::KnownNotNull, ptr_OpReleaseTextureOfImage()) OpReleaseTextureOfImage(std::move((aOther).get_OpReleaseTextureOfImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdateAsyncImagePipeline:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdateAsyncImagePipeline()) OpUpdateAsyncImagePipeline(std::move((aOther).get_OpUpdateAsyncImagePipeline()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdatedAsyncImagePipeline:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdatedAsyncImagePipeline()) OpUpdatedAsyncImagePipeline(std::move((aOther).get_OpUpdatedAsyncImagePipeline()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCompositableOperation:
        {
            new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation(std::move((aOther).get_CompositableOperation()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAddCompositorAnimations:
        {
            new (mozilla::KnownNotNull, ptr_OpAddCompositorAnimations()) OpAddCompositorAnimations(std::move((aOther).get_OpAddCompositorAnimations()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

WebRenderParentCommand::~WebRenderParentCommand()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto WebRenderParentCommand::operator=(const OpAddPipelineIdForCompositable& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpAddPipelineIdForCompositable)) {
        new (mozilla::KnownNotNull, ptr_OpAddPipelineIdForCompositable()) OpAddPipelineIdForCompositable;
    }
    (*(ptr_OpAddPipelineIdForCompositable())) = aRhs;
    mType = TOpAddPipelineIdForCompositable;
    return (*(this));
}

auto WebRenderParentCommand::operator=(OpAddPipelineIdForCompositable&& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpAddPipelineIdForCompositable)) {
        new (mozilla::KnownNotNull, ptr_OpAddPipelineIdForCompositable()) OpAddPipelineIdForCompositable;
    }
    (*(ptr_OpAddPipelineIdForCompositable())) = std::move(aRhs);
    mType = TOpAddPipelineIdForCompositable;
    return (*(this));
}

auto WebRenderParentCommand::operator=(const OpRemovePipelineIdForCompositable& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpRemovePipelineIdForCompositable)) {
        new (mozilla::KnownNotNull, ptr_OpRemovePipelineIdForCompositable()) OpRemovePipelineIdForCompositable;
    }
    (*(ptr_OpRemovePipelineIdForCompositable())) = aRhs;
    mType = TOpRemovePipelineIdForCompositable;
    return (*(this));
}

auto WebRenderParentCommand::operator=(OpRemovePipelineIdForCompositable&& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpRemovePipelineIdForCompositable)) {
        new (mozilla::KnownNotNull, ptr_OpRemovePipelineIdForCompositable()) OpRemovePipelineIdForCompositable;
    }
    (*(ptr_OpRemovePipelineIdForCompositable())) = std::move(aRhs);
    mType = TOpRemovePipelineIdForCompositable;
    return (*(this));
}

auto WebRenderParentCommand::operator=(const OpReleaseTextureOfImage& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpReleaseTextureOfImage)) {
        new (mozilla::KnownNotNull, ptr_OpReleaseTextureOfImage()) OpReleaseTextureOfImage;
    }
    (*(ptr_OpReleaseTextureOfImage())) = aRhs;
    mType = TOpReleaseTextureOfImage;
    return (*(this));
}

auto WebRenderParentCommand::operator=(OpReleaseTextureOfImage&& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpReleaseTextureOfImage)) {
        new (mozilla::KnownNotNull, ptr_OpReleaseTextureOfImage()) OpReleaseTextureOfImage;
    }
    (*(ptr_OpReleaseTextureOfImage())) = std::move(aRhs);
    mType = TOpReleaseTextureOfImage;
    return (*(this));
}

auto WebRenderParentCommand::operator=(const OpUpdateAsyncImagePipeline& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpUpdateAsyncImagePipeline)) {
        new (mozilla::KnownNotNull, ptr_OpUpdateAsyncImagePipeline()) OpUpdateAsyncImagePipeline;
    }
    (*(ptr_OpUpdateAsyncImagePipeline())) = aRhs;
    mType = TOpUpdateAsyncImagePipeline;
    return (*(this));
}

auto WebRenderParentCommand::operator=(OpUpdateAsyncImagePipeline&& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpUpdateAsyncImagePipeline)) {
        new (mozilla::KnownNotNull, ptr_OpUpdateAsyncImagePipeline()) OpUpdateAsyncImagePipeline;
    }
    (*(ptr_OpUpdateAsyncImagePipeline())) = std::move(aRhs);
    mType = TOpUpdateAsyncImagePipeline;
    return (*(this));
}

auto WebRenderParentCommand::operator=(const OpUpdatedAsyncImagePipeline& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpUpdatedAsyncImagePipeline)) {
        new (mozilla::KnownNotNull, ptr_OpUpdatedAsyncImagePipeline()) OpUpdatedAsyncImagePipeline;
    }
    (*(ptr_OpUpdatedAsyncImagePipeline())) = aRhs;
    mType = TOpUpdatedAsyncImagePipeline;
    return (*(this));
}

auto WebRenderParentCommand::operator=(OpUpdatedAsyncImagePipeline&& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpUpdatedAsyncImagePipeline)) {
        new (mozilla::KnownNotNull, ptr_OpUpdatedAsyncImagePipeline()) OpUpdatedAsyncImagePipeline;
    }
    (*(ptr_OpUpdatedAsyncImagePipeline())) = std::move(aRhs);
    mType = TOpUpdatedAsyncImagePipeline;
    return (*(this));
}

auto WebRenderParentCommand::operator=(const CompositableOperation& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TCompositableOperation)) {
        new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation;
    }
    (*(ptr_CompositableOperation())) = aRhs;
    mType = TCompositableOperation;
    return (*(this));
}

auto WebRenderParentCommand::operator=(CompositableOperation&& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TCompositableOperation)) {
        new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation;
    }
    (*(ptr_CompositableOperation())) = std::move(aRhs);
    mType = TCompositableOperation;
    return (*(this));
}

auto WebRenderParentCommand::operator=(const OpAddCompositorAnimations& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpAddCompositorAnimations)) {
        new (mozilla::KnownNotNull, ptr_OpAddCompositorAnimations()) OpAddCompositorAnimations;
    }
    (*(ptr_OpAddCompositorAnimations())) = aRhs;
    mType = TOpAddCompositorAnimations;
    return (*(this));
}

auto WebRenderParentCommand::operator=(OpAddCompositorAnimations&& aRhs) -> WebRenderParentCommand&
{
    if (MaybeDestroy(TOpAddCompositorAnimations)) {
        new (mozilla::KnownNotNull, ptr_OpAddCompositorAnimations()) OpAddCompositorAnimations;
    }
    (*(ptr_OpAddCompositorAnimations())) = std::move(aRhs);
    mType = TOpAddCompositorAnimations;
    return (*(this));
}

auto WebRenderParentCommand::operator=(const WebRenderParentCommand& aRhs) -> WebRenderParentCommand&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpAddPipelineIdForCompositable:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddPipelineIdForCompositable()) OpAddPipelineIdForCompositable;
            }
            (*(ptr_OpAddPipelineIdForCompositable())) = (aRhs).get_OpAddPipelineIdForCompositable();
            break;
        }
    case TOpRemovePipelineIdForCompositable:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRemovePipelineIdForCompositable()) OpRemovePipelineIdForCompositable;
            }
            (*(ptr_OpRemovePipelineIdForCompositable())) = (aRhs).get_OpRemovePipelineIdForCompositable();
            break;
        }
    case TOpReleaseTextureOfImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpReleaseTextureOfImage()) OpReleaseTextureOfImage;
            }
            (*(ptr_OpReleaseTextureOfImage())) = (aRhs).get_OpReleaseTextureOfImage();
            break;
        }
    case TOpUpdateAsyncImagePipeline:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdateAsyncImagePipeline()) OpUpdateAsyncImagePipeline;
            }
            (*(ptr_OpUpdateAsyncImagePipeline())) = (aRhs).get_OpUpdateAsyncImagePipeline();
            break;
        }
    case TOpUpdatedAsyncImagePipeline:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdatedAsyncImagePipeline()) OpUpdatedAsyncImagePipeline;
            }
            (*(ptr_OpUpdatedAsyncImagePipeline())) = (aRhs).get_OpUpdatedAsyncImagePipeline();
            break;
        }
    case TCompositableOperation:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation;
            }
            (*(ptr_CompositableOperation())) = (aRhs).get_CompositableOperation();
            break;
        }
    case TOpAddCompositorAnimations:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddCompositorAnimations()) OpAddCompositorAnimations;
            }
            (*(ptr_OpAddCompositorAnimations())) = (aRhs).get_OpAddCompositorAnimations();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto WebRenderParentCommand::operator=(WebRenderParentCommand&& aRhs) -> WebRenderParentCommand&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpAddPipelineIdForCompositable:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddPipelineIdForCompositable()) OpAddPipelineIdForCompositable;
            }
            (*(ptr_OpAddPipelineIdForCompositable())) = std::move((aRhs).get_OpAddPipelineIdForCompositable());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpRemovePipelineIdForCompositable:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpRemovePipelineIdForCompositable()) OpRemovePipelineIdForCompositable;
            }
            (*(ptr_OpRemovePipelineIdForCompositable())) = std::move((aRhs).get_OpRemovePipelineIdForCompositable());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpReleaseTextureOfImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpReleaseTextureOfImage()) OpReleaseTextureOfImage;
            }
            (*(ptr_OpReleaseTextureOfImage())) = std::move((aRhs).get_OpReleaseTextureOfImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdateAsyncImagePipeline:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdateAsyncImagePipeline()) OpUpdateAsyncImagePipeline;
            }
            (*(ptr_OpUpdateAsyncImagePipeline())) = std::move((aRhs).get_OpUpdateAsyncImagePipeline());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdatedAsyncImagePipeline:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdatedAsyncImagePipeline()) OpUpdatedAsyncImagePipeline;
            }
            (*(ptr_OpUpdatedAsyncImagePipeline())) = std::move((aRhs).get_OpUpdatedAsyncImagePipeline());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCompositableOperation:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CompositableOperation()) CompositableOperation;
            }
            (*(ptr_CompositableOperation())) = std::move((aRhs).get_CompositableOperation());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAddCompositorAnimations:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddCompositorAnimations()) OpAddCompositorAnimations;
            }
            (*(ptr_OpAddCompositorAnimations())) = std::move((aRhs).get_OpAddCompositorAnimations());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::WebRenderParentCommand>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::WebRenderParentCommand union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'WebRenderParentCommand'
    (aMsg)->WriteSentinel(1644103848);

    switch (type) {
    case union__::TOpAddPipelineIdForCompositable:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddPipelineIdForCompositable());
            // Sentinel = 'TOpAddPipelineIdForCompositable'
            (aMsg)->WriteSentinel(3140422665);
            return;
        }
    case union__::TOpRemovePipelineIdForCompositable:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpRemovePipelineIdForCompositable());
            // Sentinel = 'TOpRemovePipelineIdForCompositable'
            (aMsg)->WriteSentinel(3884977518);
            return;
        }
    case union__::TOpReleaseTextureOfImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpReleaseTextureOfImage());
            // Sentinel = 'TOpReleaseTextureOfImage'
            (aMsg)->WriteSentinel(1947076958);
            return;
        }
    case union__::TOpUpdateAsyncImagePipeline:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUpdateAsyncImagePipeline());
            // Sentinel = 'TOpUpdateAsyncImagePipeline'
            (aMsg)->WriteSentinel(2439318158);
            return;
        }
    case union__::TOpUpdatedAsyncImagePipeline:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUpdatedAsyncImagePipeline());
            // Sentinel = 'TOpUpdatedAsyncImagePipeline'
            (aMsg)->WriteSentinel(2621967090);
            return;
        }
    case union__::TCompositableOperation:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CompositableOperation());
            // Sentinel = 'TCompositableOperation'
            (aMsg)->WriteSentinel(1686833384);
            return;
        }
    case union__::TOpAddCompositorAnimations:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddCompositorAnimations());
            // Sentinel = 'TOpAddCompositorAnimations'
            (aMsg)->WriteSentinel(2263681631);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::WebRenderParentCommand>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::WebRenderParentCommand union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union WebRenderParentCommand");
        return false;
    }
    // Sentinel = 'WebRenderParentCommand'
    if ((!((aMsg)->ReadSentinel(aIter, 1644103848)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union WebRenderParentCommand");
        return false;
    }

    switch (type) {
    case union__::TOpAddPipelineIdForCompositable:
        {
            mozilla::layers::OpAddPipelineIdForCompositable tmp = mozilla::layers::OpAddPipelineIdForCompositable();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddPipelineIdForCompositable())))))) {
                aActor->FatalError("Error deserializing variant TOpAddPipelineIdForCompositable of union WebRenderParentCommand");
                return false;
            }
            // Sentinel = 'TOpAddPipelineIdForCompositable'
            if ((!((aMsg)->ReadSentinel(aIter, 3140422665)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddPipelineIdForCompositable of union WebRenderParentCommand");
                return false;
            }
            return true;
        }
    case union__::TOpRemovePipelineIdForCompositable:
        {
            mozilla::layers::OpRemovePipelineIdForCompositable tmp = mozilla::layers::OpRemovePipelineIdForCompositable();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpRemovePipelineIdForCompositable())))))) {
                aActor->FatalError("Error deserializing variant TOpRemovePipelineIdForCompositable of union WebRenderParentCommand");
                return false;
            }
            // Sentinel = 'TOpRemovePipelineIdForCompositable'
            if ((!((aMsg)->ReadSentinel(aIter, 3884977518)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpRemovePipelineIdForCompositable of union WebRenderParentCommand");
                return false;
            }
            return true;
        }
    case union__::TOpReleaseTextureOfImage:
        {
            mozilla::layers::OpReleaseTextureOfImage tmp = mozilla::layers::OpReleaseTextureOfImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpReleaseTextureOfImage())))))) {
                aActor->FatalError("Error deserializing variant TOpReleaseTextureOfImage of union WebRenderParentCommand");
                return false;
            }
            // Sentinel = 'TOpReleaseTextureOfImage'
            if ((!((aMsg)->ReadSentinel(aIter, 1947076958)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpReleaseTextureOfImage of union WebRenderParentCommand");
                return false;
            }
            return true;
        }
    case union__::TOpUpdateAsyncImagePipeline:
        {
            mozilla::layers::OpUpdateAsyncImagePipeline tmp = mozilla::layers::OpUpdateAsyncImagePipeline();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUpdateAsyncImagePipeline())))))) {
                aActor->FatalError("Error deserializing variant TOpUpdateAsyncImagePipeline of union WebRenderParentCommand");
                return false;
            }
            // Sentinel = 'TOpUpdateAsyncImagePipeline'
            if ((!((aMsg)->ReadSentinel(aIter, 2439318158)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUpdateAsyncImagePipeline of union WebRenderParentCommand");
                return false;
            }
            return true;
        }
    case union__::TOpUpdatedAsyncImagePipeline:
        {
            mozilla::layers::OpUpdatedAsyncImagePipeline tmp = mozilla::layers::OpUpdatedAsyncImagePipeline();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUpdatedAsyncImagePipeline())))))) {
                aActor->FatalError("Error deserializing variant TOpUpdatedAsyncImagePipeline of union WebRenderParentCommand");
                return false;
            }
            // Sentinel = 'TOpUpdatedAsyncImagePipeline'
            if ((!((aMsg)->ReadSentinel(aIter, 2621967090)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUpdatedAsyncImagePipeline of union WebRenderParentCommand");
                return false;
            }
            return true;
        }
    case union__::TCompositableOperation:
        {
            mozilla::layers::CompositableOperation tmp = mozilla::layers::CompositableOperation();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CompositableOperation())))))) {
                aActor->FatalError("Error deserializing variant TCompositableOperation of union WebRenderParentCommand");
                return false;
            }
            // Sentinel = 'TCompositableOperation'
            if ((!((aMsg)->ReadSentinel(aIter, 1686833384)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCompositableOperation of union WebRenderParentCommand");
                return false;
            }
            return true;
        }
    case union__::TOpAddCompositorAnimations:
        {
            mozilla::layers::OpAddCompositorAnimations tmp = mozilla::layers::OpAddCompositorAnimations();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddCompositorAnimations())))))) {
                aActor->FatalError("Error deserializing variant TOpAddCompositorAnimations of union WebRenderParentCommand");
                return false;
            }
            // Sentinel = 'TOpAddCompositorAnimations'
            if ((!((aMsg)->ReadSentinel(aIter, 2263681631)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddCompositorAnimations of union WebRenderParentCommand");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OffsetRange|
//
namespace mozilla {
namespace layers {
auto OffsetRange::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(OffsetRange, length_) - offsetof(OffsetRange, source_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OffsetRange>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).source())), 12);
    // Sentinel = 'source | start | length'
    (aMsg)->WriteSentinel(1768949946);
}

auto IPDLParamTraits<mozilla::layers::OffsetRange>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->source())), 12)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'source | start | length'
    if ((!((aMsg)->ReadSentinel(aIter, 1768949946)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).descriptor());
    // Sentinel = 'descriptor'
    (aMsg)->WriteSentinel(384894016);
    WriteIPDLParam(aMsg, aActor, (aVar).bytes());
    // Sentinel = 'bytes'
    (aMsg)->WriteSentinel(107741736);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    (aMsg)->WriteBytes((&((aVar).tiling())), 2);
    // Sentinel = 'tiling'
    (aMsg)->WriteSentinel(150536840);
}

auto IPDLParamTraits<mozilla::layers::OpAddImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->descriptor())))))) {
        aActor->FatalError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpAddImage'");
        return false;
    }
    // Sentinel = 'descriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 384894016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpAddImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bytes())))))) {
        aActor->FatalError("Error deserializing 'bytes' (OffsetRange) member of 'OpAddImage'");
        return false;
    }
    // Sentinel = 'bytes'
    if ((!((aMsg)->ReadSentinel(aIter, 107741736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bytes' (OffsetRange) member of 'OpAddImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpAddImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpAddImage'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->tiling())), 2)))) {
        aActor->FatalError("Error bulk reading fields from uint16_t");
        return false;
    }
    // Sentinel = 'tiling'
    if ((!((aMsg)->ReadSentinel(aIter, 150536840)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint16_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddBlobImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddBlobImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).descriptor());
    // Sentinel = 'descriptor'
    (aMsg)->WriteSentinel(384894016);
    WriteIPDLParam(aMsg, aActor, (aVar).bytes());
    // Sentinel = 'bytes'
    (aMsg)->WriteSentinel(107741736);
    WriteIPDLParam(aMsg, aActor, (aVar).visibleRect());
    // Sentinel = 'visibleRect'
    (aMsg)->WriteSentinel(459932797);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    (aMsg)->WriteBytes((&((aVar).tiling())), 2);
    // Sentinel = 'tiling'
    (aMsg)->WriteSentinel(150536840);
}

auto IPDLParamTraits<mozilla::layers::OpAddBlobImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->descriptor())))))) {
        aActor->FatalError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpAddBlobImage'");
        return false;
    }
    // Sentinel = 'descriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 384894016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpAddBlobImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bytes())))))) {
        aActor->FatalError("Error deserializing 'bytes' (OffsetRange) member of 'OpAddBlobImage'");
        return false;
    }
    // Sentinel = 'bytes'
    if ((!((aMsg)->ReadSentinel(aIter, 107741736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bytes' (OffsetRange) member of 'OpAddBlobImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->visibleRect())))))) {
        aActor->FatalError("Error deserializing 'visibleRect' (ImageIntRect) member of 'OpAddBlobImage'");
        return false;
    }
    // Sentinel = 'visibleRect'
    if ((!((aMsg)->ReadSentinel(aIter, 459932797)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'visibleRect' (ImageIntRect) member of 'OpAddBlobImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (BlobImageKey) member of 'OpAddBlobImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (BlobImageKey) member of 'OpAddBlobImage'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->tiling())), 2)))) {
        aActor->FatalError("Error bulk reading fields from uint16_t");
        return false;
    }
    // Sentinel = 'tiling'
    if ((!((aMsg)->ReadSentinel(aIter, 150536840)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint16_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUpdateImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUpdateImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).descriptor());
    // Sentinel = 'descriptor'
    (aMsg)->WriteSentinel(384894016);
    WriteIPDLParam(aMsg, aActor, (aVar).bytes());
    // Sentinel = 'bytes'
    (aMsg)->WriteSentinel(107741736);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::layers::OpUpdateImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->descriptor())))))) {
        aActor->FatalError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpUpdateImage'");
        return false;
    }
    // Sentinel = 'descriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 384894016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpUpdateImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bytes())))))) {
        aActor->FatalError("Error deserializing 'bytes' (OffsetRange) member of 'OpUpdateImage'");
        return false;
    }
    // Sentinel = 'bytes'
    if ((!((aMsg)->ReadSentinel(aIter, 107741736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bytes' (OffsetRange) member of 'OpUpdateImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpUpdateImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpUpdateImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUpdateBlobImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUpdateBlobImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).descriptor());
    // Sentinel = 'descriptor'
    (aMsg)->WriteSentinel(384894016);
    WriteIPDLParam(aMsg, aActor, (aVar).bytes());
    // Sentinel = 'bytes'
    (aMsg)->WriteSentinel(107741736);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    WriteIPDLParam(aMsg, aActor, (aVar).visibleRect());
    // Sentinel = 'visibleRect'
    (aMsg)->WriteSentinel(459932797);
    WriteIPDLParam(aMsg, aActor, (aVar).dirtyRect());
    // Sentinel = 'dirtyRect'
    (aMsg)->WriteSentinel(314115003);
}

auto IPDLParamTraits<mozilla::layers::OpUpdateBlobImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->descriptor())))))) {
        aActor->FatalError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpUpdateBlobImage'");
        return false;
    }
    // Sentinel = 'descriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 384894016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpUpdateBlobImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bytes())))))) {
        aActor->FatalError("Error deserializing 'bytes' (OffsetRange) member of 'OpUpdateBlobImage'");
        return false;
    }
    // Sentinel = 'bytes'
    if ((!((aMsg)->ReadSentinel(aIter, 107741736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bytes' (OffsetRange) member of 'OpUpdateBlobImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (BlobImageKey) member of 'OpUpdateBlobImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (BlobImageKey) member of 'OpUpdateBlobImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->visibleRect())))))) {
        aActor->FatalError("Error deserializing 'visibleRect' (ImageIntRect) member of 'OpUpdateBlobImage'");
        return false;
    }
    // Sentinel = 'visibleRect'
    if ((!((aMsg)->ReadSentinel(aIter, 459932797)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'visibleRect' (ImageIntRect) member of 'OpUpdateBlobImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dirtyRect())))))) {
        aActor->FatalError("Error deserializing 'dirtyRect' (ImageIntRect) member of 'OpUpdateBlobImage'");
        return false;
    }
    // Sentinel = 'dirtyRect'
    if ((!((aMsg)->ReadSentinel(aIter, 314115003)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dirtyRect' (ImageIntRect) member of 'OpUpdateBlobImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpSetBlobImageVisibleArea|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpSetBlobImageVisibleArea>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).area());
    // Sentinel = 'area'
    (aMsg)->WriteSentinel(67699098);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::layers::OpSetBlobImageVisibleArea>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->area())))))) {
        aActor->FatalError("Error deserializing 'area' (ImageIntRect) member of 'OpSetBlobImageVisibleArea'");
        return false;
    }
    // Sentinel = 'area'
    if ((!((aMsg)->ReadSentinel(aIter, 67699098)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'area' (ImageIntRect) member of 'OpSetBlobImageVisibleArea'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (BlobImageKey) member of 'OpSetBlobImageVisibleArea'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (BlobImageKey) member of 'OpSetBlobImageVisibleArea'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUpdatePrivateExternalImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUpdatePrivateExternalImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).externalImageId());
    // Sentinel = 'externalImageId'
    (aMsg)->WriteSentinel(827852276);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    WriteIPDLParam(aMsg, aActor, (aVar).descriptor());
    // Sentinel = 'descriptor'
    (aMsg)->WriteSentinel(384894016);
    WriteIPDLParam(aMsg, aActor, (aVar).dirtyRect());
    // Sentinel = 'dirtyRect'
    (aMsg)->WriteSentinel(314115003);
}

auto IPDLParamTraits<mozilla::layers::OpUpdatePrivateExternalImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->externalImageId())))))) {
        aActor->FatalError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpUpdatePrivateExternalImage'");
        return false;
    }
    // Sentinel = 'externalImageId'
    if ((!((aMsg)->ReadSentinel(aIter, 827852276)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpUpdatePrivateExternalImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpUpdatePrivateExternalImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpUpdatePrivateExternalImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->descriptor())))))) {
        aActor->FatalError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpUpdatePrivateExternalImage'");
        return false;
    }
    // Sentinel = 'descriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 384894016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'descriptor' (ImageDescriptor) member of 'OpUpdatePrivateExternalImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dirtyRect())))))) {
        aActor->FatalError("Error deserializing 'dirtyRect' (ImageIntRect) member of 'OpUpdatePrivateExternalImage'");
        return false;
    }
    // Sentinel = 'dirtyRect'
    if ((!((aMsg)->ReadSentinel(aIter, 314115003)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dirtyRect' (ImageIntRect) member of 'OpUpdatePrivateExternalImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpUpdateSharedExternalImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUpdateSharedExternalImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).externalImageId());
    // Sentinel = 'externalImageId'
    (aMsg)->WriteSentinel(827852276);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    WriteIPDLParam(aMsg, aActor, (aVar).dirtyRect());
    // Sentinel = 'dirtyRect'
    (aMsg)->WriteSentinel(314115003);
}

auto IPDLParamTraits<mozilla::layers::OpUpdateSharedExternalImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->externalImageId())))))) {
        aActor->FatalError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpUpdateSharedExternalImage'");
        return false;
    }
    // Sentinel = 'externalImageId'
    if ((!((aMsg)->ReadSentinel(aIter, 827852276)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'externalImageId' (ExternalImageId) member of 'OpUpdateSharedExternalImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpUpdateSharedExternalImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpUpdateSharedExternalImage'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dirtyRect())))))) {
        aActor->FatalError("Error deserializing 'dirtyRect' (ImageIntRect) member of 'OpUpdateSharedExternalImage'");
        return false;
    }
    // Sentinel = 'dirtyRect'
    if ((!((aMsg)->ReadSentinel(aIter, 314115003)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dirtyRect' (ImageIntRect) member of 'OpUpdateSharedExternalImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpDeleteImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpDeleteImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::layers::OpDeleteImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (ImageKey) member of 'OpDeleteImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (ImageKey) member of 'OpDeleteImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpDeleteBlobImage|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpDeleteBlobImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::layers::OpDeleteBlobImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (BlobImageKey) member of 'OpDeleteBlobImage'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (BlobImageKey) member of 'OpDeleteBlobImage'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddRawFont|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddRawFont>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).bytes());
    // Sentinel = 'bytes'
    (aMsg)->WriteSentinel(107741736);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    (aMsg)->WriteBytes((&((aVar).fontIndex())), 4);
    // Sentinel = 'fontIndex'
    (aMsg)->WriteSentinel(308544432);
}

auto IPDLParamTraits<mozilla::layers::OpAddRawFont>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bytes())))))) {
        aActor->FatalError("Error deserializing 'bytes' (OffsetRange) member of 'OpAddRawFont'");
        return false;
    }
    // Sentinel = 'bytes'
    if ((!((aMsg)->ReadSentinel(aIter, 107741736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bytes' (OffsetRange) member of 'OpAddRawFont'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (FontKey) member of 'OpAddRawFont'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (FontKey) member of 'OpAddRawFont'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->fontIndex())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'fontIndex'
    if ((!((aMsg)->ReadSentinel(aIter, 308544432)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddFontDescriptor|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddFontDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).bytes());
    // Sentinel = 'bytes'
    (aMsg)->WriteSentinel(107741736);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    (aMsg)->WriteBytes((&((aVar).fontIndex())), 4);
    // Sentinel = 'fontIndex'
    (aMsg)->WriteSentinel(308544432);
}

auto IPDLParamTraits<mozilla::layers::OpAddFontDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bytes())))))) {
        aActor->FatalError("Error deserializing 'bytes' (OffsetRange) member of 'OpAddFontDescriptor'");
        return false;
    }
    // Sentinel = 'bytes'
    if ((!((aMsg)->ReadSentinel(aIter, 107741736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bytes' (OffsetRange) member of 'OpAddFontDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (FontKey) member of 'OpAddFontDescriptor'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (FontKey) member of 'OpAddFontDescriptor'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->fontIndex())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'fontIndex'
    if ((!((aMsg)->ReadSentinel(aIter, 308544432)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpDeleteFont|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpDeleteFont>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::layers::OpDeleteFont>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (FontKey) member of 'OpDeleteFont'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (FontKey) member of 'OpDeleteFont'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpAddFontInstance|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpAddFontInstance>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).options());
    // Sentinel = 'options'
    (aMsg)->WriteSentinel(204735245);
    WriteIPDLParam(aMsg, aActor, (aVar).platformOptions());
    // Sentinel = 'platformOptions'
    (aMsg)->WriteSentinel(844301906);
    WriteIPDLParam(aMsg, aActor, (aVar).variations());
    // Sentinel = 'variations'
    (aMsg)->WriteSentinel(390595649);
    WriteIPDLParam(aMsg, aActor, (aVar).instanceKey());
    // Sentinel = 'instanceKey'
    (aMsg)->WriteSentinel(459736191);
    WriteIPDLParam(aMsg, aActor, (aVar).fontKey());
    // Sentinel = 'fontKey'
    (aMsg)->WriteSentinel(193266401);
    (aMsg)->WriteBytes((&((aVar).glyphSize())), 4);
    // Sentinel = 'glyphSize'
    (aMsg)->WriteSentinel(316605376);
}

auto IPDLParamTraits<mozilla::layers::OpAddFontInstance>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->options())))))) {
        aActor->FatalError("Error deserializing 'options' (MaybeFontInstanceOptions) member of 'OpAddFontInstance'");
        return false;
    }
    // Sentinel = 'options'
    if ((!((aMsg)->ReadSentinel(aIter, 204735245)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'options' (MaybeFontInstanceOptions) member of 'OpAddFontInstance'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->platformOptions())))))) {
        aActor->FatalError("Error deserializing 'platformOptions' (MaybeFontInstancePlatformOptions) member of 'OpAddFontInstance'");
        return false;
    }
    // Sentinel = 'platformOptions'
    if ((!((aMsg)->ReadSentinel(aIter, 844301906)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'platformOptions' (MaybeFontInstancePlatformOptions) member of 'OpAddFontInstance'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->variations())))))) {
        aActor->FatalError("Error deserializing 'variations' (OffsetRange) member of 'OpAddFontInstance'");
        return false;
    }
    // Sentinel = 'variations'
    if ((!((aMsg)->ReadSentinel(aIter, 390595649)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'variations' (OffsetRange) member of 'OpAddFontInstance'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->instanceKey())))))) {
        aActor->FatalError("Error deserializing 'instanceKey' (FontInstanceKey) member of 'OpAddFontInstance'");
        return false;
    }
    // Sentinel = 'instanceKey'
    if ((!((aMsg)->ReadSentinel(aIter, 459736191)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'instanceKey' (FontInstanceKey) member of 'OpAddFontInstance'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fontKey())))))) {
        aActor->FatalError("Error deserializing 'fontKey' (FontKey) member of 'OpAddFontInstance'");
        return false;
    }
    // Sentinel = 'fontKey'
    if ((!((aMsg)->ReadSentinel(aIter, 193266401)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fontKey' (FontKey) member of 'OpAddFontInstance'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->glyphSize())), 4)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'glyphSize'
    if ((!((aMsg)->ReadSentinel(aIter, 316605376)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OpDeleteFontInstance|
//
namespace mozilla {
namespace layers {
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpDeleteFontInstance>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
}

auto IPDLParamTraits<mozilla::layers::OpDeleteFontInstance>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (FontInstanceKey) member of 'OpDeleteFontInstance'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (FontInstanceKey) member of 'OpDeleteFontInstance'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OpUpdateResource|
//
namespace mozilla {
namespace layers {
auto OpUpdateResource::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TOpAddImage:
        {
            (ptr_OpAddImage())->~OpAddImage__tdef();
            break;
        }
    case TOpAddBlobImage:
        {
            (ptr_OpAddBlobImage())->~OpAddBlobImage__tdef();
            break;
        }
    case TOpUpdateImage:
        {
            (ptr_OpUpdateImage())->~OpUpdateImage__tdef();
            break;
        }
    case TOpUpdateBlobImage:
        {
            (ptr_OpUpdateBlobImage())->~OpUpdateBlobImage__tdef();
            break;
        }
    case TOpSetBlobImageVisibleArea:
        {
            (ptr_OpSetBlobImageVisibleArea())->~OpSetBlobImageVisibleArea__tdef();
            break;
        }
    case TOpDeleteImage:
        {
            (ptr_OpDeleteImage())->~OpDeleteImage__tdef();
            break;
        }
    case TOpDeleteBlobImage:
        {
            (ptr_OpDeleteBlobImage())->~OpDeleteBlobImage__tdef();
            break;
        }
    case TOpAddRawFont:
        {
            (ptr_OpAddRawFont())->~OpAddRawFont__tdef();
            break;
        }
    case TOpAddFontDescriptor:
        {
            (ptr_OpAddFontDescriptor())->~OpAddFontDescriptor__tdef();
            break;
        }
    case TOpDeleteFont:
        {
            (ptr_OpDeleteFont())->~OpDeleteFont__tdef();
            break;
        }
    case TOpAddFontInstance:
        {
            (ptr_OpAddFontInstance())->~OpAddFontInstance__tdef();
            break;
        }
    case TOpDeleteFontInstance:
        {
            (ptr_OpDeleteFontInstance())->~OpDeleteFontInstance__tdef();
            break;
        }
    case TOpAddPrivateExternalImage:
        {
            (ptr_OpAddPrivateExternalImage())->~OpAddPrivateExternalImage__tdef();
            break;
        }
    case TOpAddSharedExternalImage:
        {
            (ptr_OpAddSharedExternalImage())->~OpAddSharedExternalImage__tdef();
            break;
        }
    case TOpPushExternalImageForTexture:
        {
            (ptr_OpPushExternalImageForTexture())->~OpPushExternalImageForTexture__tdef();
            break;
        }
    case TOpUpdatePrivateExternalImage:
        {
            (ptr_OpUpdatePrivateExternalImage())->~OpUpdatePrivateExternalImage__tdef();
            break;
        }
    case TOpUpdateSharedExternalImage:
        {
            (ptr_OpUpdateSharedExternalImage())->~OpUpdateSharedExternalImage__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpAddImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddImage()) OpAddImage(aOther);
    mType = TOpAddImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpAddImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddImage()) OpAddImage(std::move(aOther));
    mType = TOpAddImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpAddBlobImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddBlobImage()) OpAddBlobImage(aOther);
    mType = TOpAddBlobImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpAddBlobImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddBlobImage()) OpAddBlobImage(std::move(aOther));
    mType = TOpAddBlobImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpUpdateImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdateImage()) OpUpdateImage(aOther);
    mType = TOpUpdateImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpUpdateImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdateImage()) OpUpdateImage(std::move(aOther));
    mType = TOpUpdateImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpUpdateBlobImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdateBlobImage()) OpUpdateBlobImage(aOther);
    mType = TOpUpdateBlobImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpUpdateBlobImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdateBlobImage()) OpUpdateBlobImage(std::move(aOther));
    mType = TOpUpdateBlobImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpSetBlobImageVisibleArea& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpSetBlobImageVisibleArea()) OpSetBlobImageVisibleArea(aOther);
    mType = TOpSetBlobImageVisibleArea;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpSetBlobImageVisibleArea&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpSetBlobImageVisibleArea()) OpSetBlobImageVisibleArea(std::move(aOther));
    mType = TOpSetBlobImageVisibleArea;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpDeleteImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeleteImage()) OpDeleteImage(aOther);
    mType = TOpDeleteImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpDeleteImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeleteImage()) OpDeleteImage(std::move(aOther));
    mType = TOpDeleteImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpDeleteBlobImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeleteBlobImage()) OpDeleteBlobImage(aOther);
    mType = TOpDeleteBlobImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpDeleteBlobImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeleteBlobImage()) OpDeleteBlobImage(std::move(aOther));
    mType = TOpDeleteBlobImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpAddRawFont& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddRawFont()) OpAddRawFont(aOther);
    mType = TOpAddRawFont;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpAddRawFont&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddRawFont()) OpAddRawFont(std::move(aOther));
    mType = TOpAddRawFont;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpAddFontDescriptor& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddFontDescriptor()) OpAddFontDescriptor(aOther);
    mType = TOpAddFontDescriptor;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpAddFontDescriptor&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddFontDescriptor()) OpAddFontDescriptor(std::move(aOther));
    mType = TOpAddFontDescriptor;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpDeleteFont& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeleteFont()) OpDeleteFont(aOther);
    mType = TOpDeleteFont;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpDeleteFont&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeleteFont()) OpDeleteFont(std::move(aOther));
    mType = TOpDeleteFont;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpAddFontInstance& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddFontInstance()) OpAddFontInstance(aOther);
    mType = TOpAddFontInstance;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpAddFontInstance&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddFontInstance()) OpAddFontInstance(std::move(aOther));
    mType = TOpAddFontInstance;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpDeleteFontInstance& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeleteFontInstance()) OpDeleteFontInstance(aOther);
    mType = TOpDeleteFontInstance;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpDeleteFontInstance&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpDeleteFontInstance()) OpDeleteFontInstance(std::move(aOther));
    mType = TOpDeleteFontInstance;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpAddPrivateExternalImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddPrivateExternalImage()) OpAddPrivateExternalImage(aOther);
    mType = TOpAddPrivateExternalImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpAddPrivateExternalImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddPrivateExternalImage()) OpAddPrivateExternalImage(std::move(aOther));
    mType = TOpAddPrivateExternalImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpAddSharedExternalImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddSharedExternalImage()) OpAddSharedExternalImage(aOther);
    mType = TOpAddSharedExternalImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpAddSharedExternalImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpAddSharedExternalImage()) OpAddSharedExternalImage(std::move(aOther));
    mType = TOpAddSharedExternalImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpPushExternalImageForTexture& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpPushExternalImageForTexture()) OpPushExternalImageForTexture(aOther);
    mType = TOpPushExternalImageForTexture;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpPushExternalImageForTexture&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpPushExternalImageForTexture()) OpPushExternalImageForTexture(std::move(aOther));
    mType = TOpPushExternalImageForTexture;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpUpdatePrivateExternalImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdatePrivateExternalImage()) OpUpdatePrivateExternalImage(aOther);
    mType = TOpUpdatePrivateExternalImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpUpdatePrivateExternalImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdatePrivateExternalImage()) OpUpdatePrivateExternalImage(std::move(aOther));
    mType = TOpUpdatePrivateExternalImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpUpdateSharedExternalImage& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdateSharedExternalImage()) OpUpdateSharedExternalImage(aOther);
    mType = TOpUpdateSharedExternalImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpUpdateSharedExternalImage&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OpUpdateSharedExternalImage()) OpUpdateSharedExternalImage(std::move(aOther));
    mType = TOpUpdateSharedExternalImage;
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(const OpUpdateResource& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TOpAddImage:
        {
            new (mozilla::KnownNotNull, ptr_OpAddImage()) OpAddImage((aOther).get_OpAddImage());
            break;
        }
    case TOpAddBlobImage:
        {
            new (mozilla::KnownNotNull, ptr_OpAddBlobImage()) OpAddBlobImage((aOther).get_OpAddBlobImage());
            break;
        }
    case TOpUpdateImage:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdateImage()) OpUpdateImage((aOther).get_OpUpdateImage());
            break;
        }
    case TOpUpdateBlobImage:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdateBlobImage()) OpUpdateBlobImage((aOther).get_OpUpdateBlobImage());
            break;
        }
    case TOpSetBlobImageVisibleArea:
        {
            new (mozilla::KnownNotNull, ptr_OpSetBlobImageVisibleArea()) OpSetBlobImageVisibleArea((aOther).get_OpSetBlobImageVisibleArea());
            break;
        }
    case TOpDeleteImage:
        {
            new (mozilla::KnownNotNull, ptr_OpDeleteImage()) OpDeleteImage((aOther).get_OpDeleteImage());
            break;
        }
    case TOpDeleteBlobImage:
        {
            new (mozilla::KnownNotNull, ptr_OpDeleteBlobImage()) OpDeleteBlobImage((aOther).get_OpDeleteBlobImage());
            break;
        }
    case TOpAddRawFont:
        {
            new (mozilla::KnownNotNull, ptr_OpAddRawFont()) OpAddRawFont((aOther).get_OpAddRawFont());
            break;
        }
    case TOpAddFontDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_OpAddFontDescriptor()) OpAddFontDescriptor((aOther).get_OpAddFontDescriptor());
            break;
        }
    case TOpDeleteFont:
        {
            new (mozilla::KnownNotNull, ptr_OpDeleteFont()) OpDeleteFont((aOther).get_OpDeleteFont());
            break;
        }
    case TOpAddFontInstance:
        {
            new (mozilla::KnownNotNull, ptr_OpAddFontInstance()) OpAddFontInstance((aOther).get_OpAddFontInstance());
            break;
        }
    case TOpDeleteFontInstance:
        {
            new (mozilla::KnownNotNull, ptr_OpDeleteFontInstance()) OpDeleteFontInstance((aOther).get_OpDeleteFontInstance());
            break;
        }
    case TOpAddPrivateExternalImage:
        {
            new (mozilla::KnownNotNull, ptr_OpAddPrivateExternalImage()) OpAddPrivateExternalImage((aOther).get_OpAddPrivateExternalImage());
            break;
        }
    case TOpAddSharedExternalImage:
        {
            new (mozilla::KnownNotNull, ptr_OpAddSharedExternalImage()) OpAddSharedExternalImage((aOther).get_OpAddSharedExternalImage());
            break;
        }
    case TOpPushExternalImageForTexture:
        {
            new (mozilla::KnownNotNull, ptr_OpPushExternalImageForTexture()) OpPushExternalImageForTexture((aOther).get_OpPushExternalImageForTexture());
            break;
        }
    case TOpUpdatePrivateExternalImage:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdatePrivateExternalImage()) OpUpdatePrivateExternalImage((aOther).get_OpUpdatePrivateExternalImage());
            break;
        }
    case TOpUpdateSharedExternalImage:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdateSharedExternalImage()) OpUpdateSharedExternalImage((aOther).get_OpUpdateSharedExternalImage());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT OpUpdateResource::OpUpdateResource(OpUpdateResource&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TOpAddImage:
        {
            new (mozilla::KnownNotNull, ptr_OpAddImage()) OpAddImage(std::move((aOther).get_OpAddImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAddBlobImage:
        {
            new (mozilla::KnownNotNull, ptr_OpAddBlobImage()) OpAddBlobImage(std::move((aOther).get_OpAddBlobImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdateImage:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdateImage()) OpUpdateImage(std::move((aOther).get_OpUpdateImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdateBlobImage:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdateBlobImage()) OpUpdateBlobImage(std::move((aOther).get_OpUpdateBlobImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpSetBlobImageVisibleArea:
        {
            new (mozilla::KnownNotNull, ptr_OpSetBlobImageVisibleArea()) OpSetBlobImageVisibleArea(std::move((aOther).get_OpSetBlobImageVisibleArea()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpDeleteImage:
        {
            new (mozilla::KnownNotNull, ptr_OpDeleteImage()) OpDeleteImage(std::move((aOther).get_OpDeleteImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpDeleteBlobImage:
        {
            new (mozilla::KnownNotNull, ptr_OpDeleteBlobImage()) OpDeleteBlobImage(std::move((aOther).get_OpDeleteBlobImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAddRawFont:
        {
            new (mozilla::KnownNotNull, ptr_OpAddRawFont()) OpAddRawFont(std::move((aOther).get_OpAddRawFont()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAddFontDescriptor:
        {
            new (mozilla::KnownNotNull, ptr_OpAddFontDescriptor()) OpAddFontDescriptor(std::move((aOther).get_OpAddFontDescriptor()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpDeleteFont:
        {
            new (mozilla::KnownNotNull, ptr_OpDeleteFont()) OpDeleteFont(std::move((aOther).get_OpDeleteFont()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAddFontInstance:
        {
            new (mozilla::KnownNotNull, ptr_OpAddFontInstance()) OpAddFontInstance(std::move((aOther).get_OpAddFontInstance()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpDeleteFontInstance:
        {
            new (mozilla::KnownNotNull, ptr_OpDeleteFontInstance()) OpDeleteFontInstance(std::move((aOther).get_OpDeleteFontInstance()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAddPrivateExternalImage:
        {
            new (mozilla::KnownNotNull, ptr_OpAddPrivateExternalImage()) OpAddPrivateExternalImage(std::move((aOther).get_OpAddPrivateExternalImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpAddSharedExternalImage:
        {
            new (mozilla::KnownNotNull, ptr_OpAddSharedExternalImage()) OpAddSharedExternalImage(std::move((aOther).get_OpAddSharedExternalImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpPushExternalImageForTexture:
        {
            new (mozilla::KnownNotNull, ptr_OpPushExternalImageForTexture()) OpPushExternalImageForTexture(std::move((aOther).get_OpPushExternalImageForTexture()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdatePrivateExternalImage:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdatePrivateExternalImage()) OpUpdatePrivateExternalImage(std::move((aOther).get_OpUpdatePrivateExternalImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdateSharedExternalImage:
        {
            new (mozilla::KnownNotNull, ptr_OpUpdateSharedExternalImage()) OpUpdateSharedExternalImage(std::move((aOther).get_OpUpdateSharedExternalImage()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

OpUpdateResource::~OpUpdateResource()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OpUpdateResource::operator=(const OpAddImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddImage)) {
        new (mozilla::KnownNotNull, ptr_OpAddImage()) OpAddImage;
    }
    (*(ptr_OpAddImage())) = aRhs;
    mType = TOpAddImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpAddImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddImage)) {
        new (mozilla::KnownNotNull, ptr_OpAddImage()) OpAddImage;
    }
    (*(ptr_OpAddImage())) = std::move(aRhs);
    mType = TOpAddImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpAddBlobImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddBlobImage)) {
        new (mozilla::KnownNotNull, ptr_OpAddBlobImage()) OpAddBlobImage;
    }
    (*(ptr_OpAddBlobImage())) = aRhs;
    mType = TOpAddBlobImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpAddBlobImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddBlobImage)) {
        new (mozilla::KnownNotNull, ptr_OpAddBlobImage()) OpAddBlobImage;
    }
    (*(ptr_OpAddBlobImage())) = std::move(aRhs);
    mType = TOpAddBlobImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpUpdateImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpUpdateImage)) {
        new (mozilla::KnownNotNull, ptr_OpUpdateImage()) OpUpdateImage;
    }
    (*(ptr_OpUpdateImage())) = aRhs;
    mType = TOpUpdateImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpUpdateImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpUpdateImage)) {
        new (mozilla::KnownNotNull, ptr_OpUpdateImage()) OpUpdateImage;
    }
    (*(ptr_OpUpdateImage())) = std::move(aRhs);
    mType = TOpUpdateImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpUpdateBlobImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpUpdateBlobImage)) {
        new (mozilla::KnownNotNull, ptr_OpUpdateBlobImage()) OpUpdateBlobImage;
    }
    (*(ptr_OpUpdateBlobImage())) = aRhs;
    mType = TOpUpdateBlobImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpUpdateBlobImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpUpdateBlobImage)) {
        new (mozilla::KnownNotNull, ptr_OpUpdateBlobImage()) OpUpdateBlobImage;
    }
    (*(ptr_OpUpdateBlobImage())) = std::move(aRhs);
    mType = TOpUpdateBlobImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpSetBlobImageVisibleArea& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpSetBlobImageVisibleArea)) {
        new (mozilla::KnownNotNull, ptr_OpSetBlobImageVisibleArea()) OpSetBlobImageVisibleArea;
    }
    (*(ptr_OpSetBlobImageVisibleArea())) = aRhs;
    mType = TOpSetBlobImageVisibleArea;
    return (*(this));
}

auto OpUpdateResource::operator=(OpSetBlobImageVisibleArea&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpSetBlobImageVisibleArea)) {
        new (mozilla::KnownNotNull, ptr_OpSetBlobImageVisibleArea()) OpSetBlobImageVisibleArea;
    }
    (*(ptr_OpSetBlobImageVisibleArea())) = std::move(aRhs);
    mType = TOpSetBlobImageVisibleArea;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpDeleteImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpDeleteImage)) {
        new (mozilla::KnownNotNull, ptr_OpDeleteImage()) OpDeleteImage;
    }
    (*(ptr_OpDeleteImage())) = aRhs;
    mType = TOpDeleteImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpDeleteImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpDeleteImage)) {
        new (mozilla::KnownNotNull, ptr_OpDeleteImage()) OpDeleteImage;
    }
    (*(ptr_OpDeleteImage())) = std::move(aRhs);
    mType = TOpDeleteImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpDeleteBlobImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpDeleteBlobImage)) {
        new (mozilla::KnownNotNull, ptr_OpDeleteBlobImage()) OpDeleteBlobImage;
    }
    (*(ptr_OpDeleteBlobImage())) = aRhs;
    mType = TOpDeleteBlobImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpDeleteBlobImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpDeleteBlobImage)) {
        new (mozilla::KnownNotNull, ptr_OpDeleteBlobImage()) OpDeleteBlobImage;
    }
    (*(ptr_OpDeleteBlobImage())) = std::move(aRhs);
    mType = TOpDeleteBlobImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpAddRawFont& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddRawFont)) {
        new (mozilla::KnownNotNull, ptr_OpAddRawFont()) OpAddRawFont;
    }
    (*(ptr_OpAddRawFont())) = aRhs;
    mType = TOpAddRawFont;
    return (*(this));
}

auto OpUpdateResource::operator=(OpAddRawFont&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddRawFont)) {
        new (mozilla::KnownNotNull, ptr_OpAddRawFont()) OpAddRawFont;
    }
    (*(ptr_OpAddRawFont())) = std::move(aRhs);
    mType = TOpAddRawFont;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpAddFontDescriptor& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddFontDescriptor)) {
        new (mozilla::KnownNotNull, ptr_OpAddFontDescriptor()) OpAddFontDescriptor;
    }
    (*(ptr_OpAddFontDescriptor())) = aRhs;
    mType = TOpAddFontDescriptor;
    return (*(this));
}

auto OpUpdateResource::operator=(OpAddFontDescriptor&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddFontDescriptor)) {
        new (mozilla::KnownNotNull, ptr_OpAddFontDescriptor()) OpAddFontDescriptor;
    }
    (*(ptr_OpAddFontDescriptor())) = std::move(aRhs);
    mType = TOpAddFontDescriptor;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpDeleteFont& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpDeleteFont)) {
        new (mozilla::KnownNotNull, ptr_OpDeleteFont()) OpDeleteFont;
    }
    (*(ptr_OpDeleteFont())) = aRhs;
    mType = TOpDeleteFont;
    return (*(this));
}

auto OpUpdateResource::operator=(OpDeleteFont&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpDeleteFont)) {
        new (mozilla::KnownNotNull, ptr_OpDeleteFont()) OpDeleteFont;
    }
    (*(ptr_OpDeleteFont())) = std::move(aRhs);
    mType = TOpDeleteFont;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpAddFontInstance& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddFontInstance)) {
        new (mozilla::KnownNotNull, ptr_OpAddFontInstance()) OpAddFontInstance;
    }
    (*(ptr_OpAddFontInstance())) = aRhs;
    mType = TOpAddFontInstance;
    return (*(this));
}

auto OpUpdateResource::operator=(OpAddFontInstance&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddFontInstance)) {
        new (mozilla::KnownNotNull, ptr_OpAddFontInstance()) OpAddFontInstance;
    }
    (*(ptr_OpAddFontInstance())) = std::move(aRhs);
    mType = TOpAddFontInstance;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpDeleteFontInstance& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpDeleteFontInstance)) {
        new (mozilla::KnownNotNull, ptr_OpDeleteFontInstance()) OpDeleteFontInstance;
    }
    (*(ptr_OpDeleteFontInstance())) = aRhs;
    mType = TOpDeleteFontInstance;
    return (*(this));
}

auto OpUpdateResource::operator=(OpDeleteFontInstance&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpDeleteFontInstance)) {
        new (mozilla::KnownNotNull, ptr_OpDeleteFontInstance()) OpDeleteFontInstance;
    }
    (*(ptr_OpDeleteFontInstance())) = std::move(aRhs);
    mType = TOpDeleteFontInstance;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpAddPrivateExternalImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddPrivateExternalImage)) {
        new (mozilla::KnownNotNull, ptr_OpAddPrivateExternalImage()) OpAddPrivateExternalImage;
    }
    (*(ptr_OpAddPrivateExternalImage())) = aRhs;
    mType = TOpAddPrivateExternalImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpAddPrivateExternalImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddPrivateExternalImage)) {
        new (mozilla::KnownNotNull, ptr_OpAddPrivateExternalImage()) OpAddPrivateExternalImage;
    }
    (*(ptr_OpAddPrivateExternalImage())) = std::move(aRhs);
    mType = TOpAddPrivateExternalImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpAddSharedExternalImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddSharedExternalImage)) {
        new (mozilla::KnownNotNull, ptr_OpAddSharedExternalImage()) OpAddSharedExternalImage;
    }
    (*(ptr_OpAddSharedExternalImage())) = aRhs;
    mType = TOpAddSharedExternalImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpAddSharedExternalImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpAddSharedExternalImage)) {
        new (mozilla::KnownNotNull, ptr_OpAddSharedExternalImage()) OpAddSharedExternalImage;
    }
    (*(ptr_OpAddSharedExternalImage())) = std::move(aRhs);
    mType = TOpAddSharedExternalImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpPushExternalImageForTexture& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpPushExternalImageForTexture)) {
        new (mozilla::KnownNotNull, ptr_OpPushExternalImageForTexture()) OpPushExternalImageForTexture;
    }
    (*(ptr_OpPushExternalImageForTexture())) = aRhs;
    mType = TOpPushExternalImageForTexture;
    return (*(this));
}

auto OpUpdateResource::operator=(OpPushExternalImageForTexture&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpPushExternalImageForTexture)) {
        new (mozilla::KnownNotNull, ptr_OpPushExternalImageForTexture()) OpPushExternalImageForTexture;
    }
    (*(ptr_OpPushExternalImageForTexture())) = std::move(aRhs);
    mType = TOpPushExternalImageForTexture;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpUpdatePrivateExternalImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpUpdatePrivateExternalImage)) {
        new (mozilla::KnownNotNull, ptr_OpUpdatePrivateExternalImage()) OpUpdatePrivateExternalImage;
    }
    (*(ptr_OpUpdatePrivateExternalImage())) = aRhs;
    mType = TOpUpdatePrivateExternalImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpUpdatePrivateExternalImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpUpdatePrivateExternalImage)) {
        new (mozilla::KnownNotNull, ptr_OpUpdatePrivateExternalImage()) OpUpdatePrivateExternalImage;
    }
    (*(ptr_OpUpdatePrivateExternalImage())) = std::move(aRhs);
    mType = TOpUpdatePrivateExternalImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpUpdateSharedExternalImage& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpUpdateSharedExternalImage)) {
        new (mozilla::KnownNotNull, ptr_OpUpdateSharedExternalImage()) OpUpdateSharedExternalImage;
    }
    (*(ptr_OpUpdateSharedExternalImage())) = aRhs;
    mType = TOpUpdateSharedExternalImage;
    return (*(this));
}

auto OpUpdateResource::operator=(OpUpdateSharedExternalImage&& aRhs) -> OpUpdateResource&
{
    if (MaybeDestroy(TOpUpdateSharedExternalImage)) {
        new (mozilla::KnownNotNull, ptr_OpUpdateSharedExternalImage()) OpUpdateSharedExternalImage;
    }
    (*(ptr_OpUpdateSharedExternalImage())) = std::move(aRhs);
    mType = TOpUpdateSharedExternalImage;
    return (*(this));
}

auto OpUpdateResource::operator=(const OpUpdateResource& aRhs) -> OpUpdateResource&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpAddImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddImage()) OpAddImage;
            }
            (*(ptr_OpAddImage())) = (aRhs).get_OpAddImage();
            break;
        }
    case TOpAddBlobImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddBlobImage()) OpAddBlobImage;
            }
            (*(ptr_OpAddBlobImage())) = (aRhs).get_OpAddBlobImage();
            break;
        }
    case TOpUpdateImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdateImage()) OpUpdateImage;
            }
            (*(ptr_OpUpdateImage())) = (aRhs).get_OpUpdateImage();
            break;
        }
    case TOpUpdateBlobImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdateBlobImage()) OpUpdateBlobImage;
            }
            (*(ptr_OpUpdateBlobImage())) = (aRhs).get_OpUpdateBlobImage();
            break;
        }
    case TOpSetBlobImageVisibleArea:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpSetBlobImageVisibleArea()) OpSetBlobImageVisibleArea;
            }
            (*(ptr_OpSetBlobImageVisibleArea())) = (aRhs).get_OpSetBlobImageVisibleArea();
            break;
        }
    case TOpDeleteImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeleteImage()) OpDeleteImage;
            }
            (*(ptr_OpDeleteImage())) = (aRhs).get_OpDeleteImage();
            break;
        }
    case TOpDeleteBlobImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeleteBlobImage()) OpDeleteBlobImage;
            }
            (*(ptr_OpDeleteBlobImage())) = (aRhs).get_OpDeleteBlobImage();
            break;
        }
    case TOpAddRawFont:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddRawFont()) OpAddRawFont;
            }
            (*(ptr_OpAddRawFont())) = (aRhs).get_OpAddRawFont();
            break;
        }
    case TOpAddFontDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddFontDescriptor()) OpAddFontDescriptor;
            }
            (*(ptr_OpAddFontDescriptor())) = (aRhs).get_OpAddFontDescriptor();
            break;
        }
    case TOpDeleteFont:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeleteFont()) OpDeleteFont;
            }
            (*(ptr_OpDeleteFont())) = (aRhs).get_OpDeleteFont();
            break;
        }
    case TOpAddFontInstance:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddFontInstance()) OpAddFontInstance;
            }
            (*(ptr_OpAddFontInstance())) = (aRhs).get_OpAddFontInstance();
            break;
        }
    case TOpDeleteFontInstance:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeleteFontInstance()) OpDeleteFontInstance;
            }
            (*(ptr_OpDeleteFontInstance())) = (aRhs).get_OpDeleteFontInstance();
            break;
        }
    case TOpAddPrivateExternalImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddPrivateExternalImage()) OpAddPrivateExternalImage;
            }
            (*(ptr_OpAddPrivateExternalImage())) = (aRhs).get_OpAddPrivateExternalImage();
            break;
        }
    case TOpAddSharedExternalImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddSharedExternalImage()) OpAddSharedExternalImage;
            }
            (*(ptr_OpAddSharedExternalImage())) = (aRhs).get_OpAddSharedExternalImage();
            break;
        }
    case TOpPushExternalImageForTexture:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpPushExternalImageForTexture()) OpPushExternalImageForTexture;
            }
            (*(ptr_OpPushExternalImageForTexture())) = (aRhs).get_OpPushExternalImageForTexture();
            break;
        }
    case TOpUpdatePrivateExternalImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdatePrivateExternalImage()) OpUpdatePrivateExternalImage;
            }
            (*(ptr_OpUpdatePrivateExternalImage())) = (aRhs).get_OpUpdatePrivateExternalImage();
            break;
        }
    case TOpUpdateSharedExternalImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdateSharedExternalImage()) OpUpdateSharedExternalImage;
            }
            (*(ptr_OpUpdateSharedExternalImage())) = (aRhs).get_OpUpdateSharedExternalImage();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OpUpdateResource::operator=(OpUpdateResource&& aRhs) -> OpUpdateResource&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TOpAddImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddImage()) OpAddImage;
            }
            (*(ptr_OpAddImage())) = std::move((aRhs).get_OpAddImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAddBlobImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddBlobImage()) OpAddBlobImage;
            }
            (*(ptr_OpAddBlobImage())) = std::move((aRhs).get_OpAddBlobImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdateImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdateImage()) OpUpdateImage;
            }
            (*(ptr_OpUpdateImage())) = std::move((aRhs).get_OpUpdateImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdateBlobImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdateBlobImage()) OpUpdateBlobImage;
            }
            (*(ptr_OpUpdateBlobImage())) = std::move((aRhs).get_OpUpdateBlobImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpSetBlobImageVisibleArea:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpSetBlobImageVisibleArea()) OpSetBlobImageVisibleArea;
            }
            (*(ptr_OpSetBlobImageVisibleArea())) = std::move((aRhs).get_OpSetBlobImageVisibleArea());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpDeleteImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeleteImage()) OpDeleteImage;
            }
            (*(ptr_OpDeleteImage())) = std::move((aRhs).get_OpDeleteImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpDeleteBlobImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeleteBlobImage()) OpDeleteBlobImage;
            }
            (*(ptr_OpDeleteBlobImage())) = std::move((aRhs).get_OpDeleteBlobImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAddRawFont:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddRawFont()) OpAddRawFont;
            }
            (*(ptr_OpAddRawFont())) = std::move((aRhs).get_OpAddRawFont());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAddFontDescriptor:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddFontDescriptor()) OpAddFontDescriptor;
            }
            (*(ptr_OpAddFontDescriptor())) = std::move((aRhs).get_OpAddFontDescriptor());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpDeleteFont:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeleteFont()) OpDeleteFont;
            }
            (*(ptr_OpDeleteFont())) = std::move((aRhs).get_OpDeleteFont());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAddFontInstance:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddFontInstance()) OpAddFontInstance;
            }
            (*(ptr_OpAddFontInstance())) = std::move((aRhs).get_OpAddFontInstance());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpDeleteFontInstance:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpDeleteFontInstance()) OpDeleteFontInstance;
            }
            (*(ptr_OpDeleteFontInstance())) = std::move((aRhs).get_OpDeleteFontInstance());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAddPrivateExternalImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddPrivateExternalImage()) OpAddPrivateExternalImage;
            }
            (*(ptr_OpAddPrivateExternalImage())) = std::move((aRhs).get_OpAddPrivateExternalImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpAddSharedExternalImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpAddSharedExternalImage()) OpAddSharedExternalImage;
            }
            (*(ptr_OpAddSharedExternalImage())) = std::move((aRhs).get_OpAddSharedExternalImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpPushExternalImageForTexture:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpPushExternalImageForTexture()) OpPushExternalImageForTexture;
            }
            (*(ptr_OpPushExternalImageForTexture())) = std::move((aRhs).get_OpPushExternalImageForTexture());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdatePrivateExternalImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdatePrivateExternalImage()) OpUpdatePrivateExternalImage;
            }
            (*(ptr_OpUpdatePrivateExternalImage())) = std::move((aRhs).get_OpUpdatePrivateExternalImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOpUpdateSharedExternalImage:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OpUpdateSharedExternalImage()) OpUpdateSharedExternalImage;
            }
            (*(ptr_OpUpdateSharedExternalImage())) = std::move((aRhs).get_OpUpdateSharedExternalImage());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::OpUpdateResource>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::layers::OpUpdateResource union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'OpUpdateResource'
    (aMsg)->WriteSentinel(895157867);

    switch (type) {
    case union__::TOpAddImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddImage());
            // Sentinel = 'TOpAddImage'
            (aMsg)->WriteSentinel(390071296);
            return;
        }
    case union__::TOpAddBlobImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddBlobImage());
            // Sentinel = 'TOpAddBlobImage'
            (aMsg)->WriteSentinel(716899711);
            return;
        }
    case union__::TOpUpdateImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUpdateImage());
            // Sentinel = 'TOpUpdateImage'
            (aMsg)->WriteSentinel(662504794);
            return;
        }
    case union__::TOpUpdateBlobImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUpdateBlobImage());
            // Sentinel = 'TOpUpdateBlobImage'
            (aMsg)->WriteSentinel(1080035033);
            return;
        }
    case union__::TOpSetBlobImageVisibleArea:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpSetBlobImageVisibleArea());
            // Sentinel = 'TOpSetBlobImageVisibleArea'
            (aMsg)->WriteSentinel(2215053801);
            return;
        }
    case union__::TOpDeleteImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpDeleteImage());
            // Sentinel = 'TOpDeleteImage'
            (aMsg)->WriteSentinel(649856330);
            return;
        }
    case union__::TOpDeleteBlobImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpDeleteBlobImage());
            // Sentinel = 'TOpDeleteBlobImage'
            (aMsg)->WriteSentinel(1063192265);
            return;
        }
    case union__::TOpAddRawFont:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddRawFont());
            // Sentinel = 'TOpAddRawFont'
            (aMsg)->WriteSentinel(546243806);
            return;
        }
    case union__::TOpAddFontDescriptor:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddFontDescriptor());
            // Sentinel = 'TOpAddFontDescriptor'
            (aMsg)->WriteSentinel(1309673427);
            return;
        }
    case union__::TOpDeleteFont:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpDeleteFont());
            // Sentinel = 'TOpDeleteFont'
            (aMsg)->WriteSentinel(563283198);
            return;
        }
    case union__::TOpAddFontInstance:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddFontInstance());
            // Sentinel = 'TOpAddFontInstance'
            (aMsg)->WriteSentinel(1060767465);
            return;
        }
    case union__::TOpDeleteFontInstance:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpDeleteFontInstance());
            // Sentinel = 'TOpDeleteFontInstance'
            (aMsg)->WriteSentinel(1471940659);
            return;
        }
    case union__::TOpAddPrivateExternalImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddPrivateExternalImage());
            // Sentinel = 'TOpAddPrivateExternalImage'
            (aMsg)->WriteSentinel(2247297566);
            return;
        }
    case union__::TOpAddSharedExternalImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpAddSharedExternalImage());
            // Sentinel = 'TOpAddSharedExternalImage'
            (aMsg)->WriteSentinel(2045970842);
            return;
        }
    case union__::TOpPushExternalImageForTexture:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpPushExternalImageForTexture());
            // Sentinel = 'TOpPushExternalImageForTexture'
            (aMsg)->WriteSentinel(3049655282);
            return;
        }
    case union__::TOpUpdatePrivateExternalImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUpdatePrivateExternalImage());
            // Sentinel = 'TOpUpdatePrivateExternalImage'
            (aMsg)->WriteSentinel(2859862904);
            return;
        }
    case union__::TOpUpdateSharedExternalImage:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OpUpdateSharedExternalImage());
            // Sentinel = 'TOpUpdateSharedExternalImage'
            (aMsg)->WriteSentinel(2635860724);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::layers::OpUpdateResource>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::layers::OpUpdateResource union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union OpUpdateResource");
        return false;
    }
    // Sentinel = 'OpUpdateResource'
    if ((!((aMsg)->ReadSentinel(aIter, 895157867)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union OpUpdateResource");
        return false;
    }

    switch (type) {
    case union__::TOpAddImage:
        {
            mozilla::layers::OpAddImage tmp = mozilla::layers::OpAddImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddImage())))))) {
                aActor->FatalError("Error deserializing variant TOpAddImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpAddImage'
            if ((!((aMsg)->ReadSentinel(aIter, 390071296)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpAddBlobImage:
        {
            mozilla::layers::OpAddBlobImage tmp = mozilla::layers::OpAddBlobImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddBlobImage())))))) {
                aActor->FatalError("Error deserializing variant TOpAddBlobImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpAddBlobImage'
            if ((!((aMsg)->ReadSentinel(aIter, 716899711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddBlobImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpUpdateImage:
        {
            mozilla::layers::OpUpdateImage tmp = mozilla::layers::OpUpdateImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUpdateImage())))))) {
                aActor->FatalError("Error deserializing variant TOpUpdateImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpUpdateImage'
            if ((!((aMsg)->ReadSentinel(aIter, 662504794)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUpdateImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpUpdateBlobImage:
        {
            mozilla::layers::OpUpdateBlobImage tmp = mozilla::layers::OpUpdateBlobImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUpdateBlobImage())))))) {
                aActor->FatalError("Error deserializing variant TOpUpdateBlobImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpUpdateBlobImage'
            if ((!((aMsg)->ReadSentinel(aIter, 1080035033)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUpdateBlobImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpSetBlobImageVisibleArea:
        {
            mozilla::layers::OpSetBlobImageVisibleArea tmp = mozilla::layers::OpSetBlobImageVisibleArea();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpSetBlobImageVisibleArea())))))) {
                aActor->FatalError("Error deserializing variant TOpSetBlobImageVisibleArea of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpSetBlobImageVisibleArea'
            if ((!((aMsg)->ReadSentinel(aIter, 2215053801)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpSetBlobImageVisibleArea of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpDeleteImage:
        {
            mozilla::layers::OpDeleteImage tmp = mozilla::layers::OpDeleteImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpDeleteImage())))))) {
                aActor->FatalError("Error deserializing variant TOpDeleteImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpDeleteImage'
            if ((!((aMsg)->ReadSentinel(aIter, 649856330)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpDeleteImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpDeleteBlobImage:
        {
            mozilla::layers::OpDeleteBlobImage tmp = mozilla::layers::OpDeleteBlobImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpDeleteBlobImage())))))) {
                aActor->FatalError("Error deserializing variant TOpDeleteBlobImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpDeleteBlobImage'
            if ((!((aMsg)->ReadSentinel(aIter, 1063192265)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpDeleteBlobImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpAddRawFont:
        {
            mozilla::layers::OpAddRawFont tmp = mozilla::layers::OpAddRawFont();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddRawFont())))))) {
                aActor->FatalError("Error deserializing variant TOpAddRawFont of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpAddRawFont'
            if ((!((aMsg)->ReadSentinel(aIter, 546243806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddRawFont of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpAddFontDescriptor:
        {
            mozilla::layers::OpAddFontDescriptor tmp = mozilla::layers::OpAddFontDescriptor();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddFontDescriptor())))))) {
                aActor->FatalError("Error deserializing variant TOpAddFontDescriptor of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpAddFontDescriptor'
            if ((!((aMsg)->ReadSentinel(aIter, 1309673427)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddFontDescriptor of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpDeleteFont:
        {
            mozilla::layers::OpDeleteFont tmp = mozilla::layers::OpDeleteFont();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpDeleteFont())))))) {
                aActor->FatalError("Error deserializing variant TOpDeleteFont of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpDeleteFont'
            if ((!((aMsg)->ReadSentinel(aIter, 563283198)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpDeleteFont of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpAddFontInstance:
        {
            mozilla::layers::OpAddFontInstance tmp = mozilla::layers::OpAddFontInstance();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddFontInstance())))))) {
                aActor->FatalError("Error deserializing variant TOpAddFontInstance of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpAddFontInstance'
            if ((!((aMsg)->ReadSentinel(aIter, 1060767465)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddFontInstance of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpDeleteFontInstance:
        {
            mozilla::layers::OpDeleteFontInstance tmp = mozilla::layers::OpDeleteFontInstance();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpDeleteFontInstance())))))) {
                aActor->FatalError("Error deserializing variant TOpDeleteFontInstance of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpDeleteFontInstance'
            if ((!((aMsg)->ReadSentinel(aIter, 1471940659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpDeleteFontInstance of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpAddPrivateExternalImage:
        {
            mozilla::layers::OpAddPrivateExternalImage tmp = mozilla::layers::OpAddPrivateExternalImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddPrivateExternalImage())))))) {
                aActor->FatalError("Error deserializing variant TOpAddPrivateExternalImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpAddPrivateExternalImage'
            if ((!((aMsg)->ReadSentinel(aIter, 2247297566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddPrivateExternalImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpAddSharedExternalImage:
        {
            mozilla::layers::OpAddSharedExternalImage tmp = mozilla::layers::OpAddSharedExternalImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpAddSharedExternalImage())))))) {
                aActor->FatalError("Error deserializing variant TOpAddSharedExternalImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpAddSharedExternalImage'
            if ((!((aMsg)->ReadSentinel(aIter, 2045970842)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpAddSharedExternalImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpPushExternalImageForTexture:
        {
            mozilla::layers::OpPushExternalImageForTexture tmp = mozilla::layers::OpPushExternalImageForTexture();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpPushExternalImageForTexture())))))) {
                aActor->FatalError("Error deserializing variant TOpPushExternalImageForTexture of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpPushExternalImageForTexture'
            if ((!((aMsg)->ReadSentinel(aIter, 3049655282)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpPushExternalImageForTexture of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpUpdatePrivateExternalImage:
        {
            mozilla::layers::OpUpdatePrivateExternalImage tmp = mozilla::layers::OpUpdatePrivateExternalImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUpdatePrivateExternalImage())))))) {
                aActor->FatalError("Error deserializing variant TOpUpdatePrivateExternalImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpUpdatePrivateExternalImage'
            if ((!((aMsg)->ReadSentinel(aIter, 2859862904)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUpdatePrivateExternalImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    case union__::TOpUpdateSharedExternalImage:
        {
            mozilla::layers::OpUpdateSharedExternalImage tmp = mozilla::layers::OpUpdateSharedExternalImage();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OpUpdateSharedExternalImage())))))) {
                aActor->FatalError("Error deserializing variant TOpUpdateSharedExternalImage of union OpUpdateResource");
                return false;
            }
            // Sentinel = 'TOpUpdateSharedExternalImage'
            if ((!((aMsg)->ReadSentinel(aIter, 2635860724)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOpUpdateSharedExternalImage of union OpUpdateResource");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
