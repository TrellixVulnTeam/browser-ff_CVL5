//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/widget/PlatformWidgetTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GtkCompositorWidgetInitData|
//
namespace mozilla {
namespace widget {
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::GtkCompositorWidgetInitData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).XWindow());
    // Sentinel = 'XWindow'
    (aMsg)->WriteSentinel(180290257);
    WriteIPDLParam(aMsg, aActor, (aVar).XDisplayString());
    // Sentinel = 'XDisplayString'
    (aMsg)->WriteSentinel(690881958);
    WriteIPDLParam(aMsg, aActor, (aVar).Shaped());
    // Sentinel = 'Shaped'
    (aMsg)->WriteSentinel(134349398);
    WriteIPDLParam(aMsg, aActor, (aVar).IsX11Display());
    // Sentinel = 'IsX11Display'
    (aMsg)->WriteSentinel(434766925);
    WriteIPDLParam(aMsg, aActor, (aVar).InitialClientSize());
    // Sentinel = 'InitialClientSize'
    (aMsg)->WriteSentinel(1006307013);
}

auto IPDLParamTraits<mozilla::widget::GtkCompositorWidgetInitData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->XWindow())))))) {
        aActor->FatalError("Error deserializing 'XWindow' (uintptr_t) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    // Sentinel = 'XWindow'
    if ((!((aMsg)->ReadSentinel(aIter, 180290257)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'XWindow' (uintptr_t) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->XDisplayString())))))) {
        aActor->FatalError("Error deserializing 'XDisplayString' (nsCString) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    // Sentinel = 'XDisplayString'
    if ((!((aMsg)->ReadSentinel(aIter, 690881958)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'XDisplayString' (nsCString) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Shaped())))))) {
        aActor->FatalError("Error deserializing 'Shaped' (bool) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    // Sentinel = 'Shaped'
    if ((!((aMsg)->ReadSentinel(aIter, 134349398)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Shaped' (bool) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->IsX11Display())))))) {
        aActor->FatalError("Error deserializing 'IsX11Display' (bool) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    // Sentinel = 'IsX11Display'
    if ((!((aMsg)->ReadSentinel(aIter, 434766925)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'IsX11Display' (bool) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->InitialClientSize())))))) {
        aActor->FatalError("Error deserializing 'InitialClientSize' (LayoutDeviceIntSize) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    // Sentinel = 'InitialClientSize'
    if ((!((aMsg)->ReadSentinel(aIter, 1006307013)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'InitialClientSize' (LayoutDeviceIntSize) member of 'GtkCompositorWidgetInitData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union CompositorWidgetInitData|
//
namespace mozilla {
namespace widget {
auto CompositorWidgetInitData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TGtkCompositorWidgetInitData:
        {
            (ptr_GtkCompositorWidgetInitData())->~GtkCompositorWidgetInitData__tdef();
            break;
        }
    case THeadlessCompositorWidgetInitData:
        {
            (ptr_HeadlessCompositorWidgetInitData())->~HeadlessCompositorWidgetInitData__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT CompositorWidgetInitData::CompositorWidgetInitData(const GtkCompositorWidgetInitData& aOther)
{
    new (mozilla::KnownNotNull, ptr_GtkCompositorWidgetInitData()) GtkCompositorWidgetInitData(aOther);
    mType = TGtkCompositorWidgetInitData;
}

MOZ_IMPLICIT CompositorWidgetInitData::CompositorWidgetInitData(GtkCompositorWidgetInitData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_GtkCompositorWidgetInitData()) GtkCompositorWidgetInitData(std::move(aOther));
    mType = TGtkCompositorWidgetInitData;
}

MOZ_IMPLICIT CompositorWidgetInitData::CompositorWidgetInitData(const HeadlessCompositorWidgetInitData& aOther)
{
    new (mozilla::KnownNotNull, ptr_HeadlessCompositorWidgetInitData()) HeadlessCompositorWidgetInitData(aOther);
    mType = THeadlessCompositorWidgetInitData;
}

MOZ_IMPLICIT CompositorWidgetInitData::CompositorWidgetInitData(HeadlessCompositorWidgetInitData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_HeadlessCompositorWidgetInitData()) HeadlessCompositorWidgetInitData(std::move(aOther));
    mType = THeadlessCompositorWidgetInitData;
}

MOZ_IMPLICIT CompositorWidgetInitData::CompositorWidgetInitData(const CompositorWidgetInitData& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TGtkCompositorWidgetInitData:
        {
            new (mozilla::KnownNotNull, ptr_GtkCompositorWidgetInitData()) GtkCompositorWidgetInitData((aOther).get_GtkCompositorWidgetInitData());
            break;
        }
    case THeadlessCompositorWidgetInitData:
        {
            new (mozilla::KnownNotNull, ptr_HeadlessCompositorWidgetInitData()) HeadlessCompositorWidgetInitData((aOther).get_HeadlessCompositorWidgetInitData());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT CompositorWidgetInitData::CompositorWidgetInitData(CompositorWidgetInitData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TGtkCompositorWidgetInitData:
        {
            new (mozilla::KnownNotNull, ptr_GtkCompositorWidgetInitData()) GtkCompositorWidgetInitData(std::move((aOther).get_GtkCompositorWidgetInitData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case THeadlessCompositorWidgetInitData:
        {
            new (mozilla::KnownNotNull, ptr_HeadlessCompositorWidgetInitData()) HeadlessCompositorWidgetInitData(std::move((aOther).get_HeadlessCompositorWidgetInitData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

CompositorWidgetInitData::~CompositorWidgetInitData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto CompositorWidgetInitData::operator=(const GtkCompositorWidgetInitData& aRhs) -> CompositorWidgetInitData&
{
    if (MaybeDestroy(TGtkCompositorWidgetInitData)) {
        new (mozilla::KnownNotNull, ptr_GtkCompositorWidgetInitData()) GtkCompositorWidgetInitData;
    }
    (*(ptr_GtkCompositorWidgetInitData())) = aRhs;
    mType = TGtkCompositorWidgetInitData;
    return (*(this));
}

auto CompositorWidgetInitData::operator=(GtkCompositorWidgetInitData&& aRhs) -> CompositorWidgetInitData&
{
    if (MaybeDestroy(TGtkCompositorWidgetInitData)) {
        new (mozilla::KnownNotNull, ptr_GtkCompositorWidgetInitData()) GtkCompositorWidgetInitData;
    }
    (*(ptr_GtkCompositorWidgetInitData())) = std::move(aRhs);
    mType = TGtkCompositorWidgetInitData;
    return (*(this));
}

auto CompositorWidgetInitData::operator=(const HeadlessCompositorWidgetInitData& aRhs) -> CompositorWidgetInitData&
{
    if (MaybeDestroy(THeadlessCompositorWidgetInitData)) {
        new (mozilla::KnownNotNull, ptr_HeadlessCompositorWidgetInitData()) HeadlessCompositorWidgetInitData;
    }
    (*(ptr_HeadlessCompositorWidgetInitData())) = aRhs;
    mType = THeadlessCompositorWidgetInitData;
    return (*(this));
}

auto CompositorWidgetInitData::operator=(HeadlessCompositorWidgetInitData&& aRhs) -> CompositorWidgetInitData&
{
    if (MaybeDestroy(THeadlessCompositorWidgetInitData)) {
        new (mozilla::KnownNotNull, ptr_HeadlessCompositorWidgetInitData()) HeadlessCompositorWidgetInitData;
    }
    (*(ptr_HeadlessCompositorWidgetInitData())) = std::move(aRhs);
    mType = THeadlessCompositorWidgetInitData;
    return (*(this));
}

auto CompositorWidgetInitData::operator=(const CompositorWidgetInitData& aRhs) -> CompositorWidgetInitData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TGtkCompositorWidgetInitData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GtkCompositorWidgetInitData()) GtkCompositorWidgetInitData;
            }
            (*(ptr_GtkCompositorWidgetInitData())) = (aRhs).get_GtkCompositorWidgetInitData();
            break;
        }
    case THeadlessCompositorWidgetInitData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HeadlessCompositorWidgetInitData()) HeadlessCompositorWidgetInitData;
            }
            (*(ptr_HeadlessCompositorWidgetInitData())) = (aRhs).get_HeadlessCompositorWidgetInitData();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto CompositorWidgetInitData::operator=(CompositorWidgetInitData&& aRhs) -> CompositorWidgetInitData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TGtkCompositorWidgetInitData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GtkCompositorWidgetInitData()) GtkCompositorWidgetInitData;
            }
            (*(ptr_GtkCompositorWidgetInitData())) = std::move((aRhs).get_GtkCompositorWidgetInitData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case THeadlessCompositorWidgetInitData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HeadlessCompositorWidgetInitData()) HeadlessCompositorWidgetInitData;
            }
            (*(ptr_HeadlessCompositorWidgetInitData())) = std::move((aRhs).get_HeadlessCompositorWidgetInitData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::widget::CompositorWidgetInitData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::widget::CompositorWidgetInitData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'CompositorWidgetInitData'
    (aMsg)->WriteSentinel(2039089570);

    switch (type) {
    case union__::TGtkCompositorWidgetInitData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_GtkCompositorWidgetInitData());
            // Sentinel = 'TGtkCompositorWidgetInitData'
            (aMsg)->WriteSentinel(2692090652);
            return;
        }
    case union__::THeadlessCompositorWidgetInitData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_HeadlessCompositorWidgetInitData());
            // Sentinel = 'THeadlessCompositorWidgetInitData'
            (aMsg)->WriteSentinel(3719564575);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::widget::CompositorWidgetInitData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::widget::CompositorWidgetInitData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union CompositorWidgetInitData");
        return false;
    }
    // Sentinel = 'CompositorWidgetInitData'
    if ((!((aMsg)->ReadSentinel(aIter, 2039089570)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union CompositorWidgetInitData");
        return false;
    }

    switch (type) {
    case union__::TGtkCompositorWidgetInitData:
        {
            mozilla::widget::GtkCompositorWidgetInitData tmp = mozilla::widget::GtkCompositorWidgetInitData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_GtkCompositorWidgetInitData())))))) {
                aActor->FatalError("Error deserializing variant TGtkCompositorWidgetInitData of union CompositorWidgetInitData");
                return false;
            }
            // Sentinel = 'TGtkCompositorWidgetInitData'
            if ((!((aMsg)->ReadSentinel(aIter, 2692090652)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TGtkCompositorWidgetInitData of union CompositorWidgetInitData");
                return false;
            }
            return true;
        }
    case union__::THeadlessCompositorWidgetInitData:
        {
            mozilla::widget::HeadlessCompositorWidgetInitData tmp = mozilla::widget::HeadlessCompositorWidgetInitData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_HeadlessCompositorWidgetInitData())))))) {
                aActor->FatalError("Error deserializing variant THeadlessCompositorWidgetInitData of union CompositorWidgetInitData");
                return false;
            }
            // Sentinel = 'THeadlessCompositorWidgetInitData'
            if ((!((aMsg)->ReadSentinel(aIter, 3719564575)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant THeadlessCompositorWidgetInitData of union CompositorWidgetInitData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
