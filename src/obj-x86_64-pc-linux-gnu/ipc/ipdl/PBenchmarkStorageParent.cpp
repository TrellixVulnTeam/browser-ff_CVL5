//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PBenchmarkStorageParent.h"
#include "mozilla/BenchmarkStorageParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PContentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PBenchmarkStorageParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBenchmarkStorageParent::PBenchmarkStorageParent() :
    mozilla::ipc::IProtocol(PBenchmarkStorageMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PBenchmarkStorageParent);
}

PBenchmarkStorageParent::~PBenchmarkStorageParent()
{
    MOZ_COUNT_DTOR(PBenchmarkStorageParent);
}

auto PBenchmarkStorageParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PBenchmarkStorageParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PBenchmarkStorageParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBenchmarkStorageParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBenchmarkStorageParent::OnMessageReceived(const Message& msg__) -> PBenchmarkStorageParent::Result
{
    switch (msg__.type()) {
    case PBenchmarkStorage::Msg_Put__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBenchmarkStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg_Put", OTHER);

            PickleIterator iter__{msg__};
            nsCString aDbName{};
            nsCString aKey{};
            int32_t aValue{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDbName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aDbName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 164233865)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKey)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aKey'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61604235)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aValue)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aValue'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135332447)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BenchmarkStorageParent*>(this))->RecvPut(std::move(aDbName), std::move(aKey), std::move(aValue))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBenchmarkStorage::Msg_Get__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBenchmarkStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg_Get", OTHER);

            PickleIterator iter__{msg__};
            nsCString aDbName{};
            nsCString aKey{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDbName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aDbName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 164233865)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKey)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aKey'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61604235)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetResolver resolver = [proxy__, seqno__, id__](const int32_t& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBenchmarkStorageParent* self__ = static_cast<PBenchmarkStorageParent*>(proxy__->Get());

                IPC::Message* reply__ = PBenchmarkStorage::Reply_Get(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aValue'
                (reply__)->WriteSentinel(135332447);

                if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBenchmarkStorageParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BenchmarkStorageParent*>(this))->RecvGet(std::move(aDbName), std::move(aKey), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBenchmarkStorage::Msg_CheckVersion__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBenchmarkStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg_CheckVersion", OTHER);

            PickleIterator iter__{msg__};
            nsCString aDbName{};
            int32_t aVersion{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDbName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aDbName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 164233865)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aVersion)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 240452424)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BenchmarkStorageParent*>(this))->RecvCheckVersion(std::move(aDbName), std::move(aVersion))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBenchmarkStorage::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBenchmarkStorageParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBenchmarkStorageParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBenchmarkStorage::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBenchmarkStorageParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBenchmarkStorage'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBenchmarkStorage'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBenchmarkStorage'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BenchmarkStorageParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBenchmarkStorageMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBenchmarkStorageParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBenchmarkStorageParent::Result
{
    return MsgNotKnown;
}

auto PBenchmarkStorageParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBenchmarkStorageParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBenchmarkStorageParent::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PBenchmarkStorageParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PBenchmarkStorageParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBenchmarkStorage", PBenchmarkStorageMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PBenchmarkStorageParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
