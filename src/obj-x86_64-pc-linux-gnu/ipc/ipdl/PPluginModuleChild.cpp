//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginModuleChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/plugins/PluginMessageUtils.h"
#include "mozilla/plugins/PluginModuleChild.h"
#include "nsID.h"

#include "mozilla/plugins/PPluginInstanceChild.h"
#include "mozilla/plugins/PPluginScriptableObjectChild.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/PProfilerChild.h"
#include "mozilla/plugins/PFunctionBrokerChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {


auto PPluginModuleChild::RecvPPluginInstanceConstructor(
        PPluginInstanceChild* actor,
        const nsCString& aMimeType,
        nsTArray<nsCString>&& aNames,
        nsTArray<nsCString>&& aValues) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPluginModuleChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PPluginModuleChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PPluginModuleChild::EnteredCxxStack() -> void
{
}

auto PPluginModuleChild::ExitedCxxStack() -> void
{
}

auto PPluginModuleChild::EnteredCall() -> void
{
}

auto PPluginModuleChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PPluginModuleChild::PPluginModuleChild() :
    mozilla::ipc::IToplevelProtocol("PPluginModuleChild", PPluginModuleMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PPluginModuleChild);
}

PPluginModuleChild::~PPluginModuleChild()
{
    MOZ_COUNT_DTOR(PPluginModuleChild);
}

auto PPluginModuleChild::ManagedPPluginInstanceChild(nsTArray<PPluginInstanceChild*>& aArr) const -> void
{
    mManagedPPluginInstanceChild.ToArray(aArr);
}

auto PPluginModuleChild::ManagedPPluginInstanceChild() const -> const ManagedContainer<PPluginInstanceChild>&
{
    return mManagedPPluginInstanceChild;
}

auto PPluginModuleChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPPluginInstanceChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPPluginInstanceChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PPluginModuleChild::OpenPPluginInstanceEndpoint(PPluginInstanceChild* aActor) -> ManagedEndpoint<PPluginInstanceParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginInstanceChild actor");
        return ManagedEndpoint<PPluginInstanceParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginInstanceChild.PutEntry(aActor);

    return ManagedEndpoint<PPluginInstanceParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginModuleChild::BindPPluginInstanceEndpoint(
        ManagedEndpoint<PPluginInstanceChild> aEndpoint,
        PPluginInstanceChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginInstanceChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginInstanceChild.PutEntry(aActor);

    return true;
}

auto PPluginModuleChild::SendProcessNativeEventsInInterruptCall() -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_ProcessNativeEventsInInterruptCall(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_ProcessNativeEventsInInterruptCall", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendBackUpXResources(const FileDescriptor& aXSocketFd) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_BackUpXResources(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aXSocketFd);
    // Sentinel = 'aXSocketFd'
    (msg__)->WriteSentinel(349569997);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_BackUpXResources", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::CallProcessSomeEvents() -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_ProcessSomeEvents(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_ProcessSomeEvents", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_ProcessSomeEvents", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginModuleChild::SendPluginShowWindow(
        const uint32_t& aWindowId,
        const bool& aModal,
        const int32_t& aX,
        const int32_t& aY,
        const double& aWidth,
        const double& aHeight) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_PluginShowWindow(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aWindowId);
    // Sentinel = 'aWindowId'
    (msg__)->WriteSentinel(296223623);
    WriteIPDLParam(msg__, this, aModal);
    // Sentinel = 'aModal'
    (msg__)->WriteSentinel(132317775);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);
    WriteIPDLParam(msg__, this, aWidth);
    // Sentinel = 'aWidth'
    (msg__)->WriteSentinel(136249954);
    WriteIPDLParam(msg__, this, aHeight);
    // Sentinel = 'aHeight'
    (msg__)->WriteSentinel(175375035);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_PluginShowWindow", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendPluginHideWindow(const uint32_t& aWindowId) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_PluginHideWindow(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aWindowId);
    // Sentinel = 'aWindowId'
    (msg__)->WriteSentinel(296223623);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_PluginHideWindow", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendSetCursor(const NSCursorInfo& cursorInfo) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_SetCursor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, cursorInfo);
    // Sentinel = 'cursorInfo'
    (msg__)->WriteSentinel(389481515);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_SetCursor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendShowCursor(const bool& show) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_ShowCursor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, show);
    // Sentinel = 'show'
    (msg__)->WriteSentinel(73204162);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_ShowCursor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendPushCursor(const NSCursorInfo& cursorInfo) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_PushCursor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, cursorInfo);
    // Sentinel = 'cursorInfo'
    (msg__)->WriteSentinel(389481515);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_PushCursor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendPopCursor() -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_PopCursor(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_PopCursor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendNPN_SetException(const nsCString& message) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NPN_SetException(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NPN_SetException", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_NPN_SetException", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginModuleChild::SendNPN_ReloadPlugins(const bool& aReloadPages) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NPN_ReloadPlugins(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aReloadPages);
    // Sentinel = 'aReloadPages'
    (msg__)->WriteSentinel(500761769);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NPN_ReloadPlugins", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendNotifyContentModuleDestroyed() -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NotifyContentModuleDestroyed(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NotifyContentModuleDestroyed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendReturnClearSiteData(
        const NPError& aRv,
        const uint64_t& aCallbackId) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_ReturnClearSiteData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aRv);
    // Sentinel = 'aRv'
    (msg__)->WriteSentinel(37749034);
    WriteIPDLParam(msg__, this, aCallbackId);
    // Sentinel = 'aCallbackId'
    (msg__)->WriteSentinel(411370524);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_ReturnClearSiteData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::SendReturnSitesWithData(
        const nsTArray<nsCString>& aSites,
        const uint64_t& aCallbackId) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_ReturnSitesWithData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aSites);
    // Sentinel = 'aSites'
    (msg__)->WriteSentinel(136839786);
    WriteIPDLParam(msg__, this, aCallbackId);
    // Sentinel = 'aCallbackId'
    (msg__)->WriteSentinel(411370524);




    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_ReturnSitesWithData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginModuleChild::CallNPN_SetValue_NPPVpluginRequiresAudioDeviceChanges(
        const bool& shouldRegister,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginModule::Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, shouldRegister);
    // Sentinel = 'shouldRegister'
    (msg__)->WriteSentinel(734332373);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginModule::Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginModule::Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginModuleChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginModuleChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPluginInstanceMsgStart:
{
            PPluginInstanceChild* actor = static_cast<PPluginInstanceChild*>(aListener);
            auto& container = mManagedPPluginInstanceChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PPluginModuleChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPluginInstanceMsgStart:
        static_cast<PluginModuleChild*>(this)->DeallocPPluginInstanceChild(static_cast<PPluginInstanceChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PPluginModuleChild::OnMessageReceived(const Message& msg__) -> PPluginModuleChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PPluginModule::Msg_ProcessNativeEventsInInterruptCall__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_ProcessNativeEventsInInterruptCall", OTHER);

            if ((!((static_cast<PluginModuleChild*>(this))->RecvProcessNativeEventsInInterruptCall()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_InitProfiler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_InitProfiler", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::PProfilerChild> aEndPoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndPoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::PProfilerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'aEndPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 281740163)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::PProfilerChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvInitProfiler(std::move(aEndPoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_DisableFlashProtectedMode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_DisableFlashProtectedMode", OTHER);

            if ((!((static_cast<PluginModuleChild*>(this))->RecvDisableFlashProtectedMode()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_PPluginInstanceConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_PPluginInstanceConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsCString aMimeType{};
            nsTArray<nsCString> aNames{};
            nsTArray<nsCString> aValues{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMimeType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aMimeType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 289407884)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNames)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aNames'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 131727958)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aValues)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aValues'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 182649554)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPluginInstanceChild* actor = (static_cast<PluginModuleChild*>(this))->AllocPPluginInstanceChild(aMimeType, aNames, aValues);
            if (!actor) {
                NS_WARNING("Cannot bind null PPluginInstanceChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPluginInstanceChild.PutEntry(actor);

            if ((!((static_cast<PluginModuleChild*>(this))->RecvPPluginInstanceConstructor(std::move(actor), std::move(aMimeType), std::move(aNames), std::move(aValues))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_NPP_ClearSiteData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NPP_ClearSiteData", OTHER);

            PickleIterator iter__{msg__};
            nsCString site{};
            uint64_t flags{};
            uint64_t maxAge{};
            uint64_t aCallbackId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(site)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'site'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72876470)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flags)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102171150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(maxAge)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'maxAge'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 139395668)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallbackId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCallbackId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 411370524)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvNPP_ClearSiteData(std::move(site), std::move(flags), std::move(maxAge), std::move(aCallbackId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_NPP_GetSitesWithData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NPP_GetSitesWithData", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aCallbackId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallbackId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCallbackId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 411370524)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvNPP_GetSitesWithData(std::move(aCallbackId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_SetAudioSessionData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_SetAudioSessionData", OTHER);

            PickleIterator iter__{msg__};
            nsID aID{};
            nsString aDisplayName{};
            nsString aIconPath{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDisplayName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aDisplayName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 509215929)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIconPath)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aIconPath'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 283247480)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvSetAudioSessionData(std::move(aID), std::move(aDisplayName), std::move(aIconPath))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_SetParentHangTimeout__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_SetParentHangTimeout", OTHER);

            PickleIterator iter__{msg__};
            uint32_t seconds{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(seconds)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'seconds'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 196739824)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvSetParentHangTimeout(std::move(seconds))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_SettingChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_SettingChanged", OTHER);

            PickleIterator iter__{msg__};
            PluginSettings settings{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(settings)))))) {
                FatalError("Error deserializing 'PluginSettings'");
                return MsgValueError;
            }
            // Sentinel = 'settings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 260965234)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginSettings'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvSettingChanged(std::move(settings))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_NPP_SetValue_NPNVaudioDeviceChangeDetails__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NPP_SetValue_NPNVaudioDeviceChangeDetails", OTHER);

            PickleIterator iter__{msg__};
            NPAudioDeviceChangeDetailsIPC changeDetails{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(changeDetails)))))) {
                FatalError("Error deserializing 'NPAudioDeviceChangeDetailsIPC'");
                return MsgValueError;
            }
            // Sentinel = 'changeDetails'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 599393581)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPAudioDeviceChangeDetailsIPC'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvNPP_SetValue_NPNVaudioDeviceChangeDetails(std::move(changeDetails))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_NPP_SetValue_NPNVaudioDeviceStateChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NPP_SetValue_NPNVaudioDeviceStateChanged", OTHER);

            PickleIterator iter__{msg__};
            NPAudioDeviceStateChangedIPC deviceState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(deviceState)))))) {
                FatalError("Error deserializing 'NPAudioDeviceStateChangedIPC'");
                return MsgValueError;
            }
            // Sentinel = 'deviceState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 447284338)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPAudioDeviceStateChangedIPC'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvNPP_SetValue_NPNVaudioDeviceStateChanged(std::move(deviceState))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_InitPluginModuleChild__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_InitPluginModuleChild", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::plugins::PPluginModuleChild> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::plugins::PPluginModuleChild>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::plugins::PPluginModuleChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvInitPluginModuleChild(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginModule::Msg_InitPluginFunctionBroker__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_InitPluginFunctionBroker", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::plugins::PFunctionBrokerChild> endpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(endpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::plugins::PFunctionBrokerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'endpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251724642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::plugins::PFunctionBrokerChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginModuleChild*>(this))->RecvInitPluginFunctionBroker(std::move(endpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PPluginModuleChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginModuleChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PPluginModuleChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginModuleChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnCallReceived(msg__, reply__);
    }

    switch (msg__.type()) {
    case PPluginModule::Msg_ModuleSupportsAsyncRender__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_ModuleSupportsAsyncRender", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            bool result{};
            if ((!((static_cast<PluginModuleChild*>(this))->AnswerModuleSupportsAsyncRender((&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_ModuleSupportsAsyncRender(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginModule::Msg_NP_GetEntryPoints__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NP_GetEntryPoints", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            NPError rv{};
            if ((!((static_cast<PluginModuleChild*>(this))->AnswerNP_GetEntryPoints((&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_NP_GetEntryPoints(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);

            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginModule::Msg_NP_Initialize__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NP_Initialize", OTHER);

            PickleIterator iter__{msg__};
            PluginSettings settings{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(settings)))))) {
                FatalError("Error deserializing 'PluginSettings'");
                return MsgValueError;
            }
            // Sentinel = 'settings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 260965234)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginSettings'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            NPError rv{};
            if ((!((static_cast<PluginModuleChild*>(this))->AnswerNP_Initialize(std::move(settings), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_NP_Initialize(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);

            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginModule::Msg_SyncNPP_New__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_SyncNPP_New", OTHER);

            PickleIterator iter__{msg__};
            PPluginInstanceChild* aActor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActor)))))) {
                FatalError("Error deserializing 'PPluginInstance'");
                return MsgValueError;
            }
            if ((!((*((&(aActor))))))) {
                FatalError("Error deserializing 'PPluginInstance'");
                return MsgValueError;
            }
            // Sentinel = 'aActor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 130613851)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PPluginInstance'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            NPError rv{};
            if ((!((static_cast<PluginModuleChild*>(this))->AnswerSyncNPP_New(std::move(aActor), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_SyncNPP_New(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);

            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginModule::Msg_NP_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_NP_Shutdown", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            NPError rv{};
            if ((!((static_cast<PluginModuleChild*>(this))->AnswerNP_Shutdown((&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_NP_Shutdown(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);

            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginModule::Msg_OptionalFunctionsSupported__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_OptionalFunctionsSupported", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            bool aURLRedirectNotify{};
            bool aClearSiteData{};
            bool aGetSitesWithData{};
            if ((!((static_cast<PluginModuleChild*>(this))->AnswerOptionalFunctionsSupported((&(aURLRedirectNotify)), (&(aClearSiteData)), (&(aGetSitesWithData)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_OptionalFunctionsSupported(id__);

            WriteIPDLParam(reply__, this, aURLRedirectNotify);
            // Sentinel = 'aURLRedirectNotify'
            (reply__)->WriteSentinel(1065420544);
            WriteIPDLParam(reply__, this, aClearSiteData);
            // Sentinel = 'aClearSiteData'
            (reply__)->WriteSentinel(664405336);
            WriteIPDLParam(reply__, this, aGetSitesWithData);
            // Sentinel = 'aGetSitesWithData'
            (reply__)->WriteSentinel(992216736);

            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginModule::Msg_InitCrashReporter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginModule::Msg_InitCrashReporter", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            NativeThreadId tid{};
            if ((!((static_cast<PluginModuleChild*>(this))->AnswerInitCrashReporter((&(tid)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginModule::Reply_InitCrashReporter(id__);

            WriteIPDLParam(reply__, this, tid);
            // Sentinel = 'tid'
            (reply__)->WriteSentinel(43319618);

            if (mozilla::ipc::LoggingEnabledFor("PPluginModuleChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginModuleChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginModuleChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PPluginModuleChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PPluginModuleChild::ProcessNativeEventsInInterruptCall() -> void
{
#ifdef OS_WIN
    GetIPCChannel()->ProcessNativeEventsInInterruptCall();
#else
    FatalError("This method is Windows-only");
#endif
}

auto PPluginModuleChild::ClearSubtree() -> void
{
    for (auto it = mManagedPPluginInstanceChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginInstanceChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginInstanceChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginInstanceChild.Clear();

}



} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PPluginModuleChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::plugins::PPluginModuleChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPluginModule", PPluginModuleMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::plugins::PPluginModuleChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
