//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/WebrtcProxyConfig.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebrtcProxyConfig|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::WebrtcProxyConfig>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).tabId());
    // Sentinel = 'tabId'
    (aMsg)->WriteSentinel(99156453);
    WriteIPDLParam(aMsg, aActor, (aVar).alpn());
    // Sentinel = 'alpn'
    (aMsg)->WriteSentinel(68813228);
    WriteIPDLParam(aMsg, aActor, (aVar).loadInfoArgs());
    // Sentinel = 'loadInfoArgs'
    (aMsg)->WriteSentinel(514000058);
    WriteIPDLParam(aMsg, aActor, (aVar).forceProxy());
    // Sentinel = 'forceProxy'
    (aMsg)->WriteSentinel(379454514);
}

auto IPDLParamTraits<mozilla::net::WebrtcProxyConfig>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tabId())))))) {
        aActor->FatalError("Error deserializing 'tabId' (TabId) member of 'WebrtcProxyConfig'");
        return false;
    }
    // Sentinel = 'tabId'
    if ((!((aMsg)->ReadSentinel(aIter, 99156453)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tabId' (TabId) member of 'WebrtcProxyConfig'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->alpn())))))) {
        aActor->FatalError("Error deserializing 'alpn' (nsCString) member of 'WebrtcProxyConfig'");
        return false;
    }
    // Sentinel = 'alpn'
    if ((!((aMsg)->ReadSentinel(aIter, 68813228)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'alpn' (nsCString) member of 'WebrtcProxyConfig'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadInfoArgs())))))) {
        aActor->FatalError("Error deserializing 'loadInfoArgs' (LoadInfoArgs) member of 'WebrtcProxyConfig'");
        return false;
    }
    // Sentinel = 'loadInfoArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 514000058)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadInfoArgs' (LoadInfoArgs) member of 'WebrtcProxyConfig'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->forceProxy())))))) {
        aActor->FatalError("Error deserializing 'forceProxy' (bool) member of 'WebrtcProxyConfig'");
        return false;
    }
    // Sentinel = 'forceProxy'
    if ((!((aMsg)->ReadSentinel(aIter, 379454514)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'forceProxy' (bool) member of 'WebrtcProxyConfig'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
