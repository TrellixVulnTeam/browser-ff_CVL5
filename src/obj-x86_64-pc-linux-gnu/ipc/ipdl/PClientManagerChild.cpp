//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PClientManagerChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PClientHandleChild.h"
#include "mozilla/dom/PClientManagerOpChild.h"
#include "mozilla/dom/PClientNavigateOpChild.h"
#include "mozilla/dom/PClientSourceChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PClientManagerChild::RecvPClientNavigateOpConstructor(
        PClientNavigateOpChild* actor,
        const ClientNavigateOpConstructorArgs& aArgs) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PClientManagerChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PClientManagerChild::PClientManagerChild() :
    mozilla::ipc::IProtocol(PClientManagerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PClientManagerChild);
}

PClientManagerChild::~PClientManagerChild()
{
    MOZ_COUNT_DTOR(PClientManagerChild);
}

auto PClientManagerChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PClientManagerChild::ManagedPClientHandleChild(nsTArray<PClientHandleChild*>& aArr) const -> void
{
    mManagedPClientHandleChild.ToArray(aArr);
}

auto PClientManagerChild::ManagedPClientHandleChild() const -> const ManagedContainer<PClientHandleChild>&
{
    return mManagedPClientHandleChild;
}

auto PClientManagerChild::ManagedPClientManagerOpChild(nsTArray<PClientManagerOpChild*>& aArr) const -> void
{
    mManagedPClientManagerOpChild.ToArray(aArr);
}

auto PClientManagerChild::ManagedPClientManagerOpChild() const -> const ManagedContainer<PClientManagerOpChild>&
{
    return mManagedPClientManagerOpChild;
}

auto PClientManagerChild::ManagedPClientNavigateOpChild(nsTArray<PClientNavigateOpChild*>& aArr) const -> void
{
    mManagedPClientNavigateOpChild.ToArray(aArr);
}

auto PClientManagerChild::ManagedPClientNavigateOpChild() const -> const ManagedContainer<PClientNavigateOpChild>&
{
    return mManagedPClientNavigateOpChild;
}

auto PClientManagerChild::ManagedPClientSourceChild(nsTArray<PClientSourceChild*>& aArr) const -> void
{
    mManagedPClientSourceChild.ToArray(aArr);
}

auto PClientManagerChild::ManagedPClientSourceChild() const -> const ManagedContainer<PClientSourceChild>&
{
    return mManagedPClientSourceChild;
}

auto PClientManagerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPClientHandleChild.Count();
    total += mManagedPClientManagerOpChild.Count();
    total += mManagedPClientNavigateOpChild.Count();
    total += mManagedPClientSourceChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPClientHandleChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPClientManagerOpChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPClientNavigateOpChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPClientSourceChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PClientManagerChild::OpenPClientHandleEndpoint(PClientHandleChild* aActor) -> ManagedEndpoint<PClientHandleParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientHandleChild actor");
        return ManagedEndpoint<PClientHandleParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientHandleChild.PutEntry(aActor);

    return ManagedEndpoint<PClientHandleParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientManagerChild::BindPClientHandleEndpoint(
        ManagedEndpoint<PClientHandleChild> aEndpoint,
        PClientHandleChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientHandleChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientHandleChild.PutEntry(aActor);

    return true;
}

auto PClientManagerChild::OpenPClientManagerOpEndpoint(PClientManagerOpChild* aActor) -> ManagedEndpoint<PClientManagerOpParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientManagerOpChild actor");
        return ManagedEndpoint<PClientManagerOpParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientManagerOpChild.PutEntry(aActor);

    return ManagedEndpoint<PClientManagerOpParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientManagerChild::BindPClientManagerOpEndpoint(
        ManagedEndpoint<PClientManagerOpChild> aEndpoint,
        PClientManagerOpChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientManagerOpChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientManagerOpChild.PutEntry(aActor);

    return true;
}

auto PClientManagerChild::OpenPClientNavigateOpEndpoint(PClientNavigateOpChild* aActor) -> ManagedEndpoint<PClientNavigateOpParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientNavigateOpChild actor");
        return ManagedEndpoint<PClientNavigateOpParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientNavigateOpChild.PutEntry(aActor);

    return ManagedEndpoint<PClientNavigateOpParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientManagerChild::BindPClientNavigateOpEndpoint(
        ManagedEndpoint<PClientNavigateOpChild> aEndpoint,
        PClientNavigateOpChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientNavigateOpChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientNavigateOpChild.PutEntry(aActor);

    return true;
}

auto PClientManagerChild::OpenPClientSourceEndpoint(PClientSourceChild* aActor) -> ManagedEndpoint<PClientSourceParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientSourceChild actor");
        return ManagedEndpoint<PClientSourceParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientSourceChild.PutEntry(aActor);

    return ManagedEndpoint<PClientSourceParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientManagerChild::BindPClientSourceEndpoint(
        ManagedEndpoint<PClientSourceChild> aEndpoint,
        PClientSourceChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientSourceChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientSourceChild.PutEntry(aActor);

    return true;
}

auto PClientManagerChild::SendTeardown() -> bool
{
    IPC::Message* msg__ = PClientManager::Msg_Teardown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PClientManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientManager::Msg_Teardown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PClientManagerChild::SendPClientHandleConstructor(const IPCClientInfo& aClientInfo) -> PClientHandleChild*
{
    PClientHandleChild* actor = (this)->AllocPClientHandleChild(aClientInfo);
    return SendPClientHandleConstructor(actor, aClientInfo);
}

auto PClientManagerChild::SendPClientHandleConstructor(
        PClientHandleChild* actor,
        const IPCClientInfo& aClientInfo) -> PClientHandleChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PClientHandleChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPClientHandleChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PClientManager::Msg_PClientHandleConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aClientInfo);
    // Sentinel = 'aClientInfo'
    (msg__)->WriteSentinel(422315085);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PClientManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientManager::Msg_PClientHandleConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PClientHandleChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PClientHandleMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PClientManagerChild::SendPClientManagerOpConstructor(const ClientOpConstructorArgs& aArgs) -> PClientManagerOpChild*
{
    PClientManagerOpChild* actor = (this)->AllocPClientManagerOpChild(aArgs);
    return SendPClientManagerOpConstructor(actor, aArgs);
}

auto PClientManagerChild::SendPClientManagerOpConstructor(
        PClientManagerOpChild* actor,
        const ClientOpConstructorArgs& aArgs) -> PClientManagerOpChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PClientManagerOpChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPClientManagerOpChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PClientManager::Msg_PClientManagerOpConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PClientManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientManager::Msg_PClientManagerOpConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PClientManagerOpChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PClientManagerOpMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PClientManagerChild::SendPClientSourceConstructor(const ClientSourceConstructorArgs& aArgs) -> PClientSourceChild*
{
    PClientSourceChild* actor = (this)->AllocPClientSourceChild(aArgs);
    return SendPClientSourceConstructor(actor, aArgs);
}

auto PClientManagerChild::SendPClientSourceConstructor(
        PClientSourceChild* actor,
        const ClientSourceConstructorArgs& aArgs) -> PClientSourceChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PClientSourceChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPClientSourceChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PClientManager::Msg_PClientSourceConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PClientManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientManager::Msg_PClientSourceConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PClientSourceChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PClientSourceMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PClientManagerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientHandleMsgStart:
{
            PClientHandleChild* actor = static_cast<PClientHandleChild*>(aListener);
            auto& container = mManagedPClientHandleChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PClientManagerOpMsgStart:
{
            PClientManagerOpChild* actor = static_cast<PClientManagerOpChild*>(aListener);
            auto& container = mManagedPClientManagerOpChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PClientNavigateOpMsgStart:
{
            PClientNavigateOpChild* actor = static_cast<PClientNavigateOpChild*>(aListener);
            auto& container = mManagedPClientNavigateOpChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PClientSourceMsgStart:
{
            PClientSourceChild* actor = static_cast<PClientSourceChild*>(aListener);
            auto& container = mManagedPClientSourceChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PClientManagerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientHandleMsgStart:
        this->DeallocPClientHandleChild(static_cast<PClientHandleChild*>(aListener));
        return;
    case PClientManagerOpMsgStart:
        this->DeallocPClientManagerOpChild(static_cast<PClientManagerOpChild*>(aListener));
        return;
    case PClientNavigateOpMsgStart:
        this->DeallocPClientNavigateOpChild(static_cast<PClientNavigateOpChild*>(aListener));
        return;
    case PClientSourceMsgStart:
        this->DeallocPClientSourceChild(static_cast<PClientSourceChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PClientManagerChild::OnMessageReceived(const Message& msg__) -> PClientManagerChild::Result
{
    switch (msg__.type()) {
    case PClientManager::Reply_PClientHandleConstructor__ID:
        {
            return MsgProcessed;
        }
    case PClientManager::Reply_PClientManagerOpConstructor__ID:
        {
            return MsgProcessed;
        }
    case PClientManager::Reply_PClientSourceConstructor__ID:
        {
            return MsgProcessed;
        }
    case PClientManager::Msg_PClientNavigateOpConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientManager::Msg_PClientNavigateOpConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            ClientNavigateOpConstructorArgs aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'ClientNavigateOpConstructorArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClientNavigateOpConstructorArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PClientNavigateOpChild* actor = (this)->AllocPClientNavigateOpChild(aArgs);
            if (!actor) {
                NS_WARNING("Cannot bind null PClientNavigateOpChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPClientNavigateOpChild.PutEntry(actor);

            if ((!((this)->RecvPClientNavigateOpConstructor(std::move(actor), std::move(aArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientManager::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientManager::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PClientManagerChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PClientManager'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PClientManager'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PClientManager'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PClientManagerMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PClientManagerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PClientManagerChild::Result
{
    return MsgNotKnown;
}

auto PClientManagerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PClientManagerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PClientManagerChild::ClearSubtree() -> void
{
    for (auto it = mManagedPClientHandleChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientHandleChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientHandleChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientHandleChild.Clear();

    for (auto it = mManagedPClientManagerOpChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientManagerOpChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientManagerOpChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientManagerOpChild.Clear();

    for (auto it = mManagedPClientNavigateOpChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientNavigateOpChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientNavigateOpChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientNavigateOpChild.Clear();

    for (auto it = mManagedPClientSourceChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientSourceChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientSourceChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientSourceChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PClientManagerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PClientManagerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PClientManager", PClientManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PClientManagerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
