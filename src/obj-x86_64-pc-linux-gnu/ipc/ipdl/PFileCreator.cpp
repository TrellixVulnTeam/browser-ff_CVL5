//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/dom/PFileCreator.h"
#include "mozilla/dom/PFileCreatorParent.h"
#include "mozilla/dom/PFileCreatorChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PFileCreator {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PFileCreatorParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PFileCreatorChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PFileCreator
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileCreationSuccessResult|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileCreationSuccessResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).blob());
    // Sentinel = 'blob'
    (aMsg)->WriteSentinel(68157856);
}

auto IPDLParamTraits<mozilla::dom::FileCreationSuccessResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blob())))))) {
        aActor->FatalError("Error deserializing 'blob' (IPCBlob) member of 'FileCreationSuccessResult'");
        return false;
    }
    // Sentinel = 'blob'
    if ((!((aMsg)->ReadSentinel(aIter, 68157856)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blob' (IPCBlob) member of 'FileCreationSuccessResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileCreationErrorResult|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileCreationErrorResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).errorCode());
    // Sentinel = 'errorCode'
    (aMsg)->WriteSentinel(312345510);
}

auto IPDLParamTraits<mozilla::dom::FileCreationErrorResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->errorCode())))))) {
        aActor->FatalError("Error deserializing 'errorCode' (nsresult) member of 'FileCreationErrorResult'");
        return false;
    }
    // Sentinel = 'errorCode'
    if ((!((aMsg)->ReadSentinel(aIter, 312345510)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'errorCode' (nsresult) member of 'FileCreationErrorResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union FileCreationResult|
//
namespace mozilla {
namespace dom {
auto FileCreationResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TFileCreationSuccessResult:
        {
            (ptr_FileCreationSuccessResult())->~FileCreationSuccessResult__tdef();
            break;
        }
    case TFileCreationErrorResult:
        {
            (ptr_FileCreationErrorResult())->~FileCreationErrorResult__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT FileCreationResult::FileCreationResult(const FileCreationSuccessResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileCreationSuccessResult()) FileCreationSuccessResult(aOther);
    mType = TFileCreationSuccessResult;
}

MOZ_IMPLICIT FileCreationResult::FileCreationResult(FileCreationSuccessResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileCreationSuccessResult()) FileCreationSuccessResult(std::move(aOther));
    mType = TFileCreationSuccessResult;
}

MOZ_IMPLICIT FileCreationResult::FileCreationResult(const FileCreationErrorResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileCreationErrorResult()) FileCreationErrorResult(aOther);
    mType = TFileCreationErrorResult;
}

MOZ_IMPLICIT FileCreationResult::FileCreationResult(FileCreationErrorResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileCreationErrorResult()) FileCreationErrorResult(std::move(aOther));
    mType = TFileCreationErrorResult;
}

MOZ_IMPLICIT FileCreationResult::FileCreationResult(const FileCreationResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TFileCreationSuccessResult:
        {
            new (mozilla::KnownNotNull, ptr_FileCreationSuccessResult()) FileCreationSuccessResult((aOther).get_FileCreationSuccessResult());
            break;
        }
    case TFileCreationErrorResult:
        {
            new (mozilla::KnownNotNull, ptr_FileCreationErrorResult()) FileCreationErrorResult((aOther).get_FileCreationErrorResult());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT FileCreationResult::FileCreationResult(FileCreationResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TFileCreationSuccessResult:
        {
            new (mozilla::KnownNotNull, ptr_FileCreationSuccessResult()) FileCreationSuccessResult(std::move((aOther).get_FileCreationSuccessResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileCreationErrorResult:
        {
            new (mozilla::KnownNotNull, ptr_FileCreationErrorResult()) FileCreationErrorResult(std::move((aOther).get_FileCreationErrorResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

FileCreationResult::~FileCreationResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto FileCreationResult::operator=(const FileCreationSuccessResult& aRhs) -> FileCreationResult&
{
    if (MaybeDestroy(TFileCreationSuccessResult)) {
        new (mozilla::KnownNotNull, ptr_FileCreationSuccessResult()) FileCreationSuccessResult;
    }
    (*(ptr_FileCreationSuccessResult())) = aRhs;
    mType = TFileCreationSuccessResult;
    return (*(this));
}

auto FileCreationResult::operator=(FileCreationSuccessResult&& aRhs) -> FileCreationResult&
{
    if (MaybeDestroy(TFileCreationSuccessResult)) {
        new (mozilla::KnownNotNull, ptr_FileCreationSuccessResult()) FileCreationSuccessResult;
    }
    (*(ptr_FileCreationSuccessResult())) = std::move(aRhs);
    mType = TFileCreationSuccessResult;
    return (*(this));
}

auto FileCreationResult::operator=(const FileCreationErrorResult& aRhs) -> FileCreationResult&
{
    if (MaybeDestroy(TFileCreationErrorResult)) {
        new (mozilla::KnownNotNull, ptr_FileCreationErrorResult()) FileCreationErrorResult;
    }
    (*(ptr_FileCreationErrorResult())) = aRhs;
    mType = TFileCreationErrorResult;
    return (*(this));
}

auto FileCreationResult::operator=(FileCreationErrorResult&& aRhs) -> FileCreationResult&
{
    if (MaybeDestroy(TFileCreationErrorResult)) {
        new (mozilla::KnownNotNull, ptr_FileCreationErrorResult()) FileCreationErrorResult;
    }
    (*(ptr_FileCreationErrorResult())) = std::move(aRhs);
    mType = TFileCreationErrorResult;
    return (*(this));
}

auto FileCreationResult::operator=(const FileCreationResult& aRhs) -> FileCreationResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileCreationSuccessResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileCreationSuccessResult()) FileCreationSuccessResult;
            }
            (*(ptr_FileCreationSuccessResult())) = (aRhs).get_FileCreationSuccessResult();
            break;
        }
    case TFileCreationErrorResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileCreationErrorResult()) FileCreationErrorResult;
            }
            (*(ptr_FileCreationErrorResult())) = (aRhs).get_FileCreationErrorResult();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto FileCreationResult::operator=(FileCreationResult&& aRhs) -> FileCreationResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFileCreationSuccessResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileCreationSuccessResult()) FileCreationSuccessResult;
            }
            (*(ptr_FileCreationSuccessResult())) = std::move((aRhs).get_FileCreationSuccessResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileCreationErrorResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileCreationErrorResult()) FileCreationErrorResult;
            }
            (*(ptr_FileCreationErrorResult())) = std::move((aRhs).get_FileCreationErrorResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileCreationResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::FileCreationResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'FileCreationResult'
    (aMsg)->WriteSentinel(1108084533);

    switch (type) {
    case union__::TFileCreationSuccessResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileCreationSuccessResult());
            // Sentinel = 'TFileCreationSuccessResult'
            (aMsg)->WriteSentinel(2276133474);
            return;
        }
    case union__::TFileCreationErrorResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileCreationErrorResult());
            // Sentinel = 'TFileCreationErrorResult'
            (aMsg)->WriteSentinel(1937639827);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::FileCreationResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::FileCreationResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union FileCreationResult");
        return false;
    }
    // Sentinel = 'FileCreationResult'
    if ((!((aMsg)->ReadSentinel(aIter, 1108084533)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union FileCreationResult");
        return false;
    }

    switch (type) {
    case union__::TFileCreationSuccessResult:
        {
            mozilla::dom::FileCreationSuccessResult tmp = mozilla::dom::FileCreationSuccessResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileCreationSuccessResult())))))) {
                aActor->FatalError("Error deserializing variant TFileCreationSuccessResult of union FileCreationResult");
                return false;
            }
            // Sentinel = 'TFileCreationSuccessResult'
            if ((!((aMsg)->ReadSentinel(aIter, 2276133474)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileCreationSuccessResult of union FileCreationResult");
                return false;
            }
            return true;
        }
    case union__::TFileCreationErrorResult:
        {
            mozilla::dom::FileCreationErrorResult tmp = mozilla::dom::FileCreationErrorResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileCreationErrorResult())))))) {
                aActor->FatalError("Error deserializing variant TFileCreationErrorResult of union FileCreationResult");
                return false;
            }
            // Sentinel = 'TFileCreationErrorResult'
            if ((!((aMsg)->ReadSentinel(aIter, 1937639827)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileCreationErrorResult of union FileCreationResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
