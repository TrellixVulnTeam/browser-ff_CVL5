//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/PSpeechSynthesisRequestParent.h"
#include "mozilla/dom/PSpeechSynthesisRequestChild.h"
#include "mozilla/dom/PSpeechSynthesis.h"
#include "mozilla/dom/PSpeechSynthesisParent.h"
#include "mozilla/dom/PSpeechSynthesisChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PSpeechSynthesis {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PSpeechSynthesisParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PSpeechSynthesisChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_VoiceAdded(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_VoiceAdded__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_VoiceRemoved(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_VoiceRemoved__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetDefaultVoice(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetDefaultVoice__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_IsSpeakingChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IsSpeakingChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyVoicesChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyVoicesChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitialVoicesAndState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitialVoicesAndState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PSpeechSynthesisRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PSpeechSynthesisRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PSpeechSynthesisRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PSpeechSynthesisRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PSpeechSynthesis
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteVoice|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteVoice>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).voiceURI());
    // Sentinel = 'voiceURI'
    (aMsg)->WriteSentinel(245760775);
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).lang());
    // Sentinel = 'lang'
    (aMsg)->WriteSentinel(68813219);
    WriteIPDLParam(aMsg, aActor, (aVar).localService());
    // Sentinel = 'localService'
    (aMsg)->WriteSentinel(530777309);
    WriteIPDLParam(aMsg, aActor, (aVar).queued());
    // Sentinel = 'queued'
    (aMsg)->WriteSentinel(152437386);
}

auto IPDLParamTraits<mozilla::dom::RemoteVoice>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->voiceURI())))))) {
        aActor->FatalError("Error deserializing 'voiceURI' (nsString) member of 'RemoteVoice'");
        return false;
    }
    // Sentinel = 'voiceURI'
    if ((!((aMsg)->ReadSentinel(aIter, 245760775)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'voiceURI' (nsString) member of 'RemoteVoice'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'RemoteVoice'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'RemoteVoice'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->lang())))))) {
        aActor->FatalError("Error deserializing 'lang' (nsString) member of 'RemoteVoice'");
        return false;
    }
    // Sentinel = 'lang'
    if ((!((aMsg)->ReadSentinel(aIter, 68813219)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'lang' (nsString) member of 'RemoteVoice'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->localService())))))) {
        aActor->FatalError("Error deserializing 'localService' (bool) member of 'RemoteVoice'");
        return false;
    }
    // Sentinel = 'localService'
    if ((!((aMsg)->ReadSentinel(aIter, 530777309)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'localService' (bool) member of 'RemoteVoice'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->queued())))))) {
        aActor->FatalError("Error deserializing 'queued' (bool) member of 'RemoteVoice'");
        return false;
    }
    // Sentinel = 'queued'
    if ((!((aMsg)->ReadSentinel(aIter, 152437386)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'queued' (bool) member of 'RemoteVoice'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
