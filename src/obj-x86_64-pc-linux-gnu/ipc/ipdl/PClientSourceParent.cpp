//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PClientSourceParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PClientManagerParent.h"
#include "mozilla/dom/PClientSourceOpParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PClientSourceParent::PClientSourceParent() :
    mozilla::ipc::IProtocol(PClientSourceMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PClientSourceParent);
}

PClientSourceParent::~PClientSourceParent()
{
    MOZ_COUNT_DTOR(PClientSourceParent);
}

auto PClientSourceParent::Manager() const -> PClientManagerParent*
{
    return static_cast<PClientManagerParent*>(IProtocol::Manager());
}

auto PClientSourceParent::ManagedPClientSourceOpParent(nsTArray<PClientSourceOpParent*>& aArr) const -> void
{
    mManagedPClientSourceOpParent.ToArray(aArr);
}

auto PClientSourceParent::ManagedPClientSourceOpParent() const -> const ManagedContainer<PClientSourceOpParent>&
{
    return mManagedPClientSourceOpParent;
}

auto PClientSourceParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPClientSourceOpParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPClientSourceOpParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PClientSourceParent::OpenPClientSourceOpEndpoint(PClientSourceOpParent* aActor) -> ManagedEndpoint<PClientSourceOpChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientSourceOpParent actor");
        return ManagedEndpoint<PClientSourceOpChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientSourceOpParent.PutEntry(aActor);

    return ManagedEndpoint<PClientSourceOpChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientSourceParent::BindPClientSourceOpEndpoint(
        ManagedEndpoint<PClientSourceOpParent> aEndpoint,
        PClientSourceOpParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientSourceOpParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientSourceOpParent.PutEntry(aActor);

    return true;
}

auto PClientSourceParent::SendPClientSourceOpConstructor(const ClientOpConstructorArgs& aArgs) -> PClientSourceOpParent*
{
    PClientSourceOpParent* actor = (this)->AllocPClientSourceOpParent(aArgs);
    return SendPClientSourceOpConstructor(actor, aArgs);
}

auto PClientSourceParent::SendPClientSourceOpConstructor(
        PClientSourceOpParent* actor,
        const ClientOpConstructorArgs& aArgs) -> PClientSourceOpParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PClientSourceOpParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPClientSourceOpParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PClientSource::Msg_PClientSourceOpConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg_PClientSourceOpConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PClientSourceOpParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PClientSourceOpMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PClientSourceParent::Send__delete__(PClientSourceParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PClientSource::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PClientSourceMsgStart, actor);
    return sendok__;
}

auto PClientSourceParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientSourceOpMsgStart:
{
            PClientSourceOpParent* actor = static_cast<PClientSourceOpParent*>(aListener);
            auto& container = mManagedPClientSourceOpParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PClientSourceParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientSourceOpMsgStart:
        this->DeallocPClientSourceOpParent(static_cast<PClientSourceOpParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PClientSourceParent::OnMessageReceived(const Message& msg__) -> PClientSourceParent::Result
{
    switch (msg__.type()) {
    case PClientSource::Msg_Teardown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg_Teardown", OTHER);

            if ((!((this)->RecvTeardown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientSource::Msg_ExecutionReady__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg_ExecutionReady", OTHER);

            PickleIterator iter__{msg__};
            ClientSourceExecutionReadyArgs aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'ClientSourceExecutionReadyArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClientSourceExecutionReadyArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvExecutionReady(std::move(aArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientSource::Msg_Freeze__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg_Freeze", OTHER);

            if ((!((this)->RecvFreeze()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientSource::Msg_Thaw__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg_Thaw", OTHER);

            if ((!((this)->RecvThaw()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientSource::Msg_InheritController__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg_InheritController", OTHER);

            PickleIterator iter__{msg__};
            ClientControlledArgs aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'ClientControlledArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClientControlledArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvInheritController(std::move(aArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientSource::Msg_NoteDOMContentLoaded__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg_NoteDOMContentLoaded", OTHER);

            if ((!((this)->RecvNoteDOMContentLoaded()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientSource::Reply_PClientSourceOpConstructor__ID:
        {
            return MsgProcessed;
        }
    case PClientSource::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PClientSourceParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PClientSourceParent::Result
{
    switch (msg__.type()) {
    case PClientSource::Msg_WorkerSyncPing__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg_WorkerSyncPing", OTHER);

            int32_t id__ = Id();
            if ((!((this)->RecvWorkerSyncPing()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PClientSource::Reply_WorkerSyncPing(id__);


            if (mozilla::ipc::LoggingEnabledFor("PClientSourceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PClientSourceParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PClientSourceParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PClientSourceParent::ClearSubtree() -> void
{
    for (auto it = mManagedPClientSourceOpParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientSourceOpParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientSourceOpParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientSourceOpParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PClientSourceParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PClientSourceParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PClientSource", PClientSourceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PClientSourceParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
