//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PHttpConnectionMgrParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/HttpConnectionMgrParent.h"

#include "mozilla/net/PAltSvcTransactionParent.h"
#include "mozilla/net/PSocketProcessParent.h"
#include "mozilla/net/PHttpTransactionParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PHttpConnectionMgrParent::PHttpConnectionMgrParent() :
    mozilla::ipc::IProtocol(PHttpConnectionMgrMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PHttpConnectionMgrParent);
}

PHttpConnectionMgrParent::~PHttpConnectionMgrParent()
{
    MOZ_COUNT_DTOR(PHttpConnectionMgrParent);
}

auto PHttpConnectionMgrParent::Manager() const -> PSocketProcessParent*
{
    return static_cast<PSocketProcessParent*>(IProtocol::Manager());
}

auto PHttpConnectionMgrParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHttpConnectionMgrParent::Send__delete__(PHttpConnectionMgrParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PHttpConnectionMgr::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PHttpConnectionMgrMsgStart, actor);
    return sendok__;
}

auto PHttpConnectionMgrParent::SendDoShiftReloadConnectionCleanupWithConnInfo(const HttpConnectionInfoCloneArgs& aArgs) -> bool
{
    IPC::Message* msg__ = PHttpConnectionMgr::Msg_DoShiftReloadConnectionCleanupWithConnInfo(Id());

    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_DoShiftReloadConnectionCleanupWithConnInfo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpConnectionMgrParent::SendUpdateCurrentTopLevelOuterContentWindowId(const uint64_t& aWindowId) -> bool
{
    IPC::Message* msg__ = PHttpConnectionMgr::Msg_UpdateCurrentTopLevelOuterContentWindowId(Id());

    WriteIPDLParam(msg__, this, aWindowId);
    // Sentinel = 'aWindowId'
    (msg__)->WriteSentinel(296223623);




    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_UpdateCurrentTopLevelOuterContentWindowId", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpConnectionMgrParent::SendAddTransaction(
        PHttpTransactionParent* aTrans,
        const int32_t& aPriority) -> bool
{
    IPC::Message* msg__ = PHttpConnectionMgr::Msg_AddTransaction(Id());

    MOZ_RELEASE_ASSERT(aTrans, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aTrans);
    // Sentinel = 'aTrans'
    (msg__)->WriteSentinel(136970858);
    WriteIPDLParam(msg__, this, aPriority);
    // Sentinel = 'aPriority'
    (msg__)->WriteSentinel(303367108);




    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_AddTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpConnectionMgrParent::SendAddTransactionWithStickyConn(
        PHttpTransactionParent* aTrans,
        const int32_t& aPriority,
        PHttpTransactionParent* aTransWithStickyConn) -> bool
{
    IPC::Message* msg__ = PHttpConnectionMgr::Msg_AddTransactionWithStickyConn(Id());

    MOZ_RELEASE_ASSERT(aTrans, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aTrans);
    // Sentinel = 'aTrans'
    (msg__)->WriteSentinel(136970858);
    WriteIPDLParam(msg__, this, aPriority);
    // Sentinel = 'aPriority'
    (msg__)->WriteSentinel(303367108);
    MOZ_RELEASE_ASSERT(aTransWithStickyConn, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aTransWithStickyConn);
    // Sentinel = 'aTransWithStickyConn'
    (msg__)->WriteSentinel(1405487115);




    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_AddTransactionWithStickyConn", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpConnectionMgrParent::SendRescheduleTransaction(
        PHttpTransactionParent* aTrans,
        const int32_t& aPriority) -> bool
{
    IPC::Message* msg__ = PHttpConnectionMgr::Msg_RescheduleTransaction(Id());

    MOZ_RELEASE_ASSERT(aTrans, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aTrans);
    // Sentinel = 'aTrans'
    (msg__)->WriteSentinel(136970858);
    WriteIPDLParam(msg__, this, aPriority);
    // Sentinel = 'aPriority'
    (msg__)->WriteSentinel(303367108);




    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_RescheduleTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpConnectionMgrParent::SendUpdateClassOfServiceOnTransaction(
        PHttpTransactionParent* aTrans,
        const uint32_t& aClassOfService) -> bool
{
    IPC::Message* msg__ = PHttpConnectionMgr::Msg_UpdateClassOfServiceOnTransaction(Id());

    MOZ_RELEASE_ASSERT(aTrans, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aTrans);
    // Sentinel = 'aTrans'
    (msg__)->WriteSentinel(136970858);
    WriteIPDLParam(msg__, this, aClassOfService);
    // Sentinel = 'aClassOfService'
    (msg__)->WriteSentinel(770770398);




    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_UpdateClassOfServiceOnTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpConnectionMgrParent::SendCancelTransaction(
        PHttpTransactionParent* aTrans,
        const nsresult& aReason) -> bool
{
    IPC::Message* msg__ = PHttpConnectionMgr::Msg_CancelTransaction(Id());

    MOZ_RELEASE_ASSERT(aTrans, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aTrans);
    // Sentinel = 'aTrans'
    (msg__)->WriteSentinel(136970858);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_CancelTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpConnectionMgrParent::SendSpeculativeConnect(
        const HttpConnectionInfoCloneArgs& aConnInfo,
        const mozilla::Maybe<SpeculativeConnectionOverriderArgs>& aOverriderArgs,
        const uint32_t& aCaps,
        const mozilla::Maybe<PAltSvcTransactionParent*>& aTrans,
        const bool& aFetchHTTPSRR) -> bool
{
    IPC::Message* msg__ = PHttpConnectionMgr::Msg_SpeculativeConnect(Id());

    WriteIPDLParam(msg__, this, aConnInfo);
    // Sentinel = 'aConnInfo'
    (msg__)->WriteSentinel(284558204);
    WriteIPDLParam(msg__, this, aOverriderArgs);
    // Sentinel = 'aOverriderArgs'
    (msg__)->WriteSentinel(703268257);
    WriteIPDLParam(msg__, this, aCaps);
    // Sentinel = 'aCaps'
    (msg__)->WriteSentinel(90964457);
    WriteIPDLParam(msg__, this, aTrans);
    // Sentinel = 'aTrans'
    (msg__)->WriteSentinel(136970858);
    WriteIPDLParam(msg__, this, aFetchHTTPSRR);
    // Sentinel = 'aFetchHTTPSRR'
    (msg__)->WriteSentinel(547292291);




    if (mozilla::ipc::LoggingEnabledFor("PHttpConnectionMgrParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpConnectionMgrParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpConnectionMgr::Msg_SpeculativeConnect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpConnectionMgrParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpConnectionMgrParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpConnectionMgrParent::OnMessageReceived(const Message& msg__) -> PHttpConnectionMgrParent::Result
{
    switch (msg__.type()) {
    case PHttpConnectionMgr::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHttpConnectionMgrParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpConnectionMgrParent::Result
{
    return MsgNotKnown;
}

auto PHttpConnectionMgrParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpConnectionMgrParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHttpConnectionMgrParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PHttpConnectionMgrParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PHttpConnectionMgrParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHttpConnectionMgr", PHttpConnectionMgrMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PHttpConnectionMgrParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
