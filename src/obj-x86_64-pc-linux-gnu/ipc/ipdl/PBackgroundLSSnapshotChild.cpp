//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundLSSnapshotChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/dom/localstorage/SerializationHelpers.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PBackgroundLSDatabaseChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBackgroundLSSnapshotChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundLSSnapshotChild::PBackgroundLSSnapshotChild() :
    mozilla::ipc::IProtocol(PBackgroundLSSnapshotMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBackgroundLSSnapshotChild);
}

PBackgroundLSSnapshotChild::~PBackgroundLSSnapshotChild()
{
    MOZ_COUNT_DTOR(PBackgroundLSSnapshotChild);
}

auto PBackgroundLSSnapshotChild::Manager() const -> PBackgroundLSDatabaseChild*
{
    return static_cast<PBackgroundLSDatabaseChild*>(IProtocol::Manager());
}

auto PBackgroundLSSnapshotChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PBackgroundLSSnapshotChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_DeleteMe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundLSSnapshotChild::SendCheckpoint(const nsTArray<LSWriteInfo>& writeInfos) -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_Checkpoint(Id());

    WriteIPDLParam(msg__, this, writeInfos);
    // Sentinel = 'writeInfos'
    (msg__)->WriteSentinel(388760619);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_Checkpoint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundLSSnapshotChild::SendCheckpointAndNotify(const nsTArray<LSWriteAndNotifyInfo>& writeAndNotifyInfos) -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_CheckpointAndNotify(Id());

    WriteIPDLParam(msg__, this, writeAndNotifyInfos);
    // Sentinel = 'writeAndNotifyInfos'
    (msg__)->WriteSentinel(1295517623);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_CheckpointAndNotify", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundLSSnapshotChild::SendFinish() -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_Finish(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_Finish", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundLSSnapshotChild::SendLoaded() -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_Loaded(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_Loaded", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundLSSnapshotChild::SendLoadValueAndMoreItems(
        const nsString& key,
        LSValue* value,
        nsTArray<LSItemInfo>* itemInfos) -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_LoadValueAndMoreItems(Id());

    WriteIPDLParam(msg__, this, key);
    // Sentinel = 'key'
    (msg__)->WriteSentinel(42402122);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_LoadValueAndMoreItems", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBackgroundLSSnapshot::Msg_LoadValueAndMoreItems", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'LSValue'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'LSValue'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, itemInfos)))) {
        FatalError("Error deserializing 'LSItemInfo[]'");
        return false;
    }
    // Sentinel = 'itemInfos'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 307430319)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'LSItemInfo[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBackgroundLSSnapshotChild::SendLoadKeys(nsTArray<nsString>* keys) -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_LoadKeys(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_LoadKeys", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBackgroundLSSnapshot::Msg_LoadKeys", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, keys)))) {
        FatalError("Error deserializing 'nsString[]'");
        return false;
    }
    // Sentinel = 'keys'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 71565757)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBackgroundLSSnapshotChild::SendIncreasePeakUsage(
        const int64_t& requestedSize,
        const int64_t& minSize,
        int64_t* size) -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_IncreasePeakUsage(Id());

    WriteIPDLParam(msg__, this, requestedSize);
    // Sentinel = 'requestedSize'
    (msg__)->WriteSentinel(646120814);
    WriteIPDLParam(msg__, this, minSize);
    // Sentinel = 'minSize'
    (msg__)->WriteSentinel(192807648);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_IncreasePeakUsage", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBackgroundLSSnapshot::Msg_IncreasePeakUsage", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, size)))) {
        FatalError("Error deserializing 'int64_t'");
        return false;
    }
    // Sentinel = 'size'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBackgroundLSSnapshotChild::SendPing() -> bool
{
    IPC::Message* msg__ = PBackgroundLSSnapshot::Msg_Ping(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_Ping", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBackgroundLSSnapshot::Msg_Ping", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSSnapshotChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PBackgroundLSSnapshotChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBackgroundLSSnapshotChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBackgroundLSSnapshotChild::OnMessageReceived(const Message& msg__) -> PBackgroundLSSnapshotChild::Result
{
    switch (msg__.type()) {
    case PBackgroundLSSnapshot::Msg_MarkDirty__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundLSSnapshotChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg_MarkDirty", OTHER);

            if ((!((this)->RecvMarkDirty()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundLSSnapshot::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSSnapshotChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundLSSnapshotChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundLSSnapshot::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBackgroundLSSnapshotChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBackgroundLSSnapshot'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBackgroundLSSnapshot'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundLSSnapshot'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBackgroundLSSnapshotMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundLSSnapshotChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundLSSnapshotChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundLSSnapshotChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundLSSnapshotChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundLSSnapshotChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundLSSnapshotChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundLSSnapshotChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundLSSnapshot", PBackgroundLSSnapshotMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundLSSnapshotChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
