//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPServiceParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPContentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PGMPServiceParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PGMPServiceParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PGMPServiceParent::EnteredCxxStack() -> void
{
}

auto PGMPServiceParent::ExitedCxxStack() -> void
{
}

auto PGMPServiceParent::EnteredCall() -> void
{
}

auto PGMPServiceParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PGMPServiceParent::PGMPServiceParent() :
    mozilla::ipc::IToplevelProtocol("PGMPServiceParent", PGMPServiceMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PGMPServiceParent);
}

PGMPServiceParent::~PGMPServiceParent()
{
    MOZ_COUNT_DTOR(PGMPServiceParent);
}

auto PGMPServiceParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PGMPServiceParent::SendBeginShutdown() -> bool
{
    IPC::Message* msg__ = PGMPService::Msg_BeginShutdown(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PGMPServiceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPServiceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPService::Msg_BeginShutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPServiceParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPServiceParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPServiceParent::OnMessageReceived(const Message& msg__) -> PGMPServiceParent::Result
{
    switch (msg__.type()) {
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PGMPServiceParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPServiceParent::Result
{
    switch (msg__.type()) {
    case PGMPService::Msg_LaunchGMP__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPService::Msg_LaunchGMP", OTHER);

            PickleIterator iter__{msg__};
            NodeIdVariant nodeIdVariant{};
            nsCString api{};
            nsTArray<nsCString> tags{};
            nsTArray<ProcessId> alreadyBridgedTo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(nodeIdVariant)))))) {
                FatalError("Error deserializing 'NodeIdVariant'");
                return MsgValueError;
            }
            // Sentinel = 'nodeIdVariant'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 599196969)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NodeIdVariant'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(api)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'api'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 40829243)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(tags)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'tags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70779312)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(alreadyBridgedTo)))))) {
                FatalError("Error deserializing 'ProcessId[]'");
                return MsgValueError;
            }
            // Sentinel = 'alreadyBridgedTo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 911607383)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ProcessId[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            uint32_t pluginId{};
            ProcessId id{};
            nsCString displayName{};
            Endpoint<mozilla::gmp::PGMPContentParent> endpoint{};
            nsresult aResult{};
            nsCString aErrorDescription{};
            if ((!((this)->RecvLaunchGMP(std::move(nodeIdVariant), std::move(api), std::move(tags), std::move(alreadyBridgedTo), (&(pluginId)), (&(id)), (&(displayName)), (&(endpoint)), (&(aResult)), (&(aErrorDescription)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PGMPService::Reply_LaunchGMP(id__);

            WriteIPDLParam(reply__, this, pluginId);
            // Sentinel = 'pluginId'
            (reply__)->WriteSentinel(253821757);
            WriteIPDLParam(reply__, this, id);
            // Sentinel = 'id'
            (reply__)->WriteSentinel(20447438);
            WriteIPDLParam(reply__, this, displayName);
            // Sentinel = 'displayName'
            (reply__)->WriteSentinel(455935096);
            WriteIPDLParam(reply__, this, std::move(endpoint));
            // Sentinel = 'endpoint'
            (reply__)->WriteSentinel(251724642);
            WriteIPDLParam(reply__, this, aResult);
            // Sentinel = 'aResult'
            (reply__)->WriteSentinel(185205473);
            WriteIPDLParam(reply__, this, aErrorDescription);
            // Sentinel = 'aErrorDescription'
            (reply__)->WriteSentinel(1020462832);

            if (mozilla::ipc::LoggingEnabledFor("PGMPServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PGMPService::Msg_GetGMPNodeId__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPService::Msg_GetGMPNodeId", OTHER);

            PickleIterator iter__{msg__};
            nsString origin{};
            nsString topLevelOrigin{};
            nsString gmpName{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(origin)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'origin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 150143625)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(topLevelOrigin)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'topLevelOrigin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 720242100)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(gmpName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'gmpName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 187695814)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            nsCString id{};
            if ((!((this)->RecvGetGMPNodeId(std::move(origin), std::move(topLevelOrigin), std::move(gmpName), (&(id)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PGMPService::Reply_GetGMPNodeId(id__);

            WriteIPDLParam(reply__, this, id);
            // Sentinel = 'id'
            (reply__)->WriteSentinel(20447438);

            if (mozilla::ipc::LoggingEnabledFor("PGMPServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPServiceParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPServiceParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PGMPServiceParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPServiceParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPServiceParent::ClearSubtree() -> void
{
}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPServiceParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPServiceParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMPService", PGMPServiceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPServiceParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
