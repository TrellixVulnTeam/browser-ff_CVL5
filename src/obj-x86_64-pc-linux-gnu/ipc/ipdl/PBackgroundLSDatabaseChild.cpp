//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundLSDatabaseChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/dom/localstorage/SerializationHelpers.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PBackgroundLSSnapshotChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBackgroundLSDatabaseChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundLSDatabaseChild::PBackgroundLSDatabaseChild() :
    mozilla::ipc::IProtocol(PBackgroundLSDatabaseMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBackgroundLSDatabaseChild);
}

PBackgroundLSDatabaseChild::~PBackgroundLSDatabaseChild()
{
    MOZ_COUNT_DTOR(PBackgroundLSDatabaseChild);
}

auto PBackgroundLSDatabaseChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PBackgroundLSDatabaseChild::ManagedPBackgroundLSSnapshotChild(nsTArray<PBackgroundLSSnapshotChild*>& aArr) const -> void
{
    mManagedPBackgroundLSSnapshotChild.ToArray(aArr);
}

auto PBackgroundLSDatabaseChild::ManagedPBackgroundLSSnapshotChild() const -> const ManagedContainer<PBackgroundLSSnapshotChild>&
{
    return mManagedPBackgroundLSSnapshotChild;
}

auto PBackgroundLSDatabaseChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundLSSnapshotChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundLSSnapshotChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundLSDatabaseChild::OpenPBackgroundLSSnapshotEndpoint(PBackgroundLSSnapshotChild* aActor) -> ManagedEndpoint<PBackgroundLSSnapshotParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundLSSnapshotChild actor");
        return ManagedEndpoint<PBackgroundLSSnapshotParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundLSSnapshotChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundLSSnapshotParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundLSDatabaseChild::BindPBackgroundLSSnapshotEndpoint(
        ManagedEndpoint<PBackgroundLSSnapshotChild> aEndpoint,
        PBackgroundLSSnapshotChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundLSSnapshotChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundLSSnapshotChild.PutEntry(aActor);

    return true;
}

auto PBackgroundLSDatabaseChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundLSDatabase::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg_DeleteMe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundLSDatabaseChild::SendAllowToClose() -> bool
{
    IPC::Message* msg__ = PBackgroundLSDatabase::Msg_AllowToClose(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg_AllowToClose", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundLSDatabaseChild::SendPBackgroundLSSnapshotConstructor(
        const nsString& documentURI,
        const nsString& key,
        const bool& increasePeakUsage,
        const int64_t& requestedSize,
        const int64_t& minSize,
        LSSnapshotInitInfo* initInfo) -> PBackgroundLSSnapshotChild*
{
    PBackgroundLSSnapshotChild* actor = (this)->AllocPBackgroundLSSnapshotChild(documentURI, key, increasePeakUsage, requestedSize, minSize, initInfo);
    return SendPBackgroundLSSnapshotConstructor(actor, documentURI, key, increasePeakUsage, requestedSize, minSize, initInfo);
}

auto PBackgroundLSDatabaseChild::SendPBackgroundLSSnapshotConstructor(
        PBackgroundLSSnapshotChild* actor,
        const nsString& documentURI,
        const nsString& key,
        const bool& increasePeakUsage,
        const int64_t& requestedSize,
        const int64_t& minSize,
        LSSnapshotInitInfo* initInfo) -> PBackgroundLSSnapshotChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundLSSnapshotChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundLSSnapshotChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundLSDatabase::Msg_PBackgroundLSSnapshotConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, documentURI);
    // Sentinel = 'documentURI'
    (msg__)->WriteSentinel(453706832);
    WriteIPDLParam(msg__, this, key);
    // Sentinel = 'key'
    (msg__)->WriteSentinel(42402122);
    WriteIPDLParam(msg__, this, increasePeakUsage);
    // Sentinel = 'increasePeakUsage'
    (msg__)->WriteSentinel(1030686401);
    WriteIPDLParam(msg__, this, requestedSize);
    // Sentinel = 'requestedSize'
    (msg__)->WriteSentinel(646120814);
    WriteIPDLParam(msg__, this, minSize);
    // Sentinel = 'minSize'
    (msg__)->WriteSentinel(192807648);




    // Synchronously send the constructor message to the other side. If
    // the send fails, e.g. due to the remote side shutting down, the
    // actor will be destroyed and potentially freed.
    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSDatabaseChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg_PBackgroundLSSnapshotConstructor", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBackgroundLSDatabase::Msg_PBackgroundLSSnapshotConstructor", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }


    if (!(sendok__)) {
        // Warn, destroy the actor and return null if the message
        // failed to send.
        NS_WARNING("Error sending constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundLSSnapshotMsgStart, actor);

        return nullptr;
    }


    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSDatabaseChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, initInfo)))) {
        FatalError("Error deserializing 'LSSnapshotInitInfo'");
        return nullptr;
    }
    // Sentinel = 'initInfo'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 246743873)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'LSSnapshotInitInfo'");
        return nullptr;
    }
    reply__.EndRead(iter__, reply__.type());

    return actor;
}

auto PBackgroundLSDatabaseChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundLSSnapshotMsgStart:
{
            PBackgroundLSSnapshotChild* actor = static_cast<PBackgroundLSSnapshotChild*>(aListener);
            auto& container = mManagedPBackgroundLSSnapshotChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundLSDatabaseChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundLSSnapshotMsgStart:
        this->DeallocPBackgroundLSSnapshotChild(static_cast<PBackgroundLSSnapshotChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundLSDatabaseChild::OnMessageReceived(const Message& msg__) -> PBackgroundLSDatabaseChild::Result
{
    switch (msg__.type()) {
    case PBackgroundLSDatabase::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundLSDatabaseChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBackgroundLSDatabaseChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBackgroundLSDatabase'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBackgroundLSDatabase'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundLSDatabase'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBackgroundLSDatabaseMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundLSDatabase::Msg_RequestAllowToClose__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundLSDatabaseChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg_RequestAllowToClose", OTHER);

            if ((!((this)->RecvRequestAllowToClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundLSDatabaseChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundLSDatabaseChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundLSDatabaseChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundLSDatabaseChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundLSDatabaseChild::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundLSSnapshotChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundLSSnapshotChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundLSSnapshotChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundLSSnapshotChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundLSDatabaseChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundLSDatabaseChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundLSDatabase", PBackgroundLSDatabaseMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundLSDatabaseChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
