//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginInstanceParent.h"
#include "gfxipc/ShadowLayerUtils.h"
#include "ipc/nsGUIEventIPC.h"
#include "mozilla/D3DMessageUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/plugins/PluginInstanceParent.h"
#include "mozilla/plugins/PluginMessageUtils.h"

#include "mozilla/plugins/PPluginBackgroundDestroyerParent.h"
#include "mozilla/plugins/PPluginModuleParent.h"
#include "mozilla/plugins/PPluginScriptableObjectParent.h"
#include "mozilla/plugins/PBrowserStreamParent.h"
#include "mozilla/plugins/PStreamNotifyParent.h"
#include "mozilla/plugins/PPluginSurfaceParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {


auto PPluginInstanceParent::AnswerPStreamNotifyConstructor(
        PStreamNotifyParent* actor,
        const nsCString& url,
        const nsCString& target,
        const bool& post,
        const nsCString& buffer,
        const bool& file,
        NPError* result) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPluginInstanceParent::RecvPPluginSurfaceConstructor(
        PPluginSurfaceParent* actor,
        const WindowsSharedMemoryHandle& handle,
        const IntSize& size,
        const bool& transparent) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPluginInstanceParent::RecvPPluginScriptableObjectConstructor(PPluginScriptableObjectParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PPluginInstanceParent::PPluginInstanceParent() :
    mozilla::ipc::IProtocol(PPluginInstanceMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PPluginInstanceParent);
}

PPluginInstanceParent::~PPluginInstanceParent()
{
    MOZ_COUNT_DTOR(PPluginInstanceParent);
}

auto PPluginInstanceParent::Manager() const -> PPluginModuleParent*
{
    return static_cast<PPluginModuleParent*>(IProtocol::Manager());
}

auto PPluginInstanceParent::ManagedPPluginBackgroundDestroyerParent(nsTArray<PPluginBackgroundDestroyerParent*>& aArr) const -> void
{
    mManagedPPluginBackgroundDestroyerParent.ToArray(aArr);
}

auto PPluginInstanceParent::ManagedPPluginBackgroundDestroyerParent() const -> const ManagedContainer<PPluginBackgroundDestroyerParent>&
{
    return mManagedPPluginBackgroundDestroyerParent;
}

auto PPluginInstanceParent::ManagedPPluginScriptableObjectParent(nsTArray<PPluginScriptableObjectParent*>& aArr) const -> void
{
    mManagedPPluginScriptableObjectParent.ToArray(aArr);
}

auto PPluginInstanceParent::ManagedPPluginScriptableObjectParent() const -> const ManagedContainer<PPluginScriptableObjectParent>&
{
    return mManagedPPluginScriptableObjectParent;
}

auto PPluginInstanceParent::ManagedPBrowserStreamParent(nsTArray<PBrowserStreamParent*>& aArr) const -> void
{
    mManagedPBrowserStreamParent.ToArray(aArr);
}

auto PPluginInstanceParent::ManagedPBrowserStreamParent() const -> const ManagedContainer<PBrowserStreamParent>&
{
    return mManagedPBrowserStreamParent;
}

auto PPluginInstanceParent::ManagedPStreamNotifyParent(nsTArray<PStreamNotifyParent*>& aArr) const -> void
{
    mManagedPStreamNotifyParent.ToArray(aArr);
}

auto PPluginInstanceParent::ManagedPStreamNotifyParent() const -> const ManagedContainer<PStreamNotifyParent>&
{
    return mManagedPStreamNotifyParent;
}

auto PPluginInstanceParent::ManagedPPluginSurfaceParent(nsTArray<PPluginSurfaceParent*>& aArr) const -> void
{
    mManagedPPluginSurfaceParent.ToArray(aArr);
}

auto PPluginInstanceParent::ManagedPPluginSurfaceParent() const -> const ManagedContainer<PPluginSurfaceParent>&
{
    return mManagedPPluginSurfaceParent;
}

auto PPluginInstanceParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPPluginBackgroundDestroyerParent.Count();
    total += mManagedPPluginScriptableObjectParent.Count();
    total += mManagedPBrowserStreamParent.Count();
    total += mManagedPStreamNotifyParent.Count();
    total += mManagedPPluginSurfaceParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPPluginBackgroundDestroyerParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPluginScriptableObjectParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBrowserStreamParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPStreamNotifyParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPluginSurfaceParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PPluginInstanceParent::OpenPPluginBackgroundDestroyerEndpoint(PPluginBackgroundDestroyerParent* aActor) -> ManagedEndpoint<PPluginBackgroundDestroyerChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginBackgroundDestroyerParent actor");
        return ManagedEndpoint<PPluginBackgroundDestroyerChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginBackgroundDestroyerParent.PutEntry(aActor);

    return ManagedEndpoint<PPluginBackgroundDestroyerChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceParent::BindPPluginBackgroundDestroyerEndpoint(
        ManagedEndpoint<PPluginBackgroundDestroyerParent> aEndpoint,
        PPluginBackgroundDestroyerParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginBackgroundDestroyerParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginBackgroundDestroyerParent.PutEntry(aActor);

    return true;
}

auto PPluginInstanceParent::OpenPPluginScriptableObjectEndpoint(PPluginScriptableObjectParent* aActor) -> ManagedEndpoint<PPluginScriptableObjectChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginScriptableObjectParent actor");
        return ManagedEndpoint<PPluginScriptableObjectChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginScriptableObjectParent.PutEntry(aActor);

    return ManagedEndpoint<PPluginScriptableObjectChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceParent::BindPPluginScriptableObjectEndpoint(
        ManagedEndpoint<PPluginScriptableObjectParent> aEndpoint,
        PPluginScriptableObjectParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginScriptableObjectParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginScriptableObjectParent.PutEntry(aActor);

    return true;
}

auto PPluginInstanceParent::OpenPBrowserStreamEndpoint(PBrowserStreamParent* aActor) -> ManagedEndpoint<PBrowserStreamChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserStreamParent actor");
        return ManagedEndpoint<PBrowserStreamChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBrowserStreamParent.PutEntry(aActor);

    return ManagedEndpoint<PBrowserStreamChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceParent::BindPBrowserStreamEndpoint(
        ManagedEndpoint<PBrowserStreamParent> aEndpoint,
        PBrowserStreamParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserStreamParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBrowserStreamParent.PutEntry(aActor);

    return true;
}

auto PPluginInstanceParent::OpenPStreamNotifyEndpoint(PStreamNotifyParent* aActor) -> ManagedEndpoint<PStreamNotifyChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PStreamNotifyParent actor");
        return ManagedEndpoint<PStreamNotifyChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPStreamNotifyParent.PutEntry(aActor);

    return ManagedEndpoint<PStreamNotifyChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceParent::BindPStreamNotifyEndpoint(
        ManagedEndpoint<PStreamNotifyParent> aEndpoint,
        PStreamNotifyParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PStreamNotifyParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPStreamNotifyParent.PutEntry(aActor);

    return true;
}

auto PPluginInstanceParent::OpenPPluginSurfaceEndpoint(PPluginSurfaceParent* aActor) -> ManagedEndpoint<PPluginSurfaceChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginSurfaceParent actor");
        return ManagedEndpoint<PPluginSurfaceChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginSurfaceParent.PutEntry(aActor);

    return ManagedEndpoint<PPluginSurfaceChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPluginInstanceParent::BindPPluginSurfaceEndpoint(
        ManagedEndpoint<PPluginSurfaceParent> aEndpoint,
        PPluginSurfaceParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginSurfaceParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginSurfaceParent.PutEntry(aActor);

    return true;
}

auto PPluginInstanceParent::Send__delete__(PPluginInstanceParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PPluginInstance::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PPluginInstanceMsgStart, actor);
    return sendok__;
}

auto PPluginInstanceParent::CallCreateChildPluginWindow(NativeWindowHandle* childPluginWindow) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_CreateChildPluginWindow(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_CreateChildPluginWindow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_CreateChildPluginWindow", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, childPluginWindow)))) {
        FatalError("Error deserializing 'NativeWindowHandle'");
        return false;
    }
    // Sentinel = 'childPluginWindow'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 1031145196)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NativeWindowHandle'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::SendCreateChildPopupSurrogate(const NativeWindowHandle& netscapeWindow) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_CreateChildPopupSurrogate(Id());

    WriteIPDLParam(msg__, this, netscapeWindow);
    // Sentinel = 'netscapeWindow'
    (msg__)->WriteSentinel(728630732);




    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_CreateChildPopupSurrogate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceParent::CallNPP_SetWindow(const NPRemoteWindow& window) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_SetWindow(Id());

    WriteIPDLParam(msg__, this, window);
    // Sentinel = 'window'
    (msg__)->WriteSentinel(152437401);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_SetWindow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_SetWindow", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceParent::CallNPP_GetValue_NPPVpluginWantsAllNetworkStreams(
        bool* value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallNPP_GetValue_NPPVpluginScriptableNPObject(
        PPluginScriptableObjectParent** value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_GetValue_NPPVpluginScriptableNPObject(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_GetValue_NPPVpluginScriptableNPObject", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_GetValue_NPPVpluginScriptableNPObject", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'PPluginScriptableObject'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PPluginScriptableObject'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallNPP_SetValue_NPNVprivateModeBool(
        const bool& value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_SetValue_NPNVprivateModeBool(Id());

    WriteIPDLParam(msg__, this, value);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(107610654);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_SetValue_NPNVprivateModeBool", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_SetValue_NPNVprivateModeBool", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallNPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(
        nsCString* plug_id,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, plug_id)))) {
        FatalError("Error deserializing 'nsCString'");
        return false;
    }
    // Sentinel = 'plug_id'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 198640357)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallNPP_SetValue_NPNVCSSZoomFactor(
        const double& value,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_SetValue_NPNVCSSZoomFactor(Id());

    WriteIPDLParam(msg__, this, value);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(107610654);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_SetValue_NPNVCSSZoomFactor", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_SetValue_NPNVCSSZoomFactor", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallNPP_SetValue_NPNVmuteAudioBool(
        const bool& muted,
        NPError* result) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_SetValue_NPNVmuteAudioBool(Id());

    WriteIPDLParam(msg__, this, muted);
    // Sentinel = 'muted'
    (msg__)->WriteSentinel(109314592);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_SetValue_NPNVmuteAudioBool", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_SetValue_NPNVmuteAudioBool", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, result)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'result'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 153223840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallNPP_HandleEvent(
        const NPRemoteEvent& event,
        int16_t* handled) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_HandleEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_HandleEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_HandleEvent", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, handled)))) {
        FatalError("Error deserializing 'int16_t'");
        return false;
    }
    // Sentinel = 'handled'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 189596369)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallNPP_HandleEvent_Shmem(
        const NPRemoteEvent& event,
        Shmem&& buffer,
        int16_t* handled,
        Shmem* rtnbuffer) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_HandleEvent_Shmem(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, std::move(buffer));
    // Sentinel = 'buffer'
    (msg__)->WriteSentinel(144769659);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_HandleEvent_Shmem", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_HandleEvent_Shmem", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, handled)))) {
        FatalError("Error deserializing 'int16_t'");
        return false;
    }
    // Sentinel = 'handled'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 189596369)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rtnbuffer)))) {
        FatalError("Error deserializing 'Shmem'");
        return false;
    }
    // Sentinel = 'rtnbuffer'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 323486671)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallNPP_HandleEvent_IOSurface(
        const NPRemoteEvent& event,
        const uint32_t& surfaceid,
        int16_t* handled) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_HandleEvent_IOSurface(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, surfaceid);
    // Sentinel = 'surfaceid'
    (msg__)->WriteSentinel(320078775);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_HandleEvent_IOSurface", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_HandleEvent_IOSurface", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, handled)))) {
        FatalError("Error deserializing 'int16_t'");
        return false;
    }
    // Sentinel = 'handled'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 189596369)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallPaint(
        const NPRemoteEvent& event,
        int16_t* handled) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_Paint(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_Paint", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_Paint", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, handled)))) {
        FatalError("Error deserializing 'int16_t'");
        return false;
    }
    // Sentinel = 'handled'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 189596369)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::SendWindowPosChanged(const NPRemoteEvent& event) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_WindowPosChanged(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_WindowPosChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceParent::SendContentsScaleFactorChanged(const double& aContentsScaleFactor) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_ContentsScaleFactorChanged(Id());

    WriteIPDLParam(msg__, this, aContentsScaleFactor);
    // Sentinel = 'aContentsScaleFactor'
    (msg__)->WriteSentinel(1391462391);




    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_ContentsScaleFactorChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceParent::SendAsyncSetWindow(
        const gfxSurfaceType& surfaceType,
        const NPRemoteWindow& window) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_AsyncSetWindow(Id());

    WriteIPDLParam(msg__, this, surfaceType);
    // Sentinel = 'surfaceType'
    (msg__)->WriteSentinel(464651404);
    WriteIPDLParam(msg__, this, window);
    // Sentinel = 'window'
    (msg__)->WriteSentinel(152437401);




    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_AsyncSetWindow", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceParent::SendUpdateBackground(
        const SurfaceDescriptor& background,
        const nsIntRect& rect) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_UpdateBackground(Id());

    WriteIPDLParam(msg__, this, background);
    // Sentinel = 'background'
    (msg__)->WriteSentinel(374015009);
    WriteIPDLParam(msg__, this, rect);
    // Sentinel = 'rect'
    (msg__)->WriteSentinel(70582703);




    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_UpdateBackground", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceParent::SendNPP_DidComposite() -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_DidComposite(Id());





    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_DidComposite", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginInstanceParent::CallNPP_Destroy(NPError* rv) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_Destroy(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_Destroy", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_Destroy", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::SendPPluginScriptableObjectConstructor() -> PPluginScriptableObjectParent*
{
    PPluginScriptableObjectParent* actor = (static_cast<PluginInstanceParent*>(this))->AllocPPluginScriptableObjectParent();
    return SendPPluginScriptableObjectConstructor(actor);
}

auto PPluginInstanceParent::SendPPluginScriptableObjectConstructor(PPluginScriptableObjectParent* actor) -> PPluginScriptableObjectParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPluginScriptableObjectParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPluginScriptableObjectParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPluginInstance::Msg_PPluginScriptableObjectConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_PPluginScriptableObjectConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPluginScriptableObjectParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPluginScriptableObjectMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPluginInstanceParent::SendPBrowserStreamConstructor(
        const nsCString& url,
        const uint32_t& length,
        const uint32_t& lastmodified,
        PStreamNotifyParent* notifyData,
        const nsCString& headers) -> PBrowserStreamParent*
{
    PBrowserStreamParent* actor = (static_cast<PluginInstanceParent*>(this))->AllocPBrowserStreamParent(url, length, lastmodified, notifyData, headers);
    return SendPBrowserStreamConstructor(actor, url, length, lastmodified, notifyData, headers);
}

auto PPluginInstanceParent::SendPBrowserStreamConstructor(
        PBrowserStreamParent* actor,
        const nsCString& url,
        const uint32_t& length,
        const uint32_t& lastmodified,
        PStreamNotifyParent* notifyData,
        const nsCString& headers) -> PBrowserStreamParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBrowserStreamParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBrowserStreamParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPluginInstance::Msg_PBrowserStreamConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);
    WriteIPDLParam(msg__, this, length);
    // Sentinel = 'length'
    (msg__)->WriteSentinel(147063427);
    WriteIPDLParam(msg__, this, lastmodified);
    // Sentinel = 'lastmodified'
    (msg__)->WriteSentinel(548406518);
    WriteIPDLParam(msg__, this, notifyData);
    // Sentinel = 'notifyData'
    (msg__)->WriteSentinel(385418260);
    WriteIPDLParam(msg__, this, headers);
    // Sentinel = 'headers'
    (msg__)->WriteSentinel(188220125);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_PBrowserStreamConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBrowserStreamParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBrowserStreamMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPluginInstanceParent::CallNPP_NewStream(
        PBrowserStreamParent* actor,
        const nsCString& mimeType,
        const bool& seekable,
        NPError* rv,
        uint16_t* stype) -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_NPP_NewStream(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, mimeType);
    // Sentinel = 'mimeType'
    (msg__)->WriteSentinel(248906571);
    WriteIPDLParam(msg__, this, seekable);
    // Sentinel = 'seekable'
    (msg__)->WriteSentinel(247399229);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPP_NewStream", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_NPP_NewStream", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'NPError'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NPError'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, stype)))) {
        FatalError("Error deserializing 'uint16_t'");
        return false;
    }
    // Sentinel = 'stype'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 113508918)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginInstanceParent::CallSetPluginFocus() -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_SetPluginFocus(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_SetPluginFocus", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_SetPluginFocus", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceParent::CallUpdateWindow() -> bool
{
    IPC::Message* msg__ = PPluginInstance::Msg_UpdateWindow(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_UpdateWindow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginInstance::Msg_UpdateWindow", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PPluginInstanceParent::SendPPluginBackgroundDestroyerConstructor() -> PPluginBackgroundDestroyerParent*
{
    PPluginBackgroundDestroyerParent* actor = (static_cast<PluginInstanceParent*>(this))->AllocPPluginBackgroundDestroyerParent();
    return SendPPluginBackgroundDestroyerConstructor(actor);
}

auto PPluginInstanceParent::SendPPluginBackgroundDestroyerConstructor(PPluginBackgroundDestroyerParent* actor) -> PPluginBackgroundDestroyerParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPluginBackgroundDestroyerParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPluginBackgroundDestroyerParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPluginInstance::Msg_PPluginBackgroundDestroyerConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginInstanceParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginInstance::Msg_PPluginBackgroundDestroyerConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPluginBackgroundDestroyerParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPluginBackgroundDestroyerMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPluginInstanceParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPluginBackgroundDestroyerMsgStart:
{
            PPluginBackgroundDestroyerParent* actor = static_cast<PPluginBackgroundDestroyerParent*>(aListener);
            auto& container = mManagedPPluginBackgroundDestroyerParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPluginScriptableObjectMsgStart:
{
            PPluginScriptableObjectParent* actor = static_cast<PPluginScriptableObjectParent*>(aListener);
            auto& container = mManagedPPluginScriptableObjectParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBrowserStreamMsgStart:
{
            PBrowserStreamParent* actor = static_cast<PBrowserStreamParent*>(aListener);
            auto& container = mManagedPBrowserStreamParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PStreamNotifyMsgStart:
{
            PStreamNotifyParent* actor = static_cast<PStreamNotifyParent*>(aListener);
            auto& container = mManagedPStreamNotifyParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPluginSurfaceMsgStart:
{
            PPluginSurfaceParent* actor = static_cast<PPluginSurfaceParent*>(aListener);
            auto& container = mManagedPPluginSurfaceParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PPluginInstanceParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPluginBackgroundDestroyerMsgStart:
        static_cast<PluginInstanceParent*>(this)->DeallocPPluginBackgroundDestroyerParent(static_cast<PPluginBackgroundDestroyerParent*>(aListener));
        return;
    case PPluginScriptableObjectMsgStart:
        static_cast<PluginInstanceParent*>(this)->DeallocPPluginScriptableObjectParent(static_cast<PPluginScriptableObjectParent*>(aListener));
        return;
    case PBrowserStreamMsgStart:
        static_cast<PluginInstanceParent*>(this)->DeallocPBrowserStreamParent(static_cast<PBrowserStreamParent*>(aListener));
        return;
    case PStreamNotifyMsgStart:
        static_cast<PluginInstanceParent*>(this)->DeallocPStreamNotifyParent(static_cast<PStreamNotifyParent*>(aListener));
        return;
    case PPluginSurfaceMsgStart:
        static_cast<PluginInstanceParent*>(this)->DeallocPPluginSurfaceParent(static_cast<PPluginSurfaceParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PPluginInstanceParent::OnMessageReceived(const Message& msg__) -> PPluginInstanceParent::Result
{
    switch (msg__.type()) {
    case PPluginInstance::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_InvalidateRect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_InvalidateRect", OTHER);

            PickleIterator iter__{msg__};
            NPRect rect{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rect)))))) {
                FatalError("Error deserializing 'NPRect'");
                return MsgValueError;
            }
            // Sentinel = 'rect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70582703)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRect'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvNPN_InvalidateRect(std::move(rect))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_PPluginSurfaceConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_PPluginSurfaceConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            WindowsSharedMemoryHandle handle{};
            IntSize size{};
            bool transparent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle)))))) {
                FatalError("Error deserializing 'WindowsSharedMemoryHandle'");
                return MsgValueError;
            }
            // Sentinel = 'handle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142344813)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowsSharedMemoryHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(size)))))) {
                FatalError("Error deserializing 'IntSize'");
                return MsgValueError;
            }
            // Sentinel = 'size'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73662908)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntSize'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transparent)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'transparent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 474285235)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPluginSurfaceParent* actor = (static_cast<PluginInstanceParent*>(this))->AllocPPluginSurfaceParent(handle, size, transparent);
            if (!actor) {
                NS_WARNING("Cannot bind null PPluginSurfaceParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPluginSurfaceParent.PutEntry(actor);

            if ((!((static_cast<PluginInstanceParent*>(this))->RecvPPluginSurfaceConstructor(std::move(actor), std::move(handle), std::move(size), std::move(transparent))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_RedrawPlugin__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_RedrawPlugin", OTHER);

            if ((!((static_cast<PluginInstanceParent*>(this))->RecvRedrawPlugin()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_SetNetscapeWindowAsParent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_SetNetscapeWindowAsParent", OTHER);

            PickleIterator iter__{msg__};
            NativeWindowHandle childWindow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(childWindow)))))) {
                FatalError("Error deserializing 'NativeWindowHandle'");
                return MsgValueError;
            }
            // Sentinel = 'childWindow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 444138621)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NativeWindowHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvSetNetscapeWindowAsParent(std::move(childWindow))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_RequestCommitOrCancel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_RequestCommitOrCancel", OTHER);

            PickleIterator iter__{msg__};
            bool aCommitted{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCommitted)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCommitted'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 362218504)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvRequestCommitOrCancel(std::move(aCommitted))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Reply_PPluginScriptableObjectConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPluginInstance::Msg_PPluginScriptableObjectConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_PPluginScriptableObjectConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPluginScriptableObjectParent* actor = (static_cast<PluginInstanceParent*>(this))->AllocPPluginScriptableObjectParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PPluginScriptableObjectParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPluginScriptableObjectParent.PutEntry(actor);

            if ((!((static_cast<PluginInstanceParent*>(this))->RecvPPluginScriptableObjectConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginInstance::Reply_PBrowserStreamConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPluginInstance::Reply_PPluginBackgroundDestroyerConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginInstanceParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginInstanceParent::Result
{
    switch (msg__.type()) {
    case PPluginInstance::Msg_RevokeCurrentDirectSurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_RevokeCurrentDirectSurface", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvRevokeCurrentDirectSurface()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_RevokeCurrentDirectSurface(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_InitDXGISurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_InitDXGISurface", OTHER);

            PickleIterator iter__{msg__};
            SurfaceFormat format{};
            IntSize size{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(format)))))) {
                FatalError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            // Sentinel = 'format'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148505226)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(size)))))) {
                FatalError("Error deserializing 'IntSize'");
                return MsgValueError;
            }
            // Sentinel = 'size'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73662908)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntSize'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            WindowsHandle handle{};
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvInitDXGISurface(std::move(format), std::move(size), (&(handle)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_InitDXGISurface(id__);

            WriteIPDLParam(reply__, this, handle);
            // Sentinel = 'handle'
            (reply__)->WriteSentinel(142344813);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_FinalizeDXGISurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_FinalizeDXGISurface", OTHER);

            PickleIterator iter__{msg__};
            WindowsHandle handle{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle)))))) {
                FatalError("Error deserializing 'WindowsHandle'");
                return MsgValueError;
            }
            // Sentinel = 'handle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142344813)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowsHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvFinalizeDXGISurface(std::move(handle))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_FinalizeDXGISurface(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_ShowDirectBitmap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_ShowDirectBitmap", OTHER);

            PickleIterator iter__{msg__};
            Shmem buffer{};
            SurfaceFormat format{};
            uint32_t stride{};
            IntSize size{};
            IntRect dirty{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buffer)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'buffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144769659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(format)))))) {
                FatalError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            // Sentinel = 'format'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148505226)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stride)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'stride'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153879180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(size)))))) {
                FatalError("Error deserializing 'IntSize'");
                return MsgValueError;
            }
            // Sentinel = 'size'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73662908)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntSize'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dirty)))))) {
                FatalError("Error deserializing 'IntRect'");
                return MsgValueError;
            }
            // Sentinel = 'dirty'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106168877)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntRect'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvShowDirectBitmap(std::move(buffer), std::move(format), std::move(stride), std::move(size), std::move(dirty))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_ShowDirectBitmap(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_ShowDirectDXGISurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_ShowDirectDXGISurface", OTHER);

            PickleIterator iter__{msg__};
            WindowsHandle handle{};
            IntRect dirty{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle)))))) {
                FatalError("Error deserializing 'WindowsHandle'");
                return MsgValueError;
            }
            // Sentinel = 'handle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142344813)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowsHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dirty)))))) {
                FatalError("Error deserializing 'IntRect'");
                return MsgValueError;
            }
            // Sentinel = 'dirty'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106168877)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntRect'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvShowDirectDXGISurface(std::move(handle), std::move(dirty))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_ShowDirectDXGISurface(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_Show__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_Show", OTHER);

            PickleIterator iter__{msg__};
            NPRect updatedRect{};
            SurfaceDescriptor newSurface{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(updatedRect)))))) {
                FatalError("Error deserializing 'NPRect'");
                return MsgValueError;
            }
            // Sentinel = 'updatedRect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 455935094)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPRect'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(newSurface)))))) {
                FatalError("Error deserializing 'SurfaceDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'newSurface'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 381551636)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            SurfaceDescriptor prevSurface{};
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvShow(std::move(updatedRect), std::move(newSurface), (&(prevSurface)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_Show(id__);

            WriteIPDLParam(reply__, this, prevSurface);
            // Sentinel = 'prevSurface'
            (reply__)->WriteSentinel(464454791);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_GetCompositionString__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_GetCompositionString", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<uint8_t> aDist{};
            int32_t aLength{};
            if ((!((static_cast<PluginInstanceParent*>(this))->RecvGetCompositionString(std::move(aType), (&(aDist)), (&(aLength)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_GetCompositionString(id__);

            WriteIPDLParam(reply__, this, aDist);
            // Sentinel = 'aDist'
            (reply__)->WriteSentinel(93258230);
            WriteIPDLParam(reply__, this, aLength);
            // Sentinel = 'aLength'
            (reply__)->WriteSentinel(179045060);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginInstanceParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginInstanceParent::Result
{
    switch (msg__.type()) {
    case PPluginInstance::Msg_NPN_GetValue_NPNVWindowNPObject__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVWindowNPObject", OTHER);

            int32_t id__ = Id();
            PPluginScriptableObjectParent* value{};
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_NPNVWindowNPObject((&(value)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_NPNVWindowNPObject(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValue_NPNVPluginElementNPObject__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVPluginElementNPObject", OTHER);

            int32_t id__ = Id();
            PPluginScriptableObjectParent* value{};
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_NPNVPluginElementNPObject((&(value)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_NPNVPluginElementNPObject(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValue_NPNVprivateModeBool__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVprivateModeBool", OTHER);

            int32_t id__ = Id();
            bool value{};
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_NPNVprivateModeBool((&(value)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_NPNVprivateModeBool(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValue_NPNVnetscapeWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVnetscapeWindow", OTHER);

            int32_t id__ = Id();
            NativeWindowHandle value{};
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_NPNVnetscapeWindow((&(value)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_NPNVnetscapeWindow(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValue_NPNVdocumentOrigin__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_NPNVdocumentOrigin", OTHER);

            int32_t id__ = Id();
            nsCString value{};
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_NPNVdocumentOrigin((&(value)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_NPNVdocumentOrigin(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValue_DrawingModelSupport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_DrawingModelSupport", OTHER);

            PickleIterator iter__{msg__};
            NPNVariable model{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(model)))))) {
                FatalError("Error deserializing 'NPNVariable'");
                return MsgValueError;
            }
            // Sentinel = 'model'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 105120274)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPNVariable'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool value{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_DrawingModelSupport(std::move(model), (&(value)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_DrawingModelSupport(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValue_SupportsAsyncBitmapSurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_SupportsAsyncBitmapSurface", OTHER);

            int32_t id__ = Id();
            bool value{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_SupportsAsyncBitmapSurface((&(value)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_SupportsAsyncBitmapSurface(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValue_SupportsAsyncDXGISurface__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_SupportsAsyncDXGISurface", OTHER);

            int32_t id__ = Id();
            bool value{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_SupportsAsyncDXGISurface((&(value)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_SupportsAsyncDXGISurface(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValue_PreferredDXGIAdapter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValue_PreferredDXGIAdapter", OTHER);

            int32_t id__ = Id();
            DxgiAdapterDesc desc{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValue_PreferredDXGIAdapter((&(desc)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValue_PreferredDXGIAdapter(id__);

            WriteIPDLParam(reply__, this, desc);
            // Sentinel = 'desc'
            (reply__)->WriteSentinel(67895712);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_SetValue_NPPVpluginWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginWindow", OTHER);

            PickleIterator iter__{msg__};
            bool windowed{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(windowed)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'windowed'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 259392354)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_SetValue_NPPVpluginWindow(std::move(windowed), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_SetValue_NPPVpluginWindow(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_SetValue_NPPVpluginTransparent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginTransparent", OTHER);

            PickleIterator iter__{msg__};
            bool transparent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transparent)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'transparent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 474285235)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_SetValue_NPPVpluginTransparent(std::move(transparent), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_SetValue_NPPVpluginTransparent(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor", OTHER);

            PickleIterator iter__{msg__};
            bool useDOMForCursor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(useDOMForCursor)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'useDOMForCursor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 759432659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_SetValue_NPPVpluginUsesDOMForCursor(std::move(useDOMForCursor), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_SetValue_NPPVpluginDrawingModel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginDrawingModel", OTHER);

            PickleIterator iter__{msg__};
            int drawingModel{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(drawingModel)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'drawingModel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 535692510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_SetValue_NPPVpluginDrawingModel(std::move(drawingModel), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_SetValue_NPPVpluginDrawingModel(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_SetValue_NPPVpluginEventModel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginEventModel", OTHER);

            PickleIterator iter__{msg__};
            int eventModel{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(eventModel)))))) {
                FatalError("Error deserializing 'int'");
                return MsgValueError;
            }
            // Sentinel = 'eventModel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 379782164)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_SetValue_NPPVpluginEventModel(std::move(eventModel), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_SetValue_NPPVpluginEventModel(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_SetValue_NPPVpluginIsPlayingAudio__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValue_NPPVpluginIsPlayingAudio", OTHER);

            PickleIterator iter__{msg__};
            bool isAudioPlaying{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isAudioPlaying)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isAudioPlaying'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 700843427)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_SetValue_NPPVpluginIsPlayingAudio(std::move(isAudioPlaying), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_SetValue_NPPVpluginIsPlayingAudio(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetURL__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetURL", OTHER);

            PickleIterator iter__{msg__};
            nsCString url{};
            nsCString target{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(target)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'target'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148767368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetURL(std::move(url), std::move(target), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetURL(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_PostURL__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_PostURL", OTHER);

            PickleIterator iter__{msg__};
            nsCString url{};
            nsCString target{};
            nsCString buffer{};
            bool file{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(target)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'target'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148767368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buffer)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'buffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144769659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(file)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'file'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 68420001)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_PostURL(std::move(url), std::move(target), std::move(buffer), std::move(file), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_PostURL(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_PStreamNotifyConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_PStreamNotifyConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsCString url{};
            nsCString target{};
            bool post{};
            nsCString buffer{};
            bool file{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(target)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'target'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148767368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(post)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'post'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 74121671)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buffer)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'buffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144769659)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(file)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'file'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 68420001)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            NPError result{};
            PStreamNotifyParent* actor = (static_cast<PluginInstanceParent*>(this))->AllocPStreamNotifyParent(url, target, post, buffer, file, (&(result)));
            if (!actor) {
                NS_WARNING("Cannot bind null PStreamNotifyParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPStreamNotifyParent.PutEntry(actor);

            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerPStreamNotifyConstructor(std::move(actor), std::move(url), std::move(target), std::move(post), std::move(buffer), std::move(file), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }
            reply__ = PPluginInstance::Reply_PStreamNotifyConstructor(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_PushPopupsEnabledState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_PushPopupsEnabledState", OTHER);

            PickleIterator iter__{msg__};
            bool aState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_PushPopupsEnabledState(std::move(aState))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_PushPopupsEnabledState(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_PopPopupsEnabledState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_PopPopupsEnabledState", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_PopPopupsEnabledState()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_PopPopupsEnabledState(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_GetValueForURL__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_GetValueForURL", OTHER);

            PickleIterator iter__{msg__};
            NPNURLVariable variable{};
            nsCString url{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(variable)))))) {
                FatalError("Error deserializing 'NPNURLVariable'");
                return MsgValueError;
            }
            // Sentinel = 'variable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251593543)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPNURLVariable'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsCString value{};
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_GetValueForURL(std::move(variable), std::move(url), (&(value)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_GetValueForURL(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_SetValueForURL__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_SetValueForURL", OTHER);

            PickleIterator iter__{msg__};
            NPNURLVariable variable{};
            nsCString url{};
            nsCString value{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(variable)))))) {
                FatalError("Error deserializing 'NPNURLVariable'");
                return MsgValueError;
            }
            // Sentinel = 'variable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251593543)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPNURLVariable'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(value)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'value'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            NPError result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_SetValueForURL(std::move(variable), std::move(url), std::move(value), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_SetValueForURL(id__);

            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_NPN_ConvertPoint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_NPN_ConvertPoint", OTHER);

            PickleIterator iter__{msg__};
            double sourceX{};
            bool ignoreDestX{};
            double sourceY{};
            bool ignoreDestY{};
            NPCoordinateSpace sourceSpace{};
            NPCoordinateSpace destSpace{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceX)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'sourceX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 203555562)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(ignoreDestX)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'ignoreDestX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 451347565)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceY)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'sourceY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 203621099)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(ignoreDestY)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'ignoreDestY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 451413102)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceSpace)))))) {
                FatalError("Error deserializing 'NPCoordinateSpace'");
                return MsgValueError;
            }
            // Sentinel = 'sourceSpace'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 465503358)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPCoordinateSpace'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(destSpace)))))) {
                FatalError("Error deserializing 'NPCoordinateSpace'");
                return MsgValueError;
            }
            // Sentinel = 'destSpace'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 306119581)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NPCoordinateSpace'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            double destX{};
            double destY{};
            bool result{};
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerNPN_ConvertPoint(std::move(sourceX), std::move(ignoreDestX), std::move(sourceY), std::move(ignoreDestY), std::move(sourceSpace), std::move(destSpace), (&(destX)), (&(destY)), (&(result)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_NPN_ConvertPoint(id__);

            WriteIPDLParam(reply__, this, destX);
            // Sentinel = 'destX'
            (reply__)->WriteSentinel(103154185);
            WriteIPDLParam(reply__, this, destY);
            // Sentinel = 'destY'
            (reply__)->WriteSentinel(103219722);
            WriteIPDLParam(reply__, this, result);
            // Sentinel = 'result'
            (reply__)->WriteSentinel(153223840);

            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginInstance::Msg_PluginFocusChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginInstance::Msg_PluginFocusChange", OTHER);

            PickleIterator iter__{msg__};
            bool gotFocus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(gotFocus)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'gotFocus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 245433163)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<PluginInstanceParent*>(this))->AnswerPluginFocusChange(std::move(gotFocus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginInstance::Reply_PluginFocusChange(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginInstanceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginInstanceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginInstanceParent::ClearSubtree() -> void
{
    for (auto it = mManagedPPluginBackgroundDestroyerParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginBackgroundDestroyerParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginBackgroundDestroyerParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginBackgroundDestroyerParent.Clear();

    for (auto it = mManagedPPluginScriptableObjectParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginScriptableObjectParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginScriptableObjectParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginScriptableObjectParent.Clear();

    for (auto it = mManagedPBrowserStreamParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBrowserStreamParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBrowserStreamParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBrowserStreamParent.Clear();

    for (auto it = mManagedPStreamNotifyParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPStreamNotifyParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPStreamNotifyParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPStreamNotifyParent.Clear();

    for (auto it = mManagedPPluginSurfaceParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginSurfaceParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginSurfaceParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginSurfaceParent.Clear();

}



} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PPluginInstanceParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::plugins::PPluginInstanceParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPluginInstance", PPluginInstanceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::plugins::PPluginInstanceParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
