//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/quota/PQuotaParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/quota/SerializationHelpers.h"

#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/dom/quota/PQuotaRequestParent.h"
#include "mozilla/dom/quota/PQuotaUsageRequestParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace quota {


auto PQuotaParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PQuotaParent::RecvPQuotaUsageRequestConstructor(
        PQuotaUsageRequestParent* actor,
        const UsageRequestParams& params) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PQuotaParent::RecvPQuotaRequestConstructor(
        PQuotaRequestParent* actor,
        const RequestParams& params) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PQuotaParent::PQuotaParent() :
    mozilla::ipc::IProtocol(PQuotaMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PQuotaParent);
}

PQuotaParent::~PQuotaParent()
{
    MOZ_COUNT_DTOR(PQuotaParent);
}

auto PQuotaParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PQuotaParent::ManagedPQuotaRequestParent(nsTArray<PQuotaRequestParent*>& aArr) const -> void
{
    mManagedPQuotaRequestParent.ToArray(aArr);
}

auto PQuotaParent::ManagedPQuotaRequestParent() const -> const ManagedContainer<PQuotaRequestParent>&
{
    return mManagedPQuotaRequestParent;
}

auto PQuotaParent::ManagedPQuotaUsageRequestParent(nsTArray<PQuotaUsageRequestParent*>& aArr) const -> void
{
    mManagedPQuotaUsageRequestParent.ToArray(aArr);
}

auto PQuotaParent::ManagedPQuotaUsageRequestParent() const -> const ManagedContainer<PQuotaUsageRequestParent>&
{
    return mManagedPQuotaUsageRequestParent;
}

auto PQuotaParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPQuotaRequestParent.Count();
    total += mManagedPQuotaUsageRequestParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPQuotaRequestParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPQuotaUsageRequestParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PQuotaParent::OpenPQuotaRequestEndpoint(PQuotaRequestParent* aActor) -> ManagedEndpoint<PQuotaRequestChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PQuotaRequestParent actor");
        return ManagedEndpoint<PQuotaRequestChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPQuotaRequestParent.PutEntry(aActor);

    return ManagedEndpoint<PQuotaRequestChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PQuotaParent::BindPQuotaRequestEndpoint(
        ManagedEndpoint<PQuotaRequestParent> aEndpoint,
        PQuotaRequestParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PQuotaRequestParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPQuotaRequestParent.PutEntry(aActor);

    return true;
}

auto PQuotaParent::OpenPQuotaUsageRequestEndpoint(PQuotaUsageRequestParent* aActor) -> ManagedEndpoint<PQuotaUsageRequestChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PQuotaUsageRequestParent actor");
        return ManagedEndpoint<PQuotaUsageRequestChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPQuotaUsageRequestParent.PutEntry(aActor);

    return ManagedEndpoint<PQuotaUsageRequestChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PQuotaParent::BindPQuotaUsageRequestEndpoint(
        ManagedEndpoint<PQuotaUsageRequestParent> aEndpoint,
        PQuotaUsageRequestParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PQuotaUsageRequestParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPQuotaUsageRequestParent.PutEntry(aActor);

    return true;
}

auto PQuotaParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PQuotaRequestMsgStart:
{
            PQuotaRequestParent* actor = static_cast<PQuotaRequestParent*>(aListener);
            auto& container = mManagedPQuotaRequestParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PQuotaUsageRequestMsgStart:
{
            PQuotaUsageRequestParent* actor = static_cast<PQuotaUsageRequestParent*>(aListener);
            auto& container = mManagedPQuotaUsageRequestParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PQuotaParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PQuotaRequestMsgStart:
        this->DeallocPQuotaRequestParent(static_cast<PQuotaRequestParent*>(aListener));
        return;
    case PQuotaUsageRequestMsgStart:
        this->DeallocPQuotaUsageRequestParent(static_cast<PQuotaUsageRequestParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PQuotaParent::OnMessageReceived(const Message& msg__) -> PQuotaParent::Result
{
    switch (msg__.type()) {
    case PQuota::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PQuotaParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PQuotaParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PQuota::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PQuotaParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PQuota'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PQuota'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PQuota'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PQuotaMsgStart, actor);

            return MsgProcessed;
        }
    case PQuota::Msg_PQuotaUsageRequestConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PQuotaParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PQuotaParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PQuota::Msg_PQuotaUsageRequestConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            UsageRequestParams params{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(params)))))) {
                FatalError("Error deserializing 'UsageRequestParams'");
                return MsgValueError;
            }
            // Sentinel = 'params'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146997893)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UsageRequestParams'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PQuotaUsageRequestParent* actor = (this)->AllocPQuotaUsageRequestParent(params);
            if (!actor) {
                NS_WARNING("Cannot bind null PQuotaUsageRequestParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPQuotaUsageRequestParent.PutEntry(actor);

            if ((!((this)->RecvPQuotaUsageRequestConstructor(std::move(actor), std::move(params))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PQuota::Msg_PQuotaRequestConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PQuotaParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PQuotaParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PQuota::Msg_PQuotaRequestConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            RequestParams params{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(params)))))) {
                FatalError("Error deserializing 'RequestParams'");
                return MsgValueError;
            }
            // Sentinel = 'params'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146997893)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RequestParams'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PQuotaRequestParent* actor = (this)->AllocPQuotaRequestParent(params);
            if (!actor) {
                NS_WARNING("Cannot bind null PQuotaRequestParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPQuotaRequestParent.PutEntry(actor);

            if ((!((this)->RecvPQuotaRequestConstructor(std::move(actor), std::move(params))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PQuota::Msg_StartIdleMaintenance__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PQuotaParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PQuotaParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PQuota::Msg_StartIdleMaintenance", OTHER);

            if ((!((this)->RecvStartIdleMaintenance()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PQuota::Msg_StopIdleMaintenance__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PQuotaParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PQuotaParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PQuota::Msg_StopIdleMaintenance", OTHER);

            if ((!((this)->RecvStopIdleMaintenance()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PQuota::Msg_AbortOperationsForProcess__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PQuotaParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PQuotaParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PQuota::Msg_AbortOperationsForProcess", OTHER);

            PickleIterator iter__{msg__};
            ContentParentId contentParentId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(contentParentId)))))) {
                FatalError("Error deserializing 'ContentParentId'");
                return MsgValueError;
            }
            // Sentinel = 'contentParentId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 830539283)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContentParentId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAbortOperationsForProcess(std::move(contentParentId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PQuotaParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PQuotaParent::Result
{
    return MsgNotKnown;
}

auto PQuotaParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PQuotaParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PQuotaParent::ClearSubtree() -> void
{
    for (auto it = mManagedPQuotaRequestParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPQuotaRequestParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPQuotaRequestParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPQuotaRequestParent.Clear();

    for (auto it = mManagedPQuotaUsageRequestParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPQuotaUsageRequestParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPQuotaUsageRequestParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPQuotaUsageRequestParent.Clear();

}



} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::PQuotaParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::quota::PQuotaParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PQuota", PQuotaMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::quota::PQuotaParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
