//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentChild.h"
#include "ipc/DataStorageIPCUtils.h"
#include "ipc/MediaControlIPC.h"
#include "mozilla/AlertNotificationIPCSerializer.h"
#include "mozilla/AntiTrackingIPCUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/PermissionDelegateIPCUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/chrome/RegistryMessageUtils.h"
#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/CSPMessageUtils.h"
#include "mozilla/dom/ContentChild.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/FeaturePolicyUtils.h"
#include "mozilla/dom/MediaSessionIPCUtils.h"
#include "mozilla/dom/MessagePort.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/dom/SessionHistoryEntry.h"
#include "mozilla/dom/ipc/StructuredCloneData.h"
#include "mozilla/ipc/ByteBufUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "nsDocShellLoadState.h"
#include "nsGeoPositionIPCSerialiser.h"
#include "nsILayoutHistoryState.h"
#include "nsPoint.h"

#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/layers/PCompositorManagerChild.h"
#include "mozilla/dom/PContentPermissionRequestChild.h"
#include "mozilla/dom/PCycleCollectWithLogsChild.h"
#include "mozilla/dom/PExternalHelperAppChild.h"
#include "mozilla/dom/PHandlerServiceChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/hal_sandbox/PHalChild.h"
#include "mozilla/devtools/PHeapSnapshotTempFileHelperChild.h"
#include "mozilla/PProcessHangMonitorChild.h"
#include "mozilla/layers/PImageBridgeChild.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/PLoginReputationChild.h"
#include "mozilla/media/PMediaChild.h"
#include "mozilla/net/PNeckoChild.h"
#include "mozilla/extensions/PStreamFilterChild.h"
#include "mozilla/gmp/PGMPContentChild.h"
#include "mozilla/gmp/PGMPServiceChild.h"
#include "mozilla/plugins/PPluginModuleChild.h"
#include "mozilla/gmp/PGMPChild.h"
#include "mozilla/embedding/PPrintingChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/docshell/POfflineCacheUpdateChild.h"
#include "mozilla/dom/PSpeechSynthesisChild.h"
#include "mozilla/ipc/PTestShellChild.h"
#include "mozilla/PRemoteSpellcheckEngineChild.h"
#include "mozilla/PWebBrowserPersistDocumentChild.h"
#include "mozilla/dom/PWebrtcGlobalChild.h"
#include "mozilla/dom/PWindowGlobalChild.h"
#include "mozilla/dom/PPresentationChild.h"
#include "mozilla/dom/PURLClassifierChild.h"
#include "mozilla/dom/PURLClassifierLocalChild.h"
#include "mozilla/gfx/PVRManagerChild.h"
#include "mozilla/PRemoteDecoderManagerChild.h"
#include "mozilla/PProfilerChild.h"
#include "mozilla/loader/PScriptCacheChild.h"
#include "mozilla/dom/PSessionStorageObserverChild.h"
#include "mozilla/PBenchmarkStorageChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PContentChild::RecvPFileDescriptorSetConstructor(
        PFileDescriptorSetChild* actor,
        const FileDescriptor& fd) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentChild::RecvPWebBrowserPersistDocumentConstructor(
        PWebBrowserPersistDocumentChild* actor,
        PBrowserChild* aBrowser,
        const MaybeDiscardedBrowsingContext& aContext) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentChild::RecvPCycleCollectWithLogsConstructor(
        PCycleCollectWithLogsChild* actor,
        const bool& dumpAllTraces,
        const FileDescriptor& gcLog,
        const FileDescriptor& ccLog) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentChild::RecvPTestShellConstructor(PTestShellChild* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentChild::RecvPScriptCacheConstructor(
        PScriptCacheChild* actor,
        const FileDescOrError& cacheFile,
        const bool& wantCacheData) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentChild::RecvPParentToChildStreamConstructor(PParentToChildStreamChild* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentChild::RecvPRemoteLazyInputStreamConstructor(
        PRemoteLazyInputStreamChild* actor,
        const nsID& aID,
        const uint64_t& aSize) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PContentChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PContentChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PContentChild::EnteredCxxStack() -> void
{
}

auto PContentChild::ExitedCxxStack() -> void
{
}

auto PContentChild::EnteredCall() -> void
{
}

auto PContentChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PContentChild::PContentChild() :
    mozilla::ipc::IToplevelProtocol("PContentChild", PContentMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PContentChild);
}

PContentChild::~PContentChild()
{
    MOZ_COUNT_DTOR(PContentChild);
}

auto PContentChild::ManagedPBrowserChild(nsTArray<PBrowserChild*>& aArr) const -> void
{
    mManagedPBrowserChild.ToArray(aArr);
}

auto PContentChild::ManagedPBrowserChild() const -> const ManagedContainer<PBrowserChild>&
{
    return mManagedPBrowserChild;
}

auto PContentChild::ManagedPContentPermissionRequestChild(nsTArray<PContentPermissionRequestChild*>& aArr) const -> void
{
    mManagedPContentPermissionRequestChild.ToArray(aArr);
}

auto PContentChild::ManagedPContentPermissionRequestChild() const -> const ManagedContainer<PContentPermissionRequestChild>&
{
    return mManagedPContentPermissionRequestChild;
}

auto PContentChild::ManagedPCycleCollectWithLogsChild(nsTArray<PCycleCollectWithLogsChild*>& aArr) const -> void
{
    mManagedPCycleCollectWithLogsChild.ToArray(aArr);
}

auto PContentChild::ManagedPCycleCollectWithLogsChild() const -> const ManagedContainer<PCycleCollectWithLogsChild>&
{
    return mManagedPCycleCollectWithLogsChild;
}

auto PContentChild::ManagedPExternalHelperAppChild(nsTArray<PExternalHelperAppChild*>& aArr) const -> void
{
    mManagedPExternalHelperAppChild.ToArray(aArr);
}

auto PContentChild::ManagedPExternalHelperAppChild() const -> const ManagedContainer<PExternalHelperAppChild>&
{
    return mManagedPExternalHelperAppChild;
}

auto PContentChild::ManagedPFileDescriptorSetChild(nsTArray<PFileDescriptorSetChild*>& aArr) const -> void
{
    mManagedPFileDescriptorSetChild.ToArray(aArr);
}

auto PContentChild::ManagedPFileDescriptorSetChild() const -> const ManagedContainer<PFileDescriptorSetChild>&
{
    return mManagedPFileDescriptorSetChild;
}

auto PContentChild::ManagedPHalChild(nsTArray<PHalChild*>& aArr) const -> void
{
    mManagedPHalChild.ToArray(aArr);
}

auto PContentChild::ManagedPHalChild() const -> const ManagedContainer<PHalChild>&
{
    return mManagedPHalChild;
}

auto PContentChild::ManagedPHandlerServiceChild(nsTArray<PHandlerServiceChild*>& aArr) const -> void
{
    mManagedPHandlerServiceChild.ToArray(aArr);
}

auto PContentChild::ManagedPHandlerServiceChild() const -> const ManagedContainer<PHandlerServiceChild>&
{
    return mManagedPHandlerServiceChild;
}

auto PContentChild::ManagedPHeapSnapshotTempFileHelperChild(nsTArray<PHeapSnapshotTempFileHelperChild*>& aArr) const -> void
{
    mManagedPHeapSnapshotTempFileHelperChild.ToArray(aArr);
}

auto PContentChild::ManagedPHeapSnapshotTempFileHelperChild() const -> const ManagedContainer<PHeapSnapshotTempFileHelperChild>&
{
    return mManagedPHeapSnapshotTempFileHelperChild;
}

auto PContentChild::ManagedPRemoteLazyInputStreamChild(nsTArray<PRemoteLazyInputStreamChild*>& aArr) const -> void
{
    mManagedPRemoteLazyInputStreamChild.ToArray(aArr);
}

auto PContentChild::ManagedPRemoteLazyInputStreamChild() const -> const ManagedContainer<PRemoteLazyInputStreamChild>&
{
    return mManagedPRemoteLazyInputStreamChild;
}

auto PContentChild::ManagedPMediaChild(nsTArray<PMediaChild*>& aArr) const -> void
{
    mManagedPMediaChild.ToArray(aArr);
}

auto PContentChild::ManagedPMediaChild() const -> const ManagedContainer<PMediaChild>&
{
    return mManagedPMediaChild;
}

auto PContentChild::ManagedPNeckoChild(nsTArray<PNeckoChild*>& aArr) const -> void
{
    mManagedPNeckoChild.ToArray(aArr);
}

auto PContentChild::ManagedPNeckoChild() const -> const ManagedContainer<PNeckoChild>&
{
    return mManagedPNeckoChild;
}

auto PContentChild::ManagedPOfflineCacheUpdateChild(nsTArray<POfflineCacheUpdateChild*>& aArr) const -> void
{
    mManagedPOfflineCacheUpdateChild.ToArray(aArr);
}

auto PContentChild::ManagedPOfflineCacheUpdateChild() const -> const ManagedContainer<POfflineCacheUpdateChild>&
{
    return mManagedPOfflineCacheUpdateChild;
}

auto PContentChild::ManagedPPrintingChild(nsTArray<PPrintingChild*>& aArr) const -> void
{
    mManagedPPrintingChild.ToArray(aArr);
}

auto PContentChild::ManagedPPrintingChild() const -> const ManagedContainer<PPrintingChild>&
{
    return mManagedPPrintingChild;
}

auto PContentChild::ManagedPChildToParentStreamChild(nsTArray<PChildToParentStreamChild*>& aArr) const -> void
{
    mManagedPChildToParentStreamChild.ToArray(aArr);
}

auto PContentChild::ManagedPChildToParentStreamChild() const -> const ManagedContainer<PChildToParentStreamChild>&
{
    return mManagedPChildToParentStreamChild;
}

auto PContentChild::ManagedPParentToChildStreamChild(nsTArray<PParentToChildStreamChild*>& aArr) const -> void
{
    mManagedPParentToChildStreamChild.ToArray(aArr);
}

auto PContentChild::ManagedPParentToChildStreamChild() const -> const ManagedContainer<PParentToChildStreamChild>&
{
    return mManagedPParentToChildStreamChild;
}

auto PContentChild::ManagedPSpeechSynthesisChild(nsTArray<PSpeechSynthesisChild*>& aArr) const -> void
{
    mManagedPSpeechSynthesisChild.ToArray(aArr);
}

auto PContentChild::ManagedPSpeechSynthesisChild() const -> const ManagedContainer<PSpeechSynthesisChild>&
{
    return mManagedPSpeechSynthesisChild;
}

auto PContentChild::ManagedPTestShellChild(nsTArray<PTestShellChild*>& aArr) const -> void
{
    mManagedPTestShellChild.ToArray(aArr);
}

auto PContentChild::ManagedPTestShellChild() const -> const ManagedContainer<PTestShellChild>&
{
    return mManagedPTestShellChild;
}

auto PContentChild::ManagedPRemoteSpellcheckEngineChild(nsTArray<PRemoteSpellcheckEngineChild*>& aArr) const -> void
{
    mManagedPRemoteSpellcheckEngineChild.ToArray(aArr);
}

auto PContentChild::ManagedPRemoteSpellcheckEngineChild() const -> const ManagedContainer<PRemoteSpellcheckEngineChild>&
{
    return mManagedPRemoteSpellcheckEngineChild;
}

auto PContentChild::ManagedPWebBrowserPersistDocumentChild(nsTArray<PWebBrowserPersistDocumentChild*>& aArr) const -> void
{
    mManagedPWebBrowserPersistDocumentChild.ToArray(aArr);
}

auto PContentChild::ManagedPWebBrowserPersistDocumentChild() const -> const ManagedContainer<PWebBrowserPersistDocumentChild>&
{
    return mManagedPWebBrowserPersistDocumentChild;
}

auto PContentChild::ManagedPWebrtcGlobalChild(nsTArray<PWebrtcGlobalChild*>& aArr) const -> void
{
    mManagedPWebrtcGlobalChild.ToArray(aArr);
}

auto PContentChild::ManagedPWebrtcGlobalChild() const -> const ManagedContainer<PWebrtcGlobalChild>&
{
    return mManagedPWebrtcGlobalChild;
}

auto PContentChild::ManagedPPresentationChild(nsTArray<PPresentationChild*>& aArr) const -> void
{
    mManagedPPresentationChild.ToArray(aArr);
}

auto PContentChild::ManagedPPresentationChild() const -> const ManagedContainer<PPresentationChild>&
{
    return mManagedPPresentationChild;
}

auto PContentChild::ManagedPURLClassifierChild(nsTArray<PURLClassifierChild*>& aArr) const -> void
{
    mManagedPURLClassifierChild.ToArray(aArr);
}

auto PContentChild::ManagedPURLClassifierChild() const -> const ManagedContainer<PURLClassifierChild>&
{
    return mManagedPURLClassifierChild;
}

auto PContentChild::ManagedPURLClassifierLocalChild(nsTArray<PURLClassifierLocalChild*>& aArr) const -> void
{
    mManagedPURLClassifierLocalChild.ToArray(aArr);
}

auto PContentChild::ManagedPURLClassifierLocalChild() const -> const ManagedContainer<PURLClassifierLocalChild>&
{
    return mManagedPURLClassifierLocalChild;
}

auto PContentChild::ManagedPScriptCacheChild(nsTArray<PScriptCacheChild*>& aArr) const -> void
{
    mManagedPScriptCacheChild.ToArray(aArr);
}

auto PContentChild::ManagedPScriptCacheChild() const -> const ManagedContainer<PScriptCacheChild>&
{
    return mManagedPScriptCacheChild;
}

auto PContentChild::ManagedPLoginReputationChild(nsTArray<PLoginReputationChild*>& aArr) const -> void
{
    mManagedPLoginReputationChild.ToArray(aArr);
}

auto PContentChild::ManagedPLoginReputationChild() const -> const ManagedContainer<PLoginReputationChild>&
{
    return mManagedPLoginReputationChild;
}

auto PContentChild::ManagedPSessionStorageObserverChild(nsTArray<PSessionStorageObserverChild*>& aArr) const -> void
{
    mManagedPSessionStorageObserverChild.ToArray(aArr);
}

auto PContentChild::ManagedPSessionStorageObserverChild() const -> const ManagedContainer<PSessionStorageObserverChild>&
{
    return mManagedPSessionStorageObserverChild;
}

auto PContentChild::ManagedPBenchmarkStorageChild(nsTArray<PBenchmarkStorageChild*>& aArr) const -> void
{
    mManagedPBenchmarkStorageChild.ToArray(aArr);
}

auto PContentChild::ManagedPBenchmarkStorageChild() const -> const ManagedContainer<PBenchmarkStorageChild>&
{
    return mManagedPBenchmarkStorageChild;
}

auto PContentChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBrowserChild.Count();
    total += mManagedPContentPermissionRequestChild.Count();
    total += mManagedPCycleCollectWithLogsChild.Count();
    total += mManagedPExternalHelperAppChild.Count();
    total += mManagedPFileDescriptorSetChild.Count();
    total += mManagedPHalChild.Count();
    total += mManagedPHandlerServiceChild.Count();
    total += mManagedPHeapSnapshotTempFileHelperChild.Count();
    total += mManagedPRemoteLazyInputStreamChild.Count();
    total += mManagedPMediaChild.Count();
    total += mManagedPNeckoChild.Count();
    total += mManagedPOfflineCacheUpdateChild.Count();
    total += mManagedPPrintingChild.Count();
    total += mManagedPChildToParentStreamChild.Count();
    total += mManagedPParentToChildStreamChild.Count();
    total += mManagedPSpeechSynthesisChild.Count();
    total += mManagedPTestShellChild.Count();
    total += mManagedPRemoteSpellcheckEngineChild.Count();
    total += mManagedPWebBrowserPersistDocumentChild.Count();
    total += mManagedPWebrtcGlobalChild.Count();
    total += mManagedPPresentationChild.Count();
    total += mManagedPURLClassifierChild.Count();
    total += mManagedPURLClassifierLocalChild.Count();
    total += mManagedPScriptCacheChild.Count();
    total += mManagedPLoginReputationChild.Count();
    total += mManagedPSessionStorageObserverChild.Count();
    total += mManagedPBenchmarkStorageChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBrowserChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPContentPermissionRequestChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPCycleCollectWithLogsChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPExternalHelperAppChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPFileDescriptorSetChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPHalChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPHandlerServiceChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPHeapSnapshotTempFileHelperChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPRemoteLazyInputStreamChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPMediaChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPNeckoChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPOfflineCacheUpdateChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPrintingChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPChildToParentStreamChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPParentToChildStreamChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPSpeechSynthesisChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPTestShellChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPRemoteSpellcheckEngineChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPWebBrowserPersistDocumentChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPWebrtcGlobalChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPresentationChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPURLClassifierChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPURLClassifierLocalChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPScriptCacheChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPLoginReputationChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPSessionStorageObserverChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBenchmarkStorageChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PContentChild::OpenPBrowserEndpoint(PBrowserChild* aActor) -> ManagedEndpoint<PBrowserParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserChild actor");
        return ManagedEndpoint<PBrowserParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBrowserChild.PutEntry(aActor);

    return ManagedEndpoint<PBrowserParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPBrowserEndpoint(
        ManagedEndpoint<PBrowserChild> aEndpoint,
        PBrowserChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBrowserChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPContentPermissionRequestEndpoint(PContentPermissionRequestChild* aActor) -> ManagedEndpoint<PContentPermissionRequestParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PContentPermissionRequestChild actor");
        return ManagedEndpoint<PContentPermissionRequestParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPContentPermissionRequestChild.PutEntry(aActor);

    return ManagedEndpoint<PContentPermissionRequestParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPContentPermissionRequestEndpoint(
        ManagedEndpoint<PContentPermissionRequestChild> aEndpoint,
        PContentPermissionRequestChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PContentPermissionRequestChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPContentPermissionRequestChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPCycleCollectWithLogsEndpoint(PCycleCollectWithLogsChild* aActor) -> ManagedEndpoint<PCycleCollectWithLogsParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PCycleCollectWithLogsChild actor");
        return ManagedEndpoint<PCycleCollectWithLogsParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPCycleCollectWithLogsChild.PutEntry(aActor);

    return ManagedEndpoint<PCycleCollectWithLogsParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPCycleCollectWithLogsEndpoint(
        ManagedEndpoint<PCycleCollectWithLogsChild> aEndpoint,
        PCycleCollectWithLogsChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PCycleCollectWithLogsChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPCycleCollectWithLogsChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPExternalHelperAppEndpoint(PExternalHelperAppChild* aActor) -> ManagedEndpoint<PExternalHelperAppParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PExternalHelperAppChild actor");
        return ManagedEndpoint<PExternalHelperAppParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPExternalHelperAppChild.PutEntry(aActor);

    return ManagedEndpoint<PExternalHelperAppParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPExternalHelperAppEndpoint(
        ManagedEndpoint<PExternalHelperAppChild> aEndpoint,
        PExternalHelperAppChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PExternalHelperAppChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPExternalHelperAppChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPFileDescriptorSetEndpoint(PFileDescriptorSetChild* aActor) -> ManagedEndpoint<PFileDescriptorSetParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PFileDescriptorSetChild actor");
        return ManagedEndpoint<PFileDescriptorSetParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPFileDescriptorSetChild.PutEntry(aActor);

    return ManagedEndpoint<PFileDescriptorSetParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPFileDescriptorSetEndpoint(
        ManagedEndpoint<PFileDescriptorSetChild> aEndpoint,
        PFileDescriptorSetChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PFileDescriptorSetChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPFileDescriptorSetChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPHalEndpoint(PHalChild* aActor) -> ManagedEndpoint<PHalParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PHalChild actor");
        return ManagedEndpoint<PHalParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPHalChild.PutEntry(aActor);

    return ManagedEndpoint<PHalParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPHalEndpoint(
        ManagedEndpoint<PHalChild> aEndpoint,
        PHalChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PHalChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPHalChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPHandlerServiceEndpoint(PHandlerServiceChild* aActor) -> ManagedEndpoint<PHandlerServiceParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PHandlerServiceChild actor");
        return ManagedEndpoint<PHandlerServiceParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPHandlerServiceChild.PutEntry(aActor);

    return ManagedEndpoint<PHandlerServiceParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPHandlerServiceEndpoint(
        ManagedEndpoint<PHandlerServiceChild> aEndpoint,
        PHandlerServiceChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PHandlerServiceChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPHandlerServiceChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPHeapSnapshotTempFileHelperEndpoint(PHeapSnapshotTempFileHelperChild* aActor) -> ManagedEndpoint<PHeapSnapshotTempFileHelperParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PHeapSnapshotTempFileHelperChild actor");
        return ManagedEndpoint<PHeapSnapshotTempFileHelperParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPHeapSnapshotTempFileHelperChild.PutEntry(aActor);

    return ManagedEndpoint<PHeapSnapshotTempFileHelperParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPHeapSnapshotTempFileHelperEndpoint(
        ManagedEndpoint<PHeapSnapshotTempFileHelperChild> aEndpoint,
        PHeapSnapshotTempFileHelperChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PHeapSnapshotTempFileHelperChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPHeapSnapshotTempFileHelperChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPRemoteLazyInputStreamEndpoint(PRemoteLazyInputStreamChild* aActor) -> ManagedEndpoint<PRemoteLazyInputStreamParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteLazyInputStreamChild actor");
        return ManagedEndpoint<PRemoteLazyInputStreamParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPRemoteLazyInputStreamChild.PutEntry(aActor);

    return ManagedEndpoint<PRemoteLazyInputStreamParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPRemoteLazyInputStreamEndpoint(
        ManagedEndpoint<PRemoteLazyInputStreamChild> aEndpoint,
        PRemoteLazyInputStreamChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteLazyInputStreamChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPRemoteLazyInputStreamChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPMediaEndpoint(PMediaChild* aActor) -> ManagedEndpoint<PMediaParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PMediaChild actor");
        return ManagedEndpoint<PMediaParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPMediaChild.PutEntry(aActor);

    return ManagedEndpoint<PMediaParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPMediaEndpoint(
        ManagedEndpoint<PMediaChild> aEndpoint,
        PMediaChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PMediaChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPMediaChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPNeckoEndpoint(PNeckoChild* aActor) -> ManagedEndpoint<PNeckoParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PNeckoChild actor");
        return ManagedEndpoint<PNeckoParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPNeckoChild.PutEntry(aActor);

    return ManagedEndpoint<PNeckoParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPNeckoEndpoint(
        ManagedEndpoint<PNeckoChild> aEndpoint,
        PNeckoChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PNeckoChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPNeckoChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPOfflineCacheUpdateEndpoint(POfflineCacheUpdateChild* aActor) -> ManagedEndpoint<POfflineCacheUpdateParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null POfflineCacheUpdateChild actor");
        return ManagedEndpoint<POfflineCacheUpdateParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPOfflineCacheUpdateChild.PutEntry(aActor);

    return ManagedEndpoint<POfflineCacheUpdateParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPOfflineCacheUpdateEndpoint(
        ManagedEndpoint<POfflineCacheUpdateChild> aEndpoint,
        POfflineCacheUpdateChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null POfflineCacheUpdateChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPOfflineCacheUpdateChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPPrintingEndpoint(PPrintingChild* aActor) -> ManagedEndpoint<PPrintingParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintingChild actor");
        return ManagedEndpoint<PPrintingParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPrintingChild.PutEntry(aActor);

    return ManagedEndpoint<PPrintingParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPPrintingEndpoint(
        ManagedEndpoint<PPrintingChild> aEndpoint,
        PPrintingChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintingChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPrintingChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPChildToParentStreamEndpoint(PChildToParentStreamChild* aActor) -> ManagedEndpoint<PChildToParentStreamParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PChildToParentStreamChild actor");
        return ManagedEndpoint<PChildToParentStreamParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPChildToParentStreamChild.PutEntry(aActor);

    return ManagedEndpoint<PChildToParentStreamParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPChildToParentStreamEndpoint(
        ManagedEndpoint<PChildToParentStreamChild> aEndpoint,
        PChildToParentStreamChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PChildToParentStreamChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPChildToParentStreamChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPParentToChildStreamEndpoint(PParentToChildStreamChild* aActor) -> ManagedEndpoint<PParentToChildStreamParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PParentToChildStreamChild actor");
        return ManagedEndpoint<PParentToChildStreamParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPParentToChildStreamChild.PutEntry(aActor);

    return ManagedEndpoint<PParentToChildStreamParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPParentToChildStreamEndpoint(
        ManagedEndpoint<PParentToChildStreamChild> aEndpoint,
        PParentToChildStreamChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PParentToChildStreamChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPParentToChildStreamChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPSpeechSynthesisEndpoint(PSpeechSynthesisChild* aActor) -> ManagedEndpoint<PSpeechSynthesisParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisChild actor");
        return ManagedEndpoint<PSpeechSynthesisParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPSpeechSynthesisChild.PutEntry(aActor);

    return ManagedEndpoint<PSpeechSynthesisParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPSpeechSynthesisEndpoint(
        ManagedEndpoint<PSpeechSynthesisChild> aEndpoint,
        PSpeechSynthesisChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPSpeechSynthesisChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPTestShellEndpoint(PTestShellChild* aActor) -> ManagedEndpoint<PTestShellParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PTestShellChild actor");
        return ManagedEndpoint<PTestShellParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPTestShellChild.PutEntry(aActor);

    return ManagedEndpoint<PTestShellParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPTestShellEndpoint(
        ManagedEndpoint<PTestShellChild> aEndpoint,
        PTestShellChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PTestShellChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPTestShellChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPRemoteSpellcheckEngineEndpoint(PRemoteSpellcheckEngineChild* aActor) -> ManagedEndpoint<PRemoteSpellcheckEngineParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteSpellcheckEngineChild actor");
        return ManagedEndpoint<PRemoteSpellcheckEngineParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPRemoteSpellcheckEngineChild.PutEntry(aActor);

    return ManagedEndpoint<PRemoteSpellcheckEngineParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPRemoteSpellcheckEngineEndpoint(
        ManagedEndpoint<PRemoteSpellcheckEngineChild> aEndpoint,
        PRemoteSpellcheckEngineChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteSpellcheckEngineChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPRemoteSpellcheckEngineChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPWebBrowserPersistDocumentEndpoint(PWebBrowserPersistDocumentChild* aActor) -> ManagedEndpoint<PWebBrowserPersistDocumentParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistDocumentChild actor");
        return ManagedEndpoint<PWebBrowserPersistDocumentParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistDocumentChild.PutEntry(aActor);

    return ManagedEndpoint<PWebBrowserPersistDocumentParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPWebBrowserPersistDocumentEndpoint(
        ManagedEndpoint<PWebBrowserPersistDocumentChild> aEndpoint,
        PWebBrowserPersistDocumentChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistDocumentChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWebBrowserPersistDocumentChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPWebrtcGlobalEndpoint(PWebrtcGlobalChild* aActor) -> ManagedEndpoint<PWebrtcGlobalParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebrtcGlobalChild actor");
        return ManagedEndpoint<PWebrtcGlobalParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWebrtcGlobalChild.PutEntry(aActor);

    return ManagedEndpoint<PWebrtcGlobalParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPWebrtcGlobalEndpoint(
        ManagedEndpoint<PWebrtcGlobalChild> aEndpoint,
        PWebrtcGlobalChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebrtcGlobalChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWebrtcGlobalChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPPresentationEndpoint(PPresentationChild* aActor) -> ManagedEndpoint<PPresentationParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationChild actor");
        return ManagedEndpoint<PPresentationParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPresentationChild.PutEntry(aActor);

    return ManagedEndpoint<PPresentationParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPPresentationEndpoint(
        ManagedEndpoint<PPresentationChild> aEndpoint,
        PPresentationChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPresentationChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPURLClassifierEndpoint(PURLClassifierChild* aActor) -> ManagedEndpoint<PURLClassifierParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PURLClassifierChild actor");
        return ManagedEndpoint<PURLClassifierParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPURLClassifierChild.PutEntry(aActor);

    return ManagedEndpoint<PURLClassifierParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPURLClassifierEndpoint(
        ManagedEndpoint<PURLClassifierChild> aEndpoint,
        PURLClassifierChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PURLClassifierChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPURLClassifierChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPURLClassifierLocalEndpoint(PURLClassifierLocalChild* aActor) -> ManagedEndpoint<PURLClassifierLocalParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PURLClassifierLocalChild actor");
        return ManagedEndpoint<PURLClassifierLocalParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPURLClassifierLocalChild.PutEntry(aActor);

    return ManagedEndpoint<PURLClassifierLocalParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPURLClassifierLocalEndpoint(
        ManagedEndpoint<PURLClassifierLocalChild> aEndpoint,
        PURLClassifierLocalChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PURLClassifierLocalChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPURLClassifierLocalChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPScriptCacheEndpoint(PScriptCacheChild* aActor) -> ManagedEndpoint<PScriptCacheParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PScriptCacheChild actor");
        return ManagedEndpoint<PScriptCacheParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPScriptCacheChild.PutEntry(aActor);

    return ManagedEndpoint<PScriptCacheParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPScriptCacheEndpoint(
        ManagedEndpoint<PScriptCacheChild> aEndpoint,
        PScriptCacheChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PScriptCacheChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPScriptCacheChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPLoginReputationEndpoint(PLoginReputationChild* aActor) -> ManagedEndpoint<PLoginReputationParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PLoginReputationChild actor");
        return ManagedEndpoint<PLoginReputationParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPLoginReputationChild.PutEntry(aActor);

    return ManagedEndpoint<PLoginReputationParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPLoginReputationEndpoint(
        ManagedEndpoint<PLoginReputationChild> aEndpoint,
        PLoginReputationChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PLoginReputationChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPLoginReputationChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPSessionStorageObserverEndpoint(PSessionStorageObserverChild* aActor) -> ManagedEndpoint<PSessionStorageObserverParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PSessionStorageObserverChild actor");
        return ManagedEndpoint<PSessionStorageObserverParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPSessionStorageObserverChild.PutEntry(aActor);

    return ManagedEndpoint<PSessionStorageObserverParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPSessionStorageObserverEndpoint(
        ManagedEndpoint<PSessionStorageObserverChild> aEndpoint,
        PSessionStorageObserverChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PSessionStorageObserverChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPSessionStorageObserverChild.PutEntry(aActor);

    return true;
}

auto PContentChild::OpenPBenchmarkStorageEndpoint(PBenchmarkStorageChild* aActor) -> ManagedEndpoint<PBenchmarkStorageParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBenchmarkStorageChild actor");
        return ManagedEndpoint<PBenchmarkStorageParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBenchmarkStorageChild.PutEntry(aActor);

    return ManagedEndpoint<PBenchmarkStorageParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PContentChild::BindPBenchmarkStorageEndpoint(
        ManagedEndpoint<PBenchmarkStorageChild> aEndpoint,
        PBenchmarkStorageChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBenchmarkStorageChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBenchmarkStorageChild.PutEntry(aActor);

    return true;
}

auto PContentChild::SendConstructPopupBrowser(
        ManagedEndpoint<mozilla::dom::PBrowserParent>&& browserEp,
        ManagedEndpoint<mozilla::dom::PWindowGlobalParent>&& windowEp,
        const TabId& tabId,
        const IPCTabContext& context,
        const WindowGlobalInit& windowInit,
        const uint32_t& chromeFlags) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ConstructPopupBrowser(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(browserEp));
    // Sentinel = 'browserEp'
    (msg__)->WriteSentinel(318833594);
    WriteIPDLParam(msg__, this, std::move(windowEp));
    // Sentinel = 'windowEp'
    (msg__)->WriteSentinel(255984462);
    WriteIPDLParam(msg__, this, tabId);
    // Sentinel = 'tabId'
    (msg__)->WriteSentinel(99156453);
    WriteIPDLParam(msg__, this, context);
    // Sentinel = 'context'
    (msg__)->WriteSentinel(199164678);
    WriteIPDLParam(msg__, this, windowInit);
    // Sentinel = 'windowInit'
    (msg__)->WriteSentinel(388891693);
    WriteIPDLParam(msg__, this, chromeFlags);
    // Sentinel = 'chromeFlags'
    (msg__)->WriteSentinel(446760044);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ConstructPopupBrowser", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendCloneDocumentTreeInto(
        const MaybeDiscardedBrowsingContext& aSourceBc,
        const MaybeDiscardedBrowsingContext& aTargetBc) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CloneDocumentTreeInto(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aSourceBc);
    // Sentinel = 'aSourceBc'
    (msg__)->WriteSentinel(296551288);
    WriteIPDLParam(msg__, this, aTargetBc);
    // Sentinel = 'aTargetBc'
    (msg__)->WriteSentinel(289342318);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CloneDocumentTreeInto", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendPFileDescriptorSetConstructor(const FileDescriptor& fd) -> PFileDescriptorSetChild*
{
    PFileDescriptorSetChild* actor = (static_cast<ContentChild*>(this))->AllocPFileDescriptorSetChild(fd);
    return SendPFileDescriptorSetConstructor(actor, fd);
}

auto PContentChild::SendPFileDescriptorSetConstructor(
        PFileDescriptorSetChild* actor,
        const FileDescriptor& fd) -> PFileDescriptorSetChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PFileDescriptorSetChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPFileDescriptorSetChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PFileDescriptorSetConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, fd);
    // Sentinel = 'fd'
    (msg__)->WriteSentinel(20054219);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PFileDescriptorSetConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PFileDescriptorSetChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PFileDescriptorSetMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPWebBrowserPersistDocumentConstructor(
        PBrowserChild* aBrowser,
        const MaybeDiscardedBrowsingContext& aContext) -> PWebBrowserPersistDocumentChild*
{
    PWebBrowserPersistDocumentChild* actor = (static_cast<ContentChild*>(this))->AllocPWebBrowserPersistDocumentChild(aBrowser, aContext);
    return SendPWebBrowserPersistDocumentConstructor(actor, aBrowser, aContext);
}

auto PContentChild::SendPWebBrowserPersistDocumentConstructor(
        PWebBrowserPersistDocumentChild* actor,
        PBrowserChild* aBrowser,
        const MaybeDiscardedBrowsingContext& aContext) -> PWebBrowserPersistDocumentChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistDocumentChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistDocumentChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PWebBrowserPersistDocumentConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aBrowser);
    // Sentinel = 'aBrowser'
    (msg__)->WriteSentinel(237372230);
    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PWebBrowserPersistDocumentConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PWebBrowserPersistDocumentChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PWebBrowserPersistDocumentMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendRawMessage(
        const JSActorMessageMeta& aMetadata,
        const mozilla::Maybe<ClonedMessageData>& aData,
        const mozilla::Maybe<ClonedMessageData>& aStack) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RawMessage(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMetadata);
    // Sentinel = 'aMetadata'
    (msg__)->WriteSentinel(288752515);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);
    WriteIPDLParam(msg__, this, aStack);
    // Sentinel = 'aStack'
    (msg__)->WriteSentinel(135201368);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RawMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSessionHistoryUpdate(
        const MaybeDiscardedBrowsingContext& aTopContext,
        const int32_t& aIndex,
        const int32_t& aLength,
        const nsID& aChangeID) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SessionHistoryUpdate(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aTopContext);
    // Sentinel = 'aTopContext'
    (msg__)->WriteSentinel(433915002);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);
    WriteIPDLParam(msg__, this, aLength);
    // Sentinel = 'aLength'
    (msg__)->WriteSentinel(179045060);
    WriteIPDLParam(msg__, this, aChangeID);
    // Sentinel = 'aChangeID'
    (msg__)->WriteSentinel(275710773);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSynchronizeLayoutHistoryState(
        const MaybeDiscardedBrowsingContext& aContext,
        nsILayoutHistoryState* aState) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SynchronizeLayoutHistoryState(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SynchronizeLayoutHistoryState", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSessionHistoryEntryTitle(
        const MaybeDiscardedBrowsingContext& aContext,
        const nsString& aTitle) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SessionHistoryEntryTitle(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aTitle);
    // Sentinel = 'aTitle'
    (msg__)->WriteSentinel(137167460);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryEntryTitle", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSessionHistoryEntryScrollRestorationIsManual(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aIsManual) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SessionHistoryEntryScrollRestorationIsManual(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aIsManual);
    // Sentinel = 'aIsManual'
    (msg__)->WriteSentinel(282526588);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryEntryScrollRestorationIsManual", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSessionHistoryEntryCacheKey(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint32_t& aCacheKey) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SessionHistoryEntryCacheKey(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCacheKey);
    // Sentinel = 'aCacheKey'
    (msg__)->WriteSentinel(272827231);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryEntryCacheKey", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSessionHistoryEntryStoreWindowNameInContiguousEntries(
        const MaybeDiscardedBrowsingContext& aContext,
        const nsString& aName) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SessionHistoryEntryStoreWindowNameInContiguousEntries(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aName);
    // Sentinel = 'aName'
    (msg__)->WriteSentinel(92537315);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SessionHistoryEntryStoreWindowNameInContiguousEntries", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetLoadingSessionHistoryInfoFromParent(
        const MaybeDiscardedBrowsingContext& aContext,
        mozilla::ipc::ResolveCallback<Tuple<mozilla::Maybe<LoadingSessionHistoryInfo>, int32_t, int32_t>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_GetLoadingSessionHistoryInfoFromParent(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetLoadingSessionHistoryInfoFromParent", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendGetLoadingSessionHistoryInfoFromParent(const MaybeDiscardedBrowsingContext& aContext) -> RefPtr<GetLoadingSessionHistoryInfoFromParentPromise>
{
    RefPtr<MozPromise<Tuple<mozilla::Maybe<LoadingSessionHistoryInfo>, int32_t, int32_t>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<Tuple<mozilla::Maybe<LoadingSessionHistoryInfo>, int32_t, int32_t>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetLoadingSessionHistoryInfoFromParent(std::move(aContext), [promise__](Tuple<mozilla::Maybe<LoadingSessionHistoryInfo>, int32_t, int32_t>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendInitBackground(Endpoint<mozilla::ipc::PBackgroundParent>&& aEndpoint) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitBackground(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(aEndpoint));
    // Sentinel = 'aEndpoint'
    (msg__)->WriteSentinel(292225955);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitBackground", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendCreateGMPService() -> bool
{
    IPC::Message* msg__ = PContent::Msg_CreateGMPService(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CreateGMPService", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendInitStreamFilter(
        const uint64_t& channelId,
        const nsString& addonId,
        mozilla::ipc::ResolveCallback<Endpoint<mozilla::extensions::PStreamFilterChild>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_InitStreamFilter(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, channelId);
    // Sentinel = 'channelId'
    (msg__)->WriteSentinel(301138823);
    WriteIPDLParam(msg__, this, addonId);
    // Sentinel = 'addonId'
    (msg__)->WriteSentinel(183894708);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitStreamFilter", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendInitStreamFilter(
        const uint64_t& channelId,
        const nsString& addonId) -> RefPtr<InitStreamFilterPromise>
{
    RefPtr<MozPromise<Endpoint<mozilla::extensions::PStreamFilterChild>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<Endpoint<mozilla::extensions::PStreamFilterChild>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendInitStreamFilter(std::move(channelId), std::move(addonId), [promise__](Endpoint<mozilla::extensions::PStreamFilterChild>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendLoadPlugin(
        const uint32_t& aPluginId,
        nsresult* aResult,
        uint32_t* aRunID,
        Endpoint<mozilla::plugins::PPluginModuleParent>* aEndpoint) -> bool
{
    IPC::Message* msg__ = PContent::Msg_LoadPlugin(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPluginId);
    // Sentinel = 'aPluginId'
    (msg__)->WriteSentinel(294323070);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_LoadPlugin", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_LoadPlugin", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'nsresult'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRunID)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aRunID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 131727908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aEndpoint)))) {
        FatalError("Error deserializing 'Endpoint<mozilla::plugins::PPluginModuleParent>'");
        return false;
    }
    // Sentinel = 'aEndpoint'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 292225955)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::plugins::PPluginModuleParent>'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendConnectPluginBridge(
        const uint32_t& aPluginId,
        nsresult* rv,
        Endpoint<mozilla::plugins::PPluginModuleParent>* aEndpoint) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ConnectPluginBridge(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPluginId);
    // Sentinel = 'aPluginId'
    (msg__)->WriteSentinel(294323070);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ConnectPluginBridge", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_ConnectPluginBridge", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'nsresult'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aEndpoint)))) {
        FatalError("Error deserializing 'Endpoint<mozilla::plugins::PPluginModuleParent>'");
        return false;
    }
    // Sentinel = 'aEndpoint'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 292225955)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::plugins::PPluginModuleParent>'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendPRemoteSpellcheckEngineConstructor() -> PRemoteSpellcheckEngineChild*
{
    PRemoteSpellcheckEngineChild* actor = (static_cast<ContentChild*>(this))->AllocPRemoteSpellcheckEngineChild();
    return SendPRemoteSpellcheckEngineConstructor(actor);
}

auto PContentChild::SendPRemoteSpellcheckEngineConstructor(PRemoteSpellcheckEngineChild* actor) -> PRemoteSpellcheckEngineChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PRemoteSpellcheckEngineChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPRemoteSpellcheckEngineChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PRemoteSpellcheckEngineConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PRemoteSpellcheckEngineConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PRemoteSpellcheckEngineChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PRemoteSpellcheckEngineMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendInitCrashReporter(const NativeThreadId& tid) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitCrashReporter(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, tid);
    // Sentinel = 'tid'
    (msg__)->WriteSentinel(43319618);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitCrashReporter", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendIsSecureURI(
        const uint32_t& aType,
        nsIURI* aURI,
        const uint32_t& aFlags,
        const OriginAttributes& aOriginAttributes,
        bool* isSecureURI) -> bool
{
    IPC::Message* msg__ = PContent::Msg_IsSecureURI(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);
    WriteIPDLParam(msg__, this, aFlags);
    // Sentinel = 'aFlags'
    (msg__)->WriteSentinel(129892943);
    WriteIPDLParam(msg__, this, aOriginAttributes);
    // Sentinel = 'aOriginAttributes'
    (msg__)->WriteSentinel(1021839089);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_IsSecureURI", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_IsSecureURI", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, isSecureURI)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'isSecureURI'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 441189428)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendAccumulateMixedContentHSTS(
        nsIURI* aURI,
        const bool& aActive,
        const OriginAttributes& aOriginAttributes) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AccumulateMixedContentHSTS(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);
    WriteIPDLParam(msg__, this, aActive);
    // Sentinel = 'aActive'
    (msg__)->WriteSentinel(176095934);
    WriteIPDLParam(msg__, this, aOriginAttributes);
    // Sentinel = 'aOriginAttributes'
    (msg__)->WriteSentinel(1021839089);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AccumulateMixedContentHSTS", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendPHalConstructor() -> PHalChild*
{
    PHalChild* actor = (static_cast<ContentChild*>(this))->AllocPHalChild();
    return SendPHalConstructor(actor);
}

auto PContentChild::SendPHalConstructor(PHalChild* actor) -> PHalChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PHalChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPHalChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PHalConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PHalConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PHalChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PHalMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPHeapSnapshotTempFileHelperConstructor() -> PHeapSnapshotTempFileHelperChild*
{
    PHeapSnapshotTempFileHelperChild* actor = (static_cast<ContentChild*>(this))->AllocPHeapSnapshotTempFileHelperChild();
    return SendPHeapSnapshotTempFileHelperConstructor(actor);
}

auto PContentChild::SendPHeapSnapshotTempFileHelperConstructor(PHeapSnapshotTempFileHelperChild* actor) -> PHeapSnapshotTempFileHelperChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PHeapSnapshotTempFileHelperChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPHeapSnapshotTempFileHelperChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PHeapSnapshotTempFileHelperConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PHeapSnapshotTempFileHelperConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PHeapSnapshotTempFileHelperChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PHeapSnapshotTempFileHelperMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPNeckoConstructor() -> PNeckoChild*
{
    PNeckoChild* actor = (static_cast<ContentChild*>(this))->AllocPNeckoChild();
    return SendPNeckoConstructor(actor);
}

auto PContentChild::SendPNeckoConstructor(PNeckoChild* actor) -> PNeckoChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PNeckoChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPNeckoChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PNeckoConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PNeckoConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PNeckoChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PNeckoMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPPrintingConstructor() -> PPrintingChild*
{
    PPrintingChild* actor = (static_cast<ContentChild*>(this))->AllocPPrintingChild();
    return SendPPrintingConstructor(actor);
}

auto PContentChild::SendPPrintingConstructor(PPrintingChild* actor) -> PPrintingChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPrintingChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPrintingChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PPrintingConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PPrintingConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPrintingChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPrintingMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPChildToParentStreamConstructor() -> PChildToParentStreamChild*
{
    PChildToParentStreamChild* actor = (static_cast<ContentChild*>(this))->AllocPChildToParentStreamChild();
    return SendPChildToParentStreamConstructor(actor);
}

auto PContentChild::SendPChildToParentStreamConstructor(PChildToParentStreamChild* actor) -> PChildToParentStreamChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PChildToParentStreamChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPChildToParentStreamChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PChildToParentStreamConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PChildToParentStreamConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PChildToParentStreamChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PChildToParentStreamMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPSpeechSynthesisConstructor() -> PSpeechSynthesisChild*
{
    PSpeechSynthesisChild* actor = (static_cast<ContentChild*>(this))->AllocPSpeechSynthesisChild();
    return SendPSpeechSynthesisConstructor(actor);
}

auto PContentChild::SendPSpeechSynthesisConstructor(PSpeechSynthesisChild* actor) -> PSpeechSynthesisChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPSpeechSynthesisChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PSpeechSynthesisConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PSpeechSynthesisConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PSpeechSynthesisChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PSpeechSynthesisMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPMediaConstructor() -> PMediaChild*
{
    PMediaChild* actor = (static_cast<ContentChild*>(this))->AllocPMediaChild();
    return SendPMediaConstructor(actor);
}

auto PContentChild::SendPMediaConstructor(PMediaChild* actor) -> PMediaChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PMediaChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPMediaChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PMediaConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PMediaConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PMediaChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PMediaMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPWebrtcGlobalConstructor() -> PWebrtcGlobalChild*
{
    PWebrtcGlobalChild* actor = (static_cast<ContentChild*>(this))->AllocPWebrtcGlobalChild();
    return SendPWebrtcGlobalConstructor(actor);
}

auto PContentChild::SendPWebrtcGlobalConstructor(PWebrtcGlobalChild* actor) -> PWebrtcGlobalChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PWebrtcGlobalChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPWebrtcGlobalChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PWebrtcGlobalConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PWebrtcGlobalConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PWebrtcGlobalChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PWebrtcGlobalMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPPresentationConstructor() -> PPresentationChild*
{
    PPresentationChild* actor = (static_cast<ContentChild*>(this))->AllocPPresentationChild();
    return SendPPresentationConstructor(actor);
}

auto PContentChild::SendPPresentationConstructor(PPresentationChild* actor) -> PPresentationChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPresentationChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPresentationChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PPresentationConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PPresentationConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPresentationChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPresentationMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendCreateAudioIPCConnection(
        mozilla::ipc::ResolveCallback<FileDescOrError>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_CreateAudioIPCConnection(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CreateAudioIPCConnection", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendCreateAudioIPCConnection() -> RefPtr<CreateAudioIPCConnectionPromise>
{
    RefPtr<MozPromise<FileDescOrError, ResponseRejectReason, true>::Private> promise__ = new MozPromise<FileDescOrError, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendCreateAudioIPCConnection([promise__](FileDescOrError&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendPURLClassifierConstructor(
        const Principal& principal,
        bool* success) -> PURLClassifierChild*
{
    PURLClassifierChild* actor = (static_cast<ContentChild*>(this))->AllocPURLClassifierChild(principal, success);
    return SendPURLClassifierConstructor(actor, principal, success);
}

auto PContentChild::SendPURLClassifierConstructor(
        PURLClassifierChild* actor,
        const Principal& principal,
        bool* success) -> PURLClassifierChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PURLClassifierChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPURLClassifierChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PURLClassifierConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    // Synchronously send the constructor message to the other side. If
    // the send fails, e.g. due to the remote side shutting down, the
    // actor will be destroyed and potentially freed.
    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PURLClassifierConstructor", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_PURLClassifierConstructor", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }


    if (!(sendok__)) {
        // Warn, destroy the actor and return null if the message
        // failed to send.
        NS_WARNING("Error sending constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PURLClassifierMsgStart, actor);

        return nullptr;
    }


    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, success)))) {
        FatalError("Error deserializing 'bool'");
        return nullptr;
    }
    // Sentinel = 'success'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 200082170)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return nullptr;
    }
    reply__.EndRead(iter__, reply__.type());

    return actor;
}

auto PContentChild::SendPURLClassifierLocalConstructor(
        nsIURI* uri,
        const nsTArray<IPCURLClassifierFeature>& features) -> PURLClassifierLocalChild*
{
    PURLClassifierLocalChild* actor = (static_cast<ContentChild*>(this))->AllocPURLClassifierLocalChild(uri, features);
    return SendPURLClassifierLocalConstructor(actor, uri, features);
}

auto PContentChild::SendPURLClassifierLocalConstructor(
        PURLClassifierLocalChild* actor,
        nsIURI* uri,
        const nsTArray<IPCURLClassifierFeature>& features) -> PURLClassifierLocalChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PURLClassifierLocalChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPURLClassifierLocalChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PURLClassifierLocalConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);
    WriteIPDLParam(msg__, this, features);
    // Sentinel = 'features'
    (msg__)->WriteSentinel(250348384);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PURLClassifierLocalConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PURLClassifierLocalChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PURLClassifierLocalMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPLoginReputationConstructor(nsIURI* formURI) -> PLoginReputationChild*
{
    PLoginReputationChild* actor = (static_cast<ContentChild*>(this))->AllocPLoginReputationChild(formURI);
    return SendPLoginReputationConstructor(actor, formURI);
}

auto PContentChild::SendPLoginReputationConstructor(
        PLoginReputationChild* actor,
        nsIURI* formURI) -> PLoginReputationChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PLoginReputationChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPLoginReputationChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PLoginReputationConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, formURI);
    // Sentinel = 'formURI'
    (msg__)->WriteSentinel(189072037);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PLoginReputationConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PLoginReputationChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PLoginReputationMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPSessionStorageObserverConstructor() -> PSessionStorageObserverChild*
{
    PSessionStorageObserverChild* actor = (static_cast<ContentChild*>(this))->AllocPSessionStorageObserverChild();
    return SendPSessionStorageObserverConstructor(actor);
}

auto PContentChild::SendPSessionStorageObserverConstructor(PSessionStorageObserverChild* actor) -> PSessionStorageObserverChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PSessionStorageObserverChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPSessionStorageObserverChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PSessionStorageObserverConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PSessionStorageObserverConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PSessionStorageObserverChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PSessionStorageObserverMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPBenchmarkStorageConstructor() -> PBenchmarkStorageChild*
{
    PBenchmarkStorageChild* actor = (static_cast<ContentChild*>(this))->AllocPBenchmarkStorageChild();
    return SendPBenchmarkStorageConstructor(actor);
}

auto PContentChild::SendPBenchmarkStorageConstructor(PBenchmarkStorageChild* actor) -> PBenchmarkStorageChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBenchmarkStorageChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBenchmarkStorageChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PBenchmarkStorageConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PBenchmarkStorageConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBenchmarkStorageChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBenchmarkStorageMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendStartVisitedQueries(const nsTArray<RefPtr<nsIURI>>& uri) -> bool
{
    IPC::Message* msg__ = PContent::Msg_StartVisitedQueries(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_StartVisitedQueries", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSetURITitle(
        nsIURI* uri,
        const nsString& title) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetURITitle(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);
    WriteIPDLParam(msg__, this, title);
    // Sentinel = 'title'
    (msg__)->WriteSentinel(109445667);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetURITitle", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendLoadURIExternal(
        nsIURI* uri,
        nsIPrincipal* triggeringPrincipal,
        const MaybeDiscardedBrowsingContext& browsingContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_LoadURIExternal(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);
    WriteIPDLParam(msg__, this, triggeringPrincipal);
    // Sentinel = 'triggeringPrincipal'
    (msg__)->WriteSentinel(1325729749);
    WriteIPDLParam(msg__, this, browsingContext);
    // Sentinel = 'browsingContext'
    (msg__)->WriteSentinel(844695121);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_LoadURIExternal", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendExtProtocolChannelConnectParent(const uint64_t& registrarId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ExtProtocolChannelConnectParent(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, registrarId);
    // Sentinel = 'registrarId'
    (msg__)->WriteSentinel(464585857);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ExtProtocolChannelConnectParent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetGfxVars(nsTArray<GfxVarUpdate>* vars) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetGfxVars(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetGfxVars", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetGfxVars", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, vars)))) {
        FatalError("Error deserializing 'GfxVarUpdate[]'");
        return false;
    }
    // Sentinel = 'vars'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 72745405)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'GfxVarUpdate[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendSyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData,
        nsTArray<StructuredCloneData>* retval) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SyncMessage(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SyncMessage", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_SyncMessage", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, retval)))) {
        FatalError("Error deserializing 'StructuredCloneData[]'");
        return false;
    }
    // Sentinel = 'retval'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 151716495)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'StructuredCloneData[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendShowAlert(nsIAlertNotification* alert) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ShowAlert(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, alert);
    // Sentinel = 'alert'
    (msg__)->WriteSentinel(102826521);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ShowAlert", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendCloseAlert(const nsString& name) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CloseAlert(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CloseAlert", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendDisableNotifications(const Principal& principal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_DisableNotifications(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DisableNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendOpenNotificationSettings(const Principal& principal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_OpenNotificationSettings(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_OpenNotificationSettings", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendAddSecurityState(
        const MaybeDiscardedWindowContext& aContext,
        const uint32_t& aStateFlags) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AddSecurityState(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aStateFlags);
    // Sentinel = 'aStateFlags'
    (msg__)->WriteSentinel(428606544);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AddSecurityState", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotificationEvent(
        const nsString& type,
        const NotificationEventData& data) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotificationEvent(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, type);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(75760067);
    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotificationEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendPExternalHelperAppConstructor(
        PExternalHelperAppChild* actor,
        nsIURI* uri,
        const mozilla::Maybe<LoadInfoArgs>& loadInfoArgs,
        const nsCString& aMimeContentType,
        const nsCString& aContentDisposition,
        const uint32_t& aContentDispositionHint,
        const nsString& aContentDispositionFilename,
        const bool& aForceSave,
        const int64_t& aContentLength,
        const bool& aWasFileChannel,
        nsIURI* aReferrer,
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aShouldCloseWindow) -> PExternalHelperAppChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PExternalHelperAppChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPExternalHelperAppChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PExternalHelperAppConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);
    WriteIPDLParam(msg__, this, loadInfoArgs);
    // Sentinel = 'loadInfoArgs'
    (msg__)->WriteSentinel(514000058);
    WriteIPDLParam(msg__, this, aMimeContentType);
    // Sentinel = 'aMimeContentType'
    (msg__)->WriteSentinel(888538727);
    WriteIPDLParam(msg__, this, aContentDisposition);
    // Sentinel = 'aContentDisposition'
    (msg__)->WriteSentinel(1279461330);
    WriteIPDLParam(msg__, this, aContentDispositionHint);
    // Sentinel = 'aContentDispositionHint'
    (msg__)->WriteSentinel(1865812325);
    WriteIPDLParam(msg__, this, aContentDispositionFilename);
    // Sentinel = 'aContentDispositionFilename'
    (msg__)->WriteSentinel(2558331635);
    WriteIPDLParam(msg__, this, aForceSave);
    // Sentinel = 'aForceSave'
    (msg__)->WriteSentinel(350946272);
    WriteIPDLParam(msg__, this, aContentLength);
    // Sentinel = 'aContentLength'
    (msg__)->WriteSentinel(694158751);
    WriteIPDLParam(msg__, this, aWasFileChannel);
    // Sentinel = 'aWasFileChannel'
    (msg__)->WriteSentinel(759367110);
    WriteIPDLParam(msg__, this, aReferrer);
    // Sentinel = 'aReferrer'
    (msg__)->WriteSentinel(293340063);
    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aShouldCloseWindow);
    // Sentinel = 'aShouldCloseWindow'
    (msg__)->WriteSentinel(1134888767);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PExternalHelperAppConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PExternalHelperAppChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PExternalHelperAppMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendPHandlerServiceConstructor(PHandlerServiceChild* actor) -> PHandlerServiceChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PHandlerServiceChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPHandlerServiceChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PHandlerServiceConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PHandlerServiceConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PHandlerServiceChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PHandlerServiceMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendAddGeolocationListener(const bool& highAccuracy) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AddGeolocationListener(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, highAccuracy);
    // Sentinel = 'highAccuracy'
    (msg__)->WriteSentinel(513737932);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AddGeolocationListener", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRemoveGeolocationListener() -> bool
{
    IPC::Message* msg__ = PContent::Msg_RemoveGeolocationListener(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RemoveGeolocationListener", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSetGeolocationHigherAccuracy(const bool& enable) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetGeolocationHigherAccuracy(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, enable);
    // Sentinel = 'enable'
    (msg__)->WriteSentinel(141623912);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetGeolocationHigherAccuracy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendConsoleMessage(const nsString& message) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ConsoleMessage(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ConsoleMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendScriptErrorWithStack(
        const nsString& message,
        const nsString& sourceName,
        const nsString& sourceLine,
        const uint32_t& lineNumber,
        const uint32_t& colNumber,
        const uint32_t& flags,
        const nsCString& category,
        const bool& privateWindow,
        const bool& fromChromeContext,
        const ClonedMessageData& stack) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ScriptErrorWithStack(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);
    WriteIPDLParam(msg__, this, sourceName);
    // Sentinel = 'sourceName'
    (msg__)->WriteSentinel(387580947);
    WriteIPDLParam(msg__, this, sourceLine);
    // Sentinel = 'sourceLine'
    (msg__)->WriteSentinel(388760602);
    WriteIPDLParam(msg__, this, lineNumber);
    // Sentinel = 'lineNumber'
    (msg__)->WriteSentinel(374932498);
    WriteIPDLParam(msg__, this, colNumber);
    // Sentinel = 'colNumber'
    (msg__)->WriteSentinel(304284584);
    WriteIPDLParam(msg__, this, flags);
    // Sentinel = 'flags'
    (msg__)->WriteSentinel(102171150);
    WriteIPDLParam(msg__, this, category);
    // Sentinel = 'category'
    (msg__)->WriteSentinel(247333727);
    WriteIPDLParam(msg__, this, privateWindow);
    // Sentinel = 'privateWindow'
    (msg__)->WriteSentinel(642778484);
    WriteIPDLParam(msg__, this, fromChromeContext);
    // Sentinel = 'fromChromeContext'
    (msg__)->WriteSentinel(1038485240);
    WriteIPDLParam(msg__, this, stack);
    // Sentinel = 'stack'
    (msg__)->WriteSentinel(107479575);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ScriptErrorWithStack", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSetClipboard(
        const IPCDataTransfer& aDataTransfer,
        const bool& aIsPrivateData,
        const Principal& aRequestingPrincipal,
        const nsContentPolicyType& aContentPolicyType,
        const int32_t& aWhichClipboard) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetClipboard(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aDataTransfer);
    // Sentinel = 'aDataTransfer'
    (msg__)->WriteSentinel(581567777);
    WriteIPDLParam(msg__, this, aIsPrivateData);
    // Sentinel = 'aIsPrivateData'
    (msg__)->WriteSentinel(680396147);
    WriteIPDLParam(msg__, this, aRequestingPrincipal);
    // Sentinel = 'aRequestingPrincipal'
    (msg__)->WriteSentinel(1431439403);
    WriteIPDLParam(msg__, this, aContentPolicyType);
    // Sentinel = 'aContentPolicyType'
    (msg__)->WriteSentinel(1145767759);
    WriteIPDLParam(msg__, this, aWhichClipboard);
    // Sentinel = 'aWhichClipboard'
    (msg__)->WriteSentinel(776996325);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetClipboard", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetClipboard(
        const nsTArray<nsCString>& aTypes,
        const int32_t& aWhichClipboard,
        IPCDataTransfer* dataTransfer) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetClipboard(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aTypes);
    // Sentinel = 'aTypes'
    (msg__)->WriteSentinel(140575351);
    WriteIPDLParam(msg__, this, aWhichClipboard);
    // Sentinel = 'aWhichClipboard'
    (msg__)->WriteSentinel(776996325);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetClipboard", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetClipboard", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, dataTransfer)))) {
        FatalError("Error deserializing 'IPCDataTransfer'");
        return false;
    }
    // Sentinel = 'dataTransfer'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 524027104)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'IPCDataTransfer'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendGetExternalClipboardFormats(
        const int32_t& aWhichClipboard,
        const bool& aPlainTextOnly,
        nsTArray<nsCString>* aTypes) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetExternalClipboardFormats(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aWhichClipboard);
    // Sentinel = 'aWhichClipboard'
    (msg__)->WriteSentinel(776996325);
    WriteIPDLParam(msg__, this, aPlainTextOnly);
    // Sentinel = 'aPlainTextOnly'
    (msg__)->WriteSentinel(686622109);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetExternalClipboardFormats", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetExternalClipboardFormats", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aTypes)))) {
        FatalError("Error deserializing 'nsCString[]'");
        return false;
    }
    // Sentinel = 'aTypes'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 140575351)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendEmptyClipboard(const int32_t& aWhichClipboard) -> bool
{
    IPC::Message* msg__ = PContent::Msg_EmptyClipboard(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aWhichClipboard);
    // Sentinel = 'aWhichClipboard'
    (msg__)->WriteSentinel(776996325);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_EmptyClipboard", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendClipboardHasType(
        const nsTArray<nsCString>& aTypes,
        const int32_t& aWhichClipboard,
        bool* hasType) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ClipboardHasType(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aTypes);
    // Sentinel = 'aTypes'
    (msg__)->WriteSentinel(140575351);
    WriteIPDLParam(msg__, this, aWhichClipboard);
    // Sentinel = 'aWhichClipboard'
    (msg__)->WriteSentinel(776996325);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ClipboardHasType", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_ClipboardHasType", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, hasType)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'hasType'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 191103711)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendPlaySound(nsIURI* aURL) -> bool
{
    IPC::Message* msg__ = PContent::Msg_PlaySound(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aURL);
    // Sentinel = 'aURL'
    (msg__)->WriteSentinel(58130773);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PlaySound", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendBeep() -> bool
{
    IPC::Message* msg__ = PContent::Msg_Beep(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_Beep", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendPlayEventSound(const uint32_t& aEventId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_PlayEventSound(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aEventId);
    // Sentinel = 'aEventId'
    (msg__)->WriteSentinel(230294289);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PlayEventSound", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetIconForExtension(
        const nsCString& aFileExt,
        const uint32_t& aIconSize,
        nsTArray<uint8_t>* bits) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetIconForExtension(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFileExt);
    // Sentinel = 'aFileExt'
    (msg__)->WriteSentinel(223544083);
    WriteIPDLParam(msg__, this, aIconSize);
    // Sentinel = 'aIconSize'
    (msg__)->WriteSentinel(286196614);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetIconForExtension", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetIconForExtension", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, bits)))) {
        FatalError("Error deserializing 'uint8_t[]'");
        return false;
    }
    // Sentinel = 'bits'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 69337523)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendPrivateDocShellsExist(const bool& aExist) -> bool
{
    IPC::Message* msg__ = PContent::Msg_PrivateDocShellsExist(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aExist);
    // Sentinel = 'aExist'
    (msg__)->WriteSentinel(135922287);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PrivateDocShellsExist", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendFirstIdle() -> bool
{
    IPC::Message* msg__ = PContent::Msg_FirstIdle(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FirstIdle", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendDeviceReset() -> bool
{
    IPC::Message* msg__ = PContent::Msg_DeviceReset(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DeviceReset", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendCopyFavicon(
        nsIURI* oldURI,
        nsIURI* newURI,
        const bool& isPrivate) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CopyFavicon(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, oldURI);
    // Sentinel = 'oldURI'
    (msg__)->WriteSentinel(137888304);
    WriteIPDLParam(msg__, this, newURI);
    // Sentinel = 'newURI'
    (msg__)->WriteSentinel(140182075);
    WriteIPDLParam(msg__, this, isPrivate);
    // Sentinel = 'isPrivate'
    (msg__)->WriteSentinel(310576056);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CopyFavicon", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRecordingDeviceEvents(
        const nsString& recordingStatus,
        const nsString& pageURL,
        const bool& isAudio,
        const bool& isVideo) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RecordingDeviceEvents(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, recordingStatus);
    // Sentinel = 'recordingStatus'
    (msg__)->WriteSentinel(833685058);
    WriteIPDLParam(msg__, this, pageURL);
    // Sentinel = 'pageURL'
    (msg__)->WriteSentinel(182649489);
    WriteIPDLParam(msg__, this, isAudio);
    // Sentinel = 'isAudio'
    (msg__)->WriteSentinel(186516175);
    WriteIPDLParam(msg__, this, isVideo);
    // Sentinel = 'isVideo'
    (msg__)->WriteSentinel(189727444);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RecordingDeviceEvents", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGraphicsError(const nsCString& aError) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GraphicsError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aError);
    // Sentinel = 'aError'
    (msg__)->WriteSentinel(135463532);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GraphicsError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendBeginDriverCrashGuard(
        const uint32_t& aGuardType,
        bool* crashDetected) -> bool
{
    IPC::Message* msg__ = PContent::Msg_BeginDriverCrashGuard(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGuardType);
    // Sentinel = 'aGuardType'
    (msg__)->WriteSentinel(356647927);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BeginDriverCrashGuard", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_BeginDriverCrashGuard", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, crashDetected)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'crashDetected'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 610731316)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendEndDriverCrashGuard(const uint32_t& aGuardType) -> bool
{
    IPC::Message* msg__ = PContent::Msg_EndDriverCrashGuard(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGuardType);
    // Sentinel = 'aGuardType'
    (msg__)->WriteSentinel(356647927);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_EndDriverCrashGuard", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_EndDriverCrashGuard", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PContentChild::SendAddIdleObserver(
        const uint64_t& observerId,
        const uint32_t& idleTimeInS) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AddIdleObserver(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, observerId);
    // Sentinel = 'observerId'
    (msg__)->WriteSentinel(386335766);
    WriteIPDLParam(msg__, this, idleTimeInS);
    // Sentinel = 'idleTimeInS'
    (msg__)->WriteSentinel(434832440);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AddIdleObserver", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRemoveIdleObserver(
        const uint64_t& observerId,
        const uint32_t& idleTimeInS) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RemoveIdleObserver(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, observerId);
    // Sentinel = 'observerId'
    (msg__)->WriteSentinel(386335766);
    WriteIPDLParam(msg__, this, idleTimeInS);
    // Sentinel = 'idleTimeInS'
    (msg__)->WriteSentinel(434832440);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RemoveIdleObserver", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendBackUpXResources(const FileDescriptor& aXSocketFd) -> bool
{
    IPC::Message* msg__ = PContent::Msg_BackUpXResources(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aXSocketFd);
    // Sentinel = 'aXSocketFd'
    (msg__)->WriteSentinel(349569997);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BackUpXResources", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRequestAnonymousTemporaryFile(const uint64_t& aID) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RequestAnonymousTemporaryFile(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RequestAnonymousTemporaryFile", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendPOfflineCacheUpdateConstructor(
        POfflineCacheUpdateChild* actor,
        nsIURI* manifestURI,
        nsIURI* documentURI,
        const PrincipalInfo& loadingPrincipal,
        const bool& stickDocument,
        const CookieJarSettingsArgs& cookieJarSettings) -> POfflineCacheUpdateChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null POfflineCacheUpdateChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPOfflineCacheUpdateChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_POfflineCacheUpdateConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, manifestURI);
    // Sentinel = 'manifestURI'
    (msg__)->WriteSentinel(449643592);
    WriteIPDLParam(msg__, this, documentURI);
    // Sentinel = 'documentURI'
    (msg__)->WriteSentinel(453706832);
    WriteIPDLParam(msg__, this, loadingPrincipal);
    // Sentinel = 'loadingPrincipal'
    (msg__)->WriteSentinel(927139457);
    WriteIPDLParam(msg__, this, stickDocument);
    // Sentinel = 'stickDocument'
    (msg__)->WriteSentinel(628032862);
    WriteIPDLParam(msg__, this, cookieJarSettings);
    // Sentinel = 'cookieJarSettings'
    (msg__)->WriteSentinel(1031800553);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_POfflineCacheUpdateConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending POfflineCacheUpdateChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(POfflineCacheUpdateMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendSetOfflinePermission(const Principal& principal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetOfflinePermission(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetOfflinePermission", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendFinishShutdown() -> bool
{
    IPC::Message* msg__ = PContent::Msg_FinishShutdown(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FinishShutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendUpdateDropEffect(
        const uint32_t& aDragAction,
        const uint32_t& aDropEffect) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateDropEffect(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aDragAction);
    // Sentinel = 'aDragAction'
    (msg__)->WriteSentinel(411370558);
    WriteIPDLParam(msg__, this, aDropEffect);
    // Sentinel = 'aDropEffect'
    (msg__)->WriteSentinel(419759172);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateDropEffect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendPContentPermissionRequestConstructor(
        const nsTArray<PermissionRequest>& aRequests,
        const Principal& aPrincipal,
        const Principal& aTopLevelPrincipal,
        const bool& aIsHandlingUserInput,
        const bool& aMaybeUnsafePermissionDelegate,
        const TabId& tabId) -> PContentPermissionRequestChild*
{
    PContentPermissionRequestChild* actor = (static_cast<ContentChild*>(this))->AllocPContentPermissionRequestChild(aRequests, aPrincipal, aTopLevelPrincipal, aIsHandlingUserInput, aMaybeUnsafePermissionDelegate, tabId);
    return SendPContentPermissionRequestConstructor(actor, aRequests, aPrincipal, aTopLevelPrincipal, aIsHandlingUserInput, aMaybeUnsafePermissionDelegate, tabId);
}

auto PContentChild::SendPContentPermissionRequestConstructor(
        PContentPermissionRequestChild* actor,
        const nsTArray<PermissionRequest>& aRequests,
        const Principal& aPrincipal,
        const Principal& aTopLevelPrincipal,
        const bool& aIsHandlingUserInput,
        const bool& aMaybeUnsafePermissionDelegate,
        const TabId& tabId) -> PContentPermissionRequestChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PContentPermissionRequestChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPContentPermissionRequestChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PContent::Msg_PContentPermissionRequestConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aRequests);
    // Sentinel = 'aRequests'
    (msg__)->WriteSentinel(301728702);
    WriteIPDLParam(msg__, this, aPrincipal);
    // Sentinel = 'aPrincipal'
    (msg__)->WriteSentinel(364381188);
    WriteIPDLParam(msg__, this, aTopLevelPrincipal);
    // Sentinel = 'aTopLevelPrincipal'
    (msg__)->WriteSentinel(1128007471);
    WriteIPDLParam(msg__, this, aIsHandlingUserInput);
    // Sentinel = 'aIsHandlingUserInput'
    (msg__)->WriteSentinel(1357514738);
    WriteIPDLParam(msg__, this, aMaybeUnsafePermissionDelegate);
    // Sentinel = 'aMaybeUnsafePermissionDelegate'
    (msg__)->WriteSentinel(3078949878);
    WriteIPDLParam(msg__, this, tabId);
    // Sentinel = 'tabId'
    (msg__)->WriteSentinel(99156453);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PContentPermissionRequestConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PContentPermissionRequestChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PContentPermissionRequestMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PContentChild::SendShutdownProfile(const nsCString& aProfile) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ShutdownProfile(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aProfile);
    // Sentinel = 'aProfile'
    (msg__)->WriteSentinel(237437747);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ShutdownProfile", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetGraphicsDeviceInitData(ContentDeviceData* aData) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetGraphicsDeviceInitData(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetGraphicsDeviceInitData", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetGraphicsDeviceInitData", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aData)))) {
        FatalError("Error deserializing 'ContentDeviceData'");
        return false;
    }
    // Sentinel = 'aData'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 90571228)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ContentDeviceData'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendGetOutputColorProfileData(nsTArray<uint8_t>* aOutputColorProfileData) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetOutputColorProfileData(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetOutputColorProfileData", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetOutputColorProfileData", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOutputColorProfileData)))) {
        FatalError("Error deserializing 'uint8_t[]'");
        return false;
    }
    // Sentinel = 'aOutputColorProfileData'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 1877608765)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendGetFontListShmBlock(
        const uint32_t& aGeneration,
        const uint32_t& aIndex,
        SharedMemoryHandle* aHandle) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetFontListShmBlock(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGeneration);
    // Sentinel = 'aGeneration'
    (msg__)->WriteSentinel(430179438);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetFontListShmBlock", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetFontListShmBlock", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aHandle)))) {
        FatalError("Error deserializing 'SharedMemoryHandle'");
        return false;
    }
    // Sentinel = 'aHandle'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 174326446)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'SharedMemoryHandle'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendInitializeFamily(
        const uint32_t& aGeneration,
        const uint32_t& aFamilyIndex,
        const bool& aLoadCmaps) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitializeFamily(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGeneration);
    // Sentinel = 'aGeneration'
    (msg__)->WriteSentinel(430179438);
    WriteIPDLParam(msg__, this, aFamilyIndex);
    // Sentinel = 'aFamilyIndex'
    (msg__)->WriteSentinel(501089468);
    WriteIPDLParam(msg__, this, aLoadCmaps);
    // Sentinel = 'aLoadCmaps'
    (msg__)->WriteSentinel(342885334);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitializeFamily", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_InitializeFamily", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PContentChild::SendSetCharacterMap(
        const uint32_t& aGeneration,
        const Pointer& aFacePtr,
        const gfxSparseBitSet& aMap) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetCharacterMap(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGeneration);
    // Sentinel = 'aGeneration'
    (msg__)->WriteSentinel(430179438);
    WriteIPDLParam(msg__, this, aFacePtr);
    // Sentinel = 'aFacePtr'
    (msg__)->WriteSentinel(218956551);
    WriteIPDLParam(msg__, this, aMap);
    // Sentinel = 'aMap'
    (msg__)->WriteSentinel(60883328);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetCharacterMap", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSetupFamilyCharMap(
        const uint32_t& aGeneration,
        const Pointer& aFamilyPtr) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetupFamilyCharMap(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGeneration);
    // Sentinel = 'aGeneration'
    (msg__)->WriteSentinel(430179438);
    WriteIPDLParam(msg__, this, aFamilyPtr);
    // Sentinel = 'aFamilyPtr'
    (msg__)->WriteSentinel(353174522);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetupFamilyCharMap", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendInitOtherFamilyNames(
        const uint32_t& aGeneration,
        const bool& aDefer,
        bool* aLoaded) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InitOtherFamilyNames(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGeneration);
    // Sentinel = 'aGeneration'
    (msg__)->WriteSentinel(430179438);
    WriteIPDLParam(msg__, this, aDefer);
    // Sentinel = 'aDefer'
    (msg__)->WriteSentinel(128057928);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InitOtherFamilyNames", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_InitOtherFamilyNames", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aLoaded)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aLoaded'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 176095915)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendStartCmapLoading(
        const uint32_t& aGeneration,
        const uint32_t& aStartIndex) -> bool
{
    IPC::Message* msg__ = PContent::Msg_StartCmapLoading(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGeneration);
    // Sentinel = 'aGeneration'
    (msg__)->WriteSentinel(430179438);
    WriteIPDLParam(msg__, this, aStartIndex);
    // Sentinel = 'aStartIndex'
    (msg__)->WriteSentinel(435749992);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_StartCmapLoading", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetHyphDict(
        nsIURI* aURI,
        SharedMemoryHandle* aHandle,
        uint32_t* aSize) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetHyphDict(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetHyphDict", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetHyphDict", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aHandle)))) {
        FatalError("Error deserializing 'SharedMemoryHandle'");
        return false;
    }
    // Sentinel = 'aHandle'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 174326446)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'SharedMemoryHandle'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSize)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aSize'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 97124861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendCreateWindow(
        PBrowserChild* aThisTab,
        const MaybeDiscardedBrowsingContext& aParent,
        PBrowserChild* aNewTab,
        const uint32_t& aChromeFlags,
        const bool& aCalledFromJS,
        const bool& aWidthSpecified,
        const bool& aForPrinting,
        const bool& aForWindowDotPrint,
        nsIURI* aURIToLoad,
        const nsCString& aFeatures,
        const float& aFullZoom,
        const Principal& aTriggeringPrincipal,
        nsIContentSecurityPolicy* aCsp,
        nsIReferrerInfo* aReferrerInfo,
        const OriginAttributes& aOriginAttributes,
        mozilla::ipc::ResolveCallback<CreatedWindowInfo>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_CreateWindow(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(aThisTab, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aThisTab);
    // Sentinel = 'aThisTab'
    (msg__)->WriteSentinel(231015185);
    WriteIPDLParam(msg__, this, aParent);
    // Sentinel = 'aParent'
    (msg__)->WriteSentinel(179962572);
    MOZ_RELEASE_ASSERT(aNewTab, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aNewTab);
    // Sentinel = 'aNewTab'
    (msg__)->WriteSentinel(175571619);
    WriteIPDLParam(msg__, this, aChromeFlags);
    // Sentinel = 'aChromeFlags'
    (msg__)->WriteSentinel(500040877);
    WriteIPDLParam(msg__, this, aCalledFromJS);
    // Sentinel = 'aCalledFromJS'
    (msg__)->WriteSentinel(569967832);
    WriteIPDLParam(msg__, this, aWidthSpecified);
    // Sentinel = 'aWidthSpecified'
    (msg__)->WriteSentinel(790562286);
    WriteIPDLParam(msg__, this, aForPrinting);
    // Sentinel = 'aForPrinting'
    (msg__)->WriteSentinel(511313108);
    WriteIPDLParam(msg__, this, aForWindowDotPrint);
    // Sentinel = 'aForWindowDotPrint'
    (msg__)->WriteSentinel(1123813173);
    WriteIPDLParam(msg__, this, aURIToLoad);
    // Sentinel = 'aURIToLoad'
    (msg__)->WriteSentinel(321258389);
    WriteIPDLParam(msg__, this, aFeatures);
    // Sentinel = 'aFeatures'
    (msg__)->WriteSentinel(290849697);
    WriteIPDLParam(msg__, this, aFullZoom);
    // Sentinel = 'aFullZoom'
    (msg__)->WriteSentinel(293143450);
    WriteIPDLParam(msg__, this, aTriggeringPrincipal);
    // Sentinel = 'aTriggeringPrincipal'
    (msg__)->WriteSentinel(1413089302);
    WriteIPDLParam(msg__, this, aCsp);
    // Sentinel = 'aCsp'
    (msg__)->WriteSentinel(61276552);
    WriteIPDLParam(msg__, this, aReferrerInfo);
    // Sentinel = 'aReferrerInfo'
    (msg__)->WriteSentinel(597755179);
    WriteIPDLParam(msg__, this, aOriginAttributes);
    // Sentinel = 'aOriginAttributes'
    (msg__)->WriteSentinel(1021839089);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CreateWindow", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendCreateWindow(
        PBrowserChild* aThisTab,
        const MaybeDiscardedBrowsingContext& aParent,
        PBrowserChild* aNewTab,
        const uint32_t& aChromeFlags,
        const bool& aCalledFromJS,
        const bool& aWidthSpecified,
        const bool& aForPrinting,
        const bool& aForWindowDotPrint,
        nsIURI* aURIToLoad,
        const nsCString& aFeatures,
        const float& aFullZoom,
        const Principal& aTriggeringPrincipal,
        nsIContentSecurityPolicy* aCsp,
        nsIReferrerInfo* aReferrerInfo,
        const OriginAttributes& aOriginAttributes) -> RefPtr<CreateWindowPromise>
{
    RefPtr<MozPromise<CreatedWindowInfo, ResponseRejectReason, true>::Private> promise__ = new MozPromise<CreatedWindowInfo, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendCreateWindow(std::move(aThisTab), std::move(aParent), std::move(aNewTab), std::move(aChromeFlags), std::move(aCalledFromJS), std::move(aWidthSpecified), std::move(aForPrinting), std::move(aForWindowDotPrint), std::move(aURIToLoad), std::move(aFeatures), std::move(aFullZoom), std::move(aTriggeringPrincipal), std::move(aCsp), std::move(aReferrerInfo), std::move(aOriginAttributes), [promise__](CreatedWindowInfo&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendCreateWindowInDifferentProcess(
        PBrowserChild* aThisTab,
        const MaybeDiscardedBrowsingContext& aParent,
        const uint32_t& aChromeFlags,
        const bool& aCalledFromJS,
        const bool& aWidthSpecified,
        nsIURI* aURIToLoad,
        const nsCString& aFeatures,
        const float& aFullZoom,
        const nsString& aName,
        nsIPrincipal* aTriggeringPrincipal,
        nsIContentSecurityPolicy* aCsp,
        nsIReferrerInfo* aReferrerInfo,
        const OriginAttributes& aOriginAttributes) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CreateWindowInDifferentProcess(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(aThisTab, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, aThisTab);
    // Sentinel = 'aThisTab'
    (msg__)->WriteSentinel(231015185);
    WriteIPDLParam(msg__, this, aParent);
    // Sentinel = 'aParent'
    (msg__)->WriteSentinel(179962572);
    WriteIPDLParam(msg__, this, aChromeFlags);
    // Sentinel = 'aChromeFlags'
    (msg__)->WriteSentinel(500040877);
    WriteIPDLParam(msg__, this, aCalledFromJS);
    // Sentinel = 'aCalledFromJS'
    (msg__)->WriteSentinel(569967832);
    WriteIPDLParam(msg__, this, aWidthSpecified);
    // Sentinel = 'aWidthSpecified'
    (msg__)->WriteSentinel(790562286);
    WriteIPDLParam(msg__, this, aURIToLoad);
    // Sentinel = 'aURIToLoad'
    (msg__)->WriteSentinel(321258389);
    WriteIPDLParam(msg__, this, aFeatures);
    // Sentinel = 'aFeatures'
    (msg__)->WriteSentinel(290849697);
    WriteIPDLParam(msg__, this, aFullZoom);
    // Sentinel = 'aFullZoom'
    (msg__)->WriteSentinel(293143450);
    WriteIPDLParam(msg__, this, aName);
    // Sentinel = 'aName'
    (msg__)->WriteSentinel(92537315);
    WriteIPDLParam(msg__, this, aTriggeringPrincipal);
    // Sentinel = 'aTriggeringPrincipal'
    (msg__)->WriteSentinel(1413089302);
    WriteIPDLParam(msg__, this, aCsp);
    // Sentinel = 'aCsp'
    (msg__)->WriteSentinel(61276552);
    WriteIPDLParam(msg__, this, aReferrerInfo);
    // Sentinel = 'aReferrerInfo'
    (msg__)->WriteSentinel(597755179);
    WriteIPDLParam(msg__, this, aOriginAttributes);
    // Sentinel = 'aOriginAttributes'
    (msg__)->WriteSentinel(1021839089);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CreateWindowInDifferentProcess", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendUngrabPointer(const uint32_t& time) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UngrabPointer(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, time);
    // Sentinel = 'time'
    (msg__)->WriteSentinel(72221104);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UngrabPointer", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_UngrabPointer", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PContentChild::SendRemovePermission(
        const Principal& principal,
        const nsCString& permissionType,
        nsresult* rv) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RemovePermission(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, permissionType);
    // Sentinel = 'permissionType'
    (msg__)->WriteSentinel(749864428);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RemovePermission", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_RemovePermission", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'nsresult'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendNotifyBenchmarkResult(
        const nsString& aCodecName,
        const uint32_t& aDecodeFPS) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyBenchmarkResult(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aCodecName);
    // Sentinel = 'aCodecName'
    (msg__)->WriteSentinel(340394945);
    WriteIPDLParam(msg__, this, aDecodeFPS);
    // Sentinel = 'aDecodeFPS'
    (msg__)->WriteSentinel(335283087);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyBenchmarkResult", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyPushObservers(
        const nsCString& scope,
        const Principal& principal,
        const nsString& messageId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPushObservers(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, messageId);
    // Sentinel = 'messageId'
    (msg__)->WriteSentinel(310576019);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushObservers", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyPushObserversWithData(
        const nsCString& scope,
        const Principal& principal,
        const nsString& messageId,
        const nsTArray<uint8_t>& data) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPushObserversWithData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, messageId);
    // Sentinel = 'messageId'
    (msg__)->WriteSentinel(310576019);
    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushObserversWithData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyPushSubscriptionChangeObservers(
        const nsCString& scope,
        const Principal& principal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPushSubscriptionChangeObservers(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushSubscriptionChangeObservers", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetFilesRequest(
        const nsID& aID,
        const nsString& aDirectory,
        const bool& aRecursiveFlag) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetFilesRequest(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aDirectory);
    // Sentinel = 'aDirectory'
    (msg__)->WriteSentinel(358941719);
    WriteIPDLParam(msg__, this, aRecursiveFlag);
    // Sentinel = 'aRecursiveFlag'
    (msg__)->WriteSentinel(701498772);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetFilesRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendDeleteGetFilesRequest(const nsID& aID) -> bool
{
    IPC::Message* msg__ = PContent::Msg_DeleteGetFilesRequest(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DeleteGetFilesRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendStoreAndBroadcastBlobURLRegistration(
        const nsCString& url,
        const IPCBlob& blob,
        const Principal& principal,
        const mozilla::Maybe<nsID>& aAgentClusterId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_StoreAndBroadcastBlobURLRegistration(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);
    WriteIPDLParam(msg__, this, blob);
    // Sentinel = 'blob'
    (msg__)->WriteSentinel(68157856);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, aAgentClusterId);
    // Sentinel = 'aAgentClusterId'
    (msg__)->WriteSentinel(776537568);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_StoreAndBroadcastBlobURLRegistration", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendUnstoreAndBroadcastBlobURLUnregistration(
        const nsCString& url,
        const Principal& principal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UnstoreAndBroadcastBlobURLUnregistration(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, url);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(45220180);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UnstoreAndBroadcastBlobURLUnregistration", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendAccumulateChildHistograms(const nsTArray<HistogramAccumulation>& accumulations) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AccumulateChildHistograms(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, accumulations);
    // Sentinel = 'accumulations'
    (msg__)->WriteSentinel(632030585);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AccumulateChildHistograms", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendAccumulateChildKeyedHistograms(const nsTArray<KeyedHistogramAccumulation>& accumulations) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AccumulateChildKeyedHistograms(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, accumulations);
    // Sentinel = 'accumulations'
    (msg__)->WriteSentinel(632030585);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AccumulateChildKeyedHistograms", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendUpdateChildScalars(const nsTArray<ScalarAction>& updates) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateChildScalars(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, updates);
    // Sentinel = 'updates'
    (msg__)->WriteSentinel(199951095);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateChildScalars", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendUpdateChildKeyedScalars(const nsTArray<KeyedScalarAction>& updates) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UpdateChildKeyedScalars(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, updates);
    // Sentinel = 'updates'
    (msg__)->WriteSentinel(199951095);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UpdateChildKeyedScalars", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRecordChildEvents(const nsTArray<ChildEventData>& events) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RecordChildEvents(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, events);
    // Sentinel = 'events'
    (msg__)->WriteSentinel(149619350);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RecordChildEvents", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRecordDiscardedData(const DiscardedData& data) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RecordDiscardedData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RecordDiscardedData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetA11yContentId(uint32_t* aContentId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_GetA11yContentId(MSG_ROUTING_CONTROL);




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetA11yContentId", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PContent::Msg_GetA11yContentId", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aContentId)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aContentId'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 358876138)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PContentChild::SendA11yHandlerControl(
        const uint32_t& aPid,
        const IHandlerControlHolder& aHandlerControl) -> bool
{
    IPC::Message* msg__ = PContent::Msg_A11yHandlerControl(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPid);
    // Sentinel = 'aPid'
    (msg__)->WriteSentinel(61735295);
    WriteIPDLParam(msg__, this, aHandlerControl);
    // Sentinel = 'aHandlerControl'
    (msg__)->WriteSentinel(778634753);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_A11yHandlerControl", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendAddMemoryReport(const MemoryReport& aReport) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AddMemoryReport(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aReport);
    // Sentinel = 'aReport'
    (msg__)->WriteSentinel(184025822);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AddMemoryReport", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendMaybeReloadPlugins() -> bool
{
    IPC::Message* msg__ = PContent::Msg_MaybeReloadPlugins(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_MaybeReloadPlugins", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendBHRThreadHang(const HangDetails& aHangDetails) -> bool
{
    IPC::Message* msg__ = PContent::Msg_BHRThreadHang(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aHangDetails);
    // Sentinel = 'aHangDetails'
    (msg__)->WriteSentinel(488113318);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BHRThreadHang", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendAddPerformanceMetrics(
        const nsID& aID,
        const nsTArray<PerformanceInfo>& aMetrics) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AddPerformanceMetrics(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aMetrics);
    // Sentinel = 'aMetrics'
    (msg__)->WriteSentinel(235471673);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AddPerformanceMetrics", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendAddCertException(
        const nsCString& aSerializedCert,
        const uint32_t& aFlags,
        const nsCString& aHostName,
        const int32_t& aPort,
        const bool& aIsTemporary,
        mozilla::ipc::ResolveCallback<nsresult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_AddCertException(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aSerializedCert);
    // Sentinel = 'aSerializedCert'
    (msg__)->WriteSentinel(794625532);
    WriteIPDLParam(msg__, this, aFlags);
    // Sentinel = 'aFlags'
    (msg__)->WriteSentinel(129892943);
    WriteIPDLParam(msg__, this, aHostName);
    // Sentinel = 'aHostName'
    (msg__)->WriteSentinel(290128769);
    WriteIPDLParam(msg__, this, aPort);
    // Sentinel = 'aPort'
    (msg__)->WriteSentinel(97452551);
    WriteIPDLParam(msg__, this, aIsTemporary);
    // Sentinel = 'aIsTemporary'
    (msg__)->WriteSentinel(509805793);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AddCertException", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendAddCertException(
        const nsCString& aSerializedCert,
        const uint32_t& aFlags,
        const nsCString& aHostName,
        const int32_t& aPort,
        const bool& aIsTemporary) -> RefPtr<AddCertExceptionPromise>
{
    RefPtr<MozPromise<nsresult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsresult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendAddCertException(std::move(aSerializedCert), std::move(aFlags), std::move(aHostName), std::move(aPort), std::move(aIsTemporary), [promise__](nsresult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendAutomaticStorageAccessPermissionCanBeGranted(
        const Principal& aPrincipal,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_AutomaticStorageAccessPermissionCanBeGranted(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPrincipal);
    // Sentinel = 'aPrincipal'
    (msg__)->WriteSentinel(364381188);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AutomaticStorageAccessPermissionCanBeGranted", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendAutomaticStorageAccessPermissionCanBeGranted(const Principal& aPrincipal) -> RefPtr<AutomaticStorageAccessPermissionCanBeGrantedPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendAutomaticStorageAccessPermissionCanBeGranted(std::move(aPrincipal), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendStorageAccessPermissionGrantedForOrigin(
        const uint64_t& aTopLevelWindowId,
        const MaybeDiscardedBrowsingContext& aParentContext,
        const Principal& aTrackingPrincipal,
        const nsCString& aTrackingOrigin,
        const int& aAllowMode,
        const mozilla::Maybe<StorageAccessPermissionGrantedReason>& aReason,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_StorageAccessPermissionGrantedForOrigin(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aTopLevelWindowId);
    // Sentinel = 'aTopLevelWindowId'
    (msg__)->WriteSentinel(1006700210);
    WriteIPDLParam(msg__, this, aParentContext);
    // Sentinel = 'aParentContext'
    (msg__)->WriteSentinel(692454833);
    WriteIPDLParam(msg__, this, aTrackingPrincipal);
    // Sentinel = 'aTrackingPrincipal'
    (msg__)->WriteSentinel(1135609655);
    WriteIPDLParam(msg__, this, aTrackingOrigin);
    // Sentinel = 'aTrackingOrigin'
    (msg__)->WriteSentinel(792331773);
    WriteIPDLParam(msg__, this, aAllowMode);
    // Sentinel = 'aAllowMode'
    (msg__)->WriteSentinel(353108966);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_StorageAccessPermissionGrantedForOrigin", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendStorageAccessPermissionGrantedForOrigin(
        const uint64_t& aTopLevelWindowId,
        const MaybeDiscardedBrowsingContext& aParentContext,
        const Principal& aTrackingPrincipal,
        const nsCString& aTrackingOrigin,
        const int& aAllowMode,
        const mozilla::Maybe<StorageAccessPermissionGrantedReason>& aReason) -> RefPtr<StorageAccessPermissionGrantedForOriginPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendStorageAccessPermissionGrantedForOrigin(std::move(aTopLevelWindowId), std::move(aParentContext), std::move(aTrackingPrincipal), std::move(aTrackingOrigin), std::move(aAllowMode), std::move(aReason), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendCompleteAllowAccessFor(
        const MaybeDiscardedBrowsingContext& aParentContext,
        const uint64_t& aTopLevelWindowId,
        const Principal& aTrackingPrincipal,
        const nsCString& aTrackingOrigin,
        const uint32_t& aCookieBehavior,
        const StorageAccessPermissionGrantedReason& aReason,
        mozilla::ipc::ResolveCallback<mozilla::Maybe<StorageAccessPromptChoices>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_CompleteAllowAccessFor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aParentContext);
    // Sentinel = 'aParentContext'
    (msg__)->WriteSentinel(692454833);
    WriteIPDLParam(msg__, this, aTopLevelWindowId);
    // Sentinel = 'aTopLevelWindowId'
    (msg__)->WriteSentinel(1006700210);
    WriteIPDLParam(msg__, this, aTrackingPrincipal);
    // Sentinel = 'aTrackingPrincipal'
    (msg__)->WriteSentinel(1135609655);
    WriteIPDLParam(msg__, this, aTrackingOrigin);
    // Sentinel = 'aTrackingOrigin'
    (msg__)->WriteSentinel(792331773);
    WriteIPDLParam(msg__, this, aCookieBehavior);
    // Sentinel = 'aCookieBehavior'
    (msg__)->WriteSentinel(772408812);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CompleteAllowAccessFor", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendCompleteAllowAccessFor(
        const MaybeDiscardedBrowsingContext& aParentContext,
        const uint64_t& aTopLevelWindowId,
        const Principal& aTrackingPrincipal,
        const nsCString& aTrackingOrigin,
        const uint32_t& aCookieBehavior,
        const StorageAccessPermissionGrantedReason& aReason) -> RefPtr<CompleteAllowAccessForPromise>
{
    RefPtr<MozPromise<mozilla::Maybe<StorageAccessPromptChoices>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<mozilla::Maybe<StorageAccessPromptChoices>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendCompleteAllowAccessFor(std::move(aParentContext), std::move(aTopLevelWindowId), std::move(aTrackingPrincipal), std::move(aTrackingOrigin), std::move(aCookieBehavior), std::move(aReason), [promise__](mozilla::Maybe<StorageAccessPromptChoices>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendStoreUserInteractionAsPermission(const Principal& aPrincipal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_StoreUserInteractionAsPermission(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aPrincipal);
    // Sentinel = 'aPrincipal'
    (msg__)->WriteSentinel(364381188);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_StoreUserInteractionAsPermission", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyMediaPlaybackChanged(
        const MaybeDiscardedBrowsingContext& aContext,
        const MediaPlaybackState& aState) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyMediaPlaybackChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaPlaybackChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyMediaAudibleChanged(
        const MaybeDiscardedBrowsingContext& aContext,
        const MediaAudibleState& aState) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyMediaAudibleChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaAudibleChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyPictureInPictureModeChanged(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aEnabled) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPictureInPictureModeChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aEnabled);
    // Sentinel = 'aEnabled'
    (msg__)->WriteSentinel(224789261);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPictureInPictureModeChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyMediaSessionUpdated(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aIsCreated) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyMediaSessionUpdated(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aIsCreated);
    // Sentinel = 'aIsCreated'
    (msg__)->WriteSentinel(344261590);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaSessionUpdated", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyUpdateMediaMetadata(
        const MaybeDiscardedBrowsingContext& aContext,
        const mozilla::Maybe<MediaMetadataBase>& aMetadata) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyUpdateMediaMetadata(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aMetadata);
    // Sentinel = 'aMetadata'
    (msg__)->WriteSentinel(288752515);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyUpdateMediaMetadata", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyMediaSessionPlaybackStateChanged(
        const MaybeDiscardedBrowsingContext& aContext,
        const MediaSessionPlaybackState& aMetadata) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyMediaSessionPlaybackStateChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aMetadata);
    // Sentinel = 'aMetadata'
    (msg__)->WriteSentinel(288752515);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaSessionPlaybackStateChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyMediaSessionSupportedActionChanged(
        const MaybeDiscardedBrowsingContext& aContext,
        const MediaSessionAction& aAction,
        const bool& aEnabled) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyMediaSessionSupportedActionChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aAction);
    // Sentinel = 'aAction'
    (msg__)->WriteSentinel(175768256);
    WriteIPDLParam(msg__, this, aEnabled);
    // Sentinel = 'aEnabled'
    (msg__)->WriteSentinel(224789261);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaSessionSupportedActionChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyMediaFullScreenState(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aIsInFullScreen) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyMediaFullScreenState(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aIsInFullScreen);
    // Sentinel = 'aIsInFullScreen'
    (msg__)->WriteSentinel(754320840);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyMediaFullScreenState", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyPositionStateChanged(
        const MaybeDiscardedBrowsingContext& aContext,
        const PositionState& aState) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPositionStateChanged(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aState);
    // Sentinel = 'aState'
    (msg__)->WriteSentinel(137036387);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPositionStateChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendGetModulesTrust(
        ModulePaths&& aModPaths,
        const bool& aRunAtNormalPriority,
        mozilla::ipc::ResolveCallback<mozilla::Maybe<ModulesMapResult>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_GetModulesTrust(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(aModPaths));
    // Sentinel = 'aModPaths'
    (msg__)->WriteSentinel(284033922);
    WriteIPDLParam(msg__, this, aRunAtNormalPriority);
    // Sentinel = 'aRunAtNormalPriority'
    (msg__)->WriteSentinel(1380517911);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_GetModulesTrust", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendGetModulesTrust(
        ModulePaths&& aModPaths,
        const bool& aRunAtNormalPriority) -> RefPtr<GetModulesTrustPromise>
{
    RefPtr<MozPromise<mozilla::Maybe<ModulesMapResult>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<mozilla::Maybe<ModulesMapResult>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetModulesTrust(std::move(aModPaths), std::move(aRunAtNormalPriority), [promise__](mozilla::Maybe<ModulesMapResult>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendReportServiceWorkerShutdownProgress(
        const uint32_t& aShutdownStateId,
        const Progress& aProgress) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ReportServiceWorkerShutdownProgress(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aShutdownStateId);
    // Sentinel = 'aShutdownStateId'
    (msg__)->WriteSentinel(925238892);
    WriteIPDLParam(msg__, this, aProgress);
    // Sentinel = 'aProgress'
    (msg__)->WriteSentinel(301794231);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ReportServiceWorkerShutdownProgress", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendAbortOtherOrientationPendingPromises(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AbortOtherOrientationPendingPromises(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AbortOtherOrientationPendingPromises", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendHistoryReload(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint32_t& aReloadFlags) -> bool
{
    IPC::Message* msg__ = PContent::Msg_HistoryReload(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aReloadFlags);
    // Sentinel = 'aReloadFlags'
    (msg__)->WriteSentinel(499451046);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_HistoryReload", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyOnHistoryReload(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aForceReload,
        mozilla::ipc::ResolveCallback<Tuple<bool, mozilla::Maybe<RefPtr<nsDocShellLoadState>>, mozilla::Maybe<bool>>>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_NotifyOnHistoryReload(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aForceReload);
    // Sentinel = 'aForceReload'
    (msg__)->WriteSentinel(500499624);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyOnHistoryReload", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendNotifyOnHistoryReload(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aForceReload) -> RefPtr<NotifyOnHistoryReloadPromise>
{
    RefPtr<MozPromise<Tuple<bool, mozilla::Maybe<RefPtr<nsDocShellLoadState>>, mozilla::Maybe<bool>>, ResponseRejectReason, true>::Private> promise__ = new MozPromise<Tuple<bool, mozilla::Maybe<RefPtr<nsDocShellLoadState>>, mozilla::Maybe<bool>>, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendNotifyOnHistoryReload(std::move(aContext), std::move(aForceReload), [promise__](Tuple<bool, mozilla::Maybe<RefPtr<nsDocShellLoadState>>, mozilla::Maybe<bool>>&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendHistoryCommit(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint64_t& aLoadID,
        const nsID& aChangeID,
        const uint32_t& aLoadType,
        const bool& aPersist,
        const bool& aCloneEntryChildren) -> bool
{
    IPC::Message* msg__ = PContent::Msg_HistoryCommit(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aLoadID);
    // Sentinel = 'aLoadID'
    (msg__)->WriteSentinel(170328687);
    WriteIPDLParam(msg__, this, aChangeID);
    // Sentinel = 'aChangeID'
    (msg__)->WriteSentinel(275710773);
    WriteIPDLParam(msg__, this, aLoadType);
    // Sentinel = 'aLoadType'
    (msg__)->WriteSentinel(286589828);
    WriteIPDLParam(msg__, this, aPersist);
    // Sentinel = 'aPersist'
    (msg__)->WriteSentinel(238617420);
    WriteIPDLParam(msg__, this, aCloneEntryChildren);
    // Sentinel = 'aCloneEntryChildren'
    (msg__)->WriteSentinel(1242171278);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_HistoryCommit", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendHistoryGo(
        const MaybeDiscardedBrowsingContext& aContext,
        const int32_t& aOffset,
        const uint64_t& aHistoryEpoch,
        const bool& aRequireUserInteraction,
        mozilla::ipc::ResolveCallback<int32_t>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_HistoryGo(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);
    WriteIPDLParam(msg__, this, aHistoryEpoch);
    // Sentinel = 'aHistoryEpoch'
    (msg__)->WriteSentinel(611255619);
    WriteIPDLParam(msg__, this, aRequireUserInteraction);
    // Sentinel = 'aRequireUserInteraction'
    (msg__)->WriteSentinel(1862076766);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_HistoryGo", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendHistoryGo(
        const MaybeDiscardedBrowsingContext& aContext,
        const int32_t& aOffset,
        const uint64_t& aHistoryEpoch,
        const bool& aRequireUserInteraction) -> RefPtr<HistoryGoPromise>
{
    RefPtr<MozPromise<int32_t, ResponseRejectReason, true>::Private> promise__ = new MozPromise<int32_t, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendHistoryGo(std::move(aContext), std::move(aOffset), std::move(aHistoryEpoch), std::move(aRequireUserInteraction), [promise__](int32_t&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendBlobURLDataRequest(
        const nsCString& aBlobURL,
        nsIPrincipal* aTriggeringPrincipal,
        nsIPrincipal* aLoadingPrincipal,
        const OriginAttributes& aOriginAttributes,
        const uint64_t& aInnerWindowId,
        const mozilla::Maybe<nsID>& aAgentClusterId,
        mozilla::ipc::ResolveCallback<BlobURLDataRequestResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_BlobURLDataRequest(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aBlobURL);
    // Sentinel = 'aBlobURL'
    (msg__)->WriteSentinel(218628820);
    WriteIPDLParam(msg__, this, aTriggeringPrincipal);
    // Sentinel = 'aTriggeringPrincipal'
    (msg__)->WriteSentinel(1413089302);
    WriteIPDLParam(msg__, this, aLoadingPrincipal);
    // Sentinel = 'aLoadingPrincipal'
    (msg__)->WriteSentinel(1001719490);
    WriteIPDLParam(msg__, this, aOriginAttributes);
    // Sentinel = 'aOriginAttributes'
    (msg__)->WriteSentinel(1021839089);
    WriteIPDLParam(msg__, this, aInnerWindowId);
    // Sentinel = 'aInnerWindowId'
    (msg__)->WriteSentinel(689767811);
    WriteIPDLParam(msg__, this, aAgentClusterId);
    // Sentinel = 'aAgentClusterId'
    (msg__)->WriteSentinel(776537568);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BlobURLDataRequest", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendBlobURLDataRequest(
        const nsCString& aBlobURL,
        nsIPrincipal* aTriggeringPrincipal,
        nsIPrincipal* aLoadingPrincipal,
        const OriginAttributes& aOriginAttributes,
        const uint64_t& aInnerWindowId,
        const mozilla::Maybe<nsID>& aAgentClusterId) -> RefPtr<BlobURLDataRequestPromise>
{
    RefPtr<MozPromise<BlobURLDataRequestResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<BlobURLDataRequestResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendBlobURLDataRequest(std::move(aBlobURL), std::move(aTriggeringPrincipal), std::move(aLoadingPrincipal), std::move(aOriginAttributes), std::move(aInnerWindowId), std::move(aAgentClusterId), [promise__](BlobURLDataRequestResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendSetActiveSessionHistoryEntry(
        const MaybeDiscardedBrowsingContext& context,
        const mozilla::Maybe<nsPoint>& previousScrollPosition,
        const SessionHistoryInfo& info,
        const uint32_t& loadType,
        const uint32_t& updatedCacheKey,
        const nsID& changeID) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetActiveSessionHistoryEntry(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, context);
    // Sentinel = 'context'
    (msg__)->WriteSentinel(199164678);
    WriteIPDLParam(msg__, this, previousScrollPosition);
    // Sentinel = 'previousScrollPosition'
    (msg__)->WriteSentinel(1792346434);
    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);
    WriteIPDLParam(msg__, this, loadType);
    // Sentinel = 'loadType'
    (msg__)->WriteSentinel(246088515);
    WriteIPDLParam(msg__, this, updatedCacheKey);
    // Sentinel = 'updatedCacheKey'
    (msg__)->WriteSentinel(804062693);
    WriteIPDLParam(msg__, this, changeID);
    // Sentinel = 'changeID'
    (msg__)->WriteSentinel(235209460);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetActiveSessionHistoryEntry", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendReplaceActiveSessionHistoryEntry(
        const MaybeDiscardedBrowsingContext& context,
        const SessionHistoryInfo& info) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ReplaceActiveSessionHistoryEntry(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, context);
    // Sentinel = 'context'
    (msg__)->WriteSentinel(199164678);
    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ReplaceActiveSessionHistoryEntry", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRemoveDynEntriesFromActiveSessionHistoryEntry(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RemoveDynEntriesFromActiveSessionHistoryEntry(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RemoveDynEntriesFromActiveSessionHistoryEntry", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRemoveFromSessionHistory(
        const MaybeDiscardedBrowsingContext& aContext,
        const nsID& changeID) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RemoveFromSessionHistory(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, changeID);
    // Sentinel = 'changeID'
    (msg__)->WriteSentinel(235209460);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RemoveFromSessionHistory", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendScriptError(
        const nsString& message,
        const nsString& sourceName,
        const nsString& sourceLine,
        const uint32_t& lineNumber,
        const uint32_t& colNumber,
        const uint32_t& flags,
        const nsCString& category,
        const bool& privateWindow,
        const uint64_t& innerWindowId,
        const bool& fromChromeContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ScriptError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);
    WriteIPDLParam(msg__, this, sourceName);
    // Sentinel = 'sourceName'
    (msg__)->WriteSentinel(387580947);
    WriteIPDLParam(msg__, this, sourceLine);
    // Sentinel = 'sourceLine'
    (msg__)->WriteSentinel(388760602);
    WriteIPDLParam(msg__, this, lineNumber);
    // Sentinel = 'lineNumber'
    (msg__)->WriteSentinel(374932498);
    WriteIPDLParam(msg__, this, colNumber);
    // Sentinel = 'colNumber'
    (msg__)->WriteSentinel(304284584);
    WriteIPDLParam(msg__, this, flags);
    // Sentinel = 'flags'
    (msg__)->WriteSentinel(102171150);
    WriteIPDLParam(msg__, this, category);
    // Sentinel = 'category'
    (msg__)->WriteSentinel(247333727);
    WriteIPDLParam(msg__, this, privateWindow);
    // Sentinel = 'privateWindow'
    (msg__)->WriteSentinel(642778484);
    WriteIPDLParam(msg__, this, innerWindowId);
    // Sentinel = 'innerWindowId'
    (msg__)->WriteSentinel(627967298);
    WriteIPDLParam(msg__, this, fromChromeContext);
    // Sentinel = 'fromChromeContext'
    (msg__)->WriteSentinel(1038485240);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ScriptError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendReportFrameTimingData(
        const uint64_t& innerWindowId,
        const nsString& entryName,
        const nsString& initiatorType,
        UniquePtr<PerformanceTimingData>&& aData) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ReportFrameTimingData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, innerWindowId);
    // Sentinel = 'innerWindowId'
    (msg__)->WriteSentinel(627967298);
    WriteIPDLParam(msg__, this, entryName);
    // Sentinel = 'entryName'
    (msg__)->WriteSentinel(315950004);
    WriteIPDLParam(msg__, this, initiatorType);
    // Sentinel = 'initiatorType'
    (msg__)->WriteSentinel(642647414);
    WriteIPDLParam(msg__, this, std::move(aData));
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ReportFrameTimingData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendCommitBrowsingContextTransaction(
        const MaybeDiscardedBrowsingContext& aContext,
        const BrowsingContextTransaction& aTransaction,
        const uint64_t& aEpoch) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CommitBrowsingContextTransaction(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aTransaction);
    // Sentinel = 'aTransaction'
    (msg__)->WriteSentinel(523371752);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CommitBrowsingContextTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendAsyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AsyncMessage(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AsyncMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendNotifyPushSubscriptionModifiedObservers(
        const nsCString& scope,
        const Principal& principal) -> bool
{
    IPC::Message* msg__ = PContent::Msg_NotifyPushSubscriptionModifiedObservers(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushSubscriptionModifiedObservers", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendPushError(
        const nsCString& scope,
        const Principal& principal,
        const nsString& message,
        const uint32_t& flags) -> bool
{
    IPC::Message* msg__ = PContent::Msg_PushError(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);
    WriteIPDLParam(msg__, this, flags);
    // Sentinel = 'flags'
    (msg__)->WriteSentinel(102171150);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_PushError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendCreateBrowsingContext(
        const uint64_t& aGroupId,
        const BrowsingContextInitializer& aInit) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CreateBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aGroupId);
    // Sentinel = 'aGroupId'
    (msg__)->WriteSentinel(233964316);
    WriteIPDLParam(msg__, this, aInit);
    // Sentinel = 'aInit'
    (msg__)->WriteSentinel(94241270);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CreateBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendDiscardBrowsingContext(
        const MaybeDiscardedBrowsingContext& aContext,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PContent::Msg_DiscardBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_DiscardBrowsingContext", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PContentChild::SendDiscardBrowsingContext(const MaybeDiscardedBrowsingContext& aContext) -> RefPtr<DiscardBrowsingContextPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendDiscardBrowsingContext(std::move(aContext), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PContentChild::SendAdjustWindowFocus(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aCheckPermission,
        const bool& aIsVisible) -> bool
{
    IPC::Message* msg__ = PContent::Msg_AdjustWindowFocus(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCheckPermission);
    // Sentinel = 'aCheckPermission'
    (msg__)->WriteSentinel(878380649);
    WriteIPDLParam(msg__, this, aIsVisible);
    // Sentinel = 'aIsVisible'
    (msg__)->WriteSentinel(353567724);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_AdjustWindowFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendWindowClose(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aTrustedCaller) -> bool
{
    IPC::Message* msg__ = PContent::Msg_WindowClose(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aTrustedCaller);
    // Sentinel = 'aTrustedCaller'
    (msg__)->WriteSentinel(706479520);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_WindowClose", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendWindowFocus(
        const MaybeDiscardedBrowsingContext& aContext,
        const CallerType& aCallerType,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_WindowFocus(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_WindowFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendWindowBlur(
        const MaybeDiscardedBrowsingContext& aContext,
        const CallerType& aCallerType) -> bool
{
    IPC::Message* msg__ = PContent::Msg_WindowBlur(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_WindowBlur", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendRaiseWindow(
        const MaybeDiscardedBrowsingContext& aContext,
        const CallerType& aCallerType,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_RaiseWindow(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_RaiseWindow", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendClearFocus(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_ClearFocus(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_ClearFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSetFocusedBrowsingContext(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetFocusedBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetFocusedBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSetActiveBrowsingContext(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetActiveBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetActiveBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendUnsetActiveBrowsingContext(
        const MaybeDiscardedBrowsingContext& aContext,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_UnsetActiveBrowsingContext(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_UnsetActiveBrowsingContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSetFocusedElement(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aNeedsFocus) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetFocusedElement(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aNeedsFocus);
    // Sentinel = 'aNeedsFocus'
    (msg__)->WriteSentinel(419759185);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetFocusedElement", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendFinalizeFocusOuter(
        const MaybeDiscardedBrowsingContext& aContext,
        const bool& aCanFocus,
        const CallerType& aCallerType) -> bool
{
    IPC::Message* msg__ = PContent::Msg_FinalizeFocusOuter(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aCanFocus);
    // Sentinel = 'aCanFocus'
    (msg__)->WriteSentinel(275055476);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FinalizeFocusOuter", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendInsertNewFocusActionId(const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_InsertNewFocusActionId(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_InsertNewFocusActionId", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendBlurToParent(
        const MaybeDiscardedBrowsingContext& aFocusedBrowsingContext,
        const MaybeDiscardedBrowsingContext& aBrowsingContextToClear,
        const MaybeDiscardedBrowsingContext& aAncestorBrowsingContextToFocus,
        const bool& aIsLeavingDocument,
        const bool& aAdjustWidget,
        const bool& aBrowsingContextToClearHandled,
        const bool& aAncestorBrowsingContextToFocusHandled,
        const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PContent::Msg_BlurToParent(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aFocusedBrowsingContext);
    // Sentinel = 'aFocusedBrowsingContext'
    (msg__)->WriteSentinel(1842153819);
    WriteIPDLParam(msg__, this, aBrowsingContextToClear);
    // Sentinel = 'aBrowsingContextToClear'
    (msg__)->WriteSentinel(1859127612);
    WriteIPDLParam(msg__, this, aAncestorBrowsingContextToFocus);
    // Sentinel = 'aAncestorBrowsingContextToFocus'
    (msg__)->WriteSentinel(3344239764);
    WriteIPDLParam(msg__, this, aIsLeavingDocument);
    // Sentinel = 'aIsLeavingDocument'
    (msg__)->WriteSentinel(1103169315);
    WriteIPDLParam(msg__, this, aAdjustWidget);
    // Sentinel = 'aAdjustWidget'
    (msg__)->WriteSentinel(594609457);
    WriteIPDLParam(msg__, this, aBrowsingContextToClearHandled);
    // Sentinel = 'aBrowsingContextToClearHandled'
    (msg__)->WriteSentinel(3118074860);
    WriteIPDLParam(msg__, this, aAncestorBrowsingContextToFocusHandled);
    // Sentinel = 'aAncestorBrowsingContextToFocusHandled'
    (msg__)->WriteSentinel(701894468);
    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_BlurToParent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendMaybeExitFullscreen(const MaybeDiscardedBrowsingContext& aContext) -> bool
{
    IPC::Message* msg__ = PContent::Msg_MaybeExitFullscreen(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_MaybeExitFullscreen", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendWindowPostMessage(
        const MaybeDiscardedBrowsingContext& aContext,
        const ClonedOrErrorMessageData& aMessage,
        const PostMessageData& aData) -> bool
{
    IPC::Message* msg__ = PContent::Msg_WindowPostMessage(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_WindowPostMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendCommitWindowContextTransaction(
        const MaybeDiscardedWindowContext& aContext,
        const WindowContextTransaction& aTransaction,
        const uint64_t& aEpoch) -> bool
{
    IPC::Message* msg__ = PContent::Msg_CommitWindowContextTransaction(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContext);
    // Sentinel = 'aContext'
    (msg__)->WriteSentinel(235406151);
    WriteIPDLParam(msg__, this, aTransaction);
    // Sentinel = 'aTransaction'
    (msg__)->WriteSentinel(523371752);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_CommitWindowContextTransaction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendFOGData(ByteBuf&& buf) -> bool
{
    IPC::Message* msg__ = PContent::Msg_FOGData(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(buf));
    // Sentinel = 'buf'
    (msg__)->WriteSentinel(41484606);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_FOGData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::SendSetContainerFeaturePolicy(
        const MaybeDiscardedBrowsingContext& aContainerContext,
        FeaturePolicy* aContainerFeaturePolicy) -> bool
{
    IPC::Message* msg__ = PContent::Msg_SetContainerFeaturePolicy(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aContainerContext);
    // Sentinel = 'aContainerContext'
    (msg__)->WriteSentinel(1015744234);
    WriteIPDLParam(msg__, this, aContainerFeaturePolicy);
    // Sentinel = 'aContainerFeaturePolicy'
    (msg__)->WriteSentinel(1834158401);




    if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PContentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PContent::Msg_SetContainerFeaturePolicy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PContentChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBrowserMsgStart:
{
            PBrowserChild* actor = static_cast<PBrowserChild*>(aListener);
            auto& container = mManagedPBrowserChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PContentPermissionRequestMsgStart:
{
            PContentPermissionRequestChild* actor = static_cast<PContentPermissionRequestChild*>(aListener);
            auto& container = mManagedPContentPermissionRequestChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PCycleCollectWithLogsMsgStart:
{
            PCycleCollectWithLogsChild* actor = static_cast<PCycleCollectWithLogsChild*>(aListener);
            auto& container = mManagedPCycleCollectWithLogsChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PExternalHelperAppMsgStart:
{
            PExternalHelperAppChild* actor = static_cast<PExternalHelperAppChild*>(aListener);
            auto& container = mManagedPExternalHelperAppChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PFileDescriptorSetMsgStart:
{
            PFileDescriptorSetChild* actor = static_cast<PFileDescriptorSetChild*>(aListener);
            auto& container = mManagedPFileDescriptorSetChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PHalMsgStart:
{
            PHalChild* actor = static_cast<PHalChild*>(aListener);
            auto& container = mManagedPHalChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PHandlerServiceMsgStart:
{
            PHandlerServiceChild* actor = static_cast<PHandlerServiceChild*>(aListener);
            auto& container = mManagedPHandlerServiceChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PHeapSnapshotTempFileHelperMsgStart:
{
            PHeapSnapshotTempFileHelperChild* actor = static_cast<PHeapSnapshotTempFileHelperChild*>(aListener);
            auto& container = mManagedPHeapSnapshotTempFileHelperChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PRemoteLazyInputStreamMsgStart:
{
            PRemoteLazyInputStreamChild* actor = static_cast<PRemoteLazyInputStreamChild*>(aListener);
            auto& container = mManagedPRemoteLazyInputStreamChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PMediaMsgStart:
{
            PMediaChild* actor = static_cast<PMediaChild*>(aListener);
            auto& container = mManagedPMediaChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PNeckoMsgStart:
{
            PNeckoChild* actor = static_cast<PNeckoChild*>(aListener);
            auto& container = mManagedPNeckoChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case POfflineCacheUpdateMsgStart:
{
            POfflineCacheUpdateChild* actor = static_cast<POfflineCacheUpdateChild*>(aListener);
            auto& container = mManagedPOfflineCacheUpdateChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPrintingMsgStart:
{
            PPrintingChild* actor = static_cast<PPrintingChild*>(aListener);
            auto& container = mManagedPPrintingChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PChildToParentStreamMsgStart:
{
            PChildToParentStreamChild* actor = static_cast<PChildToParentStreamChild*>(aListener);
            auto& container = mManagedPChildToParentStreamChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PParentToChildStreamMsgStart:
{
            PParentToChildStreamChild* actor = static_cast<PParentToChildStreamChild*>(aListener);
            auto& container = mManagedPParentToChildStreamChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PSpeechSynthesisMsgStart:
{
            PSpeechSynthesisChild* actor = static_cast<PSpeechSynthesisChild*>(aListener);
            auto& container = mManagedPSpeechSynthesisChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PTestShellMsgStart:
{
            PTestShellChild* actor = static_cast<PTestShellChild*>(aListener);
            auto& container = mManagedPTestShellChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PRemoteSpellcheckEngineMsgStart:
{
            PRemoteSpellcheckEngineChild* actor = static_cast<PRemoteSpellcheckEngineChild*>(aListener);
            auto& container = mManagedPRemoteSpellcheckEngineChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PWebBrowserPersistDocumentMsgStart:
{
            PWebBrowserPersistDocumentChild* actor = static_cast<PWebBrowserPersistDocumentChild*>(aListener);
            auto& container = mManagedPWebBrowserPersistDocumentChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PWebrtcGlobalMsgStart:
{
            PWebrtcGlobalChild* actor = static_cast<PWebrtcGlobalChild*>(aListener);
            auto& container = mManagedPWebrtcGlobalChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPresentationMsgStart:
{
            PPresentationChild* actor = static_cast<PPresentationChild*>(aListener);
            auto& container = mManagedPPresentationChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PURLClassifierMsgStart:
{
            PURLClassifierChild* actor = static_cast<PURLClassifierChild*>(aListener);
            auto& container = mManagedPURLClassifierChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PURLClassifierLocalMsgStart:
{
            PURLClassifierLocalChild* actor = static_cast<PURLClassifierLocalChild*>(aListener);
            auto& container = mManagedPURLClassifierLocalChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PScriptCacheMsgStart:
{
            PScriptCacheChild* actor = static_cast<PScriptCacheChild*>(aListener);
            auto& container = mManagedPScriptCacheChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PLoginReputationMsgStart:
{
            PLoginReputationChild* actor = static_cast<PLoginReputationChild*>(aListener);
            auto& container = mManagedPLoginReputationChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PSessionStorageObserverMsgStart:
{
            PSessionStorageObserverChild* actor = static_cast<PSessionStorageObserverChild*>(aListener);
            auto& container = mManagedPSessionStorageObserverChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBenchmarkStorageMsgStart:
{
            PBenchmarkStorageChild* actor = static_cast<PBenchmarkStorageChild*>(aListener);
            auto& container = mManagedPBenchmarkStorageChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PContentChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PContentPermissionRequestMsgStart:
        static_cast<ContentChild*>(this)->DeallocPContentPermissionRequestChild(static_cast<PContentPermissionRequestChild*>(aListener));
        return;
    case PCycleCollectWithLogsMsgStart:
        static_cast<ContentChild*>(this)->DeallocPCycleCollectWithLogsChild(static_cast<PCycleCollectWithLogsChild*>(aListener));
        return;
    case PFileDescriptorSetMsgStart:
        static_cast<ContentChild*>(this)->DeallocPFileDescriptorSetChild(static_cast<PFileDescriptorSetChild*>(aListener));
        return;
    case PHalMsgStart:
        static_cast<ContentChild*>(this)->DeallocPHalChild(static_cast<PHalChild*>(aListener));
        return;
    case PHeapSnapshotTempFileHelperMsgStart:
        static_cast<ContentChild*>(this)->DeallocPHeapSnapshotTempFileHelperChild(static_cast<PHeapSnapshotTempFileHelperChild*>(aListener));
        return;
    case PMediaMsgStart:
        static_cast<ContentChild*>(this)->DeallocPMediaChild(static_cast<PMediaChild*>(aListener));
        return;
    case PNeckoMsgStart:
        static_cast<ContentChild*>(this)->DeallocPNeckoChild(static_cast<PNeckoChild*>(aListener));
        return;
    case PPrintingMsgStart:
        static_cast<ContentChild*>(this)->DeallocPPrintingChild(static_cast<PPrintingChild*>(aListener));
        return;
    case PChildToParentStreamMsgStart:
        static_cast<ContentChild*>(this)->DeallocPChildToParentStreamChild(static_cast<PChildToParentStreamChild*>(aListener));
        return;
    case PParentToChildStreamMsgStart:
        static_cast<ContentChild*>(this)->DeallocPParentToChildStreamChild(static_cast<PParentToChildStreamChild*>(aListener));
        return;
    case PSpeechSynthesisMsgStart:
        static_cast<ContentChild*>(this)->DeallocPSpeechSynthesisChild(static_cast<PSpeechSynthesisChild*>(aListener));
        return;
    case PTestShellMsgStart:
        static_cast<ContentChild*>(this)->DeallocPTestShellChild(static_cast<PTestShellChild*>(aListener));
        return;
    case PRemoteSpellcheckEngineMsgStart:
        static_cast<ContentChild*>(this)->DeallocPRemoteSpellcheckEngineChild(static_cast<PRemoteSpellcheckEngineChild*>(aListener));
        return;
    case PWebBrowserPersistDocumentMsgStart:
        static_cast<ContentChild*>(this)->DeallocPWebBrowserPersistDocumentChild(static_cast<PWebBrowserPersistDocumentChild*>(aListener));
        return;
    case PWebrtcGlobalMsgStart:
        static_cast<ContentChild*>(this)->DeallocPWebrtcGlobalChild(static_cast<PWebrtcGlobalChild*>(aListener));
        return;
    case PPresentationMsgStart:
        static_cast<ContentChild*>(this)->DeallocPPresentationChild(static_cast<PPresentationChild*>(aListener));
        return;
    case PURLClassifierMsgStart:
        static_cast<ContentChild*>(this)->DeallocPURLClassifierChild(static_cast<PURLClassifierChild*>(aListener));
        return;
    case PURLClassifierLocalMsgStart:
        static_cast<ContentChild*>(this)->DeallocPURLClassifierLocalChild(static_cast<PURLClassifierLocalChild*>(aListener));
        return;
    case PScriptCacheMsgStart:
        static_cast<ContentChild*>(this)->DeallocPScriptCacheChild(static_cast<PScriptCacheChild*>(aListener));
        return;
    case PLoginReputationMsgStart:
        static_cast<ContentChild*>(this)->DeallocPLoginReputationChild(static_cast<PLoginReputationChild*>(aListener));
        return;
    case PSessionStorageObserverMsgStart:
        static_cast<ContentChild*>(this)->DeallocPSessionStorageObserverChild(static_cast<PSessionStorageObserverChild*>(aListener));
        return;
    case PBenchmarkStorageMsgStart:
        static_cast<ContentChild*>(this)->DeallocPBenchmarkStorageChild(static_cast<PBenchmarkStorageChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PContentChild::OnMessageReceived(const Message& msg__) -> PContentChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PContent::Msg_ConstructBrowser__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ConstructBrowser", OTHER);

            PickleIterator iter__{msg__};
            ManagedEndpoint<mozilla::dom::PBrowserChild> browserEp{};
            ManagedEndpoint<mozilla::dom::PWindowGlobalChild> windowEp{};
            TabId tabId{};
            IPCTabContext context{};
            WindowGlobalInit windowInit{};
            uint32_t chromeFlags{};
            ContentParentId cpId{};
            bool isForBrowser{};
            bool isTopLevel{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(browserEp)))))) {
                FatalError("Error deserializing 'ManagedEndpoint<mozilla::dom::PBrowserChild>'");
                return MsgValueError;
            }
            // Sentinel = 'browserEp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 318833594)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ManagedEndpoint<mozilla::dom::PBrowserChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(windowEp)))))) {
                FatalError("Error deserializing 'ManagedEndpoint<mozilla::dom::PWindowGlobalChild>'");
                return MsgValueError;
            }
            // Sentinel = 'windowEp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 255984462)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ManagedEndpoint<mozilla::dom::PWindowGlobalChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(tabId)))))) {
                FatalError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            // Sentinel = 'tabId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99156453)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(context)))))) {
                FatalError("Error deserializing 'IPCTabContext'");
                return MsgValueError;
            }
            // Sentinel = 'context'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 199164678)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCTabContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(windowInit)))))) {
                FatalError("Error deserializing 'WindowGlobalInit'");
                return MsgValueError;
            }
            // Sentinel = 'windowInit'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 388891693)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowGlobalInit'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(chromeFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'chromeFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 446760044)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cpId)))))) {
                FatalError("Error deserializing 'ContentParentId'");
                return MsgValueError;
            }
            // Sentinel = 'cpId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64356737)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContentParentId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isForBrowser)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isForBrowser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 523371752)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isTopLevel)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isTopLevel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 371196936)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvConstructBrowser(std::move(browserEp), std::move(windowEp), std::move(tabId), std::move(context), std::move(windowInit), std::move(chromeFlags), std::move(cpId), std::move(isForBrowser), std::move(isTopLevel))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_PFileDescriptorSetConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Msg_PFileDescriptorSetConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PFileDescriptorSetConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            FileDescriptor fd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fd)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'fd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20054219)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PFileDescriptorSetChild* actor = (static_cast<ContentChild*>(this))->AllocPFileDescriptorSetChild(fd);
            if (!actor) {
                NS_WARNING("Cannot bind null PFileDescriptorSetChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPFileDescriptorSetChild.PutEntry(actor);

            if ((!((static_cast<ContentChild*>(this))->RecvPFileDescriptorSetConstructor(std::move(actor), std::move(fd))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_PWebBrowserPersistDocumentConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Msg_PWebBrowserPersistDocumentConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PWebBrowserPersistDocumentConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            PBrowserChild* aBrowser{};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBrowser)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'aBrowser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 237372230)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PWebBrowserPersistDocumentChild* actor = (static_cast<ContentChild*>(this))->AllocPWebBrowserPersistDocumentChild(aBrowser, aContext);
            if (!actor) {
                NS_WARNING("Cannot bind null PWebBrowserPersistDocumentChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPWebBrowserPersistDocumentChild.PutEntry(actor);

            if ((!((static_cast<ContentChild*>(this))->RecvPWebBrowserPersistDocumentConstructor(std::move(actor), aBrowser, std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RawMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RawMessage", OTHER);

            PickleIterator iter__{msg__};
            JSActorMessageMeta aMetadata{};
            mozilla::Maybe<ClonedMessageData> aData{};
            mozilla::Maybe<ClonedMessageData> aStack{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMetadata)))))) {
                FatalError("Error deserializing 'JSActorMessageMeta'");
                return MsgValueError;
            }
            // Sentinel = 'aMetadata'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 288752515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'JSActorMessageMeta'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStack)))))) {
                FatalError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            // Sentinel = 'aStack'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135201368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRawMessage(std::move(aMetadata), std::move(aData), std::move(aStack))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitGMPService__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitGMPService", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::gmp::PGMPServiceChild> service{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(service)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gmp::PGMPServiceChild>'");
                return MsgValueError;
            }
            // Sentinel = 'service'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201458418)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gmp::PGMPServiceChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInitGMPService(std::move(service))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitProcessHangMonitor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitProcessHangMonitor", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::PProcessHangMonitorChild> hangMonitor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(hangMonitor)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::PProcessHangMonitorChild>'");
                return MsgValueError;
            }
            // Sentinel = 'hangMonitor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 445514887)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::PProcessHangMonitorChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInitProcessHangMonitor(std::move(hangMonitor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitProfiler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitProfiler", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::PProfilerChild> aEndpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::PProfilerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'aEndpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::PProfilerChild>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInitProfiler(std::move(aEndpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitRendering__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitRendering", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::layers::PCompositorManagerChild> compositor{};
            Endpoint<mozilla::layers::PImageBridgeChild> imageBridge{};
            Endpoint<mozilla::gfx::PVRManagerChild> vr{};
            Endpoint<mozilla::PRemoteDecoderManagerChild> video{};
            nsTArray<uint32_t> namespaces{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(compositor)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PCompositorManagerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'compositor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 393217104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PCompositorManagerChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(imageBridge)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PImageBridgeChild>'");
                return MsgValueError;
            }
            // Sentinel = 'imageBridge'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 436012113)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PImageBridgeChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vr)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gfx::PVRManagerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'vr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 23068905)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gfx::PVRManagerChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(video)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::PRemoteDecoderManagerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'video'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106693144)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::PRemoteDecoderManagerChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(namespaces)))))) {
                FatalError("Error deserializing 'uint32_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'namespaces'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 381027361)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInitRendering(std::move(compositor), std::move(imageBridge), std::move(vr), std::move(video), std::move(namespaces))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ReinitRendering__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ReinitRendering", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::layers::PCompositorManagerChild> compositor{};
            Endpoint<mozilla::layers::PImageBridgeChild> bridge{};
            Endpoint<mozilla::gfx::PVRManagerChild> vr{};
            Endpoint<mozilla::PRemoteDecoderManagerChild> video{};
            nsTArray<uint32_t> namespaces{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(compositor)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PCompositorManagerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'compositor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 393217104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PCompositorManagerChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(bridge)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::layers::PImageBridgeChild>'");
                return MsgValueError;
            }
            // Sentinel = 'bridge'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143589998)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::layers::PImageBridgeChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vr)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::gfx::PVRManagerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'vr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 23068905)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::gfx::PVRManagerChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(video)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::PRemoteDecoderManagerChild>'");
                return MsgValueError;
            }
            // Sentinel = 'video'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106693144)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::PRemoteDecoderManagerChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(namespaces)))))) {
                FatalError("Error deserializing 'uint32_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'namespaces'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 381027361)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvReinitRendering(std::move(compositor), std::move(bridge), std::move(vr), std::move(video), std::move(namespaces))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NetworkLinkTypeChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NetworkLinkTypeChange", OTHER);

            PickleIterator iter__{msg__};
            uint32_t type{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(type)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'type'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760067)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvNetworkLinkTypeChange(std::move(type))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ReinitRenderingForDeviceReset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ReinitRenderingForDeviceReset", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvReinitRenderingForDeviceReset()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetProcessSandbox__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetProcessSandbox", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<FileDescriptor> aBroker{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBroker)))))) {
                FatalError("Error deserializing 'FileDescriptor?'");
                return MsgValueError;
            }
            // Sentinel = 'aBroker'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179110599)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetProcessSandbox(std::move(aBroker))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RequestMemoryReport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RequestMemoryReport", OTHER);

            PickleIterator iter__{msg__};
            uint32_t generation{};
            bool anonymize{};
            bool minimizeMemoryUsage{};
            mozilla::Maybe<FileDescriptor> DMDFile{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(generation)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'generation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 381158445)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(anonymize)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'anonymize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 321127387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(minimizeMemoryUsage)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'minimizeMemoryUsage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1321600977)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(DMDFile)))))) {
                FatalError("Error deserializing 'FileDescriptor?'");
                return MsgValueError;
            }
            // Sentinel = 'DMDFile'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143983190)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            RequestMemoryReportResolver resolver = [proxy__, seqno__, id__](const uint32_t& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_RequestMemoryReport(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aGeneration'
                (reply__)->WriteSentinel(430179438);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvRequestMemoryReport(std::move(generation), std::move(anonymize), std::move(minimizeMemoryUsage), std::move(DMDFile), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RequestPerformanceMetrics__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RequestPerformanceMetrics", OTHER);

            PickleIterator iter__{msg__};
            nsID aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRequestPerformanceMetrics(std::move(aID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GetUntrustedModulesData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetUntrustedModulesData", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetUntrustedModulesDataResolver resolver = [proxy__, seqno__, id__](mozilla::Maybe<UntrustedModulesData>&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_GetUntrustedModulesData(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, std::move(aParam));
                // Sentinel = 'data'
                (reply__)->WriteSentinel(67109275);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvGetUntrustedModulesData(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_BidiKeyboardNotify__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BidiKeyboardNotify", OTHER);

            PickleIterator iter__{msg__};
            bool isLangRTL{};
            bool haveBidiKeyboards{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isLangRTL)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isLangRTL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 290980689)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(haveBidiKeyboards)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'haveBidiKeyboards'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1003161281)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvBidiKeyboardNotify(std::move(isLangRTL), std::move(haveBidiKeyboards))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PCycleCollectWithLogsConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PCycleCollectWithLogsConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            bool dumpAllTraces{};
            FileDescriptor gcLog{};
            FileDescriptor ccLog{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dumpAllTraces)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'dumpAllTraces'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 610600242)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(gcLog)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'gcLog'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 96272877)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(ccLog)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'ccLog'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94962153)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PCycleCollectWithLogsChild* actor = (static_cast<ContentChild*>(this))->AllocPCycleCollectWithLogsChild(dumpAllTraces, gcLog, ccLog);
            if (!actor) {
                NS_WARNING("Cannot bind null PCycleCollectWithLogsChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPCycleCollectWithLogsChild.PutEntry(actor);

            if ((!((static_cast<ContentChild*>(this))->RecvPCycleCollectWithLogsConstructor(std::move(actor), std::move(dumpAllTraces), std::move(gcLog), std::move(ccLog))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PTestShellConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PTestShellConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PTestShellChild* actor = (static_cast<ContentChild*>(this))->AllocPTestShellChild();
            if (!actor) {
                NS_WARNING("Cannot bind null PTestShellChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPTestShellChild.PutEntry(actor);

            if ((!((static_cast<ContentChild*>(this))->RecvPTestShellConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PScriptCacheConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PScriptCacheConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            FileDescOrError cacheFile{};
            bool wantCacheData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cacheFile)))))) {
                FatalError("Error deserializing 'FileDescOrError'");
                return MsgValueError;
            }
            // Sentinel = 'cacheFile'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 289014645)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescOrError'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(wantCacheData)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'wantCacheData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 602080521)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PScriptCacheChild* actor = (static_cast<ContentChild*>(this))->AllocPScriptCacheChild(cacheFile, wantCacheData);
            if (!actor) {
                NS_WARNING("Cannot bind null PScriptCacheChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPScriptCacheChild.PutEntry(actor);

            if ((!((static_cast<ContentChild*>(this))->RecvPScriptCacheConstructor(std::move(actor), std::move(cacheFile), std::move(wantCacheData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RegisterChrome__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RegisterChrome", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<ChromePackage> packages{};
            nsTArray<SubstitutionMapping> substitutions{};
            nsTArray<OverrideMapping> overrides{};
            nsCString locale{};
            bool reset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(packages)))))) {
                FatalError("Error deserializing 'ChromePackage[]'");
                return MsgValueError;
            }
            // Sentinel = 'packages'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 244187968)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ChromePackage[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(substitutions)))))) {
                FatalError("Error deserializing 'SubstitutionMapping[]'");
                return MsgValueError;
            }
            // Sentinel = 'substitutions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 668861873)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SubstitutionMapping[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(overrides)))))) {
                FatalError("Error deserializing 'OverrideMapping[]'");
                return MsgValueError;
            }
            // Sentinel = 'overrides'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 324404180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OverrideMapping[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(locale)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'locale'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 145031793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reset)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'reset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610660)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRegisterChrome(std::move(packages), std::move(substitutions), std::move(overrides), std::move(locale), std::move(reset))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RegisterChromeItem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RegisterChromeItem", OTHER);

            PickleIterator iter__{msg__};
            ChromeRegistryItem item{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(item)))))) {
                FatalError("Error deserializing 'ChromeRegistryItem'");
                return MsgValueError;
            }
            // Sentinel = 'item'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70975920)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ChromeRegistryItem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRegisterChromeItem(std::move(item))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ClearImageCache__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ClearImageCache", OTHER);

            PickleIterator iter__{msg__};
            bool privateLoader{};
            bool chrome{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(privateLoader)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'privateLoader'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 635372883)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(chrome)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'chrome'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146014847)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvClearImageCache(std::move(privateLoader), std::move(chrome))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ClearStyleSheetCache__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ClearStyleSheetCache", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<RefPtr<nsIPrincipal>> aForPrincipal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal?'");
                return MsgValueError;
            }
            // Sentinel = 'aForPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 593429803)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvClearStyleSheetCache(std::move(aForPrincipal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetOffline__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetOffline", OTHER);

            PickleIterator iter__{msg__};
            bool offline{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(offline)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'offline'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 194904804)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetOffline(std::move(offline))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetConnectivity__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetConnectivity", OTHER);

            PickleIterator iter__{msg__};
            bool connectivity{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(connectivity)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'connectivity'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 548734240)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetConnectivity(std::move(connectivity))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetCaptivePortalState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetCaptivePortalState", OTHER);

            PickleIterator iter__{msg__};
            int32_t aState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetCaptivePortalState(std::move(aState))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyVisited__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyVisited", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<VisitedQueryResult> uri{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'VisitedQueryResult[]'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VisitedQueryResult[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvNotifyVisited(std::move(uri))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ThemeChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ThemeChanged", OTHER);

            PickleIterator iter__{msg__};
            LookAndFeelData lookAndFeelData{};
            ThemeChangeKind aKind{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lookAndFeelData)))))) {
                FatalError("Error deserializing 'LookAndFeelData'");
                return MsgValueError;
            }
            // Sentinel = 'lookAndFeelData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 782239167)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LookAndFeelData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKind)))))) {
                FatalError("Error deserializing 'ThemeChangeKind'");
                return MsgValueError;
            }
            // Sentinel = 'aKind'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 93389288)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ThemeChangeKind'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvThemeChanged(std::move(lookAndFeelData), std::move(aKind))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateSystemParameters__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateSystemParameters", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<SystemParameterKVPair> aUpdates{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUpdates)))))) {
                FatalError("Error deserializing 'SystemParameterKVPair[]'");
                return MsgValueError;
            }
            // Sentinel = 'aUpdates'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236192568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SystemParameterKVPair[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateSystemParameters(std::move(aUpdates))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PreferenceUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PreferenceUpdate", OTHER);

            PickleIterator iter__{msg__};
            Pref pref{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pref)))))) {
                FatalError("Error deserializing 'Pref'");
                return MsgValueError;
            }
            // Sentinel = 'pref'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 71958958)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Pref'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvPreferenceUpdate(std::move(pref))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_VarUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_VarUpdate", OTHER);

            PickleIterator iter__{msg__};
            GfxVarUpdate var{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(var)))))) {
                FatalError("Error deserializing 'GfxVarUpdate'");
                return MsgValueError;
            }
            // Sentinel = 'var'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 43581770)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GfxVarUpdate'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvVarUpdate(std::move(var))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdatePerfStatsCollectionMask__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdatePerfStatsCollectionMask", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aMask{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMask)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMask'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 93454830)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdatePerfStatsCollectionMask(std::move(aMask))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CollectPerfStatsJSON__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CollectPerfStatsJSON", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            CollectPerfStatsJSONResolver resolver = [proxy__, seqno__, id__](const nsCString& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_CollectPerfStatsJSON(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aStats'
                (reply__)->WriteSentinel(137953905);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvCollectPerfStatsJSON(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DataStoragePut__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DataStoragePut", OTHER);

            PickleIterator iter__{msg__};
            nsString aFilename{};
            DataStorageItem aItem{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFilename)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aFilename'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 287048579)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aItem)))))) {
                FatalError("Error deserializing 'DataStorageItem'");
                return MsgValueError;
            }
            // Sentinel = 'aItem'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94437873)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DataStorageItem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvDataStoragePut(std::move(aFilename), std::move(aItem))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DataStorageRemove__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DataStorageRemove", OTHER);

            PickleIterator iter__{msg__};
            nsString aFilename{};
            nsCString aKey{};
            DataStorageType aType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFilename)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aFilename'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 287048579)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKey)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aKey'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61604235)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'DataStorageType'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DataStorageType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvDataStorageRemove(std::move(aFilename), std::move(aKey), std::move(aType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DataStorageClear__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DataStorageClear", OTHER);

            PickleIterator iter__{msg__};
            nsString aFilename{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFilename)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aFilename'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 287048579)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvDataStorageClear(std::move(aFilename))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyAlertsObserver__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyAlertsObserver", OTHER);

            PickleIterator iter__{msg__};
            nsCString topic{};
            nsString data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(topic)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'topic'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109707808)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvNotifyAlertsObserver(std::move(topic), std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GeolocationUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GeolocationUpdate", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIDOMGeoPosition> aPosition{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPosition)))))) {
                FatalError("Error deserializing 'nsIDOMGeoPosition'");
                return MsgValueError;
            }
            // Sentinel = 'aPosition'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303104951)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIDOMGeoPosition'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvGeolocationUpdate(aPosition)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GeolocationError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GeolocationError", OTHER);

            PickleIterator iter__{msg__};
            uint16_t errorCode{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(errorCode)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'errorCode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 312345510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvGeolocationError(std::move(errorCode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateDictionaryList__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateDictionaryList", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> dictionaries{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dictionaries)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'dictionaries'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 540738815)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateDictionaryList(std::move(dictionaries))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateFontList__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateFontList", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<SystemFontListEntry> fontList{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fontList)))))) {
                FatalError("Error deserializing 'SystemFontListEntry[]'");
                return MsgValueError;
            }
            // Sentinel = 'fontList'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 249430868)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SystemFontListEntry[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateFontList(std::move(fontList))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RebuildFontList__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RebuildFontList", OTHER);

            PickleIterator iter__{msg__};
            bool aFulLRebuild{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFulLRebuild)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aFulLRebuild'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 489227420)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRebuildFontList(std::move(aFulLRebuild))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FontListChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FontListChanged", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvFontListChanged()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateAppLocales__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateAppLocales", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> appLocales{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(appLocales)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'appLocales'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 367395845)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateAppLocales(std::move(appLocales))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateRequestedLocales__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateRequestedLocales", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> requestedLocales{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestedLocales)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'requestedLocales'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 951977622)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateRequestedLocales(std::move(requestedLocales))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RegisterStringBundles__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RegisterStringBundles", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<StringBundleDescriptor> stringBundles{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stringBundles)))))) {
                FatalError("Error deserializing 'StringBundleDescriptor[]'");
                return MsgValueError;
            }
            // Sentinel = 'stringBundles'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 640484709)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'StringBundleDescriptor[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRegisterStringBundles(std::move(stringBundles))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateSharedData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateSharedData", OTHER);

            PickleIterator iter__{msg__};
            FileDescriptor mapFile{};
            uint32_t aSize{};
            nsTArray<IPCBlob> blobs{};
            nsTArray<nsCString> changedKeys{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(mapFile)))))) {
                FatalError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'mapFile'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185074367)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSize)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97124861)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(blobs)))))) {
                FatalError("Error deserializing 'IPCBlob[]'");
                return MsgValueError;
            }
            // Sentinel = 'blobs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102957587)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCBlob[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(changedKeys)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'changedKeys'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 437781607)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateSharedData(std::move(mapFile), std::move(aSize), std::move(blobs), std::move(changedKeys))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AddPermission__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddPermission", OTHER);

            PickleIterator iter__{msg__};
            Permission permission{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(permission)))))) {
                FatalError("Error deserializing 'Permission'");
                return MsgValueError;
            }
            // Sentinel = 'permission'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 394921034)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Permission'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvAddPermission(std::move(permission))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RemoveAllPermissions__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RemoveAllPermissions", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvRemoveAllPermissions()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FlushMemory__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FlushMemory", OTHER);

            PickleIterator iter__{msg__};
            nsString reason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'reason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148112009)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvFlushMemory(std::move(reason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ApplicationBackground__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ApplicationBackground", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvApplicationBackground()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ApplicationForeground__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ApplicationForeground", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvApplicationForeground()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GarbageCollect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GarbageCollect", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvGarbageCollect()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CycleCollect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CycleCollect", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvCycleCollect()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UnlinkGhosts__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UnlinkGhosts", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvUnlinkGhosts()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ActivateA11y__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ActivateA11y", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aMainChromeTid{};
            uint32_t aMsaaID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMainChromeTid)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMainChromeTid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 668599654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMsaaID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMsaaID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 171442801)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvActivateA11y(std::move(aMainChromeTid), std::move(aMsaaID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ShutdownA11y__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ShutdownA11y", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvShutdownA11y()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AppInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AppInfo", OTHER);

            PickleIterator iter__{msg__};
            nsCString version{};
            nsCString buildID{};
            nsCString name{};
            nsCString UAName{};
            nsCString ID{};
            nsCString vendor{};
            nsCString sourceURL{};
            nsCString updateURL{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(version)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'version'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 204210951)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buildID)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'buildID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 187826846)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(name)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69075362)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(UAName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'UAName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 115540504)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(ID)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'ID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 14155918)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vendor)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'vendor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 150405775)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceURL)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'sourceURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 316474245)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(updateURL)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'updateURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 309265271)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvAppInfo(std::move(version), std::move(buildID), std::move(name), std::move(UAName), std::move(ID), std::move(vendor), std::move(sourceURL), std::move(updateURL))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RemoteType__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RemoteType", OTHER);

            PickleIterator iter__{msg__};
            nsCString aRemoteType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRemoteType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRemoteType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 437847152)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRemoteType(std::move(aRemoteType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitServiceWorkers__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitServiceWorkers", OTHER);

            PickleIterator iter__{msg__};
            ServiceWorkerConfiguration aConfig{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aConfig)))))) {
                FatalError("Error deserializing 'ServiceWorkerConfiguration'");
                return MsgValueError;
            }
            // Sentinel = 'aConfig'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 177078968)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ServiceWorkerConfiguration'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInitServiceWorkers(std::move(aConfig))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitBlobURLs__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitBlobURLs", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<BlobURLRegistrationData> registrations{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(registrations)))))) {
                FatalError("Error deserializing 'BlobURLRegistrationData[]'");
                return MsgValueError;
            }
            // Sentinel = 'registrations'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 648873359)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BlobURLRegistrationData[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInitBlobURLs(std::move(registrations))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InitJSActorInfos__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitJSActorInfos", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<JSProcessActorInfo> aContentInfos{};
            nsTArray<JSWindowActorInfo> aWindowInfos{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentInfos)))))) {
                FatalError("Error deserializing 'JSProcessActorInfo[]'");
                return MsgValueError;
            }
            // Sentinel = 'aContentInfos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 600638780)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'JSProcessActorInfo[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowInfos)))))) {
                FatalError("Error deserializing 'JSWindowActorInfo[]'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowInfos'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 518522073)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'JSWindowActorInfo[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInitJSActorInfos(std::move(aContentInfos), std::move(aWindowInfos))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UnregisterJSWindowActor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UnregisterJSWindowActor", OTHER);

            PickleIterator iter__{msg__};
            nsCString name{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(name)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69075362)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUnregisterJSWindowActor(std::move(name))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UnregisterJSProcessActor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UnregisterJSProcessActor", OTHER);

            PickleIterator iter__{msg__};
            nsCString name{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(name)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69075362)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUnregisterJSProcessActor(std::move(name))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetXPCOMProcessAttributes__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetXPCOMProcessAttributes", OTHER);

            PickleIterator iter__{msg__};
            XPCOMInitData xpcomInit{};
            StructuredCloneData initialData{};
            LookAndFeelData lookAndFeeldata{};
            nsTArray<SystemFontListEntry> systemFontList{};
            mozilla::Maybe<SharedMemoryHandle> sharedUASheetHandle{};
            uintptr_t sharedUASheetAddress{};
            nsTArray<SharedMemoryHandle> sharedFontListBlocks{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(xpcomInit)))))) {
                FatalError("Error deserializing 'XPCOMInitData'");
                return MsgValueError;
            }
            // Sentinel = 'xpcomInit'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 316998588)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'XPCOMInitData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(initialData)))))) {
                FatalError("Error deserializing 'StructuredCloneData'");
                return MsgValueError;
            }
            // Sentinel = 'initialData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 451413093)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'StructuredCloneData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lookAndFeeldata)))))) {
                FatalError("Error deserializing 'LookAndFeelData'");
                return MsgValueError;
            }
            // Sentinel = 'lookAndFeeldata'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 790627807)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LookAndFeelData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(systemFontList)))))) {
                FatalError("Error deserializing 'SystemFontListEntry[]'");
                return MsgValueError;
            }
            // Sentinel = 'systemFontList'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 746194393)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SystemFontListEntry[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sharedUASheetHandle)))))) {
                FatalError("Error deserializing 'SharedMemoryHandle?'");
                return MsgValueError;
            }
            // Sentinel = 'sharedUASheetHandle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1232406355)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SharedMemoryHandle?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sharedUASheetAddress)))))) {
                FatalError("Error deserializing 'uintptr_t'");
                return MsgValueError;
            }
            // Sentinel = 'sharedUASheetAddress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1361643469)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uintptr_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sharedFontListBlocks)))))) {
                FatalError("Error deserializing 'SharedMemoryHandle[]'");
                return MsgValueError;
            }
            // Sentinel = 'sharedFontListBlocks'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1412827145)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SharedMemoryHandle[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetXPCOMProcessAttributes(std::move(xpcomInit), std::move(initialData), std::move(lookAndFeeldata), std::move(systemFontList), std::move(sharedUASheetHandle), std::move(sharedUASheetAddress), std::move(sharedFontListBlocks))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_LastPrivateDocShellDestroyed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_LastPrivateDocShellDestroyed", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvLastPrivateDocShellDestroyed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyProcessPriorityChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyProcessPriorityChanged", OTHER);

            PickleIterator iter__{msg__};
            ProcessPriority priority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(priority)))))) {
                FatalError("Error deserializing 'ProcessPriority'");
                return MsgValueError;
            }
            // Sentinel = 'priority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 262865795)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ProcessPriority'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvNotifyProcessPriorityChanged(std::move(priority))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_MinimizeMemoryUsage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_MinimizeMemoryUsage", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvMinimizeMemoryUsage()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_LoadAndRegisterSheet__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_LoadAndRegisterSheet", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> uri{};
            uint32_t type{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(type)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'type'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760067)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvLoadAndRegisterSheet(uri, std::move(type))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UnregisterSheet__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UnregisterSheet", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> uri{};
            uint32_t type{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(type)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'type'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760067)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUnregisterSheet(uri, std::move(type))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyIdleObserver__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyIdleObserver", OTHER);

            PickleIterator iter__{msg__};
            uint64_t observerId{};
            nsCString topic{};
            nsString str{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(observerId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'observerId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 386335766)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(topic)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'topic'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109707808)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(str)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'str'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45482330)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvNotifyIdleObserver(std::move(observerId), std::move(topic), std::move(str))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InvokeDragSession__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InvokeDragSession", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<IPCDataTransfer> transfers{};
            uint32_t action{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transfers)))))) {
                FatalError("Error deserializing 'IPCDataTransfer[]'");
                return MsgValueError;
            }
            // Sentinel = 'transfers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 323290073)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCDataTransfer[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(action)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'action'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143786623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInvokeDragSession(std::move(transfers), std::move(action))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_EndDragSession__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_EndDragSession", OTHER);

            PickleIterator iter__{msg__};
            bool aDoneDrag{};
            bool aUserCancelled{};
            LayoutDeviceIntPoint aDragEndPoint{};
            uint32_t aKeyModifiers{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDoneDrag)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aDoneDrag'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 280429414)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUserCancelled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aUserCancelled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 682493308)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDragEndPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aDragEndPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 567411969)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKeyModifiers)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aKeyModifiers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 588645677)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvEndDragSession(std::move(aDoneDrag), std::move(aUserCancelled), std::move(aDragEndPoint), std::move(aKeyModifiers))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DomainSetChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DomainSetChanged", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aSetType{};
            uint32_t aChangeType{};
            RefPtr<nsIURI> aDomain{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSetType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSetType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 234292016)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChangeType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aChangeType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 417924170)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDomain)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aDomain'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 176685754)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvDomainSetChanged(std::move(aSetType), std::move(aChangeType), aDomain)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_Shutdown", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_LoadProcessScript__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_LoadProcessScript", OTHER);

            PickleIterator iter__{msg__};
            nsString url{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvLoadProcessScript(std::move(url))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateWindow", OTHER);

            PickleIterator iter__{msg__};
            uintptr_t aChildId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChildId)))))) {
                FatalError("Error deserializing 'uintptr_t'");
                return MsgValueError;
            }
            // Sentinel = 'aChildId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 221512435)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uintptr_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateWindow(std::move(aChildId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPresentationReceiverLaunched__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPresentationReceiverLaunched", OTHER);

            PickleIterator iter__{msg__};
            PBrowserChild* aIframe{};
            nsString aSessionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIframe)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!((*((&(aIframe))))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'aIframe'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 176947894)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvNotifyPresentationReceiverLaunched(aIframe, std::move(aSessionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPresentationReceiverCleanUp__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPresentationReceiverCleanUp", OTHER);

            PickleIterator iter__{msg__};
            nsString aSessionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvNotifyPresentationReceiverCleanUp(std::move(aSessionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyEmptyHTTPCache__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyEmptyHTTPCache", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvNotifyEmptyHTTPCache()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_Push__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_Push", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};
            nsString messageId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(messageId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'messageId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 310576019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvPush(std::move(scope), std::move(principal), std::move(messageId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PushWithData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PushWithData", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};
            nsString messageId{};
            nsTArray<uint8_t> data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(messageId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'messageId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 310576019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvPushWithData(std::move(scope), std::move(principal), std::move(messageId), std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PushSubscriptionChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PushSubscriptionChange", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvPushSubscriptionChange(std::move(scope), std::move(principal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GetFilesResponse__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetFilesResponse", OTHER);

            PickleIterator iter__{msg__};
            nsID aID{};
            GetFilesResponseResult aResult{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResult)))))) {
                FatalError("Error deserializing 'GetFilesResponseResult'");
                return MsgValueError;
            }
            // Sentinel = 'aResult'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205473)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GetFilesResponseResult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvGetFilesResponse(std::move(aID), std::move(aResult))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_BlobURLRegistration__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BlobURLRegistration", OTHER);

            PickleIterator iter__{msg__};
            nsCString aURI{};
            IPCBlob aBlob{};
            Principal aPrincipal{};
            mozilla::Maybe<nsID> aAgentClusterId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBlob)))))) {
                FatalError("Error deserializing 'IPCBlob'");
                return MsgValueError;
            }
            // Sentinel = 'aBlob'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 91619809)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCBlob'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrincipal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'aPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364381188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAgentClusterId)))))) {
                FatalError("Error deserializing 'nsID?'");
                return MsgValueError;
            }
            // Sentinel = 'aAgentClusterId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 776537568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvBlobURLRegistration(std::move(aURI), std::move(aBlob), std::move(aPrincipal), std::move(aAgentClusterId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_BlobURLUnregistration__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BlobURLUnregistration", OTHER);

            PickleIterator iter__{msg__};
            nsCString aURI{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvBlobURLUnregistration(std::move(aURI))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GMPsChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GMPsChanged", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<GMPCapabilityData> capabilities{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(capabilities)))))) {
                FatalError("Error deserializing 'GMPCapabilityData[]'");
                return MsgValueError;
            }
            // Sentinel = 'capabilities'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 527434987)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPCapabilityData[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvGMPsChanged(std::move(capabilities))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PParentToChildStreamConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PParentToChildStreamConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PParentToChildStreamChild* actor = (static_cast<ContentChild*>(this))->AllocPParentToChildStreamChild();
            if (!actor) {
                NS_WARNING("Cannot bind null PParentToChildStreamChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPParentToChildStreamChild.PutEntry(actor);

            if ((!((static_cast<ContentChild*>(this))->RecvPParentToChildStreamConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ProvideAnonymousTemporaryFile__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ProvideAnonymousTemporaryFile", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            FileDescOrError aFD{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFD)))))) {
                FatalError("Error deserializing 'FileDescOrError'");
                return MsgValueError;
            }
            // Sentinel = 'aFD'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 32899308)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FileDescOrError'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvProvideAnonymousTemporaryFile(std::move(aID), std::move(aFD))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetPermissionsWithKey__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetPermissionsWithKey", OTHER);

            PickleIterator iter__{msg__};
            nsCString aPermissionKey{};
            nsTArray<Permission> aPermissions{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPermissionKey)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aPermissionKey'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 708511156)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPermissions)))))) {
                FatalError("Error deserializing 'Permission[]'");
                return MsgValueError;
            }
            // Sentinel = 'aPermissions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 527697150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Permission[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetPermissionsWithKey(std::move(aPermissionKey), std::move(aPermissions))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RefreshScreens__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RefreshScreens", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<ScreenDetails> aScreens{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScreens)))))) {
                FatalError("Error deserializing 'ScreenDetails[]'");
                return MsgValueError;
            }
            // Sentinel = 'aScreens'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 234029877)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenDetails[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRefreshScreens(std::move(aScreens))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PRemoteLazyInputStreamConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PRemoteLazyInputStreamConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsID aID{};
            uint64_t aSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSize)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97124861)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PRemoteLazyInputStreamChild> actor = (static_cast<ContentChild*>(this))->AllocPRemoteLazyInputStreamChild(aID, aSize);
            if (!actor) {
                NS_WARNING("Cannot bind null PRemoteLazyInputStreamChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPRemoteLazyInputStreamChild.PutEntry(actor);

            if ((!((static_cast<ContentChild*>(this))->RecvPRemoteLazyInputStreamConstructor(actor, std::move(aID), std::move(aSize))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetPluginList__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetPluginList", OTHER);

            PickleIterator iter__{msg__};
            uint32_t pluginEpoch{};
            nsTArray<PluginTag> plugins{};
            nsTArray<FakePluginTag> fakePlugins{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pluginEpoch)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pluginEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 460260479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(plugins)))))) {
                FatalError("Error deserializing 'PluginTag[]'");
                return MsgValueError;
            }
            // Sentinel = 'plugins'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 202244867)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginTag[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fakePlugins)))))) {
                FatalError("Error deserializing 'FakePluginTag[]'");
                return MsgValueError;
            }
            // Sentinel = 'fakePlugins'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 440992890)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FakePluginTag[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetPluginList(std::move(pluginEpoch), std::move(plugins), std::move(fakePlugins))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ShareCodeCoverageMutex__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ShareCodeCoverageMutex", OTHER);

            PickleIterator iter__{msg__};
            CrossProcessMutexHandle handle{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle)))))) {
                FatalError("Error deserializing 'CrossProcessMutexHandle'");
                return MsgValueError;
            }
            // Sentinel = 'handle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142344813)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CrossProcessMutexHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvShareCodeCoverageMutex(std::move(handle))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FlushCodeCoverageCounters__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FlushCodeCoverageCounters", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            FlushCodeCoverageCountersResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_FlushCodeCoverageCounters(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'unused'
                (reply__)->WriteSentinel(155517589);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvFlushCodeCoverageCounters(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetInputEventQueueEnabled__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetInputEventQueueEnabled", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvSetInputEventQueueEnabled()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FlushInputEventQueue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FlushInputEventQueue", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvFlushInputEventQueue()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ResumeInputEventQueue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ResumeInputEventQueue", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvResumeInputEventQueue()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SuspendInputEventQueue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SuspendInputEventQueue", OTHER);

            if ((!((static_cast<ContentChild*>(this))->RecvSuspendInputEventQueue()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AddDynamicScalars__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddDynamicScalars", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<DynamicScalarDefinition> definitions{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(definitions)))))) {
                FatalError("Error deserializing 'DynamicScalarDefinition[]'");
                return MsgValueError;
            }
            // Sentinel = 'definitions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 455279773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DynamicScalarDefinition[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvAddDynamicScalars(std::move(definitions))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CrossProcessRedirect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CrossProcessRedirect", OTHER);

            PickleIterator iter__{msg__};
            RedirectToRealChannelArgs args{};
            nsTArray<Endpoint<mozilla::extensions::PStreamFilterParent>> aEndpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(args)))))) {
                FatalError("Error deserializing 'RedirectToRealChannelArgs'");
                return MsgValueError;
            }
            // Sentinel = 'args'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 69140910)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RedirectToRealChannelArgs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::extensions::PStreamFilterParent>[]'");
                return MsgValueError;
            }
            // Sentinel = 'aEndpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::extensions::PStreamFilterParent>[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            CrossProcessRedirectResolver resolver = [proxy__, seqno__, id__](const nsresult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_CrossProcessRedirect(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'rv'
                (reply__)->WriteSentinel(22806761);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvCrossProcessRedirect(std::move(args), std::move(aEndpoint), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_StartDelayedAutoplayMediaComponents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_StartDelayedAutoplayMediaComponents", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvStartDelayedAutoplayMediaComponents(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateMediaControlAction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateMediaControlAction", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            MediaControlAction aAction{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAction)))))) {
                FatalError("Error deserializing 'MediaControlAction'");
                return MsgValueError;
            }
            // Sentinel = 'aAction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175768256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaControlAction'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateMediaControlAction(std::move(aContext), std::move(aAction))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RegisterBrowsingContextGroup__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RegisterBrowsingContextGroup", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aGroupId{};
            nsTArray<SyncedContextInitializer> aInits{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGroupId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGroupId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233964316)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInits)))))) {
                FatalError("Error deserializing 'SyncedContextInitializer[]'");
                return MsgValueError;
            }
            // Sentinel = 'aInits'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 134677097)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SyncedContextInitializer[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRegisterBrowsingContextGroup(std::move(aGroupId), std::move(aInits))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_LoadURI__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_LoadURI", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            RefPtr<nsDocShellLoadState> aLoadState{};
            bool aSetNavigating{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadState)))))) {
                FatalError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 349570019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSetNavigating)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aSetNavigating'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 686556566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            LoadURIResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_LoadURI(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aSuccess'
                (reply__)->WriteSentinel(236323643);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvLoadURI(std::move(aContext), aLoadState, std::move(aSetNavigating), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_InternalLoad__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InternalLoad", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsDocShellLoadState> aLoadState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadState)))))) {
                FatalError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 349570019)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvInternalLoad(aLoadState)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DisplayLoadError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DisplayLoadError", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            nsString aURI{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvDisplayLoadError(std::move(aContext), std::move(aURI))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GoBack__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GoBack", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            mozilla::Maybe<int32_t> aCancelContentJSEpoch{};
            bool aRequireUserInteraction{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCancelContentJSEpoch)))))) {
                FatalError("Error deserializing 'int32_t?'");
                return MsgValueError;
            }
            // Sentinel = 'aCancelContentJSEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1473841167)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequireUserInteraction)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aRequireUserInteraction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1862076766)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvGoBack(std::move(aContext), std::move(aCancelContentJSEpoch), std::move(aRequireUserInteraction))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GoForward__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GoForward", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            mozilla::Maybe<int32_t> aCancelContentJSEpoch{};
            bool aRequireUserInteraction{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCancelContentJSEpoch)))))) {
                FatalError("Error deserializing 'int32_t?'");
                return MsgValueError;
            }
            // Sentinel = 'aCancelContentJSEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1473841167)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequireUserInteraction)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aRequireUserInteraction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1862076766)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvGoForward(std::move(aContext), std::move(aCancelContentJSEpoch), std::move(aRequireUserInteraction))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_GoToIndex__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GoToIndex", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            int32_t aIndex{};
            mozilla::Maybe<int32_t> aCancelContentJSEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCancelContentJSEpoch)))))) {
                FatalError("Error deserializing 'int32_t?'");
                return MsgValueError;
            }
            // Sentinel = 'aCancelContentJSEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1473841167)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvGoToIndex(std::move(aContext), std::move(aIndex), std::move(aCancelContentJSEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_Reload__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_Reload", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint32_t aReloadFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReloadFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aReloadFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 499451046)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvReload(std::move(aContext), std::move(aReloadFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_StopLoad__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_StopLoad", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint32_t aStopFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStopFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStopFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 360317941)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvStopLoad(std::move(aContext), std::move(aStopFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_OnAllowAccessFor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_OnAllowAccessFor", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aParentContext{};
            nsCString aTrackingOrigin{};
            uint32_t aCookieBehavior{};
            StorageAccessPermissionGrantedReason aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aParentContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aParentContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 692454833)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrackingOrigin)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aTrackingOrigin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 792331773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCookieBehavior)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCookieBehavior'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 772408812)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'StorageAccessPermissionGrantedReason'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'StorageAccessPermissionGrantedReason'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvOnAllowAccessFor(std::move(aParentContext), std::move(aTrackingOrigin), std::move(aCookieBehavior), std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_OnContentBlockingDecision__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_OnContentBlockingDecision", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            BlockingDecision aReason{};
            uint32_t aRejectedReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'BlockingDecision'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BlockingDecision'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRejectedReason)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRejectedReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 781059568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvOnContentBlockingDecision(std::move(aContext), std::move(aReason), std::move(aRejectedReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AbortOrientationPendingPromises__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AbortOrientationPendingPromises", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvAbortOrientationPendingPromises(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_HistoryCommitIndexAndLength__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_HistoryCommitIndexAndLength", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint32_t aIndex{};
            uint32_t aLength{};
            nsID aChangeID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIndex)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132055642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLength)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aLength'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179045060)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChangeID)))))) {
                FatalError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            // Sentinel = 'aChangeID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 275710773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvHistoryCommitIndexAndLength(std::move(aContext), std::move(aIndex), std::move(aLength), std::move(aChangeID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DispatchLocationChangeEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DispatchLocationChangeEvent", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvDispatchLocationChangeEvent(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DispatchBeforeUnloadToSubtree__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DispatchBeforeUnloadToSubtree", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aStartingAt{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartingAt)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aStartingAt'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 441844835)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            DispatchBeforeUnloadToSubtreeResolver resolver = [proxy__, seqno__, id__](const PermitUnloadResult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_DispatchBeforeUnloadToSubtree(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'result'
                (reply__)->WriteSentinel(153223840);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvDispatchBeforeUnloadToSubtree(std::move(aStartingAt), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UpdateMediaCodecsSupported__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UpdateMediaCodecsSupported", OTHER);

            PickleIterator iter__{msg__};
            RemoteDecodeIn aLocation{};
            MediaCodecsSupported aSupported{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLocation)))))) {
                FatalError("Error deserializing 'RemoteDecodeIn'");
                return MsgValueError;
            }
            // Sentinel = 'aLocation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292094875)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RemoteDecodeIn'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSupported)))))) {
                FatalError("Error deserializing 'MediaCodecsSupported'");
                return MsgValueError;
            }
            // Sentinel = 'aSupported'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 378799144)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MediaCodecsSupported'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUpdateMediaCodecsSupported(std::move(aLocation), std::move(aSupported))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_GetLoadingSessionHistoryInfoFromParent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetLoadingSessionHistoryInfoFromParent", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<Tuple<mozilla::Maybe<LoadingSessionHistoryInfo>, int32_t, int32_t>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                mozilla::Maybe<LoadingSessionHistoryInfo> aLoadingInfo{};
                int32_t aRequestedIndex{};
                int32_t aLength{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadingInfo)))))) {
                    FatalError("Error deserializing 'LoadingSessionHistoryInfo?'");
                    return MsgValueError;
                }
                // Sentinel = 'aLoadingInfo'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 500827308)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'LoadingSessionHistoryInfo?'");
                    return MsgValueError;
                }
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestedIndex)))))) {
                    FatalError("Error deserializing 'int32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'aRequestedIndex'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 804849164)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                    return MsgValueError;
                }
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLength)))))) {
                    FatalError("Error deserializing 'int32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'aLength'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179045060)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(MakeTuple(std::move(aLoadingInfo), std::move(aRequestedIndex), std::move(aLength)));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_InitStreamFilter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_InitStreamFilter", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<Endpoint<mozilla::extensions::PStreamFilterChild>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                Endpoint<mozilla::extensions::PStreamFilterChild> aEndpoint{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                    FatalError("Error deserializing 'Endpoint<mozilla::extensions::PStreamFilterChild>'");
                    return MsgValueError;
                }
                // Sentinel = 'aEndpoint'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::extensions::PStreamFilterChild>'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aEndpoint));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_PRemoteSpellcheckEngineConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PHalConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PHeapSnapshotTempFileHelperConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PNeckoConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PPrintingConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PChildToParentStreamConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PSpeechSynthesisConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PMediaConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PWebrtcGlobalConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PPresentationConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_CreateAudioIPCConnection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateAudioIPCConnection", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<FileDescOrError> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                FileDescOrError fd{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fd)))))) {
                    FatalError("Error deserializing 'FileDescOrError'");
                    return MsgValueError;
                }
                // Sentinel = 'fd'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20054219)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'FileDescOrError'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(fd));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_PURLClassifierLocalConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PLoginReputationConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PSessionStorageObserverConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PBenchmarkStorageConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PExternalHelperAppConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PHandlerServiceConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_POfflineCacheUpdateConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_PContentPermissionRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PContent::Reply_CreateWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateWindow", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<CreatedWindowInfo> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                CreatedWindowInfo window{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(window)))))) {
                    FatalError("Error deserializing 'CreatedWindowInfo'");
                    return MsgValueError;
                }
                // Sentinel = 'window'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 152437401)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'CreatedWindowInfo'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(window));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_AddCertException__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AddCertException", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsresult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsresult success{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(success)))))) {
                    FatalError("Error deserializing 'nsresult'");
                    return MsgValueError;
                }
                // Sentinel = 'success'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200082170)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(success));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_AutomaticStorageAccessPermissionCanBeGranted__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AutomaticStorageAccessPermissionCanBeGranted", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool success{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(success)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'success'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200082170)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(success));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_StorageAccessPermissionGrantedForOrigin__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_StorageAccessPermissionGrantedForOrigin", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool unused{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(unused)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'unused'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 155517589)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(unused));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_CompleteAllowAccessFor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CompleteAllowAccessFor", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<mozilla::Maybe<StorageAccessPromptChoices>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                mozilla::Maybe<StorageAccessPromptChoices> choice{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(choice)))))) {
                    FatalError("Error deserializing 'StorageAccessPromptChoices?'");
                    return MsgValueError;
                }
                // Sentinel = 'choice'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142738028)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'StorageAccessPromptChoices?'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(choice));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_GetModulesTrust__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_GetModulesTrust", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<mozilla::Maybe<ModulesMapResult>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                mozilla::Maybe<ModulesMapResult> modMapResult{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(modMapResult)))))) {
                    FatalError("Error deserializing 'ModulesMapResult?'");
                    return MsgValueError;
                }
                // Sentinel = 'modMapResult'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 519963870)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'ModulesMapResult?'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(modMapResult));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_NotifyOnHistoryReload__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyOnHistoryReload", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<Tuple<bool, mozilla::Maybe<RefPtr<nsDocShellLoadState>>, mozilla::Maybe<bool>>> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool canReload{};
                mozilla::Maybe<RefPtr<nsDocShellLoadState>> loadState{};
                mozilla::Maybe<bool> reloadActiveEntry{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(canReload)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'canReload'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 295043978)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loadState)))))) {
                    FatalError("Error deserializing 'nsDocShellLoadState?'");
                    return MsgValueError;
                }
                // Sentinel = 'loadState'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 304808866)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsDocShellLoadState?'");
                    return MsgValueError;
                }
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reloadActiveEntry)))))) {
                    FatalError("Error deserializing 'bool?'");
                    return MsgValueError;
                }
                // Sentinel = 'reloadActiveEntry'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1029506790)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool?'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(MakeTuple(std::move(canReload), std::move(loadState), std::move(reloadActiveEntry)));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_HistoryGo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_HistoryGo", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<int32_t> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                int32_t requestedIndex{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestedIndex)))))) {
                    FatalError("Error deserializing 'int32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'requestedIndex'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 738788811)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(requestedIndex));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Reply_BlobURLDataRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BlobURLDataRequest", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<BlobURLDataRequestResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                BlobURLDataRequestResult aResult{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResult)))))) {
                    FatalError("Error deserializing 'BlobURLDataRequestResult'");
                    return MsgValueError;
                }
                // Sentinel = 'aResult'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205473)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'BlobURLDataRequestResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aResult));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Msg_ScriptError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ScriptError", OTHER);

            PickleIterator iter__{msg__};
            nsString message{};
            nsString sourceName{};
            nsString sourceLine{};
            uint32_t lineNumber{};
            uint32_t colNumber{};
            uint32_t flags{};
            nsCString category{};
            bool privateWindow{};
            uint64_t innerWindowId{};
            bool fromChromeContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'sourceName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 387580947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sourceLine)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'sourceLine'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 388760602)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lineNumber)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'lineNumber'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 374932498)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(colNumber)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'colNumber'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 304284584)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102171150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(category)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'category'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 247333727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(privateWindow)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'privateWindow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 642778484)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(innerWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'innerWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 627967298)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fromChromeContext)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'fromChromeContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1038485240)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvScriptError(std::move(message), std::move(sourceName), std::move(sourceLine), std::move(lineNumber), std::move(colNumber), std::move(flags), std::move(category), std::move(privateWindow), std::move(innerWindowId), std::move(fromChromeContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ReportFrameTimingData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ReportFrameTimingData", OTHER);

            PickleIterator iter__{msg__};
            uint64_t innerWindowId{};
            nsString entryName{};
            nsString initiatorType{};
            UniquePtr<PerformanceTimingData> aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(innerWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'innerWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 627967298)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(entryName)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'entryName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 315950004)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(initiatorType)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'initiatorType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 642647414)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'UniquePtr<PerformanceTimingData>'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UniquePtr<PerformanceTimingData>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvReportFrameTimingData(std::move(innerWindowId), std::move(entryName), std::move(initiatorType), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CommitBrowsingContextTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CommitBrowsingContextTransaction", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            BrowsingContextTransaction aTransaction{};
            uint64_t aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTransaction)))))) {
                FatalError("Error deserializing 'BrowsingContextTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTransaction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 523371752)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BrowsingContextTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvCommitBrowsingContextTransaction(std::move(aContext), std::move(aTransaction), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AsyncMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AsyncMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString aMessage{};
            ClonedMessageData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvAsyncMessage(std::move(aMessage), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_NotifyPushSubscriptionModifiedObservers__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_NotifyPushSubscriptionModifiedObservers", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvNotifyPushSubscriptionModifiedObservers(std::move(scope), std::move(principal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_PushError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_PushError", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            Principal principal{};
            nsString message{};
            uint32_t flags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Principal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102171150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvPushError(std::move(scope), std::move(principal), std::move(message), std::move(flags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CreateBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aGroupId{};
            BrowsingContextInitializer aInit{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGroupId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aGroupId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233964316)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInit)))))) {
                FatalError("Error deserializing 'BrowsingContextInitializer'");
                return MsgValueError;
            }
            // Sentinel = 'aInit'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94241270)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BrowsingContextInitializer'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvCreateBrowsingContext(std::move(aGroupId), std::move(aInit))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Reply_DiscardBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DiscardBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool unused{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(unused)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'unused'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 155517589)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(unused));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PContent::Msg_DiscardBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DiscardBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            DiscardBrowsingContextResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_DiscardBrowsingContext(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'unused'
                (reply__)->WriteSentinel(155517589);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvDiscardBrowsingContext(std::move(aContext), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_AdjustWindowFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_AdjustWindowFocus", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aCheckPermission{};
            bool aIsVisible{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCheckPermission)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCheckPermission'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 878380649)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsVisible)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsVisible'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 353567724)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvAdjustWindowFocus(std::move(aContext), std::move(aCheckPermission), std::move(aIsVisible))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_WindowClose__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_WindowClose", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aTrustedCaller{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrustedCaller)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aTrustedCaller'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 706479520)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvWindowClose(std::move(aContext), std::move(aTrustedCaller))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_WindowFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_WindowFocus", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            CallerType aCallerType{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvWindowFocus(std::move(aContext), std::move(aCallerType), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_WindowBlur__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_WindowBlur", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            CallerType aCallerType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvWindowBlur(std::move(aContext), std::move(aCallerType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_RaiseWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_RaiseWindow", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            CallerType aCallerType{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvRaiseWindow(std::move(aContext), std::move(aCallerType), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ClearFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ClearFocus", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvClearFocus(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetFocusedBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetFocusedBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetFocusedBrowsingContext(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetActiveBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetActiveBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetActiveBrowsingContext(std::move(aContext), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_UnsetActiveBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_UnsetActiveBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvUnsetActiveBrowsingContext(std::move(aContext), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetFocusedElement__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetFocusedElement", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aNeedsFocus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNeedsFocus)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aNeedsFocus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 419759185)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetFocusedElement(std::move(aContext), std::move(aNeedsFocus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FinalizeFocusOuter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FinalizeFocusOuter", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            bool aCanFocus{};
            CallerType aCallerType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCanFocus)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCanFocus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 275055476)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvFinalizeFocusOuter(std::move(aContext), std::move(aCanFocus), std::move(aCallerType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_BlurToChild__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_BlurToChild", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aFocusedBrowsingContext{};
            MaybeDiscardedBrowsingContext aBrowsingContextToClear{};
            MaybeDiscardedBrowsingContext aAncestorBrowsingContextToFocus{};
            bool aIsLeavingDocument{};
            bool aAdjustWidget{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFocusedBrowsingContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aFocusedBrowsingContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1842153819)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBrowsingContextToClear)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aBrowsingContextToClear'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1859127612)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAncestorBrowsingContextToFocus)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aAncestorBrowsingContextToFocus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3344239764)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsLeavingDocument)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsLeavingDocument'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1103169315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAdjustWidget)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aAdjustWidget'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 594609457)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvBlurToChild(std::move(aFocusedBrowsingContext), std::move(aBrowsingContextToClear), std::move(aAncestorBrowsingContextToFocus), std::move(aIsLeavingDocument), std::move(aAdjustWidget), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_SetupFocusedAndActive__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_SetupFocusedAndActive", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aFocusedBrowsingContext{};
            MaybeDiscardedBrowsingContext aActiveBrowsingContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFocusedBrowsingContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aFocusedBrowsingContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1842153819)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActiveBrowsingContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aActiveBrowsingContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1678444782)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvSetupFocusedAndActive(std::move(aFocusedBrowsingContext), std::move(aActiveBrowsingContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_ReviseActiveBrowsingContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_ReviseActiveBrowsingContext", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aActiveBrowsingContext{};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActiveBrowsingContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aActiveBrowsingContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1678444782)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvReviseActiveBrowsingContext(std::move(aActiveBrowsingContext), std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_MaybeExitFullscreen__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_MaybeExitFullscreen", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvMaybeExitFullscreen(std::move(aContext))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_WindowPostMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_WindowPostMessage", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aContext{};
            ClonedOrErrorMessageData aMessage{};
            PostMessageData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'ClonedOrErrorMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedOrErrorMessageData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'PostMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PostMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvWindowPostMessage(std::move(aContext), std::move(aMessage), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CommitWindowContextTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CommitWindowContextTransaction", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedWindowContext aContext{};
            WindowContextTransaction aTransaction{};
            uint64_t aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedWindowContext'");
                return MsgValueError;
            }
            // Sentinel = 'aContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235406151)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedWindowContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTransaction)))))) {
                FatalError("Error deserializing 'WindowContextTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'aTransaction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 523371752)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowContextTransaction'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvCommitWindowContextTransaction(std::move(aContext), std::move(aTransaction), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_CreateWindowContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_CreateWindowContext", OTHER);

            PickleIterator iter__{msg__};
            WindowContextInitializer aInit{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInit)))))) {
                FatalError("Error deserializing 'WindowContextInitializer'");
                return MsgValueError;
            }
            // Sentinel = 'aInit'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94241270)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowContextInitializer'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<ContentChild*>(this))->RecvCreateWindowContext(std::move(aInit))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_DiscardWindowContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_DiscardWindowContext", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aContextId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContextId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aContextId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 361497588)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            DiscardWindowContextResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_DiscardWindowContext(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'unused'
                (reply__)->WriteSentinel(155517589);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvDiscardWindowContext(std::move(aContextId), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PContent::Msg_FlushFOGData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PContent::Msg_FlushFOGData", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            FlushFOGDataResolver resolver = [proxy__, seqno__, id__](ByteBuf&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PContentChild* self__ = static_cast<PContentChild*>(proxy__->Get());

                IPC::Message* reply__ = PContent::Reply_FlushFOGData(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, std::move(aParam));
                // Sentinel = 'buf'
                (reply__)->WriteSentinel(41484606);

                if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PContentChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<ContentChild*>(this))->RecvFlushFOGData(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PContentChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PContentChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PContentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PContentChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PContentChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PContentChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PContentChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PContentChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PContentChild::ClearSubtree() -> void
{
    for (auto it = mManagedPBrowserChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBrowserChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBrowserChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBrowserChild.Clear();

    for (auto it = mManagedPContentPermissionRequestChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPContentPermissionRequestChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPContentPermissionRequestChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPContentPermissionRequestChild.Clear();

    for (auto it = mManagedPCycleCollectWithLogsChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPCycleCollectWithLogsChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPCycleCollectWithLogsChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPCycleCollectWithLogsChild.Clear();

    for (auto it = mManagedPExternalHelperAppChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPExternalHelperAppChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPExternalHelperAppChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPExternalHelperAppChild.Clear();

    for (auto it = mManagedPFileDescriptorSetChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPFileDescriptorSetChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPFileDescriptorSetChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPFileDescriptorSetChild.Clear();

    for (auto it = mManagedPHalChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPHalChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPHalChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPHalChild.Clear();

    for (auto it = mManagedPHandlerServiceChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPHandlerServiceChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPHandlerServiceChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPHandlerServiceChild.Clear();

    for (auto it = mManagedPHeapSnapshotTempFileHelperChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPHeapSnapshotTempFileHelperChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPHeapSnapshotTempFileHelperChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPHeapSnapshotTempFileHelperChild.Clear();

    for (auto it = mManagedPRemoteLazyInputStreamChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPRemoteLazyInputStreamChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPRemoteLazyInputStreamChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPRemoteLazyInputStreamChild.Clear();

    for (auto it = mManagedPMediaChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPMediaChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPMediaChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPMediaChild.Clear();

    for (auto it = mManagedPNeckoChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPNeckoChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPNeckoChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPNeckoChild.Clear();

    for (auto it = mManagedPOfflineCacheUpdateChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPOfflineCacheUpdateChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPOfflineCacheUpdateChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPOfflineCacheUpdateChild.Clear();

    for (auto it = mManagedPPrintingChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPrintingChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPrintingChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPrintingChild.Clear();

    for (auto it = mManagedPChildToParentStreamChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPChildToParentStreamChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPChildToParentStreamChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPChildToParentStreamChild.Clear();

    for (auto it = mManagedPParentToChildStreamChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPParentToChildStreamChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPParentToChildStreamChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPParentToChildStreamChild.Clear();

    for (auto it = mManagedPSpeechSynthesisChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPSpeechSynthesisChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPSpeechSynthesisChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPSpeechSynthesisChild.Clear();

    for (auto it = mManagedPTestShellChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPTestShellChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPTestShellChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPTestShellChild.Clear();

    for (auto it = mManagedPRemoteSpellcheckEngineChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPRemoteSpellcheckEngineChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPRemoteSpellcheckEngineChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPRemoteSpellcheckEngineChild.Clear();

    for (auto it = mManagedPWebBrowserPersistDocumentChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWebBrowserPersistDocumentChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWebBrowserPersistDocumentChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWebBrowserPersistDocumentChild.Clear();

    for (auto it = mManagedPWebrtcGlobalChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWebrtcGlobalChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWebrtcGlobalChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWebrtcGlobalChild.Clear();

    for (auto it = mManagedPPresentationChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPresentationChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPresentationChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPresentationChild.Clear();

    for (auto it = mManagedPURLClassifierChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPURLClassifierChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPURLClassifierChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPURLClassifierChild.Clear();

    for (auto it = mManagedPURLClassifierLocalChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPURLClassifierLocalChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPURLClassifierLocalChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPURLClassifierLocalChild.Clear();

    for (auto it = mManagedPScriptCacheChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPScriptCacheChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPScriptCacheChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPScriptCacheChild.Clear();

    for (auto it = mManagedPLoginReputationChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPLoginReputationChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPLoginReputationChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPLoginReputationChild.Clear();

    for (auto it = mManagedPSessionStorageObserverChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPSessionStorageObserverChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPSessionStorageObserverChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPSessionStorageObserverChild.Clear();

    for (auto it = mManagedPBenchmarkStorageChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBenchmarkStorageChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBenchmarkStorageChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBenchmarkStorageChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PContentChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PContentChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PContent", PContentMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PContentChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
