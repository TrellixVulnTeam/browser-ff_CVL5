//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPVideoDecoderParent.h"
#include "GMPMessageUtils.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/gmp/PGMPContentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PGMPVideoDecoderParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PGMPVideoDecoderParent::PGMPVideoDecoderParent() :
    mozilla::ipc::IProtocol(PGMPVideoDecoderMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PGMPVideoDecoderParent);
}

PGMPVideoDecoderParent::~PGMPVideoDecoderParent()
{
    MOZ_COUNT_DTOR(PGMPVideoDecoderParent);
}

auto PGMPVideoDecoderParent::Manager() const -> PGMPContentParent*
{
    return static_cast<PGMPContentParent*>(IProtocol::Manager());
}

auto PGMPVideoDecoderParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PGMPVideoDecoderParent::SendInitDecode(
        const GMPVideoCodec& aCodecSettings,
        const nsTArray<uint8_t>& aCodecSpecific,
        const int32_t& aCoreCount) -> bool
{
    IPC::Message* msg__ = PGMPVideoDecoder::Msg_InitDecode(Id());

    WriteIPDLParam(msg__, this, aCodecSettings);
    // Sentinel = 'aCodecSettings'
    (msg__)->WriteSentinel(674629009);
    WriteIPDLParam(msg__, this, aCodecSpecific);
    // Sentinel = 'aCodecSpecific'
    (msg__)->WriteSentinel(665847142);
    WriteIPDLParam(msg__, this, aCoreCount);
    // Sentinel = 'aCoreCount'
    (msg__)->WriteSentinel(350028788);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoDecoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_InitDecode", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoDecoderParent::SendDecode(
        const GMPVideoEncodedFrameData& aInputFrame,
        const bool& aMissingFrames,
        const nsTArray<uint8_t>& aCodecSpecificInfo,
        const int64_t& aRenderTimeMs) -> bool
{
    IPC::Message* msg__ = PGMPVideoDecoder::Msg_Decode(Id());

    WriteIPDLParam(msg__, this, aInputFrame);
    // Sentinel = 'aInputFrame'
    (msg__)->WriteSentinel(434177117);
    WriteIPDLParam(msg__, this, aMissingFrames);
    // Sentinel = 'aMissingFrames'
    (msg__)->WriteSentinel(695731610);
    WriteIPDLParam(msg__, this, aCodecSpecificInfo);
    // Sentinel = 'aCodecSpecificInfo'
    (msg__)->WriteSentinel(1089537778);
    WriteIPDLParam(msg__, this, aRenderTimeMs);
    // Sentinel = 'aRenderTimeMs'
    (msg__)->WriteSentinel(590611729);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoDecoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_Decode", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoDecoderParent::SendReset() -> bool
{
    IPC::Message* msg__ = PGMPVideoDecoder::Msg_Reset(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoDecoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_Reset", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoDecoderParent::SendDrain() -> bool
{
    IPC::Message* msg__ = PGMPVideoDecoder::Msg_Drain(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoDecoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_Drain", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoDecoderParent::SendDecodingComplete() -> bool
{
    IPC::Message* msg__ = PGMPVideoDecoder::Msg_DecodingComplete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoDecoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_DecodingComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoDecoderParent::SendChildShmemForPool(Shmem&& aFrameBuffer) -> bool
{
    IPC::Message* msg__ = PGMPVideoDecoder::Msg_ChildShmemForPool(Id());

    WriteIPDLParam(msg__, this, std::move(aFrameBuffer));
    // Sentinel = 'aFrameBuffer'
    (msg__)->WriteSentinel(494732455);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoDecoderParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_ChildShmemForPool", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoDecoderParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPVideoDecoderParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPVideoDecoderParent::OnMessageReceived(const Message& msg__) -> PGMPVideoDecoderParent::Result
{
    switch (msg__.type()) {
    case PGMPVideoDecoder::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PGMPVideoDecoderParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PGMPVideoDecoder'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PGMPVideoDecoder'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PGMPVideoDecoder'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PGMPVideoDecoderMsgStart, actor);

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_Decoded__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_Decoded", OTHER);

            PickleIterator iter__{msg__};
            GMPVideoi420FrameData aDecodedFrame{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDecodedFrame)))))) {
                FatalError("Error deserializing 'GMPVideoi420FrameData'");
                return MsgValueError;
            }
            // Sentinel = 'aDecodedFrame'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 571016437)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPVideoi420FrameData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvDecoded(std::move(aDecodedFrame))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_ReceivedDecodedReferenceFrame__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_ReceivedDecodedReferenceFrame", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aPictureId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPictureId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPictureId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 361694187)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReceivedDecodedReferenceFrame(std::move(aPictureId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_ReceivedDecodedFrame__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_ReceivedDecodedFrame", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aPictureId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPictureId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPictureId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 361694187)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReceivedDecodedFrame(std::move(aPictureId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_InputDataExhausted__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_InputDataExhausted", OTHER);

            if ((!((this)->RecvInputDataExhausted()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_DrainComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_DrainComplete", OTHER);

            if ((!((this)->RecvDrainComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_ResetComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_ResetComplete", OTHER);

            if ((!((this)->RecvResetComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_Error__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_Error", OTHER);

            PickleIterator iter__{msg__};
            GMPErr aErr{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aErr)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aErr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61669771)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvError(std::move(aErr))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_Shutdown", OTHER);

            if ((!((this)->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoDecoder::Msg_ParentShmemForPool__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_ParentShmemForPool", OTHER);

            PickleIterator iter__{msg__};
            Shmem aEncodedBuffer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEncodedBuffer)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'aEncodedBuffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 668927342)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvParentShmemForPool(std::move(aEncodedBuffer))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPVideoDecoderParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPVideoDecoderParent::Result
{
    return MsgNotKnown;
}

auto PGMPVideoDecoderParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPVideoDecoderParent::Result
{
    switch (msg__.type()) {
    case PGMPVideoDecoder::Msg_NeedShmem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoDecoder::Msg_NeedShmem", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aFrameBufferSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrameBufferSize)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFrameBufferSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 871958082)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            Shmem aMem{};
            if ((!((this)->AnswerNeedShmem(std::move(aFrameBufferSize), (&(aMem)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PGMPVideoDecoder::Reply_NeedShmem(id__);

            WriteIPDLParam(reply__, this, std::move(aMem));
            // Sentinel = 'aMem'
            (reply__)->WriteSentinel(61211009);

            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoDecoderParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPVideoDecoderParent::ClearSubtree() -> void
{
}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPVideoDecoderParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPVideoDecoderParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMPVideoDecoder", PGMPVideoDecoderMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPVideoDecoderParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
