//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/embedding/PPrintingParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/embedding/PPrintProgressDialogParent.h"
#include "mozilla/embedding/PPrintSettingsDialogParent.h"
#include "mozilla/layout/PRemotePrintJobParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace embedding {


auto PPrintingParent::RecvPPrintProgressDialogConstructor(PPrintProgressDialogParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PPrintingParent::RecvPPrintSettingsDialogConstructor(PPrintSettingsDialogParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PPrintingParent::PPrintingParent() :
    mozilla::ipc::IProtocol(PPrintingMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PPrintingParent);
}

PPrintingParent::~PPrintingParent()
{
    MOZ_COUNT_DTOR(PPrintingParent);
}

auto PPrintingParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PPrintingParent::ManagedPPrintProgressDialogParent(nsTArray<PPrintProgressDialogParent*>& aArr) const -> void
{
    mManagedPPrintProgressDialogParent.ToArray(aArr);
}

auto PPrintingParent::ManagedPPrintProgressDialogParent() const -> const ManagedContainer<PPrintProgressDialogParent>&
{
    return mManagedPPrintProgressDialogParent;
}

auto PPrintingParent::ManagedPPrintSettingsDialogParent(nsTArray<PPrintSettingsDialogParent*>& aArr) const -> void
{
    mManagedPPrintSettingsDialogParent.ToArray(aArr);
}

auto PPrintingParent::ManagedPPrintSettingsDialogParent() const -> const ManagedContainer<PPrintSettingsDialogParent>&
{
    return mManagedPPrintSettingsDialogParent;
}

auto PPrintingParent::ManagedPRemotePrintJobParent(nsTArray<PRemotePrintJobParent*>& aArr) const -> void
{
    mManagedPRemotePrintJobParent.ToArray(aArr);
}

auto PPrintingParent::ManagedPRemotePrintJobParent() const -> const ManagedContainer<PRemotePrintJobParent>&
{
    return mManagedPRemotePrintJobParent;
}

auto PPrintingParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPPrintProgressDialogParent.Count();
    total += mManagedPPrintSettingsDialogParent.Count();
    total += mManagedPRemotePrintJobParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPPrintProgressDialogParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPrintSettingsDialogParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPRemotePrintJobParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PPrintingParent::OpenPPrintProgressDialogEndpoint(PPrintProgressDialogParent* aActor) -> ManagedEndpoint<PPrintProgressDialogChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintProgressDialogParent actor");
        return ManagedEndpoint<PPrintProgressDialogChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPrintProgressDialogParent.PutEntry(aActor);

    return ManagedEndpoint<PPrintProgressDialogChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPrintingParent::BindPPrintProgressDialogEndpoint(
        ManagedEndpoint<PPrintProgressDialogParent> aEndpoint,
        PPrintProgressDialogParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintProgressDialogParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPrintProgressDialogParent.PutEntry(aActor);

    return true;
}

auto PPrintingParent::OpenPPrintSettingsDialogEndpoint(PPrintSettingsDialogParent* aActor) -> ManagedEndpoint<PPrintSettingsDialogChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintSettingsDialogParent actor");
        return ManagedEndpoint<PPrintSettingsDialogChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPrintSettingsDialogParent.PutEntry(aActor);

    return ManagedEndpoint<PPrintSettingsDialogChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPrintingParent::BindPPrintSettingsDialogEndpoint(
        ManagedEndpoint<PPrintSettingsDialogParent> aEndpoint,
        PPrintSettingsDialogParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPrintSettingsDialogParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPrintSettingsDialogParent.PutEntry(aActor);

    return true;
}

auto PPrintingParent::OpenPRemotePrintJobEndpoint(PRemotePrintJobParent* aActor) -> ManagedEndpoint<PRemotePrintJobChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemotePrintJobParent actor");
        return ManagedEndpoint<PRemotePrintJobChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPRemotePrintJobParent.PutEntry(aActor);

    return ManagedEndpoint<PRemotePrintJobChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPrintingParent::BindPRemotePrintJobEndpoint(
        ManagedEndpoint<PRemotePrintJobParent> aEndpoint,
        PRemotePrintJobParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemotePrintJobParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPRemotePrintJobParent.PutEntry(aActor);

    return true;
}

auto PPrintingParent::SendPRemotePrintJobConstructor(PRemotePrintJobParent* actor) -> PRemotePrintJobParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PRemotePrintJobParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPRemotePrintJobParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPrinting::Msg_PRemotePrintJobConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPrintingParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPrintingParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPrinting::Msg_PRemotePrintJobConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PRemotePrintJobParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PRemotePrintJobMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPrintingParent::Send__delete__(PPrintingParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PPrinting::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PPrintingParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPrintingParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPrinting::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PPrintingMsgStart, actor);
    return sendok__;
}

auto PPrintingParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPrintProgressDialogMsgStart:
{
            PPrintProgressDialogParent* actor = static_cast<PPrintProgressDialogParent*>(aListener);
            auto& container = mManagedPPrintProgressDialogParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPrintSettingsDialogMsgStart:
{
            PPrintSettingsDialogParent* actor = static_cast<PPrintSettingsDialogParent*>(aListener);
            auto& container = mManagedPPrintSettingsDialogParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PRemotePrintJobMsgStart:
{
            PRemotePrintJobParent* actor = static_cast<PRemotePrintJobParent*>(aListener);
            auto& container = mManagedPRemotePrintJobParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PPrintingParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPrintProgressDialogMsgStart:
        this->DeallocPPrintProgressDialogParent(static_cast<PPrintProgressDialogParent*>(aListener));
        return;
    case PPrintSettingsDialogMsgStart:
        this->DeallocPPrintSettingsDialogParent(static_cast<PPrintSettingsDialogParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PPrintingParent::OnMessageReceived(const Message& msg__) -> PPrintingParent::Result
{
    switch (msg__.type()) {
    case PPrinting::Msg_ShowProgress__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPrintingParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPrintingParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPrinting::Msg_ShowProgress", OTHER);

            PickleIterator iter__{msg__};
            PBrowserParent* browser{};
            PPrintProgressDialogParent* printProgressDialog{};
            PRemotePrintJobParent* remotePrintJob{};
            bool isForPrinting{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(browser)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!((*((&(browser))))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'browser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201130757)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(printProgressDialog)))))) {
                FatalError("Error deserializing 'PPrintProgressDialog'");
                return MsgValueError;
            }
            if ((!((*((&(printProgressDialog))))))) {
                FatalError("Error deserializing 'PPrintProgressDialog'");
                return MsgValueError;
            }
            // Sentinel = 'printProgressDialog'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1330055123)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PPrintProgressDialog'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(remotePrintJob)))))) {
                FatalError("Error deserializing 'PRemotePrintJob'");
                return MsgValueError;
            }
            // Sentinel = 'remotePrintJob'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 730400181)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PRemotePrintJob'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isForPrinting)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isForPrinting'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 614991183)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvShowProgress(browser, std::move(printProgressDialog), remotePrintJob, std::move(isForPrinting))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPrinting::Msg_ShowPrintDialog__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPrintingParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPrintingParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPrinting::Msg_ShowPrintDialog", OTHER);

            PickleIterator iter__{msg__};
            PPrintSettingsDialogParent* dialog{};
            PBrowserParent* browser{};
            PrintData settings{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dialog)))))) {
                FatalError("Error deserializing 'PPrintSettingsDialog'");
                return MsgValueError;
            }
            if ((!((*((&(dialog))))))) {
                FatalError("Error deserializing 'PPrintSettingsDialog'");
                return MsgValueError;
            }
            // Sentinel = 'dialog'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142082673)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PPrintSettingsDialog'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(browser)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'browser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201130757)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(settings)))))) {
                FatalError("Error deserializing 'PrintData'");
                return MsgValueError;
            }
            // Sentinel = 'settings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 260965234)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrintData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvShowPrintDialog(std::move(dialog), browser, std::move(settings))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPrinting::Msg_PPrintProgressDialogConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPrintingParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPrintingParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPrinting::Msg_PPrintProgressDialogConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPrintProgressDialogParent* actor = (this)->AllocPPrintProgressDialogParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PPrintProgressDialogParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPrintProgressDialogParent.PutEntry(actor);

            if ((!((this)->RecvPPrintProgressDialogConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPrinting::Msg_PPrintSettingsDialogConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPrintingParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPrintingParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPrinting::Msg_PPrintSettingsDialogConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPrintSettingsDialogParent* actor = (this)->AllocPPrintSettingsDialogParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PPrintSettingsDialogParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPrintSettingsDialogParent.PutEntry(actor);

            if ((!((this)->RecvPPrintSettingsDialogConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPrinting::Reply_PRemotePrintJobConstructor__ID:
        {
            return MsgProcessed;
        }
    case PPrinting::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPrintingParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPrintingParent::Result
{
    switch (msg__.type()) {
    case PPrinting::Msg_SavePrintSettings__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPrintingParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPrintingParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPrinting::Msg_SavePrintSettings", OTHER);

            PickleIterator iter__{msg__};
            PrintData settings{};
            bool usePrinterNamePrefix{};
            uint32_t flags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(settings)))))) {
                FatalError("Error deserializing 'PrintData'");
                return MsgValueError;
            }
            // Sentinel = 'settings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 260965234)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrintData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(usePrinterNamePrefix)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'usePrinterNamePrefix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1439041569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'flags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102171150)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsresult rv{};
            if ((!((this)->RecvSavePrintSettings(std::move(settings), std::move(usePrinterNamePrefix), std::move(flags), (&(rv)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPrinting::Reply_SavePrintSettings(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);

            if (mozilla::ipc::LoggingEnabledFor("PPrintingParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPrintingParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPrintingParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPrintingParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PPrintingParent::ClearSubtree() -> void
{
    for (auto it = mManagedPPrintProgressDialogParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPrintProgressDialogParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPrintProgressDialogParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPrintProgressDialogParent.Clear();

    for (auto it = mManagedPPrintSettingsDialogParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPrintSettingsDialogParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPrintSettingsDialogParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPrintSettingsDialogParent.Clear();

    for (auto it = mManagedPRemotePrintJobParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPRemotePrintJobParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPRemotePrintJobParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPRemotePrintJobParent.Clear();

}



} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::embedding::PPrintingParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::embedding::PPrintingParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPrinting", PPrintingMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::embedding::PPrintingParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
