//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PParentToChildStreamChild_h
#define PParentToChildStreamChild_h

#include "mozilla/ipc/PParentToChildStream.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/webrender/WebRenderTypes.h"

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSocketProcessParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStorageChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PTemporaryIPCBlobChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBCursorChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientHandleChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFetchEventOpChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpTransactionChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBroadcastChannelChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundFileHandleChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFetchEventOpProxyChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientSourceChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileCreatorChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFilePickerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMessagePortChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileSystemRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PWebBrowserPersistDocumentChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheOpChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerControllerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {


class PParentToChildStreamChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::cache::PCacheStorageChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBRequestChild;
    friend class mozilla::dom::PClientManagerChild;
    friend class mozilla::dom::PTemporaryIPCBlobChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBCursorChild;
    friend class mozilla::dom::PClientHandleChild;
    friend class mozilla::dom::PFetchEventOpChild;
    friend class mozilla::net::PHttpTransactionChild;
    friend class mozilla::dom::cache::PCacheChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild;
    friend class mozilla::dom::PWindowGlobalChild;
    friend class mozilla::dom::PServiceWorkerChild;
    friend class mozilla::dom::PBroadcastChannelChild;
    friend class mozilla::dom::PBackgroundFileHandleChild;
    friend class mozilla::dom::PFetchEventOpProxyChild;
    friend class mozilla::net::PSocketProcessChild;
    friend class mozilla::dom::PClientSourceChild;
    friend class mozilla::dom::PFileCreatorChild;
    friend class mozilla::PRemoteLazyInputStreamChild;
    friend class mozilla::net::PUDPSocketChild;
    friend class mozilla::dom::PContentChild;
    friend class mozilla::dom::PFilePickerChild;
    friend class mozilla::net::PHttpChannelChild;
    friend class mozilla::dom::PBrowserChild;
    friend class mozilla::dom::PRemoteWorkerChild;
    friend class mozilla::dom::PMessagePortChild;
    friend class mozilla::dom::PFileSystemRequestChild;
    friend class mozilla::net::PNeckoChild;
    friend class mozilla::PWebBrowserPersistDocumentChild;
    friend class mozilla::dom::cache::PCacheOpChild;
    friend class mozilla::ipc::PBackgroundChild;
    friend class mozilla::dom::cache::PCacheStreamControlChild;
    friend class mozilla::dom::PRemoteWorkerControllerChild;
    friend class mozilla::net::PWebSocketChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::wr::ByteBuffer ByteBuffer;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::net::PSocketProcessChild PSocketProcessChild;
    typedef mozilla::net::PSocketProcessParent PSocketProcessParent;

protected:
    virtual mozilla::ipc::IPCResult
    RecvBuffer(const ByteBuffer& aBuffer) = 0;
    virtual mozilla::ipc::IPCResult
    RecvClose(const nsresult& aRv) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PParentToChildStreamChild();

    virtual ~PParentToChildStreamChild();

public:
    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendStartReading();

    bool
    SendRequestClose(const nsresult& aRv);

    static bool
    Send__delete__(PParentToChildStreamChild* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::ipc::PParentToChildStreamChild*>
{
    typedef mozilla::ipc::PParentToChildStreamChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PParentToChildStreamChild_h
