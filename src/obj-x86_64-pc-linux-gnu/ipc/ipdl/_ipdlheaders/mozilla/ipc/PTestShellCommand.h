//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PTestShellCommand_h
#define PTestShellCommand_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace ipc {
class PTestShellCommandParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PTestShellCommandChild;
} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PTestShellCommandChild and PTestShellCommandParent
//
namespace mozilla {
namespace ipc {
namespace PTestShellCommand {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::ipc::PTestShellCommandParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::ipc::PTestShellCommandChild>* aChild);

enum MessageType {
    PTestShellCommandStart = PTestShellCommandMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    PTestShellCommandEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PTestShellCommand
} // namespace ipc
} // namespace mozilla

#endif // ifndef PTestShellCommand_h
