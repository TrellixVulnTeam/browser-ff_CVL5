//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundParent_h
#define PBackgroundParent_h

#include "mozilla/ipc/PBackground.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
class nsIFile;

// Headers for things that cannot be forward declared
#include "mozilla/dom/cache/Types.h"

namespace mozilla {
namespace net {
class PBackgroundDataBridgeParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PBackgroundDataBridgeChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBFactoryParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBFactoryChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIndexedDBUtilsParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIndexedDBUtilsChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSDBConnectionParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundSDBConnectionChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSObserverParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSObserverChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSSimpleRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSSimpleRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLocalStorageCacheParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLocalStorageCacheChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSessionStorageManagerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundSessionStorageManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundStorageParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundStorageChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundTestParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundTestChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBroadcastChannelParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBroadcastChannelChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheParent;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStorageParent;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheStorageChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlParent;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientManagerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PClientManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PEndpointForReportParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PEndpointForReportChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileSystemRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PFileSystemRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PGamepadEventChannelParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PGamepadEventChannelChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PGamepadTestChannelParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PGamepadTestChannelChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpBackgroundChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpBackgroundChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PIdleSchedulerParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PIdleSchedulerChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMediaTransportParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMediaTransportChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PRemoteWorkerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerControllerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PRemoteWorkerControllerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerServiceParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PRemoteWorkerServiceChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSharedWorkerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSharedWorkerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PTemporaryIPCBlobParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PTemporaryIPCBlobChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileCreatorParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PFileCreatorChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMessagePortParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMessagePortChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace camera {
class PCamerasParent;
} // namespace camera
} // namespace mozilla
namespace mozilla {
namespace camera {
class PCamerasChild;
} // namespace camera
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMIDIManagerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMIDIManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMIDIPortParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMIDIPortChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaParent;
} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace quota {
class PQuotaChild;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerContainerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerContainerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerManagerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerRegistrationParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerRegistrationChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebAuthnTransactionParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWebAuthnTransactionChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PUDPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace psm {
class PVerifySSLServerCertParent;
} // namespace psm
} // namespace mozilla
namespace mozilla {
namespace psm {
class PVerifySSLServerCertChild;
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace dom {
class PVsyncParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PVsyncChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderManagerParent;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStorageParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PVsyncParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLocalStorageCacheParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PIdleSchedulerParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundTestParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PTemporaryIPCBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebAuthnTransactionParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaParent;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMediaTransportParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIndexedDBUtilsParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerServiceParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerRegistrationParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMIDIPortParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBroadcastChannelParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PBackgroundDataBridgeParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PGamepadTestChannelParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSharedWorkerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileCreatorParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundStorageParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMIDIManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpBackgroundChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PEndpointForReportParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace camera {
class PCamerasParent;
} // namespace camera
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSObserverParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSDBConnectionParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PGamepadEventChannelParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMessagePortParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileSystemRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerContainerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSSimpleRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSessionStorageManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace psm {
class PVerifySSLServerCertParent;
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBFactoryParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerControllerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {


class PBackgroundParent :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::dom::cache::PCacheStorageParent;
    friend class mozilla::dom::PVsyncParent;
    friend class mozilla::dom::PBackgroundLocalStorageCacheParent;
    friend class mozilla::ipc::PIdleSchedulerParent;
    friend class mozilla::dom::PClientManagerParent;
    friend class mozilla::ipc::PBackgroundTestParent;
    friend class mozilla::dom::PTemporaryIPCBlobParent;
    friend class mozilla::dom::PWebAuthnTransactionParent;
    friend class mozilla::dom::quota::PQuotaParent;
    friend class mozilla::dom::PMediaTransportParent;
    friend class mozilla::dom::indexedDB::PBackgroundIndexedDBUtilsParent;
    friend class mozilla::dom::PBackgroundLSDatabaseParent;
    friend class mozilla::dom::PRemoteWorkerServiceParent;
    friend class mozilla::dom::cache::PCacheParent;
    friend class mozilla::dom::PServiceWorkerRegistrationParent;
    friend class mozilla::ipc::PFileDescriptorSetParent;
    friend class mozilla::dom::PMIDIPortParent;
    friend class mozilla::dom::PServiceWorkerParent;
    friend class mozilla::dom::PBroadcastChannelParent;
    friend class mozilla::net::PBackgroundDataBridgeParent;
    friend class mozilla::dom::PGamepadTestChannelParent;
    friend class mozilla::dom::PSharedWorkerParent;
    friend class mozilla::dom::PFileCreatorParent;
    friend class mozilla::PRemoteLazyInputStreamParent;
    friend class mozilla::dom::PBackgroundStorageParent;
    friend class mozilla::net::PUDPSocketParent;
    friend class mozilla::dom::PMIDIManagerParent;
    friend class mozilla::net::PHttpBackgroundChannelParent;
    friend class mozilla::dom::PEndpointForReportParent;
    friend class mozilla::camera::PCamerasParent;
    friend class mozilla::dom::PRemoteWorkerParent;
    friend class mozilla::dom::PBackgroundLSObserverParent;
    friend class mozilla::dom::PBackgroundSDBConnectionParent;
    friend class mozilla::dom::PGamepadEventChannelParent;
    friend class mozilla::dom::PMessagePortParent;
    friend class mozilla::dom::PFileSystemRequestParent;
    friend class mozilla::dom::PServiceWorkerContainerParent;
    friend class mozilla::dom::PBackgroundLSSimpleRequestParent;
    friend class mozilla::dom::PBackgroundSessionStorageManagerParent;
    friend class mozilla::ipc::PChildToParentStreamParent;
    friend class mozilla::ipc::PParentToChildStreamParent;
    friend class mozilla::psm::PVerifySSLServerCertParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBFactoryParent;
    friend class mozilla::dom::PServiceWorkerManagerParent;
    friend class mozilla::dom::PBackgroundLSRequestParent;
    friend class mozilla::dom::cache::PCacheStreamControlParent;
    friend class mozilla::dom::PRemoteWorkerControllerParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::BlobOrMutableFile BlobOrMutableFile;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::psm::ByteArray ByteArray;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::dom::indexedDB::CommonIndexOpenCursorParams CommonIndexOpenCursorParams;
    typedef mozilla::dom::indexedDB::CommonOpenCursorParams CommonOpenCursorParams;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::psm::DataStorageEntry DataStorageEntry;
    typedef mozilla::psm::DataStorageItem DataStorageItem;
    typedef mozilla::DataStorageType DataStorageType;
    typedef mozilla::dom::indexedDB::DatabaseMetadata DatabaseMetadata;
    typedef mozilla::dom::indexedDB::DatabaseOrMutableFile DatabaseOrMutableFile;
    typedef mozilla::dom::indexedDB::DatabaseSpec DatabaseSpec;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::psm::DelegatedCredentialInfoArg DelegatedCredentialInfoArg;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::dom::IDBCursor::Direction Direction;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorData ErrorData;
    typedef mozilla::dom::ErrorDataNote ErrorDataNote;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::dom::ErrorValue ErrorValue;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::dom::indexedDB::FileAddInfo FileAddInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FileSystemGetDirectoryListingParams FileSystemGetDirectoryListingParams;
    typedef mozilla::dom::FileSystemGetFileOrDirectoryParams FileSystemGetFileOrDirectoryParams;
    typedef mozilla::dom::FileSystemGetFilesParams FileSystemGetFilesParams;
    typedef mozilla::dom::FileSystemParams FileSystemParams;
    typedef mozilla::dom::indexedDB::StructuredCloneFileBase::FileType FileType;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::dom::IPCServiceWorkerRegistrationDescriptor IPCServiceWorkerRegistrationDescriptor;
    typedef mozilla::dom::IPCServiceWorkerRegistrationDescriptorList IPCServiceWorkerRegistrationDescriptorList;
    typedef mozilla::dom::IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult;
    typedef mozilla::dom::IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::dom::indexedDB::IndexCountParams IndexCountParams;
    typedef mozilla::dom::indexedDB::IndexGetAllKeysParams IndexGetAllKeysParams;
    typedef mozilla::dom::indexedDB::IndexGetAllParams IndexGetAllParams;
    typedef mozilla::dom::indexedDB::IndexGetKeyParams IndexGetKeyParams;
    typedef mozilla::dom::indexedDB::IndexGetParams IndexGetParams;
    typedef mozilla::dom::indexedDB::IndexMetadata IndexMetadata;
    typedef mozilla::dom::indexedDB::IndexOpenCursorParams IndexOpenCursorParams;
    typedef mozilla::dom::indexedDB::IndexOpenKeyCursorParams IndexOpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::KeyPath KeyPath;
    typedef mozilla::dom::LSItemInfo LSItemInfo;
    typedef mozilla::dom::LSRequestCommonParams LSRequestCommonParams;
    typedef mozilla::dom::LSRequestParams LSRequestParams;
    typedef mozilla::dom::LSRequestPreloadDatastoreParams LSRequestPreloadDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareDatastoreParams LSRequestPrepareDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareObserverParams LSRequestPrepareObserverParams;
    typedef mozilla::dom::LSSimpleRequestParams LSSimpleRequestParams;
    typedef mozilla::dom::LSSimpleRequestPreloadedParams LSSimpleRequestPreloadedParams;
    typedef mozilla::dom::LSValue LSValue;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::dom::indexedDB::LoggingInfo LoggingInfo;
    typedef mozilla::dom::MIDIMessage MIDIMessage;
    typedef mozilla::dom::MIDIPortInfo MIDIPortInfo;
    typedef mozilla::dom::MIDIPortList MIDIPortList;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::dom::cache::Namespace Namespace;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::indexedDB::ObjectStoreAddParams ObjectStoreAddParams;
    typedef mozilla::dom::indexedDB::ObjectStoreAddPutParams ObjectStoreAddPutParams;
    typedef mozilla::dom::indexedDB::ObjectStoreClearParams ObjectStoreClearParams;
    typedef mozilla::dom::indexedDB::ObjectStoreCountParams ObjectStoreCountParams;
    typedef mozilla::dom::indexedDB::ObjectStoreDeleteParams ObjectStoreDeleteParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllKeysParams ObjectStoreGetAllKeysParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllParams ObjectStoreGetAllParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetKeyParams ObjectStoreGetKeyParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetParams ObjectStoreGetParams;
    typedef mozilla::dom::indexedDB::ObjectStoreMetadata ObjectStoreMetadata;
    typedef mozilla::dom::indexedDB::ObjectStoreOpenCursorParams ObjectStoreOpenCursorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreOpenKeyCursorParams ObjectStoreOpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::ObjectStorePutParams ObjectStorePutParams;
    typedef mozilla::dom::indexedDB::ObjectStoreSpec ObjectStoreSpec;
    typedef mozilla::dom::indexedDB::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::dom::OptionalServiceWorkerData OptionalServiceWorkerData;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::dom::quota::PersistenceType PersistenceType;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::RemoteWorkerData RemoteWorkerData;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::dom::indexedDB::RequestParams RequestParams;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::dom::indexedDB::SerializedKeyRange SerializedKeyRange;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneFile SerializedStructuredCloneFile;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::dom::ServiceWorkerData ServiceWorkerData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::net::PBackgroundDataBridgeParent PBackgroundDataBridgeParent;
    typedef mozilla::net::PBackgroundDataBridgeChild PBackgroundDataBridgeChild;
    typedef mozilla::dom::indexedDB::PBackgroundIDBFactoryParent PBackgroundIDBFactoryParent;
    typedef mozilla::dom::indexedDB::PBackgroundIDBFactoryChild PBackgroundIDBFactoryChild;
    typedef mozilla::dom::indexedDB::PBackgroundIndexedDBUtilsParent PBackgroundIndexedDBUtilsParent;
    typedef mozilla::dom::indexedDB::PBackgroundIndexedDBUtilsChild PBackgroundIndexedDBUtilsChild;
    typedef mozilla::dom::PBackgroundSDBConnectionParent PBackgroundSDBConnectionParent;
    typedef mozilla::dom::PBackgroundSDBConnectionChild PBackgroundSDBConnectionChild;
    typedef mozilla::dom::PBackgroundLSDatabaseParent PBackgroundLSDatabaseParent;
    typedef mozilla::dom::PBackgroundLSDatabaseChild PBackgroundLSDatabaseChild;
    typedef mozilla::dom::PBackgroundLSObserverParent PBackgroundLSObserverParent;
    typedef mozilla::dom::PBackgroundLSObserverChild PBackgroundLSObserverChild;
    typedef mozilla::dom::PBackgroundLSRequestParent PBackgroundLSRequestParent;
    typedef mozilla::dom::PBackgroundLSRequestChild PBackgroundLSRequestChild;
    typedef mozilla::dom::PBackgroundLSSimpleRequestParent PBackgroundLSSimpleRequestParent;
    typedef mozilla::dom::PBackgroundLSSimpleRequestChild PBackgroundLSSimpleRequestChild;
    typedef mozilla::dom::PBackgroundLocalStorageCacheParent PBackgroundLocalStorageCacheParent;
    typedef mozilla::dom::PBackgroundLocalStorageCacheChild PBackgroundLocalStorageCacheChild;
    typedef mozilla::dom::PBackgroundSessionStorageManagerParent PBackgroundSessionStorageManagerParent;
    typedef mozilla::dom::PBackgroundSessionStorageManagerChild PBackgroundSessionStorageManagerChild;
    typedef mozilla::dom::PBackgroundStorageParent PBackgroundStorageParent;
    typedef mozilla::dom::PBackgroundStorageChild PBackgroundStorageChild;
    typedef mozilla::ipc::PBackgroundTestParent PBackgroundTestParent;
    typedef mozilla::ipc::PBackgroundTestChild PBackgroundTestChild;
    typedef mozilla::dom::PBroadcastChannelParent PBroadcastChannelParent;
    typedef mozilla::dom::PBroadcastChannelChild PBroadcastChannelChild;
    typedef mozilla::dom::cache::PCacheParent PCacheParent;
    typedef mozilla::dom::cache::PCacheChild PCacheChild;
    typedef mozilla::dom::cache::PCacheStorageParent PCacheStorageParent;
    typedef mozilla::dom::cache::PCacheStorageChild PCacheStorageChild;
    typedef mozilla::dom::cache::PCacheStreamControlParent PCacheStreamControlParent;
    typedef mozilla::dom::cache::PCacheStreamControlChild PCacheStreamControlChild;
    typedef mozilla::dom::PClientManagerParent PClientManagerParent;
    typedef mozilla::dom::PClientManagerChild PClientManagerChild;
    typedef mozilla::dom::PEndpointForReportParent PEndpointForReportParent;
    typedef mozilla::dom::PEndpointForReportChild PEndpointForReportChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::dom::PFileSystemRequestParent PFileSystemRequestParent;
    typedef mozilla::dom::PFileSystemRequestChild PFileSystemRequestChild;
    typedef mozilla::dom::PGamepadEventChannelParent PGamepadEventChannelParent;
    typedef mozilla::dom::PGamepadEventChannelChild PGamepadEventChannelChild;
    typedef mozilla::dom::PGamepadTestChannelParent PGamepadTestChannelParent;
    typedef mozilla::dom::PGamepadTestChannelChild PGamepadTestChannelChild;
    typedef mozilla::net::PHttpBackgroundChannelParent PHttpBackgroundChannelParent;
    typedef mozilla::net::PHttpBackgroundChannelChild PHttpBackgroundChannelChild;
    typedef mozilla::ipc::PIdleSchedulerParent PIdleSchedulerParent;
    typedef mozilla::ipc::PIdleSchedulerChild PIdleSchedulerChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;
    typedef mozilla::dom::PMediaTransportParent PMediaTransportParent;
    typedef mozilla::dom::PMediaTransportChild PMediaTransportChild;
    typedef mozilla::dom::PRemoteWorkerParent PRemoteWorkerParent;
    typedef mozilla::dom::PRemoteWorkerChild PRemoteWorkerChild;
    typedef mozilla::dom::PRemoteWorkerControllerParent PRemoteWorkerControllerParent;
    typedef mozilla::dom::PRemoteWorkerControllerChild PRemoteWorkerControllerChild;
    typedef mozilla::dom::PRemoteWorkerServiceParent PRemoteWorkerServiceParent;
    typedef mozilla::dom::PRemoteWorkerServiceChild PRemoteWorkerServiceChild;
    typedef mozilla::dom::PSharedWorkerParent PSharedWorkerParent;
    typedef mozilla::dom::PSharedWorkerChild PSharedWorkerChild;
    typedef mozilla::dom::PTemporaryIPCBlobParent PTemporaryIPCBlobParent;
    typedef mozilla::dom::PTemporaryIPCBlobChild PTemporaryIPCBlobChild;
    typedef mozilla::dom::PFileCreatorParent PFileCreatorParent;
    typedef mozilla::dom::PFileCreatorChild PFileCreatorChild;
    typedef mozilla::dom::PMessagePortParent PMessagePortParent;
    typedef mozilla::dom::PMessagePortChild PMessagePortChild;
    typedef mozilla::camera::PCamerasParent PCamerasParent;
    typedef mozilla::camera::PCamerasChild PCamerasChild;
    typedef mozilla::dom::PMIDIManagerParent PMIDIManagerParent;
    typedef mozilla::dom::PMIDIManagerChild PMIDIManagerChild;
    typedef mozilla::dom::PMIDIPortParent PMIDIPortParent;
    typedef mozilla::dom::PMIDIPortChild PMIDIPortChild;
    typedef mozilla::dom::quota::PQuotaParent PQuotaParent;
    typedef mozilla::dom::quota::PQuotaChild PQuotaChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::dom::PServiceWorkerParent PServiceWorkerParent;
    typedef mozilla::dom::PServiceWorkerChild PServiceWorkerChild;
    typedef mozilla::dom::PServiceWorkerContainerParent PServiceWorkerContainerParent;
    typedef mozilla::dom::PServiceWorkerContainerChild PServiceWorkerContainerChild;
    typedef mozilla::dom::PServiceWorkerManagerParent PServiceWorkerManagerParent;
    typedef mozilla::dom::PServiceWorkerManagerChild PServiceWorkerManagerChild;
    typedef mozilla::dom::PServiceWorkerRegistrationParent PServiceWorkerRegistrationParent;
    typedef mozilla::dom::PServiceWorkerRegistrationChild PServiceWorkerRegistrationChild;
    typedef mozilla::dom::PWebAuthnTransactionParent PWebAuthnTransactionParent;
    typedef mozilla::dom::PWebAuthnTransactionChild PWebAuthnTransactionChild;
    typedef mozilla::net::PUDPSocketParent PUDPSocketParent;
    typedef mozilla::net::PUDPSocketChild PUDPSocketChild;
    typedef mozilla::psm::PVerifySSLServerCertParent PVerifySSLServerCertParent;
    typedef mozilla::psm::PVerifySSLServerCertChild PVerifySSLServerCertChild;
    typedef mozilla::dom::PVsyncParent PVsyncParent;
    typedef mozilla::dom::PVsyncChild PVsyncChild;
    typedef mozilla::PRemoteDecoderManagerParent PRemoteDecoderManagerParent;
    typedef mozilla::PRemoteDecoderManagerChild PRemoteDecoderManagerChild;

public:
    typedef std::function<void(Tuple<const nsresult&, Endpoint<mozilla::PRemoteDecoderManagerChild>&&>)> EnsureRDDProcessAndCreateBridgeResolver;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundTestConstructor(
            PBackgroundTestParent* actor,
            const nsCString& testArg);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundDataBridgeConstructor(
            PBackgroundDataBridgeParent* actor,
            const uint64_t& channelID);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundIDBFactoryConstructor(
            PBackgroundIDBFactoryParent* actor,
            const LoggingInfo& loggingInfo);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundIndexedDBUtilsConstructor(PBackgroundIndexedDBUtilsParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvFlushPendingFileDeletions() = 0;
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundSDBConnectionConstructor(
            PBackgroundSDBConnectionParent* actor,
            const PersistenceType& persistenceType,
            const PrincipalInfo& principalInfo);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundLSDatabaseConstructor(
            PBackgroundLSDatabaseParent* actor,
            const PrincipalInfo& principalInfo,
            const uint32_t& privateBrowsingId,
            const uint64_t& datastoreId);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundLSObserverConstructor(
            PBackgroundLSObserverParent* actor,
            const uint64_t& observerId);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundLSRequestConstructor(
            PBackgroundLSRequestParent* actor,
            const LSRequestParams& params);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundLSSimpleRequestConstructor(
            PBackgroundLSSimpleRequestParent* actor,
            const LSSimpleRequestParams& params);
    virtual mozilla::ipc::IPCResult
    RecvLSClearPrivateBrowsing() = 0;
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundLocalStorageCacheConstructor(
            PBackgroundLocalStorageCacheParent* actor,
            const PrincipalInfo& principalInfo,
            const nsCString& originKey,
            const uint32_t& privateBrowsingId);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundSessionStorageManagerConstructor(
            PBackgroundSessionStorageManagerParent* actor,
            const uint64_t& aTopContextId);
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundStorageConstructor(
            PBackgroundStorageParent* actor,
            const nsString& profilePath,
            const uint32_t& privateBrowsingId);
    virtual mozilla::ipc::IPCResult
    RecvPVsyncConstructor(PVsyncParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPCamerasConstructor(PCamerasParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPUDPSocketConstructor(
            PUDPSocketParent* actor,
            const mozilla::Maybe<PrincipalInfo>& pInfo,
            const nsCString& filter);
    virtual mozilla::ipc::IPCResult
    RecvPBroadcastChannelConstructor(
            PBroadcastChannelParent* actor,
            const PrincipalInfo& pInfo,
            const nsCString& origin,
            const nsString& channel);
    virtual mozilla::ipc::IPCResult
    RecvPServiceWorkerManagerConstructor(PServiceWorkerManagerParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvShutdownServiceWorkerRegistrar() = 0;
    virtual mozilla::ipc::IPCResult
    RecvPCacheStorageConstructor(
            PCacheStorageParent* actor,
            const Namespace& aNamespace,
            const PrincipalInfo& aPrincipalInfo);
    virtual mozilla::ipc::IPCResult
    RecvPMessagePortConstructor(
            PMessagePortParent* actor,
            const nsID& uuid,
            const nsID& destinationUuid,
            const uint32_t& sequenceId);
    virtual mozilla::ipc::IPCResult
    RecvPChildToParentStreamConstructor(PChildToParentStreamParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvMessagePortForceClose(
            const nsID& uuid,
            const nsID& destinationUuid,
            const uint32_t& sequenceId) = 0;
    virtual mozilla::ipc::IPCResult
    RecvPQuotaConstructor(PQuotaParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvShutdownQuotaManager() = 0;
    virtual mozilla::ipc::IPCResult
    RecvShutdownBackgroundSessionStorageManagers() = 0;
    virtual mozilla::ipc::IPCResult
    RecvPropagateBackgroundSessionStorageManager(
            const uint64_t& currentTopContextId,
            const uint64_t& targetTopContextId) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRemoveBackgroundSessionStorageManager(const uint64_t& topContextId) = 0;
    virtual mozilla::ipc::IPCResult
    RecvPFileSystemRequestConstructor(
            PFileSystemRequestParent* actor,
            const FileSystemParams& params);
    virtual mozilla::ipc::IPCResult
    RecvPGamepadEventChannelConstructor(PGamepadEventChannelParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPGamepadTestChannelConstructor(PGamepadTestChannelParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPHttpBackgroundChannelConstructor(
            PHttpBackgroundChannelParent* actor,
            const uint64_t& channelId);
    virtual mozilla::ipc::IPCResult
    RecvPWebAuthnTransactionConstructor(PWebAuthnTransactionParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPSharedWorkerConstructor(
            PSharedWorkerParent* actor,
            const RemoteWorkerData& data,
            const uint64_t& windowID,
            const MessagePortIdentifier& portIdentifier);
    virtual mozilla::ipc::IPCResult
    RecvPTemporaryIPCBlobConstructor(PTemporaryIPCBlobParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPFileCreatorConstructor(
            PFileCreatorParent* actor,
            const nsString& aFullPath,
            const nsString& aType,
            const nsString& aName,
            const mozilla::Maybe<int64_t>& lastModified,
            const bool& aExistenceCheck,
            const bool& aIsFromNsIFile);
    virtual mozilla::ipc::IPCResult
    RecvPClientManagerConstructor(PClientManagerParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPMIDIManagerConstructor(PMIDIManagerParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPMIDIPortConstructor(
            PMIDIPortParent* actor,
            const MIDIPortInfo& portInfo,
            const bool& sysexEnabled);
    virtual mozilla::ipc::IPCResult
    RecvStorageActivity(const PrincipalInfo& principalInfo) = 0;
    virtual mozilla::ipc::IPCResult
    RecvPServiceWorkerConstructor(
            PServiceWorkerParent* actor,
            const IPCServiceWorkerDescriptor& aDescriptor);
    virtual mozilla::ipc::IPCResult
    RecvPRemoteWorkerControllerConstructor(
            PRemoteWorkerControllerParent* actor,
            const RemoteWorkerData& aData);
    virtual mozilla::ipc::IPCResult
    RecvPRemoteWorkerServiceConstructor(PRemoteWorkerServiceParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPServiceWorkerContainerConstructor(PServiceWorkerContainerParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPServiceWorkerRegistrationConstructor(
            PServiceWorkerRegistrationParent* actor,
            const IPCServiceWorkerRegistrationDescriptor& aDescriptor);
    virtual mozilla::ipc::IPCResult
    RecvPEndpointForReportConstructor(
            PEndpointForReportParent* actor,
            const nsString& aGroupName,
            const PrincipalInfo& aPrincipalInfo);
    virtual mozilla::ipc::IPCResult
    RecvRemoveEndpoint(
            const nsString& aGroupName,
            const nsCString& aEndpointURL,
            const PrincipalInfo& aPrincipalInfo) = 0;
    virtual mozilla::ipc::IPCResult
    RecvPIdleSchedulerConstructor(PIdleSchedulerParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPMediaTransportConstructor(PMediaTransportParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPVerifySSLServerCertConstructor(
            PVerifySSLServerCertParent* actor,
            const ByteArray& aServerCert,
            nsTArray<ByteArray>&& aPeerCertChain,
            const nsCString& aHostName,
            const int32_t& aPort,
            const OriginAttributes& aOriginAttributes,
            const mozilla::Maybe<ByteArray>& aStapledOCSPResponse,
            const mozilla::Maybe<ByteArray>& aSctsFromTLSExtension,
            const mozilla::Maybe<DelegatedCredentialInfoArg>& aDcInfo,
            const uint32_t& aProviderFlags,
            const uint32_t& aCertVerifierFlags);
    virtual mozilla::ipc::IPCResult
    RecvEnsureRDDProcessAndCreateBridge(EnsureRDDProcessAndCreateBridgeResolver&& aResolve) = 0;
    virtual mozilla::ipc::IPCResult
    RecvPRemoteLazyInputStreamConstructor(
            PRemoteLazyInputStreamParent* actor,
            const nsID& aID,
            const uint64_t& aSize);
    virtual mozilla::ipc::IPCResult
    RecvPFileDescriptorSetConstructor(
            PFileDescriptorSetParent* actor,
            const FileDescriptor& fd);
    virtual PBackgroundTestParent*
    AllocPBackgroundTestParent(const nsCString& testArg) = 0;
    virtual already_AddRefed<PBackgroundDataBridgeParent>
    AllocPBackgroundDataBridgeParent(const uint64_t& channelID) = 0;
    virtual already_AddRefed<PBackgroundIDBFactoryParent>
    AllocPBackgroundIDBFactoryParent(const LoggingInfo& loggingInfo) = 0;
    virtual PBackgroundIndexedDBUtilsParent*
    AllocPBackgroundIndexedDBUtilsParent() = 0;
    virtual PBackgroundSDBConnectionParent*
    AllocPBackgroundSDBConnectionParent(
            const PersistenceType& persistenceType,
            const PrincipalInfo& principalInfo) = 0;
    virtual PBackgroundLSDatabaseParent*
    AllocPBackgroundLSDatabaseParent(
            const PrincipalInfo& principalInfo,
            const uint32_t& privateBrowsingId,
            const uint64_t& datastoreId) = 0;
    virtual PBackgroundLSObserverParent*
    AllocPBackgroundLSObserverParent(const uint64_t& observerId) = 0;
    virtual PBackgroundLSRequestParent*
    AllocPBackgroundLSRequestParent(const LSRequestParams& params) = 0;
    virtual PBackgroundLSSimpleRequestParent*
    AllocPBackgroundLSSimpleRequestParent(const LSSimpleRequestParams& params) = 0;
    virtual PBackgroundLocalStorageCacheParent*
    AllocPBackgroundLocalStorageCacheParent(
            const PrincipalInfo& principalInfo,
            const nsCString& originKey,
            const uint32_t& privateBrowsingId) = 0;
    virtual already_AddRefed<PBackgroundSessionStorageManagerParent>
    AllocPBackgroundSessionStorageManagerParent(const uint64_t& aTopContextId) = 0;
    virtual PBackgroundStorageParent*
    AllocPBackgroundStorageParent(
            const nsString& profilePath,
            const uint32_t& privateBrowsingId) = 0;
    virtual PVsyncParent*
    AllocPVsyncParent() = 0;
    virtual PCamerasParent*
    AllocPCamerasParent() = 0;
    virtual PUDPSocketParent*
    AllocPUDPSocketParent(
            const mozilla::Maybe<PrincipalInfo>& pInfo,
            const nsCString& filter) = 0;
    virtual PBroadcastChannelParent*
    AllocPBroadcastChannelParent(
            const PrincipalInfo& pInfo,
            const nsCString& origin,
            const nsString& channel) = 0;
    virtual PServiceWorkerManagerParent*
    AllocPServiceWorkerManagerParent() = 0;
    virtual PCacheStorageParent*
    AllocPCacheStorageParent(
            const Namespace& aNamespace,
            const PrincipalInfo& aPrincipalInfo) = 0;
    virtual PMessagePortParent*
    AllocPMessagePortParent(
            const nsID& uuid,
            const nsID& destinationUuid,
            const uint32_t& sequenceId) = 0;
    virtual PChildToParentStreamParent*
    AllocPChildToParentStreamParent() = 0;
    virtual PQuotaParent*
    AllocPQuotaParent() = 0;
    virtual already_AddRefed<PFileSystemRequestParent>
    AllocPFileSystemRequestParent(const FileSystemParams& params) = 0;
    virtual already_AddRefed<PGamepadEventChannelParent>
    AllocPGamepadEventChannelParent() = 0;
    virtual already_AddRefed<PGamepadTestChannelParent>
    AllocPGamepadTestChannelParent() = 0;
    virtual already_AddRefed<PHttpBackgroundChannelParent>
    AllocPHttpBackgroundChannelParent(const uint64_t& channelId) = 0;
    virtual PWebAuthnTransactionParent*
    AllocPWebAuthnTransactionParent() = 0;
    virtual PSharedWorkerParent*
    AllocPSharedWorkerParent(
            const RemoteWorkerData& data,
            const uint64_t& windowID,
            const MessagePortIdentifier& portIdentifier) = 0;
    virtual PTemporaryIPCBlobParent*
    AllocPTemporaryIPCBlobParent() = 0;
    virtual PFileCreatorParent*
    AllocPFileCreatorParent(
            const nsString& aFullPath,
            const nsString& aType,
            const nsString& aName,
            const mozilla::Maybe<int64_t>& lastModified,
            const bool& aExistenceCheck,
            const bool& aIsFromNsIFile) = 0;
    virtual PClientManagerParent*
    AllocPClientManagerParent() = 0;
    virtual PMIDIManagerParent*
    AllocPMIDIManagerParent() = 0;
    virtual PMIDIPortParent*
    AllocPMIDIPortParent(
            const MIDIPortInfo& portInfo,
            const bool& sysexEnabled) = 0;
    virtual already_AddRefed<PServiceWorkerParent>
    AllocPServiceWorkerParent(const IPCServiceWorkerDescriptor& aDescriptor) = 0;
    virtual PRemoteWorkerControllerParent*
    AllocPRemoteWorkerControllerParent(const RemoteWorkerData& aData) = 0;
    virtual PRemoteWorkerServiceParent*
    AllocPRemoteWorkerServiceParent() = 0;
    virtual already_AddRefed<PServiceWorkerContainerParent>
    AllocPServiceWorkerContainerParent() = 0;
    virtual already_AddRefed<PServiceWorkerRegistrationParent>
    AllocPServiceWorkerRegistrationParent(const IPCServiceWorkerRegistrationDescriptor& aDescriptor) = 0;
    virtual PEndpointForReportParent*
    AllocPEndpointForReportParent(
            const nsString& aGroupName,
            const PrincipalInfo& aPrincipalInfo) = 0;
    virtual already_AddRefed<PIdleSchedulerParent>
    AllocPIdleSchedulerParent() = 0;
    virtual PMediaTransportParent*
    AllocPMediaTransportParent() = 0;
    virtual already_AddRefed<PVerifySSLServerCertParent>
    AllocPVerifySSLServerCertParent(
            const ByteArray& aServerCert,
            const nsTArray<ByteArray>& aPeerCertChain,
            const nsCString& aHostName,
            const int32_t& aPort,
            const OriginAttributes& aOriginAttributes,
            const mozilla::Maybe<ByteArray>& aStapledOCSPResponse,
            const mozilla::Maybe<ByteArray>& aSctsFromTLSExtension,
            const mozilla::Maybe<DelegatedCredentialInfoArg>& aDcInfo,
            const uint32_t& aProviderFlags,
            const uint32_t& aCertVerifierFlags) = 0;
    virtual PCacheParent*
    AllocPCacheParent() = 0;
    virtual PParentToChildStreamParent*
    AllocPParentToChildStreamParent() = 0;
    virtual PRemoteWorkerParent*
    AllocPRemoteWorkerParent(const RemoteWorkerData& data) = 0;
    virtual already_AddRefed<PRemoteLazyInputStreamParent>
    AllocPRemoteLazyInputStreamParent(
            const nsID& aID,
            const uint64_t& aSize) = 0;
    virtual PFileDescriptorSetParent*
    AllocPFileDescriptorSetParent(const FileDescriptor& fd) = 0;
    virtual bool
    DeallocPBackgroundIndexedDBUtilsParent(PBackgroundIndexedDBUtilsParent* aActor) = 0;
    virtual bool
    DeallocPBackgroundSDBConnectionParent(PBackgroundSDBConnectionParent* aActor) = 0;
    virtual bool
    DeallocPBackgroundLSDatabaseParent(PBackgroundLSDatabaseParent* aActor) = 0;
    virtual bool
    DeallocPBackgroundLSObserverParent(PBackgroundLSObserverParent* aActor) = 0;
    virtual bool
    DeallocPBackgroundLSRequestParent(PBackgroundLSRequestParent* aActor) = 0;
    virtual bool
    DeallocPBackgroundLSSimpleRequestParent(PBackgroundLSSimpleRequestParent* aActor) = 0;
    virtual bool
    DeallocPBackgroundLocalStorageCacheParent(PBackgroundLocalStorageCacheParent* aActor) = 0;
    virtual bool
    DeallocPBackgroundStorageParent(PBackgroundStorageParent* aActor) = 0;
    virtual bool
    DeallocPBackgroundTestParent(PBackgroundTestParent* aActor) = 0;
    virtual bool
    DeallocPBroadcastChannelParent(PBroadcastChannelParent* aActor) = 0;
    virtual bool
    DeallocPCacheParent(PCacheParent* aActor) = 0;
    virtual bool
    DeallocPCacheStorageParent(PCacheStorageParent* aActor) = 0;
    virtual bool
    DeallocPClientManagerParent(PClientManagerParent* aActor) = 0;
    virtual bool
    DeallocPEndpointForReportParent(PEndpointForReportParent* aActor) = 0;
    virtual bool
    DeallocPFileDescriptorSetParent(PFileDescriptorSetParent* aActor) = 0;
    virtual bool
    DeallocPMediaTransportParent(PMediaTransportParent* aActor) = 0;
    virtual bool
    DeallocPRemoteWorkerParent(PRemoteWorkerParent* aActor) = 0;
    virtual bool
    DeallocPRemoteWorkerControllerParent(PRemoteWorkerControllerParent* aActor) = 0;
    virtual bool
    DeallocPRemoteWorkerServiceParent(PRemoteWorkerServiceParent* aActor) = 0;
    virtual bool
    DeallocPSharedWorkerParent(PSharedWorkerParent* aActor) = 0;
    virtual bool
    DeallocPTemporaryIPCBlobParent(PTemporaryIPCBlobParent* aActor) = 0;
    virtual bool
    DeallocPFileCreatorParent(PFileCreatorParent* aActor) = 0;
    virtual bool
    DeallocPMessagePortParent(PMessagePortParent* aActor) = 0;
    virtual bool
    DeallocPCamerasParent(PCamerasParent* aActor) = 0;
    virtual bool
    DeallocPMIDIManagerParent(PMIDIManagerParent* aActor) = 0;
    virtual bool
    DeallocPMIDIPortParent(PMIDIPortParent* aActor) = 0;
    virtual bool
    DeallocPQuotaParent(PQuotaParent* aActor) = 0;
    virtual bool
    DeallocPChildToParentStreamParent(PChildToParentStreamParent* aActor) = 0;
    virtual bool
    DeallocPParentToChildStreamParent(PParentToChildStreamParent* aActor) = 0;
    virtual bool
    DeallocPServiceWorkerManagerParent(PServiceWorkerManagerParent* aActor) = 0;
    virtual bool
    DeallocPWebAuthnTransactionParent(PWebAuthnTransactionParent* aActor) = 0;
    virtual bool
    DeallocPUDPSocketParent(PUDPSocketParent* aActor) = 0;
    virtual bool
    DeallocPVsyncParent(PVsyncParent* aActor) = 0;
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBackgroundParent();

    virtual ~PBackgroundParent();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    void
    ManagedPBackgroundDataBridgeParent(nsTArray<PBackgroundDataBridgeParent*>& aArr) const;
    const ManagedContainer<PBackgroundDataBridgeParent>&
    ManagedPBackgroundDataBridgeParent() const;

    void
    ManagedPBackgroundIDBFactoryParent(nsTArray<PBackgroundIDBFactoryParent*>& aArr) const;
    const ManagedContainer<PBackgroundIDBFactoryParent>&
    ManagedPBackgroundIDBFactoryParent() const;

    void
    ManagedPBackgroundIndexedDBUtilsParent(nsTArray<PBackgroundIndexedDBUtilsParent*>& aArr) const;
    const ManagedContainer<PBackgroundIndexedDBUtilsParent>&
    ManagedPBackgroundIndexedDBUtilsParent() const;

    void
    ManagedPBackgroundSDBConnectionParent(nsTArray<PBackgroundSDBConnectionParent*>& aArr) const;
    const ManagedContainer<PBackgroundSDBConnectionParent>&
    ManagedPBackgroundSDBConnectionParent() const;

    void
    ManagedPBackgroundLSDatabaseParent(nsTArray<PBackgroundLSDatabaseParent*>& aArr) const;
    const ManagedContainer<PBackgroundLSDatabaseParent>&
    ManagedPBackgroundLSDatabaseParent() const;

    void
    ManagedPBackgroundLSObserverParent(nsTArray<PBackgroundLSObserverParent*>& aArr) const;
    const ManagedContainer<PBackgroundLSObserverParent>&
    ManagedPBackgroundLSObserverParent() const;

    void
    ManagedPBackgroundLSRequestParent(nsTArray<PBackgroundLSRequestParent*>& aArr) const;
    const ManagedContainer<PBackgroundLSRequestParent>&
    ManagedPBackgroundLSRequestParent() const;

    void
    ManagedPBackgroundLSSimpleRequestParent(nsTArray<PBackgroundLSSimpleRequestParent*>& aArr) const;
    const ManagedContainer<PBackgroundLSSimpleRequestParent>&
    ManagedPBackgroundLSSimpleRequestParent() const;

    void
    ManagedPBackgroundLocalStorageCacheParent(nsTArray<PBackgroundLocalStorageCacheParent*>& aArr) const;
    const ManagedContainer<PBackgroundLocalStorageCacheParent>&
    ManagedPBackgroundLocalStorageCacheParent() const;

    void
    ManagedPBackgroundSessionStorageManagerParent(nsTArray<PBackgroundSessionStorageManagerParent*>& aArr) const;
    const ManagedContainer<PBackgroundSessionStorageManagerParent>&
    ManagedPBackgroundSessionStorageManagerParent() const;

    void
    ManagedPBackgroundStorageParent(nsTArray<PBackgroundStorageParent*>& aArr) const;
    const ManagedContainer<PBackgroundStorageParent>&
    ManagedPBackgroundStorageParent() const;

    void
    ManagedPBackgroundTestParent(nsTArray<PBackgroundTestParent*>& aArr) const;
    const ManagedContainer<PBackgroundTestParent>&
    ManagedPBackgroundTestParent() const;

    void
    ManagedPBroadcastChannelParent(nsTArray<PBroadcastChannelParent*>& aArr) const;
    const ManagedContainer<PBroadcastChannelParent>&
    ManagedPBroadcastChannelParent() const;

    void
    ManagedPCacheParent(nsTArray<PCacheParent*>& aArr) const;
    const ManagedContainer<PCacheParent>&
    ManagedPCacheParent() const;

    void
    ManagedPCacheStorageParent(nsTArray<PCacheStorageParent*>& aArr) const;
    const ManagedContainer<PCacheStorageParent>&
    ManagedPCacheStorageParent() const;

    void
    ManagedPCacheStreamControlParent(nsTArray<PCacheStreamControlParent*>& aArr) const;
    const ManagedContainer<PCacheStreamControlParent>&
    ManagedPCacheStreamControlParent() const;

    void
    ManagedPClientManagerParent(nsTArray<PClientManagerParent*>& aArr) const;
    const ManagedContainer<PClientManagerParent>&
    ManagedPClientManagerParent() const;

    void
    ManagedPEndpointForReportParent(nsTArray<PEndpointForReportParent*>& aArr) const;
    const ManagedContainer<PEndpointForReportParent>&
    ManagedPEndpointForReportParent() const;

    void
    ManagedPFileDescriptorSetParent(nsTArray<PFileDescriptorSetParent*>& aArr) const;
    const ManagedContainer<PFileDescriptorSetParent>&
    ManagedPFileDescriptorSetParent() const;

    void
    ManagedPFileSystemRequestParent(nsTArray<PFileSystemRequestParent*>& aArr) const;
    const ManagedContainer<PFileSystemRequestParent>&
    ManagedPFileSystemRequestParent() const;

    void
    ManagedPGamepadEventChannelParent(nsTArray<PGamepadEventChannelParent*>& aArr) const;
    const ManagedContainer<PGamepadEventChannelParent>&
    ManagedPGamepadEventChannelParent() const;

    void
    ManagedPGamepadTestChannelParent(nsTArray<PGamepadTestChannelParent*>& aArr) const;
    const ManagedContainer<PGamepadTestChannelParent>&
    ManagedPGamepadTestChannelParent() const;

    void
    ManagedPHttpBackgroundChannelParent(nsTArray<PHttpBackgroundChannelParent*>& aArr) const;
    const ManagedContainer<PHttpBackgroundChannelParent>&
    ManagedPHttpBackgroundChannelParent() const;

    void
    ManagedPIdleSchedulerParent(nsTArray<PIdleSchedulerParent*>& aArr) const;
    const ManagedContainer<PIdleSchedulerParent>&
    ManagedPIdleSchedulerParent() const;

    void
    ManagedPRemoteLazyInputStreamParent(nsTArray<PRemoteLazyInputStreamParent*>& aArr) const;
    const ManagedContainer<PRemoteLazyInputStreamParent>&
    ManagedPRemoteLazyInputStreamParent() const;

    void
    ManagedPMediaTransportParent(nsTArray<PMediaTransportParent*>& aArr) const;
    const ManagedContainer<PMediaTransportParent>&
    ManagedPMediaTransportParent() const;

    void
    ManagedPRemoteWorkerParent(nsTArray<PRemoteWorkerParent*>& aArr) const;
    const ManagedContainer<PRemoteWorkerParent>&
    ManagedPRemoteWorkerParent() const;

    void
    ManagedPRemoteWorkerControllerParent(nsTArray<PRemoteWorkerControllerParent*>& aArr) const;
    const ManagedContainer<PRemoteWorkerControllerParent>&
    ManagedPRemoteWorkerControllerParent() const;

    void
    ManagedPRemoteWorkerServiceParent(nsTArray<PRemoteWorkerServiceParent*>& aArr) const;
    const ManagedContainer<PRemoteWorkerServiceParent>&
    ManagedPRemoteWorkerServiceParent() const;

    void
    ManagedPSharedWorkerParent(nsTArray<PSharedWorkerParent*>& aArr) const;
    const ManagedContainer<PSharedWorkerParent>&
    ManagedPSharedWorkerParent() const;

    void
    ManagedPTemporaryIPCBlobParent(nsTArray<PTemporaryIPCBlobParent*>& aArr) const;
    const ManagedContainer<PTemporaryIPCBlobParent>&
    ManagedPTemporaryIPCBlobParent() const;

    void
    ManagedPFileCreatorParent(nsTArray<PFileCreatorParent*>& aArr) const;
    const ManagedContainer<PFileCreatorParent>&
    ManagedPFileCreatorParent() const;

    void
    ManagedPMessagePortParent(nsTArray<PMessagePortParent*>& aArr) const;
    const ManagedContainer<PMessagePortParent>&
    ManagedPMessagePortParent() const;

    void
    ManagedPCamerasParent(nsTArray<PCamerasParent*>& aArr) const;
    const ManagedContainer<PCamerasParent>&
    ManagedPCamerasParent() const;

    void
    ManagedPMIDIManagerParent(nsTArray<PMIDIManagerParent*>& aArr) const;
    const ManagedContainer<PMIDIManagerParent>&
    ManagedPMIDIManagerParent() const;

    void
    ManagedPMIDIPortParent(nsTArray<PMIDIPortParent*>& aArr) const;
    const ManagedContainer<PMIDIPortParent>&
    ManagedPMIDIPortParent() const;

    void
    ManagedPQuotaParent(nsTArray<PQuotaParent*>& aArr) const;
    const ManagedContainer<PQuotaParent>&
    ManagedPQuotaParent() const;

    void
    ManagedPChildToParentStreamParent(nsTArray<PChildToParentStreamParent*>& aArr) const;
    const ManagedContainer<PChildToParentStreamParent>&
    ManagedPChildToParentStreamParent() const;

    void
    ManagedPParentToChildStreamParent(nsTArray<PParentToChildStreamParent*>& aArr) const;
    const ManagedContainer<PParentToChildStreamParent>&
    ManagedPParentToChildStreamParent() const;

    void
    ManagedPServiceWorkerParent(nsTArray<PServiceWorkerParent*>& aArr) const;
    const ManagedContainer<PServiceWorkerParent>&
    ManagedPServiceWorkerParent() const;

    void
    ManagedPServiceWorkerContainerParent(nsTArray<PServiceWorkerContainerParent*>& aArr) const;
    const ManagedContainer<PServiceWorkerContainerParent>&
    ManagedPServiceWorkerContainerParent() const;

    void
    ManagedPServiceWorkerManagerParent(nsTArray<PServiceWorkerManagerParent*>& aArr) const;
    const ManagedContainer<PServiceWorkerManagerParent>&
    ManagedPServiceWorkerManagerParent() const;

    void
    ManagedPServiceWorkerRegistrationParent(nsTArray<PServiceWorkerRegistrationParent*>& aArr) const;
    const ManagedContainer<PServiceWorkerRegistrationParent>&
    ManagedPServiceWorkerRegistrationParent() const;

    void
    ManagedPWebAuthnTransactionParent(nsTArray<PWebAuthnTransactionParent*>& aArr) const;
    const ManagedContainer<PWebAuthnTransactionParent>&
    ManagedPWebAuthnTransactionParent() const;

    void
    ManagedPUDPSocketParent(nsTArray<PUDPSocketParent*>& aArr) const;
    const ManagedContainer<PUDPSocketParent>&
    ManagedPUDPSocketParent() const;

    void
    ManagedPVerifySSLServerCertParent(nsTArray<PVerifySSLServerCertParent*>& aArr) const;
    const ManagedContainer<PVerifySSLServerCertParent>&
    ManagedPVerifySSLServerCertParent() const;

    void
    ManagedPVsyncParent(nsTArray<PVsyncParent*>& aArr) const;
    const ManagedContainer<PVsyncParent>&
    ManagedPVsyncParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PBackgroundDataBridgeChild>
    OpenPBackgroundDataBridgeEndpoint(PBackgroundDataBridgeParent* aActor);
    bool
    BindPBackgroundDataBridgeEndpoint(
            ManagedEndpoint<PBackgroundDataBridgeParent> aEndpoint,
            PBackgroundDataBridgeParent* aActor);

    ManagedEndpoint<PBackgroundIDBFactoryChild>
    OpenPBackgroundIDBFactoryEndpoint(PBackgroundIDBFactoryParent* aActor);
    bool
    BindPBackgroundIDBFactoryEndpoint(
            ManagedEndpoint<PBackgroundIDBFactoryParent> aEndpoint,
            PBackgroundIDBFactoryParent* aActor);

    ManagedEndpoint<PBackgroundIndexedDBUtilsChild>
    OpenPBackgroundIndexedDBUtilsEndpoint(PBackgroundIndexedDBUtilsParent* aActor);
    bool
    BindPBackgroundIndexedDBUtilsEndpoint(
            ManagedEndpoint<PBackgroundIndexedDBUtilsParent> aEndpoint,
            PBackgroundIndexedDBUtilsParent* aActor);

    ManagedEndpoint<PBackgroundSDBConnectionChild>
    OpenPBackgroundSDBConnectionEndpoint(PBackgroundSDBConnectionParent* aActor);
    bool
    BindPBackgroundSDBConnectionEndpoint(
            ManagedEndpoint<PBackgroundSDBConnectionParent> aEndpoint,
            PBackgroundSDBConnectionParent* aActor);

    ManagedEndpoint<PBackgroundLSDatabaseChild>
    OpenPBackgroundLSDatabaseEndpoint(PBackgroundLSDatabaseParent* aActor);
    bool
    BindPBackgroundLSDatabaseEndpoint(
            ManagedEndpoint<PBackgroundLSDatabaseParent> aEndpoint,
            PBackgroundLSDatabaseParent* aActor);

    ManagedEndpoint<PBackgroundLSObserverChild>
    OpenPBackgroundLSObserverEndpoint(PBackgroundLSObserverParent* aActor);
    bool
    BindPBackgroundLSObserverEndpoint(
            ManagedEndpoint<PBackgroundLSObserverParent> aEndpoint,
            PBackgroundLSObserverParent* aActor);

    ManagedEndpoint<PBackgroundLSRequestChild>
    OpenPBackgroundLSRequestEndpoint(PBackgroundLSRequestParent* aActor);
    bool
    BindPBackgroundLSRequestEndpoint(
            ManagedEndpoint<PBackgroundLSRequestParent> aEndpoint,
            PBackgroundLSRequestParent* aActor);

    ManagedEndpoint<PBackgroundLSSimpleRequestChild>
    OpenPBackgroundLSSimpleRequestEndpoint(PBackgroundLSSimpleRequestParent* aActor);
    bool
    BindPBackgroundLSSimpleRequestEndpoint(
            ManagedEndpoint<PBackgroundLSSimpleRequestParent> aEndpoint,
            PBackgroundLSSimpleRequestParent* aActor);

    ManagedEndpoint<PBackgroundLocalStorageCacheChild>
    OpenPBackgroundLocalStorageCacheEndpoint(PBackgroundLocalStorageCacheParent* aActor);
    bool
    BindPBackgroundLocalStorageCacheEndpoint(
            ManagedEndpoint<PBackgroundLocalStorageCacheParent> aEndpoint,
            PBackgroundLocalStorageCacheParent* aActor);

    ManagedEndpoint<PBackgroundSessionStorageManagerChild>
    OpenPBackgroundSessionStorageManagerEndpoint(PBackgroundSessionStorageManagerParent* aActor);
    bool
    BindPBackgroundSessionStorageManagerEndpoint(
            ManagedEndpoint<PBackgroundSessionStorageManagerParent> aEndpoint,
            PBackgroundSessionStorageManagerParent* aActor);

    ManagedEndpoint<PBackgroundStorageChild>
    OpenPBackgroundStorageEndpoint(PBackgroundStorageParent* aActor);
    bool
    BindPBackgroundStorageEndpoint(
            ManagedEndpoint<PBackgroundStorageParent> aEndpoint,
            PBackgroundStorageParent* aActor);

    ManagedEndpoint<PBackgroundTestChild>
    OpenPBackgroundTestEndpoint(PBackgroundTestParent* aActor);
    bool
    BindPBackgroundTestEndpoint(
            ManagedEndpoint<PBackgroundTestParent> aEndpoint,
            PBackgroundTestParent* aActor);

    ManagedEndpoint<PBroadcastChannelChild>
    OpenPBroadcastChannelEndpoint(PBroadcastChannelParent* aActor);
    bool
    BindPBroadcastChannelEndpoint(
            ManagedEndpoint<PBroadcastChannelParent> aEndpoint,
            PBroadcastChannelParent* aActor);

    ManagedEndpoint<PCacheChild>
    OpenPCacheEndpoint(PCacheParent* aActor);
    bool
    BindPCacheEndpoint(
            ManagedEndpoint<PCacheParent> aEndpoint,
            PCacheParent* aActor);

    ManagedEndpoint<PCacheStorageChild>
    OpenPCacheStorageEndpoint(PCacheStorageParent* aActor);
    bool
    BindPCacheStorageEndpoint(
            ManagedEndpoint<PCacheStorageParent> aEndpoint,
            PCacheStorageParent* aActor);

    ManagedEndpoint<PCacheStreamControlChild>
    OpenPCacheStreamControlEndpoint(PCacheStreamControlParent* aActor);
    bool
    BindPCacheStreamControlEndpoint(
            ManagedEndpoint<PCacheStreamControlParent> aEndpoint,
            PCacheStreamControlParent* aActor);

    ManagedEndpoint<PClientManagerChild>
    OpenPClientManagerEndpoint(PClientManagerParent* aActor);
    bool
    BindPClientManagerEndpoint(
            ManagedEndpoint<PClientManagerParent> aEndpoint,
            PClientManagerParent* aActor);

    ManagedEndpoint<PEndpointForReportChild>
    OpenPEndpointForReportEndpoint(PEndpointForReportParent* aActor);
    bool
    BindPEndpointForReportEndpoint(
            ManagedEndpoint<PEndpointForReportParent> aEndpoint,
            PEndpointForReportParent* aActor);

    ManagedEndpoint<PFileDescriptorSetChild>
    OpenPFileDescriptorSetEndpoint(PFileDescriptorSetParent* aActor);
    bool
    BindPFileDescriptorSetEndpoint(
            ManagedEndpoint<PFileDescriptorSetParent> aEndpoint,
            PFileDescriptorSetParent* aActor);

    ManagedEndpoint<PFileSystemRequestChild>
    OpenPFileSystemRequestEndpoint(PFileSystemRequestParent* aActor);
    bool
    BindPFileSystemRequestEndpoint(
            ManagedEndpoint<PFileSystemRequestParent> aEndpoint,
            PFileSystemRequestParent* aActor);

    ManagedEndpoint<PGamepadEventChannelChild>
    OpenPGamepadEventChannelEndpoint(PGamepadEventChannelParent* aActor);
    bool
    BindPGamepadEventChannelEndpoint(
            ManagedEndpoint<PGamepadEventChannelParent> aEndpoint,
            PGamepadEventChannelParent* aActor);

    ManagedEndpoint<PGamepadTestChannelChild>
    OpenPGamepadTestChannelEndpoint(PGamepadTestChannelParent* aActor);
    bool
    BindPGamepadTestChannelEndpoint(
            ManagedEndpoint<PGamepadTestChannelParent> aEndpoint,
            PGamepadTestChannelParent* aActor);

    ManagedEndpoint<PHttpBackgroundChannelChild>
    OpenPHttpBackgroundChannelEndpoint(PHttpBackgroundChannelParent* aActor);
    bool
    BindPHttpBackgroundChannelEndpoint(
            ManagedEndpoint<PHttpBackgroundChannelParent> aEndpoint,
            PHttpBackgroundChannelParent* aActor);

    ManagedEndpoint<PIdleSchedulerChild>
    OpenPIdleSchedulerEndpoint(PIdleSchedulerParent* aActor);
    bool
    BindPIdleSchedulerEndpoint(
            ManagedEndpoint<PIdleSchedulerParent> aEndpoint,
            PIdleSchedulerParent* aActor);

    ManagedEndpoint<PRemoteLazyInputStreamChild>
    OpenPRemoteLazyInputStreamEndpoint(PRemoteLazyInputStreamParent* aActor);
    bool
    BindPRemoteLazyInputStreamEndpoint(
            ManagedEndpoint<PRemoteLazyInputStreamParent> aEndpoint,
            PRemoteLazyInputStreamParent* aActor);

    ManagedEndpoint<PMediaTransportChild>
    OpenPMediaTransportEndpoint(PMediaTransportParent* aActor);
    bool
    BindPMediaTransportEndpoint(
            ManagedEndpoint<PMediaTransportParent> aEndpoint,
            PMediaTransportParent* aActor);

    ManagedEndpoint<PRemoteWorkerChild>
    OpenPRemoteWorkerEndpoint(PRemoteWorkerParent* aActor);
    bool
    BindPRemoteWorkerEndpoint(
            ManagedEndpoint<PRemoteWorkerParent> aEndpoint,
            PRemoteWorkerParent* aActor);

    ManagedEndpoint<PRemoteWorkerControllerChild>
    OpenPRemoteWorkerControllerEndpoint(PRemoteWorkerControllerParent* aActor);
    bool
    BindPRemoteWorkerControllerEndpoint(
            ManagedEndpoint<PRemoteWorkerControllerParent> aEndpoint,
            PRemoteWorkerControllerParent* aActor);

    ManagedEndpoint<PRemoteWorkerServiceChild>
    OpenPRemoteWorkerServiceEndpoint(PRemoteWorkerServiceParent* aActor);
    bool
    BindPRemoteWorkerServiceEndpoint(
            ManagedEndpoint<PRemoteWorkerServiceParent> aEndpoint,
            PRemoteWorkerServiceParent* aActor);

    ManagedEndpoint<PSharedWorkerChild>
    OpenPSharedWorkerEndpoint(PSharedWorkerParent* aActor);
    bool
    BindPSharedWorkerEndpoint(
            ManagedEndpoint<PSharedWorkerParent> aEndpoint,
            PSharedWorkerParent* aActor);

    ManagedEndpoint<PTemporaryIPCBlobChild>
    OpenPTemporaryIPCBlobEndpoint(PTemporaryIPCBlobParent* aActor);
    bool
    BindPTemporaryIPCBlobEndpoint(
            ManagedEndpoint<PTemporaryIPCBlobParent> aEndpoint,
            PTemporaryIPCBlobParent* aActor);

    ManagedEndpoint<PFileCreatorChild>
    OpenPFileCreatorEndpoint(PFileCreatorParent* aActor);
    bool
    BindPFileCreatorEndpoint(
            ManagedEndpoint<PFileCreatorParent> aEndpoint,
            PFileCreatorParent* aActor);

    ManagedEndpoint<PMessagePortChild>
    OpenPMessagePortEndpoint(PMessagePortParent* aActor);
    bool
    BindPMessagePortEndpoint(
            ManagedEndpoint<PMessagePortParent> aEndpoint,
            PMessagePortParent* aActor);

    ManagedEndpoint<PCamerasChild>
    OpenPCamerasEndpoint(PCamerasParent* aActor);
    bool
    BindPCamerasEndpoint(
            ManagedEndpoint<PCamerasParent> aEndpoint,
            PCamerasParent* aActor);

    ManagedEndpoint<PMIDIManagerChild>
    OpenPMIDIManagerEndpoint(PMIDIManagerParent* aActor);
    bool
    BindPMIDIManagerEndpoint(
            ManagedEndpoint<PMIDIManagerParent> aEndpoint,
            PMIDIManagerParent* aActor);

    ManagedEndpoint<PMIDIPortChild>
    OpenPMIDIPortEndpoint(PMIDIPortParent* aActor);
    bool
    BindPMIDIPortEndpoint(
            ManagedEndpoint<PMIDIPortParent> aEndpoint,
            PMIDIPortParent* aActor);

    ManagedEndpoint<PQuotaChild>
    OpenPQuotaEndpoint(PQuotaParent* aActor);
    bool
    BindPQuotaEndpoint(
            ManagedEndpoint<PQuotaParent> aEndpoint,
            PQuotaParent* aActor);

    ManagedEndpoint<PChildToParentStreamChild>
    OpenPChildToParentStreamEndpoint(PChildToParentStreamParent* aActor);
    bool
    BindPChildToParentStreamEndpoint(
            ManagedEndpoint<PChildToParentStreamParent> aEndpoint,
            PChildToParentStreamParent* aActor);

    ManagedEndpoint<PParentToChildStreamChild>
    OpenPParentToChildStreamEndpoint(PParentToChildStreamParent* aActor);
    bool
    BindPParentToChildStreamEndpoint(
            ManagedEndpoint<PParentToChildStreamParent> aEndpoint,
            PParentToChildStreamParent* aActor);

    ManagedEndpoint<PServiceWorkerChild>
    OpenPServiceWorkerEndpoint(PServiceWorkerParent* aActor);
    bool
    BindPServiceWorkerEndpoint(
            ManagedEndpoint<PServiceWorkerParent> aEndpoint,
            PServiceWorkerParent* aActor);

    ManagedEndpoint<PServiceWorkerContainerChild>
    OpenPServiceWorkerContainerEndpoint(PServiceWorkerContainerParent* aActor);
    bool
    BindPServiceWorkerContainerEndpoint(
            ManagedEndpoint<PServiceWorkerContainerParent> aEndpoint,
            PServiceWorkerContainerParent* aActor);

    ManagedEndpoint<PServiceWorkerManagerChild>
    OpenPServiceWorkerManagerEndpoint(PServiceWorkerManagerParent* aActor);
    bool
    BindPServiceWorkerManagerEndpoint(
            ManagedEndpoint<PServiceWorkerManagerParent> aEndpoint,
            PServiceWorkerManagerParent* aActor);

    ManagedEndpoint<PServiceWorkerRegistrationChild>
    OpenPServiceWorkerRegistrationEndpoint(PServiceWorkerRegistrationParent* aActor);
    bool
    BindPServiceWorkerRegistrationEndpoint(
            ManagedEndpoint<PServiceWorkerRegistrationParent> aEndpoint,
            PServiceWorkerRegistrationParent* aActor);

    ManagedEndpoint<PWebAuthnTransactionChild>
    OpenPWebAuthnTransactionEndpoint(PWebAuthnTransactionParent* aActor);
    bool
    BindPWebAuthnTransactionEndpoint(
            ManagedEndpoint<PWebAuthnTransactionParent> aEndpoint,
            PWebAuthnTransactionParent* aActor);

    ManagedEndpoint<PUDPSocketChild>
    OpenPUDPSocketEndpoint(PUDPSocketParent* aActor);
    bool
    BindPUDPSocketEndpoint(
            ManagedEndpoint<PUDPSocketParent> aEndpoint,
            PUDPSocketParent* aActor);

    ManagedEndpoint<PVerifySSLServerCertChild>
    OpenPVerifySSLServerCertEndpoint(PVerifySSLServerCertParent* aActor);
    bool
    BindPVerifySSLServerCertEndpoint(
            ManagedEndpoint<PVerifySSLServerCertParent> aEndpoint,
            PVerifySSLServerCertParent* aActor);

    ManagedEndpoint<PVsyncChild>
    OpenPVsyncEndpoint(PVsyncParent* aActor);
    bool
    BindPVsyncEndpoint(
            ManagedEndpoint<PVsyncParent> aEndpoint,
            PVsyncParent* aActor);

    [[nodiscard]] PCacheParent*
    SendPCacheConstructor();

    [[nodiscard]] PCacheParent*
    SendPCacheConstructor(PCacheParent* actor);

    [[nodiscard]] PCacheStreamControlParent*
    SendPCacheStreamControlConstructor(PCacheStreamControlParent* actor);

    [[nodiscard]] PParentToChildStreamParent*
    SendPParentToChildStreamConstructor();

    [[nodiscard]] PParentToChildStreamParent*
    SendPParentToChildStreamConstructor(PParentToChildStreamParent* actor);

    [[nodiscard]] PRemoteWorkerParent*
    SendPRemoteWorkerConstructor(const RemoteWorkerData& data);

    [[nodiscard]] PRemoteWorkerParent*
    SendPRemoteWorkerConstructor(
            PRemoteWorkerParent* actor,
            const RemoteWorkerData& data);

    [[nodiscard]] PRemoteLazyInputStreamParent*
    SendPRemoteLazyInputStreamConstructor(
            PRemoteLazyInputStreamParent* actor,
            const nsID& aID,
            const uint64_t& aSize);

    [[nodiscard]] PFileDescriptorSetParent*
    SendPFileDescriptorSetConstructor(const FileDescriptor& fd);

    [[nodiscard]] PFileDescriptorSetParent*
    SendPFileDescriptorSetConstructor(
            PFileDescriptorSetParent* actor,
            const FileDescriptor& fd);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PBackgroundDataBridgeParent> mManagedPBackgroundDataBridgeParent;
    ManagedContainer<PBackgroundIDBFactoryParent> mManagedPBackgroundIDBFactoryParent;
    ManagedContainer<PBackgroundIndexedDBUtilsParent> mManagedPBackgroundIndexedDBUtilsParent;
    ManagedContainer<PBackgroundSDBConnectionParent> mManagedPBackgroundSDBConnectionParent;
    ManagedContainer<PBackgroundLSDatabaseParent> mManagedPBackgroundLSDatabaseParent;
    ManagedContainer<PBackgroundLSObserverParent> mManagedPBackgroundLSObserverParent;
    ManagedContainer<PBackgroundLSRequestParent> mManagedPBackgroundLSRequestParent;
    ManagedContainer<PBackgroundLSSimpleRequestParent> mManagedPBackgroundLSSimpleRequestParent;
    ManagedContainer<PBackgroundLocalStorageCacheParent> mManagedPBackgroundLocalStorageCacheParent;
    ManagedContainer<PBackgroundSessionStorageManagerParent> mManagedPBackgroundSessionStorageManagerParent;
    ManagedContainer<PBackgroundStorageParent> mManagedPBackgroundStorageParent;
    ManagedContainer<PBackgroundTestParent> mManagedPBackgroundTestParent;
    ManagedContainer<PBroadcastChannelParent> mManagedPBroadcastChannelParent;
    ManagedContainer<PCacheParent> mManagedPCacheParent;
    ManagedContainer<PCacheStorageParent> mManagedPCacheStorageParent;
    ManagedContainer<PCacheStreamControlParent> mManagedPCacheStreamControlParent;
    ManagedContainer<PClientManagerParent> mManagedPClientManagerParent;
    ManagedContainer<PEndpointForReportParent> mManagedPEndpointForReportParent;
    ManagedContainer<PFileDescriptorSetParent> mManagedPFileDescriptorSetParent;
    ManagedContainer<PFileSystemRequestParent> mManagedPFileSystemRequestParent;
    ManagedContainer<PGamepadEventChannelParent> mManagedPGamepadEventChannelParent;
    ManagedContainer<PGamepadTestChannelParent> mManagedPGamepadTestChannelParent;
    ManagedContainer<PHttpBackgroundChannelParent> mManagedPHttpBackgroundChannelParent;
    ManagedContainer<PIdleSchedulerParent> mManagedPIdleSchedulerParent;
    ManagedContainer<PRemoteLazyInputStreamParent> mManagedPRemoteLazyInputStreamParent;
    ManagedContainer<PMediaTransportParent> mManagedPMediaTransportParent;
    ManagedContainer<PRemoteWorkerParent> mManagedPRemoteWorkerParent;
    ManagedContainer<PRemoteWorkerControllerParent> mManagedPRemoteWorkerControllerParent;
    ManagedContainer<PRemoteWorkerServiceParent> mManagedPRemoteWorkerServiceParent;
    ManagedContainer<PSharedWorkerParent> mManagedPSharedWorkerParent;
    ManagedContainer<PTemporaryIPCBlobParent> mManagedPTemporaryIPCBlobParent;
    ManagedContainer<PFileCreatorParent> mManagedPFileCreatorParent;
    ManagedContainer<PMessagePortParent> mManagedPMessagePortParent;
    ManagedContainer<PCamerasParent> mManagedPCamerasParent;
    ManagedContainer<PMIDIManagerParent> mManagedPMIDIManagerParent;
    ManagedContainer<PMIDIPortParent> mManagedPMIDIPortParent;
    ManagedContainer<PQuotaParent> mManagedPQuotaParent;
    ManagedContainer<PChildToParentStreamParent> mManagedPChildToParentStreamParent;
    ManagedContainer<PParentToChildStreamParent> mManagedPParentToChildStreamParent;
    ManagedContainer<PServiceWorkerParent> mManagedPServiceWorkerParent;
    ManagedContainer<PServiceWorkerContainerParent> mManagedPServiceWorkerContainerParent;
    ManagedContainer<PServiceWorkerManagerParent> mManagedPServiceWorkerManagerParent;
    ManagedContainer<PServiceWorkerRegistrationParent> mManagedPServiceWorkerRegistrationParent;
    ManagedContainer<PWebAuthnTransactionParent> mManagedPWebAuthnTransactionParent;
    ManagedContainer<PUDPSocketParent> mManagedPUDPSocketParent;
    ManagedContainer<PVerifySSLServerCertParent> mManagedPVerifySSLServerCertParent;
    ManagedContainer<PVsyncParent> mManagedPVsyncParent;
};


} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::ipc::PBackgroundParent*>
{
    typedef mozilla::ipc::PBackgroundParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundParent_h
