//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PIdleScheduler_h
#define PIdleScheduler_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace ipc {
class PIdleSchedulerParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PIdleSchedulerChild;
} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PIdleSchedulerChild and PIdleSchedulerParent
//
namespace mozilla {
namespace ipc {
namespace PIdleScheduler {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::ipc::PIdleSchedulerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::ipc::PIdleSchedulerChild>* aChild);

enum MessageType {
    PIdleSchedulerStart = PIdleSchedulerMsgStart << 16,
    Msg_IdleTime__ID,
    Msg_InitForIdleUse__ID,
    Reply_InitForIdleUse__ID,
    Msg_RequestIdleTime__ID,
    Msg_IdleTimeUsed__ID,
    Msg_Schedule__ID,
    Msg_RunningPrioritizedOperation__ID,
    Msg_PrioritizedOperationDone__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PIdleSchedulerEnd
};

IPC::Message*
Msg_IdleTime(int32_t routingId);

IPC::Message*
Msg_InitForIdleUse(int32_t routingId);
IPC::Message*
Reply_InitForIdleUse(int32_t routingId);

IPC::Message*
Msg_RequestIdleTime(int32_t routingId);

IPC::Message*
Msg_IdleTimeUsed(int32_t routingId);

IPC::Message*
Msg_Schedule(int32_t routingId);

IPC::Message*
Msg_RunningPrioritizedOperation(int32_t routingId);

IPC::Message*
Msg_PrioritizedOperationDone(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PIdleScheduler
} // namespace ipc
} // namespace mozilla

#endif // ifndef PIdleScheduler_h
