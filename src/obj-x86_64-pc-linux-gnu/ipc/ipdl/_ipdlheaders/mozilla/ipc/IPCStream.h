//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef IPCStream_h
#define IPCStream_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/BlobTypes.h"
#include "mozilla/ipc/InputStreamParams.h"
#include "mozilla/ipc/ProtocolTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IPCStream|
//
namespace mozilla {
namespace ipc {
class IPCStream final
{
private:
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;

public:
    MOZ_IMPLICIT IPCStream() :
        stream_(),
        optionalFds_()
    {
    }

    MOZ_IMPLICIT IPCStream(
            const InputStreamParams& _stream,
            const OptionalFileDescriptorSet& _optionalFds) :
        stream_(_stream),
        optionalFds_(_optionalFds)
    {
    }

    InputStreamParams&
    stream()
    {
        return stream_;
    }
    const InputStreamParams&
    stream() const
    {
        return stream_;
    }

    OptionalFileDescriptorSet&
    optionalFds()
    {
        return optionalFds_;
    }
    const OptionalFileDescriptorSet&
    optionalFds() const
    {
        return optionalFds_;
    }

private:
    InputStreamParams stream_;
    OptionalFileDescriptorSet optionalFds_;
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::ipc::IPCStream>
{
    typedef mozilla::ipc::IPCStream paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef IPCStream_h
