//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef ChannelInfo_h
#define ChannelInfo_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IPCChannelInfo|
//
namespace mozilla {
namespace ipc {
class IPCChannelInfo final
{
private:

public:
    MOZ_IMPLICIT IPCChannelInfo() :
        securityInfo_()
    {
    }

    MOZ_IMPLICIT IPCChannelInfo(const nsCString& _securityInfo) :
        securityInfo_(_securityInfo)
    {
    }

    nsCString&
    securityInfo()
    {
        return securityInfo_;
    }
    const nsCString&
    securityInfo() const
    {
        return securityInfo_;
    }

private:
    nsCString securityInfo_;
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::ipc::IPCChannelInfo>
{
    typedef mozilla::ipc::IPCChannelInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef ChannelInfo_h
