//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PFileDescriptorSetParent_h
#define PFileDescriptorSetParent_h

#include "mozilla/ipc/PFileDescriptorSet.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSocketProcessChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStorageParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBRequestParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PTemporaryIPCBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBCursorParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientHandleParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFetchEventOpParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpTransactionParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBroadcastChannelParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundFileHandleParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFetchEventOpProxyParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientSourceParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileCreatorParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFilePickerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMessagePortParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileSystemRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PWebBrowserPersistDocumentParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheOpParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerControllerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {


class PFileDescriptorSetParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::cache::PCacheStorageParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBRequestParent;
    friend class mozilla::dom::PClientManagerParent;
    friend class mozilla::dom::PTemporaryIPCBlobParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBCursorParent;
    friend class mozilla::dom::PClientHandleParent;
    friend class mozilla::dom::PFetchEventOpParent;
    friend class mozilla::net::PHttpTransactionParent;
    friend class mozilla::dom::cache::PCacheParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent;
    friend class mozilla::dom::PWindowGlobalParent;
    friend class mozilla::dom::PServiceWorkerParent;
    friend class mozilla::dom::PBroadcastChannelParent;
    friend class mozilla::dom::PBackgroundFileHandleParent;
    friend class mozilla::dom::PFetchEventOpProxyParent;
    friend class mozilla::net::PSocketProcessParent;
    friend class mozilla::dom::PClientSourceParent;
    friend class mozilla::dom::PFileCreatorParent;
    friend class mozilla::PRemoteLazyInputStreamParent;
    friend class mozilla::net::PUDPSocketParent;
    friend class mozilla::dom::PContentParent;
    friend class mozilla::dom::PFilePickerParent;
    friend class mozilla::net::PHttpChannelParent;
    friend class mozilla::dom::PBrowserParent;
    friend class mozilla::dom::PRemoteWorkerParent;
    friend class mozilla::dom::PMessagePortParent;
    friend class mozilla::dom::PFileSystemRequestParent;
    friend class mozilla::net::PNeckoParent;
    friend class mozilla::PWebBrowserPersistDocumentParent;
    friend class mozilla::dom::cache::PCacheOpParent;
    friend class mozilla::ipc::PBackgroundParent;
    friend class mozilla::dom::cache::PCacheStreamControlParent;
    friend class mozilla::dom::PRemoteWorkerControllerParent;
    friend class mozilla::net::PWebSocketParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::net::PSocketProcessParent PSocketProcessParent;
    typedef mozilla::net::PSocketProcessChild PSocketProcessChild;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PFileDescriptorSetParent();

    virtual ~PFileDescriptorSetParent();

public:
    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendAddFileDescriptor(const FileDescriptor& fd);

    [[nodiscard]] static bool
    Send__delete__(PFileDescriptorSetParent* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::ipc::PFileDescriptorSetParent*>
{
    typedef mozilla::ipc::PFileDescriptorSetParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PFileDescriptorSetParent_h
