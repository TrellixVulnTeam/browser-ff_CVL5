//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef ProtocolTypes_h
#define ProtocolTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ProtocolFdMapping|
//
namespace mozilla {
namespace ipc {
class ProtocolFdMapping final
{
private:
    typedef mozilla::ipc::FileDescriptor FileDescriptor;

public:
    MOZ_IMPLICIT ProtocolFdMapping() :
        fd_(),
        protocolId_()
    {
    }

    MOZ_IMPLICIT ProtocolFdMapping(
            const uint32_t& _protocolId,
            const FileDescriptor& _fd) :
        fd_(_fd),
        protocolId_(_protocolId)
    {
    }

    uint32_t&
    protocolId()
    {
        return protocolId_;
    }
    const uint32_t&
    protocolId() const
    {
        return protocolId_;
    }

    FileDescriptor&
    fd()
    {
        return fd_;
    }
    const FileDescriptor&
    fd() const
    {
        return const_cast<FileDescriptor&>(fd_);
    }

private:
    FileDescriptor fd_;
    uint32_t protocolId_;
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::ipc::ProtocolFdMapping>
{
    typedef mozilla::ipc::ProtocolFdMapping paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef ProtocolTypes_h
