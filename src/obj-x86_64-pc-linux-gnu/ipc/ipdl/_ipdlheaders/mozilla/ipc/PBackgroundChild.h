//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundChild_h
#define PBackgroundChild_h

#include "mozilla/ipc/PBackground.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/cache/Types.h"

namespace mozilla {
namespace net {
class PBackgroundDataBridgeChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PBackgroundDataBridgeParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBFactoryChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBFactoryParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIndexedDBUtilsChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIndexedDBUtilsParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSDBConnectionChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundSDBConnectionParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSObserverChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSObserverParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSRequestChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSSimpleRequestChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSSimpleRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLocalStorageCacheChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLocalStorageCacheParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSessionStorageManagerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundSessionStorageManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundStorageChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundStorageParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundTestChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundTestParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBroadcastChannelChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBroadcastChannelParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheChild;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStorageChild;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheStorageParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlChild;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientManagerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PClientManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PEndpointForReportChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PEndpointForReportParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileSystemRequestChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PFileSystemRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PGamepadEventChannelChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PGamepadEventChannelParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PGamepadTestChannelChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PGamepadTestChannelParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpBackgroundChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpBackgroundChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PIdleSchedulerChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PIdleSchedulerParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMediaTransportChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMediaTransportParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PRemoteWorkerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerControllerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PRemoteWorkerControllerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerServiceChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PRemoteWorkerServiceParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSharedWorkerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSharedWorkerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PTemporaryIPCBlobChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PTemporaryIPCBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileCreatorChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PFileCreatorParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMessagePortChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMessagePortParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace camera {
class PCamerasChild;
} // namespace camera
} // namespace mozilla
namespace mozilla {
namespace camera {
class PCamerasParent;
} // namespace camera
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMIDIManagerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMIDIManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMIDIPortChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMIDIPortParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaChild;
} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace quota {
class PQuotaParent;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerContainerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerContainerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerManagerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerRegistrationChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerRegistrationParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebAuthnTransactionChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWebAuthnTransactionParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PUDPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace psm {
class PVerifySSLServerCertChild;
} // namespace psm
} // namespace mozilla
namespace mozilla {
namespace psm {
class PVerifySSLServerCertParent;
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace dom {
class PVsyncChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PVsyncParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderManagerParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStorageChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PVsyncChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLocalStorageCacheChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PIdleSchedulerChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PClientManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundTestChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PTemporaryIPCBlobChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebAuthnTransactionChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaChild;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMediaTransportChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIndexedDBUtilsChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerServiceChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerRegistrationChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMIDIPortChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBroadcastChannelChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PBackgroundDataBridgeChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PGamepadTestChannelChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSharedWorkerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileCreatorChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundStorageChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMIDIManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpBackgroundChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PEndpointForReportChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace camera {
class PCamerasChild;
} // namespace camera
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSObserverChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSDBConnectionChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PGamepadEventChannelChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PMessagePortChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFileSystemRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerContainerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSSimpleRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSessionStorageManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace psm {
class PVerifySSLServerCertChild;
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBFactoryChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PRemoteWorkerControllerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {


class PBackgroundChild :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::dom::cache::PCacheStorageChild;
    friend class mozilla::dom::PVsyncChild;
    friend class mozilla::dom::PBackgroundLocalStorageCacheChild;
    friend class mozilla::ipc::PIdleSchedulerChild;
    friend class mozilla::dom::PClientManagerChild;
    friend class mozilla::ipc::PBackgroundTestChild;
    friend class mozilla::dom::PTemporaryIPCBlobChild;
    friend class mozilla::dom::PWebAuthnTransactionChild;
    friend class mozilla::dom::quota::PQuotaChild;
    friend class mozilla::dom::PMediaTransportChild;
    friend class mozilla::dom::indexedDB::PBackgroundIndexedDBUtilsChild;
    friend class mozilla::dom::PBackgroundLSDatabaseChild;
    friend class mozilla::dom::PRemoteWorkerServiceChild;
    friend class mozilla::dom::cache::PCacheChild;
    friend class mozilla::dom::PServiceWorkerRegistrationChild;
    friend class mozilla::ipc::PFileDescriptorSetChild;
    friend class mozilla::dom::PMIDIPortChild;
    friend class mozilla::dom::PServiceWorkerChild;
    friend class mozilla::dom::PBroadcastChannelChild;
    friend class mozilla::net::PBackgroundDataBridgeChild;
    friend class mozilla::dom::PGamepadTestChannelChild;
    friend class mozilla::dom::PSharedWorkerChild;
    friend class mozilla::dom::PFileCreatorChild;
    friend class mozilla::PRemoteLazyInputStreamChild;
    friend class mozilla::dom::PBackgroundStorageChild;
    friend class mozilla::net::PUDPSocketChild;
    friend class mozilla::dom::PMIDIManagerChild;
    friend class mozilla::net::PHttpBackgroundChannelChild;
    friend class mozilla::dom::PEndpointForReportChild;
    friend class mozilla::camera::PCamerasChild;
    friend class mozilla::dom::PRemoteWorkerChild;
    friend class mozilla::dom::PBackgroundLSObserverChild;
    friend class mozilla::dom::PBackgroundSDBConnectionChild;
    friend class mozilla::dom::PGamepadEventChannelChild;
    friend class mozilla::dom::PMessagePortChild;
    friend class mozilla::dom::PFileSystemRequestChild;
    friend class mozilla::dom::PServiceWorkerContainerChild;
    friend class mozilla::dom::PBackgroundLSSimpleRequestChild;
    friend class mozilla::dom::PBackgroundSessionStorageManagerChild;
    friend class mozilla::ipc::PChildToParentStreamChild;
    friend class mozilla::ipc::PParentToChildStreamChild;
    friend class mozilla::psm::PVerifySSLServerCertChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBFactoryChild;
    friend class mozilla::dom::PServiceWorkerManagerChild;
    friend class mozilla::dom::PBackgroundLSRequestChild;
    friend class mozilla::dom::cache::PCacheStreamControlChild;
    friend class mozilla::dom::PRemoteWorkerControllerChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::indexedDB::BlobOrMutableFile BlobOrMutableFile;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::psm::ByteArray ByteArray;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::dom::indexedDB::CommonIndexOpenCursorParams CommonIndexOpenCursorParams;
    typedef mozilla::dom::indexedDB::CommonOpenCursorParams CommonOpenCursorParams;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::psm::DataStorageEntry DataStorageEntry;
    typedef mozilla::psm::DataStorageItem DataStorageItem;
    typedef mozilla::DataStorageType DataStorageType;
    typedef mozilla::dom::indexedDB::DatabaseMetadata DatabaseMetadata;
    typedef mozilla::dom::indexedDB::DatabaseOrMutableFile DatabaseOrMutableFile;
    typedef mozilla::dom::indexedDB::DatabaseSpec DatabaseSpec;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::psm::DelegatedCredentialInfoArg DelegatedCredentialInfoArg;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::dom::IDBCursor::Direction Direction;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorData ErrorData;
    typedef mozilla::dom::ErrorDataNote ErrorDataNote;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::dom::ErrorValue ErrorValue;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::dom::indexedDB::FileAddInfo FileAddInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FileSystemGetDirectoryListingParams FileSystemGetDirectoryListingParams;
    typedef mozilla::dom::FileSystemGetFileOrDirectoryParams FileSystemGetFileOrDirectoryParams;
    typedef mozilla::dom::FileSystemGetFilesParams FileSystemGetFilesParams;
    typedef mozilla::dom::FileSystemParams FileSystemParams;
    typedef mozilla::dom::indexedDB::StructuredCloneFileBase::FileType FileType;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::dom::IPCServiceWorkerRegistrationDescriptor IPCServiceWorkerRegistrationDescriptor;
    typedef mozilla::dom::IPCServiceWorkerRegistrationDescriptorList IPCServiceWorkerRegistrationDescriptorList;
    typedef mozilla::dom::IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult;
    typedef mozilla::dom::IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::dom::indexedDB::IndexCountParams IndexCountParams;
    typedef mozilla::dom::indexedDB::IndexGetAllKeysParams IndexGetAllKeysParams;
    typedef mozilla::dom::indexedDB::IndexGetAllParams IndexGetAllParams;
    typedef mozilla::dom::indexedDB::IndexGetKeyParams IndexGetKeyParams;
    typedef mozilla::dom::indexedDB::IndexGetParams IndexGetParams;
    typedef mozilla::dom::indexedDB::IndexMetadata IndexMetadata;
    typedef mozilla::dom::indexedDB::IndexOpenCursorParams IndexOpenCursorParams;
    typedef mozilla::dom::indexedDB::IndexOpenKeyCursorParams IndexOpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::IndexUpdateInfo IndexUpdateInfo;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::dom::indexedDB::Key Key;
    typedef mozilla::dom::indexedDB::KeyPath KeyPath;
    typedef mozilla::dom::LSItemInfo LSItemInfo;
    typedef mozilla::dom::LSRequestCommonParams LSRequestCommonParams;
    typedef mozilla::dom::LSRequestParams LSRequestParams;
    typedef mozilla::dom::LSRequestPreloadDatastoreParams LSRequestPreloadDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareDatastoreParams LSRequestPrepareDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareObserverParams LSRequestPrepareObserverParams;
    typedef mozilla::dom::LSSimpleRequestParams LSSimpleRequestParams;
    typedef mozilla::dom::LSSimpleRequestPreloadedParams LSSimpleRequestPreloadedParams;
    typedef mozilla::dom::LSValue LSValue;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::dom::indexedDB::LoggingInfo LoggingInfo;
    typedef mozilla::dom::MIDIMessage MIDIMessage;
    typedef mozilla::dom::MIDIPortInfo MIDIPortInfo;
    typedef mozilla::dom::MIDIPortList MIDIPortList;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::dom::cache::Namespace Namespace;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::indexedDB::ObjectStoreAddParams ObjectStoreAddParams;
    typedef mozilla::dom::indexedDB::ObjectStoreAddPutParams ObjectStoreAddPutParams;
    typedef mozilla::dom::indexedDB::ObjectStoreClearParams ObjectStoreClearParams;
    typedef mozilla::dom::indexedDB::ObjectStoreCountParams ObjectStoreCountParams;
    typedef mozilla::dom::indexedDB::ObjectStoreDeleteParams ObjectStoreDeleteParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllKeysParams ObjectStoreGetAllKeysParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllParams ObjectStoreGetAllParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetKeyParams ObjectStoreGetKeyParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetParams ObjectStoreGetParams;
    typedef mozilla::dom::indexedDB::ObjectStoreMetadata ObjectStoreMetadata;
    typedef mozilla::dom::indexedDB::ObjectStoreOpenCursorParams ObjectStoreOpenCursorParams;
    typedef mozilla::dom::indexedDB::ObjectStoreOpenKeyCursorParams ObjectStoreOpenKeyCursorParams;
    typedef mozilla::dom::indexedDB::ObjectStorePutParams ObjectStorePutParams;
    typedef mozilla::dom::indexedDB::ObjectStoreSpec ObjectStoreSpec;
    typedef mozilla::dom::indexedDB::OpenCursorParams OpenCursorParams;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::dom::OptionalServiceWorkerData OptionalServiceWorkerData;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::dom::quota::PersistenceType PersistenceType;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::RemoteWorkerData RemoteWorkerData;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::dom::indexedDB::RequestParams RequestParams;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::dom::indexedDB::SerializedKeyRange SerializedKeyRange;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneFile SerializedStructuredCloneFile;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo SerializedStructuredCloneWriteInfo;
    typedef mozilla::dom::ServiceWorkerData ServiceWorkerData;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::net::PBackgroundDataBridgeChild PBackgroundDataBridgeChild;
    typedef mozilla::net::PBackgroundDataBridgeParent PBackgroundDataBridgeParent;
    typedef mozilla::dom::indexedDB::PBackgroundIDBFactoryChild PBackgroundIDBFactoryChild;
    typedef mozilla::dom::indexedDB::PBackgroundIDBFactoryParent PBackgroundIDBFactoryParent;
    typedef mozilla::dom::indexedDB::PBackgroundIndexedDBUtilsChild PBackgroundIndexedDBUtilsChild;
    typedef mozilla::dom::indexedDB::PBackgroundIndexedDBUtilsParent PBackgroundIndexedDBUtilsParent;
    typedef mozilla::dom::PBackgroundSDBConnectionChild PBackgroundSDBConnectionChild;
    typedef mozilla::dom::PBackgroundSDBConnectionParent PBackgroundSDBConnectionParent;
    typedef mozilla::dom::PBackgroundLSDatabaseChild PBackgroundLSDatabaseChild;
    typedef mozilla::dom::PBackgroundLSDatabaseParent PBackgroundLSDatabaseParent;
    typedef mozilla::dom::PBackgroundLSObserverChild PBackgroundLSObserverChild;
    typedef mozilla::dom::PBackgroundLSObserverParent PBackgroundLSObserverParent;
    typedef mozilla::dom::PBackgroundLSRequestChild PBackgroundLSRequestChild;
    typedef mozilla::dom::PBackgroundLSRequestParent PBackgroundLSRequestParent;
    typedef mozilla::dom::PBackgroundLSSimpleRequestChild PBackgroundLSSimpleRequestChild;
    typedef mozilla::dom::PBackgroundLSSimpleRequestParent PBackgroundLSSimpleRequestParent;
    typedef mozilla::dom::PBackgroundLocalStorageCacheChild PBackgroundLocalStorageCacheChild;
    typedef mozilla::dom::PBackgroundLocalStorageCacheParent PBackgroundLocalStorageCacheParent;
    typedef mozilla::dom::PBackgroundSessionStorageManagerChild PBackgroundSessionStorageManagerChild;
    typedef mozilla::dom::PBackgroundSessionStorageManagerParent PBackgroundSessionStorageManagerParent;
    typedef mozilla::dom::PBackgroundStorageChild PBackgroundStorageChild;
    typedef mozilla::dom::PBackgroundStorageParent PBackgroundStorageParent;
    typedef mozilla::ipc::PBackgroundTestChild PBackgroundTestChild;
    typedef mozilla::ipc::PBackgroundTestParent PBackgroundTestParent;
    typedef mozilla::dom::PBroadcastChannelChild PBroadcastChannelChild;
    typedef mozilla::dom::PBroadcastChannelParent PBroadcastChannelParent;
    typedef mozilla::dom::cache::PCacheChild PCacheChild;
    typedef mozilla::dom::cache::PCacheParent PCacheParent;
    typedef mozilla::dom::cache::PCacheStorageChild PCacheStorageChild;
    typedef mozilla::dom::cache::PCacheStorageParent PCacheStorageParent;
    typedef mozilla::dom::cache::PCacheStreamControlChild PCacheStreamControlChild;
    typedef mozilla::dom::cache::PCacheStreamControlParent PCacheStreamControlParent;
    typedef mozilla::dom::PClientManagerChild PClientManagerChild;
    typedef mozilla::dom::PClientManagerParent PClientManagerParent;
    typedef mozilla::dom::PEndpointForReportChild PEndpointForReportChild;
    typedef mozilla::dom::PEndpointForReportParent PEndpointForReportParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::dom::PFileSystemRequestChild PFileSystemRequestChild;
    typedef mozilla::dom::PFileSystemRequestParent PFileSystemRequestParent;
    typedef mozilla::dom::PGamepadEventChannelChild PGamepadEventChannelChild;
    typedef mozilla::dom::PGamepadEventChannelParent PGamepadEventChannelParent;
    typedef mozilla::dom::PGamepadTestChannelChild PGamepadTestChannelChild;
    typedef mozilla::dom::PGamepadTestChannelParent PGamepadTestChannelParent;
    typedef mozilla::net::PHttpBackgroundChannelChild PHttpBackgroundChannelChild;
    typedef mozilla::net::PHttpBackgroundChannelParent PHttpBackgroundChannelParent;
    typedef mozilla::ipc::PIdleSchedulerChild PIdleSchedulerChild;
    typedef mozilla::ipc::PIdleSchedulerParent PIdleSchedulerParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;
    typedef mozilla::dom::PMediaTransportChild PMediaTransportChild;
    typedef mozilla::dom::PMediaTransportParent PMediaTransportParent;
    typedef mozilla::dom::PRemoteWorkerChild PRemoteWorkerChild;
    typedef mozilla::dom::PRemoteWorkerParent PRemoteWorkerParent;
    typedef mozilla::dom::PRemoteWorkerControllerChild PRemoteWorkerControllerChild;
    typedef mozilla::dom::PRemoteWorkerControllerParent PRemoteWorkerControllerParent;
    typedef mozilla::dom::PRemoteWorkerServiceChild PRemoteWorkerServiceChild;
    typedef mozilla::dom::PRemoteWorkerServiceParent PRemoteWorkerServiceParent;
    typedef mozilla::dom::PSharedWorkerChild PSharedWorkerChild;
    typedef mozilla::dom::PSharedWorkerParent PSharedWorkerParent;
    typedef mozilla::dom::PTemporaryIPCBlobChild PTemporaryIPCBlobChild;
    typedef mozilla::dom::PTemporaryIPCBlobParent PTemporaryIPCBlobParent;
    typedef mozilla::dom::PFileCreatorChild PFileCreatorChild;
    typedef mozilla::dom::PFileCreatorParent PFileCreatorParent;
    typedef mozilla::dom::PMessagePortChild PMessagePortChild;
    typedef mozilla::dom::PMessagePortParent PMessagePortParent;
    typedef mozilla::camera::PCamerasChild PCamerasChild;
    typedef mozilla::camera::PCamerasParent PCamerasParent;
    typedef mozilla::dom::PMIDIManagerChild PMIDIManagerChild;
    typedef mozilla::dom::PMIDIManagerParent PMIDIManagerParent;
    typedef mozilla::dom::PMIDIPortChild PMIDIPortChild;
    typedef mozilla::dom::PMIDIPortParent PMIDIPortParent;
    typedef mozilla::dom::quota::PQuotaChild PQuotaChild;
    typedef mozilla::dom::quota::PQuotaParent PQuotaParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::dom::PServiceWorkerChild PServiceWorkerChild;
    typedef mozilla::dom::PServiceWorkerParent PServiceWorkerParent;
    typedef mozilla::dom::PServiceWorkerContainerChild PServiceWorkerContainerChild;
    typedef mozilla::dom::PServiceWorkerContainerParent PServiceWorkerContainerParent;
    typedef mozilla::dom::PServiceWorkerManagerChild PServiceWorkerManagerChild;
    typedef mozilla::dom::PServiceWorkerManagerParent PServiceWorkerManagerParent;
    typedef mozilla::dom::PServiceWorkerRegistrationChild PServiceWorkerRegistrationChild;
    typedef mozilla::dom::PServiceWorkerRegistrationParent PServiceWorkerRegistrationParent;
    typedef mozilla::dom::PWebAuthnTransactionChild PWebAuthnTransactionChild;
    typedef mozilla::dom::PWebAuthnTransactionParent PWebAuthnTransactionParent;
    typedef mozilla::net::PUDPSocketChild PUDPSocketChild;
    typedef mozilla::net::PUDPSocketParent PUDPSocketParent;
    typedef mozilla::psm::PVerifySSLServerCertChild PVerifySSLServerCertChild;
    typedef mozilla::psm::PVerifySSLServerCertParent PVerifySSLServerCertParent;
    typedef mozilla::dom::PVsyncChild PVsyncChild;
    typedef mozilla::dom::PVsyncParent PVsyncParent;
    typedef mozilla::PRemoteDecoderManagerChild PRemoteDecoderManagerChild;
    typedef mozilla::PRemoteDecoderManagerParent PRemoteDecoderManagerParent;

public:
    typedef MozPromise<Tuple<nsresult, Endpoint<mozilla::PRemoteDecoderManagerChild>>, ResponseRejectReason, true> EnsureRDDProcessAndCreateBridgePromise;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPCacheConstructor(PCacheChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPCacheStreamControlConstructor(PCacheStreamControlChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPParentToChildStreamConstructor(PParentToChildStreamChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPRemoteWorkerConstructor(
            PRemoteWorkerChild* actor,
            const RemoteWorkerData& data);
    virtual mozilla::ipc::IPCResult
    RecvPRemoteLazyInputStreamConstructor(
            PRemoteLazyInputStreamChild* actor,
            const nsID& aID,
            const uint64_t& aSize);
    virtual mozilla::ipc::IPCResult
    RecvPFileDescriptorSetConstructor(
            PFileDescriptorSetChild* actor,
            const FileDescriptor& fd);
    virtual PBackgroundTestChild*
    AllocPBackgroundTestChild(const nsCString& testArg) = 0;
    virtual PBackgroundIndexedDBUtilsChild*
    AllocPBackgroundIndexedDBUtilsChild() = 0;
    virtual PBackgroundSDBConnectionChild*
    AllocPBackgroundSDBConnectionChild(
            const PersistenceType& persistenceType,
            const PrincipalInfo& principalInfo) = 0;
    virtual PBackgroundLSDatabaseChild*
    AllocPBackgroundLSDatabaseChild(
            const PrincipalInfo& principalInfo,
            const uint32_t& privateBrowsingId,
            const uint64_t& datastoreId) = 0;
    virtual PBackgroundLSObserverChild*
    AllocPBackgroundLSObserverChild(const uint64_t& observerId) = 0;
    virtual PBackgroundLSRequestChild*
    AllocPBackgroundLSRequestChild(const LSRequestParams& params) = 0;
    virtual PBackgroundLSSimpleRequestChild*
    AllocPBackgroundLSSimpleRequestChild(const LSSimpleRequestParams& params) = 0;
    virtual PBackgroundLocalStorageCacheChild*
    AllocPBackgroundLocalStorageCacheChild(
            const PrincipalInfo& principalInfo,
            const nsCString& originKey,
            const uint32_t& privateBrowsingId) = 0;
    virtual PBackgroundStorageChild*
    AllocPBackgroundStorageChild(
            const nsString& profilePath,
            const uint32_t& privateBrowsingId) = 0;
    virtual PVsyncChild*
    AllocPVsyncChild() = 0;
    virtual PCamerasChild*
    AllocPCamerasChild() = 0;
    virtual PUDPSocketChild*
    AllocPUDPSocketChild(
            const mozilla::Maybe<PrincipalInfo>& pInfo,
            const nsCString& filter) = 0;
    virtual PBroadcastChannelChild*
    AllocPBroadcastChannelChild(
            const PrincipalInfo& pInfo,
            const nsCString& origin,
            const nsString& channel) = 0;
    virtual PServiceWorkerManagerChild*
    AllocPServiceWorkerManagerChild() = 0;
    virtual PCacheStorageChild*
    AllocPCacheStorageChild(
            const Namespace& aNamespace,
            const PrincipalInfo& aPrincipalInfo) = 0;
    virtual PMessagePortChild*
    AllocPMessagePortChild(
            const nsID& uuid,
            const nsID& destinationUuid,
            const uint32_t& sequenceId) = 0;
    virtual PChildToParentStreamChild*
    AllocPChildToParentStreamChild() = 0;
    virtual PQuotaChild*
    AllocPQuotaChild() = 0;
    virtual PWebAuthnTransactionChild*
    AllocPWebAuthnTransactionChild() = 0;
    virtual PSharedWorkerChild*
    AllocPSharedWorkerChild(
            const RemoteWorkerData& data,
            const uint64_t& windowID,
            const MessagePortIdentifier& portIdentifier) = 0;
    virtual PTemporaryIPCBlobChild*
    AllocPTemporaryIPCBlobChild() = 0;
    virtual PFileCreatorChild*
    AllocPFileCreatorChild(
            const nsString& aFullPath,
            const nsString& aType,
            const nsString& aName,
            const mozilla::Maybe<int64_t>& lastModified,
            const bool& aExistenceCheck,
            const bool& aIsFromNsIFile) = 0;
    virtual PClientManagerChild*
    AllocPClientManagerChild() = 0;
    virtual PMIDIManagerChild*
    AllocPMIDIManagerChild() = 0;
    virtual PMIDIPortChild*
    AllocPMIDIPortChild(
            const MIDIPortInfo& portInfo,
            const bool& sysexEnabled) = 0;
    virtual PRemoteWorkerControllerChild*
    AllocPRemoteWorkerControllerChild(const RemoteWorkerData& aData) = 0;
    virtual PRemoteWorkerServiceChild*
    AllocPRemoteWorkerServiceChild() = 0;
    virtual PEndpointForReportChild*
    AllocPEndpointForReportChild(
            const nsString& aGroupName,
            const PrincipalInfo& aPrincipalInfo) = 0;
    virtual PMediaTransportChild*
    AllocPMediaTransportChild() = 0;
    virtual PCacheChild*
    AllocPCacheChild() = 0;
    virtual already_AddRefed<PCacheStreamControlChild>
    AllocPCacheStreamControlChild() = 0;
    virtual PParentToChildStreamChild*
    AllocPParentToChildStreamChild() = 0;
    virtual PRemoteWorkerChild*
    AllocPRemoteWorkerChild(const RemoteWorkerData& data) = 0;
    virtual already_AddRefed<PRemoteLazyInputStreamChild>
    AllocPRemoteLazyInputStreamChild(
            const nsID& aID,
            const uint64_t& aSize) = 0;
    virtual PFileDescriptorSetChild*
    AllocPFileDescriptorSetChild(const FileDescriptor& fd) = 0;
    virtual bool
    DeallocPBackgroundIndexedDBUtilsChild(PBackgroundIndexedDBUtilsChild* aActor) = 0;
    virtual bool
    DeallocPBackgroundSDBConnectionChild(PBackgroundSDBConnectionChild* aActor) = 0;
    virtual bool
    DeallocPBackgroundLSDatabaseChild(PBackgroundLSDatabaseChild* aActor) = 0;
    virtual bool
    DeallocPBackgroundLSObserverChild(PBackgroundLSObserverChild* aActor) = 0;
    virtual bool
    DeallocPBackgroundLSRequestChild(PBackgroundLSRequestChild* aActor) = 0;
    virtual bool
    DeallocPBackgroundLSSimpleRequestChild(PBackgroundLSSimpleRequestChild* aActor) = 0;
    virtual bool
    DeallocPBackgroundLocalStorageCacheChild(PBackgroundLocalStorageCacheChild* aActor) = 0;
    virtual bool
    DeallocPBackgroundStorageChild(PBackgroundStorageChild* aActor) = 0;
    virtual bool
    DeallocPBackgroundTestChild(PBackgroundTestChild* aActor) = 0;
    virtual bool
    DeallocPBroadcastChannelChild(PBroadcastChannelChild* aActor) = 0;
    virtual bool
    DeallocPCacheChild(PCacheChild* aActor) = 0;
    virtual bool
    DeallocPCacheStorageChild(PCacheStorageChild* aActor) = 0;
    virtual bool
    DeallocPClientManagerChild(PClientManagerChild* aActor) = 0;
    virtual bool
    DeallocPEndpointForReportChild(PEndpointForReportChild* aActor) = 0;
    virtual bool
    DeallocPFileDescriptorSetChild(PFileDescriptorSetChild* aActor) = 0;
    virtual bool
    DeallocPMediaTransportChild(PMediaTransportChild* aActor) = 0;
    virtual bool
    DeallocPRemoteWorkerChild(PRemoteWorkerChild* aActor) = 0;
    virtual bool
    DeallocPRemoteWorkerControllerChild(PRemoteWorkerControllerChild* aActor) = 0;
    virtual bool
    DeallocPRemoteWorkerServiceChild(PRemoteWorkerServiceChild* aActor) = 0;
    virtual bool
    DeallocPSharedWorkerChild(PSharedWorkerChild* aActor) = 0;
    virtual bool
    DeallocPTemporaryIPCBlobChild(PTemporaryIPCBlobChild* aActor) = 0;
    virtual bool
    DeallocPFileCreatorChild(PFileCreatorChild* aActor) = 0;
    virtual bool
    DeallocPMessagePortChild(PMessagePortChild* aActor) = 0;
    virtual bool
    DeallocPCamerasChild(PCamerasChild* aActor) = 0;
    virtual bool
    DeallocPMIDIManagerChild(PMIDIManagerChild* aActor) = 0;
    virtual bool
    DeallocPMIDIPortChild(PMIDIPortChild* aActor) = 0;
    virtual bool
    DeallocPQuotaChild(PQuotaChild* aActor) = 0;
    virtual bool
    DeallocPChildToParentStreamChild(PChildToParentStreamChild* aActor) = 0;
    virtual bool
    DeallocPParentToChildStreamChild(PParentToChildStreamChild* aActor) = 0;
    virtual bool
    DeallocPServiceWorkerManagerChild(PServiceWorkerManagerChild* aActor) = 0;
    virtual bool
    DeallocPWebAuthnTransactionChild(PWebAuthnTransactionChild* aActor) = 0;
    virtual bool
    DeallocPUDPSocketChild(PUDPSocketChild* aActor) = 0;
    virtual bool
    DeallocPVsyncChild(PVsyncChild* aActor) = 0;
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBackgroundChild();

    virtual ~PBackgroundChild();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    void
    ManagedPBackgroundDataBridgeChild(nsTArray<PBackgroundDataBridgeChild*>& aArr) const;
    const ManagedContainer<PBackgroundDataBridgeChild>&
    ManagedPBackgroundDataBridgeChild() const;

    void
    ManagedPBackgroundIDBFactoryChild(nsTArray<PBackgroundIDBFactoryChild*>& aArr) const;
    const ManagedContainer<PBackgroundIDBFactoryChild>&
    ManagedPBackgroundIDBFactoryChild() const;

    void
    ManagedPBackgroundIndexedDBUtilsChild(nsTArray<PBackgroundIndexedDBUtilsChild*>& aArr) const;
    const ManagedContainer<PBackgroundIndexedDBUtilsChild>&
    ManagedPBackgroundIndexedDBUtilsChild() const;

    void
    ManagedPBackgroundSDBConnectionChild(nsTArray<PBackgroundSDBConnectionChild*>& aArr) const;
    const ManagedContainer<PBackgroundSDBConnectionChild>&
    ManagedPBackgroundSDBConnectionChild() const;

    void
    ManagedPBackgroundLSDatabaseChild(nsTArray<PBackgroundLSDatabaseChild*>& aArr) const;
    const ManagedContainer<PBackgroundLSDatabaseChild>&
    ManagedPBackgroundLSDatabaseChild() const;

    void
    ManagedPBackgroundLSObserverChild(nsTArray<PBackgroundLSObserverChild*>& aArr) const;
    const ManagedContainer<PBackgroundLSObserverChild>&
    ManagedPBackgroundLSObserverChild() const;

    void
    ManagedPBackgroundLSRequestChild(nsTArray<PBackgroundLSRequestChild*>& aArr) const;
    const ManagedContainer<PBackgroundLSRequestChild>&
    ManagedPBackgroundLSRequestChild() const;

    void
    ManagedPBackgroundLSSimpleRequestChild(nsTArray<PBackgroundLSSimpleRequestChild*>& aArr) const;
    const ManagedContainer<PBackgroundLSSimpleRequestChild>&
    ManagedPBackgroundLSSimpleRequestChild() const;

    void
    ManagedPBackgroundLocalStorageCacheChild(nsTArray<PBackgroundLocalStorageCacheChild*>& aArr) const;
    const ManagedContainer<PBackgroundLocalStorageCacheChild>&
    ManagedPBackgroundLocalStorageCacheChild() const;

    void
    ManagedPBackgroundSessionStorageManagerChild(nsTArray<PBackgroundSessionStorageManagerChild*>& aArr) const;
    const ManagedContainer<PBackgroundSessionStorageManagerChild>&
    ManagedPBackgroundSessionStorageManagerChild() const;

    void
    ManagedPBackgroundStorageChild(nsTArray<PBackgroundStorageChild*>& aArr) const;
    const ManagedContainer<PBackgroundStorageChild>&
    ManagedPBackgroundStorageChild() const;

    void
    ManagedPBackgroundTestChild(nsTArray<PBackgroundTestChild*>& aArr) const;
    const ManagedContainer<PBackgroundTestChild>&
    ManagedPBackgroundTestChild() const;

    void
    ManagedPBroadcastChannelChild(nsTArray<PBroadcastChannelChild*>& aArr) const;
    const ManagedContainer<PBroadcastChannelChild>&
    ManagedPBroadcastChannelChild() const;

    void
    ManagedPCacheChild(nsTArray<PCacheChild*>& aArr) const;
    const ManagedContainer<PCacheChild>&
    ManagedPCacheChild() const;

    void
    ManagedPCacheStorageChild(nsTArray<PCacheStorageChild*>& aArr) const;
    const ManagedContainer<PCacheStorageChild>&
    ManagedPCacheStorageChild() const;

    void
    ManagedPCacheStreamControlChild(nsTArray<PCacheStreamControlChild*>& aArr) const;
    const ManagedContainer<PCacheStreamControlChild>&
    ManagedPCacheStreamControlChild() const;

    void
    ManagedPClientManagerChild(nsTArray<PClientManagerChild*>& aArr) const;
    const ManagedContainer<PClientManagerChild>&
    ManagedPClientManagerChild() const;

    void
    ManagedPEndpointForReportChild(nsTArray<PEndpointForReportChild*>& aArr) const;
    const ManagedContainer<PEndpointForReportChild>&
    ManagedPEndpointForReportChild() const;

    void
    ManagedPFileDescriptorSetChild(nsTArray<PFileDescriptorSetChild*>& aArr) const;
    const ManagedContainer<PFileDescriptorSetChild>&
    ManagedPFileDescriptorSetChild() const;

    void
    ManagedPFileSystemRequestChild(nsTArray<PFileSystemRequestChild*>& aArr) const;
    const ManagedContainer<PFileSystemRequestChild>&
    ManagedPFileSystemRequestChild() const;

    void
    ManagedPGamepadEventChannelChild(nsTArray<PGamepadEventChannelChild*>& aArr) const;
    const ManagedContainer<PGamepadEventChannelChild>&
    ManagedPGamepadEventChannelChild() const;

    void
    ManagedPGamepadTestChannelChild(nsTArray<PGamepadTestChannelChild*>& aArr) const;
    const ManagedContainer<PGamepadTestChannelChild>&
    ManagedPGamepadTestChannelChild() const;

    void
    ManagedPHttpBackgroundChannelChild(nsTArray<PHttpBackgroundChannelChild*>& aArr) const;
    const ManagedContainer<PHttpBackgroundChannelChild>&
    ManagedPHttpBackgroundChannelChild() const;

    void
    ManagedPIdleSchedulerChild(nsTArray<PIdleSchedulerChild*>& aArr) const;
    const ManagedContainer<PIdleSchedulerChild>&
    ManagedPIdleSchedulerChild() const;

    void
    ManagedPRemoteLazyInputStreamChild(nsTArray<PRemoteLazyInputStreamChild*>& aArr) const;
    const ManagedContainer<PRemoteLazyInputStreamChild>&
    ManagedPRemoteLazyInputStreamChild() const;

    void
    ManagedPMediaTransportChild(nsTArray<PMediaTransportChild*>& aArr) const;
    const ManagedContainer<PMediaTransportChild>&
    ManagedPMediaTransportChild() const;

    void
    ManagedPRemoteWorkerChild(nsTArray<PRemoteWorkerChild*>& aArr) const;
    const ManagedContainer<PRemoteWorkerChild>&
    ManagedPRemoteWorkerChild() const;

    void
    ManagedPRemoteWorkerControllerChild(nsTArray<PRemoteWorkerControllerChild*>& aArr) const;
    const ManagedContainer<PRemoteWorkerControllerChild>&
    ManagedPRemoteWorkerControllerChild() const;

    void
    ManagedPRemoteWorkerServiceChild(nsTArray<PRemoteWorkerServiceChild*>& aArr) const;
    const ManagedContainer<PRemoteWorkerServiceChild>&
    ManagedPRemoteWorkerServiceChild() const;

    void
    ManagedPSharedWorkerChild(nsTArray<PSharedWorkerChild*>& aArr) const;
    const ManagedContainer<PSharedWorkerChild>&
    ManagedPSharedWorkerChild() const;

    void
    ManagedPTemporaryIPCBlobChild(nsTArray<PTemporaryIPCBlobChild*>& aArr) const;
    const ManagedContainer<PTemporaryIPCBlobChild>&
    ManagedPTemporaryIPCBlobChild() const;

    void
    ManagedPFileCreatorChild(nsTArray<PFileCreatorChild*>& aArr) const;
    const ManagedContainer<PFileCreatorChild>&
    ManagedPFileCreatorChild() const;

    void
    ManagedPMessagePortChild(nsTArray<PMessagePortChild*>& aArr) const;
    const ManagedContainer<PMessagePortChild>&
    ManagedPMessagePortChild() const;

    void
    ManagedPCamerasChild(nsTArray<PCamerasChild*>& aArr) const;
    const ManagedContainer<PCamerasChild>&
    ManagedPCamerasChild() const;

    void
    ManagedPMIDIManagerChild(nsTArray<PMIDIManagerChild*>& aArr) const;
    const ManagedContainer<PMIDIManagerChild>&
    ManagedPMIDIManagerChild() const;

    void
    ManagedPMIDIPortChild(nsTArray<PMIDIPortChild*>& aArr) const;
    const ManagedContainer<PMIDIPortChild>&
    ManagedPMIDIPortChild() const;

    void
    ManagedPQuotaChild(nsTArray<PQuotaChild*>& aArr) const;
    const ManagedContainer<PQuotaChild>&
    ManagedPQuotaChild() const;

    void
    ManagedPChildToParentStreamChild(nsTArray<PChildToParentStreamChild*>& aArr) const;
    const ManagedContainer<PChildToParentStreamChild>&
    ManagedPChildToParentStreamChild() const;

    void
    ManagedPParentToChildStreamChild(nsTArray<PParentToChildStreamChild*>& aArr) const;
    const ManagedContainer<PParentToChildStreamChild>&
    ManagedPParentToChildStreamChild() const;

    void
    ManagedPServiceWorkerChild(nsTArray<PServiceWorkerChild*>& aArr) const;
    const ManagedContainer<PServiceWorkerChild>&
    ManagedPServiceWorkerChild() const;

    void
    ManagedPServiceWorkerContainerChild(nsTArray<PServiceWorkerContainerChild*>& aArr) const;
    const ManagedContainer<PServiceWorkerContainerChild>&
    ManagedPServiceWorkerContainerChild() const;

    void
    ManagedPServiceWorkerManagerChild(nsTArray<PServiceWorkerManagerChild*>& aArr) const;
    const ManagedContainer<PServiceWorkerManagerChild>&
    ManagedPServiceWorkerManagerChild() const;

    void
    ManagedPServiceWorkerRegistrationChild(nsTArray<PServiceWorkerRegistrationChild*>& aArr) const;
    const ManagedContainer<PServiceWorkerRegistrationChild>&
    ManagedPServiceWorkerRegistrationChild() const;

    void
    ManagedPWebAuthnTransactionChild(nsTArray<PWebAuthnTransactionChild*>& aArr) const;
    const ManagedContainer<PWebAuthnTransactionChild>&
    ManagedPWebAuthnTransactionChild() const;

    void
    ManagedPUDPSocketChild(nsTArray<PUDPSocketChild*>& aArr) const;
    const ManagedContainer<PUDPSocketChild>&
    ManagedPUDPSocketChild() const;

    void
    ManagedPVerifySSLServerCertChild(nsTArray<PVerifySSLServerCertChild*>& aArr) const;
    const ManagedContainer<PVerifySSLServerCertChild>&
    ManagedPVerifySSLServerCertChild() const;

    void
    ManagedPVsyncChild(nsTArray<PVsyncChild*>& aArr) const;
    const ManagedContainer<PVsyncChild>&
    ManagedPVsyncChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PBackgroundDataBridgeParent>
    OpenPBackgroundDataBridgeEndpoint(PBackgroundDataBridgeChild* aActor);
    bool
    BindPBackgroundDataBridgeEndpoint(
            ManagedEndpoint<PBackgroundDataBridgeChild> aEndpoint,
            PBackgroundDataBridgeChild* aActor);

    ManagedEndpoint<PBackgroundIDBFactoryParent>
    OpenPBackgroundIDBFactoryEndpoint(PBackgroundIDBFactoryChild* aActor);
    bool
    BindPBackgroundIDBFactoryEndpoint(
            ManagedEndpoint<PBackgroundIDBFactoryChild> aEndpoint,
            PBackgroundIDBFactoryChild* aActor);

    ManagedEndpoint<PBackgroundIndexedDBUtilsParent>
    OpenPBackgroundIndexedDBUtilsEndpoint(PBackgroundIndexedDBUtilsChild* aActor);
    bool
    BindPBackgroundIndexedDBUtilsEndpoint(
            ManagedEndpoint<PBackgroundIndexedDBUtilsChild> aEndpoint,
            PBackgroundIndexedDBUtilsChild* aActor);

    ManagedEndpoint<PBackgroundSDBConnectionParent>
    OpenPBackgroundSDBConnectionEndpoint(PBackgroundSDBConnectionChild* aActor);
    bool
    BindPBackgroundSDBConnectionEndpoint(
            ManagedEndpoint<PBackgroundSDBConnectionChild> aEndpoint,
            PBackgroundSDBConnectionChild* aActor);

    ManagedEndpoint<PBackgroundLSDatabaseParent>
    OpenPBackgroundLSDatabaseEndpoint(PBackgroundLSDatabaseChild* aActor);
    bool
    BindPBackgroundLSDatabaseEndpoint(
            ManagedEndpoint<PBackgroundLSDatabaseChild> aEndpoint,
            PBackgroundLSDatabaseChild* aActor);

    ManagedEndpoint<PBackgroundLSObserverParent>
    OpenPBackgroundLSObserverEndpoint(PBackgroundLSObserverChild* aActor);
    bool
    BindPBackgroundLSObserverEndpoint(
            ManagedEndpoint<PBackgroundLSObserverChild> aEndpoint,
            PBackgroundLSObserverChild* aActor);

    ManagedEndpoint<PBackgroundLSRequestParent>
    OpenPBackgroundLSRequestEndpoint(PBackgroundLSRequestChild* aActor);
    bool
    BindPBackgroundLSRequestEndpoint(
            ManagedEndpoint<PBackgroundLSRequestChild> aEndpoint,
            PBackgroundLSRequestChild* aActor);

    ManagedEndpoint<PBackgroundLSSimpleRequestParent>
    OpenPBackgroundLSSimpleRequestEndpoint(PBackgroundLSSimpleRequestChild* aActor);
    bool
    BindPBackgroundLSSimpleRequestEndpoint(
            ManagedEndpoint<PBackgroundLSSimpleRequestChild> aEndpoint,
            PBackgroundLSSimpleRequestChild* aActor);

    ManagedEndpoint<PBackgroundLocalStorageCacheParent>
    OpenPBackgroundLocalStorageCacheEndpoint(PBackgroundLocalStorageCacheChild* aActor);
    bool
    BindPBackgroundLocalStorageCacheEndpoint(
            ManagedEndpoint<PBackgroundLocalStorageCacheChild> aEndpoint,
            PBackgroundLocalStorageCacheChild* aActor);

    ManagedEndpoint<PBackgroundSessionStorageManagerParent>
    OpenPBackgroundSessionStorageManagerEndpoint(PBackgroundSessionStorageManagerChild* aActor);
    bool
    BindPBackgroundSessionStorageManagerEndpoint(
            ManagedEndpoint<PBackgroundSessionStorageManagerChild> aEndpoint,
            PBackgroundSessionStorageManagerChild* aActor);

    ManagedEndpoint<PBackgroundStorageParent>
    OpenPBackgroundStorageEndpoint(PBackgroundStorageChild* aActor);
    bool
    BindPBackgroundStorageEndpoint(
            ManagedEndpoint<PBackgroundStorageChild> aEndpoint,
            PBackgroundStorageChild* aActor);

    ManagedEndpoint<PBackgroundTestParent>
    OpenPBackgroundTestEndpoint(PBackgroundTestChild* aActor);
    bool
    BindPBackgroundTestEndpoint(
            ManagedEndpoint<PBackgroundTestChild> aEndpoint,
            PBackgroundTestChild* aActor);

    ManagedEndpoint<PBroadcastChannelParent>
    OpenPBroadcastChannelEndpoint(PBroadcastChannelChild* aActor);
    bool
    BindPBroadcastChannelEndpoint(
            ManagedEndpoint<PBroadcastChannelChild> aEndpoint,
            PBroadcastChannelChild* aActor);

    ManagedEndpoint<PCacheParent>
    OpenPCacheEndpoint(PCacheChild* aActor);
    bool
    BindPCacheEndpoint(
            ManagedEndpoint<PCacheChild> aEndpoint,
            PCacheChild* aActor);

    ManagedEndpoint<PCacheStorageParent>
    OpenPCacheStorageEndpoint(PCacheStorageChild* aActor);
    bool
    BindPCacheStorageEndpoint(
            ManagedEndpoint<PCacheStorageChild> aEndpoint,
            PCacheStorageChild* aActor);

    ManagedEndpoint<PCacheStreamControlParent>
    OpenPCacheStreamControlEndpoint(PCacheStreamControlChild* aActor);
    bool
    BindPCacheStreamControlEndpoint(
            ManagedEndpoint<PCacheStreamControlChild> aEndpoint,
            PCacheStreamControlChild* aActor);

    ManagedEndpoint<PClientManagerParent>
    OpenPClientManagerEndpoint(PClientManagerChild* aActor);
    bool
    BindPClientManagerEndpoint(
            ManagedEndpoint<PClientManagerChild> aEndpoint,
            PClientManagerChild* aActor);

    ManagedEndpoint<PEndpointForReportParent>
    OpenPEndpointForReportEndpoint(PEndpointForReportChild* aActor);
    bool
    BindPEndpointForReportEndpoint(
            ManagedEndpoint<PEndpointForReportChild> aEndpoint,
            PEndpointForReportChild* aActor);

    ManagedEndpoint<PFileDescriptorSetParent>
    OpenPFileDescriptorSetEndpoint(PFileDescriptorSetChild* aActor);
    bool
    BindPFileDescriptorSetEndpoint(
            ManagedEndpoint<PFileDescriptorSetChild> aEndpoint,
            PFileDescriptorSetChild* aActor);

    ManagedEndpoint<PFileSystemRequestParent>
    OpenPFileSystemRequestEndpoint(PFileSystemRequestChild* aActor);
    bool
    BindPFileSystemRequestEndpoint(
            ManagedEndpoint<PFileSystemRequestChild> aEndpoint,
            PFileSystemRequestChild* aActor);

    ManagedEndpoint<PGamepadEventChannelParent>
    OpenPGamepadEventChannelEndpoint(PGamepadEventChannelChild* aActor);
    bool
    BindPGamepadEventChannelEndpoint(
            ManagedEndpoint<PGamepadEventChannelChild> aEndpoint,
            PGamepadEventChannelChild* aActor);

    ManagedEndpoint<PGamepadTestChannelParent>
    OpenPGamepadTestChannelEndpoint(PGamepadTestChannelChild* aActor);
    bool
    BindPGamepadTestChannelEndpoint(
            ManagedEndpoint<PGamepadTestChannelChild> aEndpoint,
            PGamepadTestChannelChild* aActor);

    ManagedEndpoint<PHttpBackgroundChannelParent>
    OpenPHttpBackgroundChannelEndpoint(PHttpBackgroundChannelChild* aActor);
    bool
    BindPHttpBackgroundChannelEndpoint(
            ManagedEndpoint<PHttpBackgroundChannelChild> aEndpoint,
            PHttpBackgroundChannelChild* aActor);

    ManagedEndpoint<PIdleSchedulerParent>
    OpenPIdleSchedulerEndpoint(PIdleSchedulerChild* aActor);
    bool
    BindPIdleSchedulerEndpoint(
            ManagedEndpoint<PIdleSchedulerChild> aEndpoint,
            PIdleSchedulerChild* aActor);

    ManagedEndpoint<PRemoteLazyInputStreamParent>
    OpenPRemoteLazyInputStreamEndpoint(PRemoteLazyInputStreamChild* aActor);
    bool
    BindPRemoteLazyInputStreamEndpoint(
            ManagedEndpoint<PRemoteLazyInputStreamChild> aEndpoint,
            PRemoteLazyInputStreamChild* aActor);

    ManagedEndpoint<PMediaTransportParent>
    OpenPMediaTransportEndpoint(PMediaTransportChild* aActor);
    bool
    BindPMediaTransportEndpoint(
            ManagedEndpoint<PMediaTransportChild> aEndpoint,
            PMediaTransportChild* aActor);

    ManagedEndpoint<PRemoteWorkerParent>
    OpenPRemoteWorkerEndpoint(PRemoteWorkerChild* aActor);
    bool
    BindPRemoteWorkerEndpoint(
            ManagedEndpoint<PRemoteWorkerChild> aEndpoint,
            PRemoteWorkerChild* aActor);

    ManagedEndpoint<PRemoteWorkerControllerParent>
    OpenPRemoteWorkerControllerEndpoint(PRemoteWorkerControllerChild* aActor);
    bool
    BindPRemoteWorkerControllerEndpoint(
            ManagedEndpoint<PRemoteWorkerControllerChild> aEndpoint,
            PRemoteWorkerControllerChild* aActor);

    ManagedEndpoint<PRemoteWorkerServiceParent>
    OpenPRemoteWorkerServiceEndpoint(PRemoteWorkerServiceChild* aActor);
    bool
    BindPRemoteWorkerServiceEndpoint(
            ManagedEndpoint<PRemoteWorkerServiceChild> aEndpoint,
            PRemoteWorkerServiceChild* aActor);

    ManagedEndpoint<PSharedWorkerParent>
    OpenPSharedWorkerEndpoint(PSharedWorkerChild* aActor);
    bool
    BindPSharedWorkerEndpoint(
            ManagedEndpoint<PSharedWorkerChild> aEndpoint,
            PSharedWorkerChild* aActor);

    ManagedEndpoint<PTemporaryIPCBlobParent>
    OpenPTemporaryIPCBlobEndpoint(PTemporaryIPCBlobChild* aActor);
    bool
    BindPTemporaryIPCBlobEndpoint(
            ManagedEndpoint<PTemporaryIPCBlobChild> aEndpoint,
            PTemporaryIPCBlobChild* aActor);

    ManagedEndpoint<PFileCreatorParent>
    OpenPFileCreatorEndpoint(PFileCreatorChild* aActor);
    bool
    BindPFileCreatorEndpoint(
            ManagedEndpoint<PFileCreatorChild> aEndpoint,
            PFileCreatorChild* aActor);

    ManagedEndpoint<PMessagePortParent>
    OpenPMessagePortEndpoint(PMessagePortChild* aActor);
    bool
    BindPMessagePortEndpoint(
            ManagedEndpoint<PMessagePortChild> aEndpoint,
            PMessagePortChild* aActor);

    ManagedEndpoint<PCamerasParent>
    OpenPCamerasEndpoint(PCamerasChild* aActor);
    bool
    BindPCamerasEndpoint(
            ManagedEndpoint<PCamerasChild> aEndpoint,
            PCamerasChild* aActor);

    ManagedEndpoint<PMIDIManagerParent>
    OpenPMIDIManagerEndpoint(PMIDIManagerChild* aActor);
    bool
    BindPMIDIManagerEndpoint(
            ManagedEndpoint<PMIDIManagerChild> aEndpoint,
            PMIDIManagerChild* aActor);

    ManagedEndpoint<PMIDIPortParent>
    OpenPMIDIPortEndpoint(PMIDIPortChild* aActor);
    bool
    BindPMIDIPortEndpoint(
            ManagedEndpoint<PMIDIPortChild> aEndpoint,
            PMIDIPortChild* aActor);

    ManagedEndpoint<PQuotaParent>
    OpenPQuotaEndpoint(PQuotaChild* aActor);
    bool
    BindPQuotaEndpoint(
            ManagedEndpoint<PQuotaChild> aEndpoint,
            PQuotaChild* aActor);

    ManagedEndpoint<PChildToParentStreamParent>
    OpenPChildToParentStreamEndpoint(PChildToParentStreamChild* aActor);
    bool
    BindPChildToParentStreamEndpoint(
            ManagedEndpoint<PChildToParentStreamChild> aEndpoint,
            PChildToParentStreamChild* aActor);

    ManagedEndpoint<PParentToChildStreamParent>
    OpenPParentToChildStreamEndpoint(PParentToChildStreamChild* aActor);
    bool
    BindPParentToChildStreamEndpoint(
            ManagedEndpoint<PParentToChildStreamChild> aEndpoint,
            PParentToChildStreamChild* aActor);

    ManagedEndpoint<PServiceWorkerParent>
    OpenPServiceWorkerEndpoint(PServiceWorkerChild* aActor);
    bool
    BindPServiceWorkerEndpoint(
            ManagedEndpoint<PServiceWorkerChild> aEndpoint,
            PServiceWorkerChild* aActor);

    ManagedEndpoint<PServiceWorkerContainerParent>
    OpenPServiceWorkerContainerEndpoint(PServiceWorkerContainerChild* aActor);
    bool
    BindPServiceWorkerContainerEndpoint(
            ManagedEndpoint<PServiceWorkerContainerChild> aEndpoint,
            PServiceWorkerContainerChild* aActor);

    ManagedEndpoint<PServiceWorkerManagerParent>
    OpenPServiceWorkerManagerEndpoint(PServiceWorkerManagerChild* aActor);
    bool
    BindPServiceWorkerManagerEndpoint(
            ManagedEndpoint<PServiceWorkerManagerChild> aEndpoint,
            PServiceWorkerManagerChild* aActor);

    ManagedEndpoint<PServiceWorkerRegistrationParent>
    OpenPServiceWorkerRegistrationEndpoint(PServiceWorkerRegistrationChild* aActor);
    bool
    BindPServiceWorkerRegistrationEndpoint(
            ManagedEndpoint<PServiceWorkerRegistrationChild> aEndpoint,
            PServiceWorkerRegistrationChild* aActor);

    ManagedEndpoint<PWebAuthnTransactionParent>
    OpenPWebAuthnTransactionEndpoint(PWebAuthnTransactionChild* aActor);
    bool
    BindPWebAuthnTransactionEndpoint(
            ManagedEndpoint<PWebAuthnTransactionChild> aEndpoint,
            PWebAuthnTransactionChild* aActor);

    ManagedEndpoint<PUDPSocketParent>
    OpenPUDPSocketEndpoint(PUDPSocketChild* aActor);
    bool
    BindPUDPSocketEndpoint(
            ManagedEndpoint<PUDPSocketChild> aEndpoint,
            PUDPSocketChild* aActor);

    ManagedEndpoint<PVerifySSLServerCertParent>
    OpenPVerifySSLServerCertEndpoint(PVerifySSLServerCertChild* aActor);
    bool
    BindPVerifySSLServerCertEndpoint(
            ManagedEndpoint<PVerifySSLServerCertChild> aEndpoint,
            PVerifySSLServerCertChild* aActor);

    ManagedEndpoint<PVsyncParent>
    OpenPVsyncEndpoint(PVsyncChild* aActor);
    bool
    BindPVsyncEndpoint(
            ManagedEndpoint<PVsyncChild> aEndpoint,
            PVsyncChild* aActor);

    PBackgroundTestChild*
    SendPBackgroundTestConstructor(const nsCString& testArg);

    PBackgroundTestChild*
    SendPBackgroundTestConstructor(
            PBackgroundTestChild* actor,
            const nsCString& testArg);

    PBackgroundDataBridgeChild*
    SendPBackgroundDataBridgeConstructor(
            PBackgroundDataBridgeChild* actor,
            const uint64_t& channelID);

    PBackgroundIDBFactoryChild*
    SendPBackgroundIDBFactoryConstructor(
            PBackgroundIDBFactoryChild* actor,
            const LoggingInfo& loggingInfo);

    PBackgroundIndexedDBUtilsChild*
    SendPBackgroundIndexedDBUtilsConstructor();

    PBackgroundIndexedDBUtilsChild*
    SendPBackgroundIndexedDBUtilsConstructor(PBackgroundIndexedDBUtilsChild* actor);

    bool
    SendFlushPendingFileDeletions();

    PBackgroundSDBConnectionChild*
    SendPBackgroundSDBConnectionConstructor(
            const PersistenceType& persistenceType,
            const PrincipalInfo& principalInfo);

    PBackgroundSDBConnectionChild*
    SendPBackgroundSDBConnectionConstructor(
            PBackgroundSDBConnectionChild* actor,
            const PersistenceType& persistenceType,
            const PrincipalInfo& principalInfo);

    PBackgroundLSDatabaseChild*
    SendPBackgroundLSDatabaseConstructor(
            const PrincipalInfo& principalInfo,
            const uint32_t& privateBrowsingId,
            const uint64_t& datastoreId);

    PBackgroundLSDatabaseChild*
    SendPBackgroundLSDatabaseConstructor(
            PBackgroundLSDatabaseChild* actor,
            const PrincipalInfo& principalInfo,
            const uint32_t& privateBrowsingId,
            const uint64_t& datastoreId);

    PBackgroundLSObserverChild*
    SendPBackgroundLSObserverConstructor(const uint64_t& observerId);

    PBackgroundLSObserverChild*
    SendPBackgroundLSObserverConstructor(
            PBackgroundLSObserverChild* actor,
            const uint64_t& observerId);

    PBackgroundLSRequestChild*
    SendPBackgroundLSRequestConstructor(const LSRequestParams& params);

    PBackgroundLSRequestChild*
    SendPBackgroundLSRequestConstructor(
            PBackgroundLSRequestChild* actor,
            const LSRequestParams& params);

    PBackgroundLSSimpleRequestChild*
    SendPBackgroundLSSimpleRequestConstructor(const LSSimpleRequestParams& params);

    PBackgroundLSSimpleRequestChild*
    SendPBackgroundLSSimpleRequestConstructor(
            PBackgroundLSSimpleRequestChild* actor,
            const LSSimpleRequestParams& params);

    bool
    SendLSClearPrivateBrowsing();

    PBackgroundLocalStorageCacheChild*
    SendPBackgroundLocalStorageCacheConstructor(
            const PrincipalInfo& principalInfo,
            const nsCString& originKey,
            const uint32_t& privateBrowsingId);

    PBackgroundLocalStorageCacheChild*
    SendPBackgroundLocalStorageCacheConstructor(
            PBackgroundLocalStorageCacheChild* actor,
            const PrincipalInfo& principalInfo,
            const nsCString& originKey,
            const uint32_t& privateBrowsingId);

    PBackgroundSessionStorageManagerChild*
    SendPBackgroundSessionStorageManagerConstructor(
            PBackgroundSessionStorageManagerChild* actor,
            const uint64_t& aTopContextId);

    PBackgroundStorageChild*
    SendPBackgroundStorageConstructor(
            const nsString& profilePath,
            const uint32_t& privateBrowsingId);

    PBackgroundStorageChild*
    SendPBackgroundStorageConstructor(
            PBackgroundStorageChild* actor,
            const nsString& profilePath,
            const uint32_t& privateBrowsingId);

    PVsyncChild*
    SendPVsyncConstructor();

    PVsyncChild*
    SendPVsyncConstructor(PVsyncChild* actor);

    PCamerasChild*
    SendPCamerasConstructor();

    PCamerasChild*
    SendPCamerasConstructor(PCamerasChild* actor);

    PUDPSocketChild*
    SendPUDPSocketConstructor(
            const mozilla::Maybe<PrincipalInfo>& pInfo,
            const nsCString& filter);

    PUDPSocketChild*
    SendPUDPSocketConstructor(
            PUDPSocketChild* actor,
            const mozilla::Maybe<PrincipalInfo>& pInfo,
            const nsCString& filter);

    PBroadcastChannelChild*
    SendPBroadcastChannelConstructor(
            const PrincipalInfo& pInfo,
            const nsCString& origin,
            const nsString& channel);

    PBroadcastChannelChild*
    SendPBroadcastChannelConstructor(
            PBroadcastChannelChild* actor,
            const PrincipalInfo& pInfo,
            const nsCString& origin,
            const nsString& channel);

    PServiceWorkerManagerChild*
    SendPServiceWorkerManagerConstructor();

    PServiceWorkerManagerChild*
    SendPServiceWorkerManagerConstructor(PServiceWorkerManagerChild* actor);

    bool
    SendShutdownServiceWorkerRegistrar();

    PCacheStorageChild*
    SendPCacheStorageConstructor(
            const Namespace& aNamespace,
            const PrincipalInfo& aPrincipalInfo);

    PCacheStorageChild*
    SendPCacheStorageConstructor(
            PCacheStorageChild* actor,
            const Namespace& aNamespace,
            const PrincipalInfo& aPrincipalInfo);

    PMessagePortChild*
    SendPMessagePortConstructor(
            const nsID& uuid,
            const nsID& destinationUuid,
            const uint32_t& sequenceId);

    PMessagePortChild*
    SendPMessagePortConstructor(
            PMessagePortChild* actor,
            const nsID& uuid,
            const nsID& destinationUuid,
            const uint32_t& sequenceId);

    PChildToParentStreamChild*
    SendPChildToParentStreamConstructor();

    PChildToParentStreamChild*
    SendPChildToParentStreamConstructor(PChildToParentStreamChild* actor);

    bool
    SendMessagePortForceClose(
            const nsID& uuid,
            const nsID& destinationUuid,
            const uint32_t& sequenceId);

    PQuotaChild*
    SendPQuotaConstructor();

    PQuotaChild*
    SendPQuotaConstructor(PQuotaChild* actor);

    bool
    SendShutdownQuotaManager();

    bool
    SendShutdownBackgroundSessionStorageManagers();

    bool
    SendPropagateBackgroundSessionStorageManager(
            const uint64_t& currentTopContextId,
            const uint64_t& targetTopContextId);

    bool
    SendRemoveBackgroundSessionStorageManager(const uint64_t& topContextId);

    PFileSystemRequestChild*
    SendPFileSystemRequestConstructor(
            PFileSystemRequestChild* actor,
            const FileSystemParams& params);

    PGamepadEventChannelChild*
    SendPGamepadEventChannelConstructor(PGamepadEventChannelChild* actor);

    PGamepadTestChannelChild*
    SendPGamepadTestChannelConstructor(PGamepadTestChannelChild* actor);

    PHttpBackgroundChannelChild*
    SendPHttpBackgroundChannelConstructor(
            PHttpBackgroundChannelChild* actor,
            const uint64_t& channelId);

    PWebAuthnTransactionChild*
    SendPWebAuthnTransactionConstructor();

    PWebAuthnTransactionChild*
    SendPWebAuthnTransactionConstructor(PWebAuthnTransactionChild* actor);

    PSharedWorkerChild*
    SendPSharedWorkerConstructor(
            const RemoteWorkerData& data,
            const uint64_t& windowID,
            const MessagePortIdentifier& portIdentifier);

    PSharedWorkerChild*
    SendPSharedWorkerConstructor(
            PSharedWorkerChild* actor,
            const RemoteWorkerData& data,
            const uint64_t& windowID,
            const MessagePortIdentifier& portIdentifier);

    PTemporaryIPCBlobChild*
    SendPTemporaryIPCBlobConstructor();

    PTemporaryIPCBlobChild*
    SendPTemporaryIPCBlobConstructor(PTemporaryIPCBlobChild* actor);

    PFileCreatorChild*
    SendPFileCreatorConstructor(
            const nsString& aFullPath,
            const nsString& aType,
            const nsString& aName,
            const mozilla::Maybe<int64_t>& lastModified,
            const bool& aExistenceCheck,
            const bool& aIsFromNsIFile);

    PFileCreatorChild*
    SendPFileCreatorConstructor(
            PFileCreatorChild* actor,
            const nsString& aFullPath,
            const nsString& aType,
            const nsString& aName,
            const mozilla::Maybe<int64_t>& lastModified,
            const bool& aExistenceCheck,
            const bool& aIsFromNsIFile);

    PClientManagerChild*
    SendPClientManagerConstructor();

    PClientManagerChild*
    SendPClientManagerConstructor(PClientManagerChild* actor);

    PMIDIManagerChild*
    SendPMIDIManagerConstructor();

    PMIDIManagerChild*
    SendPMIDIManagerConstructor(PMIDIManagerChild* actor);

    PMIDIPortChild*
    SendPMIDIPortConstructor(
            const MIDIPortInfo& portInfo,
            const bool& sysexEnabled);

    PMIDIPortChild*
    SendPMIDIPortConstructor(
            PMIDIPortChild* actor,
            const MIDIPortInfo& portInfo,
            const bool& sysexEnabled);

    bool
    SendStorageActivity(const PrincipalInfo& principalInfo);

    PServiceWorkerChild*
    SendPServiceWorkerConstructor(
            PServiceWorkerChild* actor,
            const IPCServiceWorkerDescriptor& aDescriptor);

    PRemoteWorkerControllerChild*
    SendPRemoteWorkerControllerConstructor(const RemoteWorkerData& aData);

    PRemoteWorkerControllerChild*
    SendPRemoteWorkerControllerConstructor(
            PRemoteWorkerControllerChild* actor,
            const RemoteWorkerData& aData);

    PRemoteWorkerServiceChild*
    SendPRemoteWorkerServiceConstructor();

    PRemoteWorkerServiceChild*
    SendPRemoteWorkerServiceConstructor(PRemoteWorkerServiceChild* actor);

    PServiceWorkerContainerChild*
    SendPServiceWorkerContainerConstructor(PServiceWorkerContainerChild* actor);

    PServiceWorkerRegistrationChild*
    SendPServiceWorkerRegistrationConstructor(
            PServiceWorkerRegistrationChild* actor,
            const IPCServiceWorkerRegistrationDescriptor& aDescriptor);

    PEndpointForReportChild*
    SendPEndpointForReportConstructor(
            const nsString& aGroupName,
            const PrincipalInfo& aPrincipalInfo);

    PEndpointForReportChild*
    SendPEndpointForReportConstructor(
            PEndpointForReportChild* actor,
            const nsString& aGroupName,
            const PrincipalInfo& aPrincipalInfo);

    bool
    SendRemoveEndpoint(
            const nsString& aGroupName,
            const nsCString& aEndpointURL,
            const PrincipalInfo& aPrincipalInfo);

    PIdleSchedulerChild*
    SendPIdleSchedulerConstructor(PIdleSchedulerChild* actor);

    PMediaTransportChild*
    SendPMediaTransportConstructor();

    PMediaTransportChild*
    SendPMediaTransportConstructor(PMediaTransportChild* actor);

    PVerifySSLServerCertChild*
    SendPVerifySSLServerCertConstructor(
            PVerifySSLServerCertChild* actor,
            const ByteArray& aServerCert,
            const nsTArray<ByteArray>& aPeerCertChain,
            const nsCString& aHostName,
            const int32_t& aPort,
            const OriginAttributes& aOriginAttributes,
            const mozilla::Maybe<ByteArray>& aStapledOCSPResponse,
            const mozilla::Maybe<ByteArray>& aSctsFromTLSExtension,
            const mozilla::Maybe<DelegatedCredentialInfoArg>& aDcInfo,
            const uint32_t& aProviderFlags,
            const uint32_t& aCertVerifierFlags);

    void
    SendEnsureRDDProcessAndCreateBridge(
            mozilla::ipc::ResolveCallback<Tuple<nsresult, Endpoint<mozilla::PRemoteDecoderManagerChild>>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<EnsureRDDProcessAndCreateBridgePromise>
    SendEnsureRDDProcessAndCreateBridge();

    PRemoteLazyInputStreamChild*
    SendPRemoteLazyInputStreamConstructor(
            PRemoteLazyInputStreamChild* actor,
            const nsID& aID,
            const uint64_t& aSize);

    PFileDescriptorSetChild*
    SendPFileDescriptorSetConstructor(const FileDescriptor& fd);

    PFileDescriptorSetChild*
    SendPFileDescriptorSetConstructor(
            PFileDescriptorSetChild* actor,
            const FileDescriptor& fd);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PBackgroundDataBridgeChild> mManagedPBackgroundDataBridgeChild;
    ManagedContainer<PBackgroundIDBFactoryChild> mManagedPBackgroundIDBFactoryChild;
    ManagedContainer<PBackgroundIndexedDBUtilsChild> mManagedPBackgroundIndexedDBUtilsChild;
    ManagedContainer<PBackgroundSDBConnectionChild> mManagedPBackgroundSDBConnectionChild;
    ManagedContainer<PBackgroundLSDatabaseChild> mManagedPBackgroundLSDatabaseChild;
    ManagedContainer<PBackgroundLSObserverChild> mManagedPBackgroundLSObserverChild;
    ManagedContainer<PBackgroundLSRequestChild> mManagedPBackgroundLSRequestChild;
    ManagedContainer<PBackgroundLSSimpleRequestChild> mManagedPBackgroundLSSimpleRequestChild;
    ManagedContainer<PBackgroundLocalStorageCacheChild> mManagedPBackgroundLocalStorageCacheChild;
    ManagedContainer<PBackgroundSessionStorageManagerChild> mManagedPBackgroundSessionStorageManagerChild;
    ManagedContainer<PBackgroundStorageChild> mManagedPBackgroundStorageChild;
    ManagedContainer<PBackgroundTestChild> mManagedPBackgroundTestChild;
    ManagedContainer<PBroadcastChannelChild> mManagedPBroadcastChannelChild;
    ManagedContainer<PCacheChild> mManagedPCacheChild;
    ManagedContainer<PCacheStorageChild> mManagedPCacheStorageChild;
    ManagedContainer<PCacheStreamControlChild> mManagedPCacheStreamControlChild;
    ManagedContainer<PClientManagerChild> mManagedPClientManagerChild;
    ManagedContainer<PEndpointForReportChild> mManagedPEndpointForReportChild;
    ManagedContainer<PFileDescriptorSetChild> mManagedPFileDescriptorSetChild;
    ManagedContainer<PFileSystemRequestChild> mManagedPFileSystemRequestChild;
    ManagedContainer<PGamepadEventChannelChild> mManagedPGamepadEventChannelChild;
    ManagedContainer<PGamepadTestChannelChild> mManagedPGamepadTestChannelChild;
    ManagedContainer<PHttpBackgroundChannelChild> mManagedPHttpBackgroundChannelChild;
    ManagedContainer<PIdleSchedulerChild> mManagedPIdleSchedulerChild;
    ManagedContainer<PRemoteLazyInputStreamChild> mManagedPRemoteLazyInputStreamChild;
    ManagedContainer<PMediaTransportChild> mManagedPMediaTransportChild;
    ManagedContainer<PRemoteWorkerChild> mManagedPRemoteWorkerChild;
    ManagedContainer<PRemoteWorkerControllerChild> mManagedPRemoteWorkerControllerChild;
    ManagedContainer<PRemoteWorkerServiceChild> mManagedPRemoteWorkerServiceChild;
    ManagedContainer<PSharedWorkerChild> mManagedPSharedWorkerChild;
    ManagedContainer<PTemporaryIPCBlobChild> mManagedPTemporaryIPCBlobChild;
    ManagedContainer<PFileCreatorChild> mManagedPFileCreatorChild;
    ManagedContainer<PMessagePortChild> mManagedPMessagePortChild;
    ManagedContainer<PCamerasChild> mManagedPCamerasChild;
    ManagedContainer<PMIDIManagerChild> mManagedPMIDIManagerChild;
    ManagedContainer<PMIDIPortChild> mManagedPMIDIPortChild;
    ManagedContainer<PQuotaChild> mManagedPQuotaChild;
    ManagedContainer<PChildToParentStreamChild> mManagedPChildToParentStreamChild;
    ManagedContainer<PParentToChildStreamChild> mManagedPParentToChildStreamChild;
    ManagedContainer<PServiceWorkerChild> mManagedPServiceWorkerChild;
    ManagedContainer<PServiceWorkerContainerChild> mManagedPServiceWorkerContainerChild;
    ManagedContainer<PServiceWorkerManagerChild> mManagedPServiceWorkerManagerChild;
    ManagedContainer<PServiceWorkerRegistrationChild> mManagedPServiceWorkerRegistrationChild;
    ManagedContainer<PWebAuthnTransactionChild> mManagedPWebAuthnTransactionChild;
    ManagedContainer<PUDPSocketChild> mManagedPUDPSocketChild;
    ManagedContainer<PVerifySSLServerCertChild> mManagedPVerifySSLServerCertChild;
    ManagedContainer<PVsyncChild> mManagedPVsyncChild;
};


} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::ipc::PBackgroundChild*>
{
    typedef mozilla::ipc::PBackgroundChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundChild_h
