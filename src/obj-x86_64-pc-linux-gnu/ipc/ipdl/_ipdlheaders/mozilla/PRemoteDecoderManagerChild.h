//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PRemoteDecoderManagerChild_h
#define PRemoteDecoderManagerChild_h

#include "mozilla/PRemoteDecoderManager.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "DecoderDoctorDiagnostics.h"
#include "MediaInfo.h"
#include "PlatformDecoderModule.h"

namespace mozilla {
namespace layers {
class PTextureChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PTextureParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderChild;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderParent;
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderChild;
} // namespace mozilla

namespace mozilla {
namespace layers {
struct TextureFactoryIdentifier;
} // namespace layers
} // namespace mozilla

namespace mozilla {


class PRemoteDecoderManagerChild :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::PRemoteDecoderChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::layers::BufferDescriptor BufferDescriptor;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::gfx::ColorDepth ColorDepth;
    typedef mozilla::gfx::ColorRange ColorRange;
    typedef mozilla::DecoderDoctorDiagnostics DecoderDoctorDiagnostics;
    typedef mozilla::layers::EGLImageDescriptor EGLImageDescriptor;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::SharedMemoryBasic::Handle Handle;
    typedef mozilla::gfx::IntRect IntRect;
    typedef mozilla::gfx::IntSize IntSize;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::layers::MaybeVideoBridgeSource MaybeVideoBridgeSource;
    typedef mozilla::layers::MemoryOrShmem MemoryOrShmem;
    typedef mozilla::CreateDecoderParams::OptionSet OptionSet;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::layers::RGBDescriptor RGBDescriptor;
    typedef mozilla::RemoteDecoderInfoIPDL RemoteDecoderInfoIPDL;
    typedef mozilla::layers::RemoteDecoderVideoSubDescriptor RemoteDecoderVideoSubDescriptor;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::StereoMode StereoMode;
    typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer SurfaceDescriptorAndroidHardwareBuffer;
    typedef mozilla::layers::SurfaceDescriptorBuffer SurfaceDescriptorBuffer;
    typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
    typedef mozilla::layers::SurfaceDescriptorDIB SurfaceDescriptorDIB;
    typedef mozilla::layers::SurfaceDescriptorDMABuf SurfaceDescriptorDMABuf;
    typedef mozilla::layers::SurfaceDescriptorDXGIYCbCr SurfaceDescriptorDXGIYCbCr;
    typedef mozilla::layers::SurfaceDescriptorFileMapping SurfaceDescriptorFileMapping;
    typedef mozilla::layers::SurfaceDescriptorGPUVideo SurfaceDescriptorGPUVideo;
    typedef mozilla::layers::SurfaceDescriptorMacIOSurface SurfaceDescriptorMacIOSurface;
    typedef mozilla::layers::SurfaceDescriptorPlugin SurfaceDescriptorPlugin;
    typedef mozilla::layers::SurfaceDescriptorRecorded SurfaceDescriptorRecorded;
    typedef mozilla::layers::SurfaceDescriptorRemoteDecoder SurfaceDescriptorRemoteDecoder;
    typedef mozilla::layers::SurfaceDescriptorShared SurfaceDescriptorShared;
    typedef mozilla::layers::SurfaceDescriptorSharedGLTexture SurfaceDescriptorSharedGLTexture;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::layers::SurfaceTextureDescriptor SurfaceTextureDescriptor;
    typedef mozilla::layers::TextureFactoryIdentifier TextureFactoryIdentifier;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::VideoDecoderInfoIPDL VideoDecoderInfoIPDL;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::YCbCrDescriptor YCbCrDescriptor;
    typedef mozilla::gfx::YUVColorSpace YUVColorSpace;
    typedef mozilla::null_t null_t;
    typedef mozilla::layers::PTextureChild PTextureChild;
    typedef mozilla::layers::PTextureParent PTextureParent;
    typedef mozilla::PRemoteDecoderChild PRemoteDecoderChild;
    typedef mozilla::PRemoteDecoderParent PRemoteDecoderParent;

protected:
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PRemoteDecoderManagerChild();

    virtual ~PRemoteDecoderManagerChild();

public:
    void
    ManagedPRemoteDecoderChild(nsTArray<PRemoteDecoderChild*>& aArr) const;
    const ManagedContainer<PRemoteDecoderChild>&
    ManagedPRemoteDecoderChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PRemoteDecoderParent>
    OpenPRemoteDecoderEndpoint(PRemoteDecoderChild* aActor);
    bool
    BindPRemoteDecoderEndpoint(
            ManagedEndpoint<PRemoteDecoderChild> aEndpoint,
            PRemoteDecoderChild* aActor);

    PRemoteDecoderChild*
    SendPRemoteDecoderConstructor(
            const RemoteDecoderInfoIPDL& info,
            const OptionSet& options,
            const mozilla::Maybe<TextureFactoryIdentifier>& identifier);

    PRemoteDecoderChild*
    SendPRemoteDecoderConstructor(
            PRemoteDecoderChild* actor,
            const RemoteDecoderInfoIPDL& info,
            const OptionSet& options,
            const mozilla::Maybe<TextureFactoryIdentifier>& identifier);

    bool
    SendReadback(
            const SurfaceDescriptorGPUVideo& sd,
            SurfaceDescriptor* aResult);

    bool
    SendDeallocateSurfaceDescriptorGPUVideo(const SurfaceDescriptorGPUVideo& sd);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PRemoteDecoderChild> mManagedPRemoteDecoderChild;
};


} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::PRemoteDecoderManagerChild*>
{
    typedef mozilla::PRemoteDecoderManagerChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PRemoteDecoderManagerChild_h
