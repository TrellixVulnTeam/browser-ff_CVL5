//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PMediaDecoderParams_h
#define PMediaDecoderParams_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "TimeUnits.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct MediaDataIPDL|
//
namespace mozilla {
class MediaDataIPDL final
{
private:
    typedef mozilla::media::TimeUnit TimeUnit;

public:
    MOZ_IMPLICIT MediaDataIPDL() :
        time_(),
        timecode_(),
        duration_(),
        keyframe_(),
        offset_()
    {
    }

    MOZ_IMPLICIT MediaDataIPDL(
            const int64_t& _offset,
            const TimeUnit& _time,
            const TimeUnit& _timecode,
            const TimeUnit& _duration,
            const bool& _keyframe) :
        time_(_time),
        timecode_(_timecode),
        duration_(_duration),
        keyframe_(_keyframe),
        offset_(_offset)
    {
    }

    int64_t&
    offset()
    {
        return offset_;
    }
    const int64_t&
    offset() const
    {
        return offset_;
    }

    TimeUnit&
    time()
    {
        return time_;
    }
    const TimeUnit&
    time() const
    {
        return time_;
    }

    TimeUnit&
    timecode()
    {
        return timecode_;
    }
    const TimeUnit&
    timecode() const
    {
        return timecode_;
    }

    TimeUnit&
    duration()
    {
        return duration_;
    }
    const TimeUnit&
    duration() const
    {
        return duration_;
    }

    bool&
    keyframe()
    {
        return keyframe_;
    }
    const bool&
    keyframe() const
    {
        return keyframe_;
    }

private:
    TimeUnit time_;
    TimeUnit timecode_;
    TimeUnit duration_;
    bool keyframe_;
    int64_t offset_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::MediaDataIPDL>
{
    typedef mozilla::MediaDataIPDL paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PMediaDecoderParams_h
