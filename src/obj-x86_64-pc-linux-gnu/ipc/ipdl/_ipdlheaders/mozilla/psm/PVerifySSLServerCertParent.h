//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PVerifySSLServerCertParent_h
#define PVerifySSLServerCertParent_h

#include "mozilla/psm/PVerifySSLServerCert.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace psm {


class PVerifySSLServerCertParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::ipc::PBackgroundParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::psm::ByteArray ByteArray;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::psm::DataStorageEntry DataStorageEntry;
    typedef mozilla::psm::DataStorageItem DataStorageItem;
    typedef mozilla::DataStorageType DataStorageType;
    typedef mozilla::psm::DelegatedCredentialInfoArg DelegatedCredentialInfoArg;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PVerifySSLServerCertParent();

    virtual ~PVerifySSLServerCertParent();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PBackgroundParent*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendOnVerifiedSSLServerCertSuccess(
            const nsTArray<ByteArray>& aBuiltCertChain,
            const uint16_t& aCertTransparencyStatus,
            const uint8_t& aEVStatus,
            const bool& isBuiltCertChainRootBuiltInRoot);

    [[nodiscard]] bool
    SendOnVerifiedSSLServerCertFailure(
            const uint32_t& aFinalError,
            const uint32_t& aCollectedErrors);

    [[nodiscard]] static bool
    Send__delete__(PVerifySSLServerCertParent* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace psm
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::psm::PVerifySSLServerCertParent*>
{
    typedef mozilla::psm::PVerifySSLServerCertParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PVerifySSLServerCertParent_h
