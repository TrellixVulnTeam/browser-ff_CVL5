//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSMIPCTypes_h
#define PSMIPCTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/DataStorage.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ByteArray|
//
namespace mozilla {
namespace psm {
class ByteArray final
{
private:

public:
    MOZ_IMPLICIT ByteArray() :
        data_()
    {
    }

    MOZ_IMPLICIT ByteArray(const nsTArray<uint8_t>& _data) :
        data_(_data)
    {
    }

    nsTArray<uint8_t>&
    data()
    {
        return data_;
    }
    const nsTArray<uint8_t>&
    data() const
    {
        return data_;
    }

private:
    CopyableTArray<uint8_t> data_;
};
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::psm::ByteArray>
{
    typedef mozilla::psm::ByteArray paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DelegatedCredentialInfoArg|
//
namespace mozilla {
namespace psm {
class DelegatedCredentialInfoArg final
{
private:

public:
    MOZ_IMPLICIT DelegatedCredentialInfoArg() :
        scheme_(),
        authKeyBits_()
    {
    }

    MOZ_IMPLICIT DelegatedCredentialInfoArg(
            const uint32_t& _scheme,
            const uint32_t& _authKeyBits) :
        scheme_(_scheme),
        authKeyBits_(_authKeyBits)
    {
    }

    uint32_t&
    scheme()
    {
        return scheme_;
    }
    const uint32_t&
    scheme() const
    {
        return scheme_;
    }

    uint32_t&
    authKeyBits()
    {
        return authKeyBits_;
    }
    const uint32_t&
    authKeyBits() const
    {
        return authKeyBits_;
    }

private:
    void
    StaticAssertions() const;
    uint32_t scheme_;
    uint32_t authKeyBits_;
};
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::psm::DelegatedCredentialInfoArg>
{
    typedef mozilla::psm::DelegatedCredentialInfoArg paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DataStorageItem|
//
namespace mozilla {
namespace psm {
class DataStorageItem final
{
private:
    typedef mozilla::DataStorageType DataStorageType;

public:
    MOZ_IMPLICIT DataStorageItem() :
        key_(),
        value_(),
        type_()
    {
    }

    MOZ_IMPLICIT DataStorageItem(
            const nsCString& _key,
            const nsCString& _value,
            const DataStorageType& _type) :
        key_(_key),
        value_(_value),
        type_(_type)
    {
    }

    nsCString&
    key()
    {
        return key_;
    }
    const nsCString&
    key() const
    {
        return key_;
    }

    nsCString&
    value()
    {
        return value_;
    }
    const nsCString&
    value() const
    {
        return value_;
    }

    DataStorageType&
    type()
    {
        return type_;
    }
    const DataStorageType&
    type() const
    {
        return type_;
    }

private:
    nsCString key_;
    nsCString value_;
    DataStorageType type_;
};
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::psm::DataStorageItem>
{
    typedef mozilla::psm::DataStorageItem paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DataStorageEntry|
//
namespace mozilla {
namespace psm {
class DataStorageEntry final
{
private:
    typedef mozilla::psm::DataStorageItem DataStorageItem;

public:
    MOZ_IMPLICIT DataStorageEntry() :
        items_(),
        filename_()
    {
    }

    MOZ_IMPLICIT DataStorageEntry(
            const nsTArray<DataStorageItem>& _items,
            const nsString& _filename) :
        items_(_items),
        filename_(_filename)
    {
    }

    nsTArray<DataStorageItem>&
    items()
    {
        return items_;
    }
    const nsTArray<DataStorageItem>&
    items() const
    {
        return items_;
    }

    nsString&
    filename()
    {
        return filename_;
    }
    const nsString&
    filename() const
    {
        return filename_;
    }

private:
    CopyableTArray<DataStorageItem> items_;
    nsString filename_;
};
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::psm::DataStorageEntry>
{
    typedef mozilla::psm::DataStorageEntry paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PSMIPCTypes_h
