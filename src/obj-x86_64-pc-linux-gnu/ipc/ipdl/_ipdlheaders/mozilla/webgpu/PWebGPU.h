//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebGPU_h
#define PWebGPU_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace webgpu {
class PWebGPUParent;
} // namespace webgpu
} // namespace mozilla
namespace mozilla {
namespace webgpu {
class PWebGPUChild;
} // namespace webgpu
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PWebGPUChild and PWebGPUParent
//
namespace mozilla {
namespace webgpu {
namespace PWebGPU {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::webgpu::PWebGPUParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::webgpu::PWebGPUChild>* aChild);

enum MessageType {
    PWebGPUStart = PWebGPUMsgStart << 16,
    Msg_DeviceAction__ID,
    Msg_TextureAction__ID,
    Msg_CommandEncoderAction__ID,
    Msg_BumpImplicitBindGroupLayout__ID,
    Msg_InstanceRequestAdapter__ID,
    Reply_InstanceRequestAdapter__ID,
    Msg_AdapterRequestDevice__ID,
    Msg_AdapterDestroy__ID,
    Msg_BufferReturnShmem__ID,
    Msg_BufferMap__ID,
    Reply_BufferMap__ID,
    Msg_BufferUnmap__ID,
    Msg_BufferDestroy__ID,
    Msg_TextureDestroy__ID,
    Msg_TextureViewDestroy__ID,
    Msg_SamplerDestroy__ID,
    Msg_DeviceDestroy__ID,
    Msg_CommandEncoderFinish__ID,
    Msg_CommandEncoderDestroy__ID,
    Msg_CommandBufferDestroy__ID,
    Msg_QueueSubmit__ID,
    Msg_QueueWriteBuffer__ID,
    Msg_QueueWriteTexture__ID,
    Msg_BindGroupLayoutDestroy__ID,
    Msg_PipelineLayoutDestroy__ID,
    Msg_BindGroupDestroy__ID,
    Msg_ShaderModuleDestroy__ID,
    Msg_ComputePipelineDestroy__ID,
    Msg_RenderPipelineDestroy__ID,
    Msg_DeviceCreateSwapChain__ID,
    Msg_SwapChainPresent__ID,
    Msg_SwapChainDestroy__ID,
    Msg_Shutdown__ID,
    Msg_Error__ID,
    Msg_DropAction__ID,
    Msg_FreeAdapter__ID,
    Msg_FreeDevice__ID,
    Msg_FreePipelineLayout__ID,
    Msg_FreeShaderModule__ID,
    Msg_FreeBindGroupLayout__ID,
    Msg_FreeBindGroup__ID,
    Msg_FreeCommandBuffer__ID,
    Msg_FreeRenderPipeline__ID,
    Msg_FreeComputePipeline__ID,
    Msg_FreeBuffer__ID,
    Msg_FreeTexture__ID,
    Msg_FreeTextureView__ID,
    Msg_FreeSampler__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PWebGPUEnd
};

IPC::Message*
Msg_DeviceAction(int32_t routingId);

IPC::Message*
Msg_TextureAction(int32_t routingId);

IPC::Message*
Msg_CommandEncoderAction(int32_t routingId);

IPC::Message*
Msg_BumpImplicitBindGroupLayout(int32_t routingId);

IPC::Message*
Msg_InstanceRequestAdapter(int32_t routingId);
IPC::Message*
Reply_InstanceRequestAdapter(int32_t routingId);

IPC::Message*
Msg_AdapterRequestDevice(int32_t routingId);

IPC::Message*
Msg_AdapterDestroy(int32_t routingId);

IPC::Message*
Msg_BufferReturnShmem(int32_t routingId);

IPC::Message*
Msg_BufferMap(int32_t routingId);
IPC::Message*
Reply_BufferMap(int32_t routingId);

IPC::Message*
Msg_BufferUnmap(int32_t routingId);

IPC::Message*
Msg_BufferDestroy(int32_t routingId);

IPC::Message*
Msg_TextureDestroy(int32_t routingId);

IPC::Message*
Msg_TextureViewDestroy(int32_t routingId);

IPC::Message*
Msg_SamplerDestroy(int32_t routingId);

IPC::Message*
Msg_DeviceDestroy(int32_t routingId);

IPC::Message*
Msg_CommandEncoderFinish(int32_t routingId);

IPC::Message*
Msg_CommandEncoderDestroy(int32_t routingId);

IPC::Message*
Msg_CommandBufferDestroy(int32_t routingId);

IPC::Message*
Msg_QueueSubmit(int32_t routingId);

IPC::Message*
Msg_QueueWriteBuffer(int32_t routingId);

IPC::Message*
Msg_QueueWriteTexture(int32_t routingId);

IPC::Message*
Msg_BindGroupLayoutDestroy(int32_t routingId);

IPC::Message*
Msg_PipelineLayoutDestroy(int32_t routingId);

IPC::Message*
Msg_BindGroupDestroy(int32_t routingId);

IPC::Message*
Msg_ShaderModuleDestroy(int32_t routingId);

IPC::Message*
Msg_ComputePipelineDestroy(int32_t routingId);

IPC::Message*
Msg_RenderPipelineDestroy(int32_t routingId);

IPC::Message*
Msg_DeviceCreateSwapChain(int32_t routingId);

IPC::Message*
Msg_SwapChainPresent(int32_t routingId);

IPC::Message*
Msg_SwapChainDestroy(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_Error(int32_t routingId);

IPC::Message*
Msg_DropAction(int32_t routingId);

IPC::Message*
Msg_FreeAdapter(int32_t routingId);

IPC::Message*
Msg_FreeDevice(int32_t routingId);

IPC::Message*
Msg_FreePipelineLayout(int32_t routingId);

IPC::Message*
Msg_FreeShaderModule(int32_t routingId);

IPC::Message*
Msg_FreeBindGroupLayout(int32_t routingId);

IPC::Message*
Msg_FreeBindGroup(int32_t routingId);

IPC::Message*
Msg_FreeCommandBuffer(int32_t routingId);

IPC::Message*
Msg_FreeRenderPipeline(int32_t routingId);

IPC::Message*
Msg_FreeComputePipeline(int32_t routingId);

IPC::Message*
Msg_FreeBuffer(int32_t routingId);

IPC::Message*
Msg_FreeTexture(int32_t routingId);

IPC::Message*
Msg_FreeTextureView(int32_t routingId);

IPC::Message*
Msg_FreeSampler(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PWebGPU
} // namespace webgpu
} // namespace mozilla

#endif // ifndef PWebGPU_h
