//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebGPUChild_h
#define PWebGPUChild_h

#include "mozilla/webgpu/PWebGPU.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/WebGPUBinding.h"
#include "mozilla/layers/LayersSurfaces.h"
#include "mozilla/webgpu/WebGPUTypes.h"
#include "mozilla/webgpu/ffi/wgpu.h"
#include "mozilla/webrender/WebRenderAPI.h"

namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace webgpu {


class PWebGPUChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::layers::PCompositorBridgeChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef wr::ExternalImageId ExternalImageId;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef dom::GPUCommandBufferDescriptor GPUCommandBufferDescriptor;
    typedef dom::GPUDeviceDescriptor GPUDeviceDescriptor;
    typedef dom::GPURequestAdapterOptions GPURequestAdapterOptions;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef layers::RGBDescriptor RGBDescriptor;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef webgpu::ffi::WGPUExtent3d WGPUExtent3d;
    typedef webgpu::ffi::WGPUHostMap WGPUHostMap;
    typedef webgpu::ffi::WGPUTextureCopyView WGPUTextureCopyView;
    typedef webgpu::ffi::WGPUTextureDataLayout WGPUTextureDataLayout;
    typedef mozilla::layers::PCompositorBridgeChild PCompositorBridgeChild;
    typedef mozilla::layers::PCompositorBridgeParent PCompositorBridgeParent;

public:
    typedef MozPromise<RawId, ResponseRejectReason, true> InstanceRequestAdapterPromise;
    typedef MozPromise<Shmem, ResponseRejectReason, true> BufferMapPromise;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PWebGPUChild();

    virtual ~PWebGPUChild();

public:
    PCompositorBridgeChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendDeviceAction(
            const RawId& selfId,
            ByteBuf&& buf);

    bool
    SendTextureAction(
            const RawId& selfId,
            const RawId& aDeviceId,
            ByteBuf&& buf);

    bool
    SendCommandEncoderAction(
            const RawId& selfId,
            const RawId& aDeviceId,
            ByteBuf&& buf);

    bool
    SendBumpImplicitBindGroupLayout(
            const RawId& pipelineId,
            const bool& isCompute,
            const uint32_t& index,
            const RawId& assignId);

    void
    SendInstanceRequestAdapter(
            const GPURequestAdapterOptions& options,
            const nsTArray<RawId>& ids,
            mozilla::ipc::ResolveCallback<RawId>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<InstanceRequestAdapterPromise>
    SendInstanceRequestAdapter(
            const GPURequestAdapterOptions& options,
            const nsTArray<RawId>& ids);

    bool
    SendAdapterRequestDevice(
            const RawId& selfId,
            const GPUDeviceDescriptor& desc,
            const RawId& newId);

    bool
    SendAdapterDestroy(const RawId& selfId);

    bool
    SendBufferReturnShmem(
            const RawId& selfId,
            Shmem&& shmem);

    void
    SendBufferMap(
            const RawId& selfId,
            const WGPUHostMap& hostMap,
            const uint64_t& offset,
            const uint64_t& size,
            mozilla::ipc::ResolveCallback<Shmem>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<BufferMapPromise>
    SendBufferMap(
            const RawId& selfId,
            const WGPUHostMap& hostMap,
            const uint64_t& offset,
            const uint64_t& size);

    bool
    SendBufferUnmap(
            const RawId& selfId,
            Shmem&& shmem,
            const bool& flush);

    bool
    SendBufferDestroy(const RawId& selfId);

    bool
    SendTextureDestroy(const RawId& selfId);

    bool
    SendTextureViewDestroy(const RawId& selfId);

    bool
    SendSamplerDestroy(const RawId& selfId);

    bool
    SendDeviceDestroy(const RawId& selfId);

    bool
    SendCommandEncoderFinish(
            const RawId& selfId,
            const RawId& deviceId,
            const GPUCommandBufferDescriptor& desc);

    bool
    SendCommandEncoderDestroy(const RawId& selfId);

    bool
    SendCommandBufferDestroy(const RawId& selfId);

    bool
    SendQueueSubmit(
            const RawId& selfId,
            const nsTArray<RawId>& commandBuffers);

    bool
    SendQueueWriteBuffer(
            const RawId& selfId,
            const RawId& bufferId,
            const BufferAddress& bufferOffset,
            Shmem&& shmem);

    bool
    SendQueueWriteTexture(
            const RawId& selfId,
            const WGPUTextureCopyView& destination,
            Shmem&& shmem,
            const WGPUTextureDataLayout& layout,
            const WGPUExtent3d& extent);

    bool
    SendBindGroupLayoutDestroy(const RawId& selfId);

    bool
    SendPipelineLayoutDestroy(const RawId& selfId);

    bool
    SendBindGroupDestroy(const RawId& selfId);

    bool
    SendShaderModuleDestroy(const RawId& selfId);

    bool
    SendComputePipelineDestroy(const RawId& selfId);

    bool
    SendRenderPipelineDestroy(const RawId& selfId);

    bool
    SendDeviceCreateSwapChain(
            const RawId& selfId,
            const RawId& queueId,
            const RGBDescriptor& desc,
            const nsTArray<RawId>& bufferIds,
            const ExternalImageId& externalId);

    bool
    SendSwapChainPresent(
            const ExternalImageId& externalId,
            const RawId& textureId,
            const RawId& commandEncoderId);

    bool
    SendSwapChainDestroy(const ExternalImageId& externalId);

    bool
    SendShutdown();

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace webgpu
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::webgpu::PWebGPUChild*>
{
    typedef mozilla::webgpu::PWebGPUChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PWebGPUChild_h
