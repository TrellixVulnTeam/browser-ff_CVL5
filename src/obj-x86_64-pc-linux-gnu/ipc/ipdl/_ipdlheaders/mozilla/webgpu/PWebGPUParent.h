//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebGPUParent_h
#define PWebGPUParent_h

#include "mozilla/webgpu/PWebGPU.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/WebGPUBinding.h"
#include "mozilla/layers/LayersSurfaces.h"
#include "mozilla/webgpu/WebGPUTypes.h"
#include "mozilla/webgpu/ffi/wgpu.h"
#include "mozilla/webrender/WebRenderAPI.h"

namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace webgpu {


class PWebGPUParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::layers::PCompositorBridgeParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef wr::ExternalImageId ExternalImageId;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef dom::GPUCommandBufferDescriptor GPUCommandBufferDescriptor;
    typedef dom::GPUDeviceDescriptor GPUDeviceDescriptor;
    typedef dom::GPURequestAdapterOptions GPURequestAdapterOptions;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef layers::RGBDescriptor RGBDescriptor;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef webgpu::ffi::WGPUExtent3d WGPUExtent3d;
    typedef webgpu::ffi::WGPUHostMap WGPUHostMap;
    typedef webgpu::ffi::WGPUTextureCopyView WGPUTextureCopyView;
    typedef webgpu::ffi::WGPUTextureDataLayout WGPUTextureDataLayout;
    typedef mozilla::layers::PCompositorBridgeParent PCompositorBridgeParent;
    typedef mozilla::layers::PCompositorBridgeChild PCompositorBridgeChild;

public:
    typedef std::function<void(const RawId&)> InstanceRequestAdapterResolver;
    typedef std::function<void(Shmem&&)> BufferMapResolver;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PWebGPUParent();

    virtual ~PWebGPUParent();

public:
    PCompositorBridgeParent*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendError(
            const RawId& aDeviceId,
            const nsCString& message);

    [[nodiscard]] bool
    SendDropAction(ByteBuf&& buf);

    [[nodiscard]] bool
    SendFreeAdapter(const RawId& id);

    [[nodiscard]] bool
    SendFreeDevice(const RawId& id);

    [[nodiscard]] bool
    SendFreePipelineLayout(const RawId& id);

    [[nodiscard]] bool
    SendFreeShaderModule(const RawId& id);

    [[nodiscard]] bool
    SendFreeBindGroupLayout(const RawId& id);

    [[nodiscard]] bool
    SendFreeBindGroup(const RawId& id);

    [[nodiscard]] bool
    SendFreeCommandBuffer(const RawId& id);

    [[nodiscard]] bool
    SendFreeRenderPipeline(const RawId& id);

    [[nodiscard]] bool
    SendFreeComputePipeline(const RawId& id);

    [[nodiscard]] bool
    SendFreeBuffer(const RawId& id);

    [[nodiscard]] bool
    SendFreeTexture(const RawId& id);

    [[nodiscard]] bool
    SendFreeTextureView(const RawId& id);

    [[nodiscard]] bool
    SendFreeSampler(const RawId& id);

    [[nodiscard]] static bool
    Send__delete__(PWebGPUParent* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace webgpu
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::webgpu::PWebGPUParent*>
{
    typedef mozilla::webgpu::PWebGPUParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PWebGPUParent_h
