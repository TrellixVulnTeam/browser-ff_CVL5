//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PClientSource_h
#define PClientSource_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/ClientIPCTypes.h"

namespace mozilla {
namespace dom {
class PClientSourceParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PClientSourceChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PClientSourceChild and PClientSourceParent
//
namespace mozilla {
namespace dom {
namespace PClientSource {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PClientSourceParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PClientSourceChild>* aChild);

enum MessageType {
    PClientSourceStart = PClientSourceMsgStart << 16,
    Msg_WorkerSyncPing__ID,
    Reply_WorkerSyncPing__ID,
    Msg_Teardown__ID,
    Msg_ExecutionReady__ID,
    Msg_Freeze__ID,
    Msg_Thaw__ID,
    Msg_InheritController__ID,
    Msg_NoteDOMContentLoaded__ID,
    Msg_PClientSourceOpConstructor__ID,
    Reply_PClientSourceOpConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PClientSourceEnd
};

IPC::Message*
Msg_WorkerSyncPing(int32_t routingId);
IPC::Message*
Reply_WorkerSyncPing(int32_t routingId);

IPC::Message*
Msg_Teardown(int32_t routingId);

IPC::Message*
Msg_ExecutionReady(int32_t routingId);

IPC::Message*
Msg_Freeze(int32_t routingId);

IPC::Message*
Msg_Thaw(int32_t routingId);

IPC::Message*
Msg_InheritController(int32_t routingId);

IPC::Message*
Msg_NoteDOMContentLoaded(int32_t routingId);

IPC::Message*
Msg_PClientSourceOpConstructor(int32_t routingId);
IPC::Message*
Reply_PClientSourceOpConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PClientSource
} // namespace dom
} // namespace mozilla

#endif // ifndef PClientSource_h
