//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PClientManager_h
#define PClientManager_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/ClientIPCTypes.h"

namespace mozilla {
namespace dom {
class PClientManagerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PClientManagerChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PClientManagerChild and PClientManagerParent
//
namespace mozilla {
namespace dom {
namespace PClientManager {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PClientManagerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PClientManagerChild>* aChild);

enum MessageType {
    PClientManagerStart = PClientManagerMsgStart << 16,
    Msg_Teardown__ID,
    Msg_PClientHandleConstructor__ID,
    Reply_PClientHandleConstructor__ID,
    Msg_PClientManagerOpConstructor__ID,
    Reply_PClientManagerOpConstructor__ID,
    Msg_PClientSourceConstructor__ID,
    Reply_PClientSourceConstructor__ID,
    Msg_PClientNavigateOpConstructor__ID,
    Reply_PClientNavigateOpConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PClientManagerEnd
};

IPC::Message*
Msg_Teardown(int32_t routingId);

IPC::Message*
Msg_PClientHandleConstructor(int32_t routingId);
IPC::Message*
Reply_PClientHandleConstructor(int32_t routingId);

IPC::Message*
Msg_PClientManagerOpConstructor(int32_t routingId);
IPC::Message*
Reply_PClientManagerOpConstructor(int32_t routingId);

IPC::Message*
Msg_PClientSourceConstructor(int32_t routingId);
IPC::Message*
Reply_PClientSourceConstructor(int32_t routingId);

IPC::Message*
Msg_PClientNavigateOpConstructor(int32_t routingId);
IPC::Message*
Reply_PClientNavigateOpConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PClientManager
} // namespace dom
} // namespace mozilla

#endif // ifndef PClientManager_h
