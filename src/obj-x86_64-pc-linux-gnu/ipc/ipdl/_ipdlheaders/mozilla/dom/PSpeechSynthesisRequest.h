//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSpeechSynthesisRequest_h
#define PSpeechSynthesisRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace dom {
class PSpeechSynthesisRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSpeechSynthesisRequestChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PSpeechSynthesisRequestChild and PSpeechSynthesisRequestParent
//
namespace mozilla {
namespace dom {
namespace PSpeechSynthesisRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PSpeechSynthesisRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PSpeechSynthesisRequestChild>* aChild);

enum MessageType {
    PSpeechSynthesisRequestStart = PSpeechSynthesisRequestMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Pause__ID,
    Msg_Resume__ID,
    Msg_Cancel__ID,
    Msg_ForceEnd__ID,
    Msg_SetAudioOutputVolume__ID,
    Msg_OnEnd__ID,
    Msg_OnStart__ID,
    Msg_OnPause__ID,
    Msg_OnResume__ID,
    Msg_OnBoundary__ID,
    Msg_OnMark__ID,
    PSpeechSynthesisRequestEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Pause(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);

IPC::Message*
Msg_Cancel(int32_t routingId);

IPC::Message*
Msg_ForceEnd(int32_t routingId);

IPC::Message*
Msg_SetAudioOutputVolume(int32_t routingId);

IPC::Message*
Msg_OnEnd(int32_t routingId);

IPC::Message*
Msg_OnStart(int32_t routingId);

IPC::Message*
Msg_OnPause(int32_t routingId);

IPC::Message*
Msg_OnResume(int32_t routingId);

IPC::Message*
Msg_OnBoundary(int32_t routingId);

IPC::Message*
Msg_OnMark(int32_t routingId);



} // namespace PSpeechSynthesisRequest
} // namespace dom
} // namespace mozilla

#endif // ifndef PSpeechSynthesisRequest_h
