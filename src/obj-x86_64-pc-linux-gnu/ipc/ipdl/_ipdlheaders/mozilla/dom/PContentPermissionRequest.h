//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PContentPermissionRequest_h
#define PContentPermissionRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/PContentPermission.h"

namespace mozilla {
namespace dom {
class PContentPermissionRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentPermissionRequestChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PContentPermissionRequestChild and PContentPermissionRequestParent
//
namespace mozilla {
namespace dom {
namespace PContentPermissionRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PContentPermissionRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PContentPermissionRequestChild>* aChild);

enum MessageType {
    PContentPermissionRequestStart = PContentPermissionRequestMsgStart << 16,
    Msg_prompt__ID,
    Msg_Destroy__ID,
    Msg_NotifyResult__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PContentPermissionRequestEnd
};

IPC::Message*
Msg_prompt(int32_t routingId);

IPC::Message*
Msg_Destroy(int32_t routingId);

IPC::Message*
Msg_NotifyResult(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PContentPermissionRequest
} // namespace dom
} // namespace mozilla

#endif // ifndef PContentPermissionRequest_h
