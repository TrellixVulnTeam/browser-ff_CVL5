//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PURLClassifierLocal_h
#define PURLClassifierLocal_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "nsIURI.h"
#include "mozilla/dom/PURLClassifierInfo.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct URLClassifierLocalResult|
//
namespace mozilla {
namespace dom {
class URLClassifierLocalResult final
{
private:

public:
    MOZ_IMPLICIT URLClassifierLocalResult() :
        uri_(),
        featureName_(),
        matchingList_()
    {
    }

    MOZ_IMPLICIT URLClassifierLocalResult(
            nsIURI* _uri,
            const nsCString& _featureName,
            const nsCString& _matchingList) :
        uri_(_uri),
        featureName_(_featureName),
        matchingList_(_matchingList)
    {
    }

    RefPtr<nsIURI>&
    uri()
    {
        return uri_;
    }
    nsIURI*
    uri() const
    {
        return uri_;
    }

    nsCString&
    featureName()
    {
        return featureName_;
    }
    const nsCString&
    featureName() const
    {
        return featureName_;
    }

    nsCString&
    matchingList()
    {
        return matchingList_;
    }
    const nsCString&
    matchingList() const
    {
        return matchingList_;
    }

private:
    RefPtr<nsIURI> uri_;
    nsCString featureName_;
    nsCString matchingList_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::URLClassifierLocalResult>
{
    typedef mozilla::dom::URLClassifierLocalResult paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierLocalParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PURLClassifierLocalChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PURLClassifierLocalChild and PURLClassifierLocalParent
//
namespace mozilla {
namespace dom {
namespace PURLClassifierLocal {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PURLClassifierLocalParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PURLClassifierLocalChild>* aChild);

enum MessageType {
    PURLClassifierLocalStart = PURLClassifierLocalMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    PURLClassifierLocalEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PURLClassifierLocal
} // namespace dom
} // namespace mozilla

#endif // ifndef PURLClassifierLocal_h
