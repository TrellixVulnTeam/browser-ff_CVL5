//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundSDBConnection_h
#define PBackgroundSDBConnection_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestOpenParams|
//
namespace mozilla {
namespace dom {
class SDBRequestOpenParams final
{
private:

public:
    MOZ_IMPLICIT SDBRequestOpenParams() :
        name_()
    {
    }

    MOZ_IMPLICIT SDBRequestOpenParams(const nsString& _name) :
        name_(_name)
    {
    }

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

private:
    nsString name_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestOpenParams>
{
    typedef mozilla::dom::SDBRequestOpenParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestSeekParams|
//
namespace mozilla {
namespace dom {
class SDBRequestSeekParams final
{
private:

public:
    MOZ_IMPLICIT SDBRequestSeekParams() :
        offset_()
    {
    }

    MOZ_IMPLICIT SDBRequestSeekParams(const uint64_t& _offset) :
        offset_(_offset)
    {
    }

    uint64_t&
    offset()
    {
        return offset_;
    }
    const uint64_t&
    offset() const
    {
        return offset_;
    }

private:
    uint64_t offset_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestSeekParams>
{
    typedef mozilla::dom::SDBRequestSeekParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestReadParams|
//
namespace mozilla {
namespace dom {
class SDBRequestReadParams final
{
private:

public:
    MOZ_IMPLICIT SDBRequestReadParams() :
        size_()
    {
    }

    MOZ_IMPLICIT SDBRequestReadParams(const uint64_t& _size) :
        size_(_size)
    {
    }

    uint64_t&
    size()
    {
        return size_;
    }
    const uint64_t&
    size() const
    {
        return size_;
    }

private:
    uint64_t size_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestReadParams>
{
    typedef mozilla::dom::SDBRequestReadParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestWriteParams|
//
namespace mozilla {
namespace dom {
class SDBRequestWriteParams final
{
private:

public:
    MOZ_IMPLICIT SDBRequestWriteParams() :
        data_()
    {
    }

    MOZ_IMPLICIT SDBRequestWriteParams(const nsCString& _data) :
        data_(_data)
    {
    }

    nsCString&
    data()
    {
        return data_;
    }
    const nsCString&
    data() const
    {
        return data_;
    }

private:
    nsCString data_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestWriteParams>
{
    typedef mozilla::dom::SDBRequestWriteParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestCloseParams|
//
namespace mozilla {
namespace dom {
class SDBRequestCloseParams final
{
private:

public:
    MOZ_IMPLICIT SDBRequestCloseParams()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestCloseParams>
{
    typedef mozilla::dom::SDBRequestCloseParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union SDBRequestParams|
//
namespace mozilla {
namespace dom {
class SDBRequestParams final
{
public:
    enum Type {
        T__None,
        TSDBRequestOpenParams = 1,
        TSDBRequestSeekParams,
        TSDBRequestReadParams,
        TSDBRequestWriteParams,
        TSDBRequestCloseParams,
        T__Last = TSDBRequestCloseParams
    };

private:
    typedef mozilla::dom::SDBRequestOpenParams SDBRequestOpenParams;
    typedef mozilla::dom::SDBRequestSeekParams SDBRequestSeekParams;
    typedef mozilla::dom::SDBRequestReadParams SDBRequestReadParams;
    typedef mozilla::dom::SDBRequestWriteParams SDBRequestWriteParams;
    typedef mozilla::dom::SDBRequestCloseParams SDBRequestCloseParams;
    typedef SDBRequestOpenParams SDBRequestOpenParams__tdef;
    typedef SDBRequestSeekParams SDBRequestSeekParams__tdef;
    typedef SDBRequestReadParams SDBRequestReadParams__tdef;
    typedef SDBRequestWriteParams SDBRequestWriteParams__tdef;
    typedef SDBRequestCloseParams SDBRequestCloseParams__tdef;

    union Value {
        mozilla::AlignedStorage2<SDBRequestOpenParams> VSDBRequestOpenParams;
        mozilla::AlignedStorage2<SDBRequestSeekParams> VSDBRequestSeekParams;
        mozilla::AlignedStorage2<SDBRequestReadParams> VSDBRequestReadParams;
        mozilla::AlignedStorage2<SDBRequestWriteParams> VSDBRequestWriteParams;
        mozilla::AlignedStorage2<SDBRequestCloseParams> VSDBRequestCloseParams;
    };

    SDBRequestOpenParams*
    ptr_SDBRequestOpenParams()
    {
        return ((mValue).VSDBRequestOpenParams).addr();
    }
    const SDBRequestOpenParams*
    constptr_SDBRequestOpenParams() const
    {
        return ((mValue).VSDBRequestOpenParams).addr();
    }
    SDBRequestSeekParams*
    ptr_SDBRequestSeekParams()
    {
        return ((mValue).VSDBRequestSeekParams).addr();
    }
    const SDBRequestSeekParams*
    constptr_SDBRequestSeekParams() const
    {
        return ((mValue).VSDBRequestSeekParams).addr();
    }
    SDBRequestReadParams*
    ptr_SDBRequestReadParams()
    {
        return ((mValue).VSDBRequestReadParams).addr();
    }
    const SDBRequestReadParams*
    constptr_SDBRequestReadParams() const
    {
        return ((mValue).VSDBRequestReadParams).addr();
    }
    SDBRequestWriteParams*
    ptr_SDBRequestWriteParams()
    {
        return ((mValue).VSDBRequestWriteParams).addr();
    }
    const SDBRequestWriteParams*
    constptr_SDBRequestWriteParams() const
    {
        return ((mValue).VSDBRequestWriteParams).addr();
    }
    SDBRequestCloseParams*
    ptr_SDBRequestCloseParams()
    {
        return ((mValue).VSDBRequestCloseParams).addr();
    }
    const SDBRequestCloseParams*
    constptr_SDBRequestCloseParams() const
    {
        return ((mValue).VSDBRequestCloseParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT SDBRequestParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT SDBRequestParams(const SDBRequestOpenParams& aOther);

    MOZ_IMPLICIT SDBRequestParams(SDBRequestOpenParams&& aOther);

    MOZ_IMPLICIT SDBRequestParams(const SDBRequestSeekParams& aOther);

    MOZ_IMPLICIT SDBRequestParams(SDBRequestSeekParams&& aOther);

    MOZ_IMPLICIT SDBRequestParams(const SDBRequestReadParams& aOther);

    MOZ_IMPLICIT SDBRequestParams(SDBRequestReadParams&& aOther);

    MOZ_IMPLICIT SDBRequestParams(const SDBRequestWriteParams& aOther);

    MOZ_IMPLICIT SDBRequestParams(SDBRequestWriteParams&& aOther);

    MOZ_IMPLICIT SDBRequestParams(const SDBRequestCloseParams& aOther);

    MOZ_IMPLICIT SDBRequestParams(SDBRequestCloseParams&& aOther);

    MOZ_IMPLICIT SDBRequestParams(const SDBRequestParams& aOther);

    MOZ_IMPLICIT SDBRequestParams(SDBRequestParams&& aOther);

    ~SDBRequestParams();

    Type
    type() const
    {
        return mType;
    }

    SDBRequestParams&
    operator=(const SDBRequestOpenParams& aRhs);

    SDBRequestParams&
    operator=(SDBRequestOpenParams&& aRhs);

    SDBRequestParams&
    operator=(const SDBRequestSeekParams& aRhs);

    SDBRequestParams&
    operator=(SDBRequestSeekParams&& aRhs);

    SDBRequestParams&
    operator=(const SDBRequestReadParams& aRhs);

    SDBRequestParams&
    operator=(SDBRequestReadParams&& aRhs);

    SDBRequestParams&
    operator=(const SDBRequestWriteParams& aRhs);

    SDBRequestParams&
    operator=(SDBRequestWriteParams&& aRhs);

    SDBRequestParams&
    operator=(const SDBRequestCloseParams& aRhs);

    SDBRequestParams&
    operator=(SDBRequestCloseParams&& aRhs);

    SDBRequestParams&
    operator=(const SDBRequestParams& aRhs);

    SDBRequestParams&
    operator=(SDBRequestParams&& aRhs);

    SDBRequestOpenParams&
    get_SDBRequestOpenParams()
    {
        AssertSanity(TSDBRequestOpenParams);
        return (*(ptr_SDBRequestOpenParams()));
    }
    const SDBRequestOpenParams&
    get_SDBRequestOpenParams() const
    {
        AssertSanity(TSDBRequestOpenParams);
        return (*(constptr_SDBRequestOpenParams()));
    }
    operator SDBRequestOpenParams&()
    {
        return get_SDBRequestOpenParams();
    }
    operator const SDBRequestOpenParams&() const
    {
        return get_SDBRequestOpenParams();
    }

    SDBRequestSeekParams&
    get_SDBRequestSeekParams()
    {
        AssertSanity(TSDBRequestSeekParams);
        return (*(ptr_SDBRequestSeekParams()));
    }
    const SDBRequestSeekParams&
    get_SDBRequestSeekParams() const
    {
        AssertSanity(TSDBRequestSeekParams);
        return (*(constptr_SDBRequestSeekParams()));
    }
    operator SDBRequestSeekParams&()
    {
        return get_SDBRequestSeekParams();
    }
    operator const SDBRequestSeekParams&() const
    {
        return get_SDBRequestSeekParams();
    }

    SDBRequestReadParams&
    get_SDBRequestReadParams()
    {
        AssertSanity(TSDBRequestReadParams);
        return (*(ptr_SDBRequestReadParams()));
    }
    const SDBRequestReadParams&
    get_SDBRequestReadParams() const
    {
        AssertSanity(TSDBRequestReadParams);
        return (*(constptr_SDBRequestReadParams()));
    }
    operator SDBRequestReadParams&()
    {
        return get_SDBRequestReadParams();
    }
    operator const SDBRequestReadParams&() const
    {
        return get_SDBRequestReadParams();
    }

    SDBRequestWriteParams&
    get_SDBRequestWriteParams()
    {
        AssertSanity(TSDBRequestWriteParams);
        return (*(ptr_SDBRequestWriteParams()));
    }
    const SDBRequestWriteParams&
    get_SDBRequestWriteParams() const
    {
        AssertSanity(TSDBRequestWriteParams);
        return (*(constptr_SDBRequestWriteParams()));
    }
    operator SDBRequestWriteParams&()
    {
        return get_SDBRequestWriteParams();
    }
    operator const SDBRequestWriteParams&() const
    {
        return get_SDBRequestWriteParams();
    }

    SDBRequestCloseParams&
    get_SDBRequestCloseParams()
    {
        AssertSanity(TSDBRequestCloseParams);
        return (*(ptr_SDBRequestCloseParams()));
    }
    const SDBRequestCloseParams&
    get_SDBRequestCloseParams() const
    {
        AssertSanity(TSDBRequestCloseParams);
        return (*(constptr_SDBRequestCloseParams()));
    }
    operator SDBRequestCloseParams&()
    {
        return get_SDBRequestCloseParams();
    }
    operator const SDBRequestCloseParams&() const
    {
        return get_SDBRequestCloseParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestParams>
{
    typedef mozilla::dom::SDBRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSDBConnectionParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundSDBConnectionChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundSDBConnectionChild and PBackgroundSDBConnectionParent
//
namespace mozilla {
namespace dom {
namespace PBackgroundSDBConnection {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundSDBConnectionParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundSDBConnectionChild>* aChild);

enum MessageType {
    PBackgroundSDBConnectionStart = PBackgroundSDBConnectionMsgStart << 16,
    Msg_DeleteMe__ID,
    Msg_PBackgroundSDBRequestConstructor__ID,
    Reply_PBackgroundSDBRequestConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_AllowToClose__ID,
    Msg_Closed__ID,
    PBackgroundSDBConnectionEnd
};

IPC::Message*
Msg_DeleteMe(int32_t routingId);

IPC::Message*
Msg_PBackgroundSDBRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundSDBRequestConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_AllowToClose(int32_t routingId);

IPC::Message*
Msg_Closed(int32_t routingId);



} // namespace PBackgroundSDBConnection
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundSDBConnection_h
