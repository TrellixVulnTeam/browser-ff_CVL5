//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PMediaTransport_h
#define PMediaTransport_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/net/WebrtcProxyConfig.h"

namespace mozilla {
namespace dom {
class PMediaTransportParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMediaTransportChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PMediaTransportChild and PMediaTransportParent
//
namespace mozilla {
namespace dom {
namespace PMediaTransport {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PMediaTransportParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PMediaTransportChild>* aChild);

enum MessageType {
    PMediaTransportStart = PMediaTransportMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_GetIceLog__ID,
    Reply_GetIceLog__ID,
    Msg_ClearIceLog__ID,
    Msg_EnterPrivateMode__ID,
    Msg_ExitPrivateMode__ID,
    Msg_CreateIceCtx__ID,
    Msg_SetProxyConfig__ID,
    Msg_EnsureProvisionalTransport__ID,
    Msg_SetTargetForDefaultLocalAddressLookup__ID,
    Msg_StartIceGathering__ID,
    Msg_ActivateTransport__ID,
    Msg_RemoveTransportsExcept__ID,
    Msg_StartIceChecks__ID,
    Msg_SendPacket__ID,
    Msg_AddIceCandidate__ID,
    Msg_UpdateNetworkState__ID,
    Msg_GetIceStats__ID,
    Reply_GetIceStats__ID,
    Msg_OnCandidate__ID,
    Msg_OnAlpnNegotiated__ID,
    Msg_OnGatheringStateChange__ID,
    Msg_OnConnectionStateChange__ID,
    Msg_OnPacketReceived__ID,
    Msg_OnEncryptedSending__ID,
    Msg_OnStateChange__ID,
    Msg_OnRtcpStateChange__ID,
    PMediaTransportEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_GetIceLog(int32_t routingId);
IPC::Message*
Reply_GetIceLog(int32_t routingId);

IPC::Message*
Msg_ClearIceLog(int32_t routingId);

IPC::Message*
Msg_EnterPrivateMode(int32_t routingId);

IPC::Message*
Msg_ExitPrivateMode(int32_t routingId);

IPC::Message*
Msg_CreateIceCtx(int32_t routingId);

IPC::Message*
Msg_SetProxyConfig(int32_t routingId);

IPC::Message*
Msg_EnsureProvisionalTransport(int32_t routingId);

IPC::Message*
Msg_SetTargetForDefaultLocalAddressLookup(int32_t routingId);

IPC::Message*
Msg_StartIceGathering(int32_t routingId);

IPC::Message*
Msg_ActivateTransport(int32_t routingId);

IPC::Message*
Msg_RemoveTransportsExcept(int32_t routingId);

IPC::Message*
Msg_StartIceChecks(int32_t routingId);

IPC::Message*
Msg_SendPacket(int32_t routingId);

IPC::Message*
Msg_AddIceCandidate(int32_t routingId);

IPC::Message*
Msg_UpdateNetworkState(int32_t routingId);

IPC::Message*
Msg_GetIceStats(int32_t routingId);
IPC::Message*
Reply_GetIceStats(int32_t routingId);

IPC::Message*
Msg_OnCandidate(int32_t routingId);

IPC::Message*
Msg_OnAlpnNegotiated(int32_t routingId);

IPC::Message*
Msg_OnGatheringStateChange(int32_t routingId);

IPC::Message*
Msg_OnConnectionStateChange(int32_t routingId);

IPC::Message*
Msg_OnPacketReceived(int32_t routingId);

IPC::Message*
Msg_OnEncryptedSending(int32_t routingId);

IPC::Message*
Msg_OnStateChange(int32_t routingId);

IPC::Message*
Msg_OnRtcpStateChange(int32_t routingId);



} // namespace PMediaTransport
} // namespace dom
} // namespace mozilla

#endif // ifndef PMediaTransport_h
