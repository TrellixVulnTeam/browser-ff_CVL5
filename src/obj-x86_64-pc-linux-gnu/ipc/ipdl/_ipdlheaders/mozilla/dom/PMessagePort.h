//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PMessagePort_h
#define PMessagePort_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/DOMTypes.h"
#include "mozilla/ipc/ProtocolTypes.h"

namespace mozilla {
namespace dom {
class PMessagePortParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMessagePortChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PMessagePortChild and PMessagePortParent
//
namespace mozilla {
namespace dom {
namespace PMessagePort {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PMessagePortParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PMessagePortChild>* aChild);

enum MessageType {
    PMessagePortStart = PMessagePortMsgStart << 16,
    Msg_PostMessages__ID,
    Msg_Disentangle__ID,
    Msg_StopSendingData__ID,
    Msg_Close__ID,
    Msg_Entangled__ID,
    Msg_ReceiveData__ID,
    Msg_StopSendingDataConfirmed__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PMessagePortEnd
};

IPC::Message*
Msg_PostMessages(int32_t routingId);

IPC::Message*
Msg_Disentangle(int32_t routingId);

IPC::Message*
Msg_StopSendingData(int32_t routingId);

IPC::Message*
Msg_Close(int32_t routingId);

IPC::Message*
Msg_Entangled(int32_t routingId);

IPC::Message*
Msg_ReceiveData(int32_t routingId);

IPC::Message*
Msg_StopSendingDataConfirmed(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PMessagePort
} // namespace dom
} // namespace mozilla

#endif // ifndef PMessagePort_h
