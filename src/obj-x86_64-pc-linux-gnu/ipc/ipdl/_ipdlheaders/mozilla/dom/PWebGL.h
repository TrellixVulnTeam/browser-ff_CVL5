//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebGL_h
#define PWebGL_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace dom {
class PWebGLParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWebGLChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PWebGLChild and PWebGLParent
//
namespace mozilla {
namespace dom {
namespace PWebGL {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PWebGLParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PWebGLChild>* aChild);

enum MessageType {
    PWebGLStart = PWebGLMsgStart << 16,
    Msg_Initialize__ID,
    Reply_Initialize__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_DispatchCommands__ID,
    Msg_GetBufferSubData__ID,
    Reply_GetBufferSubData__ID,
    Msg_GetFrontBufferSnapshot__ID,
    Reply_GetFrontBufferSnapshot__ID,
    Msg_ReadPixels__ID,
    Reply_ReadPixels__ID,
    Msg_CheckFramebufferStatus__ID,
    Reply_CheckFramebufferStatus__ID,
    Msg_ClientWaitSync__ID,
    Reply_ClientWaitSync__ID,
    Msg_CreateOpaqueFramebuffer__ID,
    Reply_CreateOpaqueFramebuffer__ID,
    Msg_DrawingBufferSize__ID,
    Reply_DrawingBufferSize__ID,
    Msg_Finish__ID,
    Reply_Finish__ID,
    Msg_GetBufferParameter__ID,
    Reply_GetBufferParameter__ID,
    Msg_GetCompileResult__ID,
    Reply_GetCompileResult__ID,
    Msg_GetError__ID,
    Reply_GetError__ID,
    Msg_GetFragDataLocation__ID,
    Reply_GetFragDataLocation__ID,
    Msg_GetFramebufferAttachmentParameter__ID,
    Reply_GetFramebufferAttachmentParameter__ID,
    Msg_GetFrontBuffer__ID,
    Reply_GetFrontBuffer__ID,
    Msg_GetIndexedParameter__ID,
    Reply_GetIndexedParameter__ID,
    Msg_GetInternalformatParameter__ID,
    Reply_GetInternalformatParameter__ID,
    Msg_GetLinkResult__ID,
    Reply_GetLinkResult__ID,
    Msg_GetNumber__ID,
    Reply_GetNumber__ID,
    Msg_GetQueryParameter__ID,
    Reply_GetQueryParameter__ID,
    Msg_GetRenderbufferParameter__ID,
    Reply_GetRenderbufferParameter__ID,
    Msg_GetSamplerParameter__ID,
    Reply_GetSamplerParameter__ID,
    Msg_GetShaderPrecisionFormat__ID,
    Reply_GetShaderPrecisionFormat__ID,
    Msg_GetString__ID,
    Reply_GetString__ID,
    Msg_GetTexParameter__ID,
    Reply_GetTexParameter__ID,
    Msg_GetUniform__ID,
    Reply_GetUniform__ID,
    Msg_GetVertexAttrib__ID,
    Reply_GetVertexAttrib__ID,
    Msg_IsEnabled__ID,
    Reply_IsEnabled__ID,
    Msg_OnMemoryPressure__ID,
    Reply_OnMemoryPressure__ID,
    Msg_ValidateProgram__ID,
    Reply_ValidateProgram__ID,
    Msg_JsWarning__ID,
    Msg_OnContextLoss__ID,
    PWebGLEnd
};

IPC::Message*
Msg_Initialize(int32_t routingId);
IPC::Message*
Reply_Initialize(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_DispatchCommands(int32_t routingId);

IPC::Message*
Msg_GetBufferSubData(int32_t routingId);
IPC::Message*
Reply_GetBufferSubData(int32_t routingId);

IPC::Message*
Msg_GetFrontBufferSnapshot(int32_t routingId);
IPC::Message*
Reply_GetFrontBufferSnapshot(int32_t routingId);

IPC::Message*
Msg_ReadPixels(int32_t routingId);
IPC::Message*
Reply_ReadPixels(int32_t routingId);

IPC::Message*
Msg_CheckFramebufferStatus(int32_t routingId);
IPC::Message*
Reply_CheckFramebufferStatus(int32_t routingId);

IPC::Message*
Msg_ClientWaitSync(int32_t routingId);
IPC::Message*
Reply_ClientWaitSync(int32_t routingId);

IPC::Message*
Msg_CreateOpaqueFramebuffer(int32_t routingId);
IPC::Message*
Reply_CreateOpaqueFramebuffer(int32_t routingId);

IPC::Message*
Msg_DrawingBufferSize(int32_t routingId);
IPC::Message*
Reply_DrawingBufferSize(int32_t routingId);

IPC::Message*
Msg_Finish(int32_t routingId);
IPC::Message*
Reply_Finish(int32_t routingId);

IPC::Message*
Msg_GetBufferParameter(int32_t routingId);
IPC::Message*
Reply_GetBufferParameter(int32_t routingId);

IPC::Message*
Msg_GetCompileResult(int32_t routingId);
IPC::Message*
Reply_GetCompileResult(int32_t routingId);

IPC::Message*
Msg_GetError(int32_t routingId);
IPC::Message*
Reply_GetError(int32_t routingId);

IPC::Message*
Msg_GetFragDataLocation(int32_t routingId);
IPC::Message*
Reply_GetFragDataLocation(int32_t routingId);

IPC::Message*
Msg_GetFramebufferAttachmentParameter(int32_t routingId);
IPC::Message*
Reply_GetFramebufferAttachmentParameter(int32_t routingId);

IPC::Message*
Msg_GetFrontBuffer(int32_t routingId);
IPC::Message*
Reply_GetFrontBuffer(int32_t routingId);

IPC::Message*
Msg_GetIndexedParameter(int32_t routingId);
IPC::Message*
Reply_GetIndexedParameter(int32_t routingId);

IPC::Message*
Msg_GetInternalformatParameter(int32_t routingId);
IPC::Message*
Reply_GetInternalformatParameter(int32_t routingId);

IPC::Message*
Msg_GetLinkResult(int32_t routingId);
IPC::Message*
Reply_GetLinkResult(int32_t routingId);

IPC::Message*
Msg_GetNumber(int32_t routingId);
IPC::Message*
Reply_GetNumber(int32_t routingId);

IPC::Message*
Msg_GetQueryParameter(int32_t routingId);
IPC::Message*
Reply_GetQueryParameter(int32_t routingId);

IPC::Message*
Msg_GetRenderbufferParameter(int32_t routingId);
IPC::Message*
Reply_GetRenderbufferParameter(int32_t routingId);

IPC::Message*
Msg_GetSamplerParameter(int32_t routingId);
IPC::Message*
Reply_GetSamplerParameter(int32_t routingId);

IPC::Message*
Msg_GetShaderPrecisionFormat(int32_t routingId);
IPC::Message*
Reply_GetShaderPrecisionFormat(int32_t routingId);

IPC::Message*
Msg_GetString(int32_t routingId);
IPC::Message*
Reply_GetString(int32_t routingId);

IPC::Message*
Msg_GetTexParameter(int32_t routingId);
IPC::Message*
Reply_GetTexParameter(int32_t routingId);

IPC::Message*
Msg_GetUniform(int32_t routingId);
IPC::Message*
Reply_GetUniform(int32_t routingId);

IPC::Message*
Msg_GetVertexAttrib(int32_t routingId);
IPC::Message*
Reply_GetVertexAttrib(int32_t routingId);

IPC::Message*
Msg_IsEnabled(int32_t routingId);
IPC::Message*
Reply_IsEnabled(int32_t routingId);

IPC::Message*
Msg_OnMemoryPressure(int32_t routingId);
IPC::Message*
Reply_OnMemoryPressure(int32_t routingId);

IPC::Message*
Msg_ValidateProgram(int32_t routingId);
IPC::Message*
Reply_ValidateProgram(int32_t routingId);

IPC::Message*
Msg_JsWarning(int32_t routingId);

IPC::Message*
Msg_OnContextLoss(int32_t routingId);



} // namespace PWebGL
} // namespace dom
} // namespace mozilla

#endif // ifndef PWebGL_h
