//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundLSSharedTypes_h
#define PBackgroundLSSharedTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/LSValue.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"
#include "mozilla/ipc/ProtocolTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSRequestCommonParams|
//
namespace mozilla {
namespace dom {
class LSRequestCommonParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT LSRequestCommonParams() :
        principalInfo_(),
        storagePrincipalInfo_(),
        originKey_()
    {
    }

    MOZ_IMPLICIT LSRequestCommonParams(
            const PrincipalInfo& _principalInfo,
            const PrincipalInfo& _storagePrincipalInfo,
            const nsCString& _originKey) :
        principalInfo_(_principalInfo),
        storagePrincipalInfo_(_storagePrincipalInfo),
        originKey_(_originKey)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

    PrincipalInfo&
    storagePrincipalInfo()
    {
        return storagePrincipalInfo_;
    }
    const PrincipalInfo&
    storagePrincipalInfo() const
    {
        return storagePrincipalInfo_;
    }

    nsCString&
    originKey()
    {
        return originKey_;
    }
    const nsCString&
    originKey() const
    {
        return originKey_;
    }

private:
    PrincipalInfo principalInfo_;
    PrincipalInfo storagePrincipalInfo_;
    nsCString originKey_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestCommonParams>
{
    typedef mozilla::dom::LSRequestCommonParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSRequestPreloadDatastoreParams|
//
namespace mozilla {
namespace dom {
class LSRequestPreloadDatastoreParams final
{
private:
    typedef mozilla::dom::LSRequestCommonParams LSRequestCommonParams;

public:
    MOZ_IMPLICIT LSRequestPreloadDatastoreParams() :
        commonParams_()
    {
    }

    MOZ_IMPLICIT LSRequestPreloadDatastoreParams(const LSRequestCommonParams& _commonParams) :
        commonParams_(_commonParams)
    {
    }

    LSRequestCommonParams&
    commonParams()
    {
        return commonParams_;
    }
    const LSRequestCommonParams&
    commonParams() const
    {
        return commonParams_;
    }

private:
    LSRequestCommonParams commonParams_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestPreloadDatastoreParams>
{
    typedef mozilla::dom::LSRequestPreloadDatastoreParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSRequestPrepareDatastoreParams|
//
namespace mozilla {
namespace dom {
class LSRequestPrepareDatastoreParams final
{
private:
    typedef mozilla::dom::LSRequestCommonParams LSRequestCommonParams;

public:
    MOZ_IMPLICIT LSRequestPrepareDatastoreParams() :
        commonParams_(),
        clientId_()
    {
    }

    MOZ_IMPLICIT LSRequestPrepareDatastoreParams(
            const LSRequestCommonParams& _commonParams,
            const mozilla::Maybe<nsID>& _clientId) :
        commonParams_(_commonParams),
        clientId_(_clientId)
    {
    }

    LSRequestCommonParams&
    commonParams()
    {
        return commonParams_;
    }
    const LSRequestCommonParams&
    commonParams() const
    {
        return commonParams_;
    }

    mozilla::Maybe<nsID>&
    clientId()
    {
        return clientId_;
    }
    const mozilla::Maybe<nsID>&
    clientId() const
    {
        return clientId_;
    }

private:
    LSRequestCommonParams commonParams_;
    mozilla::Maybe<nsID> clientId_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestPrepareDatastoreParams>
{
    typedef mozilla::dom::LSRequestPrepareDatastoreParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSRequestPrepareObserverParams|
//
namespace mozilla {
namespace dom {
class LSRequestPrepareObserverParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT LSRequestPrepareObserverParams() :
        principalInfo_(),
        storagePrincipalInfo_(),
        clientId_()
    {
    }

    MOZ_IMPLICIT LSRequestPrepareObserverParams(
            const PrincipalInfo& _principalInfo,
            const PrincipalInfo& _storagePrincipalInfo,
            const mozilla::Maybe<nsID>& _clientId) :
        principalInfo_(_principalInfo),
        storagePrincipalInfo_(_storagePrincipalInfo),
        clientId_(_clientId)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

    PrincipalInfo&
    storagePrincipalInfo()
    {
        return storagePrincipalInfo_;
    }
    const PrincipalInfo&
    storagePrincipalInfo() const
    {
        return storagePrincipalInfo_;
    }

    mozilla::Maybe<nsID>&
    clientId()
    {
        return clientId_;
    }
    const mozilla::Maybe<nsID>&
    clientId() const
    {
        return clientId_;
    }

private:
    PrincipalInfo principalInfo_;
    PrincipalInfo storagePrincipalInfo_;
    mozilla::Maybe<nsID> clientId_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestPrepareObserverParams>
{
    typedef mozilla::dom::LSRequestPrepareObserverParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union LSRequestParams|
//
namespace mozilla {
namespace dom {
class LSRequestParams final
{
public:
    enum Type {
        T__None,
        TLSRequestPreloadDatastoreParams = 1,
        TLSRequestPrepareDatastoreParams,
        TLSRequestPrepareObserverParams,
        T__Last = TLSRequestPrepareObserverParams
    };

private:
    typedef mozilla::dom::LSRequestPreloadDatastoreParams LSRequestPreloadDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareDatastoreParams LSRequestPrepareDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareObserverParams LSRequestPrepareObserverParams;
    typedef LSRequestPreloadDatastoreParams LSRequestPreloadDatastoreParams__tdef;
    typedef LSRequestPrepareDatastoreParams LSRequestPrepareDatastoreParams__tdef;
    typedef LSRequestPrepareObserverParams LSRequestPrepareObserverParams__tdef;

    union Value {
        mozilla::AlignedStorage2<LSRequestPreloadDatastoreParams> VLSRequestPreloadDatastoreParams;
        mozilla::AlignedStorage2<LSRequestPrepareDatastoreParams> VLSRequestPrepareDatastoreParams;
        mozilla::AlignedStorage2<LSRequestPrepareObserverParams> VLSRequestPrepareObserverParams;
    };

    LSRequestPreloadDatastoreParams*
    ptr_LSRequestPreloadDatastoreParams()
    {
        return ((mValue).VLSRequestPreloadDatastoreParams).addr();
    }
    const LSRequestPreloadDatastoreParams*
    constptr_LSRequestPreloadDatastoreParams() const
    {
        return ((mValue).VLSRequestPreloadDatastoreParams).addr();
    }
    LSRequestPrepareDatastoreParams*
    ptr_LSRequestPrepareDatastoreParams()
    {
        return ((mValue).VLSRequestPrepareDatastoreParams).addr();
    }
    const LSRequestPrepareDatastoreParams*
    constptr_LSRequestPrepareDatastoreParams() const
    {
        return ((mValue).VLSRequestPrepareDatastoreParams).addr();
    }
    LSRequestPrepareObserverParams*
    ptr_LSRequestPrepareObserverParams()
    {
        return ((mValue).VLSRequestPrepareObserverParams).addr();
    }
    const LSRequestPrepareObserverParams*
    constptr_LSRequestPrepareObserverParams() const
    {
        return ((mValue).VLSRequestPrepareObserverParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT LSRequestParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT LSRequestParams(const LSRequestPreloadDatastoreParams& aOther);

    MOZ_IMPLICIT LSRequestParams(LSRequestPreloadDatastoreParams&& aOther);

    MOZ_IMPLICIT LSRequestParams(const LSRequestPrepareDatastoreParams& aOther);

    MOZ_IMPLICIT LSRequestParams(LSRequestPrepareDatastoreParams&& aOther);

    MOZ_IMPLICIT LSRequestParams(const LSRequestPrepareObserverParams& aOther);

    MOZ_IMPLICIT LSRequestParams(LSRequestPrepareObserverParams&& aOther);

    MOZ_IMPLICIT LSRequestParams(const LSRequestParams& aOther);

    MOZ_IMPLICIT LSRequestParams(LSRequestParams&& aOther);

    ~LSRequestParams();

    Type
    type() const
    {
        return mType;
    }

    LSRequestParams&
    operator=(const LSRequestPreloadDatastoreParams& aRhs);

    LSRequestParams&
    operator=(LSRequestPreloadDatastoreParams&& aRhs);

    LSRequestParams&
    operator=(const LSRequestPrepareDatastoreParams& aRhs);

    LSRequestParams&
    operator=(LSRequestPrepareDatastoreParams&& aRhs);

    LSRequestParams&
    operator=(const LSRequestPrepareObserverParams& aRhs);

    LSRequestParams&
    operator=(LSRequestPrepareObserverParams&& aRhs);

    LSRequestParams&
    operator=(const LSRequestParams& aRhs);

    LSRequestParams&
    operator=(LSRequestParams&& aRhs);

    LSRequestPreloadDatastoreParams&
    get_LSRequestPreloadDatastoreParams()
    {
        AssertSanity(TLSRequestPreloadDatastoreParams);
        return (*(ptr_LSRequestPreloadDatastoreParams()));
    }
    const LSRequestPreloadDatastoreParams&
    get_LSRequestPreloadDatastoreParams() const
    {
        AssertSanity(TLSRequestPreloadDatastoreParams);
        return (*(constptr_LSRequestPreloadDatastoreParams()));
    }
    operator LSRequestPreloadDatastoreParams&()
    {
        return get_LSRequestPreloadDatastoreParams();
    }
    operator const LSRequestPreloadDatastoreParams&() const
    {
        return get_LSRequestPreloadDatastoreParams();
    }

    LSRequestPrepareDatastoreParams&
    get_LSRequestPrepareDatastoreParams()
    {
        AssertSanity(TLSRequestPrepareDatastoreParams);
        return (*(ptr_LSRequestPrepareDatastoreParams()));
    }
    const LSRequestPrepareDatastoreParams&
    get_LSRequestPrepareDatastoreParams() const
    {
        AssertSanity(TLSRequestPrepareDatastoreParams);
        return (*(constptr_LSRequestPrepareDatastoreParams()));
    }
    operator LSRequestPrepareDatastoreParams&()
    {
        return get_LSRequestPrepareDatastoreParams();
    }
    operator const LSRequestPrepareDatastoreParams&() const
    {
        return get_LSRequestPrepareDatastoreParams();
    }

    LSRequestPrepareObserverParams&
    get_LSRequestPrepareObserverParams()
    {
        AssertSanity(TLSRequestPrepareObserverParams);
        return (*(ptr_LSRequestPrepareObserverParams()));
    }
    const LSRequestPrepareObserverParams&
    get_LSRequestPrepareObserverParams() const
    {
        AssertSanity(TLSRequestPrepareObserverParams);
        return (*(constptr_LSRequestPrepareObserverParams()));
    }
    operator LSRequestPrepareObserverParams&()
    {
        return get_LSRequestPrepareObserverParams();
    }
    operator const LSRequestPrepareObserverParams&() const
    {
        return get_LSRequestPrepareObserverParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestParams>
{
    typedef mozilla::dom::LSRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSSimpleRequestPreloadedParams|
//
namespace mozilla {
namespace dom {
class LSSimpleRequestPreloadedParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT LSSimpleRequestPreloadedParams() :
        principalInfo_(),
        storagePrincipalInfo_()
    {
    }

    MOZ_IMPLICIT LSSimpleRequestPreloadedParams(
            const PrincipalInfo& _principalInfo,
            const PrincipalInfo& _storagePrincipalInfo) :
        principalInfo_(_principalInfo),
        storagePrincipalInfo_(_storagePrincipalInfo)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

    PrincipalInfo&
    storagePrincipalInfo()
    {
        return storagePrincipalInfo_;
    }
    const PrincipalInfo&
    storagePrincipalInfo() const
    {
        return storagePrincipalInfo_;
    }

private:
    PrincipalInfo principalInfo_;
    PrincipalInfo storagePrincipalInfo_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSSimpleRequestPreloadedParams>
{
    typedef mozilla::dom::LSSimpleRequestPreloadedParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union LSSimpleRequestParams|
//
namespace mozilla {
namespace dom {
class LSSimpleRequestParams final
{
public:
    enum Type {
        T__None,
        TLSSimpleRequestPreloadedParams = 1,
        T__Last = TLSSimpleRequestPreloadedParams
    };

private:
    typedef mozilla::dom::LSSimpleRequestPreloadedParams LSSimpleRequestPreloadedParams;
    typedef LSSimpleRequestPreloadedParams LSSimpleRequestPreloadedParams__tdef;

    union Value {
        mozilla::AlignedStorage2<LSSimpleRequestPreloadedParams> VLSSimpleRequestPreloadedParams;
    };

    LSSimpleRequestPreloadedParams*
    ptr_LSSimpleRequestPreloadedParams()
    {
        return ((mValue).VLSSimpleRequestPreloadedParams).addr();
    }
    const LSSimpleRequestPreloadedParams*
    constptr_LSSimpleRequestPreloadedParams() const
    {
        return ((mValue).VLSSimpleRequestPreloadedParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT LSSimpleRequestParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT LSSimpleRequestParams(const LSSimpleRequestPreloadedParams& aOther);

    MOZ_IMPLICIT LSSimpleRequestParams(LSSimpleRequestPreloadedParams&& aOther);

    MOZ_IMPLICIT LSSimpleRequestParams(const LSSimpleRequestParams& aOther);

    MOZ_IMPLICIT LSSimpleRequestParams(LSSimpleRequestParams&& aOther);

    ~LSSimpleRequestParams();

    Type
    type() const
    {
        return mType;
    }

    LSSimpleRequestParams&
    operator=(const LSSimpleRequestPreloadedParams& aRhs);

    LSSimpleRequestParams&
    operator=(LSSimpleRequestPreloadedParams&& aRhs);

    LSSimpleRequestParams&
    operator=(const LSSimpleRequestParams& aRhs);

    LSSimpleRequestParams&
    operator=(LSSimpleRequestParams&& aRhs);

    LSSimpleRequestPreloadedParams&
    get_LSSimpleRequestPreloadedParams()
    {
        AssertSanity(TLSSimpleRequestPreloadedParams);
        return (*(ptr_LSSimpleRequestPreloadedParams()));
    }
    const LSSimpleRequestPreloadedParams&
    get_LSSimpleRequestPreloadedParams() const
    {
        AssertSanity(TLSSimpleRequestPreloadedParams);
        return (*(constptr_LSSimpleRequestPreloadedParams()));
    }
    operator LSSimpleRequestPreloadedParams&()
    {
        return get_LSSimpleRequestPreloadedParams();
    }
    operator const LSSimpleRequestPreloadedParams&() const
    {
        return get_LSSimpleRequestPreloadedParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSSimpleRequestParams>
{
    typedef mozilla::dom::LSSimpleRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSItemInfo|
//
namespace mozilla {
namespace dom {
class LSItemInfo final
{
private:
    typedef mozilla::dom::LSValue LSValue;

public:
    MOZ_IMPLICIT LSItemInfo() :
        key_(),
        value_()
    {
    }

    MOZ_IMPLICIT LSItemInfo(
            const nsString& _key,
            const LSValue& _value) :
        key_(_key),
        value_(_value)
    {
    }

    nsString&
    key()
    {
        return key_;
    }
    const nsString&
    key() const
    {
        return key_;
    }

    LSValue&
    value()
    {
        return value_;
    }
    const LSValue&
    value() const
    {
        return value_;
    }

private:
    nsString key_;
    LSValue value_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSItemInfo>
{
    typedef mozilla::dom::LSItemInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundLSSharedTypes_h
