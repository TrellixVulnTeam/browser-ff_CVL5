//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PServiceWorkerUpdaterChild_h
#define PServiceWorkerUpdaterChild_h

#include "mozilla/dom/PServiceWorkerUpdater.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace dom {
class PServiceWorkerManagerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerManagerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PServiceWorkerManagerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PServiceWorkerUpdaterChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PServiceWorkerManagerChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::PServiceWorkerManagerChild PServiceWorkerManagerChild;
    typedef mozilla::dom::PServiceWorkerManagerParent PServiceWorkerManagerParent;

protected:
    virtual mozilla::ipc::IPCResult
    RecvProceed(const bool& allowed) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PServiceWorkerUpdaterChild();

    virtual ~PServiceWorkerUpdaterChild();

public:
    PServiceWorkerManagerChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    static bool
    Send__delete__(PServiceWorkerUpdaterChild* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PServiceWorkerUpdaterChild*>
{
    typedef mozilla::dom::PServiceWorkerUpdaterChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PServiceWorkerUpdaterChild_h
