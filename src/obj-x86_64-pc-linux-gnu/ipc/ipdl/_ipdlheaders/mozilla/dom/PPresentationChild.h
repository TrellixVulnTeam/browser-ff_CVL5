//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPresentationChild_h
#define PPresentationChild_h

#include "mozilla/dom/PPresentation.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/ipc/IdType.h"

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationRequestChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PPresentationRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationBuilderChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PPresentationBuilderParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationBuilderChild;
} // namespace dom
} // namespace mozilla

class nsIPrincipal;

namespace mozilla {
namespace dom {


class PPresentationChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PPresentationRequestChild;
    friend class mozilla::dom::PContentChild;
    friend class mozilla::dom::PPresentationBuilderChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::dom::BuildTransportRequest BuildTransportRequest;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::dom::CloseSessionRequest CloseSessionRequest;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::dom::PresentationIPCRequest PresentationIPCRequest;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::dom::ReconnectSessionRequest ReconnectSessionRequest;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::dom::SendSessionMessageRequest SendSessionMessageRequest;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::dom::StartSessionRequest StartSessionRequest;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::dom::TerminateSessionRequest TerminateSessionRequest;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PPresentationRequestChild PPresentationRequestChild;
    typedef mozilla::dom::PPresentationRequestParent PPresentationRequestParent;
    typedef mozilla::dom::PPresentationBuilderChild PPresentationBuilderChild;
    typedef mozilla::dom::PPresentationBuilderParent PPresentationBuilderParent;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPPresentationBuilderConstructor(
            PPresentationBuilderChild* actor,
            const nsString& aSessionId,
            const uint8_t& aRole);
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PPresentationChild();

    virtual ~PPresentationChild();

public:
    PContentChild*
    Manager() const;

    void
    ManagedPPresentationBuilderChild(nsTArray<PPresentationBuilderChild*>& aArr) const;
    const ManagedContainer<PPresentationBuilderChild>&
    ManagedPPresentationBuilderChild() const;

    void
    ManagedPPresentationRequestChild(nsTArray<PPresentationRequestChild*>& aArr) const;
    const ManagedContainer<PPresentationRequestChild>&
    ManagedPPresentationRequestChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PPresentationBuilderParent>
    OpenPPresentationBuilderEndpoint(PPresentationBuilderChild* aActor);
    bool
    BindPPresentationBuilderEndpoint(
            ManagedEndpoint<PPresentationBuilderChild> aEndpoint,
            PPresentationBuilderChild* aActor);

    ManagedEndpoint<PPresentationRequestParent>
    OpenPPresentationRequestEndpoint(PPresentationRequestChild* aActor);
    bool
    BindPPresentationRequestEndpoint(
            ManagedEndpoint<PPresentationRequestChild> aEndpoint,
            PPresentationRequestChild* aActor);

    static bool
    Send__delete__(PPresentationChild* actor);

    bool
    SendRegisterAvailabilityHandler(const nsTArray<nsString>& aAvailabilityUrls);

    bool
    SendUnregisterAvailabilityHandler(const nsTArray<nsString>& aAvailabilityUrls);

    bool
    SendRegisterSessionHandler(
            const nsString& aSessionId,
            const uint8_t& aRole);

    bool
    SendUnregisterSessionHandler(
            const nsString& aSessionId,
            const uint8_t& aRole);

    bool
    SendRegisterRespondingHandler(const uint64_t& aWindowId);

    bool
    SendUnregisterRespondingHandler(const uint64_t& aWindowId);

    PPresentationRequestChild*
    SendPPresentationRequestConstructor(const PresentationIPCRequest& aRequest);

    PPresentationRequestChild*
    SendPPresentationRequestConstructor(
            PPresentationRequestChild* actor,
            const PresentationIPCRequest& aRequest);

    bool
    SendNotifyReceiverReady(
            const nsString& aSessionId,
            const uint64_t& aWindowId,
            const bool& aIsLoading);

    bool
    SendNotifyTransportClosed(
            const nsString& aSessionId,
            const uint8_t& aRole,
            const nsresult& aReason);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PPresentationBuilderChild> mManagedPPresentationBuilderChild;
    ManagedContainer<PPresentationRequestChild> mManagedPPresentationRequestChild;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PPresentationChild*>
{
    typedef mozilla::dom::PPresentationChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PPresentationChild_h
