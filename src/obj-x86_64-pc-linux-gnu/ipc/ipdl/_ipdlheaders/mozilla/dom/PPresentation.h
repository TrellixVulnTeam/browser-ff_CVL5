//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPresentation_h
#define PPresentation_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/ipc/IdType.h"
#include "nsIPrincipal.h"
#include "mozilla/ipc/InputStreamParams.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct StartSessionRequest|
//
namespace mozilla {
namespace dom {
class StartSessionRequest final
{
private:
    typedef mozilla::dom::TabId TabId;

public:
    MOZ_IMPLICIT StartSessionRequest() :
        urls_(),
        sessionId_(),
        origin_(),
        deviceId_(),
        tabId_(),
        principal_(),
        windowId_()
    {
    }

    MOZ_IMPLICIT StartSessionRequest(
            const nsTArray<nsString>& _urls,
            const nsString& _sessionId,
            const nsString& _origin,
            const nsString& _deviceId,
            const uint64_t& _windowId,
            const TabId& _tabId,
            nsIPrincipal* _principal) :
        urls_(_urls),
        sessionId_(_sessionId),
        origin_(_origin),
        deviceId_(_deviceId),
        tabId_(_tabId),
        principal_(_principal),
        windowId_(_windowId)
    {
    }

    nsTArray<nsString>&
    urls()
    {
        return urls_;
    }
    const nsTArray<nsString>&
    urls() const
    {
        return urls_;
    }

    nsString&
    sessionId()
    {
        return sessionId_;
    }
    const nsString&
    sessionId() const
    {
        return sessionId_;
    }

    nsString&
    origin()
    {
        return origin_;
    }
    const nsString&
    origin() const
    {
        return origin_;
    }

    nsString&
    deviceId()
    {
        return deviceId_;
    }
    const nsString&
    deviceId() const
    {
        return deviceId_;
    }

    uint64_t&
    windowId()
    {
        return windowId_;
    }
    const uint64_t&
    windowId() const
    {
        return windowId_;
    }

    TabId&
    tabId()
    {
        return tabId_;
    }
    const TabId&
    tabId() const
    {
        return tabId_;
    }

    RefPtr<nsIPrincipal>&
    principal()
    {
        return principal_;
    }
    nsIPrincipal*
    principal() const
    {
        return principal_;
    }

private:
    CopyableTArray<nsString> urls_;
    nsString sessionId_;
    nsString origin_;
    nsString deviceId_;
    TabId tabId_;
    RefPtr<nsIPrincipal> principal_;
    uint64_t windowId_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::StartSessionRequest>
{
    typedef mozilla::dom::StartSessionRequest paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SendSessionMessageRequest|
//
namespace mozilla {
namespace dom {
class SendSessionMessageRequest final
{
private:

public:
    MOZ_IMPLICIT SendSessionMessageRequest() :
        sessionId_(),
        data_(),
        role_()
    {
    }

    MOZ_IMPLICIT SendSessionMessageRequest(
            const nsString& _sessionId,
            const uint8_t& _role,
            const nsString& _data) :
        sessionId_(_sessionId),
        data_(_data),
        role_(_role)
    {
    }

    nsString&
    sessionId()
    {
        return sessionId_;
    }
    const nsString&
    sessionId() const
    {
        return sessionId_;
    }

    uint8_t&
    role()
    {
        return role_;
    }
    const uint8_t&
    role() const
    {
        return role_;
    }

    nsString&
    data()
    {
        return data_;
    }
    const nsString&
    data() const
    {
        return data_;
    }

private:
    nsString sessionId_;
    nsString data_;
    uint8_t role_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SendSessionMessageRequest>
{
    typedef mozilla::dom::SendSessionMessageRequest paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CloseSessionRequest|
//
namespace mozilla {
namespace dom {
class CloseSessionRequest final
{
private:

public:
    MOZ_IMPLICIT CloseSessionRequest() :
        sessionId_(),
        role_(),
        closedReason_()
    {
    }

    MOZ_IMPLICIT CloseSessionRequest(
            const nsString& _sessionId,
            const uint8_t& _role,
            const uint8_t& _closedReason) :
        sessionId_(_sessionId),
        role_(_role),
        closedReason_(_closedReason)
    {
    }

    nsString&
    sessionId()
    {
        return sessionId_;
    }
    const nsString&
    sessionId() const
    {
        return sessionId_;
    }

    uint8_t&
    role()
    {
        return role_;
    }
    const uint8_t&
    role() const
    {
        return role_;
    }

    uint8_t&
    closedReason()
    {
        return closedReason_;
    }
    const uint8_t&
    closedReason() const
    {
        return closedReason_;
    }

private:
    void
    StaticAssertions() const;
    nsString sessionId_;
    uint8_t role_;
    uint8_t closedReason_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::CloseSessionRequest>
{
    typedef mozilla::dom::CloseSessionRequest paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct TerminateSessionRequest|
//
namespace mozilla {
namespace dom {
class TerminateSessionRequest final
{
private:

public:
    MOZ_IMPLICIT TerminateSessionRequest() :
        sessionId_(),
        role_()
    {
    }

    MOZ_IMPLICIT TerminateSessionRequest(
            const nsString& _sessionId,
            const uint8_t& _role) :
        sessionId_(_sessionId),
        role_(_role)
    {
    }

    nsString&
    sessionId()
    {
        return sessionId_;
    }
    const nsString&
    sessionId() const
    {
        return sessionId_;
    }

    uint8_t&
    role()
    {
        return role_;
    }
    const uint8_t&
    role() const
    {
        return role_;
    }

private:
    nsString sessionId_;
    uint8_t role_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::TerminateSessionRequest>
{
    typedef mozilla::dom::TerminateSessionRequest paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ReconnectSessionRequest|
//
namespace mozilla {
namespace dom {
class ReconnectSessionRequest final
{
private:

public:
    MOZ_IMPLICIT ReconnectSessionRequest() :
        urls_(),
        sessionId_(),
        role_()
    {
    }

    MOZ_IMPLICIT ReconnectSessionRequest(
            const nsTArray<nsString>& _urls,
            const nsString& _sessionId,
            const uint8_t& _role) :
        urls_(_urls),
        sessionId_(_sessionId),
        role_(_role)
    {
    }

    nsTArray<nsString>&
    urls()
    {
        return urls_;
    }
    const nsTArray<nsString>&
    urls() const
    {
        return urls_;
    }

    nsString&
    sessionId()
    {
        return sessionId_;
    }
    const nsString&
    sessionId() const
    {
        return sessionId_;
    }

    uint8_t&
    role()
    {
        return role_;
    }
    const uint8_t&
    role() const
    {
        return role_;
    }

private:
    CopyableTArray<nsString> urls_;
    nsString sessionId_;
    uint8_t role_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::ReconnectSessionRequest>
{
    typedef mozilla::dom::ReconnectSessionRequest paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct BuildTransportRequest|
//
namespace mozilla {
namespace dom {
class BuildTransportRequest final
{
private:

public:
    MOZ_IMPLICIT BuildTransportRequest() :
        sessionId_(),
        role_()
    {
    }

    MOZ_IMPLICIT BuildTransportRequest(
            const nsString& _sessionId,
            const uint8_t& _role) :
        sessionId_(_sessionId),
        role_(_role)
    {
    }

    nsString&
    sessionId()
    {
        return sessionId_;
    }
    const nsString&
    sessionId() const
    {
        return sessionId_;
    }

    uint8_t&
    role()
    {
        return role_;
    }
    const uint8_t&
    role() const
    {
        return role_;
    }

private:
    nsString sessionId_;
    uint8_t role_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::BuildTransportRequest>
{
    typedef mozilla::dom::BuildTransportRequest paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union PresentationIPCRequest|
//
namespace mozilla {
namespace dom {
class PresentationIPCRequest final
{
public:
    enum Type {
        T__None,
        TStartSessionRequest = 1,
        TSendSessionMessageRequest,
        TCloseSessionRequest,
        TTerminateSessionRequest,
        TReconnectSessionRequest,
        TBuildTransportRequest,
        T__Last = TBuildTransportRequest
    };

private:
    typedef mozilla::dom::StartSessionRequest StartSessionRequest;
    typedef mozilla::dom::SendSessionMessageRequest SendSessionMessageRequest;
    typedef mozilla::dom::CloseSessionRequest CloseSessionRequest;
    typedef mozilla::dom::TerminateSessionRequest TerminateSessionRequest;
    typedef mozilla::dom::ReconnectSessionRequest ReconnectSessionRequest;
    typedef mozilla::dom::BuildTransportRequest BuildTransportRequest;
    typedef StartSessionRequest StartSessionRequest__tdef;
    typedef SendSessionMessageRequest SendSessionMessageRequest__tdef;
    typedef CloseSessionRequest CloseSessionRequest__tdef;
    typedef TerminateSessionRequest TerminateSessionRequest__tdef;
    typedef ReconnectSessionRequest ReconnectSessionRequest__tdef;
    typedef BuildTransportRequest BuildTransportRequest__tdef;

    union Value {
        mozilla::AlignedStorage2<StartSessionRequest> VStartSessionRequest;
        mozilla::AlignedStorage2<SendSessionMessageRequest> VSendSessionMessageRequest;
        mozilla::AlignedStorage2<CloseSessionRequest> VCloseSessionRequest;
        mozilla::AlignedStorage2<TerminateSessionRequest> VTerminateSessionRequest;
        mozilla::AlignedStorage2<ReconnectSessionRequest> VReconnectSessionRequest;
        mozilla::AlignedStorage2<BuildTransportRequest> VBuildTransportRequest;
    };

    StartSessionRequest*
    ptr_StartSessionRequest()
    {
        return ((mValue).VStartSessionRequest).addr();
    }
    const StartSessionRequest*
    constptr_StartSessionRequest() const
    {
        return ((mValue).VStartSessionRequest).addr();
    }
    SendSessionMessageRequest*
    ptr_SendSessionMessageRequest()
    {
        return ((mValue).VSendSessionMessageRequest).addr();
    }
    const SendSessionMessageRequest*
    constptr_SendSessionMessageRequest() const
    {
        return ((mValue).VSendSessionMessageRequest).addr();
    }
    CloseSessionRequest*
    ptr_CloseSessionRequest()
    {
        return ((mValue).VCloseSessionRequest).addr();
    }
    const CloseSessionRequest*
    constptr_CloseSessionRequest() const
    {
        return ((mValue).VCloseSessionRequest).addr();
    }
    TerminateSessionRequest*
    ptr_TerminateSessionRequest()
    {
        return ((mValue).VTerminateSessionRequest).addr();
    }
    const TerminateSessionRequest*
    constptr_TerminateSessionRequest() const
    {
        return ((mValue).VTerminateSessionRequest).addr();
    }
    ReconnectSessionRequest*
    ptr_ReconnectSessionRequest()
    {
        return ((mValue).VReconnectSessionRequest).addr();
    }
    const ReconnectSessionRequest*
    constptr_ReconnectSessionRequest() const
    {
        return ((mValue).VReconnectSessionRequest).addr();
    }
    BuildTransportRequest*
    ptr_BuildTransportRequest()
    {
        return ((mValue).VBuildTransportRequest).addr();
    }
    const BuildTransportRequest*
    constptr_BuildTransportRequest() const
    {
        return ((mValue).VBuildTransportRequest).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT PresentationIPCRequest() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT PresentationIPCRequest(const StartSessionRequest& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(StartSessionRequest&& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(const SendSessionMessageRequest& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(SendSessionMessageRequest&& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(const CloseSessionRequest& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(CloseSessionRequest&& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(const TerminateSessionRequest& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(TerminateSessionRequest&& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(const ReconnectSessionRequest& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(ReconnectSessionRequest&& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(const BuildTransportRequest& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(BuildTransportRequest&& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(const PresentationIPCRequest& aOther);

    MOZ_IMPLICIT PresentationIPCRequest(PresentationIPCRequest&& aOther);

    ~PresentationIPCRequest();

    Type
    type() const
    {
        return mType;
    }

    PresentationIPCRequest&
    operator=(const StartSessionRequest& aRhs);

    PresentationIPCRequest&
    operator=(StartSessionRequest&& aRhs);

    PresentationIPCRequest&
    operator=(const SendSessionMessageRequest& aRhs);

    PresentationIPCRequest&
    operator=(SendSessionMessageRequest&& aRhs);

    PresentationIPCRequest&
    operator=(const CloseSessionRequest& aRhs);

    PresentationIPCRequest&
    operator=(CloseSessionRequest&& aRhs);

    PresentationIPCRequest&
    operator=(const TerminateSessionRequest& aRhs);

    PresentationIPCRequest&
    operator=(TerminateSessionRequest&& aRhs);

    PresentationIPCRequest&
    operator=(const ReconnectSessionRequest& aRhs);

    PresentationIPCRequest&
    operator=(ReconnectSessionRequest&& aRhs);

    PresentationIPCRequest&
    operator=(const BuildTransportRequest& aRhs);

    PresentationIPCRequest&
    operator=(BuildTransportRequest&& aRhs);

    PresentationIPCRequest&
    operator=(const PresentationIPCRequest& aRhs);

    PresentationIPCRequest&
    operator=(PresentationIPCRequest&& aRhs);

    StartSessionRequest&
    get_StartSessionRequest()
    {
        AssertSanity(TStartSessionRequest);
        return (*(ptr_StartSessionRequest()));
    }
    const StartSessionRequest&
    get_StartSessionRequest() const
    {
        AssertSanity(TStartSessionRequest);
        return (*(constptr_StartSessionRequest()));
    }
    operator StartSessionRequest&()
    {
        return get_StartSessionRequest();
    }
    operator const StartSessionRequest&() const
    {
        return get_StartSessionRequest();
    }

    SendSessionMessageRequest&
    get_SendSessionMessageRequest()
    {
        AssertSanity(TSendSessionMessageRequest);
        return (*(ptr_SendSessionMessageRequest()));
    }
    const SendSessionMessageRequest&
    get_SendSessionMessageRequest() const
    {
        AssertSanity(TSendSessionMessageRequest);
        return (*(constptr_SendSessionMessageRequest()));
    }
    operator SendSessionMessageRequest&()
    {
        return get_SendSessionMessageRequest();
    }
    operator const SendSessionMessageRequest&() const
    {
        return get_SendSessionMessageRequest();
    }

    CloseSessionRequest&
    get_CloseSessionRequest()
    {
        AssertSanity(TCloseSessionRequest);
        return (*(ptr_CloseSessionRequest()));
    }
    const CloseSessionRequest&
    get_CloseSessionRequest() const
    {
        AssertSanity(TCloseSessionRequest);
        return (*(constptr_CloseSessionRequest()));
    }
    operator CloseSessionRequest&()
    {
        return get_CloseSessionRequest();
    }
    operator const CloseSessionRequest&() const
    {
        return get_CloseSessionRequest();
    }

    TerminateSessionRequest&
    get_TerminateSessionRequest()
    {
        AssertSanity(TTerminateSessionRequest);
        return (*(ptr_TerminateSessionRequest()));
    }
    const TerminateSessionRequest&
    get_TerminateSessionRequest() const
    {
        AssertSanity(TTerminateSessionRequest);
        return (*(constptr_TerminateSessionRequest()));
    }
    operator TerminateSessionRequest&()
    {
        return get_TerminateSessionRequest();
    }
    operator const TerminateSessionRequest&() const
    {
        return get_TerminateSessionRequest();
    }

    ReconnectSessionRequest&
    get_ReconnectSessionRequest()
    {
        AssertSanity(TReconnectSessionRequest);
        return (*(ptr_ReconnectSessionRequest()));
    }
    const ReconnectSessionRequest&
    get_ReconnectSessionRequest() const
    {
        AssertSanity(TReconnectSessionRequest);
        return (*(constptr_ReconnectSessionRequest()));
    }
    operator ReconnectSessionRequest&()
    {
        return get_ReconnectSessionRequest();
    }
    operator const ReconnectSessionRequest&() const
    {
        return get_ReconnectSessionRequest();
    }

    BuildTransportRequest&
    get_BuildTransportRequest()
    {
        AssertSanity(TBuildTransportRequest);
        return (*(ptr_BuildTransportRequest()));
    }
    const BuildTransportRequest&
    get_BuildTransportRequest() const
    {
        AssertSanity(TBuildTransportRequest);
        return (*(constptr_BuildTransportRequest()));
    }
    operator BuildTransportRequest&()
    {
        return get_BuildTransportRequest();
    }
    operator const BuildTransportRequest&() const
    {
        return get_BuildTransportRequest();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PresentationIPCRequest>
{
    typedef mozilla::dom::PresentationIPCRequest paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PPresentationChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PPresentationChild and PPresentationParent
//
namespace mozilla {
namespace dom {
namespace PPresentation {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PPresentationParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PPresentationChild>* aChild);

enum MessageType {
    PPresentationStart = PPresentationMsgStart << 16,
    Msg_NotifyAvailableChange__ID,
    Msg_NotifySessionStateChange__ID,
    Msg_NotifyMessage__ID,
    Msg_NotifySessionConnect__ID,
    Msg_NotifyCloseSessionTransport__ID,
    Msg_PPresentationBuilderConstructor__ID,
    Reply_PPresentationBuilderConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_RegisterAvailabilityHandler__ID,
    Msg_UnregisterAvailabilityHandler__ID,
    Msg_RegisterSessionHandler__ID,
    Msg_UnregisterSessionHandler__ID,
    Msg_RegisterRespondingHandler__ID,
    Msg_UnregisterRespondingHandler__ID,
    Msg_PPresentationRequestConstructor__ID,
    Reply_PPresentationRequestConstructor__ID,
    Msg_NotifyReceiverReady__ID,
    Msg_NotifyTransportClosed__ID,
    PPresentationEnd
};

IPC::Message*
Msg_NotifyAvailableChange(int32_t routingId);

IPC::Message*
Msg_NotifySessionStateChange(int32_t routingId);

IPC::Message*
Msg_NotifyMessage(int32_t routingId);

IPC::Message*
Msg_NotifySessionConnect(int32_t routingId);

IPC::Message*
Msg_NotifyCloseSessionTransport(int32_t routingId);

IPC::Message*
Msg_PPresentationBuilderConstructor(int32_t routingId);
IPC::Message*
Reply_PPresentationBuilderConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_RegisterAvailabilityHandler(int32_t routingId);

IPC::Message*
Msg_UnregisterAvailabilityHandler(int32_t routingId);

IPC::Message*
Msg_RegisterSessionHandler(int32_t routingId);

IPC::Message*
Msg_UnregisterSessionHandler(int32_t routingId);

IPC::Message*
Msg_RegisterRespondingHandler(int32_t routingId);

IPC::Message*
Msg_UnregisterRespondingHandler(int32_t routingId);

IPC::Message*
Msg_PPresentationRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PPresentationRequestConstructor(int32_t routingId);

IPC::Message*
Msg_NotifyReceiverReady(int32_t routingId);

IPC::Message*
Msg_NotifyTransportClosed(int32_t routingId);



} // namespace PPresentation
} // namespace dom
} // namespace mozilla

#endif // ifndef PPresentation_h
