//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundSDBRequest_h
#define PBackgroundSDBRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestOpenResponse|
//
namespace mozilla {
namespace dom {
class SDBRequestOpenResponse final
{
private:

public:
    MOZ_IMPLICIT SDBRequestOpenResponse()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestOpenResponse>
{
    typedef mozilla::dom::SDBRequestOpenResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestSeekResponse|
//
namespace mozilla {
namespace dom {
class SDBRequestSeekResponse final
{
private:

public:
    MOZ_IMPLICIT SDBRequestSeekResponse()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestSeekResponse>
{
    typedef mozilla::dom::SDBRequestSeekResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestReadResponse|
//
namespace mozilla {
namespace dom {
class SDBRequestReadResponse final
{
private:

public:
    MOZ_IMPLICIT SDBRequestReadResponse() :
        data_()
    {
    }

    MOZ_IMPLICIT SDBRequestReadResponse(const nsCString& _data) :
        data_(_data)
    {
    }

    nsCString&
    data()
    {
        return data_;
    }
    const nsCString&
    data() const
    {
        return data_;
    }

private:
    nsCString data_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestReadResponse>
{
    typedef mozilla::dom::SDBRequestReadResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestWriteResponse|
//
namespace mozilla {
namespace dom {
class SDBRequestWriteResponse final
{
private:

public:
    MOZ_IMPLICIT SDBRequestWriteResponse()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestWriteResponse>
{
    typedef mozilla::dom::SDBRequestWriteResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SDBRequestCloseResponse|
//
namespace mozilla {
namespace dom {
class SDBRequestCloseResponse final
{
private:

public:
    MOZ_IMPLICIT SDBRequestCloseResponse()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestCloseResponse>
{
    typedef mozilla::dom::SDBRequestCloseResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union SDBRequestResponse|
//
namespace mozilla {
namespace dom {
class SDBRequestResponse final
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TSDBRequestOpenResponse,
        TSDBRequestSeekResponse,
        TSDBRequestReadResponse,
        TSDBRequestWriteResponse,
        TSDBRequestCloseResponse,
        T__Last = TSDBRequestCloseResponse
    };

private:
    typedef mozilla::dom::SDBRequestOpenResponse SDBRequestOpenResponse;
    typedef mozilla::dom::SDBRequestSeekResponse SDBRequestSeekResponse;
    typedef mozilla::dom::SDBRequestReadResponse SDBRequestReadResponse;
    typedef mozilla::dom::SDBRequestWriteResponse SDBRequestWriteResponse;
    typedef mozilla::dom::SDBRequestCloseResponse SDBRequestCloseResponse;
    typedef nsresult nsresult__tdef;
    typedef SDBRequestOpenResponse SDBRequestOpenResponse__tdef;
    typedef SDBRequestSeekResponse SDBRequestSeekResponse__tdef;
    typedef SDBRequestReadResponse SDBRequestReadResponse__tdef;
    typedef SDBRequestWriteResponse SDBRequestWriteResponse__tdef;
    typedef SDBRequestCloseResponse SDBRequestCloseResponse__tdef;

    union Value {
        mozilla::AlignedStorage2<nsresult> Vnsresult;
        mozilla::AlignedStorage2<SDBRequestOpenResponse> VSDBRequestOpenResponse;
        mozilla::AlignedStorage2<SDBRequestSeekResponse> VSDBRequestSeekResponse;
        mozilla::AlignedStorage2<SDBRequestReadResponse> VSDBRequestReadResponse;
        mozilla::AlignedStorage2<SDBRequestWriteResponse> VSDBRequestWriteResponse;
        mozilla::AlignedStorage2<SDBRequestCloseResponse> VSDBRequestCloseResponse;
    };

    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }
    SDBRequestOpenResponse*
    ptr_SDBRequestOpenResponse()
    {
        return ((mValue).VSDBRequestOpenResponse).addr();
    }
    const SDBRequestOpenResponse*
    constptr_SDBRequestOpenResponse() const
    {
        return ((mValue).VSDBRequestOpenResponse).addr();
    }
    SDBRequestSeekResponse*
    ptr_SDBRequestSeekResponse()
    {
        return ((mValue).VSDBRequestSeekResponse).addr();
    }
    const SDBRequestSeekResponse*
    constptr_SDBRequestSeekResponse() const
    {
        return ((mValue).VSDBRequestSeekResponse).addr();
    }
    SDBRequestReadResponse*
    ptr_SDBRequestReadResponse()
    {
        return ((mValue).VSDBRequestReadResponse).addr();
    }
    const SDBRequestReadResponse*
    constptr_SDBRequestReadResponse() const
    {
        return ((mValue).VSDBRequestReadResponse).addr();
    }
    SDBRequestWriteResponse*
    ptr_SDBRequestWriteResponse()
    {
        return ((mValue).VSDBRequestWriteResponse).addr();
    }
    const SDBRequestWriteResponse*
    constptr_SDBRequestWriteResponse() const
    {
        return ((mValue).VSDBRequestWriteResponse).addr();
    }
    SDBRequestCloseResponse*
    ptr_SDBRequestCloseResponse()
    {
        return ((mValue).VSDBRequestCloseResponse).addr();
    }
    const SDBRequestCloseResponse*
    constptr_SDBRequestCloseResponse() const
    {
        return ((mValue).VSDBRequestCloseResponse).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT SDBRequestResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT SDBRequestResponse(const nsresult& aOther);

    MOZ_IMPLICIT SDBRequestResponse(nsresult&& aOther);

    MOZ_IMPLICIT SDBRequestResponse(const SDBRequestOpenResponse& aOther);

    MOZ_IMPLICIT SDBRequestResponse(SDBRequestOpenResponse&& aOther);

    MOZ_IMPLICIT SDBRequestResponse(const SDBRequestSeekResponse& aOther);

    MOZ_IMPLICIT SDBRequestResponse(SDBRequestSeekResponse&& aOther);

    MOZ_IMPLICIT SDBRequestResponse(const SDBRequestReadResponse& aOther);

    MOZ_IMPLICIT SDBRequestResponse(SDBRequestReadResponse&& aOther);

    MOZ_IMPLICIT SDBRequestResponse(const SDBRequestWriteResponse& aOther);

    MOZ_IMPLICIT SDBRequestResponse(SDBRequestWriteResponse&& aOther);

    MOZ_IMPLICIT SDBRequestResponse(const SDBRequestCloseResponse& aOther);

    MOZ_IMPLICIT SDBRequestResponse(SDBRequestCloseResponse&& aOther);

    MOZ_IMPLICIT SDBRequestResponse(const SDBRequestResponse& aOther);

    MOZ_IMPLICIT SDBRequestResponse(SDBRequestResponse&& aOther);

    ~SDBRequestResponse();

    Type
    type() const
    {
        return mType;
    }

    SDBRequestResponse&
    operator=(const nsresult& aRhs);

    SDBRequestResponse&
    operator=(nsresult&& aRhs);

    SDBRequestResponse&
    operator=(const SDBRequestOpenResponse& aRhs);

    SDBRequestResponse&
    operator=(SDBRequestOpenResponse&& aRhs);

    SDBRequestResponse&
    operator=(const SDBRequestSeekResponse& aRhs);

    SDBRequestResponse&
    operator=(SDBRequestSeekResponse&& aRhs);

    SDBRequestResponse&
    operator=(const SDBRequestReadResponse& aRhs);

    SDBRequestResponse&
    operator=(SDBRequestReadResponse&& aRhs);

    SDBRequestResponse&
    operator=(const SDBRequestWriteResponse& aRhs);

    SDBRequestResponse&
    operator=(SDBRequestWriteResponse&& aRhs);

    SDBRequestResponse&
    operator=(const SDBRequestCloseResponse& aRhs);

    SDBRequestResponse&
    operator=(SDBRequestCloseResponse&& aRhs);

    SDBRequestResponse&
    operator=(const SDBRequestResponse& aRhs);

    SDBRequestResponse&
    operator=(SDBRequestResponse&& aRhs);

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    SDBRequestOpenResponse&
    get_SDBRequestOpenResponse()
    {
        AssertSanity(TSDBRequestOpenResponse);
        return (*(ptr_SDBRequestOpenResponse()));
    }
    const SDBRequestOpenResponse&
    get_SDBRequestOpenResponse() const
    {
        AssertSanity(TSDBRequestOpenResponse);
        return (*(constptr_SDBRequestOpenResponse()));
    }
    operator SDBRequestOpenResponse&()
    {
        return get_SDBRequestOpenResponse();
    }
    operator const SDBRequestOpenResponse&() const
    {
        return get_SDBRequestOpenResponse();
    }

    SDBRequestSeekResponse&
    get_SDBRequestSeekResponse()
    {
        AssertSanity(TSDBRequestSeekResponse);
        return (*(ptr_SDBRequestSeekResponse()));
    }
    const SDBRequestSeekResponse&
    get_SDBRequestSeekResponse() const
    {
        AssertSanity(TSDBRequestSeekResponse);
        return (*(constptr_SDBRequestSeekResponse()));
    }
    operator SDBRequestSeekResponse&()
    {
        return get_SDBRequestSeekResponse();
    }
    operator const SDBRequestSeekResponse&() const
    {
        return get_SDBRequestSeekResponse();
    }

    SDBRequestReadResponse&
    get_SDBRequestReadResponse()
    {
        AssertSanity(TSDBRequestReadResponse);
        return (*(ptr_SDBRequestReadResponse()));
    }
    const SDBRequestReadResponse&
    get_SDBRequestReadResponse() const
    {
        AssertSanity(TSDBRequestReadResponse);
        return (*(constptr_SDBRequestReadResponse()));
    }
    operator SDBRequestReadResponse&()
    {
        return get_SDBRequestReadResponse();
    }
    operator const SDBRequestReadResponse&() const
    {
        return get_SDBRequestReadResponse();
    }

    SDBRequestWriteResponse&
    get_SDBRequestWriteResponse()
    {
        AssertSanity(TSDBRequestWriteResponse);
        return (*(ptr_SDBRequestWriteResponse()));
    }
    const SDBRequestWriteResponse&
    get_SDBRequestWriteResponse() const
    {
        AssertSanity(TSDBRequestWriteResponse);
        return (*(constptr_SDBRequestWriteResponse()));
    }
    operator SDBRequestWriteResponse&()
    {
        return get_SDBRequestWriteResponse();
    }
    operator const SDBRequestWriteResponse&() const
    {
        return get_SDBRequestWriteResponse();
    }

    SDBRequestCloseResponse&
    get_SDBRequestCloseResponse()
    {
        AssertSanity(TSDBRequestCloseResponse);
        return (*(ptr_SDBRequestCloseResponse()));
    }
    const SDBRequestCloseResponse&
    get_SDBRequestCloseResponse() const
    {
        AssertSanity(TSDBRequestCloseResponse);
        return (*(constptr_SDBRequestCloseResponse()));
    }
    operator SDBRequestCloseResponse&()
    {
        return get_SDBRequestCloseResponse();
    }
    operator const SDBRequestCloseResponse&() const
    {
        return get_SDBRequestCloseResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::SDBRequestResponse>
{
    typedef mozilla::dom::SDBRequestResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundSDBRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundSDBRequestChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundSDBRequestChild and PBackgroundSDBRequestParent
//
namespace mozilla {
namespace dom {
namespace PBackgroundSDBRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundSDBRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundSDBRequestChild>* aChild);

enum MessageType {
    PBackgroundSDBRequestStart = PBackgroundSDBRequestMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    PBackgroundSDBRequestEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PBackgroundSDBRequest
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundSDBRequest_h
