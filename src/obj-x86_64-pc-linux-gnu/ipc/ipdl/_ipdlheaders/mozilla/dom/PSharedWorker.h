//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSharedWorker_h
#define PSharedWorker_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/RemoteWorkerTypes.h"

namespace mozilla {
namespace dom {
class PSharedWorkerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSharedWorkerChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PSharedWorkerChild and PSharedWorkerParent
//
namespace mozilla {
namespace dom {
namespace PSharedWorker {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PSharedWorkerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PSharedWorkerChild>* aChild);

enum MessageType {
    PSharedWorkerStart = PSharedWorkerMsgStart << 16,
    Msg_Close__ID,
    Msg_Suspend__ID,
    Msg_Resume__ID,
    Msg_Freeze__ID,
    Msg_Thaw__ID,
    Msg_Error__ID,
    Msg_Terminate__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PSharedWorkerEnd
};

IPC::Message*
Msg_Close(int32_t routingId);

IPC::Message*
Msg_Suspend(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);

IPC::Message*
Msg_Freeze(int32_t routingId);

IPC::Message*
Msg_Thaw(int32_t routingId);

IPC::Message*
Msg_Error(int32_t routingId);

IPC::Message*
Msg_Terminate(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PSharedWorker
} // namespace dom
} // namespace mozilla

#endif // ifndef PSharedWorker_h
