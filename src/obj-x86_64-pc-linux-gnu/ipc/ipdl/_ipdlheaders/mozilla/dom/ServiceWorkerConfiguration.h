//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef ServiceWorkerConfiguration_h
#define ServiceWorkerConfiguration_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/ServiceWorkerRegistrarTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ServiceWorkerConfiguration|
//
namespace mozilla {
namespace dom {
class ServiceWorkerConfiguration final
{
private:
    typedef mozilla::dom::ServiceWorkerRegistrationData ServiceWorkerRegistrationData;

public:
    MOZ_IMPLICIT ServiceWorkerConfiguration() :
        serviceWorkerRegistrations_()
    {
    }

    MOZ_IMPLICIT ServiceWorkerConfiguration(const nsTArray<ServiceWorkerRegistrationData>& _serviceWorkerRegistrations) :
        serviceWorkerRegistrations_(_serviceWorkerRegistrations)
    {
    }

    nsTArray<ServiceWorkerRegistrationData>&
    serviceWorkerRegistrations()
    {
        return serviceWorkerRegistrations_;
    }
    const nsTArray<ServiceWorkerRegistrationData>&
    serviceWorkerRegistrations() const
    {
        return serviceWorkerRegistrations_;
    }

private:
    CopyableTArray<ServiceWorkerRegistrationData> serviceWorkerRegistrations_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::ServiceWorkerConfiguration>
{
    typedef mozilla::dom::ServiceWorkerConfiguration paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef ServiceWorkerConfiguration_h
