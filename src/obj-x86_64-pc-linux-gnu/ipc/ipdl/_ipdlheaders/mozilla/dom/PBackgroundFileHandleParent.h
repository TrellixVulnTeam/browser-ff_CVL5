//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundFileHandleParent_h
#define PBackgroundFileHandleParent_h

#include "mozilla/dom/PBackgroundFileHandle.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace dom {
class PBackgroundFileRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundFileRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundMutableFileParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundMutableFileChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundFileRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundMutableFileParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PBackgroundFileHandleParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PBackgroundFileRequestParent;
    friend class mozilla::dom::PBackgroundMutableFileParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FileRequestBlobData FileRequestBlobData;
    typedef mozilla::dom::FileRequestData FileRequestData;
    typedef mozilla::dom::FileRequestFlushParams FileRequestFlushParams;
    typedef mozilla::dom::FileRequestGetMetadataParams FileRequestGetMetadataParams;
    typedef mozilla::dom::FileRequestParams FileRequestParams;
    typedef mozilla::dom::FileRequestReadParams FileRequestReadParams;
    typedef mozilla::dom::FileRequestStringData FileRequestStringData;
    typedef mozilla::dom::FileRequestTruncateParams FileRequestTruncateParams;
    typedef mozilla::dom::FileRequestWriteParams FileRequestWriteParams;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PBackgroundFileRequestParent PBackgroundFileRequestParent;
    typedef mozilla::dom::PBackgroundFileRequestChild PBackgroundFileRequestChild;
    typedef mozilla::dom::PBackgroundMutableFileParent PBackgroundMutableFileParent;
    typedef mozilla::dom::PBackgroundMutableFileChild PBackgroundMutableFileChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;

protected:
    virtual mozilla::ipc::IPCResult
    RecvDeleteMe() = 0;
    virtual mozilla::ipc::IPCResult
    RecvFinish() = 0;
    virtual mozilla::ipc::IPCResult
    RecvAbort() = 0;
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundFileRequestConstructor(
            PBackgroundFileRequestParent* actor,
            const FileRequestParams& params);
    virtual PBackgroundFileRequestParent*
    AllocPBackgroundFileRequestParent(const FileRequestParams& params) = 0;
    virtual bool
    DeallocPBackgroundFileRequestParent(PBackgroundFileRequestParent* aActor) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBackgroundFileHandleParent();

    virtual ~PBackgroundFileHandleParent();

public:
    PBackgroundMutableFileParent*
    Manager() const;

    void
    ManagedPBackgroundFileRequestParent(nsTArray<PBackgroundFileRequestParent*>& aArr) const;
    const ManagedContainer<PBackgroundFileRequestParent>&
    ManagedPBackgroundFileRequestParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PBackgroundFileRequestChild>
    OpenPBackgroundFileRequestEndpoint(PBackgroundFileRequestParent* aActor);
    bool
    BindPBackgroundFileRequestEndpoint(
            ManagedEndpoint<PBackgroundFileRequestParent> aEndpoint,
            PBackgroundFileRequestParent* aActor);

    [[nodiscard]] static bool
    Send__delete__(PBackgroundFileHandleParent* actor);

    [[nodiscard]] bool
    SendComplete(const bool& aborted);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PBackgroundFileRequestParent> mManagedPBackgroundFileRequestParent;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PBackgroundFileHandleParent*>
{
    typedef mozilla::dom::PBackgroundFileHandleParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundFileHandleParent_h
