//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundStorageChild_h
#define PBackgroundStorageChild_h

#include "mozilla/dom/PBackgroundStorage.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/OriginAttributes.h"

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {


class PBackgroundStorageChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::ipc::PBackgroundChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::OriginAttributesPattern OriginAttributesPattern;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvObserve(
            const nsCString& topic,
            const nsString& originAttributesPattern,
            const nsCString& originScope) = 0;
    virtual mozilla::ipc::IPCResult
    RecvOriginsHavingData(nsTArray<nsCString>&& origins) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLoadItem(
            const nsCString& originSuffix,
            const nsCString& originNoSuffix,
            const nsString& key,
            const nsString& value) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLoadDone(
            const nsCString& originSuffix,
            const nsCString& originNoSuffix,
            const nsresult& rv) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLoadUsage(
            const nsCString& scope,
            const int64_t& usage) = 0;
    virtual mozilla::ipc::IPCResult
    RecvError(const nsresult& rv) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBackgroundStorageChild();

    virtual ~PBackgroundStorageChild();

public:
    PBackgroundChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendDeleteMe();

    bool
    SendPreload(
            const nsCString& originSuffix,
            const nsCString& originNoSuffix,
            const uint32_t& alreadyLoadedCount,
            nsTArray<nsString>* keys,
            nsTArray<nsString>* values,
            nsresult* rv);

    bool
    SendAsyncPreload(
            const nsCString& originSuffix,
            const nsCString& originNoSuffix,
            const bool& priority);

    bool
    SendAsyncGetUsage(const nsCString& scope);

    bool
    SendAsyncAddItem(
            const nsCString& originSuffix,
            const nsCString& originNoSuffix,
            const nsString& key,
            const nsString& value);

    bool
    SendAsyncUpdateItem(
            const nsCString& originSuffix,
            const nsCString& originNoSuffix,
            const nsString& key,
            const nsString& value);

    bool
    SendAsyncRemoveItem(
            const nsCString& originSuffix,
            const nsCString& originNoSuffix,
            const nsString& key);

    bool
    SendAsyncClear(
            const nsCString& originSuffix,
            const nsCString& originNoSuffix);

    bool
    SendAsyncFlush();

    bool
    SendStartup();

    bool
    SendClearAll();

    bool
    SendClearMatchingOrigin(const nsCString& originNoSuffix);

    bool
    SendClearMatchingOriginAttributes(const OriginAttributesPattern& pattern);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PBackgroundStorageChild*>
{
    typedef mozilla::dom::PBackgroundStorageChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundStorageChild_h
