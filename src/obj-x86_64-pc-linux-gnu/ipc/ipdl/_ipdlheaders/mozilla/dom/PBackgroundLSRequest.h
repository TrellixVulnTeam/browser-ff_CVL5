//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundLSRequest_h
#define PBackgroundLSRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSRequestPreloadDatastoreResponse|
//
namespace mozilla {
namespace dom {
class LSRequestPreloadDatastoreResponse final
{
private:

public:
    MOZ_IMPLICIT LSRequestPreloadDatastoreResponse()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestPreloadDatastoreResponse>
{
    typedef mozilla::dom::LSRequestPreloadDatastoreResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSRequestPrepareDatastoreResponse|
//
namespace mozilla {
namespace dom {
class LSRequestPrepareDatastoreResponse final
{
private:

public:
    MOZ_IMPLICIT LSRequestPrepareDatastoreResponse() :
        datastoreId_()
    {
    }

    MOZ_IMPLICIT LSRequestPrepareDatastoreResponse(const uint64_t& _datastoreId) :
        datastoreId_(_datastoreId)
    {
    }

    uint64_t&
    datastoreId()
    {
        return datastoreId_;
    }
    const uint64_t&
    datastoreId() const
    {
        return datastoreId_;
    }

private:
    uint64_t datastoreId_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestPrepareDatastoreResponse>
{
    typedef mozilla::dom::LSRequestPrepareDatastoreResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSRequestPrepareObserverResponse|
//
namespace mozilla {
namespace dom {
class LSRequestPrepareObserverResponse final
{
private:

public:
    MOZ_IMPLICIT LSRequestPrepareObserverResponse() :
        observerId_()
    {
    }

    MOZ_IMPLICIT LSRequestPrepareObserverResponse(const uint64_t& _observerId) :
        observerId_(_observerId)
    {
    }

    uint64_t&
    observerId()
    {
        return observerId_;
    }
    const uint64_t&
    observerId() const
    {
        return observerId_;
    }

private:
    uint64_t observerId_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestPrepareObserverResponse>
{
    typedef mozilla::dom::LSRequestPrepareObserverResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union LSRequestResponse|
//
namespace mozilla {
namespace dom {
class LSRequestResponse final
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TLSRequestPreloadDatastoreResponse,
        TLSRequestPrepareDatastoreResponse,
        TLSRequestPrepareObserverResponse,
        T__Last = TLSRequestPrepareObserverResponse
    };

private:
    typedef mozilla::dom::LSRequestPreloadDatastoreResponse LSRequestPreloadDatastoreResponse;
    typedef mozilla::dom::LSRequestPrepareDatastoreResponse LSRequestPrepareDatastoreResponse;
    typedef mozilla::dom::LSRequestPrepareObserverResponse LSRequestPrepareObserverResponse;
    typedef nsresult nsresult__tdef;
    typedef LSRequestPreloadDatastoreResponse LSRequestPreloadDatastoreResponse__tdef;
    typedef LSRequestPrepareDatastoreResponse LSRequestPrepareDatastoreResponse__tdef;
    typedef LSRequestPrepareObserverResponse LSRequestPrepareObserverResponse__tdef;

    union Value {
        mozilla::AlignedStorage2<nsresult> Vnsresult;
        mozilla::AlignedStorage2<LSRequestPreloadDatastoreResponse> VLSRequestPreloadDatastoreResponse;
        mozilla::AlignedStorage2<LSRequestPrepareDatastoreResponse> VLSRequestPrepareDatastoreResponse;
        mozilla::AlignedStorage2<LSRequestPrepareObserverResponse> VLSRequestPrepareObserverResponse;
    };

    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }
    LSRequestPreloadDatastoreResponse*
    ptr_LSRequestPreloadDatastoreResponse()
    {
        return ((mValue).VLSRequestPreloadDatastoreResponse).addr();
    }
    const LSRequestPreloadDatastoreResponse*
    constptr_LSRequestPreloadDatastoreResponse() const
    {
        return ((mValue).VLSRequestPreloadDatastoreResponse).addr();
    }
    LSRequestPrepareDatastoreResponse*
    ptr_LSRequestPrepareDatastoreResponse()
    {
        return ((mValue).VLSRequestPrepareDatastoreResponse).addr();
    }
    const LSRequestPrepareDatastoreResponse*
    constptr_LSRequestPrepareDatastoreResponse() const
    {
        return ((mValue).VLSRequestPrepareDatastoreResponse).addr();
    }
    LSRequestPrepareObserverResponse*
    ptr_LSRequestPrepareObserverResponse()
    {
        return ((mValue).VLSRequestPrepareObserverResponse).addr();
    }
    const LSRequestPrepareObserverResponse*
    constptr_LSRequestPrepareObserverResponse() const
    {
        return ((mValue).VLSRequestPrepareObserverResponse).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT LSRequestResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT LSRequestResponse(const nsresult& aOther);

    MOZ_IMPLICIT LSRequestResponse(nsresult&& aOther);

    MOZ_IMPLICIT LSRequestResponse(const LSRequestPreloadDatastoreResponse& aOther);

    MOZ_IMPLICIT LSRequestResponse(LSRequestPreloadDatastoreResponse&& aOther);

    MOZ_IMPLICIT LSRequestResponse(const LSRequestPrepareDatastoreResponse& aOther);

    MOZ_IMPLICIT LSRequestResponse(LSRequestPrepareDatastoreResponse&& aOther);

    MOZ_IMPLICIT LSRequestResponse(const LSRequestPrepareObserverResponse& aOther);

    MOZ_IMPLICIT LSRequestResponse(LSRequestPrepareObserverResponse&& aOther);

    MOZ_IMPLICIT LSRequestResponse(const LSRequestResponse& aOther);

    MOZ_IMPLICIT LSRequestResponse(LSRequestResponse&& aOther);

    ~LSRequestResponse();

    Type
    type() const
    {
        return mType;
    }

    LSRequestResponse&
    operator=(const nsresult& aRhs);

    LSRequestResponse&
    operator=(nsresult&& aRhs);

    LSRequestResponse&
    operator=(const LSRequestPreloadDatastoreResponse& aRhs);

    LSRequestResponse&
    operator=(LSRequestPreloadDatastoreResponse&& aRhs);

    LSRequestResponse&
    operator=(const LSRequestPrepareDatastoreResponse& aRhs);

    LSRequestResponse&
    operator=(LSRequestPrepareDatastoreResponse&& aRhs);

    LSRequestResponse&
    operator=(const LSRequestPrepareObserverResponse& aRhs);

    LSRequestResponse&
    operator=(LSRequestPrepareObserverResponse&& aRhs);

    LSRequestResponse&
    operator=(const LSRequestResponse& aRhs);

    LSRequestResponse&
    operator=(LSRequestResponse&& aRhs);

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    LSRequestPreloadDatastoreResponse&
    get_LSRequestPreloadDatastoreResponse()
    {
        AssertSanity(TLSRequestPreloadDatastoreResponse);
        return (*(ptr_LSRequestPreloadDatastoreResponse()));
    }
    const LSRequestPreloadDatastoreResponse&
    get_LSRequestPreloadDatastoreResponse() const
    {
        AssertSanity(TLSRequestPreloadDatastoreResponse);
        return (*(constptr_LSRequestPreloadDatastoreResponse()));
    }
    operator LSRequestPreloadDatastoreResponse&()
    {
        return get_LSRequestPreloadDatastoreResponse();
    }
    operator const LSRequestPreloadDatastoreResponse&() const
    {
        return get_LSRequestPreloadDatastoreResponse();
    }

    LSRequestPrepareDatastoreResponse&
    get_LSRequestPrepareDatastoreResponse()
    {
        AssertSanity(TLSRequestPrepareDatastoreResponse);
        return (*(ptr_LSRequestPrepareDatastoreResponse()));
    }
    const LSRequestPrepareDatastoreResponse&
    get_LSRequestPrepareDatastoreResponse() const
    {
        AssertSanity(TLSRequestPrepareDatastoreResponse);
        return (*(constptr_LSRequestPrepareDatastoreResponse()));
    }
    operator LSRequestPrepareDatastoreResponse&()
    {
        return get_LSRequestPrepareDatastoreResponse();
    }
    operator const LSRequestPrepareDatastoreResponse&() const
    {
        return get_LSRequestPrepareDatastoreResponse();
    }

    LSRequestPrepareObserverResponse&
    get_LSRequestPrepareObserverResponse()
    {
        AssertSanity(TLSRequestPrepareObserverResponse);
        return (*(ptr_LSRequestPrepareObserverResponse()));
    }
    const LSRequestPrepareObserverResponse&
    get_LSRequestPrepareObserverResponse() const
    {
        AssertSanity(TLSRequestPrepareObserverResponse);
        return (*(constptr_LSRequestPrepareObserverResponse()));
    }
    operator LSRequestPrepareObserverResponse&()
    {
        return get_LSRequestPrepareObserverResponse();
    }
    operator const LSRequestPrepareObserverResponse&() const
    {
        return get_LSRequestPrepareObserverResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSRequestResponse>
{
    typedef mozilla::dom::LSRequestResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSRequestChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundLSRequestChild and PBackgroundLSRequestParent
//
namespace mozilla {
namespace dom {
namespace PBackgroundLSRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundLSRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundLSRequestChild>* aChild);

enum MessageType {
    PBackgroundLSRequestStart = PBackgroundLSRequestMsgStart << 16,
    Msg_Cancel__ID,
    Msg_Finish__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Ready__ID,
    PBackgroundLSRequestEnd
};

IPC::Message*
Msg_Cancel(int32_t routingId);

IPC::Message*
Msg_Finish(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Ready(int32_t routingId);



} // namespace PBackgroundLSRequest
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundLSRequest_h
