//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundFileRequest_h
#define PBackgroundFileRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestMetadata|
//
namespace mozilla {
namespace dom {
class FileRequestMetadata final
{
private:

public:
    MOZ_IMPLICIT FileRequestMetadata() :
        size_(),
        lastModified_()
    {
    }

    MOZ_IMPLICIT FileRequestMetadata(
            const mozilla::Maybe<uint64_t>& _size,
            const mozilla::Maybe<int64_t>& _lastModified) :
        size_(_size),
        lastModified_(_lastModified)
    {
    }

    mozilla::Maybe<uint64_t>&
    size()
    {
        return size_;
    }
    const mozilla::Maybe<uint64_t>&
    size() const
    {
        return size_;
    }

    mozilla::Maybe<int64_t>&
    lastModified()
    {
        return lastModified_;
    }
    const mozilla::Maybe<int64_t>&
    lastModified() const
    {
        return lastModified_;
    }

private:
    mozilla::Maybe<uint64_t> size_;
    mozilla::Maybe<int64_t> lastModified_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileRequestMetadata>
{
    typedef mozilla::dom::FileRequestMetadata paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestGetMetadataResponse|
//
namespace mozilla {
namespace dom {
class FileRequestGetMetadataResponse final
{
private:
    typedef mozilla::dom::FileRequestMetadata FileRequestMetadata;

public:
    MOZ_IMPLICIT FileRequestGetMetadataResponse() :
        metadata_()
    {
    }

    MOZ_IMPLICIT FileRequestGetMetadataResponse(const FileRequestMetadata& _metadata) :
        metadata_(_metadata)
    {
    }

    FileRequestMetadata&
    metadata()
    {
        return metadata_;
    }
    const FileRequestMetadata&
    metadata() const
    {
        return metadata_;
    }

private:
    FileRequestMetadata metadata_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileRequestGetMetadataResponse>
{
    typedef mozilla::dom::FileRequestGetMetadataResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestReadResponse|
//
namespace mozilla {
namespace dom {
class FileRequestReadResponse final
{
private:

public:
    MOZ_IMPLICIT FileRequestReadResponse() :
        data_()
    {
    }

    MOZ_IMPLICIT FileRequestReadResponse(const nsCString& _data) :
        data_(_data)
    {
    }

    nsCString&
    data()
    {
        return data_;
    }
    const nsCString&
    data() const
    {
        return data_;
    }

private:
    nsCString data_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileRequestReadResponse>
{
    typedef mozilla::dom::FileRequestReadResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestWriteResponse|
//
namespace mozilla {
namespace dom {
class FileRequestWriteResponse final
{
private:

public:
    MOZ_IMPLICIT FileRequestWriteResponse()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileRequestWriteResponse>
{
    typedef mozilla::dom::FileRequestWriteResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestTruncateResponse|
//
namespace mozilla {
namespace dom {
class FileRequestTruncateResponse final
{
private:

public:
    MOZ_IMPLICIT FileRequestTruncateResponse()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileRequestTruncateResponse>
{
    typedef mozilla::dom::FileRequestTruncateResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestFlushResponse|
//
namespace mozilla {
namespace dom {
class FileRequestFlushResponse final
{
private:

public:
    MOZ_IMPLICIT FileRequestFlushResponse()
    {
    }

private:
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileRequestFlushResponse>
{
    typedef mozilla::dom::FileRequestFlushResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union FileRequestResponse|
//
namespace mozilla {
namespace dom {
class FileRequestResponse final
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TFileRequestGetMetadataResponse,
        TFileRequestReadResponse,
        TFileRequestWriteResponse,
        TFileRequestTruncateResponse,
        TFileRequestFlushResponse,
        T__Last = TFileRequestFlushResponse
    };

private:
    typedef mozilla::dom::FileRequestGetMetadataResponse FileRequestGetMetadataResponse;
    typedef mozilla::dom::FileRequestReadResponse FileRequestReadResponse;
    typedef mozilla::dom::FileRequestWriteResponse FileRequestWriteResponse;
    typedef mozilla::dom::FileRequestTruncateResponse FileRequestTruncateResponse;
    typedef mozilla::dom::FileRequestFlushResponse FileRequestFlushResponse;
    typedef nsresult nsresult__tdef;
    typedef FileRequestGetMetadataResponse FileRequestGetMetadataResponse__tdef;
    typedef FileRequestReadResponse FileRequestReadResponse__tdef;
    typedef FileRequestWriteResponse FileRequestWriteResponse__tdef;
    typedef FileRequestTruncateResponse FileRequestTruncateResponse__tdef;
    typedef FileRequestFlushResponse FileRequestFlushResponse__tdef;

    union Value {
        mozilla::AlignedStorage2<nsresult> Vnsresult;
        mozilla::AlignedStorage2<FileRequestGetMetadataResponse> VFileRequestGetMetadataResponse;
        mozilla::AlignedStorage2<FileRequestReadResponse> VFileRequestReadResponse;
        mozilla::AlignedStorage2<FileRequestWriteResponse> VFileRequestWriteResponse;
        mozilla::AlignedStorage2<FileRequestTruncateResponse> VFileRequestTruncateResponse;
        mozilla::AlignedStorage2<FileRequestFlushResponse> VFileRequestFlushResponse;
    };

    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }
    FileRequestGetMetadataResponse*
    ptr_FileRequestGetMetadataResponse()
    {
        return ((mValue).VFileRequestGetMetadataResponse).addr();
    }
    const FileRequestGetMetadataResponse*
    constptr_FileRequestGetMetadataResponse() const
    {
        return ((mValue).VFileRequestGetMetadataResponse).addr();
    }
    FileRequestReadResponse*
    ptr_FileRequestReadResponse()
    {
        return ((mValue).VFileRequestReadResponse).addr();
    }
    const FileRequestReadResponse*
    constptr_FileRequestReadResponse() const
    {
        return ((mValue).VFileRequestReadResponse).addr();
    }
    FileRequestWriteResponse*
    ptr_FileRequestWriteResponse()
    {
        return ((mValue).VFileRequestWriteResponse).addr();
    }
    const FileRequestWriteResponse*
    constptr_FileRequestWriteResponse() const
    {
        return ((mValue).VFileRequestWriteResponse).addr();
    }
    FileRequestTruncateResponse*
    ptr_FileRequestTruncateResponse()
    {
        return ((mValue).VFileRequestTruncateResponse).addr();
    }
    const FileRequestTruncateResponse*
    constptr_FileRequestTruncateResponse() const
    {
        return ((mValue).VFileRequestTruncateResponse).addr();
    }
    FileRequestFlushResponse*
    ptr_FileRequestFlushResponse()
    {
        return ((mValue).VFileRequestFlushResponse).addr();
    }
    const FileRequestFlushResponse*
    constptr_FileRequestFlushResponse() const
    {
        return ((mValue).VFileRequestFlushResponse).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT FileRequestResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT FileRequestResponse(const nsresult& aOther);

    MOZ_IMPLICIT FileRequestResponse(nsresult&& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestGetMetadataResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(FileRequestGetMetadataResponse&& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestReadResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(FileRequestReadResponse&& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestWriteResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(FileRequestWriteResponse&& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestTruncateResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(FileRequestTruncateResponse&& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestFlushResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(FileRequestFlushResponse&& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(FileRequestResponse&& aOther);

    ~FileRequestResponse();

    Type
    type() const
    {
        return mType;
    }

    FileRequestResponse&
    operator=(const nsresult& aRhs);

    FileRequestResponse&
    operator=(nsresult&& aRhs);

    FileRequestResponse&
    operator=(const FileRequestGetMetadataResponse& aRhs);

    FileRequestResponse&
    operator=(FileRequestGetMetadataResponse&& aRhs);

    FileRequestResponse&
    operator=(const FileRequestReadResponse& aRhs);

    FileRequestResponse&
    operator=(FileRequestReadResponse&& aRhs);

    FileRequestResponse&
    operator=(const FileRequestWriteResponse& aRhs);

    FileRequestResponse&
    operator=(FileRequestWriteResponse&& aRhs);

    FileRequestResponse&
    operator=(const FileRequestTruncateResponse& aRhs);

    FileRequestResponse&
    operator=(FileRequestTruncateResponse&& aRhs);

    FileRequestResponse&
    operator=(const FileRequestFlushResponse& aRhs);

    FileRequestResponse&
    operator=(FileRequestFlushResponse&& aRhs);

    FileRequestResponse&
    operator=(const FileRequestResponse& aRhs);

    FileRequestResponse&
    operator=(FileRequestResponse&& aRhs);

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    FileRequestGetMetadataResponse&
    get_FileRequestGetMetadataResponse()
    {
        AssertSanity(TFileRequestGetMetadataResponse);
        return (*(ptr_FileRequestGetMetadataResponse()));
    }
    const FileRequestGetMetadataResponse&
    get_FileRequestGetMetadataResponse() const
    {
        AssertSanity(TFileRequestGetMetadataResponse);
        return (*(constptr_FileRequestGetMetadataResponse()));
    }
    operator FileRequestGetMetadataResponse&()
    {
        return get_FileRequestGetMetadataResponse();
    }
    operator const FileRequestGetMetadataResponse&() const
    {
        return get_FileRequestGetMetadataResponse();
    }

    FileRequestReadResponse&
    get_FileRequestReadResponse()
    {
        AssertSanity(TFileRequestReadResponse);
        return (*(ptr_FileRequestReadResponse()));
    }
    const FileRequestReadResponse&
    get_FileRequestReadResponse() const
    {
        AssertSanity(TFileRequestReadResponse);
        return (*(constptr_FileRequestReadResponse()));
    }
    operator FileRequestReadResponse&()
    {
        return get_FileRequestReadResponse();
    }
    operator const FileRequestReadResponse&() const
    {
        return get_FileRequestReadResponse();
    }

    FileRequestWriteResponse&
    get_FileRequestWriteResponse()
    {
        AssertSanity(TFileRequestWriteResponse);
        return (*(ptr_FileRequestWriteResponse()));
    }
    const FileRequestWriteResponse&
    get_FileRequestWriteResponse() const
    {
        AssertSanity(TFileRequestWriteResponse);
        return (*(constptr_FileRequestWriteResponse()));
    }
    operator FileRequestWriteResponse&()
    {
        return get_FileRequestWriteResponse();
    }
    operator const FileRequestWriteResponse&() const
    {
        return get_FileRequestWriteResponse();
    }

    FileRequestTruncateResponse&
    get_FileRequestTruncateResponse()
    {
        AssertSanity(TFileRequestTruncateResponse);
        return (*(ptr_FileRequestTruncateResponse()));
    }
    const FileRequestTruncateResponse&
    get_FileRequestTruncateResponse() const
    {
        AssertSanity(TFileRequestTruncateResponse);
        return (*(constptr_FileRequestTruncateResponse()));
    }
    operator FileRequestTruncateResponse&()
    {
        return get_FileRequestTruncateResponse();
    }
    operator const FileRequestTruncateResponse&() const
    {
        return get_FileRequestTruncateResponse();
    }

    FileRequestFlushResponse&
    get_FileRequestFlushResponse()
    {
        AssertSanity(TFileRequestFlushResponse);
        return (*(ptr_FileRequestFlushResponse()));
    }
    const FileRequestFlushResponse&
    get_FileRequestFlushResponse() const
    {
        AssertSanity(TFileRequestFlushResponse);
        return (*(constptr_FileRequestFlushResponse()));
    }
    operator FileRequestFlushResponse&()
    {
        return get_FileRequestFlushResponse();
    }
    operator const FileRequestFlushResponse&() const
    {
        return get_FileRequestFlushResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileRequestResponse>
{
    typedef mozilla::dom::FileRequestResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundFileRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundFileRequestChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundFileRequestChild and PBackgroundFileRequestParent
//
namespace mozilla {
namespace dom {
namespace PBackgroundFileRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundFileRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundFileRequestChild>* aChild);

enum MessageType {
    PBackgroundFileRequestStart = PBackgroundFileRequestMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Progress__ID,
    PBackgroundFileRequestEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Progress(int32_t routingId);



} // namespace PBackgroundFileRequest
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundFileRequest_h
