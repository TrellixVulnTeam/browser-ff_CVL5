//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PServiceWorkerManager_h
#define PServiceWorkerManager_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"
#include "mozilla/dom/ServiceWorkerRegistrarTypes.h"

namespace mozilla {
namespace dom {
class PServiceWorkerManagerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerManagerChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PServiceWorkerManagerChild and PServiceWorkerManagerParent
//
namespace mozilla {
namespace dom {
namespace PServiceWorkerManager {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PServiceWorkerManagerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PServiceWorkerManagerChild>* aChild);

enum MessageType {
    PServiceWorkerManagerStart = PServiceWorkerManagerMsgStart << 16,
    Msg_Register__ID,
    Msg_Unregister__ID,
    Msg_PropagateSoftUpdate__ID,
    Msg_PropagateUnregister__ID,
    Msg_PropagateRemove__ID,
    Msg_PropagateRemoveAll__ID,
    Msg_Shutdown__ID,
    Msg_PServiceWorkerUpdaterConstructor__ID,
    Reply_PServiceWorkerUpdaterConstructor__ID,
    Msg_NotifyRegister__ID,
    Msg_NotifySoftUpdate__ID,
    Msg_NotifyUnregister__ID,
    Msg_NotifyRemove__ID,
    Msg_NotifyRemoveAll__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PServiceWorkerManagerEnd
};

IPC::Message*
Msg_Register(int32_t routingId);

IPC::Message*
Msg_Unregister(int32_t routingId);

IPC::Message*
Msg_PropagateSoftUpdate(int32_t routingId);

IPC::Message*
Msg_PropagateUnregister(int32_t routingId);

IPC::Message*
Msg_PropagateRemove(int32_t routingId);

IPC::Message*
Msg_PropagateRemoveAll(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_PServiceWorkerUpdaterConstructor(int32_t routingId);
IPC::Message*
Reply_PServiceWorkerUpdaterConstructor(int32_t routingId);

IPC::Message*
Msg_NotifyRegister(int32_t routingId);

IPC::Message*
Msg_NotifySoftUpdate(int32_t routingId);

IPC::Message*
Msg_NotifyUnregister(int32_t routingId);

IPC::Message*
Msg_NotifyRemove(int32_t routingId);

IPC::Message*
Msg_NotifyRemoveAll(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PServiceWorkerManager
} // namespace dom
} // namespace mozilla

#endif // ifndef PServiceWorkerManager_h
