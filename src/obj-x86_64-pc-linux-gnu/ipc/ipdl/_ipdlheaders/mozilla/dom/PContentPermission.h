//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PContentPermission_h
#define PContentPermission_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PermissionRequest|
//
namespace mozilla {
namespace dom {
class PermissionRequest final
{
private:

public:
    MOZ_IMPLICIT PermissionRequest() :
        type_(),
        options_()
    {
    }

    MOZ_IMPLICIT PermissionRequest(
            const nsCString& _type,
            const nsTArray<nsString>& _options) :
        type_(_type),
        options_(_options)
    {
    }

    nsCString&
    type()
    {
        return type_;
    }
    const nsCString&
    type() const
    {
        return type_;
    }

    nsTArray<nsString>&
    options()
    {
        return options_;
    }
    const nsTArray<nsString>&
    options() const
    {
        return options_;
    }

private:
    nsCString type_;
    CopyableTArray<nsString> options_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PermissionRequest>
{
    typedef mozilla::dom::PermissionRequest paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PermissionChoice|
//
namespace mozilla {
namespace dom {
class PermissionChoice final
{
private:

public:
    MOZ_IMPLICIT PermissionChoice() :
        type_(),
        choice_()
    {
    }

    MOZ_IMPLICIT PermissionChoice(
            const nsCString& _type,
            const nsString& _choice) :
        type_(_type),
        choice_(_choice)
    {
    }

    nsCString&
    type()
    {
        return type_;
    }
    const nsCString&
    type() const
    {
        return type_;
    }

    nsString&
    choice()
    {
        return choice_;
    }
    const nsString&
    choice() const
    {
        return choice_;
    }

private:
    nsCString type_;
    nsString choice_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PermissionChoice>
{
    typedef mozilla::dom::PermissionChoice paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PContentPermission_h
