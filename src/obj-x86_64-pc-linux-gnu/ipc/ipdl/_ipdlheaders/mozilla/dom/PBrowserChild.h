//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBrowserChild_h
#define PBrowserChild_h

#include "mozilla/dom/PBrowser.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "Units.h"
#include "mozilla/AspectRatio.h"
#include "mozilla/ContentBlockingNotifier.h"
#include "mozilla/EventForwards.h"
#include "mozilla/PresShellForwards.h"
#include "mozilla/a11y/IPCTypes.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/EffectsInfo.h"
#include "mozilla/dom/TabMessageTypes.h"
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/gfx/Matrix.h"
#include "mozilla/gfx/Point.h"
#include "mozilla/gfx/Types.h"
#include "mozilla/ipc/BackgroundUtils.h"
#include "mozilla/ipc/IPCTypes.h"
#include "mozilla/layers/CompositorOptions.h"
#include "mozilla/layers/GeckoContentControllerTypes.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "mozilla/layers/ZoomConstraints.h"
#include "nsIFrame.h"
#include "nsIWidget.h"

namespace mozilla {
namespace dom {
class PColorPickerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PColorPickerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessibleChild;
} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace a11y {
class PDocAccessibleParent;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFilePickerChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PFilePickerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginWidgetChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginWidgetParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRemotePrintJobChild;
} // namespace layout
} // namespace mozilla
namespace mozilla {
namespace layout {
class PRemotePrintJobParent;
} // namespace layout
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPaymentRequestChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PPaymentRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWindowGlobalParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserBridgeChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserBridgeParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PVsyncChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PVsyncParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserBridgeChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PVsyncChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginWidgetChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {
class PHalChild;
} // namespace hal_sandbox
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PColorPickerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFilePickerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessibleChild;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPaymentRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintingChild;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace layers {
struct ScrollableLayerGuid;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
struct ZoomConstraints;
} // namespace layers
} // namespace mozilla

namespace mozilla {
struct void_t;
} // namespace mozilla

namespace mozilla {
class WidgetCompositionEvent;
} // namespace mozilla

namespace mozilla {
namespace widget {
struct IMENotification;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace widget {
struct IMENotificationRequests;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace widget {
struct IMEState;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace widget {
struct InputContext;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace widget {
struct InputContextAction;
} // namespace widget
} // namespace mozilla

namespace mozilla {
class ContentCache;
} // namespace mozilla

namespace mozilla {
class WidgetKeyboardEvent;
} // namespace mozilla

namespace mozilla {
class WidgetMouseEvent;
} // namespace mozilla

namespace mozilla {
class WidgetWheelEvent;
} // namespace mozilla

namespace mozilla {
class WidgetDragEvent;
} // namespace mozilla

struct nsRect;

namespace mozilla {
class WidgetSelectionEvent;
} // namespace mozilla

namespace mozilla {
class WidgetTouchEvent;
} // namespace mozilla

namespace mozilla {
namespace dom {
struct RemoteDOMEvent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
struct TextureFactoryIdentifier;
} // namespace layers
} // namespace mozilla

struct LookAndFeelInt;

namespace mozilla {
namespace dom {
class MessagePort;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace ipc {
class StructuredCloneData;
} // namespace ipc
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace widget {
struct CandidateWindowPosition;
} // namespace widget
} // namespace mozilla

namespace mozilla {
class NativeEventData;
} // namespace mozilla

namespace mozilla {
struct FontRange;
} // namespace mozilla

struct InputFormData;

struct CollectedInputDataValue;

class nsDocShellLoadState;

namespace mozilla {
namespace dom {


class PBrowserChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PBrowserBridgeChild;
    friend class mozilla::dom::PVsyncChild;
    friend class mozilla::plugins::PPluginWidgetChild;
    friend class mozilla::net::PNeckoChild;
    friend class mozilla::hal_sandbox::PHalChild;
    friend class mozilla::dom::PContentChild;
    friend class mozilla::dom::PColorPickerChild;
    friend class mozilla::dom::PFilePickerChild;
    friend class mozilla::a11y::PDocAccessibleChild;
    friend class mozilla::dom::PPaymentRequestChild;
    friend class mozilla::dom::PWindowGlobalChild;
    friend class mozilla::embedding::PPrintingChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::AspectRatio AspectRatio;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::CSSToScreenScale CSSToScreenScale;
    typedef mozilla::embedding::CStringKeyValue CStringKeyValue;
    typedef mozilla::widget::CandidateWindowPosition CandidateWindowPosition;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::CommandInt CommandInt;
    typedef mozilla::layers::CompositorOptions CompositorOptions;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::ContentCache ContentCache;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::dom::EffectsInfo EffectsInfo;
    typedef mozilla::dom::EmbedderElementEventType EmbedderElementEventType;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::EventMessage EventMessage;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::FontRange FontRange;
    typedef mozilla::dom::FrameIPCTabContext FrameIPCTabContext;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::layers::GeckoContentController_TapType GeckoContentController_TapType;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::a11y::IAccessibleHolder IAccessibleHolder;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::widget::IMENotification IMENotification;
    typedef mozilla::widget::IMENotificationRequests IMENotificationRequests;
    typedef mozilla::widget::IMEState IMEState;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPCTabContext IPCTabContext;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::widget::InputContext InputContext;
    typedef mozilla::widget::InputContextAction InputContextAction;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::gfx::IntPoint IntPoint;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::IntrinsicSize IntrinsicSize;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::dom::JSPluginFrameIPCTabContext JSPluginFrameIPCTabContext;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::layers::LayersId LayersId;
    typedef mozilla::layers::LayersObserverEpoch LayersObserverEpoch;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::LayoutDevicePoint LayoutDevicePoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::gfx::Matrix4x4 Matrix4x4;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::gfx::MaybeMatrix4x4 MaybeMatrix4x4;
    typedef mozilla::layers::MaybeZoomConstraints MaybeZoomConstraints;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePort MessagePort;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::Modifiers Modifiers;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::NativeEventData NativeEventData;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::dom::PopupIPCTabContext PopupIPCTabContext;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef mozilla::embedding::PrintData PrintData;
    typedef mozilla::dom::PrintPreviewResultInfo PrintPreviewResultInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::dom::RemoteDOMEvent RemoteDOMEvent;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::dom::RequestData RequestData;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef mozilla::ScreenIntCoord ScreenIntCoord;
    typedef mozilla::ScreenIntMargin ScreenIntMargin;
    typedef mozilla::ScreenIntPoint ScreenIntPoint;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::ScrollAxis ScrollAxis;
    typedef mozilla::ScrollFlags ScrollFlags;
    typedef mozilla::layers::ScrollableLayerGuid ScrollableLayerGuid;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ContentBlockingNotifier::StorageAccessPermissionGrantedReason StorageAccessPermissionGrantedReason;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::dom::ipc::StructuredCloneData StructuredCloneData;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::layers::TextureFactoryIdentifier TextureFactoryIdentifier;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef nsIWidget::TouchPointerState TouchPointerState;
    typedef nsIWidget::TouchpadPinchPhase TouchpadPinchPhase;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef ScrollableLayerGuid::ViewID ViewID;
    typedef mozilla::dom::WebProgressData WebProgressData;
    typedef mozilla::dom::WebProgressLocationChangeData WebProgressLocationChangeData;
    typedef mozilla::dom::WebProgressStateChangeData WebProgressStateChangeData;
    typedef mozilla::WidgetCompositionEvent WidgetCompositionEvent;
    typedef mozilla::WidgetDragEvent WidgetDragEvent;
    typedef mozilla::WidgetKeyboardEvent WidgetKeyboardEvent;
    typedef mozilla::WidgetMouseEvent WidgetMouseEvent;
    typedef mozilla::WidgetSelectionEvent WidgetSelectionEvent;
    typedef mozilla::WidgetTouchEvent WidgetTouchEvent;
    typedef mozilla::WidgetWheelEvent WidgetWheelEvent;
    typedef mozilla::dom::WindowContextInitializer WindowContextInitializer;
    typedef mozilla::dom::WindowGlobalInit WindowGlobalInit;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::ZoomConstraints ZoomConstraints;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PColorPickerChild PColorPickerChild;
    typedef mozilla::dom::PColorPickerParent PColorPickerParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::a11y::PDocAccessibleChild PDocAccessibleChild;
    typedef mozilla::a11y::PDocAccessibleParent PDocAccessibleParent;
    typedef mozilla::dom::PFilePickerChild PFilePickerChild;
    typedef mozilla::dom::PFilePickerParent PFilePickerParent;
    typedef mozilla::plugins::PPluginWidgetChild PPluginWidgetChild;
    typedef mozilla::plugins::PPluginWidgetParent PPluginWidgetParent;
    typedef mozilla::layout::PRemotePrintJobChild PRemotePrintJobChild;
    typedef mozilla::layout::PRemotePrintJobParent PRemotePrintJobParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;
    typedef mozilla::dom::PPaymentRequestChild PPaymentRequestChild;
    typedef mozilla::dom::PPaymentRequestParent PPaymentRequestParent;
    typedef mozilla::dom::PWindowGlobalChild PWindowGlobalChild;
    typedef mozilla::dom::PWindowGlobalParent PWindowGlobalParent;
    typedef mozilla::dom::PBrowserBridgeChild PBrowserBridgeChild;
    typedef mozilla::dom::PBrowserBridgeParent PBrowserBridgeParent;
    typedef mozilla::dom::PVsyncChild PVsyncChild;
    typedef mozilla::dom::PVsyncParent PVsyncParent;

public:
    typedef MozPromise<IMENotificationRequests, ResponseRejectReason, true> NotifyIMEFocusPromise;
    typedef MozPromise<uint32_t, ResponseRejectReason, true> IndexedDBPermissionRequestPromise;
    typedef MozPromise<nsCString, ResponseRejectReason, true> RequestPointerLockPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> RequestPointerCapturePromise;
    typedef std::function<void(const PrintPreviewResultInfo&)> PrintPreviewResolver;
    typedef std::function<void(const bool&)> WillChangeProcessResolver;
    typedef MozPromise<bool, ResponseRejectReason, true> IsWindowSupportingProtectedMediaPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> IsWindowSupportingWebVRPromise;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBrowserChild();

    virtual ~PBrowserChild();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PContentChild*
    Manager() const;

    void
    ManagedPColorPickerChild(nsTArray<PColorPickerChild*>& aArr) const;
    const ManagedContainer<PColorPickerChild>&
    ManagedPColorPickerChild() const;

    void
    ManagedPDocAccessibleChild(nsTArray<PDocAccessibleChild*>& aArr) const;
    const ManagedContainer<PDocAccessibleChild>&
    ManagedPDocAccessibleChild() const;

    void
    ManagedPFilePickerChild(nsTArray<PFilePickerChild*>& aArr) const;
    const ManagedContainer<PFilePickerChild>&
    ManagedPFilePickerChild() const;

    void
    ManagedPPluginWidgetChild(nsTArray<PPluginWidgetChild*>& aArr) const;
    const ManagedContainer<PPluginWidgetChild>&
    ManagedPPluginWidgetChild() const;

    void
    ManagedPPaymentRequestChild(nsTArray<PPaymentRequestChild*>& aArr) const;
    const ManagedContainer<PPaymentRequestChild>&
    ManagedPPaymentRequestChild() const;

    void
    ManagedPWindowGlobalChild(nsTArray<PWindowGlobalChild*>& aArr) const;
    const ManagedContainer<PWindowGlobalChild>&
    ManagedPWindowGlobalChild() const;

    void
    ManagedPBrowserBridgeChild(nsTArray<PBrowserBridgeChild*>& aArr) const;
    const ManagedContainer<PBrowserBridgeChild>&
    ManagedPBrowserBridgeChild() const;

    void
    ManagedPVsyncChild(nsTArray<PVsyncChild*>& aArr) const;
    const ManagedContainer<PVsyncChild>&
    ManagedPVsyncChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PColorPickerParent>
    OpenPColorPickerEndpoint(PColorPickerChild* aActor);
    bool
    BindPColorPickerEndpoint(
            ManagedEndpoint<PColorPickerChild> aEndpoint,
            PColorPickerChild* aActor);

    ManagedEndpoint<PDocAccessibleParent>
    OpenPDocAccessibleEndpoint(PDocAccessibleChild* aActor);
    bool
    BindPDocAccessibleEndpoint(
            ManagedEndpoint<PDocAccessibleChild> aEndpoint,
            PDocAccessibleChild* aActor);

    ManagedEndpoint<PFilePickerParent>
    OpenPFilePickerEndpoint(PFilePickerChild* aActor);
    bool
    BindPFilePickerEndpoint(
            ManagedEndpoint<PFilePickerChild> aEndpoint,
            PFilePickerChild* aActor);

    ManagedEndpoint<PPluginWidgetParent>
    OpenPPluginWidgetEndpoint(PPluginWidgetChild* aActor);
    bool
    BindPPluginWidgetEndpoint(
            ManagedEndpoint<PPluginWidgetChild> aEndpoint,
            PPluginWidgetChild* aActor);

    ManagedEndpoint<PPaymentRequestParent>
    OpenPPaymentRequestEndpoint(PPaymentRequestChild* aActor);
    bool
    BindPPaymentRequestEndpoint(
            ManagedEndpoint<PPaymentRequestChild> aEndpoint,
            PPaymentRequestChild* aActor);

    ManagedEndpoint<PWindowGlobalParent>
    OpenPWindowGlobalEndpoint(PWindowGlobalChild* aActor);
    bool
    BindPWindowGlobalEndpoint(
            ManagedEndpoint<PWindowGlobalChild> aEndpoint,
            PWindowGlobalChild* aActor);

    ManagedEndpoint<PBrowserBridgeParent>
    OpenPBrowserBridgeEndpoint(PBrowserBridgeChild* aActor);
    bool
    BindPBrowserBridgeEndpoint(
            ManagedEndpoint<PBrowserBridgeChild> aEndpoint,
            PBrowserBridgeChild* aActor);

    ManagedEndpoint<PVsyncParent>
    OpenPVsyncEndpoint(PVsyncChild* aActor);
    bool
    BindPVsyncEndpoint(
            ManagedEndpoint<PVsyncChild> aEndpoint,
            PVsyncChild* aActor);

    bool
    SendAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData);

    PDocAccessibleChild*
    SendPDocAccessibleConstructor(
            PDocAccessibleChild* aParentDoc,
            const uint64_t& aParentAcc,
            const uint32_t& aMsaaID,
            const IAccessibleHolder& aDocCOMProxy);

    PDocAccessibleChild*
    SendPDocAccessibleConstructor(
            PDocAccessibleChild* actor,
            PDocAccessibleChild* aParentDoc,
            const uint64_t& aParentAcc,
            const uint32_t& aMsaaID,
            const IAccessibleHolder& aDocCOMProxy);

    [[nodiscard]] PPluginWidgetChild*
    SendPPluginWidgetConstructor();

    [[nodiscard]] PPluginWidgetChild*
    SendPPluginWidgetConstructor(PPluginWidgetChild* actor);

    PPaymentRequestChild*
    SendPPaymentRequestConstructor();

    PPaymentRequestChild*
    SendPPaymentRequestConstructor(PPaymentRequestChild* actor);

    PVsyncChild*
    SendPVsyncConstructor();

    PVsyncChild*
    SendPVsyncConstructor(PVsyncChild* actor);

    bool
    SendSetNativeChildOfShareableWindow(const uintptr_t& childWindow);

    bool
    SendDispatchFocusToTopLevelWindow();

    bool
    SendMoveFocus(
            const bool& forward,
            const bool& forDocumentNavigation);

    bool
    SendSizeShellTo(
            const uint32_t& aFlag,
            const int32_t& aWidth,
            const int32_t& aHeight,
            const int32_t& aShellItemWidth,
            const int32_t& aShellItemHeight);

    bool
    SendDropLinks(const nsTArray<nsString>& aLinks);

    bool
    SendEvent(const RemoteDOMEvent& aEvent);

    bool
    SendSyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData,
            nsTArray<StructuredCloneData>* retval);

    void
    SendNotifyIMEFocus(
            const ContentCache& contentCache,
            const IMENotification& notification,
            mozilla::ipc::ResolveCallback<IMENotificationRequests>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<NotifyIMEFocusPromise>
    SendNotifyIMEFocus(
            const ContentCache& contentCache,
            const IMENotification& notification);

    bool
    SendNotifyIMETextChange(
            const ContentCache& contentCache,
            const IMENotification& notification);

    bool
    SendNotifyIMECompositionUpdate(
            const ContentCache& contentCache,
            const IMENotification& notification);

    bool
    SendNotifyIMESelection(
            const ContentCache& contentCache,
            const IMENotification& notification);

    bool
    SendUpdateContentCache(const ContentCache& contentCache);

    bool
    SendNotifyIMEMouseButtonEvent(
            const IMENotification& notification,
            bool* consumedByIME);

    bool
    SendNotifyIMEPositionChange(
            const ContentCache& contentCache,
            const IMENotification& notification);

    bool
    SendRequestIMEToCommitComposition(
            const bool& cancel,
            bool* isCommitted,
            nsString* committedString);

    bool
    SendOnEventNeedingAckHandled(const EventMessage& message);

    bool
    SendRequestFocus(
            const bool& canRaise,
            const CallerType& aCallerType);

    bool
    SendWheelZoomChange(const bool& increase);

    bool
    SendEnableDisableCommands(
            const MaybeDiscardedBrowsingContext& bc,
            const nsString& action,
            const nsTArray<nsCString>& enabledCommands,
            const nsTArray<nsCString>& disabledCommands);

    bool
    SendGetInputContext(IMEState* state);

    bool
    SendSetInputContext(
            const InputContext& context,
            const InputContextAction& action);

    bool
    SendSetCursor(
            const nsCursor& value,
            const bool& hasCustomCursor,
            const nsCString& customCursorData,
            const uint32_t& width,
            const uint32_t& height,
            const uint32_t& stride,
            const SurfaceFormat& format,
            const uint32_t& hotspotX,
            const uint32_t& hotspotY,
            const bool& force);

    bool
    SendSetLinkStatus(const nsString& status);

    bool
    SendShowTooltip(
            const uint32_t& x,
            const uint32_t& y,
            const nsString& tooltip,
            const nsString& direction);

    bool
    SendHideTooltip();

    PColorPickerChild*
    SendPColorPickerConstructor(
            const nsString& title,
            const nsString& initialColor);

    PColorPickerChild*
    SendPColorPickerConstructor(
            PColorPickerChild* actor,
            const nsString& title,
            const nsString& initialColor);

    PFilePickerChild*
    SendPFilePickerConstructor(
            const nsString& aTitle,
            const int16_t& aMode);

    PFilePickerChild*
    SendPFilePickerConstructor(
            PFilePickerChild* actor,
            const nsString& aTitle,
            const int16_t& aMode);

    void
    SendIndexedDBPermissionRequest(
            nsIPrincipal* aPrincipal,
            mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<IndexedDBPermissionRequestPromise>
    SendIndexedDBPermissionRequest(nsIPrincipal* aPrincipal);

    bool
    SendRespondStartSwipeEvent(
            const uint64_t& aInputBlockId,
            const bool& aStartSwipe);

    bool
    SendAsyncAuthPrompt(
            const nsCString& uri,
            const nsString& realm,
            const uint64_t& aCallbackId);

    bool
    SendLookUpDictionary(
            const nsString& aText,
            const nsTArray<FontRange>& aFontRangeArray,
            const bool& aIsVertical,
            const LayoutDeviceIntPoint& aPoint);

    static bool
    Send__delete__(PBrowserChild* actor);

    bool
    SendReplyKeyEvent(const WidgetKeyboardEvent& event);

    bool
    SendRequestNativeKeyBindings(
            const uint32_t& aType,
            const WidgetKeyboardEvent& aEvent,
            nsTArray<CommandInt>* commands);

    bool
    SendSynthesizeNativeKeyEvent(
            const int32_t& aNativeKeyboardLayout,
            const int32_t& aNativeKeyCode,
            const uint32_t& aModifierFlags,
            const nsString& aCharacters,
            const nsString& aUnmodifiedCharacters,
            const uint64_t& aObserverId);

    bool
    SendSynthesizeNativeMouseEvent(
            const LayoutDeviceIntPoint& aPoint,
            const uint32_t& aNativeMessage,
            const uint32_t& aModifierFlags,
            const uint64_t& aObserverId);

    bool
    SendSynthesizeNativeMouseMove(
            const LayoutDeviceIntPoint& aPoint,
            const uint64_t& aObserverId);

    bool
    SendSynthesizeNativeMouseScrollEvent(
            const LayoutDeviceIntPoint& aPoint,
            const uint32_t& aNativeMessage,
            const double& aDeltaX,
            const double& aDeltaY,
            const double& aDeltaZ,
            const uint32_t& aModifierFlags,
            const uint32_t& aAdditionalFlags,
            const uint64_t& aObserverId);

    bool
    SendSynthesizeNativeTouchPoint(
            const uint32_t& aPointerId,
            const TouchPointerState& aPointerState,
            const LayoutDeviceIntPoint& aPoint,
            const double& aPointerPressure,
            const uint32_t& aPointerOrientation,
            const uint64_t& aObserverId);

    bool
    SendSynthesizeNativeTouchPadPinch(
            const TouchpadPinchPhase& aEventPhase,
            const float& aScale,
            const LayoutDeviceIntPoint& aPoint,
            const int32_t& aModifierFlags);

    bool
    SendSynthesizeNativeTouchTap(
            const LayoutDeviceIntPoint& aPoint,
            const bool& aLongTap,
            const uint64_t& aObserverId);

    bool
    SendClearNativeTouchSequence(const uint64_t& aObserverId);

    bool
    SendAccessKeyNotHandled(const WidgetKeyboardEvent& event);

    bool
    SendRegisterProtocolHandler(
            const nsString& scheme,
            nsIURI* handlerURI,
            const nsString& title,
            nsIURI* documentURI);

    bool
    SendOnStateChange(
            const mozilla::Maybe<WebProgressData>& aWebProgressData,
            const RequestData& aRequestData,
            const uint32_t& aStateFlags,
            const nsresult& aStatus,
            const mozilla::Maybe<WebProgressStateChangeData>& aStateChangeData);

    bool
    SendOnProgressChange(
            const mozilla::Maybe<WebProgressData>& aWebProgressData,
            const RequestData& aRequestData,
            const int32_t& aCurSelfProgress,
            const int32_t& aMaxSelfProgress,
            const int32_t& aCurTotalProgress,
            const int32_t& aMaxTotalProgress);

    bool
    SendOnLocationChange(
            const mozilla::Maybe<WebProgressData>& aWebProgressData,
            const RequestData& aRequestData,
            nsIURI* aLocation,
            const uint32_t& aFlags,
            const bool& aCanGoBack,
            const bool& aCanGoForward,
            const mozilla::Maybe<WebProgressLocationChangeData>& aLocationChangeData);

    bool
    SendOnStatusChange(
            const mozilla::Maybe<WebProgressData>& aWebProgressData,
            const RequestData& aRequestData,
            const nsresult& aStatus,
            const nsString& aMessage);

    bool
    SendNotifyContentBlockingEvent(
            const uint32_t& aEvent,
            const RequestData& aRequestData,
            const bool& aBlocked,
            const nsCString& aTrackingOrigin,
            const nsTArray<nsCString>& aTrackingFullHashes,
            const mozilla::Maybe<StorageAccessPermissionGrantedReason>& aReason);

    bool
    SendNavigationFinished();

    bool
    SendSessionStoreUpdate(
            const mozilla::Maybe<nsCString>& aDocShellCaps,
            const mozilla::Maybe<bool>& aPrivatedMode,
            const nsTArray<nsCString>& aPositions,
            const nsTArray<int32_t>& aPositionDescendants,
            const nsTArray<InputFormData>& aInputs,
            const nsTArray<CollectedInputDataValue>& aIdVals,
            const nsTArray<CollectedInputDataValue>& aXPathVals,
            const nsTArray<nsCString>& aOrigins,
            const nsTArray<nsString>& aKeys,
            const nsTArray<nsString>& aValues,
            const bool& aIsFullStorage,
            const bool& aNeedCollectSHistory,
            const uint32_t& aFlushId,
            const bool& aIsFinal,
            const uint32_t& aEpoch);

    bool
    SendIntrinsicSizeOrRatioChanged(
            const mozilla::Maybe<IntrinsicSize>& aIntrinsicSize,
            const mozilla::Maybe<AspectRatio>& aIntrinsicRatio);

    void
    SendRequestPointerLock(
            mozilla::ipc::ResolveCallback<nsCString>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<RequestPointerLockPromise>
    SendRequestPointerLock();

    bool
    SendReleasePointerLock();

    void
    SendRequestPointerCapture(
            const uint32_t& aPointerId,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<RequestPointerCapturePromise>
    SendRequestPointerCapture(const uint32_t& aPointerId);

    bool
    SendReleasePointerCapture(const uint32_t& aPointerId);

    bool
    SendRemotePaintIsReady();

    bool
    SendRemoteIsReadyToHandleInputEvents();

    bool
    SendPaintWhileInterruptingJSNoOp(const LayersObserverEpoch& aEpoch);

    bool
    SendSetDimensions(
            const uint32_t& aFlags,
            const int32_t& aX,
            const int32_t& aY,
            const int32_t& aCx,
            const int32_t& aCy,
            const double& aScale);

    bool
    SendDispatchWheelEvent(const WidgetWheelEvent& event);

    bool
    SendDispatchMouseEvent(const WidgetMouseEvent& event);

    bool
    SendDispatchKeyboardEvent(const WidgetKeyboardEvent& event);

    bool
    SendInvokeDragSession(
            const nsTArray<IPCDataTransfer>& transfers,
            const uint32_t& action,
            mozilla::Maybe<Shmem>&& visualData,
            const uint32_t& stride,
            const SurfaceFormat& format,
            const LayoutDeviceIntRect& dragRect,
            nsIPrincipal* principal,
            nsIContentSecurityPolicy* csp,
            const CookieJarSettingsArgs& cookieJarSettings);

    bool
    SendEnsureLayersConnected(CompositorOptions* compositorOptions);

    bool
    SendShowCanvasPermissionPrompt(
            const nsCString& aOrigin,
            const bool& aHideDoorHanger);

    bool
    SendSetSystemFont(const nsCString& aFontName);

    bool
    SendGetSystemFont(nsCString* retval);

    bool
    SendMaybeFireEmbedderLoadEvents(const EmbedderElementEventType& aFireEventAtEmbeddingElement);

    bool
    SendScrollRectIntoView(
            const nsRect& aRect,
            const ScrollAxis& aVertical,
            const ScrollAxis& aHorizontal,
            const ScrollFlags& aScrollFlags,
            const int32_t& aAppUnitsPerDevPixel);

    bool
    SendSetAllowDeprecatedTls(const bool& value);

    void
    SendIsWindowSupportingProtectedMedia(
            const uint64_t& aOuterWindowID,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<IsWindowSupportingProtectedMediaPromise>
    SendIsWindowSupportingProtectedMedia(const uint64_t& aOuterWindowID);

    void
    SendIsWindowSupportingWebVR(
            const uint64_t& aOuterWindowID,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<IsWindowSupportingWebVRPromise>
    SendIsWindowSupportingWebVR(const uint64_t& aOuterWindowID);

    bool
    SendVisitURI(
            nsIURI* aURI,
            nsIURI* aLastVisitedURI,
            const uint32_t& aFlags);

    bool
    SendQueryVisitedState(const nsTArray<RefPtr<nsIURI>>& aURIs);

    bool
    SendNewWindowGlobal(
            ManagedEndpoint<mozilla::dom::PWindowGlobalParent>&& aEndpoint,
            const WindowGlobalInit& aInit);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PColorPickerChild> mManagedPColorPickerChild;
    ManagedContainer<PDocAccessibleChild> mManagedPDocAccessibleChild;
    ManagedContainer<PFilePickerChild> mManagedPFilePickerChild;
    ManagedContainer<PPluginWidgetChild> mManagedPPluginWidgetChild;
    ManagedContainer<PPaymentRequestChild> mManagedPPaymentRequestChild;
    ManagedContainer<PWindowGlobalChild> mManagedPWindowGlobalChild;
    ManagedContainer<PBrowserBridgeChild> mManagedPBrowserBridgeChild;
    ManagedContainer<PVsyncChild> mManagedPVsyncChild;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PBrowserChild*>
{
    typedef mozilla::dom::PBrowserChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBrowserChild_h
