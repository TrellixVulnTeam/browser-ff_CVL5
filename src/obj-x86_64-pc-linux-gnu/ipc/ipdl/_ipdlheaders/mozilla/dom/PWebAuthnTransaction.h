//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebAuthnTransaction_h
#define PWebAuthnTransaction_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/WebAuthnUtil.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnAuthenticatorSelection|
//
namespace mozilla {
namespace dom {
class WebAuthnAuthenticatorSelection final
{
private:
    typedef mozilla::dom::UserVerificationRequirement UserVerificationRequirement;
    typedef mozilla::dom::AuthenticatorAttachment AuthenticatorAttachment;

public:
    MOZ_IMPLICIT WebAuthnAuthenticatorSelection() :
        requireResidentKey_(),
        userVerificationRequirement_(),
        authenticatorAttachment_()
    {
    }

    MOZ_IMPLICIT WebAuthnAuthenticatorSelection(
            const bool& _requireResidentKey,
            const UserVerificationRequirement& _userVerificationRequirement,
            const mozilla::Maybe<AuthenticatorAttachment>& _authenticatorAttachment) :
        requireResidentKey_(_requireResidentKey),
        userVerificationRequirement_(_userVerificationRequirement),
        authenticatorAttachment_(_authenticatorAttachment)
    {
    }

    bool&
    requireResidentKey()
    {
        return requireResidentKey_;
    }
    const bool&
    requireResidentKey() const
    {
        return requireResidentKey_;
    }

    UserVerificationRequirement&
    userVerificationRequirement()
    {
        return userVerificationRequirement_;
    }
    const UserVerificationRequirement&
    userVerificationRequirement() const
    {
        return userVerificationRequirement_;
    }

    mozilla::Maybe<AuthenticatorAttachment>&
    authenticatorAttachment()
    {
        return authenticatorAttachment_;
    }
    const mozilla::Maybe<AuthenticatorAttachment>&
    authenticatorAttachment() const
    {
        return authenticatorAttachment_;
    }

private:
    bool requireResidentKey_;
    UserVerificationRequirement userVerificationRequirement_;
    mozilla::Maybe<AuthenticatorAttachment> authenticatorAttachment_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnAuthenticatorSelection>
{
    typedef mozilla::dom::WebAuthnAuthenticatorSelection paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnScopedCredential|
//
namespace mozilla {
namespace dom {
class WebAuthnScopedCredential final
{
private:

public:
    MOZ_IMPLICIT WebAuthnScopedCredential() :
        id_(),
        transports_()
    {
    }

    MOZ_IMPLICIT WebAuthnScopedCredential(
            const nsTArray<uint8_t>& _id,
            const uint8_t& _transports) :
        id_(_id),
        transports_(_transports)
    {
    }

    nsTArray<uint8_t>&
    id()
    {
        return id_;
    }
    const nsTArray<uint8_t>&
    id() const
    {
        return id_;
    }

    uint8_t&
    transports()
    {
        return transports_;
    }
    const uint8_t&
    transports() const
    {
        return transports_;
    }

private:
    CopyableTArray<uint8_t> id_;
    uint8_t transports_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnScopedCredential>
{
    typedef mozilla::dom::WebAuthnScopedCredential paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnExtensionAppId|
//
namespace mozilla {
namespace dom {
class WebAuthnExtensionAppId final
{
private:

public:
    MOZ_IMPLICIT WebAuthnExtensionAppId() :
        AppId_(),
        appIdentifier_()
    {
    }

    MOZ_IMPLICIT WebAuthnExtensionAppId(
            const nsTArray<uint8_t>& _AppId,
            const nsString& _appIdentifier) :
        AppId_(_AppId),
        appIdentifier_(_appIdentifier)
    {
    }

    nsTArray<uint8_t>&
    AppId()
    {
        return AppId_;
    }
    const nsTArray<uint8_t>&
    AppId() const
    {
        return AppId_;
    }

    nsString&
    appIdentifier()
    {
        return appIdentifier_;
    }
    const nsString&
    appIdentifier() const
    {
        return appIdentifier_;
    }

private:
    CopyableTArray<uint8_t> AppId_;
    nsString appIdentifier_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnExtensionAppId>
{
    typedef mozilla::dom::WebAuthnExtensionAppId paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnExtensionHmacSecret|
//
namespace mozilla {
namespace dom {
class WebAuthnExtensionHmacSecret final
{
private:

public:
    MOZ_IMPLICIT WebAuthnExtensionHmacSecret() :
        hmacCreateSecret_()
    {
    }

    MOZ_IMPLICIT WebAuthnExtensionHmacSecret(const bool& _hmacCreateSecret) :
        hmacCreateSecret_(_hmacCreateSecret)
    {
    }

    bool&
    hmacCreateSecret()
    {
        return hmacCreateSecret_;
    }
    const bool&
    hmacCreateSecret() const
    {
        return hmacCreateSecret_;
    }

private:
    bool hmacCreateSecret_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnExtensionHmacSecret>
{
    typedef mozilla::dom::WebAuthnExtensionHmacSecret paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union WebAuthnExtension|
//
namespace mozilla {
namespace dom {
class WebAuthnExtension final
{
public:
    enum Type {
        T__None,
        TWebAuthnExtensionAppId = 1,
        TWebAuthnExtensionHmacSecret,
        T__Last = TWebAuthnExtensionHmacSecret
    };

private:
    typedef mozilla::dom::WebAuthnExtensionAppId WebAuthnExtensionAppId;
    typedef mozilla::dom::WebAuthnExtensionHmacSecret WebAuthnExtensionHmacSecret;
    typedef WebAuthnExtensionAppId WebAuthnExtensionAppId__tdef;
    typedef WebAuthnExtensionHmacSecret WebAuthnExtensionHmacSecret__tdef;

    union Value {
        mozilla::AlignedStorage2<WebAuthnExtensionAppId> VWebAuthnExtensionAppId;
        mozilla::AlignedStorage2<WebAuthnExtensionHmacSecret> VWebAuthnExtensionHmacSecret;
    };

    WebAuthnExtensionAppId*
    ptr_WebAuthnExtensionAppId()
    {
        return ((mValue).VWebAuthnExtensionAppId).addr();
    }
    const WebAuthnExtensionAppId*
    constptr_WebAuthnExtensionAppId() const
    {
        return ((mValue).VWebAuthnExtensionAppId).addr();
    }
    WebAuthnExtensionHmacSecret*
    ptr_WebAuthnExtensionHmacSecret()
    {
        return ((mValue).VWebAuthnExtensionHmacSecret).addr();
    }
    const WebAuthnExtensionHmacSecret*
    constptr_WebAuthnExtensionHmacSecret() const
    {
        return ((mValue).VWebAuthnExtensionHmacSecret).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT WebAuthnExtension() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT WebAuthnExtension(const WebAuthnExtensionAppId& aOther);

    MOZ_IMPLICIT WebAuthnExtension(WebAuthnExtensionAppId&& aOther);

    MOZ_IMPLICIT WebAuthnExtension(const WebAuthnExtensionHmacSecret& aOther);

    MOZ_IMPLICIT WebAuthnExtension(WebAuthnExtensionHmacSecret&& aOther);

    MOZ_IMPLICIT WebAuthnExtension(const WebAuthnExtension& aOther);

    MOZ_IMPLICIT WebAuthnExtension(WebAuthnExtension&& aOther);

    ~WebAuthnExtension();

    Type
    type() const
    {
        return mType;
    }

    WebAuthnExtension&
    operator=(const WebAuthnExtensionAppId& aRhs);

    WebAuthnExtension&
    operator=(WebAuthnExtensionAppId&& aRhs);

    WebAuthnExtension&
    operator=(const WebAuthnExtensionHmacSecret& aRhs);

    WebAuthnExtension&
    operator=(WebAuthnExtensionHmacSecret&& aRhs);

    WebAuthnExtension&
    operator=(const WebAuthnExtension& aRhs);

    WebAuthnExtension&
    operator=(WebAuthnExtension&& aRhs);

    WebAuthnExtensionAppId&
    get_WebAuthnExtensionAppId()
    {
        AssertSanity(TWebAuthnExtensionAppId);
        return (*(ptr_WebAuthnExtensionAppId()));
    }
    const WebAuthnExtensionAppId&
    get_WebAuthnExtensionAppId() const
    {
        AssertSanity(TWebAuthnExtensionAppId);
        return (*(constptr_WebAuthnExtensionAppId()));
    }
    operator WebAuthnExtensionAppId&()
    {
        return get_WebAuthnExtensionAppId();
    }
    operator const WebAuthnExtensionAppId&() const
    {
        return get_WebAuthnExtensionAppId();
    }

    WebAuthnExtensionHmacSecret&
    get_WebAuthnExtensionHmacSecret()
    {
        AssertSanity(TWebAuthnExtensionHmacSecret);
        return (*(ptr_WebAuthnExtensionHmacSecret()));
    }
    const WebAuthnExtensionHmacSecret&
    get_WebAuthnExtensionHmacSecret() const
    {
        AssertSanity(TWebAuthnExtensionHmacSecret);
        return (*(constptr_WebAuthnExtensionHmacSecret()));
    }
    operator WebAuthnExtensionHmacSecret&()
    {
        return get_WebAuthnExtensionHmacSecret();
    }
    operator const WebAuthnExtensionHmacSecret&() const
    {
        return get_WebAuthnExtensionHmacSecret();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnExtension>
{
    typedef mozilla::dom::WebAuthnExtension paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnExtensionResultAppId|
//
namespace mozilla {
namespace dom {
class WebAuthnExtensionResultAppId final
{
private:

public:
    MOZ_IMPLICIT WebAuthnExtensionResultAppId() :
        AppId_()
    {
    }

    MOZ_IMPLICIT WebAuthnExtensionResultAppId(const bool& _AppId) :
        AppId_(_AppId)
    {
    }

    bool&
    AppId()
    {
        return AppId_;
    }
    const bool&
    AppId() const
    {
        return AppId_;
    }

private:
    bool AppId_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnExtensionResultAppId>
{
    typedef mozilla::dom::WebAuthnExtensionResultAppId paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnExtensionResultHmacSecret|
//
namespace mozilla {
namespace dom {
class WebAuthnExtensionResultHmacSecret final
{
private:

public:
    MOZ_IMPLICIT WebAuthnExtensionResultHmacSecret() :
        hmacCreateSecret_()
    {
    }

    MOZ_IMPLICIT WebAuthnExtensionResultHmacSecret(const bool& _hmacCreateSecret) :
        hmacCreateSecret_(_hmacCreateSecret)
    {
    }

    bool&
    hmacCreateSecret()
    {
        return hmacCreateSecret_;
    }
    const bool&
    hmacCreateSecret() const
    {
        return hmacCreateSecret_;
    }

private:
    bool hmacCreateSecret_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnExtensionResultHmacSecret>
{
    typedef mozilla::dom::WebAuthnExtensionResultHmacSecret paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union WebAuthnExtensionResult|
//
namespace mozilla {
namespace dom {
class WebAuthnExtensionResult final
{
public:
    enum Type {
        T__None,
        TWebAuthnExtensionResultAppId = 1,
        TWebAuthnExtensionResultHmacSecret,
        T__Last = TWebAuthnExtensionResultHmacSecret
    };

private:
    typedef mozilla::dom::WebAuthnExtensionResultAppId WebAuthnExtensionResultAppId;
    typedef mozilla::dom::WebAuthnExtensionResultHmacSecret WebAuthnExtensionResultHmacSecret;
    typedef WebAuthnExtensionResultAppId WebAuthnExtensionResultAppId__tdef;
    typedef WebAuthnExtensionResultHmacSecret WebAuthnExtensionResultHmacSecret__tdef;

    union Value {
        mozilla::AlignedStorage2<WebAuthnExtensionResultAppId> VWebAuthnExtensionResultAppId;
        mozilla::AlignedStorage2<WebAuthnExtensionResultHmacSecret> VWebAuthnExtensionResultHmacSecret;
    };

    WebAuthnExtensionResultAppId*
    ptr_WebAuthnExtensionResultAppId()
    {
        return ((mValue).VWebAuthnExtensionResultAppId).addr();
    }
    const WebAuthnExtensionResultAppId*
    constptr_WebAuthnExtensionResultAppId() const
    {
        return ((mValue).VWebAuthnExtensionResultAppId).addr();
    }
    WebAuthnExtensionResultHmacSecret*
    ptr_WebAuthnExtensionResultHmacSecret()
    {
        return ((mValue).VWebAuthnExtensionResultHmacSecret).addr();
    }
    const WebAuthnExtensionResultHmacSecret*
    constptr_WebAuthnExtensionResultHmacSecret() const
    {
        return ((mValue).VWebAuthnExtensionResultHmacSecret).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT WebAuthnExtensionResult() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT WebAuthnExtensionResult(const WebAuthnExtensionResultAppId& aOther);

    MOZ_IMPLICIT WebAuthnExtensionResult(WebAuthnExtensionResultAppId&& aOther);

    MOZ_IMPLICIT WebAuthnExtensionResult(const WebAuthnExtensionResultHmacSecret& aOther);

    MOZ_IMPLICIT WebAuthnExtensionResult(WebAuthnExtensionResultHmacSecret&& aOther);

    MOZ_IMPLICIT WebAuthnExtensionResult(const WebAuthnExtensionResult& aOther);

    MOZ_IMPLICIT WebAuthnExtensionResult(WebAuthnExtensionResult&& aOther);

    ~WebAuthnExtensionResult();

    Type
    type() const
    {
        return mType;
    }

    WebAuthnExtensionResult&
    operator=(const WebAuthnExtensionResultAppId& aRhs);

    WebAuthnExtensionResult&
    operator=(WebAuthnExtensionResultAppId&& aRhs);

    WebAuthnExtensionResult&
    operator=(const WebAuthnExtensionResultHmacSecret& aRhs);

    WebAuthnExtensionResult&
    operator=(WebAuthnExtensionResultHmacSecret&& aRhs);

    WebAuthnExtensionResult&
    operator=(const WebAuthnExtensionResult& aRhs);

    WebAuthnExtensionResult&
    operator=(WebAuthnExtensionResult&& aRhs);

    WebAuthnExtensionResultAppId&
    get_WebAuthnExtensionResultAppId()
    {
        AssertSanity(TWebAuthnExtensionResultAppId);
        return (*(ptr_WebAuthnExtensionResultAppId()));
    }
    const WebAuthnExtensionResultAppId&
    get_WebAuthnExtensionResultAppId() const
    {
        AssertSanity(TWebAuthnExtensionResultAppId);
        return (*(constptr_WebAuthnExtensionResultAppId()));
    }
    operator WebAuthnExtensionResultAppId&()
    {
        return get_WebAuthnExtensionResultAppId();
    }
    operator const WebAuthnExtensionResultAppId&() const
    {
        return get_WebAuthnExtensionResultAppId();
    }

    WebAuthnExtensionResultHmacSecret&
    get_WebAuthnExtensionResultHmacSecret()
    {
        AssertSanity(TWebAuthnExtensionResultHmacSecret);
        return (*(ptr_WebAuthnExtensionResultHmacSecret()));
    }
    const WebAuthnExtensionResultHmacSecret&
    get_WebAuthnExtensionResultHmacSecret() const
    {
        AssertSanity(TWebAuthnExtensionResultHmacSecret);
        return (*(constptr_WebAuthnExtensionResultHmacSecret()));
    }
    operator WebAuthnExtensionResultHmacSecret&()
    {
        return get_WebAuthnExtensionResultHmacSecret();
    }
    operator const WebAuthnExtensionResultHmacSecret&() const
    {
        return get_WebAuthnExtensionResultHmacSecret();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnExtensionResult>
{
    typedef mozilla::dom::WebAuthnExtensionResult paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnMakeCredentialRpInfo|
//
namespace mozilla {
namespace dom {
class WebAuthnMakeCredentialRpInfo final
{
private:

public:
    MOZ_IMPLICIT WebAuthnMakeCredentialRpInfo() :
        Name_(),
        Icon_()
    {
    }

    MOZ_IMPLICIT WebAuthnMakeCredentialRpInfo(
            const nsString& _Name,
            const nsString& _Icon) :
        Name_(_Name),
        Icon_(_Icon)
    {
    }

    nsString&
    Name()
    {
        return Name_;
    }
    const nsString&
    Name() const
    {
        return Name_;
    }

    nsString&
    Icon()
    {
        return Icon_;
    }
    const nsString&
    Icon() const
    {
        return Icon_;
    }

private:
    nsString Name_;
    nsString Icon_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnMakeCredentialRpInfo>
{
    typedef mozilla::dom::WebAuthnMakeCredentialRpInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnMakeCredentialUserInfo|
//
namespace mozilla {
namespace dom {
class WebAuthnMakeCredentialUserInfo final
{
private:

public:
    MOZ_IMPLICIT WebAuthnMakeCredentialUserInfo() :
        Id_(),
        Name_(),
        Icon_(),
        DisplayName_()
    {
    }

    MOZ_IMPLICIT WebAuthnMakeCredentialUserInfo(
            const nsTArray<uint8_t>& _Id,
            const nsString& _Name,
            const nsString& _Icon,
            const nsString& _DisplayName) :
        Id_(_Id),
        Name_(_Name),
        Icon_(_Icon),
        DisplayName_(_DisplayName)
    {
    }

    nsTArray<uint8_t>&
    Id()
    {
        return Id_;
    }
    const nsTArray<uint8_t>&
    Id() const
    {
        return Id_;
    }

    nsString&
    Name()
    {
        return Name_;
    }
    const nsString&
    Name() const
    {
        return Name_;
    }

    nsString&
    Icon()
    {
        return Icon_;
    }
    const nsString&
    Icon() const
    {
        return Icon_;
    }

    nsString&
    DisplayName()
    {
        return DisplayName_;
    }
    const nsString&
    DisplayName() const
    {
        return DisplayName_;
    }

private:
    CopyableTArray<uint8_t> Id_;
    nsString Name_;
    nsString Icon_;
    nsString DisplayName_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnMakeCredentialUserInfo>
{
    typedef mozilla::dom::WebAuthnMakeCredentialUserInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CoseAlg|
//
namespace mozilla {
namespace dom {
class CoseAlg final
{
private:

public:
    MOZ_IMPLICIT CoseAlg() :
        alg_()
    {
    }

    MOZ_IMPLICIT CoseAlg(const long& _alg) :
        alg_(_alg)
    {
    }

    long&
    alg()
    {
        return alg_;
    }
    const long&
    alg() const
    {
        return alg_;
    }

private:
    long alg_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::CoseAlg>
{
    typedef mozilla::dom::CoseAlg paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnMakeCredentialExtraInfo|
//
namespace mozilla {
namespace dom {
class WebAuthnMakeCredentialExtraInfo final
{
private:
    typedef mozilla::dom::WebAuthnMakeCredentialRpInfo WebAuthnMakeCredentialRpInfo;
    typedef mozilla::dom::WebAuthnMakeCredentialUserInfo WebAuthnMakeCredentialUserInfo;
    typedef mozilla::dom::CoseAlg CoseAlg;
    typedef mozilla::dom::WebAuthnExtension WebAuthnExtension;
    typedef mozilla::dom::WebAuthnAuthenticatorSelection WebAuthnAuthenticatorSelection;
    typedef mozilla::dom::AttestationConveyancePreference AttestationConveyancePreference;

public:
    MOZ_IMPLICIT WebAuthnMakeCredentialExtraInfo() :
        Rp_(),
        User_(),
        coseAlgs_(),
        Extensions_(),
        AuthenticatorSelection_(),
        attestationConveyancePreference_()
    {
    }

    MOZ_IMPLICIT WebAuthnMakeCredentialExtraInfo(
            const WebAuthnMakeCredentialRpInfo& _Rp,
            const WebAuthnMakeCredentialUserInfo& _User,
            const nsTArray<CoseAlg>& _coseAlgs,
            const nsTArray<WebAuthnExtension>& _Extensions,
            const WebAuthnAuthenticatorSelection& _AuthenticatorSelection,
            const AttestationConveyancePreference& _attestationConveyancePreference) :
        Rp_(_Rp),
        User_(_User),
        coseAlgs_(_coseAlgs),
        Extensions_(_Extensions),
        AuthenticatorSelection_(_AuthenticatorSelection),
        attestationConveyancePreference_(_attestationConveyancePreference)
    {
    }

    WebAuthnMakeCredentialRpInfo&
    Rp()
    {
        return Rp_;
    }
    const WebAuthnMakeCredentialRpInfo&
    Rp() const
    {
        return Rp_;
    }

    WebAuthnMakeCredentialUserInfo&
    User()
    {
        return User_;
    }
    const WebAuthnMakeCredentialUserInfo&
    User() const
    {
        return User_;
    }

    nsTArray<CoseAlg>&
    coseAlgs()
    {
        return coseAlgs_;
    }
    const nsTArray<CoseAlg>&
    coseAlgs() const
    {
        return coseAlgs_;
    }

    nsTArray<WebAuthnExtension>&
    Extensions()
    {
        return Extensions_;
    }
    const nsTArray<WebAuthnExtension>&
    Extensions() const
    {
        return Extensions_;
    }

    WebAuthnAuthenticatorSelection&
    AuthenticatorSelection()
    {
        return AuthenticatorSelection_;
    }
    const WebAuthnAuthenticatorSelection&
    AuthenticatorSelection() const
    {
        return AuthenticatorSelection_;
    }

    AttestationConveyancePreference&
    attestationConveyancePreference()
    {
        return attestationConveyancePreference_;
    }
    const AttestationConveyancePreference&
    attestationConveyancePreference() const
    {
        return attestationConveyancePreference_;
    }

private:
    WebAuthnMakeCredentialRpInfo Rp_;
    WebAuthnMakeCredentialUserInfo User_;
    CopyableTArray<CoseAlg> coseAlgs_;
    CopyableTArray<WebAuthnExtension> Extensions_;
    WebAuthnAuthenticatorSelection AuthenticatorSelection_;
    AttestationConveyancePreference attestationConveyancePreference_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnMakeCredentialExtraInfo>
{
    typedef mozilla::dom::WebAuthnMakeCredentialExtraInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnMakeCredentialInfo|
//
namespace mozilla {
namespace dom {
class WebAuthnMakeCredentialInfo final
{
private:
    typedef mozilla::dom::WebAuthnScopedCredential WebAuthnScopedCredential;
    typedef mozilla::dom::WebAuthnMakeCredentialExtraInfo WebAuthnMakeCredentialExtraInfo;

public:
    MOZ_IMPLICIT WebAuthnMakeCredentialInfo() :
        Origin_(),
        RpId_(),
        Challenge_(),
        ClientDataJSON_(),
        ExcludeList_(),
        Extra_(),
        BrowsingContextId_(),
        TimeoutMS_()
    {
    }

    MOZ_IMPLICIT WebAuthnMakeCredentialInfo(
            const nsString& _Origin,
            const nsString& _RpId,
            const nsTArray<uint8_t>& _Challenge,
            const nsCString& _ClientDataJSON,
            const uint32_t& _TimeoutMS,
            const nsTArray<WebAuthnScopedCredential>& _ExcludeList,
            const mozilla::Maybe<WebAuthnMakeCredentialExtraInfo>& _Extra,
            const uint64_t& _BrowsingContextId) :
        Origin_(_Origin),
        RpId_(_RpId),
        Challenge_(_Challenge),
        ClientDataJSON_(_ClientDataJSON),
        ExcludeList_(_ExcludeList),
        Extra_(_Extra),
        BrowsingContextId_(_BrowsingContextId),
        TimeoutMS_(_TimeoutMS)
    {
    }

    nsString&
    Origin()
    {
        return Origin_;
    }
    const nsString&
    Origin() const
    {
        return Origin_;
    }

    nsString&
    RpId()
    {
        return RpId_;
    }
    const nsString&
    RpId() const
    {
        return RpId_;
    }

    nsTArray<uint8_t>&
    Challenge()
    {
        return Challenge_;
    }
    const nsTArray<uint8_t>&
    Challenge() const
    {
        return Challenge_;
    }

    nsCString&
    ClientDataJSON()
    {
        return ClientDataJSON_;
    }
    const nsCString&
    ClientDataJSON() const
    {
        return ClientDataJSON_;
    }

    uint32_t&
    TimeoutMS()
    {
        return TimeoutMS_;
    }
    const uint32_t&
    TimeoutMS() const
    {
        return TimeoutMS_;
    }

    nsTArray<WebAuthnScopedCredential>&
    ExcludeList()
    {
        return ExcludeList_;
    }
    const nsTArray<WebAuthnScopedCredential>&
    ExcludeList() const
    {
        return ExcludeList_;
    }

    mozilla::Maybe<WebAuthnMakeCredentialExtraInfo>&
    Extra()
    {
        return Extra_;
    }
    const mozilla::Maybe<WebAuthnMakeCredentialExtraInfo>&
    Extra() const
    {
        return Extra_;
    }

    uint64_t&
    BrowsingContextId()
    {
        return BrowsingContextId_;
    }
    const uint64_t&
    BrowsingContextId() const
    {
        return BrowsingContextId_;
    }

private:
    nsString Origin_;
    nsString RpId_;
    CopyableTArray<uint8_t> Challenge_;
    nsCString ClientDataJSON_;
    CopyableTArray<WebAuthnScopedCredential> ExcludeList_;
    mozilla::Maybe<WebAuthnMakeCredentialExtraInfo> Extra_;
    uint64_t BrowsingContextId_;
    uint32_t TimeoutMS_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnMakeCredentialInfo>
{
    typedef mozilla::dom::WebAuthnMakeCredentialInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnMakeCredentialResult|
//
namespace mozilla {
namespace dom {
class WebAuthnMakeCredentialResult final
{
private:
    typedef mozilla::dom::WebAuthnExtensionResult WebAuthnExtensionResult;

public:
    MOZ_IMPLICIT WebAuthnMakeCredentialResult() :
        ClientDataJSON_(),
        AttestationObject_(),
        KeyHandle_(),
        RegistrationData_(),
        Extensions_()
    {
    }

    MOZ_IMPLICIT WebAuthnMakeCredentialResult(
            const nsCString& _ClientDataJSON,
            const nsTArray<uint8_t>& _AttestationObject,
            const nsTArray<uint8_t>& _KeyHandle,
            const nsTArray<uint8_t>& _RegistrationData,
            const nsTArray<WebAuthnExtensionResult>& _Extensions) :
        ClientDataJSON_(_ClientDataJSON),
        AttestationObject_(_AttestationObject),
        KeyHandle_(_KeyHandle),
        RegistrationData_(_RegistrationData),
        Extensions_(_Extensions)
    {
    }

    nsCString&
    ClientDataJSON()
    {
        return ClientDataJSON_;
    }
    const nsCString&
    ClientDataJSON() const
    {
        return ClientDataJSON_;
    }

    nsTArray<uint8_t>&
    AttestationObject()
    {
        return AttestationObject_;
    }
    const nsTArray<uint8_t>&
    AttestationObject() const
    {
        return AttestationObject_;
    }

    nsTArray<uint8_t>&
    KeyHandle()
    {
        return KeyHandle_;
    }
    const nsTArray<uint8_t>&
    KeyHandle() const
    {
        return KeyHandle_;
    }

    nsTArray<uint8_t>&
    RegistrationData()
    {
        return RegistrationData_;
    }
    const nsTArray<uint8_t>&
    RegistrationData() const
    {
        return RegistrationData_;
    }

    nsTArray<WebAuthnExtensionResult>&
    Extensions()
    {
        return Extensions_;
    }
    const nsTArray<WebAuthnExtensionResult>&
    Extensions() const
    {
        return Extensions_;
    }

private:
    nsCString ClientDataJSON_;
    CopyableTArray<uint8_t> AttestationObject_;
    CopyableTArray<uint8_t> KeyHandle_;
    CopyableTArray<uint8_t> RegistrationData_;
    CopyableTArray<WebAuthnExtensionResult> Extensions_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnMakeCredentialResult>
{
    typedef mozilla::dom::WebAuthnMakeCredentialResult paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnGetAssertionExtraInfo|
//
namespace mozilla {
namespace dom {
class WebAuthnGetAssertionExtraInfo final
{
private:
    typedef mozilla::dom::WebAuthnExtension WebAuthnExtension;
    typedef mozilla::dom::UserVerificationRequirement UserVerificationRequirement;

public:
    MOZ_IMPLICIT WebAuthnGetAssertionExtraInfo() :
        Extensions_(),
        userVerificationRequirement_()
    {
    }

    MOZ_IMPLICIT WebAuthnGetAssertionExtraInfo(
            const nsTArray<WebAuthnExtension>& _Extensions,
            const UserVerificationRequirement& _userVerificationRequirement) :
        Extensions_(_Extensions),
        userVerificationRequirement_(_userVerificationRequirement)
    {
    }

    nsTArray<WebAuthnExtension>&
    Extensions()
    {
        return Extensions_;
    }
    const nsTArray<WebAuthnExtension>&
    Extensions() const
    {
        return Extensions_;
    }

    UserVerificationRequirement&
    userVerificationRequirement()
    {
        return userVerificationRequirement_;
    }
    const UserVerificationRequirement&
    userVerificationRequirement() const
    {
        return userVerificationRequirement_;
    }

private:
    CopyableTArray<WebAuthnExtension> Extensions_;
    UserVerificationRequirement userVerificationRequirement_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnGetAssertionExtraInfo>
{
    typedef mozilla::dom::WebAuthnGetAssertionExtraInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnGetAssertionInfo|
//
namespace mozilla {
namespace dom {
class WebAuthnGetAssertionInfo final
{
private:
    typedef mozilla::dom::WebAuthnScopedCredential WebAuthnScopedCredential;
    typedef mozilla::dom::WebAuthnGetAssertionExtraInfo WebAuthnGetAssertionExtraInfo;

public:
    MOZ_IMPLICIT WebAuthnGetAssertionInfo() :
        Origin_(),
        RpId_(),
        Challenge_(),
        ClientDataJSON_(),
        AllowList_(),
        Extra_(),
        BrowsingContextId_(),
        TimeoutMS_()
    {
    }

    MOZ_IMPLICIT WebAuthnGetAssertionInfo(
            const nsString& _Origin,
            const nsString& _RpId,
            const nsTArray<uint8_t>& _Challenge,
            const nsCString& _ClientDataJSON,
            const uint32_t& _TimeoutMS,
            const nsTArray<WebAuthnScopedCredential>& _AllowList,
            const mozilla::Maybe<WebAuthnGetAssertionExtraInfo>& _Extra,
            const uint64_t& _BrowsingContextId) :
        Origin_(_Origin),
        RpId_(_RpId),
        Challenge_(_Challenge),
        ClientDataJSON_(_ClientDataJSON),
        AllowList_(_AllowList),
        Extra_(_Extra),
        BrowsingContextId_(_BrowsingContextId),
        TimeoutMS_(_TimeoutMS)
    {
    }

    nsString&
    Origin()
    {
        return Origin_;
    }
    const nsString&
    Origin() const
    {
        return Origin_;
    }

    nsString&
    RpId()
    {
        return RpId_;
    }
    const nsString&
    RpId() const
    {
        return RpId_;
    }

    nsTArray<uint8_t>&
    Challenge()
    {
        return Challenge_;
    }
    const nsTArray<uint8_t>&
    Challenge() const
    {
        return Challenge_;
    }

    nsCString&
    ClientDataJSON()
    {
        return ClientDataJSON_;
    }
    const nsCString&
    ClientDataJSON() const
    {
        return ClientDataJSON_;
    }

    uint32_t&
    TimeoutMS()
    {
        return TimeoutMS_;
    }
    const uint32_t&
    TimeoutMS() const
    {
        return TimeoutMS_;
    }

    nsTArray<WebAuthnScopedCredential>&
    AllowList()
    {
        return AllowList_;
    }
    const nsTArray<WebAuthnScopedCredential>&
    AllowList() const
    {
        return AllowList_;
    }

    mozilla::Maybe<WebAuthnGetAssertionExtraInfo>&
    Extra()
    {
        return Extra_;
    }
    const mozilla::Maybe<WebAuthnGetAssertionExtraInfo>&
    Extra() const
    {
        return Extra_;
    }

    uint64_t&
    BrowsingContextId()
    {
        return BrowsingContextId_;
    }
    const uint64_t&
    BrowsingContextId() const
    {
        return BrowsingContextId_;
    }

private:
    nsString Origin_;
    nsString RpId_;
    CopyableTArray<uint8_t> Challenge_;
    nsCString ClientDataJSON_;
    CopyableTArray<WebAuthnScopedCredential> AllowList_;
    mozilla::Maybe<WebAuthnGetAssertionExtraInfo> Extra_;
    uint64_t BrowsingContextId_;
    uint32_t TimeoutMS_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnGetAssertionInfo>
{
    typedef mozilla::dom::WebAuthnGetAssertionInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebAuthnGetAssertionResult|
//
namespace mozilla {
namespace dom {
class WebAuthnGetAssertionResult final
{
private:
    typedef mozilla::dom::WebAuthnExtensionResult WebAuthnExtensionResult;

public:
    MOZ_IMPLICIT WebAuthnGetAssertionResult() :
        ClientDataJSON_(),
        KeyHandle_(),
        Signature_(),
        AuthenticatorData_(),
        Extensions_(),
        SignatureData_(),
        UserHandle_()
    {
    }

    MOZ_IMPLICIT WebAuthnGetAssertionResult(
            const nsCString& _ClientDataJSON,
            const nsTArray<uint8_t>& _KeyHandle,
            const nsTArray<uint8_t>& _Signature,
            const nsTArray<uint8_t>& _AuthenticatorData,
            const nsTArray<WebAuthnExtensionResult>& _Extensions,
            const nsTArray<uint8_t>& _SignatureData,
            const nsTArray<uint8_t>& _UserHandle) :
        ClientDataJSON_(_ClientDataJSON),
        KeyHandle_(_KeyHandle),
        Signature_(_Signature),
        AuthenticatorData_(_AuthenticatorData),
        Extensions_(_Extensions),
        SignatureData_(_SignatureData),
        UserHandle_(_UserHandle)
    {
    }

    nsCString&
    ClientDataJSON()
    {
        return ClientDataJSON_;
    }
    const nsCString&
    ClientDataJSON() const
    {
        return ClientDataJSON_;
    }

    nsTArray<uint8_t>&
    KeyHandle()
    {
        return KeyHandle_;
    }
    const nsTArray<uint8_t>&
    KeyHandle() const
    {
        return KeyHandle_;
    }

    nsTArray<uint8_t>&
    Signature()
    {
        return Signature_;
    }
    const nsTArray<uint8_t>&
    Signature() const
    {
        return Signature_;
    }

    nsTArray<uint8_t>&
    AuthenticatorData()
    {
        return AuthenticatorData_;
    }
    const nsTArray<uint8_t>&
    AuthenticatorData() const
    {
        return AuthenticatorData_;
    }

    nsTArray<WebAuthnExtensionResult>&
    Extensions()
    {
        return Extensions_;
    }
    const nsTArray<WebAuthnExtensionResult>&
    Extensions() const
    {
        return Extensions_;
    }

    nsTArray<uint8_t>&
    SignatureData()
    {
        return SignatureData_;
    }
    const nsTArray<uint8_t>&
    SignatureData() const
    {
        return SignatureData_;
    }

    nsTArray<uint8_t>&
    UserHandle()
    {
        return UserHandle_;
    }
    const nsTArray<uint8_t>&
    UserHandle() const
    {
        return UserHandle_;
    }

private:
    nsCString ClientDataJSON_;
    CopyableTArray<uint8_t> KeyHandle_;
    CopyableTArray<uint8_t> Signature_;
    CopyableTArray<uint8_t> AuthenticatorData_;
    CopyableTArray<WebAuthnExtensionResult> Extensions_;
    CopyableTArray<uint8_t> SignatureData_;
    CopyableTArray<uint8_t> UserHandle_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebAuthnGetAssertionResult>
{
    typedef mozilla::dom::WebAuthnGetAssertionResult paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebAuthnTransactionParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWebAuthnTransactionChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PWebAuthnTransactionChild and PWebAuthnTransactionParent
//
namespace mozilla {
namespace dom {
namespace PWebAuthnTransaction {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PWebAuthnTransactionParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PWebAuthnTransactionChild>* aChild);

enum MessageType {
    PWebAuthnTransactionStart = PWebAuthnTransactionMsgStart << 16,
    Msg_RequestRegister__ID,
    Msg_RequestSign__ID,
    Msg_RequestCancel__ID,
    Msg_DestroyMe__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_ConfirmRegister__ID,
    Msg_ConfirmSign__ID,
    Msg_Abort__ID,
    PWebAuthnTransactionEnd
};

IPC::Message*
Msg_RequestRegister(int32_t routingId);

IPC::Message*
Msg_RequestSign(int32_t routingId);

IPC::Message*
Msg_RequestCancel(int32_t routingId);

IPC::Message*
Msg_DestroyMe(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_ConfirmRegister(int32_t routingId);

IPC::Message*
Msg_ConfirmSign(int32_t routingId);

IPC::Message*
Msg_Abort(int32_t routingId);



} // namespace PWebAuthnTransaction
} // namespace dom
} // namespace mozilla

#endif // ifndef PWebAuthnTransaction_h
