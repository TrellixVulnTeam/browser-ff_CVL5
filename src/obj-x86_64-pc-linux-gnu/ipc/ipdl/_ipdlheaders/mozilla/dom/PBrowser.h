//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBrowser_h
#define PBrowser_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/DOMTypes.h"
#include "mozilla/net/NeckoChannelParams.h"
#include "mozilla/dom/WindowGlobalTypes.h"
#include "mozilla/dom/IPCBlob.h"
#include "mozilla/ipc/IPCStream.h"
#include "mozilla/ipc/URIParams.h"
#include "mozilla/embedding/PPrintingTypes.h"
#include "mozilla/dom/PTabContext.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebProgressData|
//
namespace mozilla {
namespace dom {
class WebProgressData final
{
private:

public:
    MOZ_IMPLICIT WebProgressData() :
        isTopLevel_(),
        isLoadingDocument_(),
        loadType_()
    {
    }

    MOZ_IMPLICIT WebProgressData(
            const bool& _isTopLevel,
            const bool& _isLoadingDocument,
            const uint32_t& _loadType) :
        isTopLevel_(_isTopLevel),
        isLoadingDocument_(_isLoadingDocument),
        loadType_(_loadType)
    {
    }

    bool&
    isTopLevel()
    {
        return isTopLevel_;
    }
    const bool&
    isTopLevel() const
    {
        return isTopLevel_;
    }

    bool&
    isLoadingDocument()
    {
        return isLoadingDocument_;
    }
    const bool&
    isLoadingDocument() const
    {
        return isLoadingDocument_;
    }

    uint32_t&
    loadType()
    {
        return loadType_;
    }
    const uint32_t&
    loadType() const
    {
        return loadType_;
    }

private:
    bool isTopLevel_;
    bool isLoadingDocument_;
    uint32_t loadType_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebProgressData>
{
    typedef mozilla::dom::WebProgressData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct RequestData|
//
namespace mozilla {
namespace dom {
class RequestData final
{
private:

public:
    MOZ_IMPLICIT RequestData() :
        requestURI_(),
        originalRequestURI_(),
        matchedList_()
    {
    }

    MOZ_IMPLICIT RequestData(
            nsIURI* _requestURI,
            nsIURI* _originalRequestURI,
            const nsCString& _matchedList) :
        requestURI_(_requestURI),
        originalRequestURI_(_originalRequestURI),
        matchedList_(_matchedList)
    {
    }

    RefPtr<nsIURI>&
    requestURI()
    {
        return requestURI_;
    }
    nsIURI*
    requestURI() const
    {
        return requestURI_;
    }

    RefPtr<nsIURI>&
    originalRequestURI()
    {
        return originalRequestURI_;
    }
    nsIURI*
    originalRequestURI() const
    {
        return originalRequestURI_;
    }

    nsCString&
    matchedList()
    {
        return matchedList_;
    }
    const nsCString&
    matchedList() const
    {
        return matchedList_;
    }

private:
    RefPtr<nsIURI> requestURI_;
    RefPtr<nsIURI> originalRequestURI_;
    nsCString matchedList_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::RequestData>
{
    typedef mozilla::dom::RequestData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebProgressStateChangeData|
//
namespace mozilla {
namespace dom {
class WebProgressStateChangeData final
{
private:

public:
    MOZ_IMPLICIT WebProgressStateChangeData() :
        isNavigating_(),
        mayEnableCharacterEncodingMenu_(),
        charsetAutodetected_(),
        contentType_(),
        charset_(),
        documentURI_()
    {
    }

    MOZ_IMPLICIT WebProgressStateChangeData(
            const bool& _isNavigating,
            const bool& _mayEnableCharacterEncodingMenu,
            const bool& _charsetAutodetected,
            const nsString& _contentType,
            const nsString& _charset,
            nsIURI* _documentURI) :
        isNavigating_(_isNavigating),
        mayEnableCharacterEncodingMenu_(_mayEnableCharacterEncodingMenu),
        charsetAutodetected_(_charsetAutodetected),
        contentType_(_contentType),
        charset_(_charset),
        documentURI_(_documentURI)
    {
    }

    bool&
    isNavigating()
    {
        return isNavigating_;
    }
    const bool&
    isNavigating() const
    {
        return isNavigating_;
    }

    bool&
    mayEnableCharacterEncodingMenu()
    {
        return mayEnableCharacterEncodingMenu_;
    }
    const bool&
    mayEnableCharacterEncodingMenu() const
    {
        return mayEnableCharacterEncodingMenu_;
    }

    bool&
    charsetAutodetected()
    {
        return charsetAutodetected_;
    }
    const bool&
    charsetAutodetected() const
    {
        return charsetAutodetected_;
    }

    nsString&
    contentType()
    {
        return contentType_;
    }
    const nsString&
    contentType() const
    {
        return contentType_;
    }

    nsString&
    charset()
    {
        return charset_;
    }
    const nsString&
    charset() const
    {
        return charset_;
    }

    RefPtr<nsIURI>&
    documentURI()
    {
        return documentURI_;
    }
    nsIURI*
    documentURI() const
    {
        return documentURI_;
    }

private:
    bool isNavigating_;
    bool mayEnableCharacterEncodingMenu_;
    bool charsetAutodetected_;
    nsString contentType_;
    nsString charset_;
    RefPtr<nsIURI> documentURI_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebProgressStateChangeData>
{
    typedef mozilla::dom::WebProgressStateChangeData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebProgressLocationChangeData|
//
namespace mozilla {
namespace dom {
class WebProgressLocationChangeData final
{
private:

public:
    MOZ_IMPLICIT WebProgressLocationChangeData() :
        isNavigating_(),
        isSyntheticDocument_(),
        mayEnableCharacterEncodingMenu_(),
        charsetAutodetected_(),
        contentType_(),
        title_(),
        charset_(),
        documentURI_(),
        contentPrincipal_(),
        contentPartitionedPrincipal_(),
        csp_(),
        referrerInfo_(),
        requestContextID_()
    {
    }

    MOZ_IMPLICIT WebProgressLocationChangeData(
            const bool& _isNavigating,
            const bool& _isSyntheticDocument,
            const bool& _mayEnableCharacterEncodingMenu,
            const bool& _charsetAutodetected,
            const nsString& _contentType,
            const nsString& _title,
            const nsString& _charset,
            nsIURI* _documentURI,
            nsIPrincipal* _contentPrincipal,
            nsIPrincipal* _contentPartitionedPrincipal,
            nsIContentSecurityPolicy* _csp,
            nsIReferrerInfo* _referrerInfo,
            const mozilla::Maybe<uint64_t>& _requestContextID) :
        isNavigating_(_isNavigating),
        isSyntheticDocument_(_isSyntheticDocument),
        mayEnableCharacterEncodingMenu_(_mayEnableCharacterEncodingMenu),
        charsetAutodetected_(_charsetAutodetected),
        contentType_(_contentType),
        title_(_title),
        charset_(_charset),
        documentURI_(_documentURI),
        contentPrincipal_(_contentPrincipal),
        contentPartitionedPrincipal_(_contentPartitionedPrincipal),
        csp_(_csp),
        referrerInfo_(_referrerInfo),
        requestContextID_(_requestContextID)
    {
    }

    bool&
    isNavigating()
    {
        return isNavigating_;
    }
    const bool&
    isNavigating() const
    {
        return isNavigating_;
    }

    bool&
    isSyntheticDocument()
    {
        return isSyntheticDocument_;
    }
    const bool&
    isSyntheticDocument() const
    {
        return isSyntheticDocument_;
    }

    bool&
    mayEnableCharacterEncodingMenu()
    {
        return mayEnableCharacterEncodingMenu_;
    }
    const bool&
    mayEnableCharacterEncodingMenu() const
    {
        return mayEnableCharacterEncodingMenu_;
    }

    bool&
    charsetAutodetected()
    {
        return charsetAutodetected_;
    }
    const bool&
    charsetAutodetected() const
    {
        return charsetAutodetected_;
    }

    nsString&
    contentType()
    {
        return contentType_;
    }
    const nsString&
    contentType() const
    {
        return contentType_;
    }

    nsString&
    title()
    {
        return title_;
    }
    const nsString&
    title() const
    {
        return title_;
    }

    nsString&
    charset()
    {
        return charset_;
    }
    const nsString&
    charset() const
    {
        return charset_;
    }

    RefPtr<nsIURI>&
    documentURI()
    {
        return documentURI_;
    }
    nsIURI*
    documentURI() const
    {
        return documentURI_;
    }

    RefPtr<nsIPrincipal>&
    contentPrincipal()
    {
        return contentPrincipal_;
    }
    nsIPrincipal*
    contentPrincipal() const
    {
        return contentPrincipal_;
    }

    RefPtr<nsIPrincipal>&
    contentPartitionedPrincipal()
    {
        return contentPartitionedPrincipal_;
    }
    nsIPrincipal*
    contentPartitionedPrincipal() const
    {
        return contentPartitionedPrincipal_;
    }

    RefPtr<nsIContentSecurityPolicy>&
    csp()
    {
        return csp_;
    }
    nsIContentSecurityPolicy*
    csp() const
    {
        return csp_;
    }

    RefPtr<nsIReferrerInfo>&
    referrerInfo()
    {
        return referrerInfo_;
    }
    nsIReferrerInfo*
    referrerInfo() const
    {
        return referrerInfo_;
    }

    mozilla::Maybe<uint64_t>&
    requestContextID()
    {
        return requestContextID_;
    }
    const mozilla::Maybe<uint64_t>&
    requestContextID() const
    {
        return requestContextID_;
    }

private:
    bool isNavigating_;
    bool isSyntheticDocument_;
    bool mayEnableCharacterEncodingMenu_;
    bool charsetAutodetected_;
    nsString contentType_;
    nsString title_;
    nsString charset_;
    RefPtr<nsIURI> documentURI_;
    RefPtr<nsIPrincipal> contentPrincipal_;
    RefPtr<nsIPrincipal> contentPartitionedPrincipal_;
    RefPtr<nsIContentSecurityPolicy> csp_;
    RefPtr<nsIReferrerInfo> referrerInfo_;
    mozilla::Maybe<uint64_t> requestContextID_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WebProgressLocationChangeData>
{
    typedef mozilla::dom::WebProgressLocationChangeData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PrintPreviewResultInfo|
//
namespace mozilla {
namespace dom {
class PrintPreviewResultInfo final
{
private:

public:
    MOZ_IMPLICIT PrintPreviewResultInfo() :
        isEmpty_(),
        hasSelection_(),
        hasSelfSelection_(),
        sheetCount_(),
        totalPageCount_()
    {
    }

    MOZ_IMPLICIT PrintPreviewResultInfo(
            const uint32_t& _sheetCount,
            const uint32_t& _totalPageCount,
            const bool& _isEmpty,
            const bool& _hasSelection,
            const bool& _hasSelfSelection) :
        isEmpty_(_isEmpty),
        hasSelection_(_hasSelection),
        hasSelfSelection_(_hasSelfSelection),
        sheetCount_(_sheetCount),
        totalPageCount_(_totalPageCount)
    {
    }

    uint32_t&
    sheetCount()
    {
        return sheetCount_;
    }
    const uint32_t&
    sheetCount() const
    {
        return sheetCount_;
    }

    uint32_t&
    totalPageCount()
    {
        return totalPageCount_;
    }
    const uint32_t&
    totalPageCount() const
    {
        return totalPageCount_;
    }

    bool&
    isEmpty()
    {
        return isEmpty_;
    }
    const bool&
    isEmpty() const
    {
        return isEmpty_;
    }

    bool&
    hasSelection()
    {
        return hasSelection_;
    }
    const bool&
    hasSelection() const
    {
        return hasSelection_;
    }

    bool&
    hasSelfSelection()
    {
        return hasSelfSelection_;
    }
    const bool&
    hasSelfSelection() const
    {
        return hasSelfSelection_;
    }

private:
    void
    StaticAssertions() const;
    bool isEmpty_;
    bool hasSelection_;
    bool hasSelfSelection_;
    uint32_t sheetCount_;
    uint32_t totalPageCount_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PrintPreviewResultInfo>
{
    typedef mozilla::dom::PrintPreviewResultInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBrowserChild and PBrowserParent
//
namespace mozilla {
namespace dom {
namespace PBrowser {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBrowserParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBrowserChild>* aChild);

enum MessageType {
    PBrowserStart = PBrowserMsgStart << 16,
    Msg_AsyncMessage__ID,
    Msg_PDocAccessibleConstructor__ID,
    Reply_PDocAccessibleConstructor__ID,
    Msg_PPluginWidgetConstructor__ID,
    Reply_PPluginWidgetConstructor__ID,
    Msg_PPaymentRequestConstructor__ID,
    Reply_PPaymentRequestConstructor__ID,
    Msg_PVsyncConstructor__ID,
    Reply_PVsyncConstructor__ID,
    Msg_SetNativeChildOfShareableWindow__ID,
    Msg_DispatchFocusToTopLevelWindow__ID,
    Reply_DispatchFocusToTopLevelWindow__ID,
    Msg_MoveFocus__ID,
    Msg_SizeShellTo__ID,
    Msg_DropLinks__ID,
    Msg_Event__ID,
    Msg_SyncMessage__ID,
    Reply_SyncMessage__ID,
    Msg_NotifyIMEFocus__ID,
    Reply_NotifyIMEFocus__ID,
    Msg_NotifyIMETextChange__ID,
    Msg_NotifyIMECompositionUpdate__ID,
    Msg_NotifyIMESelection__ID,
    Msg_UpdateContentCache__ID,
    Msg_NotifyIMEMouseButtonEvent__ID,
    Reply_NotifyIMEMouseButtonEvent__ID,
    Msg_NotifyIMEPositionChange__ID,
    Msg_RequestIMEToCommitComposition__ID,
    Reply_RequestIMEToCommitComposition__ID,
    Msg_OnEventNeedingAckHandled__ID,
    Msg_RequestFocus__ID,
    Msg_WheelZoomChange__ID,
    Msg_EnableDisableCommands__ID,
    Msg_GetInputContext__ID,
    Reply_GetInputContext__ID,
    Msg_SetInputContext__ID,
    Msg_SetCursor__ID,
    Msg_SetLinkStatus__ID,
    Msg_ShowTooltip__ID,
    Msg_HideTooltip__ID,
    Msg_PColorPickerConstructor__ID,
    Reply_PColorPickerConstructor__ID,
    Msg_PFilePickerConstructor__ID,
    Reply_PFilePickerConstructor__ID,
    Msg_IndexedDBPermissionRequest__ID,
    Reply_IndexedDBPermissionRequest__ID,
    Msg_RespondStartSwipeEvent__ID,
    Msg_AsyncAuthPrompt__ID,
    Msg_LookUpDictionary__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_ReplyKeyEvent__ID,
    Msg_RequestNativeKeyBindings__ID,
    Reply_RequestNativeKeyBindings__ID,
    Msg_SynthesizeNativeKeyEvent__ID,
    Msg_SynthesizeNativeMouseEvent__ID,
    Msg_SynthesizeNativeMouseMove__ID,
    Msg_SynthesizeNativeMouseScrollEvent__ID,
    Msg_SynthesizeNativeTouchPoint__ID,
    Msg_SynthesizeNativeTouchPadPinch__ID,
    Msg_SynthesizeNativeTouchTap__ID,
    Msg_ClearNativeTouchSequence__ID,
    Msg_AccessKeyNotHandled__ID,
    Msg_RegisterProtocolHandler__ID,
    Msg_OnStateChange__ID,
    Msg_OnProgressChange__ID,
    Msg_OnLocationChange__ID,
    Msg_OnStatusChange__ID,
    Msg_NotifyContentBlockingEvent__ID,
    Msg_NavigationFinished__ID,
    Msg_SessionStoreUpdate__ID,
    Msg_IntrinsicSizeOrRatioChanged__ID,
    Msg_RequestPointerLock__ID,
    Reply_RequestPointerLock__ID,
    Msg_ReleasePointerLock__ID,
    Msg_RequestPointerCapture__ID,
    Reply_RequestPointerCapture__ID,
    Msg_ReleasePointerCapture__ID,
    Msg_NativeSynthesisResponse__ID,
    Msg_FlushTabState__ID,
    Msg_UpdateEpoch__ID,
    Msg_UpdateSHistory__ID,
    Msg_CloneDocumentTreeIntoSelf__ID,
    Msg_ReleaseAllPointerCapture__ID,
    Msg_RemotePaintIsReady__ID,
    Msg_RemoteIsReadyToHandleInputEvents__ID,
    Msg_PaintWhileInterruptingJSNoOp__ID,
    Msg_UpdateEffects__ID,
    Msg_SetDimensions__ID,
    Msg_DispatchWheelEvent__ID,
    Reply_DispatchWheelEvent__ID,
    Msg_DispatchMouseEvent__ID,
    Reply_DispatchMouseEvent__ID,
    Msg_DispatchKeyboardEvent__ID,
    Reply_DispatchKeyboardEvent__ID,
    Msg_InvokeDragSession__ID,
    Msg_EnsureLayersConnected__ID,
    Reply_EnsureLayersConnected__ID,
    Msg_ShowCanvasPermissionPrompt__ID,
    Msg_SetSystemFont__ID,
    Reply_SetSystemFont__ID,
    Msg_GetSystemFont__ID,
    Reply_GetSystemFont__ID,
    Msg_MaybeFireEmbedderLoadEvents__ID,
    Msg_ScrollRectIntoView__ID,
    Msg_SetAllowDeprecatedTls__ID,
    Msg_Show__ID,
    Msg_Activate__ID,
    Msg_Deactivate__ID,
    Msg_ScrollbarPreferenceChanged__ID,
    Msg_InitRendering__ID,
    Msg_CompositorOptionsChanged__ID,
    Msg_LoadURL__ID,
    Msg_ResumeLoad__ID,
    Msg_UpdateDimensions__ID,
    Msg_SizeModeChanged__ID,
    Msg_ChildToParentMatrix__ID,
    Msg_SetIsUnderHiddenEmbedderElement__ID,
    Msg_DynamicToolbarMaxHeightChanged__ID,
    Msg_DynamicToolbarOffsetChanged__ID,
    Msg_SetKeyboardIndicators__ID,
    Msg_StopIMEStateManagement__ID,
    Msg_MouseEvent__ID,
    Msg_RealMouseMoveEvent__ID,
    Msg_NormalPriorityRealMouseMoveEvent__ID,
    Msg_RealMouseMoveEventForTests__ID,
    Msg_NormalPriorityRealMouseMoveEventForTests__ID,
    Msg_SynthMouseMoveEvent__ID,
    Msg_NormalPrioritySynthMouseMoveEvent__ID,
    Msg_RealMouseButtonEvent__ID,
    Msg_NormalPriorityRealMouseButtonEvent__ID,
    Msg_RealKeyEvent__ID,
    Msg_NormalPriorityRealKeyEvent__ID,
    Msg_MouseWheelEvent__ID,
    Msg_NormalPriorityMouseWheelEvent__ID,
    Msg_RealTouchEvent__ID,
    Msg_NormalPriorityRealTouchEvent__ID,
    Msg_HandleTap__ID,
    Msg_NormalPriorityHandleTap__ID,
    Msg_RealTouchMoveEvent__ID,
    Msg_NormalPriorityRealTouchMoveEvent__ID,
    Msg_RealTouchMoveEvent2__ID,
    Msg_NormalPriorityRealTouchMoveEvent2__ID,
    Msg_RealDragEvent__ID,
    Msg_CompositionEvent__ID,
    Msg_NormalPriorityCompositionEvent__ID,
    Msg_SelectionEvent__ID,
    Msg_NormalPrioritySelectionEvent__ID,
    Msg_PasteTransferable__ID,
    Msg_ActivateFrameEvent__ID,
    Msg_LoadRemoteScript__ID,
    Msg_Destroy__ID,
    Msg_RenderLayers__ID,
    Msg_SuppressDisplayport__ID,
    Msg_NavigateByKey__ID,
    Msg_RequestNotifyAfterRemotePaint__ID,
    Msg_UIResolutionChanged__ID,
    Msg_SafeAreaInsetsChanged__ID,
    Msg_SwappedWithOtherRemoteLoader__ID,
    Msg_HandleAccessKey__ID,
    Msg_PrintPreview__ID,
    Reply_PrintPreview__ID,
    Msg_ExitPrintPreview__ID,
    Msg_Print__ID,
    Msg_UpdateNativeWindowHandle__ID,
    Msg_AllowScriptsToClose__ID,
    Msg_SetWidgetNativeData__ID,
    Msg_WillChangeProcess__ID,
    Reply_WillChangeProcess__ID,
    Msg_IsWindowSupportingProtectedMedia__ID,
    Reply_IsWindowSupportingProtectedMedia__ID,
    Msg_IsWindowSupportingWebVR__ID,
    Reply_IsWindowSupportingWebVR__ID,
    Msg_VisitURI__ID,
    Msg_QueryVisitedState__ID,
    Msg_NewWindowGlobal__ID,
    PBrowserEnd
};

IPC::Message*
Msg_AsyncMessage(int32_t routingId);

IPC::Message*
Msg_PDocAccessibleConstructor(int32_t routingId);
IPC::Message*
Reply_PDocAccessibleConstructor(int32_t routingId);

IPC::Message*
Msg_PPluginWidgetConstructor(int32_t routingId);
IPC::Message*
Reply_PPluginWidgetConstructor(int32_t routingId);

IPC::Message*
Msg_PPaymentRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PPaymentRequestConstructor(int32_t routingId);

IPC::Message*
Msg_PVsyncConstructor(int32_t routingId);
IPC::Message*
Reply_PVsyncConstructor(int32_t routingId);

IPC::Message*
Msg_SetNativeChildOfShareableWindow(int32_t routingId);

IPC::Message*
Msg_DispatchFocusToTopLevelWindow(int32_t routingId);
IPC::Message*
Reply_DispatchFocusToTopLevelWindow(int32_t routingId);

IPC::Message*
Msg_MoveFocus(int32_t routingId);

IPC::Message*
Msg_SizeShellTo(int32_t routingId);

IPC::Message*
Msg_DropLinks(int32_t routingId);

IPC::Message*
Msg_Event(int32_t routingId);

IPC::Message*
Msg_SyncMessage(int32_t routingId);
IPC::Message*
Reply_SyncMessage(int32_t routingId);

IPC::Message*
Msg_NotifyIMEFocus(int32_t routingId);
IPC::Message*
Reply_NotifyIMEFocus(int32_t routingId);

IPC::Message*
Msg_NotifyIMETextChange(int32_t routingId);

IPC::Message*
Msg_NotifyIMECompositionUpdate(int32_t routingId);

IPC::Message*
Msg_NotifyIMESelection(int32_t routingId);

IPC::Message*
Msg_UpdateContentCache(int32_t routingId);

IPC::Message*
Msg_NotifyIMEMouseButtonEvent(int32_t routingId);
IPC::Message*
Reply_NotifyIMEMouseButtonEvent(int32_t routingId);

IPC::Message*
Msg_NotifyIMEPositionChange(int32_t routingId);

IPC::Message*
Msg_RequestIMEToCommitComposition(int32_t routingId);
IPC::Message*
Reply_RequestIMEToCommitComposition(int32_t routingId);

IPC::Message*
Msg_OnEventNeedingAckHandled(int32_t routingId);

IPC::Message*
Msg_RequestFocus(int32_t routingId);

IPC::Message*
Msg_WheelZoomChange(int32_t routingId);

IPC::Message*
Msg_EnableDisableCommands(int32_t routingId);

IPC::Message*
Msg_GetInputContext(int32_t routingId);
IPC::Message*
Reply_GetInputContext(int32_t routingId);

IPC::Message*
Msg_SetInputContext(int32_t routingId);

IPC::Message*
Msg_SetCursor(int32_t routingId);

IPC::Message*
Msg_SetLinkStatus(int32_t routingId);

IPC::Message*
Msg_ShowTooltip(int32_t routingId);

IPC::Message*
Msg_HideTooltip(int32_t routingId);

IPC::Message*
Msg_PColorPickerConstructor(int32_t routingId);
IPC::Message*
Reply_PColorPickerConstructor(int32_t routingId);

IPC::Message*
Msg_PFilePickerConstructor(int32_t routingId);
IPC::Message*
Reply_PFilePickerConstructor(int32_t routingId);

IPC::Message*
Msg_IndexedDBPermissionRequest(int32_t routingId);
IPC::Message*
Reply_IndexedDBPermissionRequest(int32_t routingId);

IPC::Message*
Msg_RespondStartSwipeEvent(int32_t routingId);

IPC::Message*
Msg_AsyncAuthPrompt(int32_t routingId);

IPC::Message*
Msg_LookUpDictionary(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_ReplyKeyEvent(int32_t routingId);

IPC::Message*
Msg_RequestNativeKeyBindings(int32_t routingId);
IPC::Message*
Reply_RequestNativeKeyBindings(int32_t routingId);

IPC::Message*
Msg_SynthesizeNativeKeyEvent(int32_t routingId);

IPC::Message*
Msg_SynthesizeNativeMouseEvent(int32_t routingId);

IPC::Message*
Msg_SynthesizeNativeMouseMove(int32_t routingId);

IPC::Message*
Msg_SynthesizeNativeMouseScrollEvent(int32_t routingId);

IPC::Message*
Msg_SynthesizeNativeTouchPoint(int32_t routingId);

IPC::Message*
Msg_SynthesizeNativeTouchPadPinch(int32_t routingId);

IPC::Message*
Msg_SynthesizeNativeTouchTap(int32_t routingId);

IPC::Message*
Msg_ClearNativeTouchSequence(int32_t routingId);

IPC::Message*
Msg_AccessKeyNotHandled(int32_t routingId);

IPC::Message*
Msg_RegisterProtocolHandler(int32_t routingId);

IPC::Message*
Msg_OnStateChange(int32_t routingId);

IPC::Message*
Msg_OnProgressChange(int32_t routingId);

IPC::Message*
Msg_OnLocationChange(int32_t routingId);

IPC::Message*
Msg_OnStatusChange(int32_t routingId);

IPC::Message*
Msg_NotifyContentBlockingEvent(int32_t routingId);

IPC::Message*
Msg_NavigationFinished(int32_t routingId);

IPC::Message*
Msg_SessionStoreUpdate(int32_t routingId);

IPC::Message*
Msg_IntrinsicSizeOrRatioChanged(int32_t routingId);

IPC::Message*
Msg_RequestPointerLock(int32_t routingId);
IPC::Message*
Reply_RequestPointerLock(int32_t routingId);

IPC::Message*
Msg_ReleasePointerLock(int32_t routingId);

IPC::Message*
Msg_RequestPointerCapture(int32_t routingId);
IPC::Message*
Reply_RequestPointerCapture(int32_t routingId);

IPC::Message*
Msg_ReleasePointerCapture(int32_t routingId);

IPC::Message*
Msg_NativeSynthesisResponse(int32_t routingId);

IPC::Message*
Msg_FlushTabState(int32_t routingId);

IPC::Message*
Msg_UpdateEpoch(int32_t routingId);

IPC::Message*
Msg_UpdateSHistory(int32_t routingId);

IPC::Message*
Msg_CloneDocumentTreeIntoSelf(int32_t routingId);

IPC::Message*
Msg_ReleaseAllPointerCapture(int32_t routingId);

IPC::Message*
Msg_RemotePaintIsReady(int32_t routingId);

IPC::Message*
Msg_RemoteIsReadyToHandleInputEvents(int32_t routingId);

IPC::Message*
Msg_PaintWhileInterruptingJSNoOp(int32_t routingId);

IPC::Message*
Msg_UpdateEffects(int32_t routingId);

IPC::Message*
Msg_SetDimensions(int32_t routingId);

IPC::Message*
Msg_DispatchWheelEvent(int32_t routingId);
IPC::Message*
Reply_DispatchWheelEvent(int32_t routingId);

IPC::Message*
Msg_DispatchMouseEvent(int32_t routingId);
IPC::Message*
Reply_DispatchMouseEvent(int32_t routingId);

IPC::Message*
Msg_DispatchKeyboardEvent(int32_t routingId);
IPC::Message*
Reply_DispatchKeyboardEvent(int32_t routingId);

IPC::Message*
Msg_InvokeDragSession(int32_t routingId);

IPC::Message*
Msg_EnsureLayersConnected(int32_t routingId);
IPC::Message*
Reply_EnsureLayersConnected(int32_t routingId);

IPC::Message*
Msg_ShowCanvasPermissionPrompt(int32_t routingId);

IPC::Message*
Msg_SetSystemFont(int32_t routingId);
IPC::Message*
Reply_SetSystemFont(int32_t routingId);

IPC::Message*
Msg_GetSystemFont(int32_t routingId);
IPC::Message*
Reply_GetSystemFont(int32_t routingId);

IPC::Message*
Msg_MaybeFireEmbedderLoadEvents(int32_t routingId);

IPC::Message*
Msg_ScrollRectIntoView(int32_t routingId);

IPC::Message*
Msg_SetAllowDeprecatedTls(int32_t routingId);

IPC::Message*
Msg_Show(int32_t routingId);

IPC::Message*
Msg_Activate(int32_t routingId);

IPC::Message*
Msg_Deactivate(int32_t routingId);

IPC::Message*
Msg_ScrollbarPreferenceChanged(int32_t routingId);

IPC::Message*
Msg_InitRendering(int32_t routingId);

IPC::Message*
Msg_CompositorOptionsChanged(int32_t routingId);

IPC::Message*
Msg_LoadURL(int32_t routingId);

IPC::Message*
Msg_ResumeLoad(int32_t routingId);

IPC::Message*
Msg_UpdateDimensions(int32_t routingId);

IPC::Message*
Msg_SizeModeChanged(int32_t routingId);

IPC::Message*
Msg_ChildToParentMatrix(int32_t routingId);

IPC::Message*
Msg_SetIsUnderHiddenEmbedderElement(int32_t routingId);

IPC::Message*
Msg_DynamicToolbarMaxHeightChanged(int32_t routingId);

IPC::Message*
Msg_DynamicToolbarOffsetChanged(int32_t routingId);

IPC::Message*
Msg_SetKeyboardIndicators(int32_t routingId);

IPC::Message*
Msg_StopIMEStateManagement(int32_t routingId);

IPC::Message*
Msg_MouseEvent(int32_t routingId);

IPC::Message*
Msg_RealMouseMoveEvent(int32_t routingId);

IPC::Message*
Msg_NormalPriorityRealMouseMoveEvent(int32_t routingId);

IPC::Message*
Msg_RealMouseMoveEventForTests(int32_t routingId);

IPC::Message*
Msg_NormalPriorityRealMouseMoveEventForTests(int32_t routingId);

IPC::Message*
Msg_SynthMouseMoveEvent(int32_t routingId);

IPC::Message*
Msg_NormalPrioritySynthMouseMoveEvent(int32_t routingId);

IPC::Message*
Msg_RealMouseButtonEvent(int32_t routingId);

IPC::Message*
Msg_NormalPriorityRealMouseButtonEvent(int32_t routingId);

IPC::Message*
Msg_RealKeyEvent(int32_t routingId);

IPC::Message*
Msg_NormalPriorityRealKeyEvent(int32_t routingId);

IPC::Message*
Msg_MouseWheelEvent(int32_t routingId);

IPC::Message*
Msg_NormalPriorityMouseWheelEvent(int32_t routingId);

IPC::Message*
Msg_RealTouchEvent(int32_t routingId);

IPC::Message*
Msg_NormalPriorityRealTouchEvent(int32_t routingId);

IPC::Message*
Msg_HandleTap(int32_t routingId);

IPC::Message*
Msg_NormalPriorityHandleTap(int32_t routingId);

IPC::Message*
Msg_RealTouchMoveEvent(int32_t routingId);

IPC::Message*
Msg_NormalPriorityRealTouchMoveEvent(int32_t routingId);

IPC::Message*
Msg_RealTouchMoveEvent2(int32_t routingId);

IPC::Message*
Msg_NormalPriorityRealTouchMoveEvent2(int32_t routingId);

IPC::Message*
Msg_RealDragEvent(int32_t routingId);

IPC::Message*
Msg_CompositionEvent(int32_t routingId);

IPC::Message*
Msg_NormalPriorityCompositionEvent(int32_t routingId);

IPC::Message*
Msg_SelectionEvent(int32_t routingId);

IPC::Message*
Msg_NormalPrioritySelectionEvent(int32_t routingId);

IPC::Message*
Msg_PasteTransferable(int32_t routingId);

IPC::Message*
Msg_ActivateFrameEvent(int32_t routingId);

IPC::Message*
Msg_LoadRemoteScript(int32_t routingId);

IPC::Message*
Msg_Destroy(int32_t routingId);

IPC::Message*
Msg_RenderLayers(int32_t routingId);

IPC::Message*
Msg_SuppressDisplayport(int32_t routingId);

IPC::Message*
Msg_NavigateByKey(int32_t routingId);

IPC::Message*
Msg_RequestNotifyAfterRemotePaint(int32_t routingId);

IPC::Message*
Msg_UIResolutionChanged(int32_t routingId);

IPC::Message*
Msg_SafeAreaInsetsChanged(int32_t routingId);

IPC::Message*
Msg_SwappedWithOtherRemoteLoader(int32_t routingId);

IPC::Message*
Msg_HandleAccessKey(int32_t routingId);

IPC::Message*
Msg_PrintPreview(int32_t routingId);
IPC::Message*
Reply_PrintPreview(int32_t routingId);

IPC::Message*
Msg_ExitPrintPreview(int32_t routingId);

IPC::Message*
Msg_Print(int32_t routingId);

IPC::Message*
Msg_UpdateNativeWindowHandle(int32_t routingId);

IPC::Message*
Msg_AllowScriptsToClose(int32_t routingId);

IPC::Message*
Msg_SetWidgetNativeData(int32_t routingId);

IPC::Message*
Msg_WillChangeProcess(int32_t routingId);
IPC::Message*
Reply_WillChangeProcess(int32_t routingId);

IPC::Message*
Msg_IsWindowSupportingProtectedMedia(int32_t routingId);
IPC::Message*
Reply_IsWindowSupportingProtectedMedia(int32_t routingId);

IPC::Message*
Msg_IsWindowSupportingWebVR(int32_t routingId);
IPC::Message*
Reply_IsWindowSupportingWebVR(int32_t routingId);

IPC::Message*
Msg_VisitURI(int32_t routingId);

IPC::Message*
Msg_QueryVisitedState(int32_t routingId);

IPC::Message*
Msg_NewWindowGlobal(int32_t routingId);



} // namespace PBrowser
} // namespace dom
} // namespace mozilla

#endif // ifndef PBrowser_h
