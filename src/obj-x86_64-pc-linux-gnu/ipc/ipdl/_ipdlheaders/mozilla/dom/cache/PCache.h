//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCache_h
#define PCache_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/cache/CacheTypes.h"

namespace mozilla {
namespace dom {
namespace cache {
class PCacheParent;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PCacheChild and PCacheParent
//
namespace mozilla {
namespace dom {
namespace cache {
namespace PCache {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::cache::PCacheParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::cache::PCacheChild>* aChild);

enum MessageType {
    PCacheStart = PCacheMsgStart << 16,
    Msg_PCacheOpConstructor__ID,
    Reply_PCacheOpConstructor__ID,
    Msg_Teardown__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PCacheEnd
};

IPC::Message*
Msg_PCacheOpConstructor(int32_t routingId);
IPC::Message*
Reply_PCacheOpConstructor(int32_t routingId);

IPC::Message*
Msg_Teardown(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PCache
} // namespace cache
} // namespace dom
} // namespace mozilla

#endif // ifndef PCache_h
