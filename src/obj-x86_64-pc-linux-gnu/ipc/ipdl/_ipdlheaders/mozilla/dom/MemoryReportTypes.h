//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef MemoryReportTypes_h
#define MemoryReportTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct MemoryReport|
//
namespace mozilla {
namespace dom {
class MemoryReport final
{
private:

public:
    MOZ_IMPLICIT MemoryReport() :
        process_(),
        path_(),
        desc_(),
        amount_(),
        kind_(),
        units_(),
        generation_()
    {
    }

    MOZ_IMPLICIT MemoryReport(
            const nsCString& _process,
            const nsCString& _path,
            const int32_t& _kind,
            const int32_t& _units,
            const int64_t& _amount,
            const uint32_t& _generation,
            const nsCString& _desc) :
        process_(_process),
        path_(_path),
        desc_(_desc),
        amount_(_amount),
        kind_(_kind),
        units_(_units),
        generation_(_generation)
    {
    }

    nsCString&
    process()
    {
        return process_;
    }
    const nsCString&
    process() const
    {
        return process_;
    }

    nsCString&
    path()
    {
        return path_;
    }
    const nsCString&
    path() const
    {
        return path_;
    }

    int32_t&
    kind()
    {
        return kind_;
    }
    const int32_t&
    kind() const
    {
        return kind_;
    }

    int32_t&
    units()
    {
        return units_;
    }
    const int32_t&
    units() const
    {
        return units_;
    }

    int64_t&
    amount()
    {
        return amount_;
    }
    const int64_t&
    amount() const
    {
        return amount_;
    }

    uint32_t&
    generation()
    {
        return generation_;
    }
    const uint32_t&
    generation() const
    {
        return generation_;
    }

    nsCString&
    desc()
    {
        return desc_;
    }
    const nsCString&
    desc() const
    {
        return desc_;
    }

private:
    void
    StaticAssertions() const;
    nsCString process_;
    nsCString path_;
    nsCString desc_;
    int64_t amount_;
    int32_t kind_;
    int32_t units_;
    uint32_t generation_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::MemoryReport>
{
    typedef mozilla::dom::MemoryReport paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef MemoryReportTypes_h
