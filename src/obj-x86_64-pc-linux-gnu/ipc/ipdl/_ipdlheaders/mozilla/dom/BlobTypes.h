//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef BlobTypes_h
#define BlobTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/ipc/IPCCore.h"

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union OptionalFileDescriptorSet|
//
namespace mozilla {
namespace dom {
class OptionalFileDescriptorSet final
{
public:
    enum Type {
        T__None,
        TPFileDescriptorSetParent = 1,
        TPFileDescriptorSetChild,
        TArrayOfFileDescriptor,
        Tvoid_t,
        T__Last = Tvoid_t
    };

private:
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::void_t void_t;
    typedef PFileDescriptorSetParent* PFileDescriptorSetParent__tdef;
    typedef PFileDescriptorSetChild* PFileDescriptorSetChild__tdef;
    typedef nsTArray<FileDescriptor> ArrayOfFileDescriptor__tdef;
    typedef void_t void_t__tdef;

    union Value {
        mozilla::AlignedStorage2<PFileDescriptorSetParent*> VPFileDescriptorSetParent;
        mozilla::AlignedStorage2<PFileDescriptorSetChild*> VPFileDescriptorSetChild;
        mozilla::AlignedStorage2<nsTArray<FileDescriptor>> VArrayOfFileDescriptor;
        mozilla::AlignedStorage2<void_t> Vvoid_t;
    };

    PFileDescriptorSetParent**
    ptr_PFileDescriptorSetParent()
    {
        return ((mValue).VPFileDescriptorSetParent).addr();
    }
    PFileDescriptorSetParent* const*
    constptr_PFileDescriptorSetParent() const
    {
        return ((mValue).VPFileDescriptorSetParent).addr();
    }
    PFileDescriptorSetChild**
    ptr_PFileDescriptorSetChild()
    {
        return ((mValue).VPFileDescriptorSetChild).addr();
    }
    PFileDescriptorSetChild* const*
    constptr_PFileDescriptorSetChild() const
    {
        return ((mValue).VPFileDescriptorSetChild).addr();
    }
    nsTArray<FileDescriptor>*
    ptr_ArrayOfFileDescriptor()
    {
        return ((mValue).VArrayOfFileDescriptor).addr();
    }
    const nsTArray<FileDescriptor>*
    constptr_ArrayOfFileDescriptor() const
    {
        return ((mValue).VArrayOfFileDescriptor).addr();
    }
    void_t*
    ptr_void_t()
    {
        return ((mValue).Vvoid_t).addr();
    }
    const void_t*
    constptr_void_t() const
    {
        return ((mValue).Vvoid_t).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT OptionalFileDescriptorSet() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT OptionalFileDescriptorSet(PFileDescriptorSetParent* aOther);

    MOZ_IMPLICIT OptionalFileDescriptorSet(PFileDescriptorSetChild* aOther);

    MOZ_IMPLICIT OptionalFileDescriptorSet(const nsTArray<FileDescriptor>& aOther);

    MOZ_IMPLICIT OptionalFileDescriptorSet(nsTArray<FileDescriptor>&& aOther);

    MOZ_IMPLICIT OptionalFileDescriptorSet(const void_t& aOther);

    MOZ_IMPLICIT OptionalFileDescriptorSet(void_t&& aOther);

    MOZ_IMPLICIT OptionalFileDescriptorSet(const OptionalFileDescriptorSet& aOther);

    MOZ_IMPLICIT OptionalFileDescriptorSet(OptionalFileDescriptorSet&& aOther);

    ~OptionalFileDescriptorSet();

    Type
    type() const
    {
        return mType;
    }

    OptionalFileDescriptorSet&
    operator=(PFileDescriptorSetParent* aRhs);

    OptionalFileDescriptorSet&
    operator=(PFileDescriptorSetChild* aRhs);

    OptionalFileDescriptorSet&
    operator=(const nsTArray<FileDescriptor>& aRhs);

    OptionalFileDescriptorSet&
    operator=(nsTArray<FileDescriptor>&& aRhs);

    OptionalFileDescriptorSet&
    operator=(const void_t& aRhs);

    OptionalFileDescriptorSet&
    operator=(void_t&& aRhs);

    OptionalFileDescriptorSet&
    operator=(const OptionalFileDescriptorSet& aRhs);

    OptionalFileDescriptorSet&
    operator=(OptionalFileDescriptorSet&& aRhs);

    PFileDescriptorSetParent*&
    get_PFileDescriptorSetParent()
    {
        AssertSanity(TPFileDescriptorSetParent);
        return (*(ptr_PFileDescriptorSetParent()));
    }
    PFileDescriptorSetParent*
    get_PFileDescriptorSetParent() const
    {
        AssertSanity(TPFileDescriptorSetParent);
        return (*(constptr_PFileDescriptorSetParent()));
    }
    operator PFileDescriptorSetParent*&()
    {
        return get_PFileDescriptorSetParent();
    }
    operator PFileDescriptorSetParent*() const
    {
        return get_PFileDescriptorSetParent();
    }

    PFileDescriptorSetChild*&
    get_PFileDescriptorSetChild()
    {
        AssertSanity(TPFileDescriptorSetChild);
        return (*(ptr_PFileDescriptorSetChild()));
    }
    PFileDescriptorSetChild*
    get_PFileDescriptorSetChild() const
    {
        AssertSanity(TPFileDescriptorSetChild);
        return (*(constptr_PFileDescriptorSetChild()));
    }
    operator PFileDescriptorSetChild*&()
    {
        return get_PFileDescriptorSetChild();
    }
    operator PFileDescriptorSetChild*() const
    {
        return get_PFileDescriptorSetChild();
    }

    nsTArray<FileDescriptor>&
    get_ArrayOfFileDescriptor()
    {
        AssertSanity(TArrayOfFileDescriptor);
        return (*(ptr_ArrayOfFileDescriptor()));
    }
    const nsTArray<FileDescriptor>&
    get_ArrayOfFileDescriptor() const
    {
        AssertSanity(TArrayOfFileDescriptor);
        return (*(constptr_ArrayOfFileDescriptor()));
    }
    operator nsTArray<FileDescriptor>&()
    {
        return get_ArrayOfFileDescriptor();
    }
    operator const nsTArray<FileDescriptor>&() const
    {
        return get_ArrayOfFileDescriptor();
    }

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::OptionalFileDescriptorSet>
{
    typedef mozilla::dom::OptionalFileDescriptorSet paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef BlobTypes_h
