//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PFileSystemParams_h
#define PFileSystemParams_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileSystemGetDirectoryListingParams|
//
namespace mozilla {
namespace dom {
class FileSystemGetDirectoryListingParams final
{
private:

public:
    MOZ_IMPLICIT FileSystemGetDirectoryListingParams() :
        filesystem_(),
        realPath_(),
        domPath_(),
        filters_()
    {
    }

    MOZ_IMPLICIT FileSystemGetDirectoryListingParams(
            const nsString& _filesystem,
            const nsString& _realPath,
            const nsString& _domPath,
            const nsString& _filters) :
        filesystem_(_filesystem),
        realPath_(_realPath),
        domPath_(_domPath),
        filters_(_filters)
    {
    }

    nsString&
    filesystem()
    {
        return filesystem_;
    }
    const nsString&
    filesystem() const
    {
        return filesystem_;
    }

    nsString&
    realPath()
    {
        return realPath_;
    }
    const nsString&
    realPath() const
    {
        return realPath_;
    }

    nsString&
    domPath()
    {
        return domPath_;
    }
    const nsString&
    domPath() const
    {
        return domPath_;
    }

    nsString&
    filters()
    {
        return filters_;
    }
    const nsString&
    filters() const
    {
        return filters_;
    }

private:
    nsString filesystem_;
    nsString realPath_;
    nsString domPath_;
    nsString filters_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileSystemGetDirectoryListingParams>
{
    typedef mozilla::dom::FileSystemGetDirectoryListingParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileSystemGetFilesParams|
//
namespace mozilla {
namespace dom {
class FileSystemGetFilesParams final
{
private:

public:
    MOZ_IMPLICIT FileSystemGetFilesParams() :
        filesystem_(),
        realPath_(),
        domPath_(),
        recursiveFlag_()
    {
    }

    MOZ_IMPLICIT FileSystemGetFilesParams(
            const nsString& _filesystem,
            const nsString& _realPath,
            const nsString& _domPath,
            const bool& _recursiveFlag) :
        filesystem_(_filesystem),
        realPath_(_realPath),
        domPath_(_domPath),
        recursiveFlag_(_recursiveFlag)
    {
    }

    nsString&
    filesystem()
    {
        return filesystem_;
    }
    const nsString&
    filesystem() const
    {
        return filesystem_;
    }

    nsString&
    realPath()
    {
        return realPath_;
    }
    const nsString&
    realPath() const
    {
        return realPath_;
    }

    nsString&
    domPath()
    {
        return domPath_;
    }
    const nsString&
    domPath() const
    {
        return domPath_;
    }

    bool&
    recursiveFlag()
    {
        return recursiveFlag_;
    }
    const bool&
    recursiveFlag() const
    {
        return recursiveFlag_;
    }

private:
    nsString filesystem_;
    nsString realPath_;
    nsString domPath_;
    bool recursiveFlag_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileSystemGetFilesParams>
{
    typedef mozilla::dom::FileSystemGetFilesParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileSystemGetFileOrDirectoryParams|
//
namespace mozilla {
namespace dom {
class FileSystemGetFileOrDirectoryParams final
{
private:

public:
    MOZ_IMPLICIT FileSystemGetFileOrDirectoryParams() :
        filesystem_(),
        realPath_()
    {
    }

    MOZ_IMPLICIT FileSystemGetFileOrDirectoryParams(
            const nsString& _filesystem,
            const nsString& _realPath) :
        filesystem_(_filesystem),
        realPath_(_realPath)
    {
    }

    nsString&
    filesystem()
    {
        return filesystem_;
    }
    const nsString&
    filesystem() const
    {
        return filesystem_;
    }

    nsString&
    realPath()
    {
        return realPath_;
    }
    const nsString&
    realPath() const
    {
        return realPath_;
    }

private:
    nsString filesystem_;
    nsString realPath_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileSystemGetFileOrDirectoryParams>
{
    typedef mozilla::dom::FileSystemGetFileOrDirectoryParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union FileSystemParams|
//
namespace mozilla {
namespace dom {
class FileSystemParams final
{
public:
    enum Type {
        T__None,
        TFileSystemGetDirectoryListingParams = 1,
        TFileSystemGetFilesParams,
        TFileSystemGetFileOrDirectoryParams,
        T__Last = TFileSystemGetFileOrDirectoryParams
    };

private:
    typedef mozilla::dom::FileSystemGetDirectoryListingParams FileSystemGetDirectoryListingParams;
    typedef mozilla::dom::FileSystemGetFilesParams FileSystemGetFilesParams;
    typedef mozilla::dom::FileSystemGetFileOrDirectoryParams FileSystemGetFileOrDirectoryParams;
    typedef FileSystemGetDirectoryListingParams FileSystemGetDirectoryListingParams__tdef;
    typedef FileSystemGetFilesParams FileSystemGetFilesParams__tdef;
    typedef FileSystemGetFileOrDirectoryParams FileSystemGetFileOrDirectoryParams__tdef;

    union Value {
        mozilla::AlignedStorage2<FileSystemGetDirectoryListingParams> VFileSystemGetDirectoryListingParams;
        mozilla::AlignedStorage2<FileSystemGetFilesParams> VFileSystemGetFilesParams;
        mozilla::AlignedStorage2<FileSystemGetFileOrDirectoryParams> VFileSystemGetFileOrDirectoryParams;
    };

    FileSystemGetDirectoryListingParams*
    ptr_FileSystemGetDirectoryListingParams()
    {
        return ((mValue).VFileSystemGetDirectoryListingParams).addr();
    }
    const FileSystemGetDirectoryListingParams*
    constptr_FileSystemGetDirectoryListingParams() const
    {
        return ((mValue).VFileSystemGetDirectoryListingParams).addr();
    }
    FileSystemGetFilesParams*
    ptr_FileSystemGetFilesParams()
    {
        return ((mValue).VFileSystemGetFilesParams).addr();
    }
    const FileSystemGetFilesParams*
    constptr_FileSystemGetFilesParams() const
    {
        return ((mValue).VFileSystemGetFilesParams).addr();
    }
    FileSystemGetFileOrDirectoryParams*
    ptr_FileSystemGetFileOrDirectoryParams()
    {
        return ((mValue).VFileSystemGetFileOrDirectoryParams).addr();
    }
    const FileSystemGetFileOrDirectoryParams*
    constptr_FileSystemGetFileOrDirectoryParams() const
    {
        return ((mValue).VFileSystemGetFileOrDirectoryParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT FileSystemParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT FileSystemParams(const FileSystemGetDirectoryListingParams& aOther);

    MOZ_IMPLICIT FileSystemParams(FileSystemGetDirectoryListingParams&& aOther);

    MOZ_IMPLICIT FileSystemParams(const FileSystemGetFilesParams& aOther);

    MOZ_IMPLICIT FileSystemParams(FileSystemGetFilesParams&& aOther);

    MOZ_IMPLICIT FileSystemParams(const FileSystemGetFileOrDirectoryParams& aOther);

    MOZ_IMPLICIT FileSystemParams(FileSystemGetFileOrDirectoryParams&& aOther);

    MOZ_IMPLICIT FileSystemParams(const FileSystemParams& aOther);

    MOZ_IMPLICIT FileSystemParams(FileSystemParams&& aOther);

    ~FileSystemParams();

    Type
    type() const
    {
        return mType;
    }

    FileSystemParams&
    operator=(const FileSystemGetDirectoryListingParams& aRhs);

    FileSystemParams&
    operator=(FileSystemGetDirectoryListingParams&& aRhs);

    FileSystemParams&
    operator=(const FileSystemGetFilesParams& aRhs);

    FileSystemParams&
    operator=(FileSystemGetFilesParams&& aRhs);

    FileSystemParams&
    operator=(const FileSystemGetFileOrDirectoryParams& aRhs);

    FileSystemParams&
    operator=(FileSystemGetFileOrDirectoryParams&& aRhs);

    FileSystemParams&
    operator=(const FileSystemParams& aRhs);

    FileSystemParams&
    operator=(FileSystemParams&& aRhs);

    FileSystemGetDirectoryListingParams&
    get_FileSystemGetDirectoryListingParams()
    {
        AssertSanity(TFileSystemGetDirectoryListingParams);
        return (*(ptr_FileSystemGetDirectoryListingParams()));
    }
    const FileSystemGetDirectoryListingParams&
    get_FileSystemGetDirectoryListingParams() const
    {
        AssertSanity(TFileSystemGetDirectoryListingParams);
        return (*(constptr_FileSystemGetDirectoryListingParams()));
    }
    operator FileSystemGetDirectoryListingParams&()
    {
        return get_FileSystemGetDirectoryListingParams();
    }
    operator const FileSystemGetDirectoryListingParams&() const
    {
        return get_FileSystemGetDirectoryListingParams();
    }

    FileSystemGetFilesParams&
    get_FileSystemGetFilesParams()
    {
        AssertSanity(TFileSystemGetFilesParams);
        return (*(ptr_FileSystemGetFilesParams()));
    }
    const FileSystemGetFilesParams&
    get_FileSystemGetFilesParams() const
    {
        AssertSanity(TFileSystemGetFilesParams);
        return (*(constptr_FileSystemGetFilesParams()));
    }
    operator FileSystemGetFilesParams&()
    {
        return get_FileSystemGetFilesParams();
    }
    operator const FileSystemGetFilesParams&() const
    {
        return get_FileSystemGetFilesParams();
    }

    FileSystemGetFileOrDirectoryParams&
    get_FileSystemGetFileOrDirectoryParams()
    {
        AssertSanity(TFileSystemGetFileOrDirectoryParams);
        return (*(ptr_FileSystemGetFileOrDirectoryParams()));
    }
    const FileSystemGetFileOrDirectoryParams&
    get_FileSystemGetFileOrDirectoryParams() const
    {
        AssertSanity(TFileSystemGetFileOrDirectoryParams);
        return (*(constptr_FileSystemGetFileOrDirectoryParams()));
    }
    operator FileSystemGetFileOrDirectoryParams&()
    {
        return get_FileSystemGetFileOrDirectoryParams();
    }
    operator const FileSystemGetFileOrDirectoryParams&() const
    {
        return get_FileSystemGetFileOrDirectoryParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FileSystemParams>
{
    typedef mozilla::dom::FileSystemParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PFileSystemParams_h
