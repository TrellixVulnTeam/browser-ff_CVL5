//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PMIDIPort_h
#define PMIDIPort_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/MIDITypes.h"

namespace mozilla {
namespace dom {
class PMIDIPortParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PMIDIPortChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PMIDIPortChild and PMIDIPortParent
//
namespace mozilla {
namespace dom {
namespace PMIDIPort {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PMIDIPortParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PMIDIPortChild>* aChild);

enum MessageType {
    PMIDIPortStart = PMIDIPortMsgStart << 16,
    Msg_Shutdown__ID,
    Msg_Send__ID,
    Msg_Open__ID,
    Msg_Close__ID,
    Msg_Clear__ID,
    Msg_Receive__ID,
    Msg_UpdateStatus__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PMIDIPortEnd
};

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_Send(int32_t routingId);

IPC::Message*
Msg_Open(int32_t routingId);

IPC::Message*
Msg_Close(int32_t routingId);

IPC::Message*
Msg_Clear(int32_t routingId);

IPC::Message*
Msg_Receive(int32_t routingId);

IPC::Message*
Msg_UpdateStatus(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PMIDIPort
} // namespace dom
} // namespace mozilla

#endif // ifndef PMIDIPort_h
