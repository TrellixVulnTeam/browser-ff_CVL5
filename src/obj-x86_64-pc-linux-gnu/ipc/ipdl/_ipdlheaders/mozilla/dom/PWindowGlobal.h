//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWindowGlobal_h
#define PWindowGlobal_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/JSActor.h"
#include "mozilla/dom/DOMTypes.h"
#include "mozilla/dom/ClientIPCTypes.h"
#include "mozilla/net/NeckoChannelParams.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct JSActorMessageMeta|
//
namespace mozilla {
namespace dom {
class JSActorMessageMeta final
{
private:

public:
    MOZ_IMPLICIT JSActorMessageMeta() :
        actorName_(),
        messageName_(),
        kind_(),
        queryId_()
    {
    }

    MOZ_IMPLICIT JSActorMessageMeta(
            const nsCString& _actorName,
            const nsString& _messageName,
            const uint64_t& _queryId,
            const JSActorMessageKind& _kind) :
        actorName_(_actorName),
        messageName_(_messageName),
        kind_(_kind),
        queryId_(_queryId)
    {
    }

    nsCString&
    actorName()
    {
        return actorName_;
    }
    const nsCString&
    actorName() const
    {
        return actorName_;
    }

    nsString&
    messageName()
    {
        return messageName_;
    }
    const nsString&
    messageName() const
    {
        return messageName_;
    }

    uint64_t&
    queryId()
    {
        return queryId_;
    }
    const uint64_t&
    queryId() const
    {
        return queryId_;
    }

    JSActorMessageKind&
    kind()
    {
        return kind_;
    }
    const JSActorMessageKind&
    kind() const
    {
        return kind_;
    }

private:
    nsCString actorName_;
    nsString messageName_;
    JSActorMessageKind kind_;
    uint64_t queryId_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::JSActorMessageMeta>
{
    typedef mozilla::dom::JSActorMessageMeta paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IPCWebShareData|
//
namespace mozilla {
namespace dom {
class IPCWebShareData final
{
private:

public:
    MOZ_IMPLICIT IPCWebShareData() :
        title_(),
        text_(),
        url_()
    {
    }

    MOZ_IMPLICIT IPCWebShareData(
            const nsCString& _title,
            const nsCString& _text,
            nsIURI* _url) :
        title_(_title),
        text_(_text),
        url_(_url)
    {
    }

    nsCString&
    title()
    {
        return title_;
    }
    const nsCString&
    title() const
    {
        return title_;
    }

    nsCString&
    text()
    {
        return text_;
    }
    const nsCString&
    text() const
    {
        return text_;
    }

    RefPtr<nsIURI>&
    url()
    {
        return url_;
    }
    nsIURI*
    url() const
    {
        return url_;
    }

private:
    nsCString title_;
    nsCString text_;
    RefPtr<nsIURI> url_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::IPCWebShareData>
{
    typedef mozilla::dom::IPCWebShareData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWindowGlobalChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PWindowGlobalChild and PWindowGlobalParent
//
namespace mozilla {
namespace dom {
namespace PWindowGlobal {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PWindowGlobalParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PWindowGlobalChild>* aChild);

enum MessageType {
    PWindowGlobalStart = PWindowGlobalMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_MakeFrameLocal__ID,
    Msg_MakeFrameRemote__ID,
    Reply_MakeFrameRemote__ID,
    Msg_DrawSnapshot__ID,
    Reply_DrawSnapshot__ID,
    Msg_GetSecurityInfo__ID,
    Reply_GetSecurityInfo__ID,
    Msg_DispatchSecurityPolicyViolation__ID,
    Msg_SaveStorageAccessPermissionGranted__ID,
    Msg_AddBlockedFrameNodeByClassifier__ID,
    Msg_ResetScalingZoom__ID,
    Msg_SetContainerFeaturePolicy__ID,
    Msg_RawMessage__ID,
    Msg_LoadURI__ID,
    Msg_InternalLoad__ID,
    Msg_UpdateDocumentURI__ID,
    Msg_UpdateDocumentPrincipal__ID,
    Msg_UpdateDocumentHasLoaded__ID,
    Msg_UpdateDocumentHasUserInteracted__ID,
    Msg_UpdateSandboxFlags__ID,
    Msg_UpdateDocumentCspSettings__ID,
    Msg_UpdateCookieJarSettings__ID,
    Msg_UpdateDocumentTitle__ID,
    Msg_UpdateDocumentSecurityInfo__ID,
    Msg_UpdateHttpsOnlyStatus__ID,
    Msg_SetIsInitialDocument__ID,
    Msg_Share__ID,
    Reply_Share__ID,
    Msg_GetContentBlockingEvents__ID,
    Reply_GetContentBlockingEvents__ID,
    Msg_SetClientInfo__ID,
    Msg_CheckPermitUnload__ID,
    Reply_CheckPermitUnload__ID,
    Msg_ExpectPageUseCounters__ID,
    Msg_AccumulatePageUseCounters__ID,
    Msg_Destroy__ID,
    PWindowGlobalEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_MakeFrameLocal(int32_t routingId);

IPC::Message*
Msg_MakeFrameRemote(int32_t routingId);
IPC::Message*
Reply_MakeFrameRemote(int32_t routingId);

IPC::Message*
Msg_DrawSnapshot(int32_t routingId);
IPC::Message*
Reply_DrawSnapshot(int32_t routingId);

IPC::Message*
Msg_GetSecurityInfo(int32_t routingId);
IPC::Message*
Reply_GetSecurityInfo(int32_t routingId);

IPC::Message*
Msg_DispatchSecurityPolicyViolation(int32_t routingId);

IPC::Message*
Msg_SaveStorageAccessPermissionGranted(int32_t routingId);

IPC::Message*
Msg_AddBlockedFrameNodeByClassifier(int32_t routingId);

IPC::Message*
Msg_ResetScalingZoom(int32_t routingId);

IPC::Message*
Msg_SetContainerFeaturePolicy(int32_t routingId);

IPC::Message*
Msg_RawMessage(int32_t routingId);

IPC::Message*
Msg_LoadURI(int32_t routingId);

IPC::Message*
Msg_InternalLoad(int32_t routingId);

IPC::Message*
Msg_UpdateDocumentURI(int32_t routingId);

IPC::Message*
Msg_UpdateDocumentPrincipal(int32_t routingId);

IPC::Message*
Msg_UpdateDocumentHasLoaded(int32_t routingId);

IPC::Message*
Msg_UpdateDocumentHasUserInteracted(int32_t routingId);

IPC::Message*
Msg_UpdateSandboxFlags(int32_t routingId);

IPC::Message*
Msg_UpdateDocumentCspSettings(int32_t routingId);

IPC::Message*
Msg_UpdateCookieJarSettings(int32_t routingId);

IPC::Message*
Msg_UpdateDocumentTitle(int32_t routingId);

IPC::Message*
Msg_UpdateDocumentSecurityInfo(int32_t routingId);

IPC::Message*
Msg_UpdateHttpsOnlyStatus(int32_t routingId);

IPC::Message*
Msg_SetIsInitialDocument(int32_t routingId);

IPC::Message*
Msg_Share(int32_t routingId);
IPC::Message*
Reply_Share(int32_t routingId);

IPC::Message*
Msg_GetContentBlockingEvents(int32_t routingId);
IPC::Message*
Reply_GetContentBlockingEvents(int32_t routingId);

IPC::Message*
Msg_SetClientInfo(int32_t routingId);

IPC::Message*
Msg_CheckPermitUnload(int32_t routingId);
IPC::Message*
Reply_CheckPermitUnload(int32_t routingId);

IPC::Message*
Msg_ExpectPageUseCounters(int32_t routingId);

IPC::Message*
Msg_AccumulatePageUseCounters(int32_t routingId);

IPC::Message*
Msg_Destroy(int32_t routingId);



} // namespace PWindowGlobal
} // namespace dom
} // namespace mozilla

#endif // ifndef PWindowGlobal_h
