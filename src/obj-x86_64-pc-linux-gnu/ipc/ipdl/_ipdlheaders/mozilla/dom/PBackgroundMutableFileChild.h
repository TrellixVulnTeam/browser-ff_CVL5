//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundMutableFileChild_h
#define PBackgroundMutableFileChild_h

#include "mozilla/dom/PBackgroundMutableFile.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/FileModeBinding.h"

namespace mozilla {
namespace dom {
class PBackgroundFileHandleChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundFileHandleParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBTransactionChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBCursorChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBVersionChangeTransactionChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundFileHandleChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PBackgroundMutableFileChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::indexedDB::PBackgroundIDBTransactionChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBCursorChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBRequestChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBVersionChangeTransactionChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild;
    friend class mozilla::dom::indexedDB::PBackgroundIDBDatabaseRequestChild;
    friend class mozilla::dom::PBackgroundFileHandleChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::FileMode FileMode;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::PBackgroundFileHandleChild PBackgroundFileHandleChild;
    typedef mozilla::dom::PBackgroundFileHandleParent PBackgroundFileHandleParent;
    typedef mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild PBackgroundIDBDatabaseChild;
    typedef mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent PBackgroundIDBDatabaseParent;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBackgroundMutableFileChild();

    virtual ~PBackgroundMutableFileChild();

public:
    PBackgroundIDBDatabaseChild*
    Manager() const;

    void
    ManagedPBackgroundFileHandleChild(nsTArray<PBackgroundFileHandleChild*>& aArr) const;
    const ManagedContainer<PBackgroundFileHandleChild>&
    ManagedPBackgroundFileHandleChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PBackgroundFileHandleParent>
    OpenPBackgroundFileHandleEndpoint(PBackgroundFileHandleChild* aActor);
    bool
    BindPBackgroundFileHandleEndpoint(
            ManagedEndpoint<PBackgroundFileHandleChild> aEndpoint,
            PBackgroundFileHandleChild* aActor);

    bool
    SendDeleteMe();

    PBackgroundFileHandleChild*
    SendPBackgroundFileHandleConstructor(const FileMode& mode);

    PBackgroundFileHandleChild*
    SendPBackgroundFileHandleConstructor(
            PBackgroundFileHandleChild* actor,
            const FileMode& mode);

    bool
    SendGetFileId(int64_t* fileId);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PBackgroundFileHandleChild> mManagedPBackgroundFileHandleChild;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PBackgroundMutableFileChild*>
{
    typedef mozilla::dom::PBackgroundMutableFileChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundMutableFileChild_h
