//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PServiceWorkerUpdater_h
#define PServiceWorkerUpdater_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace dom {
class PServiceWorkerUpdaterParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerUpdaterChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PServiceWorkerUpdaterChild and PServiceWorkerUpdaterParent
//
namespace mozilla {
namespace dom {
namespace PServiceWorkerUpdater {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PServiceWorkerUpdaterParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PServiceWorkerUpdaterChild>* aChild);

enum MessageType {
    PServiceWorkerUpdaterStart = PServiceWorkerUpdaterMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Proceed__ID,
    PServiceWorkerUpdaterEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Proceed(int32_t routingId);



} // namespace PServiceWorkerUpdater
} // namespace dom
} // namespace mozilla

#endif // ifndef PServiceWorkerUpdater_h
