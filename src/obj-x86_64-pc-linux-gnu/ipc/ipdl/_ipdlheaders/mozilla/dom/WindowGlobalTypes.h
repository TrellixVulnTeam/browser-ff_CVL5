//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef WindowGlobalTypes_h
#define WindowGlobalTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/WindowContext.h"
#include "nsITransportSecurityInfo.h"
#include "mozilla/net/NeckoChannelParams.h"
#include "mozilla/dom/DOMTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WindowGlobalInit|
//
namespace mozilla {
namespace dom {
class WindowGlobalInit final
{
private:
    typedef mozilla::dom::WindowContextInitializer WindowContextInitializer;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;

public:
    MOZ_IMPLICIT WindowGlobalInit() :
        context_(),
        principal_(),
        documentURI_(),
        blockAllMixedContent_(),
        upgradeInsecureRequests_(),
        cookieJarSettings_(),
        securityInfo_(),
        sandboxFlags_(),
        httpsOnlyStatus_()
    {
    }

    MOZ_IMPLICIT WindowGlobalInit(
            const WindowContextInitializer& _context,
            nsIPrincipal* _principal,
            nsIURI* _documentURI,
            const bool& _blockAllMixedContent,
            const bool& _upgradeInsecureRequests,
            const uint32_t& _sandboxFlags,
            const CookieJarSettingsArgs& _cookieJarSettings,
            const uint32_t& _httpsOnlyStatus,
            nsITransportSecurityInfo* _securityInfo) :
        context_(_context),
        principal_(_principal),
        documentURI_(_documentURI),
        blockAllMixedContent_(_blockAllMixedContent),
        upgradeInsecureRequests_(_upgradeInsecureRequests),
        cookieJarSettings_(_cookieJarSettings),
        securityInfo_(_securityInfo),
        sandboxFlags_(_sandboxFlags),
        httpsOnlyStatus_(_httpsOnlyStatus)
    {
    }

    WindowContextInitializer&
    context()
    {
        return context_;
    }
    const WindowContextInitializer&
    context() const
    {
        return context_;
    }

    RefPtr<nsIPrincipal>&
    principal()
    {
        return principal_;
    }
    nsIPrincipal*
    principal() const
    {
        return principal_;
    }

    RefPtr<nsIURI>&
    documentURI()
    {
        return documentURI_;
    }
    nsIURI*
    documentURI() const
    {
        return documentURI_;
    }

    bool&
    blockAllMixedContent()
    {
        return blockAllMixedContent_;
    }
    const bool&
    blockAllMixedContent() const
    {
        return blockAllMixedContent_;
    }

    bool&
    upgradeInsecureRequests()
    {
        return upgradeInsecureRequests_;
    }
    const bool&
    upgradeInsecureRequests() const
    {
        return upgradeInsecureRequests_;
    }

    uint32_t&
    sandboxFlags()
    {
        return sandboxFlags_;
    }
    const uint32_t&
    sandboxFlags() const
    {
        return sandboxFlags_;
    }

    CookieJarSettingsArgs&
    cookieJarSettings()
    {
        return cookieJarSettings_;
    }
    const CookieJarSettingsArgs&
    cookieJarSettings() const
    {
        return cookieJarSettings_;
    }

    uint32_t&
    httpsOnlyStatus()
    {
        return httpsOnlyStatus_;
    }
    const uint32_t&
    httpsOnlyStatus() const
    {
        return httpsOnlyStatus_;
    }

    RefPtr<nsITransportSecurityInfo>&
    securityInfo()
    {
        return securityInfo_;
    }
    nsITransportSecurityInfo*
    securityInfo() const
    {
        return securityInfo_;
    }

private:
    void
    StaticAssertions() const;
    WindowContextInitializer context_;
    RefPtr<nsIPrincipal> principal_;
    RefPtr<nsIURI> documentURI_;
    bool blockAllMixedContent_;
    bool upgradeInsecureRequests_;
    CookieJarSettingsArgs cookieJarSettings_;
    RefPtr<nsITransportSecurityInfo> securityInfo_;
    uint32_t sandboxFlags_;
    uint32_t httpsOnlyStatus_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::WindowGlobalInit>
{
    typedef mozilla::dom::WindowGlobalInit paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef WindowGlobalTypes_h
