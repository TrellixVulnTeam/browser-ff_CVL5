//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundLSDatabaseChild_h
#define PBackgroundLSDatabaseChild_h

#include "mozilla/dom/PBackgroundLSDatabase.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/LSSnapshot.h"

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSSnapshotChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSSnapshotParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSSnapshotChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {


class PBackgroundLSDatabaseChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PBackgroundLSSnapshotChild;
    friend class mozilla::ipc::PBackgroundChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::LSItemInfo LSItemInfo;
    typedef mozilla::dom::LSRequestCommonParams LSRequestCommonParams;
    typedef mozilla::dom::LSRequestParams LSRequestParams;
    typedef mozilla::dom::LSRequestPreloadDatastoreParams LSRequestPreloadDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareDatastoreParams LSRequestPrepareDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareObserverParams LSRequestPrepareObserverParams;
    typedef mozilla::dom::LSSimpleRequestParams LSSimpleRequestParams;
    typedef mozilla::dom::LSSimpleRequestPreloadedParams LSSimpleRequestPreloadedParams;
    typedef mozilla::dom::LSSnapshotInitInfo LSSnapshotInitInfo;
    typedef mozilla::dom::LSValue LSValue;
    typedef mozilla::dom::LSSnapshot::LoadState LoadState;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::void_t void_t;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::dom::PBackgroundLSSnapshotChild PBackgroundLSSnapshotChild;
    typedef mozilla::dom::PBackgroundLSSnapshotParent PBackgroundLSSnapshotParent;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvRequestAllowToClose() = 0;
    virtual PBackgroundLSSnapshotChild*
    AllocPBackgroundLSSnapshotChild(
            const nsString& documentURI,
            const nsString& key,
            const bool& increasePeakUsage,
            const int64_t& requestedSize,
            const int64_t& minSize,
            LSSnapshotInitInfo* initInfo) = 0;
    virtual bool
    DeallocPBackgroundLSSnapshotChild(PBackgroundLSSnapshotChild* aActor) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBackgroundLSDatabaseChild();

    virtual ~PBackgroundLSDatabaseChild();

public:
    PBackgroundChild*
    Manager() const;

    void
    ManagedPBackgroundLSSnapshotChild(nsTArray<PBackgroundLSSnapshotChild*>& aArr) const;
    const ManagedContainer<PBackgroundLSSnapshotChild>&
    ManagedPBackgroundLSSnapshotChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PBackgroundLSSnapshotParent>
    OpenPBackgroundLSSnapshotEndpoint(PBackgroundLSSnapshotChild* aActor);
    bool
    BindPBackgroundLSSnapshotEndpoint(
            ManagedEndpoint<PBackgroundLSSnapshotChild> aEndpoint,
            PBackgroundLSSnapshotChild* aActor);

    bool
    SendDeleteMe();

    bool
    SendAllowToClose();

    [[nodiscard]] PBackgroundLSSnapshotChild*
    SendPBackgroundLSSnapshotConstructor(
            const nsString& documentURI,
            const nsString& key,
            const bool& increasePeakUsage,
            const int64_t& requestedSize,
            const int64_t& minSize,
            LSSnapshotInitInfo* initInfo);

    [[nodiscard]] PBackgroundLSSnapshotChild*
    SendPBackgroundLSSnapshotConstructor(
            PBackgroundLSSnapshotChild* actor,
            const nsString& documentURI,
            const nsString& key,
            const bool& increasePeakUsage,
            const int64_t& requestedSize,
            const int64_t& minSize,
            LSSnapshotInitInfo* initInfo);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PBackgroundLSSnapshotChild> mManagedPBackgroundLSSnapshotChild;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PBackgroundLSDatabaseChild*>
{
    typedef mozilla::dom::PBackgroundLSDatabaseChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundLSDatabaseChild_h
