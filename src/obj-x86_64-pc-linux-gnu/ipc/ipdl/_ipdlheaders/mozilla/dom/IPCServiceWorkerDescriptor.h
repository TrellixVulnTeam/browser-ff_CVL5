//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef IPCServiceWorkerDescriptor_h
#define IPCServiceWorkerDescriptor_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/ServiceWorkerBinding.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IPCServiceWorkerDescriptor|
//
namespace mozilla {
namespace dom {
class IPCServiceWorkerDescriptor final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT IPCServiceWorkerDescriptor() :
        principalInfo_(),
        scope_(),
        scriptURL_(),
        state_(),
        handlesFetch_(),
        id_(),
        registrationId_(),
        registrationVersion_()
    {
    }

    MOZ_IMPLICIT IPCServiceWorkerDescriptor(
            const uint64_t& _id,
            const uint64_t& _registrationId,
            const uint64_t& _registrationVersion,
            const PrincipalInfo& _principalInfo,
            const nsCString& _scope,
            const nsCString& _scriptURL,
            const ServiceWorkerState& _state,
            const bool& _handlesFetch) :
        principalInfo_(_principalInfo),
        scope_(_scope),
        scriptURL_(_scriptURL),
        state_(_state),
        handlesFetch_(_handlesFetch),
        id_(_id),
        registrationId_(_registrationId),
        registrationVersion_(_registrationVersion)
    {
    }

    bool
    operator==(const IPCServiceWorkerDescriptor& _o) const;

    bool
    operator!=(const IPCServiceWorkerDescriptor& _o) const;

    uint64_t&
    id()
    {
        return id_;
    }
    const uint64_t&
    id() const
    {
        return id_;
    }

    uint64_t&
    registrationId()
    {
        return registrationId_;
    }
    const uint64_t&
    registrationId() const
    {
        return registrationId_;
    }

    uint64_t&
    registrationVersion()
    {
        return registrationVersion_;
    }
    const uint64_t&
    registrationVersion() const
    {
        return registrationVersion_;
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

    nsCString&
    scope()
    {
        return scope_;
    }
    const nsCString&
    scope() const
    {
        return scope_;
    }

    nsCString&
    scriptURL()
    {
        return scriptURL_;
    }
    const nsCString&
    scriptURL() const
    {
        return scriptURL_;
    }

    ServiceWorkerState&
    state()
    {
        return state_;
    }
    const ServiceWorkerState&
    state() const
    {
        return state_;
    }

    bool&
    handlesFetch()
    {
        return handlesFetch_;
    }
    const bool&
    handlesFetch() const
    {
        return handlesFetch_;
    }

private:
    void
    StaticAssertions() const;
    PrincipalInfo principalInfo_;
    nsCString scope_;
    nsCString scriptURL_;
    ServiceWorkerState state_;
    bool handlesFetch_;
    uint64_t id_;
    uint64_t registrationId_;
    uint64_t registrationVersion_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::IPCServiceWorkerDescriptor>
{
    typedef mozilla::dom::IPCServiceWorkerDescriptor paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef IPCServiceWorkerDescriptor_h
