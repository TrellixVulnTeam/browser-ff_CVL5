//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSpeechSynthesisRequestParent_h
#define PSpeechSynthesisRequestParent_h

#include "mozilla/dom/PSpeechSynthesisRequest.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace dom {
class PSpeechSynthesisParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSpeechSynthesisChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSpeechSynthesisParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PSpeechSynthesisRequestParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PSpeechSynthesisParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::PSpeechSynthesisParent PSpeechSynthesisParent;
    typedef mozilla::dom::PSpeechSynthesisChild PSpeechSynthesisChild;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvPause() = 0;
    virtual mozilla::ipc::IPCResult
    RecvResume() = 0;
    virtual mozilla::ipc::IPCResult
    RecvCancel() = 0;
    virtual mozilla::ipc::IPCResult
    RecvForceEnd() = 0;
    virtual mozilla::ipc::IPCResult
    RecvSetAudioOutputVolume(const float& aVolume) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PSpeechSynthesisRequestParent();

    virtual ~PSpeechSynthesisRequestParent();

public:
    PSpeechSynthesisParent*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendOnEnd(
            const bool& aIsError,
            const float& aElapsedTime,
            const uint32_t& aCharIndex);

    [[nodiscard]] bool
    SendOnStart(const nsString& aUri);

    [[nodiscard]] bool
    SendOnPause(
            const float& aElapsedTime,
            const uint32_t& aCharIndex);

    [[nodiscard]] bool
    SendOnResume(
            const float& aElapsedTime,
            const uint32_t& aCharIndex);

    [[nodiscard]] bool
    SendOnBoundary(
            const nsString& aName,
            const float& aElapsedTime,
            const uint32_t& aCharIndex,
            const uint32_t& aCharLength,
            const uint8_t& argc);

    [[nodiscard]] bool
    SendOnMark(
            const nsString& aName,
            const float& aElapsedTime,
            const uint32_t& aCharIndex);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PSpeechSynthesisRequestParent*>
{
    typedef mozilla::dom::PSpeechSynthesisRequestParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PSpeechSynthesisRequestParent_h
