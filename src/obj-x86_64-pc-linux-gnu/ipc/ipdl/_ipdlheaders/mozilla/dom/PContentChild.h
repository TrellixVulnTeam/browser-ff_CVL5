//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PContentChild_h
#define PContentChild_h

#include "mozilla/dom/PContent.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "PDMFactory.h"
#include "SharedFontList.h"
#include "Units.h"
#include "base/process.h"
#include "base/shared_memory.h"
#include "gfxFontEntry.h"
#include "gfxFontUtils.h"
#include "mozilla/ContentBlocking.h"
#include "mozilla/ContentBlockingNotifier.h"
#include "mozilla/HalTypes.h"
#include "mozilla/PermissionDelegateHandler.h"
#include "mozilla/RemoteDecoderManagerChild.h"
#include "mozilla/TelemetryComms.h"
#include "mozilla/UntrustedModulesData.h"
#include "mozilla/a11y/IPCTypes.h"
#include "mozilla/dom/BrowsingContext.h"
#include "mozilla/dom/FeaturePolicy.h"
#include "mozilla/dom/JSActor.h"
#include "mozilla/dom/MediaControlKeySource.h"
#include "mozilla/dom/MediaMetadata.h"
#include "mozilla/dom/MediaPlaybackStatus.h"
#include "mozilla/dom/MediaSession.h"
#include "mozilla/dom/MediaSessionBinding.h"
#include "mozilla/dom/NativeThreadId.h"
#include "mozilla/dom/PWindowGlobal.h"
#include "mozilla/dom/PerformanceTiming.h"
#include "mozilla/dom/ServiceWorkerShutdownState.h"
#include "mozilla/dom/WindowContext.h"
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/gfx/2D.h"
#include "mozilla/ipc/BackgroundUtils.h"
#include "mozilla/ipc/CrossProcessMutex.h"
#include "mozilla/layers/CompositorOptions.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/widget/WidgetMessageUtils.h"
#include "nsIContentViewer.h"

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorManagerChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorManagerParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentPermissionRequestChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentPermissionRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PCycleCollectWithLogsChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PCycleCollectWithLogsParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PExternalHelperAppChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PExternalHelperAppParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PHandlerServiceChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PHandlerServiceParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {
class PHalChild;
} // namespace hal_sandbox
} // namespace mozilla
namespace mozilla {
namespace hal_sandbox {
class PHalParent;
} // namespace hal_sandbox
} // namespace mozilla

namespace mozilla {
namespace devtools {
class PHeapSnapshotTempFileHelperChild;
} // namespace devtools
} // namespace mozilla
namespace mozilla {
namespace devtools {
class PHeapSnapshotTempFileHelperParent;
} // namespace devtools
} // namespace mozilla

namespace mozilla {
class PProcessHangMonitorChild;
} // namespace mozilla
namespace mozilla {
class PProcessHangMonitorParent;
} // namespace mozilla

namespace mozilla {
namespace layers {
class PImageBridgeChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PImageBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PLoginReputationChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PLoginReputationParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace media {
class PMediaChild;
} // namespace media
} // namespace mozilla
namespace mozilla {
namespace media {
class PMediaParent;
} // namespace media
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace extensions {
class PStreamFilterChild;
} // namespace extensions
} // namespace mozilla
namespace mozilla {
namespace extensions {
class PStreamFilterParent;
} // namespace extensions
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPContentChild;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPContentParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPServiceChild;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPServiceParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginModuleParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPChild;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintingChild;
} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace embedding {
class PPrintingParent;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace docshell {
class POfflineCacheUpdateChild;
} // namespace docshell
} // namespace mozilla
namespace mozilla {
namespace docshell {
class POfflineCacheUpdateParent;
} // namespace docshell
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSpeechSynthesisChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSpeechSynthesisParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PTestShellChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PTestShellParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteSpellcheckEngineChild;
} // namespace mozilla
namespace mozilla {
class PRemoteSpellcheckEngineParent;
} // namespace mozilla

namespace mozilla {
class PWebBrowserPersistDocumentChild;
} // namespace mozilla
namespace mozilla {
class PWebBrowserPersistDocumentParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebrtcGlobalChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWebrtcGlobalParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWindowGlobalParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PPresentationParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PURLClassifierParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierLocalChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PURLClassifierLocalParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace gfx {
class PVRManagerChild;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PVRManagerParent;
} // namespace gfx
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderManagerParent;
} // namespace mozilla

namespace mozilla {
class PProfilerChild;
} // namespace mozilla
namespace mozilla {
class PProfilerParent;
} // namespace mozilla

namespace mozilla {
namespace loader {
class PScriptCacheChild;
} // namespace loader
} // namespace mozilla
namespace mozilla {
namespace loader {
class PScriptCacheParent;
} // namespace loader
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSessionStorageObserverChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSessionStorageObserverParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PBenchmarkStorageChild;
} // namespace mozilla
namespace mozilla {
class PBenchmarkStorageParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PHandlerServiceChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PTestShellChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace media {
class PMediaChild;
} // namespace media
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSpeechSynthesisChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PLoginReputationChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintingChild;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
class PBenchmarkStorageChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebrtcGlobalChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PExternalHelperAppChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {
class PHalChild;
} // namespace hal_sandbox
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierLocalChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PCycleCollectWithLogsChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentPermissionRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace devtools {
class PHeapSnapshotTempFileHelperChild;
} // namespace devtools
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PWebBrowserPersistDocumentChild;
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace loader {
class PScriptCacheChild;
} // namespace loader
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSessionStorageObserverChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace docshell {
class POfflineCacheUpdateChild;
} // namespace docshell
} // namespace mozilla

namespace mozilla {
class PRemoteSpellcheckEngineChild;
} // namespace mozilla

class nsIDOMGeoPosition;

class nsIAlertNotification;

struct ChromePackage;

struct SubstitutionMapping;

struct OverrideMapping;

namespace IPC {
struct Permission;
} // namespace IPC

namespace IPC {
class Principal;
} // namespace IPC

namespace mozilla {
namespace dom {
class MessagePort;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace ipc {
class StructuredCloneData;
} // namespace ipc
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
struct TextureFactoryIdentifier;
} // namespace layers
} // namespace mozilla

class nsDocShellLoadState;

class nsILayoutHistoryState;

namespace mozilla {
namespace dom {
class SessionHistoryInfo;
} // namespace dom
} // namespace mozilla

struct nsPoint;

namespace mozilla {
namespace dom {
struct LoadingSessionHistoryInfo;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PContentChild :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::dom::PHandlerServiceChild;
    friend class mozilla::ipc::PTestShellChild;
    friend class mozilla::media::PMediaChild;
    friend class mozilla::dom::PSpeechSynthesisChild;
    friend class mozilla::dom::PLoginReputationChild;
    friend class mozilla::embedding::PPrintingChild;
    friend class mozilla::PBenchmarkStorageChild;
    friend class mozilla::dom::PWebrtcGlobalChild;
    friend class mozilla::dom::PExternalHelperAppChild;
    friend class mozilla::ipc::PFileDescriptorSetChild;
    friend class mozilla::PRemoteLazyInputStreamChild;
    friend class mozilla::hal_sandbox::PHalChild;
    friend class mozilla::dom::PURLClassifierLocalChild;
    friend class mozilla::dom::PBrowserChild;
    friend class mozilla::dom::PCycleCollectWithLogsChild;
    friend class mozilla::dom::PContentPermissionRequestChild;
    friend class mozilla::devtools::PHeapSnapshotTempFileHelperChild;
    friend class mozilla::net::PNeckoChild;
    friend class mozilla::PWebBrowserPersistDocumentChild;
    friend class mozilla::ipc::PChildToParentStreamChild;
    friend class mozilla::ipc::PParentToChildStreamChild;
    friend class mozilla::dom::PURLClassifierChild;
    friend class mozilla::dom::PPresentationChild;
    friend class mozilla::loader::PScriptCacheChild;
    friend class mozilla::dom::PSessionStorageObserverChild;
    friend class mozilla::docshell::POfflineCacheUpdateChild;
    friend class mozilla::PRemoteSpellcheckEngineChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::AndroidSystemInfo AndroidSystemInfo;
    typedef mozilla::gfx::BackendType BackendType;
    typedef mozilla::dom::BlobURLDataRequestResult BlobURLDataRequestResult;
    typedef mozilla::dom::BlobURLRegistrationData BlobURLRegistrationData;
    typedef mozilla::ContentBlockingNotifier::BlockingDecision BlockingDecision;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::dom::BrowsingContextInitializer BrowsingContextInitializer;
    typedef mozilla::dom::BrowsingContextTransaction BrowsingContextTransaction;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::psm::ByteArray ByteArray;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::Telemetry::ChildEventData ChildEventData;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClipboardCapabilities ClipboardCapabilities;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::LookAndFeel::ColorID ColorID;
    typedef mozilla::layers::CompositorOptions CompositorOptions;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::gfx::ContentDeviceData ContentDeviceData;
    typedef mozilla::dom::ContentParentId ContentParentId;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::gfx::D3D11DeviceStatus D3D11DeviceStatus;
    typedef mozilla::psm::DataStorageEntry DataStorageEntry;
    typedef mozilla::psm::DataStorageItem DataStorageItem;
    typedef mozilla::DataStorageType DataStorageType;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::psm::DelegatedCredentialInfoArg DelegatedCredentialInfoArg;
    typedef mozilla::PermissionDelegateHandler::DelegatedPermissionList DelegatedPermissionList;
    typedef mozilla::gfx::DevicePrefs DevicePrefs;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::Telemetry::DiscardedData DiscardedData;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::dom::DomainPolicyClone DomainPolicyClone;
    typedef mozilla::Telemetry::DynamicScalarDefinition DynamicScalarDefinition;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::plugins::FakePluginTag FakePluginTag;
    typedef mozilla::gfx::FeatureFailure FeatureFailure;
    typedef mozilla::dom::FeaturePolicy FeaturePolicy;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::gfx::FeatureStatus FeatureStatus;
    typedef mozilla::dom::FileDescOrError FileDescOrError;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FrameIPCTabContext FrameIPCTabContext;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::widget::FullLookAndFeel FullLookAndFeel;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::dom::GMPAPITags GMPAPITags;
    typedef mozilla::dom::GMPCapabilityData GMPCapabilityData;
    typedef mozilla::gfx::GPUDeviceData GPUDeviceData;
    typedef mozilla::dom::GetFilesResponseFailure GetFilesResponseFailure;
    typedef mozilla::dom::GetFilesResponseResult GetFilesResponseResult;
    typedef mozilla::dom::GetFilesResponseSuccess GetFilesResponseSuccess;
    typedef mozilla::gfx::GfxInfoFeatureStatus GfxInfoFeatureStatus;
    typedef mozilla::gfx::GfxVarUpdate GfxVarUpdate;
    typedef mozilla::gfx::GfxVarValue GfxVarValue;
    typedef mozilla::HangAnnotation HangAnnotation;
    typedef mozilla::HangDetails HangDetails;
    typedef mozilla::HangEntry HangEntry;
    typedef mozilla::HangEntryBufOffset HangEntryBufOffset;
    typedef mozilla::HangEntryChromeScript HangEntryChromeScript;
    typedef mozilla::HangEntryContent HangEntryContent;
    typedef mozilla::HangEntryJit HangEntryJit;
    typedef mozilla::HangEntryModOffset HangEntryModOffset;
    typedef mozilla::HangEntryProgCounter HangEntryProgCounter;
    typedef mozilla::HangEntrySuppressed HangEntrySuppressed;
    typedef mozilla::HangEntryWasm HangEntryWasm;
    typedef mozilla::HangModule HangModule;
    typedef mozilla::HangStack HangStack;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::Telemetry::HistogramAccumulation HistogramAccumulation;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::a11y::IHandlerControlHolder IHandlerControlHolder;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPCTabContext IPCTabContext;
    typedef mozilla::dom::IPCURLClassifierFeature IPCURLClassifierFeature;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::LookAndFeel::IntID IntID;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::dom::JSPluginFrameIPCTabContext JSPluginFrameIPCTabContext;
    typedef mozilla::dom::JSProcessActorInfo JSProcessActorInfo;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::dom::JSWindowActorEventDecl JSWindowActorEventDecl;
    typedef mozilla::dom::JSWindowActorInfo JSWindowActorInfo;
    typedef mozilla::Telemetry::KeyedHistogramAccumulation KeyedHistogramAccumulation;
    typedef mozilla::Telemetry::KeyedScalarAction KeyedScalarAction;
    typedef mozilla::layers::LayersId LayersId;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::widget::LookAndFeelCache LookAndFeelCache;
    typedef mozilla::widget::LookAndFeelColor LookAndFeelColor;
    typedef mozilla::widget::LookAndFeelData LookAndFeelData;
    typedef mozilla::widget::LookAndFeelFont LookAndFeelFont;
    typedef mozilla::widget::LookAndFeelInt LookAndFeelInt;
    typedef mozilla::widget::LookAndFeelTables LookAndFeelTables;
    typedef mozilla::widget::LookAndFeelTheme LookAndFeelTheme;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::dom::MaybeDiscardedWindowContext MaybeDiscardedWindowContext;
    typedef mozilla::dom::MediaAudibleState MediaAudibleState;
    typedef mozilla::PDMFactory::MediaCodecsSupported MediaCodecsSupported;
    typedef mozilla::dom::MediaControlAction MediaControlAction;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MediaMetadataBase MediaMetadataBase;
    typedef mozilla::dom::MediaPlaybackState MediaPlaybackState;
    typedef mozilla::dom::MediaSessionAction MediaSessionAction;
    typedef mozilla::dom::MediaSessionPlaybackState MediaSessionPlaybackState;
    typedef mozilla::dom::MemoryReport MemoryReport;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePort MessagePort;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::ModulePaths ModulePaths;
    typedef mozilla::ModulesMapResult ModulesMapResult;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::dom::NotificationEventData NotificationEventData;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::dom::PerformanceTimingData PerformanceTimingData;
    typedef IPC::Permission Permission;
    typedef mozilla::dom::PermissionChoice PermissionChoice;
    typedef mozilla::dom::PermissionRequest PermissionRequest;
    typedef mozilla::dom::PermitUnloadResult PermitUnloadResult;
    typedef mozilla::plugins::PluginIdentifier PluginIdentifier;
    typedef mozilla::plugins::PluginTag PluginTag;
    typedef mozilla::fontlist::Pointer Pointer;
    typedef mozilla::dom::PopupIPCTabContext PopupIPCTabContext;
    typedef mozilla::dom::PositionState PositionState;
    typedef mozilla::dom::PostMessageData PostMessageData;
    typedef mozilla::dom::Pref Pref;
    typedef mozilla::dom::PrefValue PrefValue;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef IPC::Principal Principal;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::dom::ServiceWorkerShutdownState::Progress Progress;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::RemoteDecodeIn RemoteDecodeIn;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::Telemetry::ScalarAction ScalarAction;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::dom::ServiceWorkerConfiguration ServiceWorkerConfiguration;
    typedef mozilla::dom::ServiceWorkerRegistrationData ServiceWorkerRegistrationData;
    typedef mozilla::dom::SessionHistoryInfo SessionHistoryInfo;
    typedef base::SharedMemoryHandle SharedMemoryHandle;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ContentBlockingNotifier::StorageAccessPermissionGrantedReason StorageAccessPermissionGrantedReason;
    typedef mozilla::ContentBlocking::StorageAccessPromptChoices StorageAccessPromptChoices;
    typedef mozilla::dom::StringBundleDescriptor StringBundleDescriptor;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::dom::ipc::StructuredCloneData StructuredCloneData;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::dom::SyncedContextInitializer SyncedContextInitializer;
    typedef mozilla::dom::SystemFontListEntry SystemFontListEntry;
    typedef mozilla::dom::SystemParameterKVPair SystemParameterKVPair;
    typedef mozilla::dom::SystemParameterValue SystemParameterValue;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::layers::TextureFactoryIdentifier TextureFactoryIdentifier;
    typedef mozilla::widget::ThemeChangeKind ThemeChangeKind;
    typedef mozilla::TimeDuration TimeDuration;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::UntrustedModulesData UntrustedModulesData;
    typedef mozilla::gfx::D3D11Checks::VideoFormatOption VideoFormatOption;
    typedef mozilla::gfx::D3D11Checks::VideoFormatOptionSet VideoFormatOptionSet;
    typedef mozilla::dom::VisitedQueryResult VisitedQueryResult;
    typedef mozilla::dom::WindowContextInitializer WindowContextInitializer;
    typedef mozilla::dom::WindowContextTransaction WindowContextTransaction;
    typedef mozilla::dom::WindowGlobalInit WindowGlobalInit;
    typedef mozilla::dom::XPCOMInitData XPCOMInitData;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::layers::PCompositorManagerChild PCompositorManagerChild;
    typedef mozilla::layers::PCompositorManagerParent PCompositorManagerParent;
    typedef mozilla::dom::PContentPermissionRequestChild PContentPermissionRequestChild;
    typedef mozilla::dom::PContentPermissionRequestParent PContentPermissionRequestParent;
    typedef mozilla::dom::PCycleCollectWithLogsChild PCycleCollectWithLogsChild;
    typedef mozilla::dom::PCycleCollectWithLogsParent PCycleCollectWithLogsParent;
    typedef mozilla::dom::PExternalHelperAppChild PExternalHelperAppChild;
    typedef mozilla::dom::PExternalHelperAppParent PExternalHelperAppParent;
    typedef mozilla::dom::PHandlerServiceChild PHandlerServiceChild;
    typedef mozilla::dom::PHandlerServiceParent PHandlerServiceParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::hal_sandbox::PHalChild PHalChild;
    typedef mozilla::hal_sandbox::PHalParent PHalParent;
    typedef mozilla::devtools::PHeapSnapshotTempFileHelperChild PHeapSnapshotTempFileHelperChild;
    typedef mozilla::devtools::PHeapSnapshotTempFileHelperParent PHeapSnapshotTempFileHelperParent;
    typedef mozilla::PProcessHangMonitorChild PProcessHangMonitorChild;
    typedef mozilla::PProcessHangMonitorParent PProcessHangMonitorParent;
    typedef mozilla::layers::PImageBridgeChild PImageBridgeChild;
    typedef mozilla::layers::PImageBridgeParent PImageBridgeParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;
    typedef mozilla::dom::PLoginReputationChild PLoginReputationChild;
    typedef mozilla::dom::PLoginReputationParent PLoginReputationParent;
    typedef mozilla::media::PMediaChild PMediaChild;
    typedef mozilla::media::PMediaParent PMediaParent;
    typedef mozilla::net::PNeckoChild PNeckoChild;
    typedef mozilla::net::PNeckoParent PNeckoParent;
    typedef mozilla::extensions::PStreamFilterChild PStreamFilterChild;
    typedef mozilla::extensions::PStreamFilterParent PStreamFilterParent;
    typedef mozilla::gmp::PGMPContentChild PGMPContentChild;
    typedef mozilla::gmp::PGMPContentParent PGMPContentParent;
    typedef mozilla::gmp::PGMPServiceChild PGMPServiceChild;
    typedef mozilla::gmp::PGMPServiceParent PGMPServiceParent;
    typedef mozilla::plugins::PPluginModuleChild PPluginModuleChild;
    typedef mozilla::plugins::PPluginModuleParent PPluginModuleParent;
    typedef mozilla::gmp::PGMPChild PGMPChild;
    typedef mozilla::gmp::PGMPParent PGMPParent;
    typedef mozilla::embedding::PPrintingChild PPrintingChild;
    typedef mozilla::embedding::PPrintingParent PPrintingParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::docshell::POfflineCacheUpdateChild POfflineCacheUpdateChild;
    typedef mozilla::docshell::POfflineCacheUpdateParent POfflineCacheUpdateParent;
    typedef mozilla::dom::PSpeechSynthesisChild PSpeechSynthesisChild;
    typedef mozilla::dom::PSpeechSynthesisParent PSpeechSynthesisParent;
    typedef mozilla::ipc::PTestShellChild PTestShellChild;
    typedef mozilla::ipc::PTestShellParent PTestShellParent;
    typedef mozilla::PRemoteSpellcheckEngineChild PRemoteSpellcheckEngineChild;
    typedef mozilla::PRemoteSpellcheckEngineParent PRemoteSpellcheckEngineParent;
    typedef mozilla::PWebBrowserPersistDocumentChild PWebBrowserPersistDocumentChild;
    typedef mozilla::PWebBrowserPersistDocumentParent PWebBrowserPersistDocumentParent;
    typedef mozilla::dom::PWebrtcGlobalChild PWebrtcGlobalChild;
    typedef mozilla::dom::PWebrtcGlobalParent PWebrtcGlobalParent;
    typedef mozilla::dom::PWindowGlobalChild PWindowGlobalChild;
    typedef mozilla::dom::PWindowGlobalParent PWindowGlobalParent;
    typedef mozilla::dom::PPresentationChild PPresentationChild;
    typedef mozilla::dom::PPresentationParent PPresentationParent;
    typedef mozilla::dom::PURLClassifierChild PURLClassifierChild;
    typedef mozilla::dom::PURLClassifierParent PURLClassifierParent;
    typedef mozilla::dom::PURLClassifierLocalChild PURLClassifierLocalChild;
    typedef mozilla::dom::PURLClassifierLocalParent PURLClassifierLocalParent;
    typedef mozilla::gfx::PVRManagerChild PVRManagerChild;
    typedef mozilla::gfx::PVRManagerParent PVRManagerParent;
    typedef mozilla::PRemoteDecoderManagerChild PRemoteDecoderManagerChild;
    typedef mozilla::PRemoteDecoderManagerParent PRemoteDecoderManagerParent;
    typedef mozilla::PProfilerChild PProfilerChild;
    typedef mozilla::PProfilerParent PProfilerParent;
    typedef mozilla::loader::PScriptCacheChild PScriptCacheChild;
    typedef mozilla::loader::PScriptCacheParent PScriptCacheParent;
    typedef mozilla::dom::PSessionStorageObserverChild PSessionStorageObserverChild;
    typedef mozilla::dom::PSessionStorageObserverParent PSessionStorageObserverParent;
    typedef mozilla::PBenchmarkStorageChild PBenchmarkStorageChild;
    typedef mozilla::PBenchmarkStorageParent PBenchmarkStorageParent;

public:
    typedef std::function<void(const uint32_t&)> RequestMemoryReportResolver;
    typedef std::function<void(mozilla::Maybe<UntrustedModulesData>&&)> GetUntrustedModulesDataResolver;
    typedef std::function<void(const nsCString&)> CollectPerfStatsJSONResolver;
    typedef std::function<void(const bool&)> FlushCodeCoverageCountersResolver;
    typedef std::function<void(const nsresult&)> CrossProcessRedirectResolver;
    typedef std::function<void(const bool&)> LoadURIResolver;
    typedef std::function<void(const PermitUnloadResult&)> DispatchBeforeUnloadToSubtreeResolver;
    typedef MozPromise<Tuple<mozilla::Maybe<LoadingSessionHistoryInfo>, int32_t, int32_t>, ResponseRejectReason, true> GetLoadingSessionHistoryInfoFromParentPromise;
    typedef MozPromise<Endpoint<mozilla::extensions::PStreamFilterChild>, ResponseRejectReason, true> InitStreamFilterPromise;
    typedef MozPromise<FileDescOrError, ResponseRejectReason, true> CreateAudioIPCConnectionPromise;
    typedef MozPromise<CreatedWindowInfo, ResponseRejectReason, true> CreateWindowPromise;
    typedef MozPromise<nsresult, ResponseRejectReason, true> AddCertExceptionPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> AutomaticStorageAccessPermissionCanBeGrantedPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> StorageAccessPermissionGrantedForOriginPromise;
    typedef MozPromise<mozilla::Maybe<StorageAccessPromptChoices>, ResponseRejectReason, true> CompleteAllowAccessForPromise;
    typedef MozPromise<mozilla::Maybe<ModulesMapResult>, ResponseRejectReason, true> GetModulesTrustPromise;
    typedef MozPromise<Tuple<bool, mozilla::Maybe<RefPtr<nsDocShellLoadState>>, mozilla::Maybe<bool>>, ResponseRejectReason, true> NotifyOnHistoryReloadPromise;
    typedef MozPromise<int32_t, ResponseRejectReason, true> HistoryGoPromise;
    typedef MozPromise<BlobURLDataRequestResult, ResponseRejectReason, true> BlobURLDataRequestPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> DiscardBrowsingContextPromise;
    typedef std::function<void(const bool&)> DiscardBrowsingContextResolver;
    typedef std::function<void(const bool&)> DiscardWindowContextResolver;
    typedef std::function<void(ByteBuf&&)> FlushFOGDataResolver;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPFileDescriptorSetConstructor(
            PFileDescriptorSetChild* actor,
            const FileDescriptor& fd);
    virtual mozilla::ipc::IPCResult
    RecvPWebBrowserPersistDocumentConstructor(
            PWebBrowserPersistDocumentChild* actor,
            PBrowserChild* aBrowser,
            const MaybeDiscardedBrowsingContext& aContext);
    virtual mozilla::ipc::IPCResult
    RecvPCycleCollectWithLogsConstructor(
            PCycleCollectWithLogsChild* actor,
            const bool& dumpAllTraces,
            const FileDescriptor& gcLog,
            const FileDescriptor& ccLog);
    virtual mozilla::ipc::IPCResult
    RecvPTestShellConstructor(PTestShellChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPScriptCacheConstructor(
            PScriptCacheChild* actor,
            const FileDescOrError& cacheFile,
            const bool& wantCacheData);
    virtual mozilla::ipc::IPCResult
    RecvPParentToChildStreamConstructor(PParentToChildStreamChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPRemoteLazyInputStreamConstructor(
            PRemoteLazyInputStreamChild* actor,
            const nsID& aID,
            const uint64_t& aSize);
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PContentChild();

    virtual ~PContentChild();

public:
    void
    ManagedPBrowserChild(nsTArray<PBrowserChild*>& aArr) const;
    const ManagedContainer<PBrowserChild>&
    ManagedPBrowserChild() const;

    void
    ManagedPContentPermissionRequestChild(nsTArray<PContentPermissionRequestChild*>& aArr) const;
    const ManagedContainer<PContentPermissionRequestChild>&
    ManagedPContentPermissionRequestChild() const;

    void
    ManagedPCycleCollectWithLogsChild(nsTArray<PCycleCollectWithLogsChild*>& aArr) const;
    const ManagedContainer<PCycleCollectWithLogsChild>&
    ManagedPCycleCollectWithLogsChild() const;

    void
    ManagedPExternalHelperAppChild(nsTArray<PExternalHelperAppChild*>& aArr) const;
    const ManagedContainer<PExternalHelperAppChild>&
    ManagedPExternalHelperAppChild() const;

    void
    ManagedPFileDescriptorSetChild(nsTArray<PFileDescriptorSetChild*>& aArr) const;
    const ManagedContainer<PFileDescriptorSetChild>&
    ManagedPFileDescriptorSetChild() const;

    void
    ManagedPHalChild(nsTArray<PHalChild*>& aArr) const;
    const ManagedContainer<PHalChild>&
    ManagedPHalChild() const;

    void
    ManagedPHandlerServiceChild(nsTArray<PHandlerServiceChild*>& aArr) const;
    const ManagedContainer<PHandlerServiceChild>&
    ManagedPHandlerServiceChild() const;

    void
    ManagedPHeapSnapshotTempFileHelperChild(nsTArray<PHeapSnapshotTempFileHelperChild*>& aArr) const;
    const ManagedContainer<PHeapSnapshotTempFileHelperChild>&
    ManagedPHeapSnapshotTempFileHelperChild() const;

    void
    ManagedPRemoteLazyInputStreamChild(nsTArray<PRemoteLazyInputStreamChild*>& aArr) const;
    const ManagedContainer<PRemoteLazyInputStreamChild>&
    ManagedPRemoteLazyInputStreamChild() const;

    void
    ManagedPMediaChild(nsTArray<PMediaChild*>& aArr) const;
    const ManagedContainer<PMediaChild>&
    ManagedPMediaChild() const;

    void
    ManagedPNeckoChild(nsTArray<PNeckoChild*>& aArr) const;
    const ManagedContainer<PNeckoChild>&
    ManagedPNeckoChild() const;

    void
    ManagedPOfflineCacheUpdateChild(nsTArray<POfflineCacheUpdateChild*>& aArr) const;
    const ManagedContainer<POfflineCacheUpdateChild>&
    ManagedPOfflineCacheUpdateChild() const;

    void
    ManagedPPrintingChild(nsTArray<PPrintingChild*>& aArr) const;
    const ManagedContainer<PPrintingChild>&
    ManagedPPrintingChild() const;

    void
    ManagedPChildToParentStreamChild(nsTArray<PChildToParentStreamChild*>& aArr) const;
    const ManagedContainer<PChildToParentStreamChild>&
    ManagedPChildToParentStreamChild() const;

    void
    ManagedPParentToChildStreamChild(nsTArray<PParentToChildStreamChild*>& aArr) const;
    const ManagedContainer<PParentToChildStreamChild>&
    ManagedPParentToChildStreamChild() const;

    void
    ManagedPSpeechSynthesisChild(nsTArray<PSpeechSynthesisChild*>& aArr) const;
    const ManagedContainer<PSpeechSynthesisChild>&
    ManagedPSpeechSynthesisChild() const;

    void
    ManagedPTestShellChild(nsTArray<PTestShellChild*>& aArr) const;
    const ManagedContainer<PTestShellChild>&
    ManagedPTestShellChild() const;

    void
    ManagedPRemoteSpellcheckEngineChild(nsTArray<PRemoteSpellcheckEngineChild*>& aArr) const;
    const ManagedContainer<PRemoteSpellcheckEngineChild>&
    ManagedPRemoteSpellcheckEngineChild() const;

    void
    ManagedPWebBrowserPersistDocumentChild(nsTArray<PWebBrowserPersistDocumentChild*>& aArr) const;
    const ManagedContainer<PWebBrowserPersistDocumentChild>&
    ManagedPWebBrowserPersistDocumentChild() const;

    void
    ManagedPWebrtcGlobalChild(nsTArray<PWebrtcGlobalChild*>& aArr) const;
    const ManagedContainer<PWebrtcGlobalChild>&
    ManagedPWebrtcGlobalChild() const;

    void
    ManagedPPresentationChild(nsTArray<PPresentationChild*>& aArr) const;
    const ManagedContainer<PPresentationChild>&
    ManagedPPresentationChild() const;

    void
    ManagedPURLClassifierChild(nsTArray<PURLClassifierChild*>& aArr) const;
    const ManagedContainer<PURLClassifierChild>&
    ManagedPURLClassifierChild() const;

    void
    ManagedPURLClassifierLocalChild(nsTArray<PURLClassifierLocalChild*>& aArr) const;
    const ManagedContainer<PURLClassifierLocalChild>&
    ManagedPURLClassifierLocalChild() const;

    void
    ManagedPScriptCacheChild(nsTArray<PScriptCacheChild*>& aArr) const;
    const ManagedContainer<PScriptCacheChild>&
    ManagedPScriptCacheChild() const;

    void
    ManagedPLoginReputationChild(nsTArray<PLoginReputationChild*>& aArr) const;
    const ManagedContainer<PLoginReputationChild>&
    ManagedPLoginReputationChild() const;

    void
    ManagedPSessionStorageObserverChild(nsTArray<PSessionStorageObserverChild*>& aArr) const;
    const ManagedContainer<PSessionStorageObserverChild>&
    ManagedPSessionStorageObserverChild() const;

    void
    ManagedPBenchmarkStorageChild(nsTArray<PBenchmarkStorageChild*>& aArr) const;
    const ManagedContainer<PBenchmarkStorageChild>&
    ManagedPBenchmarkStorageChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PBrowserParent>
    OpenPBrowserEndpoint(PBrowserChild* aActor);
    bool
    BindPBrowserEndpoint(
            ManagedEndpoint<PBrowserChild> aEndpoint,
            PBrowserChild* aActor);

    ManagedEndpoint<PContentPermissionRequestParent>
    OpenPContentPermissionRequestEndpoint(PContentPermissionRequestChild* aActor);
    bool
    BindPContentPermissionRequestEndpoint(
            ManagedEndpoint<PContentPermissionRequestChild> aEndpoint,
            PContentPermissionRequestChild* aActor);

    ManagedEndpoint<PCycleCollectWithLogsParent>
    OpenPCycleCollectWithLogsEndpoint(PCycleCollectWithLogsChild* aActor);
    bool
    BindPCycleCollectWithLogsEndpoint(
            ManagedEndpoint<PCycleCollectWithLogsChild> aEndpoint,
            PCycleCollectWithLogsChild* aActor);

    ManagedEndpoint<PExternalHelperAppParent>
    OpenPExternalHelperAppEndpoint(PExternalHelperAppChild* aActor);
    bool
    BindPExternalHelperAppEndpoint(
            ManagedEndpoint<PExternalHelperAppChild> aEndpoint,
            PExternalHelperAppChild* aActor);

    ManagedEndpoint<PFileDescriptorSetParent>
    OpenPFileDescriptorSetEndpoint(PFileDescriptorSetChild* aActor);
    bool
    BindPFileDescriptorSetEndpoint(
            ManagedEndpoint<PFileDescriptorSetChild> aEndpoint,
            PFileDescriptorSetChild* aActor);

    ManagedEndpoint<PHalParent>
    OpenPHalEndpoint(PHalChild* aActor);
    bool
    BindPHalEndpoint(
            ManagedEndpoint<PHalChild> aEndpoint,
            PHalChild* aActor);

    ManagedEndpoint<PHandlerServiceParent>
    OpenPHandlerServiceEndpoint(PHandlerServiceChild* aActor);
    bool
    BindPHandlerServiceEndpoint(
            ManagedEndpoint<PHandlerServiceChild> aEndpoint,
            PHandlerServiceChild* aActor);

    ManagedEndpoint<PHeapSnapshotTempFileHelperParent>
    OpenPHeapSnapshotTempFileHelperEndpoint(PHeapSnapshotTempFileHelperChild* aActor);
    bool
    BindPHeapSnapshotTempFileHelperEndpoint(
            ManagedEndpoint<PHeapSnapshotTempFileHelperChild> aEndpoint,
            PHeapSnapshotTempFileHelperChild* aActor);

    ManagedEndpoint<PRemoteLazyInputStreamParent>
    OpenPRemoteLazyInputStreamEndpoint(PRemoteLazyInputStreamChild* aActor);
    bool
    BindPRemoteLazyInputStreamEndpoint(
            ManagedEndpoint<PRemoteLazyInputStreamChild> aEndpoint,
            PRemoteLazyInputStreamChild* aActor);

    ManagedEndpoint<PMediaParent>
    OpenPMediaEndpoint(PMediaChild* aActor);
    bool
    BindPMediaEndpoint(
            ManagedEndpoint<PMediaChild> aEndpoint,
            PMediaChild* aActor);

    ManagedEndpoint<PNeckoParent>
    OpenPNeckoEndpoint(PNeckoChild* aActor);
    bool
    BindPNeckoEndpoint(
            ManagedEndpoint<PNeckoChild> aEndpoint,
            PNeckoChild* aActor);

    ManagedEndpoint<POfflineCacheUpdateParent>
    OpenPOfflineCacheUpdateEndpoint(POfflineCacheUpdateChild* aActor);
    bool
    BindPOfflineCacheUpdateEndpoint(
            ManagedEndpoint<POfflineCacheUpdateChild> aEndpoint,
            POfflineCacheUpdateChild* aActor);

    ManagedEndpoint<PPrintingParent>
    OpenPPrintingEndpoint(PPrintingChild* aActor);
    bool
    BindPPrintingEndpoint(
            ManagedEndpoint<PPrintingChild> aEndpoint,
            PPrintingChild* aActor);

    ManagedEndpoint<PChildToParentStreamParent>
    OpenPChildToParentStreamEndpoint(PChildToParentStreamChild* aActor);
    bool
    BindPChildToParentStreamEndpoint(
            ManagedEndpoint<PChildToParentStreamChild> aEndpoint,
            PChildToParentStreamChild* aActor);

    ManagedEndpoint<PParentToChildStreamParent>
    OpenPParentToChildStreamEndpoint(PParentToChildStreamChild* aActor);
    bool
    BindPParentToChildStreamEndpoint(
            ManagedEndpoint<PParentToChildStreamChild> aEndpoint,
            PParentToChildStreamChild* aActor);

    ManagedEndpoint<PSpeechSynthesisParent>
    OpenPSpeechSynthesisEndpoint(PSpeechSynthesisChild* aActor);
    bool
    BindPSpeechSynthesisEndpoint(
            ManagedEndpoint<PSpeechSynthesisChild> aEndpoint,
            PSpeechSynthesisChild* aActor);

    ManagedEndpoint<PTestShellParent>
    OpenPTestShellEndpoint(PTestShellChild* aActor);
    bool
    BindPTestShellEndpoint(
            ManagedEndpoint<PTestShellChild> aEndpoint,
            PTestShellChild* aActor);

    ManagedEndpoint<PRemoteSpellcheckEngineParent>
    OpenPRemoteSpellcheckEngineEndpoint(PRemoteSpellcheckEngineChild* aActor);
    bool
    BindPRemoteSpellcheckEngineEndpoint(
            ManagedEndpoint<PRemoteSpellcheckEngineChild> aEndpoint,
            PRemoteSpellcheckEngineChild* aActor);

    ManagedEndpoint<PWebBrowserPersistDocumentParent>
    OpenPWebBrowserPersistDocumentEndpoint(PWebBrowserPersistDocumentChild* aActor);
    bool
    BindPWebBrowserPersistDocumentEndpoint(
            ManagedEndpoint<PWebBrowserPersistDocumentChild> aEndpoint,
            PWebBrowserPersistDocumentChild* aActor);

    ManagedEndpoint<PWebrtcGlobalParent>
    OpenPWebrtcGlobalEndpoint(PWebrtcGlobalChild* aActor);
    bool
    BindPWebrtcGlobalEndpoint(
            ManagedEndpoint<PWebrtcGlobalChild> aEndpoint,
            PWebrtcGlobalChild* aActor);

    ManagedEndpoint<PPresentationParent>
    OpenPPresentationEndpoint(PPresentationChild* aActor);
    bool
    BindPPresentationEndpoint(
            ManagedEndpoint<PPresentationChild> aEndpoint,
            PPresentationChild* aActor);

    ManagedEndpoint<PURLClassifierParent>
    OpenPURLClassifierEndpoint(PURLClassifierChild* aActor);
    bool
    BindPURLClassifierEndpoint(
            ManagedEndpoint<PURLClassifierChild> aEndpoint,
            PURLClassifierChild* aActor);

    ManagedEndpoint<PURLClassifierLocalParent>
    OpenPURLClassifierLocalEndpoint(PURLClassifierLocalChild* aActor);
    bool
    BindPURLClassifierLocalEndpoint(
            ManagedEndpoint<PURLClassifierLocalChild> aEndpoint,
            PURLClassifierLocalChild* aActor);

    ManagedEndpoint<PScriptCacheParent>
    OpenPScriptCacheEndpoint(PScriptCacheChild* aActor);
    bool
    BindPScriptCacheEndpoint(
            ManagedEndpoint<PScriptCacheChild> aEndpoint,
            PScriptCacheChild* aActor);

    ManagedEndpoint<PLoginReputationParent>
    OpenPLoginReputationEndpoint(PLoginReputationChild* aActor);
    bool
    BindPLoginReputationEndpoint(
            ManagedEndpoint<PLoginReputationChild> aEndpoint,
            PLoginReputationChild* aActor);

    ManagedEndpoint<PSessionStorageObserverParent>
    OpenPSessionStorageObserverEndpoint(PSessionStorageObserverChild* aActor);
    bool
    BindPSessionStorageObserverEndpoint(
            ManagedEndpoint<PSessionStorageObserverChild> aEndpoint,
            PSessionStorageObserverChild* aActor);

    ManagedEndpoint<PBenchmarkStorageParent>
    OpenPBenchmarkStorageEndpoint(PBenchmarkStorageChild* aActor);
    bool
    BindPBenchmarkStorageEndpoint(
            ManagedEndpoint<PBenchmarkStorageChild> aEndpoint,
            PBenchmarkStorageChild* aActor);

    bool
    SendConstructPopupBrowser(
            ManagedEndpoint<mozilla::dom::PBrowserParent>&& browserEp,
            ManagedEndpoint<mozilla::dom::PWindowGlobalParent>&& windowEp,
            const TabId& tabId,
            const IPCTabContext& context,
            const WindowGlobalInit& windowInit,
            const uint32_t& chromeFlags);

    bool
    SendCloneDocumentTreeInto(
            const MaybeDiscardedBrowsingContext& aSourceBc,
            const MaybeDiscardedBrowsingContext& aTargetBc);

    PFileDescriptorSetChild*
    SendPFileDescriptorSetConstructor(const FileDescriptor& fd);

    PFileDescriptorSetChild*
    SendPFileDescriptorSetConstructor(
            PFileDescriptorSetChild* actor,
            const FileDescriptor& fd);

    PWebBrowserPersistDocumentChild*
    SendPWebBrowserPersistDocumentConstructor(
            PBrowserChild* aBrowser,
            const MaybeDiscardedBrowsingContext& aContext);

    PWebBrowserPersistDocumentChild*
    SendPWebBrowserPersistDocumentConstructor(
            PWebBrowserPersistDocumentChild* actor,
            PBrowserChild* aBrowser,
            const MaybeDiscardedBrowsingContext& aContext);

    bool
    SendRawMessage(
            const JSActorMessageMeta& aMetadata,
            const mozilla::Maybe<ClonedMessageData>& aData,
            const mozilla::Maybe<ClonedMessageData>& aStack);

    bool
    SendSessionHistoryUpdate(
            const MaybeDiscardedBrowsingContext& aTopContext,
            const int32_t& aIndex,
            const int32_t& aLength,
            const nsID& aChangeID);

    bool
    SendSynchronizeLayoutHistoryState(
            const MaybeDiscardedBrowsingContext& aContext,
            nsILayoutHistoryState* aState);

    bool
    SendSessionHistoryEntryTitle(
            const MaybeDiscardedBrowsingContext& aContext,
            const nsString& aTitle);

    bool
    SendSessionHistoryEntryScrollRestorationIsManual(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aIsManual);

    bool
    SendSessionHistoryEntryCacheKey(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint32_t& aCacheKey);

    bool
    SendSessionHistoryEntryStoreWindowNameInContiguousEntries(
            const MaybeDiscardedBrowsingContext& aContext,
            const nsString& aName);

    void
    SendGetLoadingSessionHistoryInfoFromParent(
            const MaybeDiscardedBrowsingContext& aContext,
            mozilla::ipc::ResolveCallback<Tuple<mozilla::Maybe<LoadingSessionHistoryInfo>, int32_t, int32_t>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<GetLoadingSessionHistoryInfoFromParentPromise>
    SendGetLoadingSessionHistoryInfoFromParent(const MaybeDiscardedBrowsingContext& aContext);

    bool
    SendInitBackground(Endpoint<mozilla::ipc::PBackgroundParent>&& aEndpoint);

    bool
    SendCreateGMPService();

    void
    SendInitStreamFilter(
            const uint64_t& channelId,
            const nsString& addonId,
            mozilla::ipc::ResolveCallback<Endpoint<mozilla::extensions::PStreamFilterChild>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<InitStreamFilterPromise>
    SendInitStreamFilter(
            const uint64_t& channelId,
            const nsString& addonId);

    bool
    SendLoadPlugin(
            const uint32_t& aPluginId,
            nsresult* aResult,
            uint32_t* aRunID,
            Endpoint<mozilla::plugins::PPluginModuleParent>* aEndpoint);

    bool
    SendConnectPluginBridge(
            const uint32_t& aPluginId,
            nsresult* rv,
            Endpoint<mozilla::plugins::PPluginModuleParent>* aEndpoint);

    PRemoteSpellcheckEngineChild*
    SendPRemoteSpellcheckEngineConstructor();

    PRemoteSpellcheckEngineChild*
    SendPRemoteSpellcheckEngineConstructor(PRemoteSpellcheckEngineChild* actor);

    bool
    SendInitCrashReporter(const NativeThreadId& tid);

    bool
    SendIsSecureURI(
            const uint32_t& aType,
            nsIURI* aURI,
            const uint32_t& aFlags,
            const OriginAttributes& aOriginAttributes,
            bool* isSecureURI);

    bool
    SendAccumulateMixedContentHSTS(
            nsIURI* aURI,
            const bool& aActive,
            const OriginAttributes& aOriginAttributes);

    PHalChild*
    SendPHalConstructor();

    PHalChild*
    SendPHalConstructor(PHalChild* actor);

    PHeapSnapshotTempFileHelperChild*
    SendPHeapSnapshotTempFileHelperConstructor();

    PHeapSnapshotTempFileHelperChild*
    SendPHeapSnapshotTempFileHelperConstructor(PHeapSnapshotTempFileHelperChild* actor);

    PNeckoChild*
    SendPNeckoConstructor();

    PNeckoChild*
    SendPNeckoConstructor(PNeckoChild* actor);

    PPrintingChild*
    SendPPrintingConstructor();

    PPrintingChild*
    SendPPrintingConstructor(PPrintingChild* actor);

    PChildToParentStreamChild*
    SendPChildToParentStreamConstructor();

    PChildToParentStreamChild*
    SendPChildToParentStreamConstructor(PChildToParentStreamChild* actor);

    PSpeechSynthesisChild*
    SendPSpeechSynthesisConstructor();

    PSpeechSynthesisChild*
    SendPSpeechSynthesisConstructor(PSpeechSynthesisChild* actor);

    PMediaChild*
    SendPMediaConstructor();

    PMediaChild*
    SendPMediaConstructor(PMediaChild* actor);

    PWebrtcGlobalChild*
    SendPWebrtcGlobalConstructor();

    PWebrtcGlobalChild*
    SendPWebrtcGlobalConstructor(PWebrtcGlobalChild* actor);

    PPresentationChild*
    SendPPresentationConstructor();

    PPresentationChild*
    SendPPresentationConstructor(PPresentationChild* actor);

    void
    SendCreateAudioIPCConnection(
            mozilla::ipc::ResolveCallback<FileDescOrError>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<CreateAudioIPCConnectionPromise>
    SendCreateAudioIPCConnection();

    [[nodiscard]] PURLClassifierChild*
    SendPURLClassifierConstructor(
            const Principal& principal,
            bool* success);

    [[nodiscard]] PURLClassifierChild*
    SendPURLClassifierConstructor(
            PURLClassifierChild* actor,
            const Principal& principal,
            bool* success);

    PURLClassifierLocalChild*
    SendPURLClassifierLocalConstructor(
            nsIURI* uri,
            const nsTArray<IPCURLClassifierFeature>& features);

    PURLClassifierLocalChild*
    SendPURLClassifierLocalConstructor(
            PURLClassifierLocalChild* actor,
            nsIURI* uri,
            const nsTArray<IPCURLClassifierFeature>& features);

    PLoginReputationChild*
    SendPLoginReputationConstructor(nsIURI* formURI);

    PLoginReputationChild*
    SendPLoginReputationConstructor(
            PLoginReputationChild* actor,
            nsIURI* formURI);

    PSessionStorageObserverChild*
    SendPSessionStorageObserverConstructor();

    PSessionStorageObserverChild*
    SendPSessionStorageObserverConstructor(PSessionStorageObserverChild* actor);

    PBenchmarkStorageChild*
    SendPBenchmarkStorageConstructor();

    PBenchmarkStorageChild*
    SendPBenchmarkStorageConstructor(PBenchmarkStorageChild* actor);

    bool
    SendStartVisitedQueries(const nsTArray<RefPtr<nsIURI>>& uri);

    bool
    SendSetURITitle(
            nsIURI* uri,
            const nsString& title);

    bool
    SendLoadURIExternal(
            nsIURI* uri,
            nsIPrincipal* triggeringPrincipal,
            const MaybeDiscardedBrowsingContext& browsingContext);

    bool
    SendExtProtocolChannelConnectParent(const uint64_t& registrarId);

    bool
    SendGetGfxVars(nsTArray<GfxVarUpdate>* vars);

    bool
    SendSyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData,
            nsTArray<StructuredCloneData>* retval);

    bool
    SendShowAlert(nsIAlertNotification* alert);

    bool
    SendCloseAlert(const nsString& name);

    bool
    SendDisableNotifications(const Principal& principal);

    bool
    SendOpenNotificationSettings(const Principal& principal);

    bool
    SendAddSecurityState(
            const MaybeDiscardedWindowContext& aContext,
            const uint32_t& aStateFlags);

    bool
    SendNotificationEvent(
            const nsString& type,
            const NotificationEventData& data);

    PExternalHelperAppChild*
    SendPExternalHelperAppConstructor(
            PExternalHelperAppChild* actor,
            nsIURI* uri,
            const mozilla::Maybe<LoadInfoArgs>& loadInfoArgs,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const uint32_t& aContentDispositionHint,
            const nsString& aContentDispositionFilename,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const bool& aWasFileChannel,
            nsIURI* aReferrer,
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aShouldCloseWindow);

    PHandlerServiceChild*
    SendPHandlerServiceConstructor(PHandlerServiceChild* actor);

    bool
    SendAddGeolocationListener(const bool& highAccuracy);

    bool
    SendRemoveGeolocationListener();

    bool
    SendSetGeolocationHigherAccuracy(const bool& enable);

    bool
    SendConsoleMessage(const nsString& message);

    bool
    SendScriptErrorWithStack(
            const nsString& message,
            const nsString& sourceName,
            const nsString& sourceLine,
            const uint32_t& lineNumber,
            const uint32_t& colNumber,
            const uint32_t& flags,
            const nsCString& category,
            const bool& privateWindow,
            const bool& fromChromeContext,
            const ClonedMessageData& stack);

    bool
    SendSetClipboard(
            const IPCDataTransfer& aDataTransfer,
            const bool& aIsPrivateData,
            const Principal& aRequestingPrincipal,
            const nsContentPolicyType& aContentPolicyType,
            const int32_t& aWhichClipboard);

    bool
    SendGetClipboard(
            const nsTArray<nsCString>& aTypes,
            const int32_t& aWhichClipboard,
            IPCDataTransfer* dataTransfer);

    bool
    SendGetExternalClipboardFormats(
            const int32_t& aWhichClipboard,
            const bool& aPlainTextOnly,
            nsTArray<nsCString>* aTypes);

    bool
    SendEmptyClipboard(const int32_t& aWhichClipboard);

    bool
    SendClipboardHasType(
            const nsTArray<nsCString>& aTypes,
            const int32_t& aWhichClipboard,
            bool* hasType);

    bool
    SendPlaySound(nsIURI* aURL);

    bool
    SendBeep();

    bool
    SendPlayEventSound(const uint32_t& aEventId);

    bool
    SendGetIconForExtension(
            const nsCString& aFileExt,
            const uint32_t& aIconSize,
            nsTArray<uint8_t>* bits);

    bool
    SendPrivateDocShellsExist(const bool& aExist);

    bool
    SendFirstIdle();

    bool
    SendDeviceReset();

    bool
    SendCopyFavicon(
            nsIURI* oldURI,
            nsIURI* newURI,
            const bool& isPrivate);

    bool
    SendRecordingDeviceEvents(
            const nsString& recordingStatus,
            const nsString& pageURL,
            const bool& isAudio,
            const bool& isVideo);

    bool
    SendGraphicsError(const nsCString& aError);

    bool
    SendBeginDriverCrashGuard(
            const uint32_t& aGuardType,
            bool* crashDetected);

    bool
    SendEndDriverCrashGuard(const uint32_t& aGuardType);

    bool
    SendAddIdleObserver(
            const uint64_t& observerId,
            const uint32_t& idleTimeInS);

    bool
    SendRemoveIdleObserver(
            const uint64_t& observerId,
            const uint32_t& idleTimeInS);

    bool
    SendBackUpXResources(const FileDescriptor& aXSocketFd);

    bool
    SendRequestAnonymousTemporaryFile(const uint64_t& aID);

    POfflineCacheUpdateChild*
    SendPOfflineCacheUpdateConstructor(
            POfflineCacheUpdateChild* actor,
            nsIURI* manifestURI,
            nsIURI* documentURI,
            const PrincipalInfo& loadingPrincipal,
            const bool& stickDocument,
            const CookieJarSettingsArgs& cookieJarSettings);

    bool
    SendSetOfflinePermission(const Principal& principal);

    bool
    SendFinishShutdown();

    bool
    SendUpdateDropEffect(
            const uint32_t& aDragAction,
            const uint32_t& aDropEffect);

    PContentPermissionRequestChild*
    SendPContentPermissionRequestConstructor(
            const nsTArray<PermissionRequest>& aRequests,
            const Principal& aPrincipal,
            const Principal& aTopLevelPrincipal,
            const bool& aIsHandlingUserInput,
            const bool& aMaybeUnsafePermissionDelegate,
            const TabId& tabId);

    PContentPermissionRequestChild*
    SendPContentPermissionRequestConstructor(
            PContentPermissionRequestChild* actor,
            const nsTArray<PermissionRequest>& aRequests,
            const Principal& aPrincipal,
            const Principal& aTopLevelPrincipal,
            const bool& aIsHandlingUserInput,
            const bool& aMaybeUnsafePermissionDelegate,
            const TabId& tabId);

    bool
    SendShutdownProfile(const nsCString& aProfile);

    bool
    SendGetGraphicsDeviceInitData(ContentDeviceData* aData);

    bool
    SendGetOutputColorProfileData(nsTArray<uint8_t>* aOutputColorProfileData);

    bool
    SendGetFontListShmBlock(
            const uint32_t& aGeneration,
            const uint32_t& aIndex,
            SharedMemoryHandle* aHandle);

    bool
    SendInitializeFamily(
            const uint32_t& aGeneration,
            const uint32_t& aFamilyIndex,
            const bool& aLoadCmaps);

    bool
    SendSetCharacterMap(
            const uint32_t& aGeneration,
            const Pointer& aFacePtr,
            const gfxSparseBitSet& aMap);

    bool
    SendSetupFamilyCharMap(
            const uint32_t& aGeneration,
            const Pointer& aFamilyPtr);

    bool
    SendInitOtherFamilyNames(
            const uint32_t& aGeneration,
            const bool& aDefer,
            bool* aLoaded);

    bool
    SendStartCmapLoading(
            const uint32_t& aGeneration,
            const uint32_t& aStartIndex);

    bool
    SendGetHyphDict(
            nsIURI* aURI,
            SharedMemoryHandle* aHandle,
            uint32_t* aSize);

    void
    SendCreateWindow(
            PBrowserChild* aThisTab,
            const MaybeDiscardedBrowsingContext& aParent,
            PBrowserChild* aNewTab,
            const uint32_t& aChromeFlags,
            const bool& aCalledFromJS,
            const bool& aWidthSpecified,
            const bool& aForPrinting,
            const bool& aForWindowDotPrint,
            nsIURI* aURIToLoad,
            const nsCString& aFeatures,
            const float& aFullZoom,
            const Principal& aTriggeringPrincipal,
            nsIContentSecurityPolicy* aCsp,
            nsIReferrerInfo* aReferrerInfo,
            const OriginAttributes& aOriginAttributes,
            mozilla::ipc::ResolveCallback<CreatedWindowInfo>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<CreateWindowPromise>
    SendCreateWindow(
            PBrowserChild* aThisTab,
            const MaybeDiscardedBrowsingContext& aParent,
            PBrowserChild* aNewTab,
            const uint32_t& aChromeFlags,
            const bool& aCalledFromJS,
            const bool& aWidthSpecified,
            const bool& aForPrinting,
            const bool& aForWindowDotPrint,
            nsIURI* aURIToLoad,
            const nsCString& aFeatures,
            const float& aFullZoom,
            const Principal& aTriggeringPrincipal,
            nsIContentSecurityPolicy* aCsp,
            nsIReferrerInfo* aReferrerInfo,
            const OriginAttributes& aOriginAttributes);

    bool
    SendCreateWindowInDifferentProcess(
            PBrowserChild* aThisTab,
            const MaybeDiscardedBrowsingContext& aParent,
            const uint32_t& aChromeFlags,
            const bool& aCalledFromJS,
            const bool& aWidthSpecified,
            nsIURI* aURIToLoad,
            const nsCString& aFeatures,
            const float& aFullZoom,
            const nsString& aName,
            nsIPrincipal* aTriggeringPrincipal,
            nsIContentSecurityPolicy* aCsp,
            nsIReferrerInfo* aReferrerInfo,
            const OriginAttributes& aOriginAttributes);

    bool
    SendUngrabPointer(const uint32_t& time);

    bool
    SendRemovePermission(
            const Principal& principal,
            const nsCString& permissionType,
            nsresult* rv);

    bool
    SendNotifyBenchmarkResult(
            const nsString& aCodecName,
            const uint32_t& aDecodeFPS);

    bool
    SendNotifyPushObservers(
            const nsCString& scope,
            const Principal& principal,
            const nsString& messageId);

    bool
    SendNotifyPushObserversWithData(
            const nsCString& scope,
            const Principal& principal,
            const nsString& messageId,
            const nsTArray<uint8_t>& data);

    bool
    SendNotifyPushSubscriptionChangeObservers(
            const nsCString& scope,
            const Principal& principal);

    bool
    SendGetFilesRequest(
            const nsID& aID,
            const nsString& aDirectory,
            const bool& aRecursiveFlag);

    bool
    SendDeleteGetFilesRequest(const nsID& aID);

    bool
    SendStoreAndBroadcastBlobURLRegistration(
            const nsCString& url,
            const IPCBlob& blob,
            const Principal& principal,
            const mozilla::Maybe<nsID>& aAgentClusterId);

    bool
    SendUnstoreAndBroadcastBlobURLUnregistration(
            const nsCString& url,
            const Principal& principal);

    bool
    SendAccumulateChildHistograms(const nsTArray<HistogramAccumulation>& accumulations);

    bool
    SendAccumulateChildKeyedHistograms(const nsTArray<KeyedHistogramAccumulation>& accumulations);

    bool
    SendUpdateChildScalars(const nsTArray<ScalarAction>& updates);

    bool
    SendUpdateChildKeyedScalars(const nsTArray<KeyedScalarAction>& updates);

    bool
    SendRecordChildEvents(const nsTArray<ChildEventData>& events);

    bool
    SendRecordDiscardedData(const DiscardedData& data);

    bool
    SendGetA11yContentId(uint32_t* aContentId);

    bool
    SendA11yHandlerControl(
            const uint32_t& aPid,
            const IHandlerControlHolder& aHandlerControl);

    bool
    SendAddMemoryReport(const MemoryReport& aReport);

    bool
    SendMaybeReloadPlugins();

    bool
    SendBHRThreadHang(const HangDetails& aHangDetails);

    bool
    SendAddPerformanceMetrics(
            const nsID& aID,
            const nsTArray<PerformanceInfo>& aMetrics);

    void
    SendAddCertException(
            const nsCString& aSerializedCert,
            const uint32_t& aFlags,
            const nsCString& aHostName,
            const int32_t& aPort,
            const bool& aIsTemporary,
            mozilla::ipc::ResolveCallback<nsresult>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<AddCertExceptionPromise>
    SendAddCertException(
            const nsCString& aSerializedCert,
            const uint32_t& aFlags,
            const nsCString& aHostName,
            const int32_t& aPort,
            const bool& aIsTemporary);

    void
    SendAutomaticStorageAccessPermissionCanBeGranted(
            const Principal& aPrincipal,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<AutomaticStorageAccessPermissionCanBeGrantedPromise>
    SendAutomaticStorageAccessPermissionCanBeGranted(const Principal& aPrincipal);

    void
    SendStorageAccessPermissionGrantedForOrigin(
            const uint64_t& aTopLevelWindowId,
            const MaybeDiscardedBrowsingContext& aParentContext,
            const Principal& aTrackingPrincipal,
            const nsCString& aTrackingOrigin,
            const int& aAllowMode,
            const mozilla::Maybe<StorageAccessPermissionGrantedReason>& aReason,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<StorageAccessPermissionGrantedForOriginPromise>
    SendStorageAccessPermissionGrantedForOrigin(
            const uint64_t& aTopLevelWindowId,
            const MaybeDiscardedBrowsingContext& aParentContext,
            const Principal& aTrackingPrincipal,
            const nsCString& aTrackingOrigin,
            const int& aAllowMode,
            const mozilla::Maybe<StorageAccessPermissionGrantedReason>& aReason);

    void
    SendCompleteAllowAccessFor(
            const MaybeDiscardedBrowsingContext& aParentContext,
            const uint64_t& aTopLevelWindowId,
            const Principal& aTrackingPrincipal,
            const nsCString& aTrackingOrigin,
            const uint32_t& aCookieBehavior,
            const StorageAccessPermissionGrantedReason& aReason,
            mozilla::ipc::ResolveCallback<mozilla::Maybe<StorageAccessPromptChoices>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<CompleteAllowAccessForPromise>
    SendCompleteAllowAccessFor(
            const MaybeDiscardedBrowsingContext& aParentContext,
            const uint64_t& aTopLevelWindowId,
            const Principal& aTrackingPrincipal,
            const nsCString& aTrackingOrigin,
            const uint32_t& aCookieBehavior,
            const StorageAccessPermissionGrantedReason& aReason);

    bool
    SendStoreUserInteractionAsPermission(const Principal& aPrincipal);

    bool
    SendNotifyMediaPlaybackChanged(
            const MaybeDiscardedBrowsingContext& aContext,
            const MediaPlaybackState& aState);

    bool
    SendNotifyMediaAudibleChanged(
            const MaybeDiscardedBrowsingContext& aContext,
            const MediaAudibleState& aState);

    bool
    SendNotifyPictureInPictureModeChanged(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aEnabled);

    bool
    SendNotifyMediaSessionUpdated(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aIsCreated);

    bool
    SendNotifyUpdateMediaMetadata(
            const MaybeDiscardedBrowsingContext& aContext,
            const mozilla::Maybe<MediaMetadataBase>& aMetadata);

    bool
    SendNotifyMediaSessionPlaybackStateChanged(
            const MaybeDiscardedBrowsingContext& aContext,
            const MediaSessionPlaybackState& aMetadata);

    bool
    SendNotifyMediaSessionSupportedActionChanged(
            const MaybeDiscardedBrowsingContext& aContext,
            const MediaSessionAction& aAction,
            const bool& aEnabled);

    bool
    SendNotifyMediaFullScreenState(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aIsInFullScreen);

    bool
    SendNotifyPositionStateChanged(
            const MaybeDiscardedBrowsingContext& aContext,
            const PositionState& aState);

    void
    SendGetModulesTrust(
            ModulePaths&& aModPaths,
            const bool& aRunAtNormalPriority,
            mozilla::ipc::ResolveCallback<mozilla::Maybe<ModulesMapResult>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<GetModulesTrustPromise>
    SendGetModulesTrust(
            ModulePaths&& aModPaths,
            const bool& aRunAtNormalPriority);

    bool
    SendReportServiceWorkerShutdownProgress(
            const uint32_t& aShutdownStateId,
            const Progress& aProgress);

    bool
    SendAbortOtherOrientationPendingPromises(const MaybeDiscardedBrowsingContext& aContext);

    bool
    SendHistoryReload(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint32_t& aReloadFlags);

    void
    SendNotifyOnHistoryReload(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aForceReload,
            mozilla::ipc::ResolveCallback<Tuple<bool, mozilla::Maybe<RefPtr<nsDocShellLoadState>>, mozilla::Maybe<bool>>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<NotifyOnHistoryReloadPromise>
    SendNotifyOnHistoryReload(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aForceReload);

    bool
    SendHistoryCommit(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint64_t& aLoadID,
            const nsID& aChangeID,
            const uint32_t& aLoadType,
            const bool& aPersist,
            const bool& aCloneEntryChildren);

    void
    SendHistoryGo(
            const MaybeDiscardedBrowsingContext& aContext,
            const int32_t& aOffset,
            const uint64_t& aHistoryEpoch,
            const bool& aRequireUserInteraction,
            mozilla::ipc::ResolveCallback<int32_t>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<HistoryGoPromise>
    SendHistoryGo(
            const MaybeDiscardedBrowsingContext& aContext,
            const int32_t& aOffset,
            const uint64_t& aHistoryEpoch,
            const bool& aRequireUserInteraction);

    void
    SendBlobURLDataRequest(
            const nsCString& aBlobURL,
            nsIPrincipal* aTriggeringPrincipal,
            nsIPrincipal* aLoadingPrincipal,
            const OriginAttributes& aOriginAttributes,
            const uint64_t& aInnerWindowId,
            const mozilla::Maybe<nsID>& aAgentClusterId,
            mozilla::ipc::ResolveCallback<BlobURLDataRequestResult>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<BlobURLDataRequestPromise>
    SendBlobURLDataRequest(
            const nsCString& aBlobURL,
            nsIPrincipal* aTriggeringPrincipal,
            nsIPrincipal* aLoadingPrincipal,
            const OriginAttributes& aOriginAttributes,
            const uint64_t& aInnerWindowId,
            const mozilla::Maybe<nsID>& aAgentClusterId);

    bool
    SendSetActiveSessionHistoryEntry(
            const MaybeDiscardedBrowsingContext& context,
            const mozilla::Maybe<nsPoint>& previousScrollPosition,
            const SessionHistoryInfo& info,
            const uint32_t& loadType,
            const uint32_t& updatedCacheKey,
            const nsID& changeID);

    bool
    SendReplaceActiveSessionHistoryEntry(
            const MaybeDiscardedBrowsingContext& context,
            const SessionHistoryInfo& info);

    bool
    SendRemoveDynEntriesFromActiveSessionHistoryEntry(const MaybeDiscardedBrowsingContext& aContext);

    bool
    SendRemoveFromSessionHistory(
            const MaybeDiscardedBrowsingContext& aContext,
            const nsID& changeID);

    bool
    SendScriptError(
            const nsString& message,
            const nsString& sourceName,
            const nsString& sourceLine,
            const uint32_t& lineNumber,
            const uint32_t& colNumber,
            const uint32_t& flags,
            const nsCString& category,
            const bool& privateWindow,
            const uint64_t& innerWindowId,
            const bool& fromChromeContext);

    bool
    SendReportFrameTimingData(
            const uint64_t& innerWindowId,
            const nsString& entryName,
            const nsString& initiatorType,
            UniquePtr<PerformanceTimingData>&& aData);

    bool
    SendCommitBrowsingContextTransaction(
            const MaybeDiscardedBrowsingContext& aContext,
            const BrowsingContextTransaction& aTransaction,
            const uint64_t& aEpoch);

    bool
    SendAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData);

    bool
    SendNotifyPushSubscriptionModifiedObservers(
            const nsCString& scope,
            const Principal& principal);

    bool
    SendPushError(
            const nsCString& scope,
            const Principal& principal,
            const nsString& message,
            const uint32_t& flags);

    bool
    SendCreateBrowsingContext(
            const uint64_t& aGroupId,
            const BrowsingContextInitializer& aInit);

    void
    SendDiscardBrowsingContext(
            const MaybeDiscardedBrowsingContext& aContext,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<DiscardBrowsingContextPromise>
    SendDiscardBrowsingContext(const MaybeDiscardedBrowsingContext& aContext);

    bool
    SendAdjustWindowFocus(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aCheckPermission,
            const bool& aIsVisible);

    bool
    SendWindowClose(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aTrustedCaller);

    bool
    SendWindowFocus(
            const MaybeDiscardedBrowsingContext& aContext,
            const CallerType& aCallerType,
            const uint64_t& aActionId);

    bool
    SendWindowBlur(
            const MaybeDiscardedBrowsingContext& aContext,
            const CallerType& aCallerType);

    bool
    SendRaiseWindow(
            const MaybeDiscardedBrowsingContext& aContext,
            const CallerType& aCallerType,
            const uint64_t& aActionId);

    bool
    SendClearFocus(const MaybeDiscardedBrowsingContext& aContext);

    bool
    SendSetFocusedBrowsingContext(const MaybeDiscardedBrowsingContext& aContext);

    bool
    SendSetActiveBrowsingContext(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint64_t& aActionId);

    bool
    SendUnsetActiveBrowsingContext(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint64_t& aActionId);

    bool
    SendSetFocusedElement(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aNeedsFocus);

    bool
    SendFinalizeFocusOuter(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aCanFocus,
            const CallerType& aCallerType);

    bool
    SendInsertNewFocusActionId(const uint64_t& aActionId);

    bool
    SendBlurToParent(
            const MaybeDiscardedBrowsingContext& aFocusedBrowsingContext,
            const MaybeDiscardedBrowsingContext& aBrowsingContextToClear,
            const MaybeDiscardedBrowsingContext& aAncestorBrowsingContextToFocus,
            const bool& aIsLeavingDocument,
            const bool& aAdjustWidget,
            const bool& aBrowsingContextToClearHandled,
            const bool& aAncestorBrowsingContextToFocusHandled,
            const uint64_t& aActionId);

    bool
    SendMaybeExitFullscreen(const MaybeDiscardedBrowsingContext& aContext);

    bool
    SendWindowPostMessage(
            const MaybeDiscardedBrowsingContext& aContext,
            const ClonedOrErrorMessageData& aMessage,
            const PostMessageData& aData);

    bool
    SendCommitWindowContextTransaction(
            const MaybeDiscardedWindowContext& aContext,
            const WindowContextTransaction& aTransaction,
            const uint64_t& aEpoch);

    bool
    SendFOGData(ByteBuf&& buf);

    bool
    SendSetContainerFeaturePolicy(
            const MaybeDiscardedBrowsingContext& aContainerContext,
            FeaturePolicy* aContainerFeaturePolicy);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PBrowserChild> mManagedPBrowserChild;
    ManagedContainer<PContentPermissionRequestChild> mManagedPContentPermissionRequestChild;
    ManagedContainer<PCycleCollectWithLogsChild> mManagedPCycleCollectWithLogsChild;
    ManagedContainer<PExternalHelperAppChild> mManagedPExternalHelperAppChild;
    ManagedContainer<PFileDescriptorSetChild> mManagedPFileDescriptorSetChild;
    ManagedContainer<PHalChild> mManagedPHalChild;
    ManagedContainer<PHandlerServiceChild> mManagedPHandlerServiceChild;
    ManagedContainer<PHeapSnapshotTempFileHelperChild> mManagedPHeapSnapshotTempFileHelperChild;
    ManagedContainer<PRemoteLazyInputStreamChild> mManagedPRemoteLazyInputStreamChild;
    ManagedContainer<PMediaChild> mManagedPMediaChild;
    ManagedContainer<PNeckoChild> mManagedPNeckoChild;
    ManagedContainer<POfflineCacheUpdateChild> mManagedPOfflineCacheUpdateChild;
    ManagedContainer<PPrintingChild> mManagedPPrintingChild;
    ManagedContainer<PChildToParentStreamChild> mManagedPChildToParentStreamChild;
    ManagedContainer<PParentToChildStreamChild> mManagedPParentToChildStreamChild;
    ManagedContainer<PSpeechSynthesisChild> mManagedPSpeechSynthesisChild;
    ManagedContainer<PTestShellChild> mManagedPTestShellChild;
    ManagedContainer<PRemoteSpellcheckEngineChild> mManagedPRemoteSpellcheckEngineChild;
    ManagedContainer<PWebBrowserPersistDocumentChild> mManagedPWebBrowserPersistDocumentChild;
    ManagedContainer<PWebrtcGlobalChild> mManagedPWebrtcGlobalChild;
    ManagedContainer<PPresentationChild> mManagedPPresentationChild;
    ManagedContainer<PURLClassifierChild> mManagedPURLClassifierChild;
    ManagedContainer<PURLClassifierLocalChild> mManagedPURLClassifierLocalChild;
    ManagedContainer<PScriptCacheChild> mManagedPScriptCacheChild;
    ManagedContainer<PLoginReputationChild> mManagedPLoginReputationChild;
    ManagedContainer<PSessionStorageObserverChild> mManagedPSessionStorageObserverChild;
    ManagedContainer<PBenchmarkStorageChild> mManagedPBenchmarkStorageChild;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PContentChild*>
{
    typedef mozilla::dom::PContentChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PContentChild_h
