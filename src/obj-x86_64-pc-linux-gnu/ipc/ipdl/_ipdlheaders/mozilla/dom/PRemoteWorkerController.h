//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PRemoteWorkerController_h
#define PRemoteWorkerController_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/RemoteWorkerTypes.h"
#include "mozilla/dom/ServiceWorkerOpArgs.h"

namespace mozilla {
namespace dom {
class PRemoteWorkerControllerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PRemoteWorkerControllerChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PRemoteWorkerControllerChild and PRemoteWorkerControllerParent
//
namespace mozilla {
namespace dom {
namespace PRemoteWorkerController {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PRemoteWorkerControllerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PRemoteWorkerControllerChild>* aChild);

enum MessageType {
    PRemoteWorkerControllerStart = PRemoteWorkerControllerMsgStart << 16,
    Msg_CreationFailed__ID,
    Msg_CreationSucceeded__ID,
    Msg_ErrorReceived__ID,
    Msg_Terminated__ID,
    Msg_SetServiceWorkerSkipWaitingFlag__ID,
    Reply_SetServiceWorkerSkipWaitingFlag__ID,
    Msg_PFetchEventOpConstructor__ID,
    Reply_PFetchEventOpConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Shutdown__ID,
    Reply_Shutdown__ID,
    Msg_ExecServiceWorkerOp__ID,
    Reply_ExecServiceWorkerOp__ID,
    PRemoteWorkerControllerEnd
};

IPC::Message*
Msg_CreationFailed(int32_t routingId);

IPC::Message*
Msg_CreationSucceeded(int32_t routingId);

IPC::Message*
Msg_ErrorReceived(int32_t routingId);

IPC::Message*
Msg_Terminated(int32_t routingId);

IPC::Message*
Msg_SetServiceWorkerSkipWaitingFlag(int32_t routingId);
IPC::Message*
Reply_SetServiceWorkerSkipWaitingFlag(int32_t routingId);

IPC::Message*
Msg_PFetchEventOpConstructor(int32_t routingId);
IPC::Message*
Reply_PFetchEventOpConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);
IPC::Message*
Reply_Shutdown(int32_t routingId);

IPC::Message*
Msg_ExecServiceWorkerOp(int32_t routingId);
IPC::Message*
Reply_ExecServiceWorkerOp(int32_t routingId);



} // namespace PRemoteWorkerController
} // namespace dom
} // namespace mozilla

#endif // ifndef PRemoteWorkerController_h
