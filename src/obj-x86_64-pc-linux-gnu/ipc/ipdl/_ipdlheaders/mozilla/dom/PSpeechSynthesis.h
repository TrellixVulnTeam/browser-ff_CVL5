//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSpeechSynthesis_h
#define PSpeechSynthesis_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct RemoteVoice|
//
namespace mozilla {
namespace dom {
class RemoteVoice final
{
private:

public:
    MOZ_IMPLICIT RemoteVoice() :
        voiceURI_(),
        name_(),
        lang_(),
        localService_(),
        queued_()
    {
    }

    MOZ_IMPLICIT RemoteVoice(
            const nsString& _voiceURI,
            const nsString& _name,
            const nsString& _lang,
            const bool& _localService,
            const bool& _queued) :
        voiceURI_(_voiceURI),
        name_(_name),
        lang_(_lang),
        localService_(_localService),
        queued_(_queued)
    {
    }

    nsString&
    voiceURI()
    {
        return voiceURI_;
    }
    const nsString&
    voiceURI() const
    {
        return voiceURI_;
    }

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

    nsString&
    lang()
    {
        return lang_;
    }
    const nsString&
    lang() const
    {
        return lang_;
    }

    bool&
    localService()
    {
        return localService_;
    }
    const bool&
    localService() const
    {
        return localService_;
    }

    bool&
    queued()
    {
        return queued_;
    }
    const bool&
    queued() const
    {
        return queued_;
    }

private:
    nsString voiceURI_;
    nsString name_;
    nsString lang_;
    bool localService_;
    bool queued_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::RemoteVoice>
{
    typedef mozilla::dom::RemoteVoice paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSpeechSynthesisParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSpeechSynthesisChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PSpeechSynthesisChild and PSpeechSynthesisParent
//
namespace mozilla {
namespace dom {
namespace PSpeechSynthesis {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PSpeechSynthesisParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PSpeechSynthesisChild>* aChild);

enum MessageType {
    PSpeechSynthesisStart = PSpeechSynthesisMsgStart << 16,
    Msg_VoiceAdded__ID,
    Msg_VoiceRemoved__ID,
    Msg_SetDefaultVoice__ID,
    Msg_IsSpeakingChanged__ID,
    Msg_NotifyVoicesChanged__ID,
    Msg_InitialVoicesAndState__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PSpeechSynthesisRequestConstructor__ID,
    Reply_PSpeechSynthesisRequestConstructor__ID,
    PSpeechSynthesisEnd
};

IPC::Message*
Msg_VoiceAdded(int32_t routingId);

IPC::Message*
Msg_VoiceRemoved(int32_t routingId);

IPC::Message*
Msg_SetDefaultVoice(int32_t routingId);

IPC::Message*
Msg_IsSpeakingChanged(int32_t routingId);

IPC::Message*
Msg_NotifyVoicesChanged(int32_t routingId);

IPC::Message*
Msg_InitialVoicesAndState(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_PSpeechSynthesisRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PSpeechSynthesisRequestConstructor(int32_t routingId);



} // namespace PSpeechSynthesis
} // namespace dom
} // namespace mozilla

#endif // ifndef PSpeechSynthesis_h
