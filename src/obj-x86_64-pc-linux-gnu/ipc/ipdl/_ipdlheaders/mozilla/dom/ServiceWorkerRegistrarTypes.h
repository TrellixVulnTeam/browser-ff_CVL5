//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef ServiceWorkerRegistrarTypes_h
#define ServiceWorkerRegistrarTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ServiceWorkerRegistrationData|
//
namespace mozilla {
namespace dom {
class ServiceWorkerRegistrationData final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT ServiceWorkerRegistrationData() :
        scope_(),
        currentWorkerURL_(),
        currentWorkerHandlesFetch_(),
        cacheName_(),
        principal_(),
        currentWorkerInstalledTime_(),
        currentWorkerActivatedTime_(),
        lastUpdateTime_(),
        updateViaCache_()
    {
    }

    MOZ_IMPLICIT ServiceWorkerRegistrationData(
            const nsCString& _scope,
            const nsCString& _currentWorkerURL,
            const bool& _currentWorkerHandlesFetch,
            const nsString& _cacheName,
            const PrincipalInfo& _principal,
            const uint16_t& _updateViaCache,
            const int64_t& _currentWorkerInstalledTime,
            const int64_t& _currentWorkerActivatedTime,
            const int64_t& _lastUpdateTime) :
        scope_(_scope),
        currentWorkerURL_(_currentWorkerURL),
        currentWorkerHandlesFetch_(_currentWorkerHandlesFetch),
        cacheName_(_cacheName),
        principal_(_principal),
        currentWorkerInstalledTime_(_currentWorkerInstalledTime),
        currentWorkerActivatedTime_(_currentWorkerActivatedTime),
        lastUpdateTime_(_lastUpdateTime),
        updateViaCache_(_updateViaCache)
    {
    }

    nsCString&
    scope()
    {
        return scope_;
    }
    const nsCString&
    scope() const
    {
        return scope_;
    }

    nsCString&
    currentWorkerURL()
    {
        return currentWorkerURL_;
    }
    const nsCString&
    currentWorkerURL() const
    {
        return currentWorkerURL_;
    }

    bool&
    currentWorkerHandlesFetch()
    {
        return currentWorkerHandlesFetch_;
    }
    const bool&
    currentWorkerHandlesFetch() const
    {
        return currentWorkerHandlesFetch_;
    }

    nsString&
    cacheName()
    {
        return cacheName_;
    }
    const nsString&
    cacheName() const
    {
        return cacheName_;
    }

    PrincipalInfo&
    principal()
    {
        return principal_;
    }
    const PrincipalInfo&
    principal() const
    {
        return principal_;
    }

    uint16_t&
    updateViaCache()
    {
        return updateViaCache_;
    }
    const uint16_t&
    updateViaCache() const
    {
        return updateViaCache_;
    }

    int64_t&
    currentWorkerInstalledTime()
    {
        return currentWorkerInstalledTime_;
    }
    const int64_t&
    currentWorkerInstalledTime() const
    {
        return currentWorkerInstalledTime_;
    }

    int64_t&
    currentWorkerActivatedTime()
    {
        return currentWorkerActivatedTime_;
    }
    const int64_t&
    currentWorkerActivatedTime() const
    {
        return currentWorkerActivatedTime_;
    }

    int64_t&
    lastUpdateTime()
    {
        return lastUpdateTime_;
    }
    const int64_t&
    lastUpdateTime() const
    {
        return lastUpdateTime_;
    }

private:
    void
    StaticAssertions() const;
    nsCString scope_;
    nsCString currentWorkerURL_;
    bool currentWorkerHandlesFetch_;
    nsString cacheName_;
    PrincipalInfo principal_;
    int64_t currentWorkerInstalledTime_;
    int64_t currentWorkerActivatedTime_;
    int64_t lastUpdateTime_;
    uint16_t updateViaCache_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::ServiceWorkerRegistrationData>
{
    typedef mozilla::dom::ServiceWorkerRegistrationData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef ServiceWorkerRegistrarTypes_h
