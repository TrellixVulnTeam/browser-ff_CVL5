//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundMutableFileParent_h
#define PBackgroundMutableFileParent_h

#include "mozilla/dom/PBackgroundMutableFile.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/FileModeBinding.h"

namespace mozilla {
namespace dom {
class PBackgroundFileHandleParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundFileHandleChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBTransactionParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBCursorParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBRequestParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBVersionChangeTransactionParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseRequestParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundFileHandleParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PBackgroundMutableFileParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::indexedDB::PBackgroundIDBTransactionParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBCursorParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBRequestParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBVersionChangeTransactionParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent;
    friend class mozilla::dom::indexedDB::PBackgroundIDBDatabaseRequestParent;
    friend class mozilla::dom::PBackgroundFileHandleParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::FileMode FileMode;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::PBackgroundFileHandleParent PBackgroundFileHandleParent;
    typedef mozilla::dom::PBackgroundFileHandleChild PBackgroundFileHandleChild;
    typedef mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent PBackgroundIDBDatabaseParent;
    typedef mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild PBackgroundIDBDatabaseChild;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPBackgroundFileHandleConstructor(
            PBackgroundFileHandleParent* actor,
            const FileMode& mode);
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBackgroundMutableFileParent();

    virtual ~PBackgroundMutableFileParent();

public:
    PBackgroundIDBDatabaseParent*
    Manager() const;

    void
    ManagedPBackgroundFileHandleParent(nsTArray<PBackgroundFileHandleParent*>& aArr) const;
    const ManagedContainer<PBackgroundFileHandleParent>&
    ManagedPBackgroundFileHandleParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PBackgroundFileHandleChild>
    OpenPBackgroundFileHandleEndpoint(PBackgroundFileHandleParent* aActor);
    bool
    BindPBackgroundFileHandleEndpoint(
            ManagedEndpoint<PBackgroundFileHandleParent> aEndpoint,
            PBackgroundFileHandleParent* aActor);

    [[nodiscard]] static bool
    Send__delete__(PBackgroundMutableFileParent* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PBackgroundFileHandleParent> mManagedPBackgroundFileHandleParent;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PBackgroundMutableFileParent*>
{
    typedef mozilla::dom::PBackgroundMutableFileParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundMutableFileParent_h
