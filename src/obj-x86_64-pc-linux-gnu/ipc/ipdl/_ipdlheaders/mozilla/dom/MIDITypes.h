//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef MIDITypes_h
#define MIDITypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/TimeStamp.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct MIDIPortInfo|
//
namespace mozilla {
namespace dom {
class MIDIPortInfo final
{
private:

public:
    MOZ_IMPLICIT MIDIPortInfo() :
        id_(),
        name_(),
        manufacturer_(),
        version_(),
        type_()
    {
    }

    MOZ_IMPLICIT MIDIPortInfo(
            const nsString& _id,
            const nsString& _name,
            const nsString& _manufacturer,
            const nsString& _version,
            const uint32_t& _type) :
        id_(_id),
        name_(_name),
        manufacturer_(_manufacturer),
        version_(_version),
        type_(_type)
    {
    }

    bool
    operator==(const MIDIPortInfo& _o) const;

    bool
    operator!=(const MIDIPortInfo& _o) const;

    nsString&
    id()
    {
        return id_;
    }
    const nsString&
    id() const
    {
        return id_;
    }

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

    nsString&
    manufacturer()
    {
        return manufacturer_;
    }
    const nsString&
    manufacturer() const
    {
        return manufacturer_;
    }

    nsString&
    version()
    {
        return version_;
    }
    const nsString&
    version() const
    {
        return version_;
    }

    uint32_t&
    type()
    {
        return type_;
    }
    const uint32_t&
    type() const
    {
        return type_;
    }

private:
    nsString id_;
    nsString name_;
    nsString manufacturer_;
    nsString version_;
    uint32_t type_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::MIDIPortInfo>
{
    typedef mozilla::dom::MIDIPortInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct MIDIMessage|
//
namespace mozilla {
namespace dom {
class MIDIMessage final
{
private:
    typedef mozilla::TimeStamp TimeStamp;

public:
    MOZ_IMPLICIT MIDIMessage() :
        data_(),
        timestamp_()
    {
    }

    MOZ_IMPLICIT MIDIMessage(
            const nsTArray<uint8_t>& _data,
            const TimeStamp& _timestamp) :
        data_(_data),
        timestamp_(_timestamp)
    {
    }

    nsTArray<uint8_t>&
    data()
    {
        return data_;
    }
    const nsTArray<uint8_t>&
    data() const
    {
        return data_;
    }

    TimeStamp&
    timestamp()
    {
        return timestamp_;
    }
    const TimeStamp&
    timestamp() const
    {
        return timestamp_;
    }

private:
    CopyableTArray<uint8_t> data_;
    TimeStamp timestamp_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::MIDIMessage>
{
    typedef mozilla::dom::MIDIMessage paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct MIDIPortList|
//
namespace mozilla {
namespace dom {
class MIDIPortList final
{
private:
    typedef mozilla::dom::MIDIPortInfo MIDIPortInfo;

public:
    MOZ_IMPLICIT MIDIPortList() :
        ports_()
    {
    }

    MOZ_IMPLICIT MIDIPortList(const nsTArray<MIDIPortInfo>& _ports) :
        ports_(_ports)
    {
    }

    nsTArray<MIDIPortInfo>&
    ports()
    {
        return ports_;
    }
    const nsTArray<MIDIPortInfo>&
    ports() const
    {
        return ports_;
    }

private:
    CopyableTArray<MIDIPortInfo> ports_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::MIDIPortList>
{
    typedef mozilla::dom::MIDIPortList paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef MIDITypes_h
