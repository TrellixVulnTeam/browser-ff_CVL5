//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PServiceWorkerContainer_h
#define PServiceWorkerContainer_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/ClientIPCTypes.h"
#include "mozilla/dom/IPCServiceWorkerRegistrationDescriptor.h"

namespace mozilla {
namespace dom {
class PServiceWorkerContainerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerContainerChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PServiceWorkerContainerChild and PServiceWorkerContainerParent
//
namespace mozilla {
namespace dom {
namespace PServiceWorkerContainer {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PServiceWorkerContainerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PServiceWorkerContainerChild>* aChild);

enum MessageType {
    PServiceWorkerContainerStart = PServiceWorkerContainerMsgStart << 16,
    Msg_Teardown__ID,
    Msg_Register__ID,
    Reply_Register__ID,
    Msg_GetRegistration__ID,
    Reply_GetRegistration__ID,
    Msg_GetRegistrations__ID,
    Reply_GetRegistrations__ID,
    Msg_GetReady__ID,
    Reply_GetReady__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PServiceWorkerContainerEnd
};

IPC::Message*
Msg_Teardown(int32_t routingId);

IPC::Message*
Msg_Register(int32_t routingId);
IPC::Message*
Reply_Register(int32_t routingId);

IPC::Message*
Msg_GetRegistration(int32_t routingId);
IPC::Message*
Reply_GetRegistration(int32_t routingId);

IPC::Message*
Msg_GetRegistrations(int32_t routingId);
IPC::Message*
Reply_GetRegistrations(int32_t routingId);

IPC::Message*
Msg_GetReady(int32_t routingId);
IPC::Message*
Reply_GetReady(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PServiceWorkerContainer
} // namespace dom
} // namespace mozilla

#endif // ifndef PServiceWorkerContainer_h
