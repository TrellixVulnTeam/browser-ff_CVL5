//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHandlerServiceParent_h
#define PHandlerServiceParent_h

#include "mozilla/dom/PHandlerService.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PHandlerServiceParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PContentParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::HandlerApp HandlerApp;
    typedef mozilla::dom::HandlerInfo HandlerInfo;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;

protected:
    virtual mozilla::ipc::IPCResult
    RecvFillHandlerInfo(
            const HandlerInfo& aHandlerInfoData,
            const nsCString& aOverrideType,
            HandlerInfo* handlerInfoData) = 0;
    virtual mozilla::ipc::IPCResult
    RecvExistsForProtocolOS(
            const nsCString& aProtocolScheme,
            bool* exists) = 0;
    virtual mozilla::ipc::IPCResult
    RecvExistsForProtocol(
            const nsCString& aProtocolScheme,
            bool* exists) = 0;
    virtual mozilla::ipc::IPCResult
    RecvExists(
            const HandlerInfo& aHandlerInfo,
            bool* exists) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetTypeFromExtension(
            const nsCString& aFileExtension,
            nsCString* type) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetMIMEInfoFromOS(
            const nsCString& aMIMEType,
            const nsCString& aExtension,
            nsresult* rv,
            HandlerInfo* handlerInfoData,
            bool* found) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetApplicationDescription(
            const nsCString& aScheme,
            nsresult* rv,
            nsString* description) = 0;
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PHandlerServiceParent();

    virtual ~PHandlerServiceParent();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PContentParent*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PHandlerServiceParent*>
{
    typedef mozilla::dom::PHandlerServiceParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PHandlerServiceParent_h
