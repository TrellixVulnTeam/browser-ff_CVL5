//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBrowserParent_h
#define PBrowserParent_h

#include "mozilla/dom/PBrowser.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "Units.h"
#include "mozilla/AspectRatio.h"
#include "mozilla/ContentBlockingNotifier.h"
#include "mozilla/EventForwards.h"
#include "mozilla/PresShellForwards.h"
#include "mozilla/a11y/IPCTypes.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/EffectsInfo.h"
#include "mozilla/dom/TabMessageTypes.h"
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/gfx/Matrix.h"
#include "mozilla/gfx/Point.h"
#include "mozilla/gfx/Types.h"
#include "mozilla/ipc/BackgroundUtils.h"
#include "mozilla/ipc/IPCTypes.h"
#include "mozilla/layers/CompositorOptions.h"
#include "mozilla/layers/GeckoContentControllerTypes.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "mozilla/layers/ZoomConstraints.h"
#include "nsIFrame.h"
#include "nsIWidget.h"

namespace mozilla {
namespace dom {
class PColorPickerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PColorPickerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessibleParent;
} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace a11y {
class PDocAccessibleChild;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFilePickerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PFilePickerChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginWidgetParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginWidgetChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRemotePrintJobParent;
} // namespace layout
} // namespace mozilla
namespace mozilla {
namespace layout {
class PRemotePrintJobChild;
} // namespace layout
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPaymentRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PPaymentRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWindowGlobalChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserBridgeParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserBridgeChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PVsyncParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PVsyncChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserBridgeParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PVsyncParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginWidgetParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {
class PHalParent;
} // namespace hal_sandbox
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PColorPickerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFilePickerParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessibleParent;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPaymentRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintingParent;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace layers {
struct ScrollableLayerGuid;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
struct ZoomConstraints;
} // namespace layers
} // namespace mozilla

namespace mozilla {
struct void_t;
} // namespace mozilla

namespace mozilla {
class WidgetCompositionEvent;
} // namespace mozilla

namespace mozilla {
namespace widget {
struct IMENotification;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace widget {
struct IMENotificationRequests;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace widget {
struct IMEState;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace widget {
struct InputContext;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace widget {
struct InputContextAction;
} // namespace widget
} // namespace mozilla

namespace mozilla {
class ContentCache;
} // namespace mozilla

namespace mozilla {
class WidgetKeyboardEvent;
} // namespace mozilla

namespace mozilla {
class WidgetMouseEvent;
} // namespace mozilla

namespace mozilla {
class WidgetWheelEvent;
} // namespace mozilla

namespace mozilla {
class WidgetDragEvent;
} // namespace mozilla

struct nsRect;

namespace mozilla {
class WidgetSelectionEvent;
} // namespace mozilla

namespace mozilla {
class WidgetTouchEvent;
} // namespace mozilla

namespace mozilla {
namespace dom {
struct RemoteDOMEvent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
struct TextureFactoryIdentifier;
} // namespace layers
} // namespace mozilla

struct LookAndFeelInt;

namespace mozilla {
namespace dom {
class MessagePort;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace ipc {
class StructuredCloneData;
} // namespace ipc
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace widget {
struct CandidateWindowPosition;
} // namespace widget
} // namespace mozilla

namespace mozilla {
class NativeEventData;
} // namespace mozilla

namespace mozilla {
struct FontRange;
} // namespace mozilla

struct InputFormData;

struct CollectedInputDataValue;

class nsDocShellLoadState;

namespace mozilla {
namespace dom {


class PBrowserParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PBrowserBridgeParent;
    friend class mozilla::dom::PVsyncParent;
    friend class mozilla::plugins::PPluginWidgetParent;
    friend class mozilla::net::PNeckoParent;
    friend class mozilla::hal_sandbox::PHalParent;
    friend class mozilla::dom::PContentParent;
    friend class mozilla::dom::PColorPickerParent;
    friend class mozilla::dom::PFilePickerParent;
    friend class mozilla::a11y::PDocAccessibleParent;
    friend class mozilla::dom::PPaymentRequestParent;
    friend class mozilla::dom::PWindowGlobalParent;
    friend class mozilla::embedding::PPrintingParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::AspectRatio AspectRatio;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::CSSToScreenScale CSSToScreenScale;
    typedef mozilla::embedding::CStringKeyValue CStringKeyValue;
    typedef mozilla::widget::CandidateWindowPosition CandidateWindowPosition;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::CommandInt CommandInt;
    typedef mozilla::layers::CompositorOptions CompositorOptions;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::ContentCache ContentCache;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::dom::EffectsInfo EffectsInfo;
    typedef mozilla::dom::EmbedderElementEventType EmbedderElementEventType;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::EventMessage EventMessage;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::FontRange FontRange;
    typedef mozilla::dom::FrameIPCTabContext FrameIPCTabContext;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::layers::GeckoContentController_TapType GeckoContentController_TapType;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::a11y::IAccessibleHolder IAccessibleHolder;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::widget::IMENotification IMENotification;
    typedef mozilla::widget::IMENotificationRequests IMENotificationRequests;
    typedef mozilla::widget::IMEState IMEState;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPCTabContext IPCTabContext;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::widget::InputContext InputContext;
    typedef mozilla::widget::InputContextAction InputContextAction;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::gfx::IntPoint IntPoint;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::IntrinsicSize IntrinsicSize;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::dom::JSPluginFrameIPCTabContext JSPluginFrameIPCTabContext;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::layers::LayersId LayersId;
    typedef mozilla::layers::LayersObserverEpoch LayersObserverEpoch;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::LayoutDevicePoint LayoutDevicePoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::gfx::Matrix4x4 Matrix4x4;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::gfx::MaybeMatrix4x4 MaybeMatrix4x4;
    typedef mozilla::layers::MaybeZoomConstraints MaybeZoomConstraints;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePort MessagePort;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::Modifiers Modifiers;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::NativeEventData NativeEventData;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::dom::PopupIPCTabContext PopupIPCTabContext;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef mozilla::embedding::PrintData PrintData;
    typedef mozilla::dom::PrintPreviewResultInfo PrintPreviewResultInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::dom::RemoteDOMEvent RemoteDOMEvent;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::dom::RequestData RequestData;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef mozilla::ScreenIntCoord ScreenIntCoord;
    typedef mozilla::ScreenIntMargin ScreenIntMargin;
    typedef mozilla::ScreenIntPoint ScreenIntPoint;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::ScrollAxis ScrollAxis;
    typedef mozilla::ScrollFlags ScrollFlags;
    typedef mozilla::layers::ScrollableLayerGuid ScrollableLayerGuid;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ContentBlockingNotifier::StorageAccessPermissionGrantedReason StorageAccessPermissionGrantedReason;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::dom::ipc::StructuredCloneData StructuredCloneData;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::layers::TextureFactoryIdentifier TextureFactoryIdentifier;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef nsIWidget::TouchPointerState TouchPointerState;
    typedef nsIWidget::TouchpadPinchPhase TouchpadPinchPhase;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef ScrollableLayerGuid::ViewID ViewID;
    typedef mozilla::dom::WebProgressData WebProgressData;
    typedef mozilla::dom::WebProgressLocationChangeData WebProgressLocationChangeData;
    typedef mozilla::dom::WebProgressStateChangeData WebProgressStateChangeData;
    typedef mozilla::WidgetCompositionEvent WidgetCompositionEvent;
    typedef mozilla::WidgetDragEvent WidgetDragEvent;
    typedef mozilla::WidgetKeyboardEvent WidgetKeyboardEvent;
    typedef mozilla::WidgetMouseEvent WidgetMouseEvent;
    typedef mozilla::WidgetSelectionEvent WidgetSelectionEvent;
    typedef mozilla::WidgetTouchEvent WidgetTouchEvent;
    typedef mozilla::WidgetWheelEvent WidgetWheelEvent;
    typedef mozilla::dom::WindowContextInitializer WindowContextInitializer;
    typedef mozilla::dom::WindowGlobalInit WindowGlobalInit;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::ZoomConstraints ZoomConstraints;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PColorPickerParent PColorPickerParent;
    typedef mozilla::dom::PColorPickerChild PColorPickerChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::a11y::PDocAccessibleParent PDocAccessibleParent;
    typedef mozilla::a11y::PDocAccessibleChild PDocAccessibleChild;
    typedef mozilla::dom::PFilePickerParent PFilePickerParent;
    typedef mozilla::dom::PFilePickerChild PFilePickerChild;
    typedef mozilla::plugins::PPluginWidgetParent PPluginWidgetParent;
    typedef mozilla::plugins::PPluginWidgetChild PPluginWidgetChild;
    typedef mozilla::layout::PRemotePrintJobParent PRemotePrintJobParent;
    typedef mozilla::layout::PRemotePrintJobChild PRemotePrintJobChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;
    typedef mozilla::dom::PPaymentRequestParent PPaymentRequestParent;
    typedef mozilla::dom::PPaymentRequestChild PPaymentRequestChild;
    typedef mozilla::dom::PWindowGlobalParent PWindowGlobalParent;
    typedef mozilla::dom::PWindowGlobalChild PWindowGlobalChild;
    typedef mozilla::dom::PBrowserBridgeParent PBrowserBridgeParent;
    typedef mozilla::dom::PBrowserBridgeChild PBrowserBridgeChild;
    typedef mozilla::dom::PVsyncParent PVsyncParent;
    typedef mozilla::dom::PVsyncChild PVsyncChild;

public:
    typedef std::function<void(const IMENotificationRequests&)> NotifyIMEFocusResolver;
    typedef std::function<void(const uint32_t&)> IndexedDBPermissionRequestResolver;
    typedef std::function<void(const nsCString&)> RequestPointerLockResolver;
    typedef std::function<void(const bool&)> RequestPointerCaptureResolver;
    typedef MozPromise<PrintPreviewResultInfo, ResponseRejectReason, true> PrintPreviewPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> WillChangeProcessPromise;
    typedef std::function<void(const bool&)> IsWindowSupportingProtectedMediaResolver;
    typedef std::function<void(const bool&)> IsWindowSupportingWebVRResolver;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPDocAccessibleConstructor(
            PDocAccessibleParent* actor,
            PDocAccessibleParent* aParentDoc,
            const uint64_t& aParentAcc,
            const uint32_t& aMsaaID,
            const IAccessibleHolder& aDocCOMProxy);
    virtual mozilla::ipc::IPCResult
    RecvPPluginWidgetConstructor(PPluginWidgetParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPPaymentRequestConstructor(PPaymentRequestParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPVsyncConstructor(PVsyncParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPColorPickerConstructor(
            PColorPickerParent* actor,
            const nsString& title,
            const nsString& initialColor);
    virtual mozilla::ipc::IPCResult
    RecvPFilePickerConstructor(
            PFilePickerParent* actor,
            const nsString& aTitle,
            const int16_t& aMode);
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBrowserParent();

    virtual ~PBrowserParent();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PContentParent*
    Manager() const;

    void
    ManagedPColorPickerParent(nsTArray<PColorPickerParent*>& aArr) const;
    const ManagedContainer<PColorPickerParent>&
    ManagedPColorPickerParent() const;

    void
    ManagedPDocAccessibleParent(nsTArray<PDocAccessibleParent*>& aArr) const;
    const ManagedContainer<PDocAccessibleParent>&
    ManagedPDocAccessibleParent() const;

    void
    ManagedPFilePickerParent(nsTArray<PFilePickerParent*>& aArr) const;
    const ManagedContainer<PFilePickerParent>&
    ManagedPFilePickerParent() const;

    void
    ManagedPPluginWidgetParent(nsTArray<PPluginWidgetParent*>& aArr) const;
    const ManagedContainer<PPluginWidgetParent>&
    ManagedPPluginWidgetParent() const;

    void
    ManagedPPaymentRequestParent(nsTArray<PPaymentRequestParent*>& aArr) const;
    const ManagedContainer<PPaymentRequestParent>&
    ManagedPPaymentRequestParent() const;

    void
    ManagedPWindowGlobalParent(nsTArray<PWindowGlobalParent*>& aArr) const;
    const ManagedContainer<PWindowGlobalParent>&
    ManagedPWindowGlobalParent() const;

    void
    ManagedPBrowserBridgeParent(nsTArray<PBrowserBridgeParent*>& aArr) const;
    const ManagedContainer<PBrowserBridgeParent>&
    ManagedPBrowserBridgeParent() const;

    void
    ManagedPVsyncParent(nsTArray<PVsyncParent*>& aArr) const;
    const ManagedContainer<PVsyncParent>&
    ManagedPVsyncParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PColorPickerChild>
    OpenPColorPickerEndpoint(PColorPickerParent* aActor);
    bool
    BindPColorPickerEndpoint(
            ManagedEndpoint<PColorPickerParent> aEndpoint,
            PColorPickerParent* aActor);

    ManagedEndpoint<PDocAccessibleChild>
    OpenPDocAccessibleEndpoint(PDocAccessibleParent* aActor);
    bool
    BindPDocAccessibleEndpoint(
            ManagedEndpoint<PDocAccessibleParent> aEndpoint,
            PDocAccessibleParent* aActor);

    ManagedEndpoint<PFilePickerChild>
    OpenPFilePickerEndpoint(PFilePickerParent* aActor);
    bool
    BindPFilePickerEndpoint(
            ManagedEndpoint<PFilePickerParent> aEndpoint,
            PFilePickerParent* aActor);

    ManagedEndpoint<PPluginWidgetChild>
    OpenPPluginWidgetEndpoint(PPluginWidgetParent* aActor);
    bool
    BindPPluginWidgetEndpoint(
            ManagedEndpoint<PPluginWidgetParent> aEndpoint,
            PPluginWidgetParent* aActor);

    ManagedEndpoint<PPaymentRequestChild>
    OpenPPaymentRequestEndpoint(PPaymentRequestParent* aActor);
    bool
    BindPPaymentRequestEndpoint(
            ManagedEndpoint<PPaymentRequestParent> aEndpoint,
            PPaymentRequestParent* aActor);

    ManagedEndpoint<PWindowGlobalChild>
    OpenPWindowGlobalEndpoint(PWindowGlobalParent* aActor);
    bool
    BindPWindowGlobalEndpoint(
            ManagedEndpoint<PWindowGlobalParent> aEndpoint,
            PWindowGlobalParent* aActor);

    ManagedEndpoint<PBrowserBridgeChild>
    OpenPBrowserBridgeEndpoint(PBrowserBridgeParent* aActor);
    bool
    BindPBrowserBridgeEndpoint(
            ManagedEndpoint<PBrowserBridgeParent> aEndpoint,
            PBrowserBridgeParent* aActor);

    ManagedEndpoint<PVsyncChild>
    OpenPVsyncEndpoint(PVsyncParent* aActor);
    bool
    BindPVsyncEndpoint(
            ManagedEndpoint<PVsyncParent> aEndpoint,
            PVsyncParent* aActor);

    [[nodiscard]] bool
    SendAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData);

    [[nodiscard]] bool
    SendNativeSynthesisResponse(
            const uint64_t& aObserverId,
            const nsCString& aResponse);

    [[nodiscard]] bool
    SendFlushTabState(
            const uint32_t& aFlushId,
            const bool& aIsFinal);

    [[nodiscard]] bool
    SendUpdateEpoch(const uint32_t& aEpoch);

    [[nodiscard]] bool
    SendUpdateSHistory(const bool& aImmediately);

    [[nodiscard]] bool
    SendCloneDocumentTreeIntoSelf(const MaybeDiscardedBrowsingContext& aBc);

    [[nodiscard]] bool
    SendReleaseAllPointerCapture();

    [[nodiscard]] bool
    SendUpdateEffects(const EffectsInfo& aEffects);

    [[nodiscard]] bool
    SendShow(
            const ParentShowInfo& parentInfo,
            const OwnerShowInfo& childInfo);

    [[nodiscard]] bool
    SendActivate(const uint64_t& aActionId);

    [[nodiscard]] bool
    SendDeactivate(const uint64_t& aActionId);

    [[nodiscard]] bool
    SendScrollbarPreferenceChanged(const ScrollbarPreference& pref);

    [[nodiscard]] bool
    SendInitRendering(
            const TextureFactoryIdentifier& textureFactoryIdentifier,
            const LayersId& layersId,
            const CompositorOptions& compositorOptions,
            const bool& layersConnected);

    [[nodiscard]] bool
    SendCompositorOptionsChanged(const CompositorOptions& newOptions);

    [[nodiscard]] bool
    SendLoadURL(
            nsDocShellLoadState* loadState,
            const ParentShowInfo& info);

    [[nodiscard]] bool
    SendResumeLoad(
            const uint64_t& pendingSwitchID,
            const ParentShowInfo& info);

    [[nodiscard]] bool
    SendUpdateDimensions(const DimensionInfo& dimensions);

    [[nodiscard]] bool
    SendSizeModeChanged(const nsSizeMode& sizeMode);

    [[nodiscard]] bool
    SendChildToParentMatrix(
            const MaybeMatrix4x4& aMatrix,
            const ScreenRect& aRemoteDocumentRect);

    [[nodiscard]] bool
    SendSetIsUnderHiddenEmbedderElement(const bool& aIsUnderHiddenEmbedderElement);

    [[nodiscard]] bool
    SendDynamicToolbarMaxHeightChanged(const ScreenIntCoord& height);

    [[nodiscard]] bool
    SendDynamicToolbarOffsetChanged(const ScreenIntCoord& height);

    [[nodiscard]] bool
    SendSetKeyboardIndicators(const UIStateChangeType& showFocusRings);

    [[nodiscard]] bool
    SendStopIMEStateManagement();

    [[nodiscard]] bool
    SendMouseEvent(
            const nsString& aType,
            const float& aX,
            const float& aY,
            const int32_t& aButton,
            const int32_t& aClickCount,
            const int32_t& aModifiers);

    [[nodiscard]] bool
    SendRealMouseMoveEvent(
            const WidgetMouseEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendNormalPriorityRealMouseMoveEvent(
            const WidgetMouseEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendRealMouseMoveEventForTests(
            const WidgetMouseEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendNormalPriorityRealMouseMoveEventForTests(
            const WidgetMouseEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendSynthMouseMoveEvent(
            const WidgetMouseEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendNormalPrioritySynthMouseMoveEvent(
            const WidgetMouseEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendRealMouseButtonEvent(
            const WidgetMouseEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendNormalPriorityRealMouseButtonEvent(
            const WidgetMouseEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendRealKeyEvent(const WidgetKeyboardEvent& event);

    [[nodiscard]] bool
    SendNormalPriorityRealKeyEvent(const WidgetKeyboardEvent& event);

    [[nodiscard]] bool
    SendMouseWheelEvent(
            const WidgetWheelEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendNormalPriorityMouseWheelEvent(
            const WidgetWheelEvent& event,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendRealTouchEvent(
            const WidgetTouchEvent& aEvent,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId,
            const nsEventStatus& aApzResponse);

    [[nodiscard]] bool
    SendNormalPriorityRealTouchEvent(
            const WidgetTouchEvent& aEvent,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId,
            const nsEventStatus& aApzResponse);

    [[nodiscard]] bool
    SendHandleTap(
            const GeckoContentController_TapType& aType,
            const LayoutDevicePoint& point,
            const Modifiers& aModifiers,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendNormalPriorityHandleTap(
            const GeckoContentController_TapType& aType,
            const LayoutDevicePoint& point,
            const Modifiers& aModifiers,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendRealTouchMoveEvent(
            const WidgetTouchEvent& aEvent,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId,
            const nsEventStatus& aApzResponse);

    [[nodiscard]] bool
    SendNormalPriorityRealTouchMoveEvent(
            const WidgetTouchEvent& aEvent,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId,
            const nsEventStatus& aApzResponse);

    [[nodiscard]] bool
    SendRealTouchMoveEvent2(
            const WidgetTouchEvent& aEvent,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId,
            const nsEventStatus& aApzResponse);

    [[nodiscard]] bool
    SendNormalPriorityRealTouchMoveEvent2(
            const WidgetTouchEvent& aEvent,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId,
            const nsEventStatus& aApzResponse);

    [[nodiscard]] bool
    SendRealDragEvent(
            const WidgetDragEvent& aEvent,
            const uint32_t& aDragAction,
            const uint32_t& aDropEffect,
            nsIPrincipal* aPrincipal,
            nsIContentSecurityPolicy* csp);

    [[nodiscard]] bool
    SendCompositionEvent(const WidgetCompositionEvent& event);

    [[nodiscard]] bool
    SendNormalPriorityCompositionEvent(const WidgetCompositionEvent& event);

    [[nodiscard]] bool
    SendSelectionEvent(const WidgetSelectionEvent& event);

    [[nodiscard]] bool
    SendNormalPrioritySelectionEvent(const WidgetSelectionEvent& event);

    [[nodiscard]] bool
    SendPasteTransferable(
            const IPCDataTransfer& aDataTransfer,
            const bool& aIsPrivateData,
            nsIPrincipal* aRequestingPrincipal,
            const nsContentPolicyType& aContentPolicyType);

    [[nodiscard]] bool
    SendActivateFrameEvent(
            const nsString& aType,
            const bool& capture);

    [[nodiscard]] bool
    SendLoadRemoteScript(
            const nsString& aURL,
            const bool& aRunInGlobalScope);

    [[nodiscard]] bool
    SendDestroy();

    [[nodiscard]] bool
    SendRenderLayers(
            const bool& aEnabled,
            const LayersObserverEpoch& aEpoch);

    [[nodiscard]] bool
    SendSuppressDisplayport(const bool& aEnabled);

    [[nodiscard]] bool
    SendNavigateByKey(
            const bool& aForward,
            const bool& aForDocumentNavigation);

    [[nodiscard]] bool
    SendRequestNotifyAfterRemotePaint();

    [[nodiscard]] bool
    SendUIResolutionChanged(
            const float& dpi,
            const int32_t& rounding,
            const double& scale);

    [[nodiscard]] bool
    SendSafeAreaInsetsChanged(const ScreenIntMargin& aSafeAreaInsets);

    [[nodiscard]] bool
    SendSwappedWithOtherRemoteLoader(const IPCTabContext& context);

    [[nodiscard]] bool
    SendHandleAccessKey(
            const WidgetKeyboardEvent& event,
            const nsTArray<uint32_t>& charCodes);

    void
    SendPrintPreview(
            const PrintData& aPrintData,
            const mozilla::Maybe<uint64_t>& aSourceOuterWindowID,
            mozilla::ipc::ResolveCallback<PrintPreviewResultInfo>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<PrintPreviewPromise>
    SendPrintPreview(
            const PrintData& aPrintData,
            const mozilla::Maybe<uint64_t>& aSourceOuterWindowID);

    [[nodiscard]] bool
    SendExitPrintPreview();

    [[nodiscard]] bool
    SendPrint(
            const uint64_t& aOuterWindowID,
            const PrintData& aPrintData);

    [[nodiscard]] bool
    SendUpdateNativeWindowHandle(const uintptr_t& aNewHandle);

    [[nodiscard]] bool
    SendAllowScriptsToClose();

    [[nodiscard]] bool
    SendSetWidgetNativeData(const WindowsHandle& aHandle);

    void
    SendWillChangeProcess(
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<WillChangeProcessPromise>
    SendWillChangeProcess();

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PColorPickerParent> mManagedPColorPickerParent;
    ManagedContainer<PDocAccessibleParent> mManagedPDocAccessibleParent;
    ManagedContainer<PFilePickerParent> mManagedPFilePickerParent;
    ManagedContainer<PPluginWidgetParent> mManagedPPluginWidgetParent;
    ManagedContainer<PPaymentRequestParent> mManagedPPaymentRequestParent;
    ManagedContainer<PWindowGlobalParent> mManagedPWindowGlobalParent;
    ManagedContainer<PBrowserBridgeParent> mManagedPBrowserBridgeParent;
    ManagedContainer<PVsyncParent> mManagedPVsyncParent;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PBrowserParent*>
{
    typedef mozilla::dom::PBrowserParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBrowserParent_h
