//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundLSSnapshotChild_h
#define PBackgroundLSSnapshotChild_h

#include "mozilla/dom/PBackgroundLSSnapshot.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/LSValue.h"

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PBackgroundLSSnapshotChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PBackgroundLSDatabaseChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::LSClearInfo LSClearInfo;
    typedef mozilla::dom::LSItemInfo LSItemInfo;
    typedef mozilla::dom::LSRemoveItemAndNotifyInfo LSRemoveItemAndNotifyInfo;
    typedef mozilla::dom::LSRemoveItemInfo LSRemoveItemInfo;
    typedef mozilla::dom::LSRequestCommonParams LSRequestCommonParams;
    typedef mozilla::dom::LSRequestParams LSRequestParams;
    typedef mozilla::dom::LSRequestPreloadDatastoreParams LSRequestPreloadDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareDatastoreParams LSRequestPrepareDatastoreParams;
    typedef mozilla::dom::LSRequestPrepareObserverParams LSRequestPrepareObserverParams;
    typedef mozilla::dom::LSSetItemAndNotifyInfo LSSetItemAndNotifyInfo;
    typedef mozilla::dom::LSSetItemInfo LSSetItemInfo;
    typedef mozilla::dom::LSSimpleRequestParams LSSimpleRequestParams;
    typedef mozilla::dom::LSSimpleRequestPreloadedParams LSSimpleRequestPreloadedParams;
    typedef mozilla::dom::LSValue LSValue;
    typedef mozilla::dom::LSWriteAndNotifyInfo LSWriteAndNotifyInfo;
    typedef mozilla::dom::LSWriteInfo LSWriteInfo;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::void_t void_t;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::dom::PBackgroundLSDatabaseChild PBackgroundLSDatabaseChild;
    typedef mozilla::dom::PBackgroundLSDatabaseParent PBackgroundLSDatabaseParent;

protected:
    virtual mozilla::ipc::IPCResult
    RecvMarkDirty() = 0;
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PBackgroundLSSnapshotChild();

    virtual ~PBackgroundLSSnapshotChild();

public:
    PBackgroundLSDatabaseChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendDeleteMe();

    bool
    SendCheckpoint(const nsTArray<LSWriteInfo>& writeInfos);

    bool
    SendCheckpointAndNotify(const nsTArray<LSWriteAndNotifyInfo>& writeAndNotifyInfos);

    bool
    SendFinish();

    bool
    SendLoaded();

    bool
    SendLoadValueAndMoreItems(
            const nsString& key,
            LSValue* value,
            nsTArray<LSItemInfo>* itemInfos);

    bool
    SendLoadKeys(nsTArray<nsString>* keys);

    bool
    SendIncreasePeakUsage(
            const int64_t& requestedSize,
            const int64_t& minSize,
            int64_t* size);

    bool
    SendPing();

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PBackgroundLSSnapshotChild*>
{
    typedef mozilla::dom::PBackgroundLSSnapshotChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PBackgroundLSSnapshotChild_h
