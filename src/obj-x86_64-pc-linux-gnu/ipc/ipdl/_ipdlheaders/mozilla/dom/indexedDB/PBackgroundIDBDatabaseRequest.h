//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundIDBDatabaseRequest_h
#define PBackgroundIDBDatabaseRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace dom {
class PBackgroundMutableFileParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundMutableFileChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CreateFileRequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class CreateFileRequestResponse final
{
private:
    typedef mozilla::dom::PBackgroundMutableFileParent PBackgroundMutableFileParent;
    typedef mozilla::dom::PBackgroundMutableFileChild PBackgroundMutableFileChild;

public:
    MOZ_IMPLICIT CreateFileRequestResponse() :
        mutableFileParent_(),
        mutableFileChild_()
    {
    }

    MOZ_IMPLICIT CreateFileRequestResponse(
            PBackgroundMutableFileParent* _mutableFileParent,
            PBackgroundMutableFileChild* _mutableFileChild) :
        mutableFileParent_(_mutableFileParent),
        mutableFileChild_(_mutableFileChild)
    {
    }

    PBackgroundMutableFileParent*&
    mutableFileParent()
    {
        return mutableFileParent_;
    }
    PBackgroundMutableFileParent*
    mutableFileParent() const
    {
        return mutableFileParent_;
    }

    PBackgroundMutableFileChild*&
    mutableFileChild()
    {
        return mutableFileChild_;
    }
    PBackgroundMutableFileChild*
    mutableFileChild() const
    {
        return mutableFileChild_;
    }

private:
    PBackgroundMutableFileParent* mutableFileParent_;
    PBackgroundMutableFileChild* mutableFileChild_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::CreateFileRequestResponse>
{
    typedef mozilla::dom::indexedDB::CreateFileRequestResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union DatabaseRequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class DatabaseRequestResponse final
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TCreateFileRequestResponse,
        T__Last = TCreateFileRequestResponse
    };

private:
    typedef mozilla::dom::indexedDB::CreateFileRequestResponse CreateFileRequestResponse;
    typedef nsresult nsresult__tdef;
    typedef CreateFileRequestResponse CreateFileRequestResponse__tdef;

    union Value {
        mozilla::AlignedStorage2<nsresult> Vnsresult;
        mozilla::AlignedStorage2<CreateFileRequestResponse> VCreateFileRequestResponse;
    };

    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }
    CreateFileRequestResponse*
    ptr_CreateFileRequestResponse()
    {
        return ((mValue).VCreateFileRequestResponse).addr();
    }
    const CreateFileRequestResponse*
    constptr_CreateFileRequestResponse() const
    {
        return ((mValue).VCreateFileRequestResponse).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT DatabaseRequestResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT DatabaseRequestResponse(const nsresult& aOther);

    MOZ_IMPLICIT DatabaseRequestResponse(nsresult&& aOther);

    MOZ_IMPLICIT DatabaseRequestResponse(const CreateFileRequestResponse& aOther);

    MOZ_IMPLICIT DatabaseRequestResponse(CreateFileRequestResponse&& aOther);

    MOZ_IMPLICIT DatabaseRequestResponse(const DatabaseRequestResponse& aOther);

    MOZ_IMPLICIT DatabaseRequestResponse(DatabaseRequestResponse&& aOther);

    ~DatabaseRequestResponse();

    Type
    type() const
    {
        return mType;
    }

    DatabaseRequestResponse&
    operator=(const nsresult& aRhs);

    DatabaseRequestResponse&
    operator=(nsresult&& aRhs);

    DatabaseRequestResponse&
    operator=(const CreateFileRequestResponse& aRhs);

    DatabaseRequestResponse&
    operator=(CreateFileRequestResponse&& aRhs);

    DatabaseRequestResponse&
    operator=(const DatabaseRequestResponse& aRhs);

    DatabaseRequestResponse&
    operator=(DatabaseRequestResponse&& aRhs);

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    CreateFileRequestResponse&
    get_CreateFileRequestResponse()
    {
        AssertSanity(TCreateFileRequestResponse);
        return (*(ptr_CreateFileRequestResponse()));
    }
    const CreateFileRequestResponse&
    get_CreateFileRequestResponse() const
    {
        AssertSanity(TCreateFileRequestResponse);
        return (*(constptr_CreateFileRequestResponse()));
    }
    operator CreateFileRequestResponse&()
    {
        return get_CreateFileRequestResponse();
    }
    operator const CreateFileRequestResponse&() const
    {
        return get_CreateFileRequestResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::DatabaseRequestResponse>
{
    typedef mozilla::dom::indexedDB::DatabaseRequestResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseRequestParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundIDBDatabaseRequestChild and PBackgroundIDBDatabaseRequestParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBDatabaseRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBDatabaseRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBDatabaseRequestChild>* aChild);

enum MessageType {
    PBackgroundIDBDatabaseRequestStart = PBackgroundIDBDatabaseRequestMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    PBackgroundIDBDatabaseRequestEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PBackgroundIDBDatabaseRequest
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundIDBDatabaseRequest_h
