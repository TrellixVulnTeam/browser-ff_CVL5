//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundIDBDatabase_h
#define PBackgroundIDBDatabase_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/IPCBlob.h"
#include "mozilla/ipc/InputStreamParams.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBSharedTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CreateFileParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class CreateFileParams final
{
private:

public:
    MOZ_IMPLICIT CreateFileParams() :
        name_(),
        type_()
    {
    }

    MOZ_IMPLICIT CreateFileParams(
            const nsString& _name,
            const nsString& _type) :
        name_(_name),
        type_(_type)
    {
    }

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

    nsString&
    type()
    {
        return type_;
    }
    const nsString&
    type() const
    {
        return type_;
    }

private:
    nsString name_;
    nsString type_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::CreateFileParams>
{
    typedef mozilla::dom::indexedDB::CreateFileParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union DatabaseRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class DatabaseRequestParams final
{
public:
    enum Type {
        T__None,
        TCreateFileParams = 1,
        T__Last = TCreateFileParams
    };

private:
    typedef mozilla::dom::indexedDB::CreateFileParams CreateFileParams;
    typedef CreateFileParams CreateFileParams__tdef;

    union Value {
        mozilla::AlignedStorage2<CreateFileParams> VCreateFileParams;
    };

    CreateFileParams*
    ptr_CreateFileParams()
    {
        return ((mValue).VCreateFileParams).addr();
    }
    const CreateFileParams*
    constptr_CreateFileParams() const
    {
        return ((mValue).VCreateFileParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT DatabaseRequestParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT DatabaseRequestParams(const CreateFileParams& aOther);

    MOZ_IMPLICIT DatabaseRequestParams(CreateFileParams&& aOther);

    MOZ_IMPLICIT DatabaseRequestParams(const DatabaseRequestParams& aOther);

    MOZ_IMPLICIT DatabaseRequestParams(DatabaseRequestParams&& aOther);

    ~DatabaseRequestParams();

    Type
    type() const
    {
        return mType;
    }

    DatabaseRequestParams&
    operator=(const CreateFileParams& aRhs);

    DatabaseRequestParams&
    operator=(CreateFileParams&& aRhs);

    DatabaseRequestParams&
    operator=(const DatabaseRequestParams& aRhs);

    DatabaseRequestParams&
    operator=(DatabaseRequestParams&& aRhs);

    CreateFileParams&
    get_CreateFileParams()
    {
        AssertSanity(TCreateFileParams);
        return (*(ptr_CreateFileParams()));
    }
    const CreateFileParams&
    get_CreateFileParams() const
    {
        AssertSanity(TCreateFileParams);
        return (*(constptr_CreateFileParams()));
    }
    operator CreateFileParams&()
    {
        return get_CreateFileParams();
    }
    operator const CreateFileParams&() const
    {
        return get_CreateFileParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::DatabaseRequestParams>
{
    typedef mozilla::dom::indexedDB::DatabaseRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBDatabaseChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundIDBDatabaseChild and PBackgroundIDBDatabaseParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBDatabase {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBDatabaseChild>* aChild);

enum MessageType {
    PBackgroundIDBDatabaseStart = PBackgroundIDBDatabaseMsgStart << 16,
    Msg_DeleteMe__ID,
    Msg_Blocked__ID,
    Msg_Close__ID,
    Msg_PBackgroundIDBDatabaseFileConstructor__ID,
    Reply_PBackgroundIDBDatabaseFileConstructor__ID,
    Msg_PBackgroundIDBDatabaseRequestConstructor__ID,
    Reply_PBackgroundIDBDatabaseRequestConstructor__ID,
    Msg_PBackgroundIDBTransactionConstructor__ID,
    Reply_PBackgroundIDBTransactionConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_VersionChange__ID,
    Msg_Invalidate__ID,
    Msg_CloseAfterInvalidationComplete__ID,
    Msg_PBackgroundIDBVersionChangeTransactionConstructor__ID,
    Reply_PBackgroundIDBVersionChangeTransactionConstructor__ID,
    Msg_PBackgroundMutableFileConstructor__ID,
    Reply_PBackgroundMutableFileConstructor__ID,
    PBackgroundIDBDatabaseEnd
};

IPC::Message*
Msg_DeleteMe(int32_t routingId);

IPC::Message*
Msg_Blocked(int32_t routingId);

IPC::Message*
Msg_Close(int32_t routingId);

IPC::Message*
Msg_PBackgroundIDBDatabaseFileConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundIDBDatabaseFileConstructor(int32_t routingId);

IPC::Message*
Msg_PBackgroundIDBDatabaseRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundIDBDatabaseRequestConstructor(int32_t routingId);

IPC::Message*
Msg_PBackgroundIDBTransactionConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundIDBTransactionConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_VersionChange(int32_t routingId);

IPC::Message*
Msg_Invalidate(int32_t routingId);

IPC::Message*
Msg_CloseAfterInvalidationComplete(int32_t routingId);

IPC::Message*
Msg_PBackgroundIDBVersionChangeTransactionConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundIDBVersionChangeTransactionConstructor(int32_t routingId);

IPC::Message*
Msg_PBackgroundMutableFileConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundMutableFileConstructor(int32_t routingId);



} // namespace PBackgroundIDBDatabase
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundIDBDatabase_h
