//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundIDBFactory_h
#define PBackgroundIDBFactory_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBSharedTypes.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CommonFactoryRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class CommonFactoryRequestParams final
{
private:
    typedef mozilla::dom::indexedDB::DatabaseMetadata DatabaseMetadata;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT CommonFactoryRequestParams() :
        metadata_(),
        principalInfo_()
    {
    }

    MOZ_IMPLICIT CommonFactoryRequestParams(
            const DatabaseMetadata& _metadata,
            const PrincipalInfo& _principalInfo) :
        metadata_(_metadata),
        principalInfo_(_principalInfo)
    {
    }

    DatabaseMetadata&
    metadata()
    {
        return metadata_;
    }
    const DatabaseMetadata&
    metadata() const
    {
        return metadata_;
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

private:
    DatabaseMetadata metadata_;
    PrincipalInfo principalInfo_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::CommonFactoryRequestParams>
{
    typedef mozilla::dom::indexedDB::CommonFactoryRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct OpenDatabaseRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class OpenDatabaseRequestParams final
{
private:
    typedef mozilla::dom::indexedDB::CommonFactoryRequestParams CommonFactoryRequestParams;

public:
    MOZ_IMPLICIT OpenDatabaseRequestParams() :
        commonParams_()
    {
    }

    MOZ_IMPLICIT OpenDatabaseRequestParams(const CommonFactoryRequestParams& _commonParams) :
        commonParams_(_commonParams)
    {
    }

    CommonFactoryRequestParams&
    commonParams()
    {
        return commonParams_;
    }
    const CommonFactoryRequestParams&
    commonParams() const
    {
        return commonParams_;
    }

private:
    CommonFactoryRequestParams commonParams_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::OpenDatabaseRequestParams>
{
    typedef mozilla::dom::indexedDB::OpenDatabaseRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DeleteDatabaseRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class DeleteDatabaseRequestParams final
{
private:
    typedef mozilla::dom::indexedDB::CommonFactoryRequestParams CommonFactoryRequestParams;

public:
    MOZ_IMPLICIT DeleteDatabaseRequestParams() :
        commonParams_()
    {
    }

    MOZ_IMPLICIT DeleteDatabaseRequestParams(const CommonFactoryRequestParams& _commonParams) :
        commonParams_(_commonParams)
    {
    }

    CommonFactoryRequestParams&
    commonParams()
    {
        return commonParams_;
    }
    const CommonFactoryRequestParams&
    commonParams() const
    {
        return commonParams_;
    }

private:
    CommonFactoryRequestParams commonParams_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::DeleteDatabaseRequestParams>
{
    typedef mozilla::dom::indexedDB::DeleteDatabaseRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union FactoryRequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class FactoryRequestParams final
{
public:
    enum Type {
        T__None,
        TOpenDatabaseRequestParams = 1,
        TDeleteDatabaseRequestParams,
        T__Last = TDeleteDatabaseRequestParams
    };

private:
    typedef mozilla::dom::indexedDB::OpenDatabaseRequestParams OpenDatabaseRequestParams;
    typedef mozilla::dom::indexedDB::DeleteDatabaseRequestParams DeleteDatabaseRequestParams;
    typedef OpenDatabaseRequestParams OpenDatabaseRequestParams__tdef;
    typedef DeleteDatabaseRequestParams DeleteDatabaseRequestParams__tdef;

    union Value {
        mozilla::AlignedStorage2<OpenDatabaseRequestParams> VOpenDatabaseRequestParams;
        mozilla::AlignedStorage2<DeleteDatabaseRequestParams> VDeleteDatabaseRequestParams;
    };

    OpenDatabaseRequestParams*
    ptr_OpenDatabaseRequestParams()
    {
        return ((mValue).VOpenDatabaseRequestParams).addr();
    }
    const OpenDatabaseRequestParams*
    constptr_OpenDatabaseRequestParams() const
    {
        return ((mValue).VOpenDatabaseRequestParams).addr();
    }
    DeleteDatabaseRequestParams*
    ptr_DeleteDatabaseRequestParams()
    {
        return ((mValue).VDeleteDatabaseRequestParams).addr();
    }
    const DeleteDatabaseRequestParams*
    constptr_DeleteDatabaseRequestParams() const
    {
        return ((mValue).VDeleteDatabaseRequestParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT FactoryRequestParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT FactoryRequestParams(const OpenDatabaseRequestParams& aOther);

    MOZ_IMPLICIT FactoryRequestParams(OpenDatabaseRequestParams&& aOther);

    MOZ_IMPLICIT FactoryRequestParams(const DeleteDatabaseRequestParams& aOther);

    MOZ_IMPLICIT FactoryRequestParams(DeleteDatabaseRequestParams&& aOther);

    MOZ_IMPLICIT FactoryRequestParams(const FactoryRequestParams& aOther);

    MOZ_IMPLICIT FactoryRequestParams(FactoryRequestParams&& aOther);

    ~FactoryRequestParams();

    Type
    type() const
    {
        return mType;
    }

    FactoryRequestParams&
    operator=(const OpenDatabaseRequestParams& aRhs);

    FactoryRequestParams&
    operator=(OpenDatabaseRequestParams&& aRhs);

    FactoryRequestParams&
    operator=(const DeleteDatabaseRequestParams& aRhs);

    FactoryRequestParams&
    operator=(DeleteDatabaseRequestParams&& aRhs);

    FactoryRequestParams&
    operator=(const FactoryRequestParams& aRhs);

    FactoryRequestParams&
    operator=(FactoryRequestParams&& aRhs);

    OpenDatabaseRequestParams&
    get_OpenDatabaseRequestParams()
    {
        AssertSanity(TOpenDatabaseRequestParams);
        return (*(ptr_OpenDatabaseRequestParams()));
    }
    const OpenDatabaseRequestParams&
    get_OpenDatabaseRequestParams() const
    {
        AssertSanity(TOpenDatabaseRequestParams);
        return (*(constptr_OpenDatabaseRequestParams()));
    }
    operator OpenDatabaseRequestParams&()
    {
        return get_OpenDatabaseRequestParams();
    }
    operator const OpenDatabaseRequestParams&() const
    {
        return get_OpenDatabaseRequestParams();
    }

    DeleteDatabaseRequestParams&
    get_DeleteDatabaseRequestParams()
    {
        AssertSanity(TDeleteDatabaseRequestParams);
        return (*(ptr_DeleteDatabaseRequestParams()));
    }
    const DeleteDatabaseRequestParams&
    get_DeleteDatabaseRequestParams() const
    {
        AssertSanity(TDeleteDatabaseRequestParams);
        return (*(constptr_DeleteDatabaseRequestParams()));
    }
    operator DeleteDatabaseRequestParams&()
    {
        return get_DeleteDatabaseRequestParams();
    }
    operator const DeleteDatabaseRequestParams&() const
    {
        return get_DeleteDatabaseRequestParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::FactoryRequestParams>
{
    typedef mozilla::dom::indexedDB::FactoryRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBFactoryParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBFactoryChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundIDBFactoryChild and PBackgroundIDBFactoryParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBFactory {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBFactoryParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBFactoryChild>* aChild);

enum MessageType {
    PBackgroundIDBFactoryStart = PBackgroundIDBFactoryMsgStart << 16,
    Msg_DeleteMe__ID,
    Msg_PBackgroundIDBFactoryRequestConstructor__ID,
    Reply_PBackgroundIDBFactoryRequestConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PBackgroundIDBDatabaseConstructor__ID,
    Reply_PBackgroundIDBDatabaseConstructor__ID,
    PBackgroundIDBFactoryEnd
};

IPC::Message*
Msg_DeleteMe(int32_t routingId);

IPC::Message*
Msg_PBackgroundIDBFactoryRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundIDBFactoryRequestConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_PBackgroundIDBDatabaseConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundIDBDatabaseConstructor(int32_t routingId);



} // namespace PBackgroundIDBFactory
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundIDBFactory_h
