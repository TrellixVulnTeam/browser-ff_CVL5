//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundIDBTransaction_h
#define PBackgroundIDBTransaction_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBSharedTypes.h"

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBTransactionParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBTransactionChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundIDBTransactionChild and PBackgroundIDBTransactionParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBTransaction {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBTransactionParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBTransactionChild>* aChild);

enum MessageType {
    PBackgroundIDBTransactionStart = PBackgroundIDBTransactionMsgStart << 16,
    Msg_DeleteMe__ID,
    Msg_Commit__ID,
    Msg_Abort__ID,
    Msg_PBackgroundIDBCursorConstructor__ID,
    Reply_PBackgroundIDBCursorConstructor__ID,
    Msg_PBackgroundIDBRequestConstructor__ID,
    Reply_PBackgroundIDBRequestConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Complete__ID,
    PBackgroundIDBTransactionEnd
};

IPC::Message*
Msg_DeleteMe(int32_t routingId);

IPC::Message*
Msg_Commit(int32_t routingId);

IPC::Message*
Msg_Abort(int32_t routingId);

IPC::Message*
Msg_PBackgroundIDBCursorConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundIDBCursorConstructor(int32_t routingId);

IPC::Message*
Msg_PBackgroundIDBRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundIDBRequestConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Complete(int32_t routingId);



} // namespace PBackgroundIDBTransaction
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundIDBTransaction_h
