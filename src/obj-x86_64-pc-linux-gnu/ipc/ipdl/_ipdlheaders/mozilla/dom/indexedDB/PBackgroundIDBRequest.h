//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundIDBRequest_h
#define PBackgroundIDBRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/indexedDB/Key.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBSharedTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreAddResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreAddResponse final
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    MOZ_IMPLICIT ObjectStoreAddResponse() :
        key_()
    {
    }

    MOZ_IMPLICIT ObjectStoreAddResponse(const Key& _key) :
        key_(_key)
    {
    }

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

private:
    Key key_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreAddResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreAddResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStorePutResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStorePutResponse final
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    MOZ_IMPLICIT ObjectStorePutResponse() :
        key_()
    {
    }

    MOZ_IMPLICIT ObjectStorePutResponse(const Key& _key) :
        key_(_key)
    {
    }

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

private:
    Key key_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStorePutResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStorePutResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreGetResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreGetResponse final
{
private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;

public:
    MOZ_IMPLICIT ObjectStoreGetResponse() :
        cloneInfo_()
    {
    }

    MOZ_IMPLICIT ObjectStoreGetResponse(SerializedStructuredCloneReadInfo&& _cloneInfo) :
        cloneInfo_(std::move(_cloneInfo))
    {
    }

    SerializedStructuredCloneReadInfo&
    cloneInfo()
    {
        return cloneInfo_;
    }
    const SerializedStructuredCloneReadInfo&
    cloneInfo() const
    {
        return cloneInfo_;
    }

private:
    SerializedStructuredCloneReadInfo cloneInfo_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreGetResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreGetResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreGetKeyResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreGetKeyResponse final
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    MOZ_IMPLICIT ObjectStoreGetKeyResponse() :
        key_()
    {
    }

    MOZ_IMPLICIT ObjectStoreGetKeyResponse(const Key& _key) :
        key_(_key)
    {
    }

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

private:
    Key key_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreGetKeyResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreGetKeyResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreGetAllResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreGetAllResponse final
{
private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;

public:
    MOZ_IMPLICIT ObjectStoreGetAllResponse() :
        cloneInfos_()
    {
    }

    MOZ_IMPLICIT ObjectStoreGetAllResponse(nsTArray<SerializedStructuredCloneReadInfo>&& _cloneInfos) :
        cloneInfos_(std::move(_cloneInfos))
    {
    }

    nsTArray<SerializedStructuredCloneReadInfo>&
    cloneInfos()
    {
        return cloneInfos_;
    }
    const nsTArray<SerializedStructuredCloneReadInfo>&
    cloneInfos() const
    {
        return cloneInfos_;
    }

private:
    CopyableTArray<SerializedStructuredCloneReadInfo> cloneInfos_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreGetAllResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreGetAllKeysResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreGetAllKeysResponse final
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    MOZ_IMPLICIT ObjectStoreGetAllKeysResponse() :
        keys_()
    {
    }

    MOZ_IMPLICIT ObjectStoreGetAllKeysResponse(const nsTArray<Key>& _keys) :
        keys_(_keys)
    {
    }

    nsTArray<Key>&
    keys()
    {
        return keys_;
    }
    const nsTArray<Key>&
    keys() const
    {
        return keys_;
    }

private:
    CopyableTArray<Key> keys_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreGetAllKeysResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllKeysResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreDeleteResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreDeleteResponse final
{
private:

public:
    MOZ_IMPLICIT ObjectStoreDeleteResponse()
    {
    }

private:
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreDeleteResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreDeleteResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreClearResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreClearResponse final
{
private:

public:
    MOZ_IMPLICIT ObjectStoreClearResponse()
    {
    }

private:
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreClearResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreClearResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreCountResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreCountResponse final
{
private:

public:
    MOZ_IMPLICIT ObjectStoreCountResponse() :
        count_()
    {
    }

    MOZ_IMPLICIT ObjectStoreCountResponse(const uint64_t& _count) :
        count_(_count)
    {
    }

    uint64_t&
    count()
    {
        return count_;
    }
    const uint64_t&
    count() const
    {
        return count_;
    }

private:
    uint64_t count_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreCountResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreCountResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IndexGetResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class IndexGetResponse final
{
private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;

public:
    MOZ_IMPLICIT IndexGetResponse() :
        cloneInfo_()
    {
    }

    MOZ_IMPLICIT IndexGetResponse(SerializedStructuredCloneReadInfo&& _cloneInfo) :
        cloneInfo_(std::move(_cloneInfo))
    {
    }

    SerializedStructuredCloneReadInfo&
    cloneInfo()
    {
        return cloneInfo_;
    }
    const SerializedStructuredCloneReadInfo&
    cloneInfo() const
    {
        return cloneInfo_;
    }

private:
    SerializedStructuredCloneReadInfo cloneInfo_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::IndexGetResponse>
{
    typedef mozilla::dom::indexedDB::IndexGetResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IndexGetKeyResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class IndexGetKeyResponse final
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    MOZ_IMPLICIT IndexGetKeyResponse() :
        key_()
    {
    }

    MOZ_IMPLICIT IndexGetKeyResponse(const Key& _key) :
        key_(_key)
    {
    }

    Key&
    key()
    {
        return key_;
    }
    const Key&
    key() const
    {
        return key_;
    }

private:
    Key key_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::IndexGetKeyResponse>
{
    typedef mozilla::dom::indexedDB::IndexGetKeyResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IndexGetAllResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class IndexGetAllResponse final
{
private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo SerializedStructuredCloneReadInfo;

public:
    MOZ_IMPLICIT IndexGetAllResponse() :
        cloneInfos_()
    {
    }

    MOZ_IMPLICIT IndexGetAllResponse(nsTArray<SerializedStructuredCloneReadInfo>&& _cloneInfos) :
        cloneInfos_(std::move(_cloneInfos))
    {
    }

    nsTArray<SerializedStructuredCloneReadInfo>&
    cloneInfos()
    {
        return cloneInfos_;
    }
    const nsTArray<SerializedStructuredCloneReadInfo>&
    cloneInfos() const
    {
        return cloneInfos_;
    }

private:
    CopyableTArray<SerializedStructuredCloneReadInfo> cloneInfos_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::IndexGetAllResponse>
{
    typedef mozilla::dom::indexedDB::IndexGetAllResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IndexGetAllKeysResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class IndexGetAllKeysResponse final
{
private:
    typedef mozilla::dom::indexedDB::Key Key;

public:
    MOZ_IMPLICIT IndexGetAllKeysResponse() :
        keys_()
    {
    }

    MOZ_IMPLICIT IndexGetAllKeysResponse(const nsTArray<Key>& _keys) :
        keys_(_keys)
    {
    }

    nsTArray<Key>&
    keys()
    {
        return keys_;
    }
    const nsTArray<Key>&
    keys() const
    {
        return keys_;
    }

private:
    CopyableTArray<Key> keys_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::IndexGetAllKeysResponse>
{
    typedef mozilla::dom::indexedDB::IndexGetAllKeysResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IndexCountResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class IndexCountResponse final
{
private:

public:
    MOZ_IMPLICIT IndexCountResponse() :
        count_()
    {
    }

    MOZ_IMPLICIT IndexCountResponse(const uint64_t& _count) :
        count_(_count)
    {
    }

    uint64_t&
    count()
    {
        return count_;
    }
    const uint64_t&
    count() const
    {
        return count_;
    }

private:
    uint64_t count_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::IndexCountResponse>
{
    typedef mozilla::dom::indexedDB::IndexCountResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union RequestResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class RequestResponse final
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TObjectStoreGetResponse,
        TObjectStoreGetKeyResponse,
        TObjectStoreAddResponse,
        TObjectStorePutResponse,
        TObjectStoreDeleteResponse,
        TObjectStoreClearResponse,
        TObjectStoreCountResponse,
        TObjectStoreGetAllResponse,
        TObjectStoreGetAllKeysResponse,
        TIndexGetResponse,
        TIndexGetKeyResponse,
        TIndexGetAllResponse,
        TIndexGetAllKeysResponse,
        TIndexCountResponse,
        T__Last = TIndexCountResponse
    };

private:
    typedef mozilla::dom::indexedDB::ObjectStoreGetResponse ObjectStoreGetResponse;
    typedef mozilla::dom::indexedDB::ObjectStoreGetKeyResponse ObjectStoreGetKeyResponse;
    typedef mozilla::dom::indexedDB::ObjectStoreAddResponse ObjectStoreAddResponse;
    typedef mozilla::dom::indexedDB::ObjectStorePutResponse ObjectStorePutResponse;
    typedef mozilla::dom::indexedDB::ObjectStoreDeleteResponse ObjectStoreDeleteResponse;
    typedef mozilla::dom::indexedDB::ObjectStoreClearResponse ObjectStoreClearResponse;
    typedef mozilla::dom::indexedDB::ObjectStoreCountResponse ObjectStoreCountResponse;
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllResponse ObjectStoreGetAllResponse;
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllKeysResponse ObjectStoreGetAllKeysResponse;
    typedef mozilla::dom::indexedDB::IndexGetResponse IndexGetResponse;
    typedef mozilla::dom::indexedDB::IndexGetKeyResponse IndexGetKeyResponse;
    typedef mozilla::dom::indexedDB::IndexGetAllResponse IndexGetAllResponse;
    typedef mozilla::dom::indexedDB::IndexGetAllKeysResponse IndexGetAllKeysResponse;
    typedef mozilla::dom::indexedDB::IndexCountResponse IndexCountResponse;
    typedef nsresult nsresult__tdef;
    typedef ObjectStoreGetResponse ObjectStoreGetResponse__tdef;
    typedef ObjectStoreGetKeyResponse ObjectStoreGetKeyResponse__tdef;
    typedef ObjectStoreAddResponse ObjectStoreAddResponse__tdef;
    typedef ObjectStorePutResponse ObjectStorePutResponse__tdef;
    typedef ObjectStoreDeleteResponse ObjectStoreDeleteResponse__tdef;
    typedef ObjectStoreClearResponse ObjectStoreClearResponse__tdef;
    typedef ObjectStoreCountResponse ObjectStoreCountResponse__tdef;
    typedef ObjectStoreGetAllResponse ObjectStoreGetAllResponse__tdef;
    typedef ObjectStoreGetAllKeysResponse ObjectStoreGetAllKeysResponse__tdef;
    typedef IndexGetResponse IndexGetResponse__tdef;
    typedef IndexGetKeyResponse IndexGetKeyResponse__tdef;
    typedef IndexGetAllResponse IndexGetAllResponse__tdef;
    typedef IndexGetAllKeysResponse IndexGetAllKeysResponse__tdef;
    typedef IndexCountResponse IndexCountResponse__tdef;

    union Value {
        mozilla::AlignedStorage2<nsresult> Vnsresult;
        mozilla::AlignedStorage2<ObjectStoreGetResponse> VObjectStoreGetResponse;
        mozilla::AlignedStorage2<ObjectStoreGetKeyResponse> VObjectStoreGetKeyResponse;
        mozilla::AlignedStorage2<ObjectStoreAddResponse> VObjectStoreAddResponse;
        mozilla::AlignedStorage2<ObjectStorePutResponse> VObjectStorePutResponse;
        mozilla::AlignedStorage2<ObjectStoreDeleteResponse> VObjectStoreDeleteResponse;
        mozilla::AlignedStorage2<ObjectStoreClearResponse> VObjectStoreClearResponse;
        mozilla::AlignedStorage2<ObjectStoreCountResponse> VObjectStoreCountResponse;
        mozilla::AlignedStorage2<ObjectStoreGetAllResponse> VObjectStoreGetAllResponse;
        mozilla::AlignedStorage2<ObjectStoreGetAllKeysResponse> VObjectStoreGetAllKeysResponse;
        mozilla::AlignedStorage2<IndexGetResponse> VIndexGetResponse;
        mozilla::AlignedStorage2<IndexGetKeyResponse> VIndexGetKeyResponse;
        mozilla::AlignedStorage2<IndexGetAllResponse> VIndexGetAllResponse;
        mozilla::AlignedStorage2<IndexGetAllKeysResponse> VIndexGetAllKeysResponse;
        mozilla::AlignedStorage2<IndexCountResponse> VIndexCountResponse;
    };

    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }
    ObjectStoreGetResponse*
    ptr_ObjectStoreGetResponse()
    {
        return ((mValue).VObjectStoreGetResponse).addr();
    }
    const ObjectStoreGetResponse*
    constptr_ObjectStoreGetResponse() const
    {
        return ((mValue).VObjectStoreGetResponse).addr();
    }
    ObjectStoreGetKeyResponse*
    ptr_ObjectStoreGetKeyResponse()
    {
        return ((mValue).VObjectStoreGetKeyResponse).addr();
    }
    const ObjectStoreGetKeyResponse*
    constptr_ObjectStoreGetKeyResponse() const
    {
        return ((mValue).VObjectStoreGetKeyResponse).addr();
    }
    ObjectStoreAddResponse*
    ptr_ObjectStoreAddResponse()
    {
        return ((mValue).VObjectStoreAddResponse).addr();
    }
    const ObjectStoreAddResponse*
    constptr_ObjectStoreAddResponse() const
    {
        return ((mValue).VObjectStoreAddResponse).addr();
    }
    ObjectStorePutResponse*
    ptr_ObjectStorePutResponse()
    {
        return ((mValue).VObjectStorePutResponse).addr();
    }
    const ObjectStorePutResponse*
    constptr_ObjectStorePutResponse() const
    {
        return ((mValue).VObjectStorePutResponse).addr();
    }
    ObjectStoreDeleteResponse*
    ptr_ObjectStoreDeleteResponse()
    {
        return ((mValue).VObjectStoreDeleteResponse).addr();
    }
    const ObjectStoreDeleteResponse*
    constptr_ObjectStoreDeleteResponse() const
    {
        return ((mValue).VObjectStoreDeleteResponse).addr();
    }
    ObjectStoreClearResponse*
    ptr_ObjectStoreClearResponse()
    {
        return ((mValue).VObjectStoreClearResponse).addr();
    }
    const ObjectStoreClearResponse*
    constptr_ObjectStoreClearResponse() const
    {
        return ((mValue).VObjectStoreClearResponse).addr();
    }
    ObjectStoreCountResponse*
    ptr_ObjectStoreCountResponse()
    {
        return ((mValue).VObjectStoreCountResponse).addr();
    }
    const ObjectStoreCountResponse*
    constptr_ObjectStoreCountResponse() const
    {
        return ((mValue).VObjectStoreCountResponse).addr();
    }
    ObjectStoreGetAllResponse*
    ptr_ObjectStoreGetAllResponse()
    {
        return ((mValue).VObjectStoreGetAllResponse).addr();
    }
    const ObjectStoreGetAllResponse*
    constptr_ObjectStoreGetAllResponse() const
    {
        return ((mValue).VObjectStoreGetAllResponse).addr();
    }
    ObjectStoreGetAllKeysResponse*
    ptr_ObjectStoreGetAllKeysResponse()
    {
        return ((mValue).VObjectStoreGetAllKeysResponse).addr();
    }
    const ObjectStoreGetAllKeysResponse*
    constptr_ObjectStoreGetAllKeysResponse() const
    {
        return ((mValue).VObjectStoreGetAllKeysResponse).addr();
    }
    IndexGetResponse*
    ptr_IndexGetResponse()
    {
        return ((mValue).VIndexGetResponse).addr();
    }
    const IndexGetResponse*
    constptr_IndexGetResponse() const
    {
        return ((mValue).VIndexGetResponse).addr();
    }
    IndexGetKeyResponse*
    ptr_IndexGetKeyResponse()
    {
        return ((mValue).VIndexGetKeyResponse).addr();
    }
    const IndexGetKeyResponse*
    constptr_IndexGetKeyResponse() const
    {
        return ((mValue).VIndexGetKeyResponse).addr();
    }
    IndexGetAllResponse*
    ptr_IndexGetAllResponse()
    {
        return ((mValue).VIndexGetAllResponse).addr();
    }
    const IndexGetAllResponse*
    constptr_IndexGetAllResponse() const
    {
        return ((mValue).VIndexGetAllResponse).addr();
    }
    IndexGetAllKeysResponse*
    ptr_IndexGetAllKeysResponse()
    {
        return ((mValue).VIndexGetAllKeysResponse).addr();
    }
    const IndexGetAllKeysResponse*
    constptr_IndexGetAllKeysResponse() const
    {
        return ((mValue).VIndexGetAllKeysResponse).addr();
    }
    IndexCountResponse*
    ptr_IndexCountResponse()
    {
        return ((mValue).VIndexCountResponse).addr();
    }
    const IndexCountResponse*
    constptr_IndexCountResponse() const
    {
        return ((mValue).VIndexCountResponse).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT RequestResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT RequestResponse(const nsresult& aOther);

    MOZ_IMPLICIT RequestResponse(nsresult&& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStoreGetResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ObjectStoreGetKeyResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStoreGetKeyResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ObjectStoreAddResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStoreAddResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ObjectStorePutResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStorePutResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ObjectStoreDeleteResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStoreDeleteResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ObjectStoreClearResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStoreClearResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ObjectStoreCountResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStoreCountResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStoreGetAllResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ObjectStoreGetAllKeysResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ObjectStoreGetAllKeysResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(IndexGetResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const IndexGetKeyResponse& aOther);

    MOZ_IMPLICIT RequestResponse(IndexGetKeyResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(IndexGetAllResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const IndexGetAllKeysResponse& aOther);

    MOZ_IMPLICIT RequestResponse(IndexGetAllKeysResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const IndexCountResponse& aOther);

    MOZ_IMPLICIT RequestResponse(IndexCountResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(RequestResponse&& aOther);

    ~RequestResponse();

    Type
    type() const
    {
        return mType;
    }

    RequestResponse&
    operator=(const nsresult& aRhs);

    RequestResponse&
    operator=(nsresult&& aRhs);

    RequestResponse&
    operator=(ObjectStoreGetResponse&& aRhs);

    RequestResponse&
    operator=(const ObjectStoreGetKeyResponse& aRhs);

    RequestResponse&
    operator=(ObjectStoreGetKeyResponse&& aRhs);

    RequestResponse&
    operator=(const ObjectStoreAddResponse& aRhs);

    RequestResponse&
    operator=(ObjectStoreAddResponse&& aRhs);

    RequestResponse&
    operator=(const ObjectStorePutResponse& aRhs);

    RequestResponse&
    operator=(ObjectStorePutResponse&& aRhs);

    RequestResponse&
    operator=(const ObjectStoreDeleteResponse& aRhs);

    RequestResponse&
    operator=(ObjectStoreDeleteResponse&& aRhs);

    RequestResponse&
    operator=(const ObjectStoreClearResponse& aRhs);

    RequestResponse&
    operator=(ObjectStoreClearResponse&& aRhs);

    RequestResponse&
    operator=(const ObjectStoreCountResponse& aRhs);

    RequestResponse&
    operator=(ObjectStoreCountResponse&& aRhs);

    RequestResponse&
    operator=(ObjectStoreGetAllResponse&& aRhs);

    RequestResponse&
    operator=(const ObjectStoreGetAllKeysResponse& aRhs);

    RequestResponse&
    operator=(ObjectStoreGetAllKeysResponse&& aRhs);

    RequestResponse&
    operator=(IndexGetResponse&& aRhs);

    RequestResponse&
    operator=(const IndexGetKeyResponse& aRhs);

    RequestResponse&
    operator=(IndexGetKeyResponse&& aRhs);

    RequestResponse&
    operator=(IndexGetAllResponse&& aRhs);

    RequestResponse&
    operator=(const IndexGetAllKeysResponse& aRhs);

    RequestResponse&
    operator=(IndexGetAllKeysResponse&& aRhs);

    RequestResponse&
    operator=(const IndexCountResponse& aRhs);

    RequestResponse&
    operator=(IndexCountResponse&& aRhs);

    RequestResponse&
    operator=(RequestResponse&& aRhs);

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    ObjectStoreGetResponse&
    get_ObjectStoreGetResponse()
    {
        AssertSanity(TObjectStoreGetResponse);
        return (*(ptr_ObjectStoreGetResponse()));
    }
    const ObjectStoreGetResponse&
    get_ObjectStoreGetResponse() const
    {
        AssertSanity(TObjectStoreGetResponse);
        return (*(constptr_ObjectStoreGetResponse()));
    }
    operator ObjectStoreGetResponse&()
    {
        return get_ObjectStoreGetResponse();
    }
    operator const ObjectStoreGetResponse&() const
    {
        return get_ObjectStoreGetResponse();
    }

    ObjectStoreGetKeyResponse&
    get_ObjectStoreGetKeyResponse()
    {
        AssertSanity(TObjectStoreGetKeyResponse);
        return (*(ptr_ObjectStoreGetKeyResponse()));
    }
    const ObjectStoreGetKeyResponse&
    get_ObjectStoreGetKeyResponse() const
    {
        AssertSanity(TObjectStoreGetKeyResponse);
        return (*(constptr_ObjectStoreGetKeyResponse()));
    }
    operator ObjectStoreGetKeyResponse&()
    {
        return get_ObjectStoreGetKeyResponse();
    }
    operator const ObjectStoreGetKeyResponse&() const
    {
        return get_ObjectStoreGetKeyResponse();
    }

    ObjectStoreAddResponse&
    get_ObjectStoreAddResponse()
    {
        AssertSanity(TObjectStoreAddResponse);
        return (*(ptr_ObjectStoreAddResponse()));
    }
    const ObjectStoreAddResponse&
    get_ObjectStoreAddResponse() const
    {
        AssertSanity(TObjectStoreAddResponse);
        return (*(constptr_ObjectStoreAddResponse()));
    }
    operator ObjectStoreAddResponse&()
    {
        return get_ObjectStoreAddResponse();
    }
    operator const ObjectStoreAddResponse&() const
    {
        return get_ObjectStoreAddResponse();
    }

    ObjectStorePutResponse&
    get_ObjectStorePutResponse()
    {
        AssertSanity(TObjectStorePutResponse);
        return (*(ptr_ObjectStorePutResponse()));
    }
    const ObjectStorePutResponse&
    get_ObjectStorePutResponse() const
    {
        AssertSanity(TObjectStorePutResponse);
        return (*(constptr_ObjectStorePutResponse()));
    }
    operator ObjectStorePutResponse&()
    {
        return get_ObjectStorePutResponse();
    }
    operator const ObjectStorePutResponse&() const
    {
        return get_ObjectStorePutResponse();
    }

    ObjectStoreDeleteResponse&
    get_ObjectStoreDeleteResponse()
    {
        AssertSanity(TObjectStoreDeleteResponse);
        return (*(ptr_ObjectStoreDeleteResponse()));
    }
    const ObjectStoreDeleteResponse&
    get_ObjectStoreDeleteResponse() const
    {
        AssertSanity(TObjectStoreDeleteResponse);
        return (*(constptr_ObjectStoreDeleteResponse()));
    }
    operator ObjectStoreDeleteResponse&()
    {
        return get_ObjectStoreDeleteResponse();
    }
    operator const ObjectStoreDeleteResponse&() const
    {
        return get_ObjectStoreDeleteResponse();
    }

    ObjectStoreClearResponse&
    get_ObjectStoreClearResponse()
    {
        AssertSanity(TObjectStoreClearResponse);
        return (*(ptr_ObjectStoreClearResponse()));
    }
    const ObjectStoreClearResponse&
    get_ObjectStoreClearResponse() const
    {
        AssertSanity(TObjectStoreClearResponse);
        return (*(constptr_ObjectStoreClearResponse()));
    }
    operator ObjectStoreClearResponse&()
    {
        return get_ObjectStoreClearResponse();
    }
    operator const ObjectStoreClearResponse&() const
    {
        return get_ObjectStoreClearResponse();
    }

    ObjectStoreCountResponse&
    get_ObjectStoreCountResponse()
    {
        AssertSanity(TObjectStoreCountResponse);
        return (*(ptr_ObjectStoreCountResponse()));
    }
    const ObjectStoreCountResponse&
    get_ObjectStoreCountResponse() const
    {
        AssertSanity(TObjectStoreCountResponse);
        return (*(constptr_ObjectStoreCountResponse()));
    }
    operator ObjectStoreCountResponse&()
    {
        return get_ObjectStoreCountResponse();
    }
    operator const ObjectStoreCountResponse&() const
    {
        return get_ObjectStoreCountResponse();
    }

    ObjectStoreGetAllResponse&
    get_ObjectStoreGetAllResponse()
    {
        AssertSanity(TObjectStoreGetAllResponse);
        return (*(ptr_ObjectStoreGetAllResponse()));
    }
    const ObjectStoreGetAllResponse&
    get_ObjectStoreGetAllResponse() const
    {
        AssertSanity(TObjectStoreGetAllResponse);
        return (*(constptr_ObjectStoreGetAllResponse()));
    }
    operator ObjectStoreGetAllResponse&()
    {
        return get_ObjectStoreGetAllResponse();
    }
    operator const ObjectStoreGetAllResponse&() const
    {
        return get_ObjectStoreGetAllResponse();
    }

    ObjectStoreGetAllKeysResponse&
    get_ObjectStoreGetAllKeysResponse()
    {
        AssertSanity(TObjectStoreGetAllKeysResponse);
        return (*(ptr_ObjectStoreGetAllKeysResponse()));
    }
    const ObjectStoreGetAllKeysResponse&
    get_ObjectStoreGetAllKeysResponse() const
    {
        AssertSanity(TObjectStoreGetAllKeysResponse);
        return (*(constptr_ObjectStoreGetAllKeysResponse()));
    }
    operator ObjectStoreGetAllKeysResponse&()
    {
        return get_ObjectStoreGetAllKeysResponse();
    }
    operator const ObjectStoreGetAllKeysResponse&() const
    {
        return get_ObjectStoreGetAllKeysResponse();
    }

    IndexGetResponse&
    get_IndexGetResponse()
    {
        AssertSanity(TIndexGetResponse);
        return (*(ptr_IndexGetResponse()));
    }
    const IndexGetResponse&
    get_IndexGetResponse() const
    {
        AssertSanity(TIndexGetResponse);
        return (*(constptr_IndexGetResponse()));
    }
    operator IndexGetResponse&()
    {
        return get_IndexGetResponse();
    }
    operator const IndexGetResponse&() const
    {
        return get_IndexGetResponse();
    }

    IndexGetKeyResponse&
    get_IndexGetKeyResponse()
    {
        AssertSanity(TIndexGetKeyResponse);
        return (*(ptr_IndexGetKeyResponse()));
    }
    const IndexGetKeyResponse&
    get_IndexGetKeyResponse() const
    {
        AssertSanity(TIndexGetKeyResponse);
        return (*(constptr_IndexGetKeyResponse()));
    }
    operator IndexGetKeyResponse&()
    {
        return get_IndexGetKeyResponse();
    }
    operator const IndexGetKeyResponse&() const
    {
        return get_IndexGetKeyResponse();
    }

    IndexGetAllResponse&
    get_IndexGetAllResponse()
    {
        AssertSanity(TIndexGetAllResponse);
        return (*(ptr_IndexGetAllResponse()));
    }
    const IndexGetAllResponse&
    get_IndexGetAllResponse() const
    {
        AssertSanity(TIndexGetAllResponse);
        return (*(constptr_IndexGetAllResponse()));
    }
    operator IndexGetAllResponse&()
    {
        return get_IndexGetAllResponse();
    }
    operator const IndexGetAllResponse&() const
    {
        return get_IndexGetAllResponse();
    }

    IndexGetAllKeysResponse&
    get_IndexGetAllKeysResponse()
    {
        AssertSanity(TIndexGetAllKeysResponse);
        return (*(ptr_IndexGetAllKeysResponse()));
    }
    const IndexGetAllKeysResponse&
    get_IndexGetAllKeysResponse() const
    {
        AssertSanity(TIndexGetAllKeysResponse);
        return (*(constptr_IndexGetAllKeysResponse()));
    }
    operator IndexGetAllKeysResponse&()
    {
        return get_IndexGetAllKeysResponse();
    }
    operator const IndexGetAllKeysResponse&() const
    {
        return get_IndexGetAllKeysResponse();
    }

    IndexCountResponse&
    get_IndexCountResponse()
    {
        AssertSanity(TIndexCountResponse);
        return (*(ptr_IndexCountResponse()));
    }
    const IndexCountResponse&
    get_IndexCountResponse() const
    {
        AssertSanity(TIndexCountResponse);
        return (*(constptr_IndexCountResponse()));
    }
    operator IndexCountResponse&()
    {
        return get_IndexCountResponse();
    }
    operator const IndexCountResponse&() const
    {
        return get_IndexCountResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::RequestResponse>
{
    typedef mozilla::dom::indexedDB::RequestResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PreprocessInfo|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class PreprocessInfo final
{
private:
    typedef mozilla::dom::indexedDB::SerializedStructuredCloneFile SerializedStructuredCloneFile;

public:
    MOZ_IMPLICIT PreprocessInfo() :
        files_()
    {
    }

    MOZ_IMPLICIT PreprocessInfo(const nsTArray<SerializedStructuredCloneFile>& _files) :
        files_(_files)
    {
    }

    nsTArray<SerializedStructuredCloneFile>&
    files()
    {
        return files_;
    }
    const nsTArray<SerializedStructuredCloneFile>&
    files() const
    {
        return files_;
    }

private:
    CopyableTArray<SerializedStructuredCloneFile> files_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::PreprocessInfo>
{
    typedef mozilla::dom::indexedDB::PreprocessInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreGetPreprocessParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreGetPreprocessParams final
{
private:
    typedef mozilla::dom::indexedDB::PreprocessInfo PreprocessInfo;

public:
    MOZ_IMPLICIT ObjectStoreGetPreprocessParams() :
        preprocessInfo_()
    {
    }

    MOZ_IMPLICIT ObjectStoreGetPreprocessParams(const PreprocessInfo& _preprocessInfo) :
        preprocessInfo_(_preprocessInfo)
    {
    }

    PreprocessInfo&
    preprocessInfo()
    {
        return preprocessInfo_;
    }
    const PreprocessInfo&
    preprocessInfo() const
    {
        return preprocessInfo_;
    }

private:
    PreprocessInfo preprocessInfo_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreGetPreprocessParams>
{
    typedef mozilla::dom::indexedDB::ObjectStoreGetPreprocessParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreGetAllPreprocessParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreGetAllPreprocessParams final
{
private:
    typedef mozilla::dom::indexedDB::PreprocessInfo PreprocessInfo;

public:
    MOZ_IMPLICIT ObjectStoreGetAllPreprocessParams() :
        preprocessInfos_()
    {
    }

    MOZ_IMPLICIT ObjectStoreGetAllPreprocessParams(const nsTArray<PreprocessInfo>& _preprocessInfos) :
        preprocessInfos_(_preprocessInfos)
    {
    }

    nsTArray<PreprocessInfo>&
    preprocessInfos()
    {
        return preprocessInfos_;
    }
    const nsTArray<PreprocessInfo>&
    preprocessInfos() const
    {
        return preprocessInfos_;
    }

private:
    CopyableTArray<PreprocessInfo> preprocessInfos_;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessParams>
{
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union PreprocessParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class PreprocessParams final
{
public:
    enum Type {
        T__None,
        TObjectStoreGetPreprocessParams = 1,
        TObjectStoreGetAllPreprocessParams,
        T__Last = TObjectStoreGetAllPreprocessParams
    };

private:
    typedef mozilla::dom::indexedDB::ObjectStoreGetPreprocessParams ObjectStoreGetPreprocessParams;
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessParams ObjectStoreGetAllPreprocessParams;
    typedef ObjectStoreGetPreprocessParams ObjectStoreGetPreprocessParams__tdef;
    typedef ObjectStoreGetAllPreprocessParams ObjectStoreGetAllPreprocessParams__tdef;

    union Value {
        mozilla::AlignedStorage2<ObjectStoreGetPreprocessParams> VObjectStoreGetPreprocessParams;
        mozilla::AlignedStorage2<ObjectStoreGetAllPreprocessParams> VObjectStoreGetAllPreprocessParams;
    };

    ObjectStoreGetPreprocessParams*
    ptr_ObjectStoreGetPreprocessParams()
    {
        return ((mValue).VObjectStoreGetPreprocessParams).addr();
    }
    const ObjectStoreGetPreprocessParams*
    constptr_ObjectStoreGetPreprocessParams() const
    {
        return ((mValue).VObjectStoreGetPreprocessParams).addr();
    }
    ObjectStoreGetAllPreprocessParams*
    ptr_ObjectStoreGetAllPreprocessParams()
    {
        return ((mValue).VObjectStoreGetAllPreprocessParams).addr();
    }
    const ObjectStoreGetAllPreprocessParams*
    constptr_ObjectStoreGetAllPreprocessParams() const
    {
        return ((mValue).VObjectStoreGetAllPreprocessParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT PreprocessParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT PreprocessParams(const ObjectStoreGetPreprocessParams& aOther);

    MOZ_IMPLICIT PreprocessParams(ObjectStoreGetPreprocessParams&& aOther);

    MOZ_IMPLICIT PreprocessParams(const ObjectStoreGetAllPreprocessParams& aOther);

    MOZ_IMPLICIT PreprocessParams(ObjectStoreGetAllPreprocessParams&& aOther);

    MOZ_IMPLICIT PreprocessParams(const PreprocessParams& aOther);

    MOZ_IMPLICIT PreprocessParams(PreprocessParams&& aOther);

    ~PreprocessParams();

    Type
    type() const
    {
        return mType;
    }

    PreprocessParams&
    operator=(const ObjectStoreGetPreprocessParams& aRhs);

    PreprocessParams&
    operator=(ObjectStoreGetPreprocessParams&& aRhs);

    PreprocessParams&
    operator=(const ObjectStoreGetAllPreprocessParams& aRhs);

    PreprocessParams&
    operator=(ObjectStoreGetAllPreprocessParams&& aRhs);

    PreprocessParams&
    operator=(const PreprocessParams& aRhs);

    PreprocessParams&
    operator=(PreprocessParams&& aRhs);

    ObjectStoreGetPreprocessParams&
    get_ObjectStoreGetPreprocessParams()
    {
        AssertSanity(TObjectStoreGetPreprocessParams);
        return (*(ptr_ObjectStoreGetPreprocessParams()));
    }
    const ObjectStoreGetPreprocessParams&
    get_ObjectStoreGetPreprocessParams() const
    {
        AssertSanity(TObjectStoreGetPreprocessParams);
        return (*(constptr_ObjectStoreGetPreprocessParams()));
    }
    operator ObjectStoreGetPreprocessParams&()
    {
        return get_ObjectStoreGetPreprocessParams();
    }
    operator const ObjectStoreGetPreprocessParams&() const
    {
        return get_ObjectStoreGetPreprocessParams();
    }

    ObjectStoreGetAllPreprocessParams&
    get_ObjectStoreGetAllPreprocessParams()
    {
        AssertSanity(TObjectStoreGetAllPreprocessParams);
        return (*(ptr_ObjectStoreGetAllPreprocessParams()));
    }
    const ObjectStoreGetAllPreprocessParams&
    get_ObjectStoreGetAllPreprocessParams() const
    {
        AssertSanity(TObjectStoreGetAllPreprocessParams);
        return (*(constptr_ObjectStoreGetAllPreprocessParams()));
    }
    operator ObjectStoreGetAllPreprocessParams&()
    {
        return get_ObjectStoreGetAllPreprocessParams();
    }
    operator const ObjectStoreGetAllPreprocessParams&() const
    {
        return get_ObjectStoreGetAllPreprocessParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::PreprocessParams>
{
    typedef mozilla::dom::indexedDB::PreprocessParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreGetPreprocessResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreGetPreprocessResponse final
{
private:

public:
    MOZ_IMPLICIT ObjectStoreGetPreprocessResponse()
    {
    }

private:
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreGetPreprocessResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreGetPreprocessResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ObjectStoreGetAllPreprocessResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class ObjectStoreGetAllPreprocessResponse final
{
private:

public:
    MOZ_IMPLICIT ObjectStoreGetAllPreprocessResponse()
    {
    }

private:
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessResponse>
{
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union PreprocessResponse|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
class PreprocessResponse final
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TObjectStoreGetPreprocessResponse,
        TObjectStoreGetAllPreprocessResponse,
        T__Last = TObjectStoreGetAllPreprocessResponse
    };

private:
    typedef mozilla::dom::indexedDB::ObjectStoreGetPreprocessResponse ObjectStoreGetPreprocessResponse;
    typedef mozilla::dom::indexedDB::ObjectStoreGetAllPreprocessResponse ObjectStoreGetAllPreprocessResponse;
    typedef nsresult nsresult__tdef;
    typedef ObjectStoreGetPreprocessResponse ObjectStoreGetPreprocessResponse__tdef;
    typedef ObjectStoreGetAllPreprocessResponse ObjectStoreGetAllPreprocessResponse__tdef;

    union Value {
        mozilla::AlignedStorage2<nsresult> Vnsresult;
        mozilla::AlignedStorage2<ObjectStoreGetPreprocessResponse> VObjectStoreGetPreprocessResponse;
        mozilla::AlignedStorage2<ObjectStoreGetAllPreprocessResponse> VObjectStoreGetAllPreprocessResponse;
    };

    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }
    ObjectStoreGetPreprocessResponse*
    ptr_ObjectStoreGetPreprocessResponse()
    {
        return ((mValue).VObjectStoreGetPreprocessResponse).addr();
    }
    const ObjectStoreGetPreprocessResponse*
    constptr_ObjectStoreGetPreprocessResponse() const
    {
        return ((mValue).VObjectStoreGetPreprocessResponse).addr();
    }
    ObjectStoreGetAllPreprocessResponse*
    ptr_ObjectStoreGetAllPreprocessResponse()
    {
        return ((mValue).VObjectStoreGetAllPreprocessResponse).addr();
    }
    const ObjectStoreGetAllPreprocessResponse*
    constptr_ObjectStoreGetAllPreprocessResponse() const
    {
        return ((mValue).VObjectStoreGetAllPreprocessResponse).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT PreprocessResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT PreprocessResponse(const nsresult& aOther);

    MOZ_IMPLICIT PreprocessResponse(nsresult&& aOther);

    MOZ_IMPLICIT PreprocessResponse(const ObjectStoreGetPreprocessResponse& aOther);

    MOZ_IMPLICIT PreprocessResponse(ObjectStoreGetPreprocessResponse&& aOther);

    MOZ_IMPLICIT PreprocessResponse(const ObjectStoreGetAllPreprocessResponse& aOther);

    MOZ_IMPLICIT PreprocessResponse(ObjectStoreGetAllPreprocessResponse&& aOther);

    MOZ_IMPLICIT PreprocessResponse(const PreprocessResponse& aOther);

    MOZ_IMPLICIT PreprocessResponse(PreprocessResponse&& aOther);

    ~PreprocessResponse();

    Type
    type() const
    {
        return mType;
    }

    PreprocessResponse&
    operator=(const nsresult& aRhs);

    PreprocessResponse&
    operator=(nsresult&& aRhs);

    PreprocessResponse&
    operator=(const ObjectStoreGetPreprocessResponse& aRhs);

    PreprocessResponse&
    operator=(ObjectStoreGetPreprocessResponse&& aRhs);

    PreprocessResponse&
    operator=(const ObjectStoreGetAllPreprocessResponse& aRhs);

    PreprocessResponse&
    operator=(ObjectStoreGetAllPreprocessResponse&& aRhs);

    PreprocessResponse&
    operator=(const PreprocessResponse& aRhs);

    PreprocessResponse&
    operator=(PreprocessResponse&& aRhs);

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    ObjectStoreGetPreprocessResponse&
    get_ObjectStoreGetPreprocessResponse()
    {
        AssertSanity(TObjectStoreGetPreprocessResponse);
        return (*(ptr_ObjectStoreGetPreprocessResponse()));
    }
    const ObjectStoreGetPreprocessResponse&
    get_ObjectStoreGetPreprocessResponse() const
    {
        AssertSanity(TObjectStoreGetPreprocessResponse);
        return (*(constptr_ObjectStoreGetPreprocessResponse()));
    }
    operator ObjectStoreGetPreprocessResponse&()
    {
        return get_ObjectStoreGetPreprocessResponse();
    }
    operator const ObjectStoreGetPreprocessResponse&() const
    {
        return get_ObjectStoreGetPreprocessResponse();
    }

    ObjectStoreGetAllPreprocessResponse&
    get_ObjectStoreGetAllPreprocessResponse()
    {
        AssertSanity(TObjectStoreGetAllPreprocessResponse);
        return (*(ptr_ObjectStoreGetAllPreprocessResponse()));
    }
    const ObjectStoreGetAllPreprocessResponse&
    get_ObjectStoreGetAllPreprocessResponse() const
    {
        AssertSanity(TObjectStoreGetAllPreprocessResponse);
        return (*(constptr_ObjectStoreGetAllPreprocessResponse()));
    }
    operator ObjectStoreGetAllPreprocessResponse&()
    {
        return get_ObjectStoreGetAllPreprocessResponse();
    }
    operator const ObjectStoreGetAllPreprocessResponse&() const
    {
        return get_ObjectStoreGetAllPreprocessResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::indexedDB::PreprocessResponse>
{
    typedef mozilla::dom::indexedDB::PreprocessResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBRequestParent;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace indexedDB {
class PBackgroundIDBRequestChild;
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundIDBRequestChild and PBackgroundIDBRequestParent
//
namespace mozilla {
namespace dom {
namespace indexedDB {
namespace PBackgroundIDBRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::indexedDB::PBackgroundIDBRequestChild>* aChild);

enum MessageType {
    PBackgroundIDBRequestStart = PBackgroundIDBRequestMsgStart << 16,
    Msg_Continue__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Preprocess__ID,
    PBackgroundIDBRequestEnd
};

IPC::Message*
Msg_Continue(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Preprocess(int32_t routingId);



} // namespace PBackgroundIDBRequest
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundIDBRequest_h
