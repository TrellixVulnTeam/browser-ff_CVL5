//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PTabContext_h
#define PTabContext_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "nsPIDOMWindow.h"

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PopupIPCTabContext|
//
namespace mozilla {
namespace dom {
class PopupIPCTabContext final
{
private:
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;

public:
    MOZ_IMPLICIT PopupIPCTabContext() :
        openerParent_(),
        openerChild_(),
        chromeOuterWindowID_()
    {
    }

    MOZ_IMPLICIT PopupIPCTabContext(
            PBrowserParent* _openerParent,
            PBrowserChild* _openerChild,
            const uint64_t& _chromeOuterWindowID) :
        openerParent_(_openerParent),
        openerChild_(_openerChild),
        chromeOuterWindowID_(_chromeOuterWindowID)
    {
    }

    PBrowserParent*&
    openerParent()
    {
        return openerParent_;
    }
    PBrowserParent*
    openerParent() const
    {
        return openerParent_;
    }

    PBrowserChild*&
    openerChild()
    {
        return openerChild_;
    }
    PBrowserChild*
    openerChild() const
    {
        return openerChild_;
    }

    uint64_t&
    chromeOuterWindowID()
    {
        return chromeOuterWindowID_;
    }
    const uint64_t&
    chromeOuterWindowID() const
    {
        return chromeOuterWindowID_;
    }

private:
    PBrowserParent* openerParent_;
    PBrowserChild* openerChild_;
    uint64_t chromeOuterWindowID_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PopupIPCTabContext>
{
    typedef mozilla::dom::PopupIPCTabContext paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FrameIPCTabContext|
//
namespace mozilla {
namespace dom {
class FrameIPCTabContext final
{
private:

public:
    MOZ_IMPLICIT FrameIPCTabContext() :
        presentationURL_(),
        showFocusRings_(),
        chromeOuterWindowID_(),
        maxTouchPoints_()
    {
    }

    MOZ_IMPLICIT FrameIPCTabContext(
            const uint64_t& _chromeOuterWindowID,
            const nsString& _presentationURL,
            const UIStateChangeType& _showFocusRings,
            const uint32_t& _maxTouchPoints) :
        presentationURL_(_presentationURL),
        showFocusRings_(_showFocusRings),
        chromeOuterWindowID_(_chromeOuterWindowID),
        maxTouchPoints_(_maxTouchPoints)
    {
    }

    uint64_t&
    chromeOuterWindowID()
    {
        return chromeOuterWindowID_;
    }
    const uint64_t&
    chromeOuterWindowID() const
    {
        return chromeOuterWindowID_;
    }

    nsString&
    presentationURL()
    {
        return presentationURL_;
    }
    const nsString&
    presentationURL() const
    {
        return presentationURL_;
    }

    UIStateChangeType&
    showFocusRings()
    {
        return showFocusRings_;
    }
    const UIStateChangeType&
    showFocusRings() const
    {
        return showFocusRings_;
    }

    uint32_t&
    maxTouchPoints()
    {
        return maxTouchPoints_;
    }
    const uint32_t&
    maxTouchPoints() const
    {
        return maxTouchPoints_;
    }

private:
    nsString presentationURL_;
    UIStateChangeType showFocusRings_;
    uint64_t chromeOuterWindowID_;
    uint32_t maxTouchPoints_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::FrameIPCTabContext>
{
    typedef mozilla::dom::FrameIPCTabContext paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct JSPluginFrameIPCTabContext|
//
namespace mozilla {
namespace dom {
class JSPluginFrameIPCTabContext final
{
private:

public:
    MOZ_IMPLICIT JSPluginFrameIPCTabContext() :
        jsPluginId_()
    {
    }

    MOZ_IMPLICIT JSPluginFrameIPCTabContext(const uint32_t& _jsPluginId) :
        jsPluginId_(_jsPluginId)
    {
    }

    uint32_t&
    jsPluginId()
    {
        return jsPluginId_;
    }
    const uint32_t&
    jsPluginId() const
    {
        return jsPluginId_;
    }

private:
    uint32_t jsPluginId_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::JSPluginFrameIPCTabContext>
{
    typedef mozilla::dom::JSPluginFrameIPCTabContext paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union IPCTabContext|
//
namespace mozilla {
namespace dom {
class IPCTabContext final
{
public:
    enum Type {
        T__None,
        TPopupIPCTabContext = 1,
        TFrameIPCTabContext,
        TJSPluginFrameIPCTabContext,
        T__Last = TJSPluginFrameIPCTabContext
    };

private:
    typedef mozilla::dom::PopupIPCTabContext PopupIPCTabContext;
    typedef mozilla::dom::FrameIPCTabContext FrameIPCTabContext;
    typedef mozilla::dom::JSPluginFrameIPCTabContext JSPluginFrameIPCTabContext;
    typedef PopupIPCTabContext PopupIPCTabContext__tdef;
    typedef FrameIPCTabContext FrameIPCTabContext__tdef;
    typedef JSPluginFrameIPCTabContext JSPluginFrameIPCTabContext__tdef;

    union Value {
        mozilla::AlignedStorage2<PopupIPCTabContext> VPopupIPCTabContext;
        mozilla::AlignedStorage2<FrameIPCTabContext> VFrameIPCTabContext;
        mozilla::AlignedStorage2<JSPluginFrameIPCTabContext> VJSPluginFrameIPCTabContext;
    };

    PopupIPCTabContext*
    ptr_PopupIPCTabContext()
    {
        return ((mValue).VPopupIPCTabContext).addr();
    }
    const PopupIPCTabContext*
    constptr_PopupIPCTabContext() const
    {
        return ((mValue).VPopupIPCTabContext).addr();
    }
    FrameIPCTabContext*
    ptr_FrameIPCTabContext()
    {
        return ((mValue).VFrameIPCTabContext).addr();
    }
    const FrameIPCTabContext*
    constptr_FrameIPCTabContext() const
    {
        return ((mValue).VFrameIPCTabContext).addr();
    }
    JSPluginFrameIPCTabContext*
    ptr_JSPluginFrameIPCTabContext()
    {
        return ((mValue).VJSPluginFrameIPCTabContext).addr();
    }
    const JSPluginFrameIPCTabContext*
    constptr_JSPluginFrameIPCTabContext() const
    {
        return ((mValue).VJSPluginFrameIPCTabContext).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT IPCTabContext() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT IPCTabContext(const PopupIPCTabContext& aOther);

    MOZ_IMPLICIT IPCTabContext(PopupIPCTabContext&& aOther);

    MOZ_IMPLICIT IPCTabContext(const FrameIPCTabContext& aOther);

    MOZ_IMPLICIT IPCTabContext(FrameIPCTabContext&& aOther);

    MOZ_IMPLICIT IPCTabContext(const JSPluginFrameIPCTabContext& aOther);

    MOZ_IMPLICIT IPCTabContext(JSPluginFrameIPCTabContext&& aOther);

    MOZ_IMPLICIT IPCTabContext(const IPCTabContext& aOther);

    MOZ_IMPLICIT IPCTabContext(IPCTabContext&& aOther);

    ~IPCTabContext();

    Type
    type() const
    {
        return mType;
    }

    IPCTabContext&
    operator=(const PopupIPCTabContext& aRhs);

    IPCTabContext&
    operator=(PopupIPCTabContext&& aRhs);

    IPCTabContext&
    operator=(const FrameIPCTabContext& aRhs);

    IPCTabContext&
    operator=(FrameIPCTabContext&& aRhs);

    IPCTabContext&
    operator=(const JSPluginFrameIPCTabContext& aRhs);

    IPCTabContext&
    operator=(JSPluginFrameIPCTabContext&& aRhs);

    IPCTabContext&
    operator=(const IPCTabContext& aRhs);

    IPCTabContext&
    operator=(IPCTabContext&& aRhs);

    PopupIPCTabContext&
    get_PopupIPCTabContext()
    {
        AssertSanity(TPopupIPCTabContext);
        return (*(ptr_PopupIPCTabContext()));
    }
    const PopupIPCTabContext&
    get_PopupIPCTabContext() const
    {
        AssertSanity(TPopupIPCTabContext);
        return (*(constptr_PopupIPCTabContext()));
    }
    operator PopupIPCTabContext&()
    {
        return get_PopupIPCTabContext();
    }
    operator const PopupIPCTabContext&() const
    {
        return get_PopupIPCTabContext();
    }

    FrameIPCTabContext&
    get_FrameIPCTabContext()
    {
        AssertSanity(TFrameIPCTabContext);
        return (*(ptr_FrameIPCTabContext()));
    }
    const FrameIPCTabContext&
    get_FrameIPCTabContext() const
    {
        AssertSanity(TFrameIPCTabContext);
        return (*(constptr_FrameIPCTabContext()));
    }
    operator FrameIPCTabContext&()
    {
        return get_FrameIPCTabContext();
    }
    operator const FrameIPCTabContext&() const
    {
        return get_FrameIPCTabContext();
    }

    JSPluginFrameIPCTabContext&
    get_JSPluginFrameIPCTabContext()
    {
        AssertSanity(TJSPluginFrameIPCTabContext);
        return (*(ptr_JSPluginFrameIPCTabContext()));
    }
    const JSPluginFrameIPCTabContext&
    get_JSPluginFrameIPCTabContext() const
    {
        AssertSanity(TJSPluginFrameIPCTabContext);
        return (*(constptr_JSPluginFrameIPCTabContext()));
    }
    operator JSPluginFrameIPCTabContext&()
    {
        return get_JSPluginFrameIPCTabContext();
    }
    operator const JSPluginFrameIPCTabContext&() const
    {
        return get_JSPluginFrameIPCTabContext();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::IPCTabContext>
{
    typedef mozilla::dom::IPCTabContext paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PTabContext_h
