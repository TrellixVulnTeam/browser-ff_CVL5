//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PContentParent_h
#define PContentParent_h

#include "mozilla/dom/PContent.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
class nsIFile;

// Headers for things that cannot be forward declared
#include "PDMFactory.h"
#include "SharedFontList.h"
#include "Units.h"
#include "base/process.h"
#include "base/shared_memory.h"
#include "gfxFontEntry.h"
#include "gfxFontUtils.h"
#include "mozilla/ContentBlocking.h"
#include "mozilla/ContentBlockingNotifier.h"
#include "mozilla/HalTypes.h"
#include "mozilla/PermissionDelegateHandler.h"
#include "mozilla/RemoteDecoderManagerChild.h"
#include "mozilla/TelemetryComms.h"
#include "mozilla/UntrustedModulesData.h"
#include "mozilla/a11y/IPCTypes.h"
#include "mozilla/dom/BrowsingContext.h"
#include "mozilla/dom/FeaturePolicy.h"
#include "mozilla/dom/JSActor.h"
#include "mozilla/dom/MediaControlKeySource.h"
#include "mozilla/dom/MediaMetadata.h"
#include "mozilla/dom/MediaPlaybackStatus.h"
#include "mozilla/dom/MediaSession.h"
#include "mozilla/dom/MediaSessionBinding.h"
#include "mozilla/dom/NativeThreadId.h"
#include "mozilla/dom/PWindowGlobal.h"
#include "mozilla/dom/PerformanceTiming.h"
#include "mozilla/dom/ServiceWorkerShutdownState.h"
#include "mozilla/dom/WindowContext.h"
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/gfx/2D.h"
#include "mozilla/ipc/BackgroundUtils.h"
#include "mozilla/ipc/CrossProcessMutex.h"
#include "mozilla/layers/CompositorOptions.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/widget/WidgetMessageUtils.h"
#include "nsIContentViewer.h"

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorManagerParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorManagerChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentPermissionRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentPermissionRequestChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PCycleCollectWithLogsParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PCycleCollectWithLogsChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PExternalHelperAppParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PExternalHelperAppChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PHandlerServiceParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PHandlerServiceChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {
class PHalParent;
} // namespace hal_sandbox
} // namespace mozilla
namespace mozilla {
namespace hal_sandbox {
class PHalChild;
} // namespace hal_sandbox
} // namespace mozilla

namespace mozilla {
namespace devtools {
class PHeapSnapshotTempFileHelperParent;
} // namespace devtools
} // namespace mozilla
namespace mozilla {
namespace devtools {
class PHeapSnapshotTempFileHelperChild;
} // namespace devtools
} // namespace mozilla

namespace mozilla {
class PProcessHangMonitorParent;
} // namespace mozilla
namespace mozilla {
class PProcessHangMonitorChild;
} // namespace mozilla

namespace mozilla {
namespace layers {
class PImageBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PImageBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PLoginReputationParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PLoginReputationChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace media {
class PMediaParent;
} // namespace media
} // namespace mozilla
namespace mozilla {
namespace media {
class PMediaChild;
} // namespace media
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace extensions {
class PStreamFilterParent;
} // namespace extensions
} // namespace mozilla
namespace mozilla {
namespace extensions {
class PStreamFilterChild;
} // namespace extensions
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPContentParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPContentChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPServiceParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPServiceChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginModuleChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintingParent;
} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace embedding {
class PPrintingChild;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace docshell {
class POfflineCacheUpdateParent;
} // namespace docshell
} // namespace mozilla
namespace mozilla {
namespace docshell {
class POfflineCacheUpdateChild;
} // namespace docshell
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSpeechSynthesisParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSpeechSynthesisChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PTestShellParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PTestShellChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteSpellcheckEngineParent;
} // namespace mozilla
namespace mozilla {
class PRemoteSpellcheckEngineChild;
} // namespace mozilla

namespace mozilla {
class PWebBrowserPersistDocumentParent;
} // namespace mozilla
namespace mozilla {
class PWebBrowserPersistDocumentChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebrtcGlobalParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWebrtcGlobalChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWindowGlobalParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWindowGlobalChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PPresentationChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PURLClassifierChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierLocalParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PURLClassifierLocalChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace gfx {
class PVRManagerParent;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PVRManagerChild;
} // namespace gfx
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderManagerParent;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla

namespace mozilla {
class PProfilerParent;
} // namespace mozilla
namespace mozilla {
class PProfilerChild;
} // namespace mozilla

namespace mozilla {
namespace loader {
class PScriptCacheParent;
} // namespace loader
} // namespace mozilla
namespace mozilla {
namespace loader {
class PScriptCacheChild;
} // namespace loader
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSessionStorageObserverParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PSessionStorageObserverChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PBenchmarkStorageParent;
} // namespace mozilla
namespace mozilla {
class PBenchmarkStorageChild;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PHandlerServiceParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PTestShellParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace media {
class PMediaParent;
} // namespace media
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSpeechSynthesisParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PLoginReputationParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintingParent;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
class PBenchmarkStorageParent;
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebrtcGlobalParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PExternalHelperAppParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {
class PHalParent;
} // namespace hal_sandbox
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierLocalParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PCycleCollectWithLogsParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentPermissionRequestParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace devtools {
class PHeapSnapshotTempFileHelperParent;
} // namespace devtools
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PWebBrowserPersistDocumentParent;
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PURLClassifierParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PPresentationParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace loader {
class PScriptCacheParent;
} // namespace loader
} // namespace mozilla

namespace mozilla {
namespace dom {
class PSessionStorageObserverParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace docshell {
class POfflineCacheUpdateParent;
} // namespace docshell
} // namespace mozilla

namespace mozilla {
class PRemoteSpellcheckEngineParent;
} // namespace mozilla

class nsIDOMGeoPosition;

class nsIAlertNotification;

struct ChromePackage;

struct SubstitutionMapping;

struct OverrideMapping;

namespace IPC {
struct Permission;
} // namespace IPC

namespace IPC {
class Principal;
} // namespace IPC

namespace mozilla {
namespace dom {
class MessagePort;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace ipc {
class StructuredCloneData;
} // namespace ipc
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
struct TextureFactoryIdentifier;
} // namespace layers
} // namespace mozilla

class nsDocShellLoadState;

class nsILayoutHistoryState;

namespace mozilla {
namespace dom {
class SessionHistoryInfo;
} // namespace dom
} // namespace mozilla

struct nsPoint;

namespace mozilla {
namespace dom {
struct LoadingSessionHistoryInfo;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PContentParent :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::dom::PHandlerServiceParent;
    friend class mozilla::ipc::PTestShellParent;
    friend class mozilla::media::PMediaParent;
    friend class mozilla::dom::PSpeechSynthesisParent;
    friend class mozilla::dom::PLoginReputationParent;
    friend class mozilla::embedding::PPrintingParent;
    friend class mozilla::PBenchmarkStorageParent;
    friend class mozilla::dom::PWebrtcGlobalParent;
    friend class mozilla::dom::PExternalHelperAppParent;
    friend class mozilla::ipc::PFileDescriptorSetParent;
    friend class mozilla::PRemoteLazyInputStreamParent;
    friend class mozilla::hal_sandbox::PHalParent;
    friend class mozilla::dom::PURLClassifierLocalParent;
    friend class mozilla::dom::PBrowserParent;
    friend class mozilla::dom::PCycleCollectWithLogsParent;
    friend class mozilla::dom::PContentPermissionRequestParent;
    friend class mozilla::devtools::PHeapSnapshotTempFileHelperParent;
    friend class mozilla::net::PNeckoParent;
    friend class mozilla::PWebBrowserPersistDocumentParent;
    friend class mozilla::ipc::PChildToParentStreamParent;
    friend class mozilla::ipc::PParentToChildStreamParent;
    friend class mozilla::dom::PURLClassifierParent;
    friend class mozilla::dom::PPresentationParent;
    friend class mozilla::loader::PScriptCacheParent;
    friend class mozilla::dom::PSessionStorageObserverParent;
    friend class mozilla::docshell::POfflineCacheUpdateParent;
    friend class mozilla::PRemoteSpellcheckEngineParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::AndroidSystemInfo AndroidSystemInfo;
    typedef mozilla::gfx::BackendType BackendType;
    typedef mozilla::dom::BlobURLDataRequestResult BlobURLDataRequestResult;
    typedef mozilla::dom::BlobURLRegistrationData BlobURLRegistrationData;
    typedef mozilla::ContentBlockingNotifier::BlockingDecision BlockingDecision;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::dom::BrowsingContextInitializer BrowsingContextInitializer;
    typedef mozilla::dom::BrowsingContextTransaction BrowsingContextTransaction;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::psm::ByteArray ByteArray;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::Telemetry::ChildEventData ChildEventData;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClipboardCapabilities ClipboardCapabilities;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::LookAndFeel::ColorID ColorID;
    typedef mozilla::layers::CompositorOptions CompositorOptions;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::gfx::ContentDeviceData ContentDeviceData;
    typedef mozilla::dom::ContentParentId ContentParentId;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::gfx::D3D11DeviceStatus D3D11DeviceStatus;
    typedef mozilla::psm::DataStorageEntry DataStorageEntry;
    typedef mozilla::psm::DataStorageItem DataStorageItem;
    typedef mozilla::DataStorageType DataStorageType;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::psm::DelegatedCredentialInfoArg DelegatedCredentialInfoArg;
    typedef mozilla::PermissionDelegateHandler::DelegatedPermissionList DelegatedPermissionList;
    typedef mozilla::gfx::DevicePrefs DevicePrefs;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::Telemetry::DiscardedData DiscardedData;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::dom::DomainPolicyClone DomainPolicyClone;
    typedef mozilla::Telemetry::DynamicScalarDefinition DynamicScalarDefinition;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::plugins::FakePluginTag FakePluginTag;
    typedef mozilla::gfx::FeatureFailure FeatureFailure;
    typedef mozilla::dom::FeaturePolicy FeaturePolicy;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::gfx::FeatureStatus FeatureStatus;
    typedef mozilla::dom::FileDescOrError FileDescOrError;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FrameIPCTabContext FrameIPCTabContext;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::widget::FullLookAndFeel FullLookAndFeel;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::dom::GMPAPITags GMPAPITags;
    typedef mozilla::dom::GMPCapabilityData GMPCapabilityData;
    typedef mozilla::gfx::GPUDeviceData GPUDeviceData;
    typedef mozilla::dom::GetFilesResponseFailure GetFilesResponseFailure;
    typedef mozilla::dom::GetFilesResponseResult GetFilesResponseResult;
    typedef mozilla::dom::GetFilesResponseSuccess GetFilesResponseSuccess;
    typedef mozilla::gfx::GfxInfoFeatureStatus GfxInfoFeatureStatus;
    typedef mozilla::gfx::GfxVarUpdate GfxVarUpdate;
    typedef mozilla::gfx::GfxVarValue GfxVarValue;
    typedef mozilla::HangAnnotation HangAnnotation;
    typedef mozilla::HangDetails HangDetails;
    typedef mozilla::HangEntry HangEntry;
    typedef mozilla::HangEntryBufOffset HangEntryBufOffset;
    typedef mozilla::HangEntryChromeScript HangEntryChromeScript;
    typedef mozilla::HangEntryContent HangEntryContent;
    typedef mozilla::HangEntryJit HangEntryJit;
    typedef mozilla::HangEntryModOffset HangEntryModOffset;
    typedef mozilla::HangEntryProgCounter HangEntryProgCounter;
    typedef mozilla::HangEntrySuppressed HangEntrySuppressed;
    typedef mozilla::HangEntryWasm HangEntryWasm;
    typedef mozilla::HangModule HangModule;
    typedef mozilla::HangStack HangStack;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::Telemetry::HistogramAccumulation HistogramAccumulation;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::a11y::IHandlerControlHolder IHandlerControlHolder;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPCTabContext IPCTabContext;
    typedef mozilla::dom::IPCURLClassifierFeature IPCURLClassifierFeature;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::LookAndFeel::IntID IntID;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::dom::JSPluginFrameIPCTabContext JSPluginFrameIPCTabContext;
    typedef mozilla::dom::JSProcessActorInfo JSProcessActorInfo;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::dom::JSWindowActorEventDecl JSWindowActorEventDecl;
    typedef mozilla::dom::JSWindowActorInfo JSWindowActorInfo;
    typedef mozilla::Telemetry::KeyedHistogramAccumulation KeyedHistogramAccumulation;
    typedef mozilla::Telemetry::KeyedScalarAction KeyedScalarAction;
    typedef mozilla::layers::LayersId LayersId;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::widget::LookAndFeelCache LookAndFeelCache;
    typedef mozilla::widget::LookAndFeelColor LookAndFeelColor;
    typedef mozilla::widget::LookAndFeelData LookAndFeelData;
    typedef mozilla::widget::LookAndFeelFont LookAndFeelFont;
    typedef mozilla::widget::LookAndFeelInt LookAndFeelInt;
    typedef mozilla::widget::LookAndFeelTables LookAndFeelTables;
    typedef mozilla::widget::LookAndFeelTheme LookAndFeelTheme;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::dom::MaybeDiscardedWindowContext MaybeDiscardedWindowContext;
    typedef mozilla::dom::MediaAudibleState MediaAudibleState;
    typedef mozilla::PDMFactory::MediaCodecsSupported MediaCodecsSupported;
    typedef mozilla::dom::MediaControlAction MediaControlAction;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MediaMetadataBase MediaMetadataBase;
    typedef mozilla::dom::MediaPlaybackState MediaPlaybackState;
    typedef mozilla::dom::MediaSessionAction MediaSessionAction;
    typedef mozilla::dom::MediaSessionPlaybackState MediaSessionPlaybackState;
    typedef mozilla::dom::MemoryReport MemoryReport;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePort MessagePort;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::ModulePaths ModulePaths;
    typedef mozilla::ModulesMapResult ModulesMapResult;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::dom::NotificationEventData NotificationEventData;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::dom::PerformanceTimingData PerformanceTimingData;
    typedef IPC::Permission Permission;
    typedef mozilla::dom::PermissionChoice PermissionChoice;
    typedef mozilla::dom::PermissionRequest PermissionRequest;
    typedef mozilla::dom::PermitUnloadResult PermitUnloadResult;
    typedef mozilla::plugins::PluginIdentifier PluginIdentifier;
    typedef mozilla::plugins::PluginTag PluginTag;
    typedef mozilla::fontlist::Pointer Pointer;
    typedef mozilla::dom::PopupIPCTabContext PopupIPCTabContext;
    typedef mozilla::dom::PositionState PositionState;
    typedef mozilla::dom::PostMessageData PostMessageData;
    typedef mozilla::dom::Pref Pref;
    typedef mozilla::dom::PrefValue PrefValue;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef IPC::Principal Principal;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::dom::ServiceWorkerShutdownState::Progress Progress;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::RemoteDecodeIn RemoteDecodeIn;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::Telemetry::ScalarAction ScalarAction;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::dom::ServiceWorkerConfiguration ServiceWorkerConfiguration;
    typedef mozilla::dom::ServiceWorkerRegistrationData ServiceWorkerRegistrationData;
    typedef mozilla::dom::SessionHistoryInfo SessionHistoryInfo;
    typedef base::SharedMemoryHandle SharedMemoryHandle;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ContentBlockingNotifier::StorageAccessPermissionGrantedReason StorageAccessPermissionGrantedReason;
    typedef mozilla::ContentBlocking::StorageAccessPromptChoices StorageAccessPromptChoices;
    typedef mozilla::dom::StringBundleDescriptor StringBundleDescriptor;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::dom::ipc::StructuredCloneData StructuredCloneData;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::dom::SyncedContextInitializer SyncedContextInitializer;
    typedef mozilla::dom::SystemFontListEntry SystemFontListEntry;
    typedef mozilla::dom::SystemParameterKVPair SystemParameterKVPair;
    typedef mozilla::dom::SystemParameterValue SystemParameterValue;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::layers::TextureFactoryIdentifier TextureFactoryIdentifier;
    typedef mozilla::widget::ThemeChangeKind ThemeChangeKind;
    typedef mozilla::TimeDuration TimeDuration;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::UntrustedModulesData UntrustedModulesData;
    typedef mozilla::gfx::D3D11Checks::VideoFormatOption VideoFormatOption;
    typedef mozilla::gfx::D3D11Checks::VideoFormatOptionSet VideoFormatOptionSet;
    typedef mozilla::dom::VisitedQueryResult VisitedQueryResult;
    typedef mozilla::dom::WindowContextInitializer WindowContextInitializer;
    typedef mozilla::dom::WindowContextTransaction WindowContextTransaction;
    typedef mozilla::dom::WindowGlobalInit WindowGlobalInit;
    typedef mozilla::dom::XPCOMInitData XPCOMInitData;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::layers::PCompositorManagerParent PCompositorManagerParent;
    typedef mozilla::layers::PCompositorManagerChild PCompositorManagerChild;
    typedef mozilla::dom::PContentPermissionRequestParent PContentPermissionRequestParent;
    typedef mozilla::dom::PContentPermissionRequestChild PContentPermissionRequestChild;
    typedef mozilla::dom::PCycleCollectWithLogsParent PCycleCollectWithLogsParent;
    typedef mozilla::dom::PCycleCollectWithLogsChild PCycleCollectWithLogsChild;
    typedef mozilla::dom::PExternalHelperAppParent PExternalHelperAppParent;
    typedef mozilla::dom::PExternalHelperAppChild PExternalHelperAppChild;
    typedef mozilla::dom::PHandlerServiceParent PHandlerServiceParent;
    typedef mozilla::dom::PHandlerServiceChild PHandlerServiceChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::hal_sandbox::PHalParent PHalParent;
    typedef mozilla::hal_sandbox::PHalChild PHalChild;
    typedef mozilla::devtools::PHeapSnapshotTempFileHelperParent PHeapSnapshotTempFileHelperParent;
    typedef mozilla::devtools::PHeapSnapshotTempFileHelperChild PHeapSnapshotTempFileHelperChild;
    typedef mozilla::PProcessHangMonitorParent PProcessHangMonitorParent;
    typedef mozilla::PProcessHangMonitorChild PProcessHangMonitorChild;
    typedef mozilla::layers::PImageBridgeParent PImageBridgeParent;
    typedef mozilla::layers::PImageBridgeChild PImageBridgeChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;
    typedef mozilla::dom::PLoginReputationParent PLoginReputationParent;
    typedef mozilla::dom::PLoginReputationChild PLoginReputationChild;
    typedef mozilla::media::PMediaParent PMediaParent;
    typedef mozilla::media::PMediaChild PMediaChild;
    typedef mozilla::net::PNeckoParent PNeckoParent;
    typedef mozilla::net::PNeckoChild PNeckoChild;
    typedef mozilla::extensions::PStreamFilterParent PStreamFilterParent;
    typedef mozilla::extensions::PStreamFilterChild PStreamFilterChild;
    typedef mozilla::gmp::PGMPContentParent PGMPContentParent;
    typedef mozilla::gmp::PGMPContentChild PGMPContentChild;
    typedef mozilla::gmp::PGMPServiceParent PGMPServiceParent;
    typedef mozilla::gmp::PGMPServiceChild PGMPServiceChild;
    typedef mozilla::plugins::PPluginModuleParent PPluginModuleParent;
    typedef mozilla::plugins::PPluginModuleChild PPluginModuleChild;
    typedef mozilla::gmp::PGMPParent PGMPParent;
    typedef mozilla::gmp::PGMPChild PGMPChild;
    typedef mozilla::embedding::PPrintingParent PPrintingParent;
    typedef mozilla::embedding::PPrintingChild PPrintingChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::docshell::POfflineCacheUpdateParent POfflineCacheUpdateParent;
    typedef mozilla::docshell::POfflineCacheUpdateChild POfflineCacheUpdateChild;
    typedef mozilla::dom::PSpeechSynthesisParent PSpeechSynthesisParent;
    typedef mozilla::dom::PSpeechSynthesisChild PSpeechSynthesisChild;
    typedef mozilla::ipc::PTestShellParent PTestShellParent;
    typedef mozilla::ipc::PTestShellChild PTestShellChild;
    typedef mozilla::PRemoteSpellcheckEngineParent PRemoteSpellcheckEngineParent;
    typedef mozilla::PRemoteSpellcheckEngineChild PRemoteSpellcheckEngineChild;
    typedef mozilla::PWebBrowserPersistDocumentParent PWebBrowserPersistDocumentParent;
    typedef mozilla::PWebBrowserPersistDocumentChild PWebBrowserPersistDocumentChild;
    typedef mozilla::dom::PWebrtcGlobalParent PWebrtcGlobalParent;
    typedef mozilla::dom::PWebrtcGlobalChild PWebrtcGlobalChild;
    typedef mozilla::dom::PWindowGlobalParent PWindowGlobalParent;
    typedef mozilla::dom::PWindowGlobalChild PWindowGlobalChild;
    typedef mozilla::dom::PPresentationParent PPresentationParent;
    typedef mozilla::dom::PPresentationChild PPresentationChild;
    typedef mozilla::dom::PURLClassifierParent PURLClassifierParent;
    typedef mozilla::dom::PURLClassifierChild PURLClassifierChild;
    typedef mozilla::dom::PURLClassifierLocalParent PURLClassifierLocalParent;
    typedef mozilla::dom::PURLClassifierLocalChild PURLClassifierLocalChild;
    typedef mozilla::gfx::PVRManagerParent PVRManagerParent;
    typedef mozilla::gfx::PVRManagerChild PVRManagerChild;
    typedef mozilla::PRemoteDecoderManagerParent PRemoteDecoderManagerParent;
    typedef mozilla::PRemoteDecoderManagerChild PRemoteDecoderManagerChild;
    typedef mozilla::PProfilerParent PProfilerParent;
    typedef mozilla::PProfilerChild PProfilerChild;
    typedef mozilla::loader::PScriptCacheParent PScriptCacheParent;
    typedef mozilla::loader::PScriptCacheChild PScriptCacheChild;
    typedef mozilla::dom::PSessionStorageObserverParent PSessionStorageObserverParent;
    typedef mozilla::dom::PSessionStorageObserverChild PSessionStorageObserverChild;
    typedef mozilla::PBenchmarkStorageParent PBenchmarkStorageParent;
    typedef mozilla::PBenchmarkStorageChild PBenchmarkStorageChild;

public:
    typedef MozPromise<uint32_t, ResponseRejectReason, true> RequestMemoryReportPromise;
    typedef MozPromise<mozilla::Maybe<UntrustedModulesData>, ResponseRejectReason, true> GetUntrustedModulesDataPromise;
    typedef MozPromise<nsCString, ResponseRejectReason, true> CollectPerfStatsJSONPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> FlushCodeCoverageCountersPromise;
    typedef MozPromise<nsresult, ResponseRejectReason, true> CrossProcessRedirectPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> LoadURIPromise;
    typedef MozPromise<PermitUnloadResult, ResponseRejectReason, true> DispatchBeforeUnloadToSubtreePromise;
    typedef std::function<void(Tuple<const mozilla::Maybe<LoadingSessionHistoryInfo>&, const int32_t&, const int32_t&>)> GetLoadingSessionHistoryInfoFromParentResolver;
    typedef std::function<void(Endpoint<mozilla::extensions::PStreamFilterChild>&&)> InitStreamFilterResolver;
    typedef std::function<void(const FileDescOrError&)> CreateAudioIPCConnectionResolver;
    typedef std::function<void(const CreatedWindowInfo&)> CreateWindowResolver;
    typedef std::function<void(const nsresult&)> AddCertExceptionResolver;
    typedef std::function<void(const bool&)> AutomaticStorageAccessPermissionCanBeGrantedResolver;
    typedef std::function<void(const bool&)> StorageAccessPermissionGrantedForOriginResolver;
    typedef std::function<void(const mozilla::Maybe<StorageAccessPromptChoices>&)> CompleteAllowAccessForResolver;
    typedef std::function<void(mozilla::Maybe<ModulesMapResult>&&)> GetModulesTrustResolver;
    typedef std::function<void(Tuple<const bool&, const mozilla::Maybe<RefPtr<nsDocShellLoadState>>&, const mozilla::Maybe<bool>&>)> NotifyOnHistoryReloadResolver;
    typedef std::function<void(const int32_t&)> HistoryGoResolver;
    typedef std::function<void(const BlobURLDataRequestResult&)> BlobURLDataRequestResolver;
    typedef MozPromise<bool, ResponseRejectReason, true> DiscardBrowsingContextPromise;
    typedef std::function<void(const bool&)> DiscardBrowsingContextResolver;
    typedef MozPromise<bool, ResponseRejectReason, true> DiscardWindowContextPromise;
    typedef MozPromise<ByteBuf, ResponseRejectReason, true> FlushFOGDataPromise;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPFileDescriptorSetConstructor(
            PFileDescriptorSetParent* actor,
            const FileDescriptor& fd);
    virtual mozilla::ipc::IPCResult
    RecvPWebBrowserPersistDocumentConstructor(
            PWebBrowserPersistDocumentParent* actor,
            PBrowserParent* aBrowser,
            const MaybeDiscardedBrowsingContext& aContext);
    virtual mozilla::ipc::IPCResult
    RecvPRemoteSpellcheckEngineConstructor(PRemoteSpellcheckEngineParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPHalConstructor(PHalParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPHeapSnapshotTempFileHelperConstructor(PHeapSnapshotTempFileHelperParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPNeckoConstructor(PNeckoParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPPrintingConstructor(PPrintingParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPChildToParentStreamConstructor(PChildToParentStreamParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPSpeechSynthesisConstructor(PSpeechSynthesisParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPMediaConstructor(PMediaParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPWebrtcGlobalConstructor(PWebrtcGlobalParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPPresentationConstructor(PPresentationParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPURLClassifierConstructor(
            PURLClassifierParent* actor,
            const Principal& principal,
            bool* success);
    virtual mozilla::ipc::IPCResult
    RecvPURLClassifierLocalConstructor(
            PURLClassifierLocalParent* actor,
            nsIURI* uri,
            nsTArray<IPCURLClassifierFeature>&& features);
    virtual mozilla::ipc::IPCResult
    RecvPLoginReputationConstructor(
            PLoginReputationParent* actor,
            nsIURI* formURI);
    virtual mozilla::ipc::IPCResult
    RecvPSessionStorageObserverConstructor(PSessionStorageObserverParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPBenchmarkStorageConstructor(PBenchmarkStorageParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPExternalHelperAppConstructor(
            PExternalHelperAppParent* actor,
            nsIURI* uri,
            const mozilla::Maybe<LoadInfoArgs>& loadInfoArgs,
            const nsCString& aMimeContentType,
            const nsCString& aContentDisposition,
            const uint32_t& aContentDispositionHint,
            const nsString& aContentDispositionFilename,
            const bool& aForceSave,
            const int64_t& aContentLength,
            const bool& aWasFileChannel,
            nsIURI* aReferrer,
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aShouldCloseWindow);
    virtual mozilla::ipc::IPCResult
    RecvPHandlerServiceConstructor(PHandlerServiceParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPOfflineCacheUpdateConstructor(
            POfflineCacheUpdateParent* actor,
            nsIURI* manifestURI,
            nsIURI* documentURI,
            const PrincipalInfo& loadingPrincipal,
            const bool& stickDocument,
            const CookieJarSettingsArgs& cookieJarSettings);
    virtual mozilla::ipc::IPCResult
    RecvPContentPermissionRequestConstructor(
            PContentPermissionRequestParent* actor,
            nsTArray<PermissionRequest>&& aRequests,
            const Principal& aPrincipal,
            const Principal& aTopLevelPrincipal,
            const bool& aIsHandlingUserInput,
            const bool& aMaybeUnsafePermissionDelegate,
            const TabId& tabId);
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PContentParent();

    virtual ~PContentParent();

public:
    void
    ManagedPBrowserParent(nsTArray<PBrowserParent*>& aArr) const;
    const ManagedContainer<PBrowserParent>&
    ManagedPBrowserParent() const;

    void
    ManagedPContentPermissionRequestParent(nsTArray<PContentPermissionRequestParent*>& aArr) const;
    const ManagedContainer<PContentPermissionRequestParent>&
    ManagedPContentPermissionRequestParent() const;

    void
    ManagedPCycleCollectWithLogsParent(nsTArray<PCycleCollectWithLogsParent*>& aArr) const;
    const ManagedContainer<PCycleCollectWithLogsParent>&
    ManagedPCycleCollectWithLogsParent() const;

    void
    ManagedPExternalHelperAppParent(nsTArray<PExternalHelperAppParent*>& aArr) const;
    const ManagedContainer<PExternalHelperAppParent>&
    ManagedPExternalHelperAppParent() const;

    void
    ManagedPFileDescriptorSetParent(nsTArray<PFileDescriptorSetParent*>& aArr) const;
    const ManagedContainer<PFileDescriptorSetParent>&
    ManagedPFileDescriptorSetParent() const;

    void
    ManagedPHalParent(nsTArray<PHalParent*>& aArr) const;
    const ManagedContainer<PHalParent>&
    ManagedPHalParent() const;

    void
    ManagedPHandlerServiceParent(nsTArray<PHandlerServiceParent*>& aArr) const;
    const ManagedContainer<PHandlerServiceParent>&
    ManagedPHandlerServiceParent() const;

    void
    ManagedPHeapSnapshotTempFileHelperParent(nsTArray<PHeapSnapshotTempFileHelperParent*>& aArr) const;
    const ManagedContainer<PHeapSnapshotTempFileHelperParent>&
    ManagedPHeapSnapshotTempFileHelperParent() const;

    void
    ManagedPRemoteLazyInputStreamParent(nsTArray<PRemoteLazyInputStreamParent*>& aArr) const;
    const ManagedContainer<PRemoteLazyInputStreamParent>&
    ManagedPRemoteLazyInputStreamParent() const;

    void
    ManagedPMediaParent(nsTArray<PMediaParent*>& aArr) const;
    const ManagedContainer<PMediaParent>&
    ManagedPMediaParent() const;

    void
    ManagedPNeckoParent(nsTArray<PNeckoParent*>& aArr) const;
    const ManagedContainer<PNeckoParent>&
    ManagedPNeckoParent() const;

    void
    ManagedPOfflineCacheUpdateParent(nsTArray<POfflineCacheUpdateParent*>& aArr) const;
    const ManagedContainer<POfflineCacheUpdateParent>&
    ManagedPOfflineCacheUpdateParent() const;

    void
    ManagedPPrintingParent(nsTArray<PPrintingParent*>& aArr) const;
    const ManagedContainer<PPrintingParent>&
    ManagedPPrintingParent() const;

    void
    ManagedPChildToParentStreamParent(nsTArray<PChildToParentStreamParent*>& aArr) const;
    const ManagedContainer<PChildToParentStreamParent>&
    ManagedPChildToParentStreamParent() const;

    void
    ManagedPParentToChildStreamParent(nsTArray<PParentToChildStreamParent*>& aArr) const;
    const ManagedContainer<PParentToChildStreamParent>&
    ManagedPParentToChildStreamParent() const;

    void
    ManagedPSpeechSynthesisParent(nsTArray<PSpeechSynthesisParent*>& aArr) const;
    const ManagedContainer<PSpeechSynthesisParent>&
    ManagedPSpeechSynthesisParent() const;

    void
    ManagedPTestShellParent(nsTArray<PTestShellParent*>& aArr) const;
    const ManagedContainer<PTestShellParent>&
    ManagedPTestShellParent() const;

    void
    ManagedPRemoteSpellcheckEngineParent(nsTArray<PRemoteSpellcheckEngineParent*>& aArr) const;
    const ManagedContainer<PRemoteSpellcheckEngineParent>&
    ManagedPRemoteSpellcheckEngineParent() const;

    void
    ManagedPWebBrowserPersistDocumentParent(nsTArray<PWebBrowserPersistDocumentParent*>& aArr) const;
    const ManagedContainer<PWebBrowserPersistDocumentParent>&
    ManagedPWebBrowserPersistDocumentParent() const;

    void
    ManagedPWebrtcGlobalParent(nsTArray<PWebrtcGlobalParent*>& aArr) const;
    const ManagedContainer<PWebrtcGlobalParent>&
    ManagedPWebrtcGlobalParent() const;

    void
    ManagedPPresentationParent(nsTArray<PPresentationParent*>& aArr) const;
    const ManagedContainer<PPresentationParent>&
    ManagedPPresentationParent() const;

    void
    ManagedPURLClassifierParent(nsTArray<PURLClassifierParent*>& aArr) const;
    const ManagedContainer<PURLClassifierParent>&
    ManagedPURLClassifierParent() const;

    void
    ManagedPURLClassifierLocalParent(nsTArray<PURLClassifierLocalParent*>& aArr) const;
    const ManagedContainer<PURLClassifierLocalParent>&
    ManagedPURLClassifierLocalParent() const;

    void
    ManagedPScriptCacheParent(nsTArray<PScriptCacheParent*>& aArr) const;
    const ManagedContainer<PScriptCacheParent>&
    ManagedPScriptCacheParent() const;

    void
    ManagedPLoginReputationParent(nsTArray<PLoginReputationParent*>& aArr) const;
    const ManagedContainer<PLoginReputationParent>&
    ManagedPLoginReputationParent() const;

    void
    ManagedPSessionStorageObserverParent(nsTArray<PSessionStorageObserverParent*>& aArr) const;
    const ManagedContainer<PSessionStorageObserverParent>&
    ManagedPSessionStorageObserverParent() const;

    void
    ManagedPBenchmarkStorageParent(nsTArray<PBenchmarkStorageParent*>& aArr) const;
    const ManagedContainer<PBenchmarkStorageParent>&
    ManagedPBenchmarkStorageParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PBrowserChild>
    OpenPBrowserEndpoint(PBrowserParent* aActor);
    bool
    BindPBrowserEndpoint(
            ManagedEndpoint<PBrowserParent> aEndpoint,
            PBrowserParent* aActor);

    ManagedEndpoint<PContentPermissionRequestChild>
    OpenPContentPermissionRequestEndpoint(PContentPermissionRequestParent* aActor);
    bool
    BindPContentPermissionRequestEndpoint(
            ManagedEndpoint<PContentPermissionRequestParent> aEndpoint,
            PContentPermissionRequestParent* aActor);

    ManagedEndpoint<PCycleCollectWithLogsChild>
    OpenPCycleCollectWithLogsEndpoint(PCycleCollectWithLogsParent* aActor);
    bool
    BindPCycleCollectWithLogsEndpoint(
            ManagedEndpoint<PCycleCollectWithLogsParent> aEndpoint,
            PCycleCollectWithLogsParent* aActor);

    ManagedEndpoint<PExternalHelperAppChild>
    OpenPExternalHelperAppEndpoint(PExternalHelperAppParent* aActor);
    bool
    BindPExternalHelperAppEndpoint(
            ManagedEndpoint<PExternalHelperAppParent> aEndpoint,
            PExternalHelperAppParent* aActor);

    ManagedEndpoint<PFileDescriptorSetChild>
    OpenPFileDescriptorSetEndpoint(PFileDescriptorSetParent* aActor);
    bool
    BindPFileDescriptorSetEndpoint(
            ManagedEndpoint<PFileDescriptorSetParent> aEndpoint,
            PFileDescriptorSetParent* aActor);

    ManagedEndpoint<PHalChild>
    OpenPHalEndpoint(PHalParent* aActor);
    bool
    BindPHalEndpoint(
            ManagedEndpoint<PHalParent> aEndpoint,
            PHalParent* aActor);

    ManagedEndpoint<PHandlerServiceChild>
    OpenPHandlerServiceEndpoint(PHandlerServiceParent* aActor);
    bool
    BindPHandlerServiceEndpoint(
            ManagedEndpoint<PHandlerServiceParent> aEndpoint,
            PHandlerServiceParent* aActor);

    ManagedEndpoint<PHeapSnapshotTempFileHelperChild>
    OpenPHeapSnapshotTempFileHelperEndpoint(PHeapSnapshotTempFileHelperParent* aActor);
    bool
    BindPHeapSnapshotTempFileHelperEndpoint(
            ManagedEndpoint<PHeapSnapshotTempFileHelperParent> aEndpoint,
            PHeapSnapshotTempFileHelperParent* aActor);

    ManagedEndpoint<PRemoteLazyInputStreamChild>
    OpenPRemoteLazyInputStreamEndpoint(PRemoteLazyInputStreamParent* aActor);
    bool
    BindPRemoteLazyInputStreamEndpoint(
            ManagedEndpoint<PRemoteLazyInputStreamParent> aEndpoint,
            PRemoteLazyInputStreamParent* aActor);

    ManagedEndpoint<PMediaChild>
    OpenPMediaEndpoint(PMediaParent* aActor);
    bool
    BindPMediaEndpoint(
            ManagedEndpoint<PMediaParent> aEndpoint,
            PMediaParent* aActor);

    ManagedEndpoint<PNeckoChild>
    OpenPNeckoEndpoint(PNeckoParent* aActor);
    bool
    BindPNeckoEndpoint(
            ManagedEndpoint<PNeckoParent> aEndpoint,
            PNeckoParent* aActor);

    ManagedEndpoint<POfflineCacheUpdateChild>
    OpenPOfflineCacheUpdateEndpoint(POfflineCacheUpdateParent* aActor);
    bool
    BindPOfflineCacheUpdateEndpoint(
            ManagedEndpoint<POfflineCacheUpdateParent> aEndpoint,
            POfflineCacheUpdateParent* aActor);

    ManagedEndpoint<PPrintingChild>
    OpenPPrintingEndpoint(PPrintingParent* aActor);
    bool
    BindPPrintingEndpoint(
            ManagedEndpoint<PPrintingParent> aEndpoint,
            PPrintingParent* aActor);

    ManagedEndpoint<PChildToParentStreamChild>
    OpenPChildToParentStreamEndpoint(PChildToParentStreamParent* aActor);
    bool
    BindPChildToParentStreamEndpoint(
            ManagedEndpoint<PChildToParentStreamParent> aEndpoint,
            PChildToParentStreamParent* aActor);

    ManagedEndpoint<PParentToChildStreamChild>
    OpenPParentToChildStreamEndpoint(PParentToChildStreamParent* aActor);
    bool
    BindPParentToChildStreamEndpoint(
            ManagedEndpoint<PParentToChildStreamParent> aEndpoint,
            PParentToChildStreamParent* aActor);

    ManagedEndpoint<PSpeechSynthesisChild>
    OpenPSpeechSynthesisEndpoint(PSpeechSynthesisParent* aActor);
    bool
    BindPSpeechSynthesisEndpoint(
            ManagedEndpoint<PSpeechSynthesisParent> aEndpoint,
            PSpeechSynthesisParent* aActor);

    ManagedEndpoint<PTestShellChild>
    OpenPTestShellEndpoint(PTestShellParent* aActor);
    bool
    BindPTestShellEndpoint(
            ManagedEndpoint<PTestShellParent> aEndpoint,
            PTestShellParent* aActor);

    ManagedEndpoint<PRemoteSpellcheckEngineChild>
    OpenPRemoteSpellcheckEngineEndpoint(PRemoteSpellcheckEngineParent* aActor);
    bool
    BindPRemoteSpellcheckEngineEndpoint(
            ManagedEndpoint<PRemoteSpellcheckEngineParent> aEndpoint,
            PRemoteSpellcheckEngineParent* aActor);

    ManagedEndpoint<PWebBrowserPersistDocumentChild>
    OpenPWebBrowserPersistDocumentEndpoint(PWebBrowserPersistDocumentParent* aActor);
    bool
    BindPWebBrowserPersistDocumentEndpoint(
            ManagedEndpoint<PWebBrowserPersistDocumentParent> aEndpoint,
            PWebBrowserPersistDocumentParent* aActor);

    ManagedEndpoint<PWebrtcGlobalChild>
    OpenPWebrtcGlobalEndpoint(PWebrtcGlobalParent* aActor);
    bool
    BindPWebrtcGlobalEndpoint(
            ManagedEndpoint<PWebrtcGlobalParent> aEndpoint,
            PWebrtcGlobalParent* aActor);

    ManagedEndpoint<PPresentationChild>
    OpenPPresentationEndpoint(PPresentationParent* aActor);
    bool
    BindPPresentationEndpoint(
            ManagedEndpoint<PPresentationParent> aEndpoint,
            PPresentationParent* aActor);

    ManagedEndpoint<PURLClassifierChild>
    OpenPURLClassifierEndpoint(PURLClassifierParent* aActor);
    bool
    BindPURLClassifierEndpoint(
            ManagedEndpoint<PURLClassifierParent> aEndpoint,
            PURLClassifierParent* aActor);

    ManagedEndpoint<PURLClassifierLocalChild>
    OpenPURLClassifierLocalEndpoint(PURLClassifierLocalParent* aActor);
    bool
    BindPURLClassifierLocalEndpoint(
            ManagedEndpoint<PURLClassifierLocalParent> aEndpoint,
            PURLClassifierLocalParent* aActor);

    ManagedEndpoint<PScriptCacheChild>
    OpenPScriptCacheEndpoint(PScriptCacheParent* aActor);
    bool
    BindPScriptCacheEndpoint(
            ManagedEndpoint<PScriptCacheParent> aEndpoint,
            PScriptCacheParent* aActor);

    ManagedEndpoint<PLoginReputationChild>
    OpenPLoginReputationEndpoint(PLoginReputationParent* aActor);
    bool
    BindPLoginReputationEndpoint(
            ManagedEndpoint<PLoginReputationParent> aEndpoint,
            PLoginReputationParent* aActor);

    ManagedEndpoint<PSessionStorageObserverChild>
    OpenPSessionStorageObserverEndpoint(PSessionStorageObserverParent* aActor);
    bool
    BindPSessionStorageObserverEndpoint(
            ManagedEndpoint<PSessionStorageObserverParent> aEndpoint,
            PSessionStorageObserverParent* aActor);

    ManagedEndpoint<PBenchmarkStorageChild>
    OpenPBenchmarkStorageEndpoint(PBenchmarkStorageParent* aActor);
    bool
    BindPBenchmarkStorageEndpoint(
            ManagedEndpoint<PBenchmarkStorageParent> aEndpoint,
            PBenchmarkStorageParent* aActor);

    [[nodiscard]] bool
    SendConstructBrowser(
            ManagedEndpoint<mozilla::dom::PBrowserChild>&& browserEp,
            ManagedEndpoint<mozilla::dom::PWindowGlobalChild>&& windowEp,
            const TabId& tabId,
            const IPCTabContext& context,
            const WindowGlobalInit& windowInit,
            const uint32_t& chromeFlags,
            const ContentParentId& cpId,
            const bool& isForBrowser,
            const bool& isTopLevel);

    [[nodiscard]] PFileDescriptorSetParent*
    SendPFileDescriptorSetConstructor(const FileDescriptor& fd);

    [[nodiscard]] PFileDescriptorSetParent*
    SendPFileDescriptorSetConstructor(
            PFileDescriptorSetParent* actor,
            const FileDescriptor& fd);

    [[nodiscard]] PWebBrowserPersistDocumentParent*
    SendPWebBrowserPersistDocumentConstructor(
            PBrowserParent* aBrowser,
            const MaybeDiscardedBrowsingContext& aContext);

    [[nodiscard]] PWebBrowserPersistDocumentParent*
    SendPWebBrowserPersistDocumentConstructor(
            PWebBrowserPersistDocumentParent* actor,
            PBrowserParent* aBrowser,
            const MaybeDiscardedBrowsingContext& aContext);

    [[nodiscard]] bool
    SendRawMessage(
            const JSActorMessageMeta& aMetadata,
            const mozilla::Maybe<ClonedMessageData>& aData,
            const mozilla::Maybe<ClonedMessageData>& aStack);

    [[nodiscard]] bool
    SendInitGMPService(Endpoint<mozilla::gmp::PGMPServiceChild>&& service);

    [[nodiscard]] bool
    SendInitProcessHangMonitor(Endpoint<mozilla::PProcessHangMonitorChild>&& hangMonitor);

    [[nodiscard]] bool
    SendInitProfiler(Endpoint<mozilla::PProfilerChild>&& aEndpoint);

    [[nodiscard]] bool
    SendInitRendering(
            Endpoint<mozilla::layers::PCompositorManagerChild>&& compositor,
            Endpoint<mozilla::layers::PImageBridgeChild>&& imageBridge,
            Endpoint<mozilla::gfx::PVRManagerChild>&& vr,
            Endpoint<mozilla::PRemoteDecoderManagerChild>&& video,
            const nsTArray<uint32_t>& namespaces);

    [[nodiscard]] bool
    SendReinitRendering(
            Endpoint<mozilla::layers::PCompositorManagerChild>&& compositor,
            Endpoint<mozilla::layers::PImageBridgeChild>&& bridge,
            Endpoint<mozilla::gfx::PVRManagerChild>&& vr,
            Endpoint<mozilla::PRemoteDecoderManagerChild>&& video,
            const nsTArray<uint32_t>& namespaces);

    [[nodiscard]] bool
    SendNetworkLinkTypeChange(const uint32_t& type);

    [[nodiscard]] bool
    SendReinitRenderingForDeviceReset();

    [[nodiscard]] bool
    SendSetProcessSandbox(const mozilla::Maybe<FileDescriptor>& aBroker);

    void
    SendRequestMemoryReport(
            const uint32_t& generation,
            const bool& anonymize,
            const bool& minimizeMemoryUsage,
            const mozilla::Maybe<FileDescriptor>& DMDFile,
            mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<RequestMemoryReportPromise>
    SendRequestMemoryReport(
            const uint32_t& generation,
            const bool& anonymize,
            const bool& minimizeMemoryUsage,
            const mozilla::Maybe<FileDescriptor>& DMDFile);

    [[nodiscard]] bool
    SendRequestPerformanceMetrics(const nsID& aID);

    void
    SendGetUntrustedModulesData(
            mozilla::ipc::ResolveCallback<mozilla::Maybe<UntrustedModulesData>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<GetUntrustedModulesDataPromise>
    SendGetUntrustedModulesData();

    [[nodiscard]] bool
    SendBidiKeyboardNotify(
            const bool& isLangRTL,
            const bool& haveBidiKeyboards);

    [[nodiscard]] PCycleCollectWithLogsParent*
    SendPCycleCollectWithLogsConstructor(
            const bool& dumpAllTraces,
            const FileDescriptor& gcLog,
            const FileDescriptor& ccLog);

    [[nodiscard]] PCycleCollectWithLogsParent*
    SendPCycleCollectWithLogsConstructor(
            PCycleCollectWithLogsParent* actor,
            const bool& dumpAllTraces,
            const FileDescriptor& gcLog,
            const FileDescriptor& ccLog);

    [[nodiscard]] PTestShellParent*
    SendPTestShellConstructor();

    [[nodiscard]] PTestShellParent*
    SendPTestShellConstructor(PTestShellParent* actor);

    [[nodiscard]] PScriptCacheParent*
    SendPScriptCacheConstructor(
            const FileDescOrError& cacheFile,
            const bool& wantCacheData);

    [[nodiscard]] PScriptCacheParent*
    SendPScriptCacheConstructor(
            PScriptCacheParent* actor,
            const FileDescOrError& cacheFile,
            const bool& wantCacheData);

    [[nodiscard]] bool
    SendRegisterChrome(
            const nsTArray<ChromePackage>& packages,
            const nsTArray<SubstitutionMapping>& substitutions,
            const nsTArray<OverrideMapping>& overrides,
            const nsCString& locale,
            const bool& reset);

    [[nodiscard]] bool
    SendRegisterChromeItem(const ChromeRegistryItem& item);

    [[nodiscard]] bool
    SendClearImageCache(
            const bool& privateLoader,
            const bool& chrome);

    [[nodiscard]] bool
    SendClearStyleSheetCache(const mozilla::Maybe<RefPtr<nsIPrincipal>>& aForPrincipal);

    [[nodiscard]] bool
    SendSetOffline(const bool& offline);

    [[nodiscard]] bool
    SendSetConnectivity(const bool& connectivity);

    [[nodiscard]] bool
    SendSetCaptivePortalState(const int32_t& aState);

    [[nodiscard]] bool
    SendNotifyVisited(const nsTArray<VisitedQueryResult>& uri);

    [[nodiscard]] bool
    SendThemeChanged(
            const LookAndFeelData& lookAndFeelData,
            const ThemeChangeKind& aKind);

    [[nodiscard]] bool
    SendUpdateSystemParameters(const nsTArray<SystemParameterKVPair>& aUpdates);

    [[nodiscard]] bool
    SendPreferenceUpdate(const Pref& pref);

    [[nodiscard]] bool
    SendVarUpdate(const GfxVarUpdate& var);

    [[nodiscard]] bool
    SendUpdatePerfStatsCollectionMask(const uint64_t& aMask);

    void
    SendCollectPerfStatsJSON(
            mozilla::ipc::ResolveCallback<nsCString>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<CollectPerfStatsJSONPromise>
    SendCollectPerfStatsJSON();

    [[nodiscard]] bool
    SendDataStoragePut(
            const nsString& aFilename,
            const DataStorageItem& aItem);

    [[nodiscard]] bool
    SendDataStorageRemove(
            const nsString& aFilename,
            const nsCString& aKey,
            const DataStorageType& aType);

    [[nodiscard]] bool
    SendDataStorageClear(const nsString& aFilename);

    [[nodiscard]] bool
    SendNotifyAlertsObserver(
            const nsCString& topic,
            const nsString& data);

    [[nodiscard]] bool
    SendGeolocationUpdate(nsIDOMGeoPosition* aPosition);

    [[nodiscard]] bool
    SendGeolocationError(const uint16_t& errorCode);

    [[nodiscard]] bool
    SendUpdateDictionaryList(const nsTArray<nsCString>& dictionaries);

    [[nodiscard]] bool
    SendUpdateFontList(const nsTArray<SystemFontListEntry>& fontList);

    [[nodiscard]] bool
    SendRebuildFontList(const bool& aFulLRebuild);

    [[nodiscard]] bool
    SendFontListChanged();

    [[nodiscard]] bool
    SendUpdateAppLocales(const nsTArray<nsCString>& appLocales);

    [[nodiscard]] bool
    SendUpdateRequestedLocales(const nsTArray<nsCString>& requestedLocales);

    [[nodiscard]] bool
    SendRegisterStringBundles(const nsTArray<StringBundleDescriptor>& stringBundles);

    [[nodiscard]] bool
    SendUpdateSharedData(
            const FileDescriptor& mapFile,
            const uint32_t& aSize,
            const nsTArray<IPCBlob>& blobs,
            const nsTArray<nsCString>& changedKeys);

    [[nodiscard]] bool
    SendAddPermission(const Permission& permission);

    [[nodiscard]] bool
    SendRemoveAllPermissions();

    [[nodiscard]] bool
    SendFlushMemory(const nsString& reason);

    [[nodiscard]] bool
    SendApplicationBackground();

    [[nodiscard]] bool
    SendApplicationForeground();

    [[nodiscard]] bool
    SendGarbageCollect();

    [[nodiscard]] bool
    SendCycleCollect();

    [[nodiscard]] bool
    SendUnlinkGhosts();

    [[nodiscard]] bool
    SendActivateA11y(
            const uint32_t& aMainChromeTid,
            const uint32_t& aMsaaID);

    [[nodiscard]] bool
    SendShutdownA11y();

    [[nodiscard]] bool
    SendAppInfo(
            const nsCString& version,
            const nsCString& buildID,
            const nsCString& name,
            const nsCString& UAName,
            const nsCString& ID,
            const nsCString& vendor,
            const nsCString& sourceURL,
            const nsCString& updateURL);

    [[nodiscard]] bool
    SendRemoteType(const nsCString& aRemoteType);

    [[nodiscard]] bool
    SendInitServiceWorkers(const ServiceWorkerConfiguration& aConfig);

    [[nodiscard]] bool
    SendInitBlobURLs(const nsTArray<BlobURLRegistrationData>& registrations);

    [[nodiscard]] bool
    SendInitJSActorInfos(
            const nsTArray<JSProcessActorInfo>& aContentInfos,
            const nsTArray<JSWindowActorInfo>& aWindowInfos);

    [[nodiscard]] bool
    SendUnregisterJSWindowActor(const nsCString& name);

    [[nodiscard]] bool
    SendUnregisterJSProcessActor(const nsCString& name);

    [[nodiscard]] bool
    SendSetXPCOMProcessAttributes(
            const XPCOMInitData& xpcomInit,
            const StructuredCloneData& initialData,
            const LookAndFeelData& lookAndFeeldata,
            const nsTArray<SystemFontListEntry>& systemFontList,
            const mozilla::Maybe<SharedMemoryHandle>& sharedUASheetHandle,
            const uintptr_t& sharedUASheetAddress,
            const nsTArray<SharedMemoryHandle>& sharedFontListBlocks);

    [[nodiscard]] bool
    SendLastPrivateDocShellDestroyed();

    [[nodiscard]] bool
    SendNotifyProcessPriorityChanged(const ProcessPriority& priority);

    [[nodiscard]] bool
    SendMinimizeMemoryUsage();

    [[nodiscard]] bool
    SendLoadAndRegisterSheet(
            nsIURI* uri,
            const uint32_t& type);

    [[nodiscard]] bool
    SendUnregisterSheet(
            nsIURI* uri,
            const uint32_t& type);

    [[nodiscard]] bool
    SendNotifyIdleObserver(
            const uint64_t& observerId,
            const nsCString& topic,
            const nsString& str);

    [[nodiscard]] bool
    SendInvokeDragSession(
            const nsTArray<IPCDataTransfer>& transfers,
            const uint32_t& action);

    [[nodiscard]] bool
    SendEndDragSession(
            const bool& aDoneDrag,
            const bool& aUserCancelled,
            const LayoutDeviceIntPoint& aDragEndPoint,
            const uint32_t& aKeyModifiers);

    [[nodiscard]] bool
    SendDomainSetChanged(
            const uint32_t& aSetType,
            const uint32_t& aChangeType,
            nsIURI* aDomain);

    [[nodiscard]] bool
    SendShutdown();

    [[nodiscard]] bool
    SendLoadProcessScript(const nsString& url);

    [[nodiscard]] bool
    SendUpdateWindow(const uintptr_t& aChildId);

    [[nodiscard]] bool
    SendNotifyPresentationReceiverLaunched(
            PBrowserParent* aIframe,
            const nsString& aSessionId);

    [[nodiscard]] bool
    SendNotifyPresentationReceiverCleanUp(const nsString& aSessionId);

    [[nodiscard]] bool
    SendNotifyEmptyHTTPCache();

    [[nodiscard]] bool
    SendPush(
            const nsCString& scope,
            const Principal& principal,
            const nsString& messageId);

    [[nodiscard]] bool
    SendPushWithData(
            const nsCString& scope,
            const Principal& principal,
            const nsString& messageId,
            const nsTArray<uint8_t>& data);

    [[nodiscard]] bool
    SendPushSubscriptionChange(
            const nsCString& scope,
            const Principal& principal);

    [[nodiscard]] bool
    SendGetFilesResponse(
            const nsID& aID,
            const GetFilesResponseResult& aResult);

    [[nodiscard]] bool
    SendBlobURLRegistration(
            const nsCString& aURI,
            const IPCBlob& aBlob,
            const Principal& aPrincipal,
            const mozilla::Maybe<nsID>& aAgentClusterId);

    [[nodiscard]] bool
    SendBlobURLUnregistration(const nsCString& aURI);

    [[nodiscard]] bool
    SendGMPsChanged(const nsTArray<GMPCapabilityData>& capabilities);

    [[nodiscard]] PParentToChildStreamParent*
    SendPParentToChildStreamConstructor();

    [[nodiscard]] PParentToChildStreamParent*
    SendPParentToChildStreamConstructor(PParentToChildStreamParent* actor);

    [[nodiscard]] bool
    SendProvideAnonymousTemporaryFile(
            const uint64_t& aID,
            const FileDescOrError& aFD);

    [[nodiscard]] bool
    SendSetPermissionsWithKey(
            const nsCString& aPermissionKey,
            const nsTArray<Permission>& aPermissions);

    [[nodiscard]] bool
    SendRefreshScreens(const nsTArray<ScreenDetails>& aScreens);

    [[nodiscard]] PRemoteLazyInputStreamParent*
    SendPRemoteLazyInputStreamConstructor(
            PRemoteLazyInputStreamParent* actor,
            const nsID& aID,
            const uint64_t& aSize);

    [[nodiscard]] bool
    SendSetPluginList(
            const uint32_t& pluginEpoch,
            const nsTArray<PluginTag>& plugins,
            const nsTArray<FakePluginTag>& fakePlugins);

    [[nodiscard]] bool
    SendShareCodeCoverageMutex(const CrossProcessMutexHandle& handle);

    void
    SendFlushCodeCoverageCounters(
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<FlushCodeCoverageCountersPromise>
    SendFlushCodeCoverageCounters();

    [[nodiscard]] bool
    SendSetInputEventQueueEnabled();

    [[nodiscard]] bool
    SendFlushInputEventQueue();

    [[nodiscard]] bool
    SendResumeInputEventQueue();

    [[nodiscard]] bool
    SendSuspendInputEventQueue();

    [[nodiscard]] bool
    SendAddDynamicScalars(const nsTArray<DynamicScalarDefinition>& definitions);

    void
    SendCrossProcessRedirect(
            const RedirectToRealChannelArgs& args,
            nsTArray<Endpoint<mozilla::extensions::PStreamFilterParent>>&& aEndpoint,
            mozilla::ipc::ResolveCallback<nsresult>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<CrossProcessRedirectPromise>
    SendCrossProcessRedirect(
            const RedirectToRealChannelArgs& args,
            nsTArray<Endpoint<mozilla::extensions::PStreamFilterParent>>&& aEndpoint);

    [[nodiscard]] bool
    SendStartDelayedAutoplayMediaComponents(const MaybeDiscardedBrowsingContext& aContext);

    [[nodiscard]] bool
    SendUpdateMediaControlAction(
            const MaybeDiscardedBrowsingContext& aContext,
            const MediaControlAction& aAction);

    [[nodiscard]] bool
    SendRegisterBrowsingContextGroup(
            const uint64_t& aGroupId,
            const nsTArray<SyncedContextInitializer>& aInits);

    void
    SendLoadURI(
            const MaybeDiscardedBrowsingContext& aContext,
            nsDocShellLoadState* aLoadState,
            const bool& aSetNavigating,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<LoadURIPromise>
    SendLoadURI(
            const MaybeDiscardedBrowsingContext& aContext,
            nsDocShellLoadState* aLoadState,
            const bool& aSetNavigating);

    [[nodiscard]] bool
    SendInternalLoad(nsDocShellLoadState* aLoadState);

    [[nodiscard]] bool
    SendDisplayLoadError(
            const MaybeDiscardedBrowsingContext& aContext,
            const nsString& aURI);

    [[nodiscard]] bool
    SendGoBack(
            const MaybeDiscardedBrowsingContext& aContext,
            const mozilla::Maybe<int32_t>& aCancelContentJSEpoch,
            const bool& aRequireUserInteraction);

    [[nodiscard]] bool
    SendGoForward(
            const MaybeDiscardedBrowsingContext& aContext,
            const mozilla::Maybe<int32_t>& aCancelContentJSEpoch,
            const bool& aRequireUserInteraction);

    [[nodiscard]] bool
    SendGoToIndex(
            const MaybeDiscardedBrowsingContext& aContext,
            const int32_t& aIndex,
            const mozilla::Maybe<int32_t>& aCancelContentJSEpoch);

    [[nodiscard]] bool
    SendReload(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint32_t& aReloadFlags);

    [[nodiscard]] bool
    SendStopLoad(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint32_t& aStopFlags);

    [[nodiscard]] bool
    SendOnAllowAccessFor(
            const MaybeDiscardedBrowsingContext& aParentContext,
            const nsCString& aTrackingOrigin,
            const uint32_t& aCookieBehavior,
            const StorageAccessPermissionGrantedReason& aReason);

    [[nodiscard]] bool
    SendOnContentBlockingDecision(
            const MaybeDiscardedBrowsingContext& aContext,
            const BlockingDecision& aReason,
            const uint32_t& aRejectedReason);

    [[nodiscard]] bool
    SendAbortOrientationPendingPromises(const MaybeDiscardedBrowsingContext& aContext);

    [[nodiscard]] bool
    SendHistoryCommitIndexAndLength(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint32_t& aIndex,
            const uint32_t& aLength,
            const nsID& aChangeID);

    [[nodiscard]] bool
    SendDispatchLocationChangeEvent(const MaybeDiscardedBrowsingContext& aContext);

    void
    SendDispatchBeforeUnloadToSubtree(
            const MaybeDiscardedBrowsingContext& aStartingAt,
            mozilla::ipc::ResolveCallback<PermitUnloadResult>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<DispatchBeforeUnloadToSubtreePromise>
    SendDispatchBeforeUnloadToSubtree(const MaybeDiscardedBrowsingContext& aStartingAt);

    [[nodiscard]] bool
    SendUpdateMediaCodecsSupported(
            const RemoteDecodeIn& aLocation,
            const MediaCodecsSupported& aSupported);

    [[nodiscard]] bool
    SendScriptError(
            const nsString& message,
            const nsString& sourceName,
            const nsString& sourceLine,
            const uint32_t& lineNumber,
            const uint32_t& colNumber,
            const uint32_t& flags,
            const nsCString& category,
            const bool& privateWindow,
            const uint64_t& innerWindowId,
            const bool& fromChromeContext);

    [[nodiscard]] bool
    SendReportFrameTimingData(
            const uint64_t& innerWindowId,
            const nsString& entryName,
            const nsString& initiatorType,
            UniquePtr<PerformanceTimingData>&& aData);

    [[nodiscard]] bool
    SendCommitBrowsingContextTransaction(
            const MaybeDiscardedBrowsingContext& aContext,
            const BrowsingContextTransaction& aTransaction,
            const uint64_t& aEpoch);

    [[nodiscard]] bool
    SendAsyncMessage(
            const nsString& aMessage,
            const ClonedMessageData& aData);

    [[nodiscard]] bool
    SendNotifyPushSubscriptionModifiedObservers(
            const nsCString& scope,
            const Principal& principal);

    [[nodiscard]] bool
    SendPushError(
            const nsCString& scope,
            const Principal& principal,
            const nsString& message,
            const uint32_t& flags);

    [[nodiscard]] bool
    SendCreateBrowsingContext(
            const uint64_t& aGroupId,
            const BrowsingContextInitializer& aInit);

    void
    SendDiscardBrowsingContext(
            const MaybeDiscardedBrowsingContext& aContext,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<DiscardBrowsingContextPromise>
    SendDiscardBrowsingContext(const MaybeDiscardedBrowsingContext& aContext);

    [[nodiscard]] bool
    SendAdjustWindowFocus(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aCheckPermission,
            const bool& aIsVisible);

    [[nodiscard]] bool
    SendWindowClose(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aTrustedCaller);

    [[nodiscard]] bool
    SendWindowFocus(
            const MaybeDiscardedBrowsingContext& aContext,
            const CallerType& aCallerType,
            const uint64_t& aActionId);

    [[nodiscard]] bool
    SendWindowBlur(
            const MaybeDiscardedBrowsingContext& aContext,
            const CallerType& aCallerType);

    [[nodiscard]] bool
    SendRaiseWindow(
            const MaybeDiscardedBrowsingContext& aContext,
            const CallerType& aCallerType,
            const uint64_t& aActionId);

    [[nodiscard]] bool
    SendClearFocus(const MaybeDiscardedBrowsingContext& aContext);

    [[nodiscard]] bool
    SendSetFocusedBrowsingContext(const MaybeDiscardedBrowsingContext& aContext);

    [[nodiscard]] bool
    SendSetActiveBrowsingContext(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint64_t& aActionId);

    [[nodiscard]] bool
    SendUnsetActiveBrowsingContext(
            const MaybeDiscardedBrowsingContext& aContext,
            const uint64_t& aActionId);

    [[nodiscard]] bool
    SendSetFocusedElement(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aNeedsFocus);

    [[nodiscard]] bool
    SendFinalizeFocusOuter(
            const MaybeDiscardedBrowsingContext& aContext,
            const bool& aCanFocus,
            const CallerType& aCallerType);

    [[nodiscard]] bool
    SendBlurToChild(
            const MaybeDiscardedBrowsingContext& aFocusedBrowsingContext,
            const MaybeDiscardedBrowsingContext& aBrowsingContextToClear,
            const MaybeDiscardedBrowsingContext& aAncestorBrowsingContextToFocus,
            const bool& aIsLeavingDocument,
            const bool& aAdjustWidget,
            const uint64_t& aActionId);

    [[nodiscard]] bool
    SendSetupFocusedAndActive(
            const MaybeDiscardedBrowsingContext& aFocusedBrowsingContext,
            const MaybeDiscardedBrowsingContext& aActiveBrowsingContext);

    [[nodiscard]] bool
    SendReviseActiveBrowsingContext(
            const MaybeDiscardedBrowsingContext& aActiveBrowsingContext,
            const uint64_t& aActionId);

    [[nodiscard]] bool
    SendMaybeExitFullscreen(const MaybeDiscardedBrowsingContext& aContext);

    [[nodiscard]] bool
    SendWindowPostMessage(
            const MaybeDiscardedBrowsingContext& aContext,
            const ClonedOrErrorMessageData& aMessage,
            const PostMessageData& aData);

    [[nodiscard]] bool
    SendCommitWindowContextTransaction(
            const MaybeDiscardedWindowContext& aContext,
            const WindowContextTransaction& aTransaction,
            const uint64_t& aEpoch);

    [[nodiscard]] bool
    SendCreateWindowContext(const WindowContextInitializer& aInit);

    void
    SendDiscardWindowContext(
            const uint64_t& aContextId,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<DiscardWindowContextPromise>
    SendDiscardWindowContext(const uint64_t& aContextId);

    void
    SendFlushFOGData(
            mozilla::ipc::ResolveCallback<ByteBuf>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<FlushFOGDataPromise>
    SendFlushFOGData();

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PBrowserParent> mManagedPBrowserParent;
    ManagedContainer<PContentPermissionRequestParent> mManagedPContentPermissionRequestParent;
    ManagedContainer<PCycleCollectWithLogsParent> mManagedPCycleCollectWithLogsParent;
    ManagedContainer<PExternalHelperAppParent> mManagedPExternalHelperAppParent;
    ManagedContainer<PFileDescriptorSetParent> mManagedPFileDescriptorSetParent;
    ManagedContainer<PHalParent> mManagedPHalParent;
    ManagedContainer<PHandlerServiceParent> mManagedPHandlerServiceParent;
    ManagedContainer<PHeapSnapshotTempFileHelperParent> mManagedPHeapSnapshotTempFileHelperParent;
    ManagedContainer<PRemoteLazyInputStreamParent> mManagedPRemoteLazyInputStreamParent;
    ManagedContainer<PMediaParent> mManagedPMediaParent;
    ManagedContainer<PNeckoParent> mManagedPNeckoParent;
    ManagedContainer<POfflineCacheUpdateParent> mManagedPOfflineCacheUpdateParent;
    ManagedContainer<PPrintingParent> mManagedPPrintingParent;
    ManagedContainer<PChildToParentStreamParent> mManagedPChildToParentStreamParent;
    ManagedContainer<PParentToChildStreamParent> mManagedPParentToChildStreamParent;
    ManagedContainer<PSpeechSynthesisParent> mManagedPSpeechSynthesisParent;
    ManagedContainer<PTestShellParent> mManagedPTestShellParent;
    ManagedContainer<PRemoteSpellcheckEngineParent> mManagedPRemoteSpellcheckEngineParent;
    ManagedContainer<PWebBrowserPersistDocumentParent> mManagedPWebBrowserPersistDocumentParent;
    ManagedContainer<PWebrtcGlobalParent> mManagedPWebrtcGlobalParent;
    ManagedContainer<PPresentationParent> mManagedPPresentationParent;
    ManagedContainer<PURLClassifierParent> mManagedPURLClassifierParent;
    ManagedContainer<PURLClassifierLocalParent> mManagedPURLClassifierLocalParent;
    ManagedContainer<PScriptCacheParent> mManagedPScriptCacheParent;
    ManagedContainer<PLoginReputationParent> mManagedPLoginReputationParent;
    ManagedContainer<PSessionStorageObserverParent> mManagedPSessionStorageObserverParent;
    ManagedContainer<PBenchmarkStorageParent> mManagedPBenchmarkStorageParent;
};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PContentParent*>
{
    typedef mozilla::dom::PContentParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PContentParent_h
