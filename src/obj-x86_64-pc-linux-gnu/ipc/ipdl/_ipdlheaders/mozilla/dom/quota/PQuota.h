//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PQuota_h
#define PQuota_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/OriginAttributes.h"
#include "mozilla/dom/quota/Client.h"
#include "mozilla/dom/quota/PersistenceType.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct StorageNameParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class StorageNameParams final
{
private:

public:
    MOZ_IMPLICIT StorageNameParams()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::StorageNameParams>
{
    typedef mozilla::dom::quota::StorageNameParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct StorageInitializedParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class StorageInitializedParams final
{
private:

public:
    MOZ_IMPLICIT StorageInitializedParams()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::StorageInitializedParams>
{
    typedef mozilla::dom::quota::StorageInitializedParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct TemporaryStorageInitializedParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class TemporaryStorageInitializedParams final
{
private:

public:
    MOZ_IMPLICIT TemporaryStorageInitializedParams()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::TemporaryStorageInitializedParams>
{
    typedef mozilla::dom::quota::TemporaryStorageInitializedParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InitParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class InitParams final
{
private:

public:
    MOZ_IMPLICIT InitParams()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::InitParams>
{
    typedef mozilla::dom::quota::InitParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InitTemporaryStorageParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class InitTemporaryStorageParams final
{
private:

public:
    MOZ_IMPLICIT InitTemporaryStorageParams()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::InitTemporaryStorageParams>
{
    typedef mozilla::dom::quota::InitTemporaryStorageParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InitializePersistentOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class InitializePersistentOriginParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT InitializePersistentOriginParams() :
        principalInfo_()
    {
    }

    MOZ_IMPLICIT InitializePersistentOriginParams(const PrincipalInfo& _principalInfo) :
        principalInfo_(_principalInfo)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

private:
    PrincipalInfo principalInfo_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::InitializePersistentOriginParams>
{
    typedef mozilla::dom::quota::InitializePersistentOriginParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InitializeTemporaryOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class InitializeTemporaryOriginParams final
{
private:
    typedef mozilla::dom::quota::PersistenceType PersistenceType;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT InitializeTemporaryOriginParams() :
        persistenceType_(),
        principalInfo_()
    {
    }

    MOZ_IMPLICIT InitializeTemporaryOriginParams(
            const PersistenceType& _persistenceType,
            const PrincipalInfo& _principalInfo) :
        persistenceType_(_persistenceType),
        principalInfo_(_principalInfo)
    {
    }

    PersistenceType&
    persistenceType()
    {
        return persistenceType_;
    }
    const PersistenceType&
    persistenceType() const
    {
        return persistenceType_;
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

private:
    PersistenceType persistenceType_;
    PrincipalInfo principalInfo_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::InitializeTemporaryOriginParams>
{
    typedef mozilla::dom::quota::InitializeTemporaryOriginParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct AllUsageParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class AllUsageParams final
{
private:

public:
    MOZ_IMPLICIT AllUsageParams() :
        getAll_()
    {
    }

    MOZ_IMPLICIT AllUsageParams(const bool& _getAll) :
        getAll_(_getAll)
    {
    }

    bool&
    getAll()
    {
        return getAll_;
    }
    const bool&
    getAll() const
    {
        return getAll_;
    }

private:
    bool getAll_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::AllUsageParams>
{
    typedef mozilla::dom::quota::AllUsageParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct OriginUsageParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class OriginUsageParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT OriginUsageParams() :
        principalInfo_(),
        fromMemory_()
    {
    }

    MOZ_IMPLICIT OriginUsageParams(
            const PrincipalInfo& _principalInfo,
            const bool& _fromMemory) :
        principalInfo_(_principalInfo),
        fromMemory_(_fromMemory)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

    bool&
    fromMemory()
    {
        return fromMemory_;
    }
    const bool&
    fromMemory() const
    {
        return fromMemory_;
    }

private:
    PrincipalInfo principalInfo_;
    bool fromMemory_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::OriginUsageParams>
{
    typedef mozilla::dom::quota::OriginUsageParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union UsageRequestParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class UsageRequestParams final
{
public:
    enum Type {
        T__None,
        TAllUsageParams = 1,
        TOriginUsageParams,
        T__Last = TOriginUsageParams
    };

private:
    typedef mozilla::dom::quota::AllUsageParams AllUsageParams;
    typedef mozilla::dom::quota::OriginUsageParams OriginUsageParams;
    typedef AllUsageParams AllUsageParams__tdef;
    typedef OriginUsageParams OriginUsageParams__tdef;

    union Value {
        mozilla::AlignedStorage2<AllUsageParams> VAllUsageParams;
        mozilla::AlignedStorage2<OriginUsageParams> VOriginUsageParams;
    };

    AllUsageParams*
    ptr_AllUsageParams()
    {
        return ((mValue).VAllUsageParams).addr();
    }
    const AllUsageParams*
    constptr_AllUsageParams() const
    {
        return ((mValue).VAllUsageParams).addr();
    }
    OriginUsageParams*
    ptr_OriginUsageParams()
    {
        return ((mValue).VOriginUsageParams).addr();
    }
    const OriginUsageParams*
    constptr_OriginUsageParams() const
    {
        return ((mValue).VOriginUsageParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT UsageRequestParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT UsageRequestParams(const AllUsageParams& aOther);

    MOZ_IMPLICIT UsageRequestParams(AllUsageParams&& aOther);

    MOZ_IMPLICIT UsageRequestParams(const OriginUsageParams& aOther);

    MOZ_IMPLICIT UsageRequestParams(OriginUsageParams&& aOther);

    MOZ_IMPLICIT UsageRequestParams(const UsageRequestParams& aOther);

    MOZ_IMPLICIT UsageRequestParams(UsageRequestParams&& aOther);

    ~UsageRequestParams();

    Type
    type() const
    {
        return mType;
    }

    UsageRequestParams&
    operator=(const AllUsageParams& aRhs);

    UsageRequestParams&
    operator=(AllUsageParams&& aRhs);

    UsageRequestParams&
    operator=(const OriginUsageParams& aRhs);

    UsageRequestParams&
    operator=(OriginUsageParams&& aRhs);

    UsageRequestParams&
    operator=(const UsageRequestParams& aRhs);

    UsageRequestParams&
    operator=(UsageRequestParams&& aRhs);

    AllUsageParams&
    get_AllUsageParams()
    {
        AssertSanity(TAllUsageParams);
        return (*(ptr_AllUsageParams()));
    }
    const AllUsageParams&
    get_AllUsageParams() const
    {
        AssertSanity(TAllUsageParams);
        return (*(constptr_AllUsageParams()));
    }
    operator AllUsageParams&()
    {
        return get_AllUsageParams();
    }
    operator const AllUsageParams&() const
    {
        return get_AllUsageParams();
    }

    OriginUsageParams&
    get_OriginUsageParams()
    {
        AssertSanity(TOriginUsageParams);
        return (*(ptr_OriginUsageParams()));
    }
    const OriginUsageParams&
    get_OriginUsageParams() const
    {
        AssertSanity(TOriginUsageParams);
        return (*(constptr_OriginUsageParams()));
    }
    operator OriginUsageParams&()
    {
        return get_OriginUsageParams();
    }
    operator const OriginUsageParams&() const
    {
        return get_OriginUsageParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::UsageRequestParams>
{
    typedef mozilla::dom::quota::UsageRequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearResetOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class ClearResetOriginParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef mozilla::dom::quota::PersistenceType PersistenceType;
    typedef mozilla::dom::quota::Client::Type Type;

public:
    MOZ_IMPLICIT ClearResetOriginParams() :
        principalInfo_(),
        persistenceType_(),
        persistenceTypeIsExplicit_(),
        clientType_(),
        clientTypeIsExplicit_()
    {
    }

    MOZ_IMPLICIT ClearResetOriginParams(
            const PrincipalInfo& _principalInfo,
            const PersistenceType& _persistenceType,
            const bool& _persistenceTypeIsExplicit,
            const Type& _clientType,
            const bool& _clientTypeIsExplicit) :
        principalInfo_(_principalInfo),
        persistenceType_(_persistenceType),
        persistenceTypeIsExplicit_(_persistenceTypeIsExplicit),
        clientType_(_clientType),
        clientTypeIsExplicit_(_clientTypeIsExplicit)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

    PersistenceType&
    persistenceType()
    {
        return persistenceType_;
    }
    const PersistenceType&
    persistenceType() const
    {
        return persistenceType_;
    }

    bool&
    persistenceTypeIsExplicit()
    {
        return persistenceTypeIsExplicit_;
    }
    const bool&
    persistenceTypeIsExplicit() const
    {
        return persistenceTypeIsExplicit_;
    }

    Type&
    clientType()
    {
        return clientType_;
    }
    const Type&
    clientType() const
    {
        return clientType_;
    }

    bool&
    clientTypeIsExplicit()
    {
        return clientTypeIsExplicit_;
    }
    const bool&
    clientTypeIsExplicit() const
    {
        return clientTypeIsExplicit_;
    }

private:
    PrincipalInfo principalInfo_;
    PersistenceType persistenceType_;
    bool persistenceTypeIsExplicit_;
    Type clientType_;
    bool clientTypeIsExplicit_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ClearResetOriginParams>
{
    typedef mozilla::dom::quota::ClearResetOriginParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class ClearOriginParams final
{
private:
    typedef mozilla::dom::quota::ClearResetOriginParams ClearResetOriginParams;

public:
    MOZ_IMPLICIT ClearOriginParams() :
        commonParams_(),
        matchAll_()
    {
    }

    MOZ_IMPLICIT ClearOriginParams(
            const ClearResetOriginParams& _commonParams,
            const bool& _matchAll) :
        commonParams_(_commonParams),
        matchAll_(_matchAll)
    {
    }

    ClearResetOriginParams&
    commonParams()
    {
        return commonParams_;
    }
    const ClearResetOriginParams&
    commonParams() const
    {
        return commonParams_;
    }

    bool&
    matchAll()
    {
        return matchAll_;
    }
    const bool&
    matchAll() const
    {
        return matchAll_;
    }

private:
    ClearResetOriginParams commonParams_;
    bool matchAll_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ClearOriginParams>
{
    typedef mozilla::dom::quota::ClearOriginParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ResetOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class ResetOriginParams final
{
private:
    typedef mozilla::dom::quota::ClearResetOriginParams ClearResetOriginParams;

public:
    MOZ_IMPLICIT ResetOriginParams() :
        commonParams_()
    {
    }

    MOZ_IMPLICIT ResetOriginParams(const ClearResetOriginParams& _commonParams) :
        commonParams_(_commonParams)
    {
    }

    ClearResetOriginParams&
    commonParams()
    {
        return commonParams_;
    }
    const ClearResetOriginParams&
    commonParams() const
    {
        return commonParams_;
    }

private:
    ClearResetOriginParams commonParams_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ResetOriginParams>
{
    typedef mozilla::dom::quota::ResetOriginParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearDataParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class ClearDataParams final
{
private:
    typedef mozilla::OriginAttributesPattern OriginAttributesPattern;

public:
    MOZ_IMPLICIT ClearDataParams() :
        pattern_()
    {
    }

    MOZ_IMPLICIT ClearDataParams(const OriginAttributesPattern& _pattern) :
        pattern_(_pattern)
    {
    }

    OriginAttributesPattern&
    pattern()
    {
        return pattern_;
    }
    const OriginAttributesPattern&
    pattern() const
    {
        return pattern_;
    }

private:
    OriginAttributesPattern pattern_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ClearDataParams>
{
    typedef mozilla::dom::quota::ClearDataParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearAllParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class ClearAllParams final
{
private:

public:
    MOZ_IMPLICIT ClearAllParams()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ClearAllParams>
{
    typedef mozilla::dom::quota::ClearAllParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ResetAllParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class ResetAllParams final
{
private:

public:
    MOZ_IMPLICIT ResetAllParams()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ResetAllParams>
{
    typedef mozilla::dom::quota::ResetAllParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PersistedParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class PersistedParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT PersistedParams() :
        principalInfo_()
    {
    }

    MOZ_IMPLICIT PersistedParams(const PrincipalInfo& _principalInfo) :
        principalInfo_(_principalInfo)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

private:
    PrincipalInfo principalInfo_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::PersistedParams>
{
    typedef mozilla::dom::quota::PersistedParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PersistParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class PersistParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT PersistParams() :
        principalInfo_()
    {
    }

    MOZ_IMPLICIT PersistParams(const PrincipalInfo& _principalInfo) :
        principalInfo_(_principalInfo)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

private:
    PrincipalInfo principalInfo_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::PersistParams>
{
    typedef mozilla::dom::quota::PersistParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct EstimateParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class EstimateParams final
{
private:
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT EstimateParams() :
        principalInfo_()
    {
    }

    MOZ_IMPLICIT EstimateParams(const PrincipalInfo& _principalInfo) :
        principalInfo_(_principalInfo)
    {
    }

    PrincipalInfo&
    principalInfo()
    {
        return principalInfo_;
    }
    const PrincipalInfo&
    principalInfo() const
    {
        return principalInfo_;
    }

private:
    PrincipalInfo principalInfo_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::EstimateParams>
{
    typedef mozilla::dom::quota::EstimateParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ListOriginsParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class ListOriginsParams final
{
private:

public:
    MOZ_IMPLICIT ListOriginsParams()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ListOriginsParams>
{
    typedef mozilla::dom::quota::ListOriginsParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union RequestParams|
//
namespace mozilla {
namespace dom {
namespace quota {
class RequestParams final
{
public:
    enum Type {
        T__None,
        TStorageNameParams = 1,
        TStorageInitializedParams,
        TTemporaryStorageInitializedParams,
        TInitParams,
        TInitTemporaryStorageParams,
        TInitializePersistentOriginParams,
        TInitializeTemporaryOriginParams,
        TClearOriginParams,
        TResetOriginParams,
        TClearDataParams,
        TClearAllParams,
        TResetAllParams,
        TPersistedParams,
        TPersistParams,
        TEstimateParams,
        TListOriginsParams,
        T__Last = TListOriginsParams
    };

private:
    typedef mozilla::dom::quota::StorageNameParams StorageNameParams;
    typedef mozilla::dom::quota::StorageInitializedParams StorageInitializedParams;
    typedef mozilla::dom::quota::TemporaryStorageInitializedParams TemporaryStorageInitializedParams;
    typedef mozilla::dom::quota::InitParams InitParams;
    typedef mozilla::dom::quota::InitTemporaryStorageParams InitTemporaryStorageParams;
    typedef mozilla::dom::quota::InitializePersistentOriginParams InitializePersistentOriginParams;
    typedef mozilla::dom::quota::InitializeTemporaryOriginParams InitializeTemporaryOriginParams;
    typedef mozilla::dom::quota::ClearOriginParams ClearOriginParams;
    typedef mozilla::dom::quota::ResetOriginParams ResetOriginParams;
    typedef mozilla::dom::quota::ClearDataParams ClearDataParams;
    typedef mozilla::dom::quota::ClearAllParams ClearAllParams;
    typedef mozilla::dom::quota::ResetAllParams ResetAllParams;
    typedef mozilla::dom::quota::PersistedParams PersistedParams;
    typedef mozilla::dom::quota::PersistParams PersistParams;
    typedef mozilla::dom::quota::EstimateParams EstimateParams;
    typedef mozilla::dom::quota::ListOriginsParams ListOriginsParams;
    typedef StorageNameParams StorageNameParams__tdef;
    typedef StorageInitializedParams StorageInitializedParams__tdef;
    typedef TemporaryStorageInitializedParams TemporaryStorageInitializedParams__tdef;
    typedef InitParams InitParams__tdef;
    typedef InitTemporaryStorageParams InitTemporaryStorageParams__tdef;
    typedef InitializePersistentOriginParams InitializePersistentOriginParams__tdef;
    typedef InitializeTemporaryOriginParams InitializeTemporaryOriginParams__tdef;
    typedef ClearOriginParams ClearOriginParams__tdef;
    typedef ResetOriginParams ResetOriginParams__tdef;
    typedef ClearDataParams ClearDataParams__tdef;
    typedef ClearAllParams ClearAllParams__tdef;
    typedef ResetAllParams ResetAllParams__tdef;
    typedef PersistedParams PersistedParams__tdef;
    typedef PersistParams PersistParams__tdef;
    typedef EstimateParams EstimateParams__tdef;
    typedef ListOriginsParams ListOriginsParams__tdef;

    union Value {
        mozilla::AlignedStorage2<StorageNameParams> VStorageNameParams;
        mozilla::AlignedStorage2<StorageInitializedParams> VStorageInitializedParams;
        mozilla::AlignedStorage2<TemporaryStorageInitializedParams> VTemporaryStorageInitializedParams;
        mozilla::AlignedStorage2<InitParams> VInitParams;
        mozilla::AlignedStorage2<InitTemporaryStorageParams> VInitTemporaryStorageParams;
        mozilla::AlignedStorage2<InitializePersistentOriginParams> VInitializePersistentOriginParams;
        mozilla::AlignedStorage2<InitializeTemporaryOriginParams> VInitializeTemporaryOriginParams;
        mozilla::AlignedStorage2<ClearOriginParams> VClearOriginParams;
        mozilla::AlignedStorage2<ResetOriginParams> VResetOriginParams;
        mozilla::AlignedStorage2<ClearDataParams> VClearDataParams;
        mozilla::AlignedStorage2<ClearAllParams> VClearAllParams;
        mozilla::AlignedStorage2<ResetAllParams> VResetAllParams;
        mozilla::AlignedStorage2<PersistedParams> VPersistedParams;
        mozilla::AlignedStorage2<PersistParams> VPersistParams;
        mozilla::AlignedStorage2<EstimateParams> VEstimateParams;
        mozilla::AlignedStorage2<ListOriginsParams> VListOriginsParams;
    };

    StorageNameParams*
    ptr_StorageNameParams()
    {
        return ((mValue).VStorageNameParams).addr();
    }
    const StorageNameParams*
    constptr_StorageNameParams() const
    {
        return ((mValue).VStorageNameParams).addr();
    }
    StorageInitializedParams*
    ptr_StorageInitializedParams()
    {
        return ((mValue).VStorageInitializedParams).addr();
    }
    const StorageInitializedParams*
    constptr_StorageInitializedParams() const
    {
        return ((mValue).VStorageInitializedParams).addr();
    }
    TemporaryStorageInitializedParams*
    ptr_TemporaryStorageInitializedParams()
    {
        return ((mValue).VTemporaryStorageInitializedParams).addr();
    }
    const TemporaryStorageInitializedParams*
    constptr_TemporaryStorageInitializedParams() const
    {
        return ((mValue).VTemporaryStorageInitializedParams).addr();
    }
    InitParams*
    ptr_InitParams()
    {
        return ((mValue).VInitParams).addr();
    }
    const InitParams*
    constptr_InitParams() const
    {
        return ((mValue).VInitParams).addr();
    }
    InitTemporaryStorageParams*
    ptr_InitTemporaryStorageParams()
    {
        return ((mValue).VInitTemporaryStorageParams).addr();
    }
    const InitTemporaryStorageParams*
    constptr_InitTemporaryStorageParams() const
    {
        return ((mValue).VInitTemporaryStorageParams).addr();
    }
    InitializePersistentOriginParams*
    ptr_InitializePersistentOriginParams()
    {
        return ((mValue).VInitializePersistentOriginParams).addr();
    }
    const InitializePersistentOriginParams*
    constptr_InitializePersistentOriginParams() const
    {
        return ((mValue).VInitializePersistentOriginParams).addr();
    }
    InitializeTemporaryOriginParams*
    ptr_InitializeTemporaryOriginParams()
    {
        return ((mValue).VInitializeTemporaryOriginParams).addr();
    }
    const InitializeTemporaryOriginParams*
    constptr_InitializeTemporaryOriginParams() const
    {
        return ((mValue).VInitializeTemporaryOriginParams).addr();
    }
    ClearOriginParams*
    ptr_ClearOriginParams()
    {
        return ((mValue).VClearOriginParams).addr();
    }
    const ClearOriginParams*
    constptr_ClearOriginParams() const
    {
        return ((mValue).VClearOriginParams).addr();
    }
    ResetOriginParams*
    ptr_ResetOriginParams()
    {
        return ((mValue).VResetOriginParams).addr();
    }
    const ResetOriginParams*
    constptr_ResetOriginParams() const
    {
        return ((mValue).VResetOriginParams).addr();
    }
    ClearDataParams*
    ptr_ClearDataParams()
    {
        return ((mValue).VClearDataParams).addr();
    }
    const ClearDataParams*
    constptr_ClearDataParams() const
    {
        return ((mValue).VClearDataParams).addr();
    }
    ClearAllParams*
    ptr_ClearAllParams()
    {
        return ((mValue).VClearAllParams).addr();
    }
    const ClearAllParams*
    constptr_ClearAllParams() const
    {
        return ((mValue).VClearAllParams).addr();
    }
    ResetAllParams*
    ptr_ResetAllParams()
    {
        return ((mValue).VResetAllParams).addr();
    }
    const ResetAllParams*
    constptr_ResetAllParams() const
    {
        return ((mValue).VResetAllParams).addr();
    }
    PersistedParams*
    ptr_PersistedParams()
    {
        return ((mValue).VPersistedParams).addr();
    }
    const PersistedParams*
    constptr_PersistedParams() const
    {
        return ((mValue).VPersistedParams).addr();
    }
    PersistParams*
    ptr_PersistParams()
    {
        return ((mValue).VPersistParams).addr();
    }
    const PersistParams*
    constptr_PersistParams() const
    {
        return ((mValue).VPersistParams).addr();
    }
    EstimateParams*
    ptr_EstimateParams()
    {
        return ((mValue).VEstimateParams).addr();
    }
    const EstimateParams*
    constptr_EstimateParams() const
    {
        return ((mValue).VEstimateParams).addr();
    }
    ListOriginsParams*
    ptr_ListOriginsParams()
    {
        return ((mValue).VListOriginsParams).addr();
    }
    const ListOriginsParams*
    constptr_ListOriginsParams() const
    {
        return ((mValue).VListOriginsParams).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT RequestParams() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT RequestParams(const StorageNameParams& aOther);

    MOZ_IMPLICIT RequestParams(StorageNameParams&& aOther);

    MOZ_IMPLICIT RequestParams(const StorageInitializedParams& aOther);

    MOZ_IMPLICIT RequestParams(StorageInitializedParams&& aOther);

    MOZ_IMPLICIT RequestParams(const TemporaryStorageInitializedParams& aOther);

    MOZ_IMPLICIT RequestParams(TemporaryStorageInitializedParams&& aOther);

    MOZ_IMPLICIT RequestParams(const InitParams& aOther);

    MOZ_IMPLICIT RequestParams(InitParams&& aOther);

    MOZ_IMPLICIT RequestParams(const InitTemporaryStorageParams& aOther);

    MOZ_IMPLICIT RequestParams(InitTemporaryStorageParams&& aOther);

    MOZ_IMPLICIT RequestParams(const InitializePersistentOriginParams& aOther);

    MOZ_IMPLICIT RequestParams(InitializePersistentOriginParams&& aOther);

    MOZ_IMPLICIT RequestParams(const InitializeTemporaryOriginParams& aOther);

    MOZ_IMPLICIT RequestParams(InitializeTemporaryOriginParams&& aOther);

    MOZ_IMPLICIT RequestParams(const ClearOriginParams& aOther);

    MOZ_IMPLICIT RequestParams(ClearOriginParams&& aOther);

    MOZ_IMPLICIT RequestParams(const ResetOriginParams& aOther);

    MOZ_IMPLICIT RequestParams(ResetOriginParams&& aOther);

    MOZ_IMPLICIT RequestParams(const ClearDataParams& aOther);

    MOZ_IMPLICIT RequestParams(ClearDataParams&& aOther);

    MOZ_IMPLICIT RequestParams(const ClearAllParams& aOther);

    MOZ_IMPLICIT RequestParams(ClearAllParams&& aOther);

    MOZ_IMPLICIT RequestParams(const ResetAllParams& aOther);

    MOZ_IMPLICIT RequestParams(ResetAllParams&& aOther);

    MOZ_IMPLICIT RequestParams(const PersistedParams& aOther);

    MOZ_IMPLICIT RequestParams(PersistedParams&& aOther);

    MOZ_IMPLICIT RequestParams(const PersistParams& aOther);

    MOZ_IMPLICIT RequestParams(PersistParams&& aOther);

    MOZ_IMPLICIT RequestParams(const EstimateParams& aOther);

    MOZ_IMPLICIT RequestParams(EstimateParams&& aOther);

    MOZ_IMPLICIT RequestParams(const ListOriginsParams& aOther);

    MOZ_IMPLICIT RequestParams(ListOriginsParams&& aOther);

    MOZ_IMPLICIT RequestParams(const RequestParams& aOther);

    MOZ_IMPLICIT RequestParams(RequestParams&& aOther);

    ~RequestParams();

    Type
    type() const
    {
        return mType;
    }

    RequestParams&
    operator=(const StorageNameParams& aRhs);

    RequestParams&
    operator=(StorageNameParams&& aRhs);

    RequestParams&
    operator=(const StorageInitializedParams& aRhs);

    RequestParams&
    operator=(StorageInitializedParams&& aRhs);

    RequestParams&
    operator=(const TemporaryStorageInitializedParams& aRhs);

    RequestParams&
    operator=(TemporaryStorageInitializedParams&& aRhs);

    RequestParams&
    operator=(const InitParams& aRhs);

    RequestParams&
    operator=(InitParams&& aRhs);

    RequestParams&
    operator=(const InitTemporaryStorageParams& aRhs);

    RequestParams&
    operator=(InitTemporaryStorageParams&& aRhs);

    RequestParams&
    operator=(const InitializePersistentOriginParams& aRhs);

    RequestParams&
    operator=(InitializePersistentOriginParams&& aRhs);

    RequestParams&
    operator=(const InitializeTemporaryOriginParams& aRhs);

    RequestParams&
    operator=(InitializeTemporaryOriginParams&& aRhs);

    RequestParams&
    operator=(const ClearOriginParams& aRhs);

    RequestParams&
    operator=(ClearOriginParams&& aRhs);

    RequestParams&
    operator=(const ResetOriginParams& aRhs);

    RequestParams&
    operator=(ResetOriginParams&& aRhs);

    RequestParams&
    operator=(const ClearDataParams& aRhs);

    RequestParams&
    operator=(ClearDataParams&& aRhs);

    RequestParams&
    operator=(const ClearAllParams& aRhs);

    RequestParams&
    operator=(ClearAllParams&& aRhs);

    RequestParams&
    operator=(const ResetAllParams& aRhs);

    RequestParams&
    operator=(ResetAllParams&& aRhs);

    RequestParams&
    operator=(const PersistedParams& aRhs);

    RequestParams&
    operator=(PersistedParams&& aRhs);

    RequestParams&
    operator=(const PersistParams& aRhs);

    RequestParams&
    operator=(PersistParams&& aRhs);

    RequestParams&
    operator=(const EstimateParams& aRhs);

    RequestParams&
    operator=(EstimateParams&& aRhs);

    RequestParams&
    operator=(const ListOriginsParams& aRhs);

    RequestParams&
    operator=(ListOriginsParams&& aRhs);

    RequestParams&
    operator=(const RequestParams& aRhs);

    RequestParams&
    operator=(RequestParams&& aRhs);

    StorageNameParams&
    get_StorageNameParams()
    {
        AssertSanity(TStorageNameParams);
        return (*(ptr_StorageNameParams()));
    }
    const StorageNameParams&
    get_StorageNameParams() const
    {
        AssertSanity(TStorageNameParams);
        return (*(constptr_StorageNameParams()));
    }
    operator StorageNameParams&()
    {
        return get_StorageNameParams();
    }
    operator const StorageNameParams&() const
    {
        return get_StorageNameParams();
    }

    StorageInitializedParams&
    get_StorageInitializedParams()
    {
        AssertSanity(TStorageInitializedParams);
        return (*(ptr_StorageInitializedParams()));
    }
    const StorageInitializedParams&
    get_StorageInitializedParams() const
    {
        AssertSanity(TStorageInitializedParams);
        return (*(constptr_StorageInitializedParams()));
    }
    operator StorageInitializedParams&()
    {
        return get_StorageInitializedParams();
    }
    operator const StorageInitializedParams&() const
    {
        return get_StorageInitializedParams();
    }

    TemporaryStorageInitializedParams&
    get_TemporaryStorageInitializedParams()
    {
        AssertSanity(TTemporaryStorageInitializedParams);
        return (*(ptr_TemporaryStorageInitializedParams()));
    }
    const TemporaryStorageInitializedParams&
    get_TemporaryStorageInitializedParams() const
    {
        AssertSanity(TTemporaryStorageInitializedParams);
        return (*(constptr_TemporaryStorageInitializedParams()));
    }
    operator TemporaryStorageInitializedParams&()
    {
        return get_TemporaryStorageInitializedParams();
    }
    operator const TemporaryStorageInitializedParams&() const
    {
        return get_TemporaryStorageInitializedParams();
    }

    InitParams&
    get_InitParams()
    {
        AssertSanity(TInitParams);
        return (*(ptr_InitParams()));
    }
    const InitParams&
    get_InitParams() const
    {
        AssertSanity(TInitParams);
        return (*(constptr_InitParams()));
    }
    operator InitParams&()
    {
        return get_InitParams();
    }
    operator const InitParams&() const
    {
        return get_InitParams();
    }

    InitTemporaryStorageParams&
    get_InitTemporaryStorageParams()
    {
        AssertSanity(TInitTemporaryStorageParams);
        return (*(ptr_InitTemporaryStorageParams()));
    }
    const InitTemporaryStorageParams&
    get_InitTemporaryStorageParams() const
    {
        AssertSanity(TInitTemporaryStorageParams);
        return (*(constptr_InitTemporaryStorageParams()));
    }
    operator InitTemporaryStorageParams&()
    {
        return get_InitTemporaryStorageParams();
    }
    operator const InitTemporaryStorageParams&() const
    {
        return get_InitTemporaryStorageParams();
    }

    InitializePersistentOriginParams&
    get_InitializePersistentOriginParams()
    {
        AssertSanity(TInitializePersistentOriginParams);
        return (*(ptr_InitializePersistentOriginParams()));
    }
    const InitializePersistentOriginParams&
    get_InitializePersistentOriginParams() const
    {
        AssertSanity(TInitializePersistentOriginParams);
        return (*(constptr_InitializePersistentOriginParams()));
    }
    operator InitializePersistentOriginParams&()
    {
        return get_InitializePersistentOriginParams();
    }
    operator const InitializePersistentOriginParams&() const
    {
        return get_InitializePersistentOriginParams();
    }

    InitializeTemporaryOriginParams&
    get_InitializeTemporaryOriginParams()
    {
        AssertSanity(TInitializeTemporaryOriginParams);
        return (*(ptr_InitializeTemporaryOriginParams()));
    }
    const InitializeTemporaryOriginParams&
    get_InitializeTemporaryOriginParams() const
    {
        AssertSanity(TInitializeTemporaryOriginParams);
        return (*(constptr_InitializeTemporaryOriginParams()));
    }
    operator InitializeTemporaryOriginParams&()
    {
        return get_InitializeTemporaryOriginParams();
    }
    operator const InitializeTemporaryOriginParams&() const
    {
        return get_InitializeTemporaryOriginParams();
    }

    ClearOriginParams&
    get_ClearOriginParams()
    {
        AssertSanity(TClearOriginParams);
        return (*(ptr_ClearOriginParams()));
    }
    const ClearOriginParams&
    get_ClearOriginParams() const
    {
        AssertSanity(TClearOriginParams);
        return (*(constptr_ClearOriginParams()));
    }
    operator ClearOriginParams&()
    {
        return get_ClearOriginParams();
    }
    operator const ClearOriginParams&() const
    {
        return get_ClearOriginParams();
    }

    ResetOriginParams&
    get_ResetOriginParams()
    {
        AssertSanity(TResetOriginParams);
        return (*(ptr_ResetOriginParams()));
    }
    const ResetOriginParams&
    get_ResetOriginParams() const
    {
        AssertSanity(TResetOriginParams);
        return (*(constptr_ResetOriginParams()));
    }
    operator ResetOriginParams&()
    {
        return get_ResetOriginParams();
    }
    operator const ResetOriginParams&() const
    {
        return get_ResetOriginParams();
    }

    ClearDataParams&
    get_ClearDataParams()
    {
        AssertSanity(TClearDataParams);
        return (*(ptr_ClearDataParams()));
    }
    const ClearDataParams&
    get_ClearDataParams() const
    {
        AssertSanity(TClearDataParams);
        return (*(constptr_ClearDataParams()));
    }
    operator ClearDataParams&()
    {
        return get_ClearDataParams();
    }
    operator const ClearDataParams&() const
    {
        return get_ClearDataParams();
    }

    ClearAllParams&
    get_ClearAllParams()
    {
        AssertSanity(TClearAllParams);
        return (*(ptr_ClearAllParams()));
    }
    const ClearAllParams&
    get_ClearAllParams() const
    {
        AssertSanity(TClearAllParams);
        return (*(constptr_ClearAllParams()));
    }
    operator ClearAllParams&()
    {
        return get_ClearAllParams();
    }
    operator const ClearAllParams&() const
    {
        return get_ClearAllParams();
    }

    ResetAllParams&
    get_ResetAllParams()
    {
        AssertSanity(TResetAllParams);
        return (*(ptr_ResetAllParams()));
    }
    const ResetAllParams&
    get_ResetAllParams() const
    {
        AssertSanity(TResetAllParams);
        return (*(constptr_ResetAllParams()));
    }
    operator ResetAllParams&()
    {
        return get_ResetAllParams();
    }
    operator const ResetAllParams&() const
    {
        return get_ResetAllParams();
    }

    PersistedParams&
    get_PersistedParams()
    {
        AssertSanity(TPersistedParams);
        return (*(ptr_PersistedParams()));
    }
    const PersistedParams&
    get_PersistedParams() const
    {
        AssertSanity(TPersistedParams);
        return (*(constptr_PersistedParams()));
    }
    operator PersistedParams&()
    {
        return get_PersistedParams();
    }
    operator const PersistedParams&() const
    {
        return get_PersistedParams();
    }

    PersistParams&
    get_PersistParams()
    {
        AssertSanity(TPersistParams);
        return (*(ptr_PersistParams()));
    }
    const PersistParams&
    get_PersistParams() const
    {
        AssertSanity(TPersistParams);
        return (*(constptr_PersistParams()));
    }
    operator PersistParams&()
    {
        return get_PersistParams();
    }
    operator const PersistParams&() const
    {
        return get_PersistParams();
    }

    EstimateParams&
    get_EstimateParams()
    {
        AssertSanity(TEstimateParams);
        return (*(ptr_EstimateParams()));
    }
    const EstimateParams&
    get_EstimateParams() const
    {
        AssertSanity(TEstimateParams);
        return (*(constptr_EstimateParams()));
    }
    operator EstimateParams&()
    {
        return get_EstimateParams();
    }
    operator const EstimateParams&() const
    {
        return get_EstimateParams();
    }

    ListOriginsParams&
    get_ListOriginsParams()
    {
        AssertSanity(TListOriginsParams);
        return (*(ptr_ListOriginsParams()));
    }
    const ListOriginsParams&
    get_ListOriginsParams() const
    {
        AssertSanity(TListOriginsParams);
        return (*(constptr_ListOriginsParams()));
    }
    operator ListOriginsParams&()
    {
        return get_ListOriginsParams();
    }
    operator const ListOriginsParams&() const
    {
        return get_ListOriginsParams();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::RequestParams>
{
    typedef mozilla::dom::quota::RequestParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaParent;
} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace quota {
class PQuotaChild;
} // namespace quota
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PQuotaChild and PQuotaParent
//
namespace mozilla {
namespace dom {
namespace quota {
namespace PQuota {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::quota::PQuotaParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::quota::PQuotaChild>* aChild);

enum MessageType {
    PQuotaStart = PQuotaMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PQuotaUsageRequestConstructor__ID,
    Reply_PQuotaUsageRequestConstructor__ID,
    Msg_PQuotaRequestConstructor__ID,
    Reply_PQuotaRequestConstructor__ID,
    Msg_StartIdleMaintenance__ID,
    Msg_StopIdleMaintenance__ID,
    Msg_AbortOperationsForProcess__ID,
    PQuotaEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_PQuotaUsageRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PQuotaUsageRequestConstructor(int32_t routingId);

IPC::Message*
Msg_PQuotaRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PQuotaRequestConstructor(int32_t routingId);

IPC::Message*
Msg_StartIdleMaintenance(int32_t routingId);

IPC::Message*
Msg_StopIdleMaintenance(int32_t routingId);

IPC::Message*
Msg_AbortOperationsForProcess(int32_t routingId);



} // namespace PQuota
} // namespace quota
} // namespace dom
} // namespace mozilla

#endif // ifndef PQuota_h
