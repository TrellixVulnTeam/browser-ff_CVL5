//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PQuotaParent_h
#define PQuotaParent_h

#include "mozilla/dom/quota/PQuota.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/OriginAttributes.h"
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/dom/quota/Client.h"
#include "mozilla/dom/quota/PersistenceType.h"

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaRequestParent;
} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace quota {
class PQuotaRequestChild;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaUsageRequestParent;
} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace quota {
class PQuotaUsageRequestChild;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaRequestParent;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaUsageRequestParent;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {


class PQuotaParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::quota::PQuotaRequestParent;
    friend class mozilla::ipc::PBackgroundParent;
    friend class mozilla::dom::quota::PQuotaUsageRequestParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::quota::AllUsageParams AllUsageParams;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::quota::ClearAllParams ClearAllParams;
    typedef mozilla::dom::quota::ClearDataParams ClearDataParams;
    typedef mozilla::dom::quota::ClearOriginParams ClearOriginParams;
    typedef mozilla::dom::quota::ClearResetOriginParams ClearResetOriginParams;
    typedef mozilla::dom::ContentParentId ContentParentId;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::quota::EstimateParams EstimateParams;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::quota::InitParams InitParams;
    typedef mozilla::dom::quota::InitTemporaryStorageParams InitTemporaryStorageParams;
    typedef mozilla::dom::quota::InitializePersistentOriginParams InitializePersistentOriginParams;
    typedef mozilla::dom::quota::InitializeTemporaryOriginParams InitializeTemporaryOriginParams;
    typedef mozilla::dom::quota::ListOriginsParams ListOriginsParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::OriginAttributesPattern OriginAttributesPattern;
    typedef mozilla::dom::quota::OriginUsageParams OriginUsageParams;
    typedef mozilla::dom::quota::PersistParams PersistParams;
    typedef mozilla::dom::quota::PersistedParams PersistedParams;
    typedef mozilla::dom::quota::PersistenceType PersistenceType;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::dom::quota::RequestParams RequestParams;
    typedef mozilla::dom::quota::ResetAllParams ResetAllParams;
    typedef mozilla::dom::quota::ResetOriginParams ResetOriginParams;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::quota::StorageInitializedParams StorageInitializedParams;
    typedef mozilla::dom::quota::StorageNameParams StorageNameParams;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::quota::TemporaryStorageInitializedParams TemporaryStorageInitializedParams;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::dom::quota::Client::Type Type;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::quota::UsageRequestParams UsageRequestParams;
    typedef mozilla::void_t void_t;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::dom::quota::PQuotaRequestParent PQuotaRequestParent;
    typedef mozilla::dom::quota::PQuotaRequestChild PQuotaRequestChild;
    typedef mozilla::dom::quota::PQuotaUsageRequestParent PQuotaUsageRequestParent;
    typedef mozilla::dom::quota::PQuotaUsageRequestChild PQuotaUsageRequestChild;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvPQuotaUsageRequestConstructor(
            PQuotaUsageRequestParent* actor,
            const UsageRequestParams& params);
    virtual mozilla::ipc::IPCResult
    RecvPQuotaRequestConstructor(
            PQuotaRequestParent* actor,
            const RequestParams& params);
    virtual mozilla::ipc::IPCResult
    RecvStartIdleMaintenance() = 0;
    virtual mozilla::ipc::IPCResult
    RecvStopIdleMaintenance() = 0;
    virtual mozilla::ipc::IPCResult
    RecvAbortOperationsForProcess(const ContentParentId& contentParentId) = 0;
    virtual PQuotaUsageRequestParent*
    AllocPQuotaUsageRequestParent(const UsageRequestParams& params) = 0;
    virtual PQuotaRequestParent*
    AllocPQuotaRequestParent(const RequestParams& params) = 0;
    virtual bool
    DeallocPQuotaRequestParent(PQuotaRequestParent* aActor) = 0;
    virtual bool
    DeallocPQuotaUsageRequestParent(PQuotaUsageRequestParent* aActor) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PQuotaParent();

    virtual ~PQuotaParent();

public:
    PBackgroundParent*
    Manager() const;

    void
    ManagedPQuotaRequestParent(nsTArray<PQuotaRequestParent*>& aArr) const;
    const ManagedContainer<PQuotaRequestParent>&
    ManagedPQuotaRequestParent() const;

    void
    ManagedPQuotaUsageRequestParent(nsTArray<PQuotaUsageRequestParent*>& aArr) const;
    const ManagedContainer<PQuotaUsageRequestParent>&
    ManagedPQuotaUsageRequestParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PQuotaRequestChild>
    OpenPQuotaRequestEndpoint(PQuotaRequestParent* aActor);
    bool
    BindPQuotaRequestEndpoint(
            ManagedEndpoint<PQuotaRequestParent> aEndpoint,
            PQuotaRequestParent* aActor);

    ManagedEndpoint<PQuotaUsageRequestChild>
    OpenPQuotaUsageRequestEndpoint(PQuotaUsageRequestParent* aActor);
    bool
    BindPQuotaUsageRequestEndpoint(
            ManagedEndpoint<PQuotaUsageRequestParent> aEndpoint,
            PQuotaUsageRequestParent* aActor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PQuotaRequestParent> mManagedPQuotaRequestParent;
    ManagedContainer<PQuotaUsageRequestParent> mManagedPQuotaUsageRequestParent;
};


} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::PQuotaParent*>
{
    typedef mozilla::dom::quota::PQuotaParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PQuotaParent_h
