//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PQuotaChild_h
#define PQuotaChild_h

#include "mozilla/dom/quota/PQuota.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/OriginAttributes.h"
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/dom/quota/Client.h"
#include "mozilla/dom/quota/PersistenceType.h"

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaRequestChild;
} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace quota {
class PQuotaRequestParent;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaUsageRequestChild;
} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace quota {
class PQuotaUsageRequestParent;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaRequestChild;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaUsageRequestChild;
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {


class PQuotaChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::quota::PQuotaRequestChild;
    friend class mozilla::ipc::PBackgroundChild;
    friend class mozilla::dom::quota::PQuotaUsageRequestChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::quota::AllUsageParams AllUsageParams;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::quota::ClearAllParams ClearAllParams;
    typedef mozilla::dom::quota::ClearDataParams ClearDataParams;
    typedef mozilla::dom::quota::ClearOriginParams ClearOriginParams;
    typedef mozilla::dom::quota::ClearResetOriginParams ClearResetOriginParams;
    typedef mozilla::dom::ContentParentId ContentParentId;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::quota::EstimateParams EstimateParams;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::quota::InitParams InitParams;
    typedef mozilla::dom::quota::InitTemporaryStorageParams InitTemporaryStorageParams;
    typedef mozilla::dom::quota::InitializePersistentOriginParams InitializePersistentOriginParams;
    typedef mozilla::dom::quota::InitializeTemporaryOriginParams InitializeTemporaryOriginParams;
    typedef mozilla::dom::quota::ListOriginsParams ListOriginsParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::OriginAttributesPattern OriginAttributesPattern;
    typedef mozilla::dom::quota::OriginUsageParams OriginUsageParams;
    typedef mozilla::dom::quota::PersistParams PersistParams;
    typedef mozilla::dom::quota::PersistedParams PersistedParams;
    typedef mozilla::dom::quota::PersistenceType PersistenceType;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::dom::quota::RequestParams RequestParams;
    typedef mozilla::dom::quota::ResetAllParams ResetAllParams;
    typedef mozilla::dom::quota::ResetOriginParams ResetOriginParams;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::quota::StorageInitializedParams StorageInitializedParams;
    typedef mozilla::dom::quota::StorageNameParams StorageNameParams;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::quota::TemporaryStorageInitializedParams TemporaryStorageInitializedParams;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::dom::quota::Client::Type Type;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::quota::UsageRequestParams UsageRequestParams;
    typedef mozilla::void_t void_t;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::dom::quota::PQuotaRequestChild PQuotaRequestChild;
    typedef mozilla::dom::quota::PQuotaRequestParent PQuotaRequestParent;
    typedef mozilla::dom::quota::PQuotaUsageRequestChild PQuotaUsageRequestChild;
    typedef mozilla::dom::quota::PQuotaUsageRequestParent PQuotaUsageRequestParent;

protected:
    virtual PQuotaUsageRequestChild*
    AllocPQuotaUsageRequestChild(const UsageRequestParams& params) = 0;
    virtual PQuotaRequestChild*
    AllocPQuotaRequestChild(const RequestParams& params) = 0;
    virtual bool
    DeallocPQuotaRequestChild(PQuotaRequestChild* aActor) = 0;
    virtual bool
    DeallocPQuotaUsageRequestChild(PQuotaUsageRequestChild* aActor) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PQuotaChild();

    virtual ~PQuotaChild();

public:
    PBackgroundChild*
    Manager() const;

    void
    ManagedPQuotaRequestChild(nsTArray<PQuotaRequestChild*>& aArr) const;
    const ManagedContainer<PQuotaRequestChild>&
    ManagedPQuotaRequestChild() const;

    void
    ManagedPQuotaUsageRequestChild(nsTArray<PQuotaUsageRequestChild*>& aArr) const;
    const ManagedContainer<PQuotaUsageRequestChild>&
    ManagedPQuotaUsageRequestChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PQuotaRequestParent>
    OpenPQuotaRequestEndpoint(PQuotaRequestChild* aActor);
    bool
    BindPQuotaRequestEndpoint(
            ManagedEndpoint<PQuotaRequestChild> aEndpoint,
            PQuotaRequestChild* aActor);

    ManagedEndpoint<PQuotaUsageRequestParent>
    OpenPQuotaUsageRequestEndpoint(PQuotaUsageRequestChild* aActor);
    bool
    BindPQuotaUsageRequestEndpoint(
            ManagedEndpoint<PQuotaUsageRequestChild> aEndpoint,
            PQuotaUsageRequestChild* aActor);

    static bool
    Send__delete__(PQuotaChild* actor);

    PQuotaUsageRequestChild*
    SendPQuotaUsageRequestConstructor(const UsageRequestParams& params);

    PQuotaUsageRequestChild*
    SendPQuotaUsageRequestConstructor(
            PQuotaUsageRequestChild* actor,
            const UsageRequestParams& params);

    PQuotaRequestChild*
    SendPQuotaRequestConstructor(const RequestParams& params);

    PQuotaRequestChild*
    SendPQuotaRequestConstructor(
            PQuotaRequestChild* actor,
            const RequestParams& params);

    bool
    SendStartIdleMaintenance();

    bool
    SendStopIdleMaintenance();

    bool
    SendAbortOperationsForProcess(const ContentParentId& contentParentId);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PQuotaRequestChild> mManagedPQuotaRequestChild;
    ManagedContainer<PQuotaUsageRequestChild> mManagedPQuotaUsageRequestChild;
};


} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::PQuotaChild*>
{
    typedef mozilla::dom::quota::PQuotaChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PQuotaChild_h
