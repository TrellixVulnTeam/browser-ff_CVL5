//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PQuotaRequest_h
#define PQuotaRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct StorageNameResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class StorageNameResponse final
{
private:

public:
    MOZ_IMPLICIT StorageNameResponse() :
        name_()
    {
    }

    MOZ_IMPLICIT StorageNameResponse(const nsString& _name) :
        name_(_name)
    {
    }

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

private:
    nsString name_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::StorageNameResponse>
{
    typedef mozilla::dom::quota::StorageNameResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct StorageInitializedResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class StorageInitializedResponse final
{
private:

public:
    MOZ_IMPLICIT StorageInitializedResponse() :
        initialized_()
    {
    }

    MOZ_IMPLICIT StorageInitializedResponse(const bool& _initialized) :
        initialized_(_initialized)
    {
    }

    bool&
    initialized()
    {
        return initialized_;
    }
    const bool&
    initialized() const
    {
        return initialized_;
    }

private:
    bool initialized_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::StorageInitializedResponse>
{
    typedef mozilla::dom::quota::StorageInitializedResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct TemporaryStorageInitializedResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class TemporaryStorageInitializedResponse final
{
private:

public:
    MOZ_IMPLICIT TemporaryStorageInitializedResponse() :
        initialized_()
    {
    }

    MOZ_IMPLICIT TemporaryStorageInitializedResponse(const bool& _initialized) :
        initialized_(_initialized)
    {
    }

    bool&
    initialized()
    {
        return initialized_;
    }
    const bool&
    initialized() const
    {
        return initialized_;
    }

private:
    bool initialized_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::TemporaryStorageInitializedResponse>
{
    typedef mozilla::dom::quota::TemporaryStorageInitializedResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InitResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class InitResponse final
{
private:

public:
    MOZ_IMPLICIT InitResponse()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::InitResponse>
{
    typedef mozilla::dom::quota::InitResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InitTemporaryStorageResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class InitTemporaryStorageResponse final
{
private:

public:
    MOZ_IMPLICIT InitTemporaryStorageResponse()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::InitTemporaryStorageResponse>
{
    typedef mozilla::dom::quota::InitTemporaryStorageResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InitializePersistentOriginResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class InitializePersistentOriginResponse final
{
private:

public:
    MOZ_IMPLICIT InitializePersistentOriginResponse() :
        created_()
    {
    }

    MOZ_IMPLICIT InitializePersistentOriginResponse(const bool& _created) :
        created_(_created)
    {
    }

    bool&
    created()
    {
        return created_;
    }
    const bool&
    created() const
    {
        return created_;
    }

private:
    bool created_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::InitializePersistentOriginResponse>
{
    typedef mozilla::dom::quota::InitializePersistentOriginResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InitializeTemporaryOriginResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class InitializeTemporaryOriginResponse final
{
private:

public:
    MOZ_IMPLICIT InitializeTemporaryOriginResponse() :
        created_()
    {
    }

    MOZ_IMPLICIT InitializeTemporaryOriginResponse(const bool& _created) :
        created_(_created)
    {
    }

    bool&
    created()
    {
        return created_;
    }
    const bool&
    created() const
    {
        return created_;
    }

private:
    bool created_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::InitializeTemporaryOriginResponse>
{
    typedef mozilla::dom::quota::InitializeTemporaryOriginResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearOriginResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class ClearOriginResponse final
{
private:

public:
    MOZ_IMPLICIT ClearOriginResponse()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ClearOriginResponse>
{
    typedef mozilla::dom::quota::ClearOriginResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ResetOriginResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class ResetOriginResponse final
{
private:

public:
    MOZ_IMPLICIT ResetOriginResponse()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ResetOriginResponse>
{
    typedef mozilla::dom::quota::ResetOriginResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearDataResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class ClearDataResponse final
{
private:

public:
    MOZ_IMPLICIT ClearDataResponse()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ClearDataResponse>
{
    typedef mozilla::dom::quota::ClearDataResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ClearAllResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class ClearAllResponse final
{
private:

public:
    MOZ_IMPLICIT ClearAllResponse()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ClearAllResponse>
{
    typedef mozilla::dom::quota::ClearAllResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ResetAllResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class ResetAllResponse final
{
private:

public:
    MOZ_IMPLICIT ResetAllResponse()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ResetAllResponse>
{
    typedef mozilla::dom::quota::ResetAllResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PersistedResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class PersistedResponse final
{
private:

public:
    MOZ_IMPLICIT PersistedResponse() :
        persisted_()
    {
    }

    MOZ_IMPLICIT PersistedResponse(const bool& _persisted) :
        persisted_(_persisted)
    {
    }

    bool&
    persisted()
    {
        return persisted_;
    }
    const bool&
    persisted() const
    {
        return persisted_;
    }

private:
    bool persisted_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::PersistedResponse>
{
    typedef mozilla::dom::quota::PersistedResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PersistResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class PersistResponse final
{
private:

public:
    MOZ_IMPLICIT PersistResponse()
    {
    }

private:
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::PersistResponse>
{
    typedef mozilla::dom::quota::PersistResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct EstimateResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class EstimateResponse final
{
private:

public:
    MOZ_IMPLICIT EstimateResponse() :
        usage_(),
        limit_()
    {
    }

    MOZ_IMPLICIT EstimateResponse(
            const uint64_t& _usage,
            const uint64_t& _limit) :
        usage_(_usage),
        limit_(_limit)
    {
    }

    uint64_t&
    usage()
    {
        return usage_;
    }
    const uint64_t&
    usage() const
    {
        return usage_;
    }

    uint64_t&
    limit()
    {
        return limit_;
    }
    const uint64_t&
    limit() const
    {
        return limit_;
    }

private:
    void
    StaticAssertions() const;
    uint64_t usage_;
    uint64_t limit_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::EstimateResponse>
{
    typedef mozilla::dom::quota::EstimateResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ListOriginsResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class ListOriginsResponse final
{
private:

public:
    MOZ_IMPLICIT ListOriginsResponse() :
        origins_()
    {
    }

    MOZ_IMPLICIT ListOriginsResponse(const nsTArray<nsCString>& _origins) :
        origins_(_origins)
    {
    }

    nsTArray<nsCString>&
    origins()
    {
        return origins_;
    }
    const nsTArray<nsCString>&
    origins() const
    {
        return origins_;
    }

private:
    CopyableTArray<nsCString> origins_;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::ListOriginsResponse>
{
    typedef mozilla::dom::quota::ListOriginsResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union RequestResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
class RequestResponse final
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TStorageNameResponse,
        TStorageInitializedResponse,
        TTemporaryStorageInitializedResponse,
        TInitResponse,
        TInitTemporaryStorageResponse,
        TInitializePersistentOriginResponse,
        TInitializeTemporaryOriginResponse,
        TClearOriginResponse,
        TResetOriginResponse,
        TClearDataResponse,
        TClearAllResponse,
        TResetAllResponse,
        TPersistedResponse,
        TPersistResponse,
        TEstimateResponse,
        TListOriginsResponse,
        T__Last = TListOriginsResponse
    };

private:
    typedef mozilla::dom::quota::StorageNameResponse StorageNameResponse;
    typedef mozilla::dom::quota::StorageInitializedResponse StorageInitializedResponse;
    typedef mozilla::dom::quota::TemporaryStorageInitializedResponse TemporaryStorageInitializedResponse;
    typedef mozilla::dom::quota::InitResponse InitResponse;
    typedef mozilla::dom::quota::InitTemporaryStorageResponse InitTemporaryStorageResponse;
    typedef mozilla::dom::quota::InitializePersistentOriginResponse InitializePersistentOriginResponse;
    typedef mozilla::dom::quota::InitializeTemporaryOriginResponse InitializeTemporaryOriginResponse;
    typedef mozilla::dom::quota::ClearOriginResponse ClearOriginResponse;
    typedef mozilla::dom::quota::ResetOriginResponse ResetOriginResponse;
    typedef mozilla::dom::quota::ClearDataResponse ClearDataResponse;
    typedef mozilla::dom::quota::ClearAllResponse ClearAllResponse;
    typedef mozilla::dom::quota::ResetAllResponse ResetAllResponse;
    typedef mozilla::dom::quota::PersistedResponse PersistedResponse;
    typedef mozilla::dom::quota::PersistResponse PersistResponse;
    typedef mozilla::dom::quota::EstimateResponse EstimateResponse;
    typedef mozilla::dom::quota::ListOriginsResponse ListOriginsResponse;
    typedef nsresult nsresult__tdef;
    typedef StorageNameResponse StorageNameResponse__tdef;
    typedef StorageInitializedResponse StorageInitializedResponse__tdef;
    typedef TemporaryStorageInitializedResponse TemporaryStorageInitializedResponse__tdef;
    typedef InitResponse InitResponse__tdef;
    typedef InitTemporaryStorageResponse InitTemporaryStorageResponse__tdef;
    typedef InitializePersistentOriginResponse InitializePersistentOriginResponse__tdef;
    typedef InitializeTemporaryOriginResponse InitializeTemporaryOriginResponse__tdef;
    typedef ClearOriginResponse ClearOriginResponse__tdef;
    typedef ResetOriginResponse ResetOriginResponse__tdef;
    typedef ClearDataResponse ClearDataResponse__tdef;
    typedef ClearAllResponse ClearAllResponse__tdef;
    typedef ResetAllResponse ResetAllResponse__tdef;
    typedef PersistedResponse PersistedResponse__tdef;
    typedef PersistResponse PersistResponse__tdef;
    typedef EstimateResponse EstimateResponse__tdef;
    typedef ListOriginsResponse ListOriginsResponse__tdef;

    union Value {
        mozilla::AlignedStorage2<nsresult> Vnsresult;
        mozilla::AlignedStorage2<StorageNameResponse> VStorageNameResponse;
        mozilla::AlignedStorage2<StorageInitializedResponse> VStorageInitializedResponse;
        mozilla::AlignedStorage2<TemporaryStorageInitializedResponse> VTemporaryStorageInitializedResponse;
        mozilla::AlignedStorage2<InitResponse> VInitResponse;
        mozilla::AlignedStorage2<InitTemporaryStorageResponse> VInitTemporaryStorageResponse;
        mozilla::AlignedStorage2<InitializePersistentOriginResponse> VInitializePersistentOriginResponse;
        mozilla::AlignedStorage2<InitializeTemporaryOriginResponse> VInitializeTemporaryOriginResponse;
        mozilla::AlignedStorage2<ClearOriginResponse> VClearOriginResponse;
        mozilla::AlignedStorage2<ResetOriginResponse> VResetOriginResponse;
        mozilla::AlignedStorage2<ClearDataResponse> VClearDataResponse;
        mozilla::AlignedStorage2<ClearAllResponse> VClearAllResponse;
        mozilla::AlignedStorage2<ResetAllResponse> VResetAllResponse;
        mozilla::AlignedStorage2<PersistedResponse> VPersistedResponse;
        mozilla::AlignedStorage2<PersistResponse> VPersistResponse;
        mozilla::AlignedStorage2<EstimateResponse> VEstimateResponse;
        mozilla::AlignedStorage2<ListOriginsResponse> VListOriginsResponse;
    };

    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }
    StorageNameResponse*
    ptr_StorageNameResponse()
    {
        return ((mValue).VStorageNameResponse).addr();
    }
    const StorageNameResponse*
    constptr_StorageNameResponse() const
    {
        return ((mValue).VStorageNameResponse).addr();
    }
    StorageInitializedResponse*
    ptr_StorageInitializedResponse()
    {
        return ((mValue).VStorageInitializedResponse).addr();
    }
    const StorageInitializedResponse*
    constptr_StorageInitializedResponse() const
    {
        return ((mValue).VStorageInitializedResponse).addr();
    }
    TemporaryStorageInitializedResponse*
    ptr_TemporaryStorageInitializedResponse()
    {
        return ((mValue).VTemporaryStorageInitializedResponse).addr();
    }
    const TemporaryStorageInitializedResponse*
    constptr_TemporaryStorageInitializedResponse() const
    {
        return ((mValue).VTemporaryStorageInitializedResponse).addr();
    }
    InitResponse*
    ptr_InitResponse()
    {
        return ((mValue).VInitResponse).addr();
    }
    const InitResponse*
    constptr_InitResponse() const
    {
        return ((mValue).VInitResponse).addr();
    }
    InitTemporaryStorageResponse*
    ptr_InitTemporaryStorageResponse()
    {
        return ((mValue).VInitTemporaryStorageResponse).addr();
    }
    const InitTemporaryStorageResponse*
    constptr_InitTemporaryStorageResponse() const
    {
        return ((mValue).VInitTemporaryStorageResponse).addr();
    }
    InitializePersistentOriginResponse*
    ptr_InitializePersistentOriginResponse()
    {
        return ((mValue).VInitializePersistentOriginResponse).addr();
    }
    const InitializePersistentOriginResponse*
    constptr_InitializePersistentOriginResponse() const
    {
        return ((mValue).VInitializePersistentOriginResponse).addr();
    }
    InitializeTemporaryOriginResponse*
    ptr_InitializeTemporaryOriginResponse()
    {
        return ((mValue).VInitializeTemporaryOriginResponse).addr();
    }
    const InitializeTemporaryOriginResponse*
    constptr_InitializeTemporaryOriginResponse() const
    {
        return ((mValue).VInitializeTemporaryOriginResponse).addr();
    }
    ClearOriginResponse*
    ptr_ClearOriginResponse()
    {
        return ((mValue).VClearOriginResponse).addr();
    }
    const ClearOriginResponse*
    constptr_ClearOriginResponse() const
    {
        return ((mValue).VClearOriginResponse).addr();
    }
    ResetOriginResponse*
    ptr_ResetOriginResponse()
    {
        return ((mValue).VResetOriginResponse).addr();
    }
    const ResetOriginResponse*
    constptr_ResetOriginResponse() const
    {
        return ((mValue).VResetOriginResponse).addr();
    }
    ClearDataResponse*
    ptr_ClearDataResponse()
    {
        return ((mValue).VClearDataResponse).addr();
    }
    const ClearDataResponse*
    constptr_ClearDataResponse() const
    {
        return ((mValue).VClearDataResponse).addr();
    }
    ClearAllResponse*
    ptr_ClearAllResponse()
    {
        return ((mValue).VClearAllResponse).addr();
    }
    const ClearAllResponse*
    constptr_ClearAllResponse() const
    {
        return ((mValue).VClearAllResponse).addr();
    }
    ResetAllResponse*
    ptr_ResetAllResponse()
    {
        return ((mValue).VResetAllResponse).addr();
    }
    const ResetAllResponse*
    constptr_ResetAllResponse() const
    {
        return ((mValue).VResetAllResponse).addr();
    }
    PersistedResponse*
    ptr_PersistedResponse()
    {
        return ((mValue).VPersistedResponse).addr();
    }
    const PersistedResponse*
    constptr_PersistedResponse() const
    {
        return ((mValue).VPersistedResponse).addr();
    }
    PersistResponse*
    ptr_PersistResponse()
    {
        return ((mValue).VPersistResponse).addr();
    }
    const PersistResponse*
    constptr_PersistResponse() const
    {
        return ((mValue).VPersistResponse).addr();
    }
    EstimateResponse*
    ptr_EstimateResponse()
    {
        return ((mValue).VEstimateResponse).addr();
    }
    const EstimateResponse*
    constptr_EstimateResponse() const
    {
        return ((mValue).VEstimateResponse).addr();
    }
    ListOriginsResponse*
    ptr_ListOriginsResponse()
    {
        return ((mValue).VListOriginsResponse).addr();
    }
    const ListOriginsResponse*
    constptr_ListOriginsResponse() const
    {
        return ((mValue).VListOriginsResponse).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT RequestResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT RequestResponse(const nsresult& aOther);

    MOZ_IMPLICIT RequestResponse(nsresult&& aOther);

    MOZ_IMPLICIT RequestResponse(const StorageNameResponse& aOther);

    MOZ_IMPLICIT RequestResponse(StorageNameResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const StorageInitializedResponse& aOther);

    MOZ_IMPLICIT RequestResponse(StorageInitializedResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const TemporaryStorageInitializedResponse& aOther);

    MOZ_IMPLICIT RequestResponse(TemporaryStorageInitializedResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const InitResponse& aOther);

    MOZ_IMPLICIT RequestResponse(InitResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const InitTemporaryStorageResponse& aOther);

    MOZ_IMPLICIT RequestResponse(InitTemporaryStorageResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const InitializePersistentOriginResponse& aOther);

    MOZ_IMPLICIT RequestResponse(InitializePersistentOriginResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const InitializeTemporaryOriginResponse& aOther);

    MOZ_IMPLICIT RequestResponse(InitializeTemporaryOriginResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ClearOriginResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ClearOriginResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ResetOriginResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ResetOriginResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ClearDataResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ClearDataResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ClearAllResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ClearAllResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ResetAllResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ResetAllResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const PersistedResponse& aOther);

    MOZ_IMPLICIT RequestResponse(PersistedResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const PersistResponse& aOther);

    MOZ_IMPLICIT RequestResponse(PersistResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const EstimateResponse& aOther);

    MOZ_IMPLICIT RequestResponse(EstimateResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const ListOriginsResponse& aOther);

    MOZ_IMPLICIT RequestResponse(ListOriginsResponse&& aOther);

    MOZ_IMPLICIT RequestResponse(const RequestResponse& aOther);

    MOZ_IMPLICIT RequestResponse(RequestResponse&& aOther);

    ~RequestResponse();

    Type
    type() const
    {
        return mType;
    }

    RequestResponse&
    operator=(const nsresult& aRhs);

    RequestResponse&
    operator=(nsresult&& aRhs);

    RequestResponse&
    operator=(const StorageNameResponse& aRhs);

    RequestResponse&
    operator=(StorageNameResponse&& aRhs);

    RequestResponse&
    operator=(const StorageInitializedResponse& aRhs);

    RequestResponse&
    operator=(StorageInitializedResponse&& aRhs);

    RequestResponse&
    operator=(const TemporaryStorageInitializedResponse& aRhs);

    RequestResponse&
    operator=(TemporaryStorageInitializedResponse&& aRhs);

    RequestResponse&
    operator=(const InitResponse& aRhs);

    RequestResponse&
    operator=(InitResponse&& aRhs);

    RequestResponse&
    operator=(const InitTemporaryStorageResponse& aRhs);

    RequestResponse&
    operator=(InitTemporaryStorageResponse&& aRhs);

    RequestResponse&
    operator=(const InitializePersistentOriginResponse& aRhs);

    RequestResponse&
    operator=(InitializePersistentOriginResponse&& aRhs);

    RequestResponse&
    operator=(const InitializeTemporaryOriginResponse& aRhs);

    RequestResponse&
    operator=(InitializeTemporaryOriginResponse&& aRhs);

    RequestResponse&
    operator=(const ClearOriginResponse& aRhs);

    RequestResponse&
    operator=(ClearOriginResponse&& aRhs);

    RequestResponse&
    operator=(const ResetOriginResponse& aRhs);

    RequestResponse&
    operator=(ResetOriginResponse&& aRhs);

    RequestResponse&
    operator=(const ClearDataResponse& aRhs);

    RequestResponse&
    operator=(ClearDataResponse&& aRhs);

    RequestResponse&
    operator=(const ClearAllResponse& aRhs);

    RequestResponse&
    operator=(ClearAllResponse&& aRhs);

    RequestResponse&
    operator=(const ResetAllResponse& aRhs);

    RequestResponse&
    operator=(ResetAllResponse&& aRhs);

    RequestResponse&
    operator=(const PersistedResponse& aRhs);

    RequestResponse&
    operator=(PersistedResponse&& aRhs);

    RequestResponse&
    operator=(const PersistResponse& aRhs);

    RequestResponse&
    operator=(PersistResponse&& aRhs);

    RequestResponse&
    operator=(const EstimateResponse& aRhs);

    RequestResponse&
    operator=(EstimateResponse&& aRhs);

    RequestResponse&
    operator=(const ListOriginsResponse& aRhs);

    RequestResponse&
    operator=(ListOriginsResponse&& aRhs);

    RequestResponse&
    operator=(const RequestResponse& aRhs);

    RequestResponse&
    operator=(RequestResponse&& aRhs);

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    StorageNameResponse&
    get_StorageNameResponse()
    {
        AssertSanity(TStorageNameResponse);
        return (*(ptr_StorageNameResponse()));
    }
    const StorageNameResponse&
    get_StorageNameResponse() const
    {
        AssertSanity(TStorageNameResponse);
        return (*(constptr_StorageNameResponse()));
    }
    operator StorageNameResponse&()
    {
        return get_StorageNameResponse();
    }
    operator const StorageNameResponse&() const
    {
        return get_StorageNameResponse();
    }

    StorageInitializedResponse&
    get_StorageInitializedResponse()
    {
        AssertSanity(TStorageInitializedResponse);
        return (*(ptr_StorageInitializedResponse()));
    }
    const StorageInitializedResponse&
    get_StorageInitializedResponse() const
    {
        AssertSanity(TStorageInitializedResponse);
        return (*(constptr_StorageInitializedResponse()));
    }
    operator StorageInitializedResponse&()
    {
        return get_StorageInitializedResponse();
    }
    operator const StorageInitializedResponse&() const
    {
        return get_StorageInitializedResponse();
    }

    TemporaryStorageInitializedResponse&
    get_TemporaryStorageInitializedResponse()
    {
        AssertSanity(TTemporaryStorageInitializedResponse);
        return (*(ptr_TemporaryStorageInitializedResponse()));
    }
    const TemporaryStorageInitializedResponse&
    get_TemporaryStorageInitializedResponse() const
    {
        AssertSanity(TTemporaryStorageInitializedResponse);
        return (*(constptr_TemporaryStorageInitializedResponse()));
    }
    operator TemporaryStorageInitializedResponse&()
    {
        return get_TemporaryStorageInitializedResponse();
    }
    operator const TemporaryStorageInitializedResponse&() const
    {
        return get_TemporaryStorageInitializedResponse();
    }

    InitResponse&
    get_InitResponse()
    {
        AssertSanity(TInitResponse);
        return (*(ptr_InitResponse()));
    }
    const InitResponse&
    get_InitResponse() const
    {
        AssertSanity(TInitResponse);
        return (*(constptr_InitResponse()));
    }
    operator InitResponse&()
    {
        return get_InitResponse();
    }
    operator const InitResponse&() const
    {
        return get_InitResponse();
    }

    InitTemporaryStorageResponse&
    get_InitTemporaryStorageResponse()
    {
        AssertSanity(TInitTemporaryStorageResponse);
        return (*(ptr_InitTemporaryStorageResponse()));
    }
    const InitTemporaryStorageResponse&
    get_InitTemporaryStorageResponse() const
    {
        AssertSanity(TInitTemporaryStorageResponse);
        return (*(constptr_InitTemporaryStorageResponse()));
    }
    operator InitTemporaryStorageResponse&()
    {
        return get_InitTemporaryStorageResponse();
    }
    operator const InitTemporaryStorageResponse&() const
    {
        return get_InitTemporaryStorageResponse();
    }

    InitializePersistentOriginResponse&
    get_InitializePersistentOriginResponse()
    {
        AssertSanity(TInitializePersistentOriginResponse);
        return (*(ptr_InitializePersistentOriginResponse()));
    }
    const InitializePersistentOriginResponse&
    get_InitializePersistentOriginResponse() const
    {
        AssertSanity(TInitializePersistentOriginResponse);
        return (*(constptr_InitializePersistentOriginResponse()));
    }
    operator InitializePersistentOriginResponse&()
    {
        return get_InitializePersistentOriginResponse();
    }
    operator const InitializePersistentOriginResponse&() const
    {
        return get_InitializePersistentOriginResponse();
    }

    InitializeTemporaryOriginResponse&
    get_InitializeTemporaryOriginResponse()
    {
        AssertSanity(TInitializeTemporaryOriginResponse);
        return (*(ptr_InitializeTemporaryOriginResponse()));
    }
    const InitializeTemporaryOriginResponse&
    get_InitializeTemporaryOriginResponse() const
    {
        AssertSanity(TInitializeTemporaryOriginResponse);
        return (*(constptr_InitializeTemporaryOriginResponse()));
    }
    operator InitializeTemporaryOriginResponse&()
    {
        return get_InitializeTemporaryOriginResponse();
    }
    operator const InitializeTemporaryOriginResponse&() const
    {
        return get_InitializeTemporaryOriginResponse();
    }

    ClearOriginResponse&
    get_ClearOriginResponse()
    {
        AssertSanity(TClearOriginResponse);
        return (*(ptr_ClearOriginResponse()));
    }
    const ClearOriginResponse&
    get_ClearOriginResponse() const
    {
        AssertSanity(TClearOriginResponse);
        return (*(constptr_ClearOriginResponse()));
    }
    operator ClearOriginResponse&()
    {
        return get_ClearOriginResponse();
    }
    operator const ClearOriginResponse&() const
    {
        return get_ClearOriginResponse();
    }

    ResetOriginResponse&
    get_ResetOriginResponse()
    {
        AssertSanity(TResetOriginResponse);
        return (*(ptr_ResetOriginResponse()));
    }
    const ResetOriginResponse&
    get_ResetOriginResponse() const
    {
        AssertSanity(TResetOriginResponse);
        return (*(constptr_ResetOriginResponse()));
    }
    operator ResetOriginResponse&()
    {
        return get_ResetOriginResponse();
    }
    operator const ResetOriginResponse&() const
    {
        return get_ResetOriginResponse();
    }

    ClearDataResponse&
    get_ClearDataResponse()
    {
        AssertSanity(TClearDataResponse);
        return (*(ptr_ClearDataResponse()));
    }
    const ClearDataResponse&
    get_ClearDataResponse() const
    {
        AssertSanity(TClearDataResponse);
        return (*(constptr_ClearDataResponse()));
    }
    operator ClearDataResponse&()
    {
        return get_ClearDataResponse();
    }
    operator const ClearDataResponse&() const
    {
        return get_ClearDataResponse();
    }

    ClearAllResponse&
    get_ClearAllResponse()
    {
        AssertSanity(TClearAllResponse);
        return (*(ptr_ClearAllResponse()));
    }
    const ClearAllResponse&
    get_ClearAllResponse() const
    {
        AssertSanity(TClearAllResponse);
        return (*(constptr_ClearAllResponse()));
    }
    operator ClearAllResponse&()
    {
        return get_ClearAllResponse();
    }
    operator const ClearAllResponse&() const
    {
        return get_ClearAllResponse();
    }

    ResetAllResponse&
    get_ResetAllResponse()
    {
        AssertSanity(TResetAllResponse);
        return (*(ptr_ResetAllResponse()));
    }
    const ResetAllResponse&
    get_ResetAllResponse() const
    {
        AssertSanity(TResetAllResponse);
        return (*(constptr_ResetAllResponse()));
    }
    operator ResetAllResponse&()
    {
        return get_ResetAllResponse();
    }
    operator const ResetAllResponse&() const
    {
        return get_ResetAllResponse();
    }

    PersistedResponse&
    get_PersistedResponse()
    {
        AssertSanity(TPersistedResponse);
        return (*(ptr_PersistedResponse()));
    }
    const PersistedResponse&
    get_PersistedResponse() const
    {
        AssertSanity(TPersistedResponse);
        return (*(constptr_PersistedResponse()));
    }
    operator PersistedResponse&()
    {
        return get_PersistedResponse();
    }
    operator const PersistedResponse&() const
    {
        return get_PersistedResponse();
    }

    PersistResponse&
    get_PersistResponse()
    {
        AssertSanity(TPersistResponse);
        return (*(ptr_PersistResponse()));
    }
    const PersistResponse&
    get_PersistResponse() const
    {
        AssertSanity(TPersistResponse);
        return (*(constptr_PersistResponse()));
    }
    operator PersistResponse&()
    {
        return get_PersistResponse();
    }
    operator const PersistResponse&() const
    {
        return get_PersistResponse();
    }

    EstimateResponse&
    get_EstimateResponse()
    {
        AssertSanity(TEstimateResponse);
        return (*(ptr_EstimateResponse()));
    }
    const EstimateResponse&
    get_EstimateResponse() const
    {
        AssertSanity(TEstimateResponse);
        return (*(constptr_EstimateResponse()));
    }
    operator EstimateResponse&()
    {
        return get_EstimateResponse();
    }
    operator const EstimateResponse&() const
    {
        return get_EstimateResponse();
    }

    ListOriginsResponse&
    get_ListOriginsResponse()
    {
        AssertSanity(TListOriginsResponse);
        return (*(ptr_ListOriginsResponse()));
    }
    const ListOriginsResponse&
    get_ListOriginsResponse() const
    {
        AssertSanity(TListOriginsResponse);
        return (*(constptr_ListOriginsResponse()));
    }
    operator ListOriginsResponse&()
    {
        return get_ListOriginsResponse();
    }
    operator const ListOriginsResponse&() const
    {
        return get_ListOriginsResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::quota::RequestResponse>
{
    typedef mozilla::dom::quota::RequestResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace quota {
class PQuotaRequestParent;
} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace quota {
class PQuotaRequestChild;
} // namespace quota
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PQuotaRequestChild and PQuotaRequestParent
//
namespace mozilla {
namespace dom {
namespace quota {
namespace PQuotaRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::quota::PQuotaRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::quota::PQuotaRequestChild>* aChild);

enum MessageType {
    PQuotaRequestStart = PQuotaRequestMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    PQuotaRequestEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PQuotaRequest
} // namespace quota
} // namespace dom
} // namespace mozilla

#endif // ifndef PQuotaRequest_h
