//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebGLChild_h
#define PWebGLChild_h

#include "mozilla/dom/PWebGL.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/IpdlQueue.h"
#include "mozilla/dom/WebGLIpdl.h"
#include "mozilla/layers/LayersTypes.h"
#include "string"

namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PLayerTransactionChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PLayerTransactionParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {


class PWebGLChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::layers::PCompositorBridgeChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::webgl::CompileResult CompileResult;
    typedef mozilla::layers::CompositableHandle CompositableHandle;
    typedef mozilla::webgl::ContextLossReason ContextLossReason;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::webgl::FrontBufferSnapshotIpc FrontBufferSnapshotIpc;
    typedef mozilla::webgl::GetUniformData GetUniformData;
    typedef mozilla::webgl::InitContextDesc InitContextDesc;
    typedef mozilla::webgl::InitContextResult InitContextResult;
    typedef mozilla::webgl::Int32Vector Int32Vector;
    typedef mozilla::dom::IpdlQueueBuffer IpdlQueueBuffer;
    typedef mozilla::dom::IpdlQueueBuffers IpdlQueueBuffers;
    typedef mozilla::webgl::LinkResult LinkResult;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::webgl::OpaqueFramebufferOptions OpaqueFramebufferOptions;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::webgl::ReadPixelsDesc ReadPixelsDesc;
    typedef mozilla::webgl::ReadPixelsResultIpc ReadPixelsResultIpc;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::webgl::ShaderPrecisionFormat ShaderPrecisionFormat;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef std::string string;
    typedef mozilla::uvec2 uvec2;
    typedef mozilla::layers::PCompositorBridgeChild PCompositorBridgeChild;
    typedef mozilla::layers::PCompositorBridgeParent PCompositorBridgeParent;
    typedef mozilla::layers::PLayerTransactionChild PLayerTransactionChild;
    typedef mozilla::layers::PLayerTransactionParent PLayerTransactionParent;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PWebGLChild();

    virtual ~PWebGLChild();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PCompositorBridgeChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendInitialize(
            const InitContextDesc& desc,
            InitContextResult* res);

    static bool
    Send__delete__(PWebGLChild* actor);

    bool
    SendDispatchCommands(
            Shmem&& commands,
            const uint64_t& size);

    bool
    SendGetBufferSubData(
            const uint32_t& target,
            const uint64_t& srcByteOffset,
            const uint64_t& byteSize,
            Shmem* ret);

    bool
    SendGetFrontBufferSnapshot(FrontBufferSnapshotIpc* ret);

    bool
    SendReadPixels(
            const ReadPixelsDesc& desc,
            const uint64_t& maxBytes,
            ReadPixelsResultIpc* ret);

    bool
    SendCheckFramebufferStatus(
            const uint32_t& target,
            uint32_t* ret);

    bool
    SendClientWaitSync(
            const uint64_t& id,
            const uint32_t& flags,
            const uint64_t& timeout,
            uint32_t* ret);

    bool
    SendCreateOpaqueFramebuffer(
            const uint64_t& id,
            const OpaqueFramebufferOptions& options,
            bool* ret);

    bool
    SendDrawingBufferSize(uvec2* ret);

    bool
    SendFinish();

    bool
    SendGetBufferParameter(
            const uint32_t& target,
            const uint32_t& pname,
            mozilla::Maybe<double>* ret);

    bool
    SendGetCompileResult(
            const uint64_t& id,
            CompileResult* ret);

    bool
    SendGetError(uint32_t* ret);

    bool
    SendGetFragDataLocation(
            const uint64_t& id,
            const string& name,
            int32_t* ret);

    bool
    SendGetFramebufferAttachmentParameter(
            const uint64_t& id,
            const uint32_t& attachment,
            const uint32_t& pname,
            mozilla::Maybe<double>* ret);

    bool
    SendGetFrontBuffer(
            const uint64_t& fb,
            const bool& vr,
            mozilla::Maybe<SurfaceDescriptor>* ret);

    bool
    SendGetIndexedParameter(
            const uint32_t& target,
            const uint32_t& index,
            mozilla::Maybe<double>* ret);

    bool
    SendGetInternalformatParameter(
            const uint32_t& target,
            const uint32_t& internalFormat,
            const uint32_t& pname,
            mozilla::Maybe<Int32Vector>* ret);

    bool
    SendGetLinkResult(
            const uint64_t& id,
            LinkResult* ret);

    bool
    SendGetNumber(
            const uint32_t& pname,
            mozilla::Maybe<double>* ret);

    bool
    SendGetQueryParameter(
            const uint64_t& id,
            const uint32_t& pname,
            mozilla::Maybe<double>* ret);

    bool
    SendGetRenderbufferParameter(
            const uint64_t& id,
            const uint32_t& pname,
            mozilla::Maybe<double>* ret);

    bool
    SendGetSamplerParameter(
            const uint64_t& id,
            const uint32_t& pname,
            mozilla::Maybe<double>* ret);

    bool
    SendGetShaderPrecisionFormat(
            const uint32_t& shaderType,
            const uint32_t& precisionType,
            mozilla::Maybe<ShaderPrecisionFormat>* ret);

    bool
    SendGetString(
            const uint32_t& pname,
            mozilla::Maybe<string>* ret);

    bool
    SendGetTexParameter(
            const uint64_t& id,
            const uint32_t& pname,
            mozilla::Maybe<double>* ret);

    bool
    SendGetUniform(
            const uint64_t& id,
            const uint32_t& loc,
            GetUniformData* ret);

    bool
    SendGetVertexAttrib(
            const uint32_t& index,
            const uint32_t& pname,
            mozilla::Maybe<double>* ret);

    bool
    SendIsEnabled(
            const uint32_t& cap,
            bool* ret);

    bool
    SendOnMemoryPressure();

    bool
    SendValidateProgram(
            const uint64_t& id,
            bool* ret);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::PWebGLChild*>
{
    typedef mozilla::dom::PWebGLChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PWebGLChild_h
