//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PServiceWorkerRegistration_h
#define PServiceWorkerRegistration_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/dom/IPCServiceWorkerRegistrationDescriptor.h"

namespace mozilla {
namespace dom {
class PServiceWorkerRegistrationParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PServiceWorkerRegistrationChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PServiceWorkerRegistrationChild and PServiceWorkerRegistrationParent
//
namespace mozilla {
namespace dom {
namespace PServiceWorkerRegistration {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PServiceWorkerRegistrationParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PServiceWorkerRegistrationChild>* aChild);

enum MessageType {
    PServiceWorkerRegistrationStart = PServiceWorkerRegistrationMsgStart << 16,
    Msg_Teardown__ID,
    Msg_Unregister__ID,
    Reply_Unregister__ID,
    Msg_Update__ID,
    Reply_Update__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_UpdateState__ID,
    Msg_FireUpdateFound__ID,
    PServiceWorkerRegistrationEnd
};

IPC::Message*
Msg_Teardown(int32_t routingId);

IPC::Message*
Msg_Unregister(int32_t routingId);
IPC::Message*
Reply_Unregister(int32_t routingId);

IPC::Message*
Msg_Update(int32_t routingId);
IPC::Message*
Reply_Update(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_UpdateState(int32_t routingId);

IPC::Message*
Msg_FireUpdateFound(int32_t routingId);



} // namespace PServiceWorkerRegistration
} // namespace dom
} // namespace mozilla

#endif // ifndef PServiceWorkerRegistration_h
