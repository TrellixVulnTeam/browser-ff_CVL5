//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundLSDatabase_h
#define PBackgroundLSDatabase_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/LSSnapshot.h"
#include "mozilla/dom/PBackgroundLSSharedTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LSSnapshotInitInfo|
//
namespace mozilla {
namespace dom {
class LSSnapshotInitInfo final
{
private:
    typedef mozilla::dom::LSItemInfo LSItemInfo;
    typedef mozilla::dom::LSSnapshot::LoadState LoadState;

public:
    MOZ_IMPLICIT LSSnapshotInitInfo() :
        addKeyToUnknownItems_(),
        itemInfos_(),
        loadState_(),
        hasOtherProcessObservers_(),
        initialUsage_(),
        peakUsage_(),
        totalLength_()
    {
    }

    MOZ_IMPLICIT LSSnapshotInitInfo(
            const bool& _addKeyToUnknownItems,
            const nsTArray<LSItemInfo>& _itemInfos,
            const uint32_t& _totalLength,
            const int64_t& _initialUsage,
            const int64_t& _peakUsage,
            const LoadState& _loadState,
            const bool& _hasOtherProcessObservers) :
        addKeyToUnknownItems_(_addKeyToUnknownItems),
        itemInfos_(_itemInfos),
        loadState_(_loadState),
        hasOtherProcessObservers_(_hasOtherProcessObservers),
        initialUsage_(_initialUsage),
        peakUsage_(_peakUsage),
        totalLength_(_totalLength)
    {
    }

    bool&
    addKeyToUnknownItems()
    {
        return addKeyToUnknownItems_;
    }
    const bool&
    addKeyToUnknownItems() const
    {
        return addKeyToUnknownItems_;
    }

    nsTArray<LSItemInfo>&
    itemInfos()
    {
        return itemInfos_;
    }
    const nsTArray<LSItemInfo>&
    itemInfos() const
    {
        return itemInfos_;
    }

    uint32_t&
    totalLength()
    {
        return totalLength_;
    }
    const uint32_t&
    totalLength() const
    {
        return totalLength_;
    }

    int64_t&
    initialUsage()
    {
        return initialUsage_;
    }
    const int64_t&
    initialUsage() const
    {
        return initialUsage_;
    }

    int64_t&
    peakUsage()
    {
        return peakUsage_;
    }
    const int64_t&
    peakUsage() const
    {
        return peakUsage_;
    }

    LoadState&
    loadState()
    {
        return loadState_;
    }
    const LoadState&
    loadState() const
    {
        return loadState_;
    }

    bool&
    hasOtherProcessObservers()
    {
        return hasOtherProcessObservers_;
    }
    const bool&
    hasOtherProcessObservers() const
    {
        return hasOtherProcessObservers_;
    }

private:
    void
    StaticAssertions() const;
    bool addKeyToUnknownItems_;
    CopyableTArray<LSItemInfo> itemInfos_;
    LoadState loadState_;
    bool hasOtherProcessObservers_;
    int64_t initialUsage_;
    int64_t peakUsage_;
    uint32_t totalLength_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::dom::LSSnapshotInitInfo>
{
    typedef mozilla::dom::LSSnapshotInitInfo paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundLSDatabaseChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundLSDatabaseChild and PBackgroundLSDatabaseParent
//
namespace mozilla {
namespace dom {
namespace PBackgroundLSDatabase {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundLSDatabaseParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundLSDatabaseChild>* aChild);

enum MessageType {
    PBackgroundLSDatabaseStart = PBackgroundLSDatabaseMsgStart << 16,
    Msg_DeleteMe__ID,
    Msg_AllowToClose__ID,
    Msg_PBackgroundLSSnapshotConstructor__ID,
    Reply_PBackgroundLSSnapshotConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_RequestAllowToClose__ID,
    PBackgroundLSDatabaseEnd
};

IPC::Message*
Msg_DeleteMe(int32_t routingId);

IPC::Message*
Msg_AllowToClose(int32_t routingId);

IPC::Message*
Msg_PBackgroundLSSnapshotConstructor(int32_t routingId);
IPC::Message*
Reply_PBackgroundLSSnapshotConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_RequestAllowToClose(int32_t routingId);



} // namespace PBackgroundLSDatabase
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundLSDatabase_h
