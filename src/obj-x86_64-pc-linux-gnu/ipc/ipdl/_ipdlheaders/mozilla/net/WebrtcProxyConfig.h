//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef WebrtcProxyConfig_h
#define WebrtcProxyConfig_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/net/NeckoChannelParams.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebrtcProxyConfig|
//
namespace mozilla {
namespace net {
class WebrtcProxyConfig final
{
private:
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;

public:
    MOZ_IMPLICIT WebrtcProxyConfig() :
        tabId_(),
        alpn_(),
        loadInfoArgs_(),
        forceProxy_()
    {
    }

    MOZ_IMPLICIT WebrtcProxyConfig(
            const TabId& _tabId,
            const nsCString& _alpn,
            const LoadInfoArgs& _loadInfoArgs,
            const bool& _forceProxy) :
        tabId_(_tabId),
        alpn_(_alpn),
        loadInfoArgs_(_loadInfoArgs),
        forceProxy_(_forceProxy)
    {
    }

    TabId&
    tabId()
    {
        return tabId_;
    }
    const TabId&
    tabId() const
    {
        return tabId_;
    }

    nsCString&
    alpn()
    {
        return alpn_;
    }
    const nsCString&
    alpn() const
    {
        return alpn_;
    }

    LoadInfoArgs&
    loadInfoArgs()
    {
        return loadInfoArgs_;
    }
    const LoadInfoArgs&
    loadInfoArgs() const
    {
        return loadInfoArgs_;
    }

    bool&
    forceProxy()
    {
        return forceProxy_;
    }
    const bool&
    forceProxy() const
    {
        return forceProxy_;
    }

private:
    TabId tabId_;
    nsCString alpn_;
    LoadInfoArgs loadInfoArgs_;
    bool forceProxy_;
};
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::WebrtcProxyConfig>
{
    typedef mozilla::net::WebrtcProxyConfig paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef WebrtcProxyConfig_h
