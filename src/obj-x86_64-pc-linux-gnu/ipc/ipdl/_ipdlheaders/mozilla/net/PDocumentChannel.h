//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PDocumentChannel_h
#define PDocumentChannel_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/ipc/InputStreamParams.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"
#include "mozilla/net/NeckoChannelParams.h"
#include "mozilla/dom/IPCServiceWorkerDescriptor.h"
#include "mozilla/ipc/IPCStream.h"
#include "mozilla/dom/DOMTypes.h"

namespace mozilla {
namespace net {
class PDocumentChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDocumentChannelChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PDocumentChannelChild and PDocumentChannelParent
//
namespace mozilla {
namespace net {
namespace PDocumentChannel {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PDocumentChannelParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PDocumentChannelChild>* aChild);

enum MessageType {
    PDocumentChannelStart = PDocumentChannelMsgStart << 16,
    Msg_Cancel__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_FailedAsyncOpen__ID,
    Msg_DisconnectChildListeners__ID,
    Msg_RedirectToRealChannel__ID,
    Reply_RedirectToRealChannel__ID,
    Msg_UpgradeObjectLoad__ID,
    Reply_UpgradeObjectLoad__ID,
    PDocumentChannelEnd
};

IPC::Message*
Msg_Cancel(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_FailedAsyncOpen(int32_t routingId);

IPC::Message*
Msg_DisconnectChildListeners(int32_t routingId);

IPC::Message*
Msg_RedirectToRealChannel(int32_t routingId);
IPC::Message*
Reply_RedirectToRealChannel(int32_t routingId);

IPC::Message*
Msg_UpgradeObjectLoad(int32_t routingId);
IPC::Message*
Reply_UpgradeObjectLoad(int32_t routingId);



} // namespace PDocumentChannel
} // namespace net
} // namespace mozilla

#endif // ifndef PDocumentChannel_h
