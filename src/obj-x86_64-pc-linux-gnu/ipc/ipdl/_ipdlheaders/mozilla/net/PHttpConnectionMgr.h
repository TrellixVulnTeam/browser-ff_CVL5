//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHttpConnectionMgr_h
#define PHttpConnectionMgr_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/net/NeckoChannelParams.h"

namespace mozilla {
namespace net {
class PHttpConnectionMgrParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpConnectionMgrChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PHttpConnectionMgrChild and PHttpConnectionMgrParent
//
namespace mozilla {
namespace net {
namespace PHttpConnectionMgr {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PHttpConnectionMgrParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PHttpConnectionMgrChild>* aChild);

enum MessageType {
    PHttpConnectionMgrStart = PHttpConnectionMgrMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_DoShiftReloadConnectionCleanupWithConnInfo__ID,
    Msg_UpdateCurrentTopLevelOuterContentWindowId__ID,
    Msg_AddTransaction__ID,
    Msg_AddTransactionWithStickyConn__ID,
    Msg_RescheduleTransaction__ID,
    Msg_UpdateClassOfServiceOnTransaction__ID,
    Msg_CancelTransaction__ID,
    Msg_SpeculativeConnect__ID,
    PHttpConnectionMgrEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_DoShiftReloadConnectionCleanupWithConnInfo(int32_t routingId);

IPC::Message*
Msg_UpdateCurrentTopLevelOuterContentWindowId(int32_t routingId);

IPC::Message*
Msg_AddTransaction(int32_t routingId);

IPC::Message*
Msg_AddTransactionWithStickyConn(int32_t routingId);

IPC::Message*
Msg_RescheduleTransaction(int32_t routingId);

IPC::Message*
Msg_UpdateClassOfServiceOnTransaction(int32_t routingId);

IPC::Message*
Msg_CancelTransaction(int32_t routingId);

IPC::Message*
Msg_SpeculativeConnect(int32_t routingId);



} // namespace PHttpConnectionMgr
} // namespace net
} // namespace mozilla

#endif // ifndef PHttpConnectionMgr_h
