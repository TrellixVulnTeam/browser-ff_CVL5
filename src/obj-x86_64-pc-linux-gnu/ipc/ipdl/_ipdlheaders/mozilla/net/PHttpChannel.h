//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHttpChannel_h
#define PHttpChannel_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/ipc/InputStreamParams.h"
#include "mozilla/ipc/URIParams.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"
#include "mozilla/net/NeckoChannelParams.h"
#include "mozilla/dom/IPCServiceWorkerDescriptor.h"
#include "mozilla/ipc/IPCStream.h"
#include "mozilla/net/HttpChannelParams.h"

namespace mozilla {
namespace net {
class PHttpChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PHttpChannelChild and PHttpChannelParent
//
namespace mozilla {
namespace net {
namespace PHttpChannel {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PHttpChannelParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PHttpChannelChild>* aChild);

enum MessageType {
    PHttpChannelStart = PHttpChannelMsgStart << 16,
    Msg_SetClassOfService__ID,
    Msg_Suspend__ID,
    Msg_Resume__ID,
    Msg_Cancel__ID,
    Msg_Redirect2Verify__ID,
    Msg_DocumentChannelCleanup__ID,
    Msg_MarkOfflineCacheEntryAsForeign__ID,
    Msg_RemoveCorsPreflightCacheEntry__ID,
    Msg_DeletingChannel__ID,
    Msg_OpenOriginalCacheInputStream__ID,
    Msg_OpenAltDataCacheInputStream__ID,
    Msg_BytesRead__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_FailedAsyncOpen__ID,
    Msg_OnStartRequestSent__ID,
    Msg_Redirect1Begin__ID,
    Msg_Redirect3Complete__ID,
    Msg_ReportSecurityMessage__ID,
    Msg_DeleteSelf__ID,
    Msg_IssueDeprecationWarning__ID,
    Msg_LogBlockedCORSRequest__ID,
    Msg_LogMimeTypeMismatch__ID,
    Msg_OriginalCacheInputStreamAvailable__ID,
    Msg_AltDataCacheInputStreamAvailable__ID,
    Msg_SetPriority__ID,
    PHttpChannelEnd
};

IPC::Message*
Msg_SetClassOfService(int32_t routingId);

IPC::Message*
Msg_Suspend(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);

IPC::Message*
Msg_Cancel(int32_t routingId);

IPC::Message*
Msg_Redirect2Verify(int32_t routingId);

IPC::Message*
Msg_DocumentChannelCleanup(int32_t routingId);

IPC::Message*
Msg_MarkOfflineCacheEntryAsForeign(int32_t routingId);

IPC::Message*
Msg_RemoveCorsPreflightCacheEntry(int32_t routingId);

IPC::Message*
Msg_DeletingChannel(int32_t routingId);

IPC::Message*
Msg_OpenOriginalCacheInputStream(int32_t routingId);

IPC::Message*
Msg_OpenAltDataCacheInputStream(int32_t routingId);

IPC::Message*
Msg_BytesRead(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_FailedAsyncOpen(int32_t routingId);

IPC::Message*
Msg_OnStartRequestSent(int32_t routingId);

IPC::Message*
Msg_Redirect1Begin(int32_t routingId);

IPC::Message*
Msg_Redirect3Complete(int32_t routingId);

IPC::Message*
Msg_ReportSecurityMessage(int32_t routingId);

IPC::Message*
Msg_DeleteSelf(int32_t routingId);

IPC::Message*
Msg_IssueDeprecationWarning(int32_t routingId);

IPC::Message*
Msg_LogBlockedCORSRequest(int32_t routingId);

IPC::Message*
Msg_LogMimeTypeMismatch(int32_t routingId);

IPC::Message*
Msg_OriginalCacheInputStreamAvailable(int32_t routingId);

IPC::Message*
Msg_AltDataCacheInputStreamAvailable(int32_t routingId);

IPC::Message*
Msg_SetPriority(int32_t routingId);



} // namespace PHttpChannel
} // namespace net
} // namespace mozilla

#endif // ifndef PHttpChannel_h
