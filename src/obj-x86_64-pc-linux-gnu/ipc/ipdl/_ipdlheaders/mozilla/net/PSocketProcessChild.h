//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSocketProcessChild_h
#define PSocketProcessChild_h

#include "mozilla/net/PSocketProcess.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "base/process.h"
#include "mozilla/TelemetryComms.h"
#include "mozilla/dom/NativeThreadId.h"
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/ipc/BackgroundUtils.h"
#include "mozilla/net/DashboardTypes.h"
#include "prtime.h"

namespace mozilla {
namespace net {
class PDNSRequestChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDNSRequestParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessBridgeChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSocketProcessBridgeParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PProfilerChild;
} // namespace mozilla
namespace mozilla {
class PProfilerParent;
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebrtcTCPSocketChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebrtcTCPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpTransactionChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpTransactionParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpConnectionMgrChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpConnectionMgrParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PInputChannelThrottleQueueChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PInputChannelThrottleQueueParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltServiceChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PAltServiceParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltSvcTransactionChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PAltSvcTransactionParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTRRServiceChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTRRServiceParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PProxyConfigLookupChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PProxyConfigLookupParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PNativeDNSResolverOverrideChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PNativeDNSResolverOverrideParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla

namespace mozilla {
namespace net {
class PTRRServiceChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace net {
class PDNSRequestChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltServiceChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltSvcTransactionChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpConnectionMgrChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebrtcTCPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PProxyConfigLookupChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PNativeDNSResolverOverrideChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PInputChannelThrottleQueueChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpTransactionChild;
} // namespace net
} // namespace mozilla

class nsIURI;

struct nsID;

namespace mozilla {
namespace net {


class PSocketProcessChild :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::net::PTRRServiceChild;
    friend class mozilla::PRemoteLazyInputStreamChild;
    friend class mozilla::net::PDNSRequestChild;
    friend class mozilla::ipc::PChildToParentStreamChild;
    friend class mozilla::ipc::PParentToChildStreamChild;
    friend class mozilla::net::PAltServiceChild;
    friend class mozilla::net::PAltSvcTransactionChild;
    friend class mozilla::net::PHttpConnectionMgrChild;
    friend class mozilla::net::PWebrtcTCPSocketChild;
    friend class mozilla::net::PProxyConfigLookupChild;
    friend class mozilla::net::PNativeDNSResolverOverrideChild;
    friend class mozilla::ipc::PFileDescriptorSetChild;
    friend class mozilla::net::PInputChannelThrottleQueueChild;
    friend class mozilla::net::PHttpTransactionChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::psm::ByteArray ByteArray;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::Telemetry::ChildEventData ChildEventData;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::net::DNSCacheEntries DNSCacheEntries;
    typedef mozilla::psm::DataStorageEntry DataStorageEntry;
    typedef mozilla::psm::DataStorageItem DataStorageItem;
    typedef mozilla::DataStorageType DataStorageType;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::psm::DelegatedCredentialInfoArg DelegatedCredentialInfoArg;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::Telemetry::DiscardedData DiscardedData;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::Telemetry::HistogramAccumulation HistogramAccumulation;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::net::HttpHandlerInitArgs HttpHandlerInitArgs;
    typedef mozilla::net::HttpRetParams HttpRetParams;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::Telemetry::KeyedHistogramAccumulation KeyedHistogramAccumulation;
    typedef mozilla::Telemetry::KeyedScalarAction KeyedScalarAction;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MemoryReport MemoryReport;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::dom::Pref Pref;
    typedef mozilla::dom::PrefValue PrefValue;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::Telemetry::ScalarAction ScalarAction;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SocketDataArgs SocketDataArgs;
    typedef mozilla::net::SocketInfo SocketInfo;
    typedef mozilla::net::SocketPorcessInitAttributes SocketPorcessInitAttributes;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::net::PDNSRequestChild PDNSRequestChild;
    typedef mozilla::net::PDNSRequestParent PDNSRequestParent;
    typedef mozilla::net::PSocketProcessBridgeChild PSocketProcessBridgeChild;
    typedef mozilla::net::PSocketProcessBridgeParent PSocketProcessBridgeParent;
    typedef mozilla::PProfilerChild PProfilerChild;
    typedef mozilla::PProfilerParent PProfilerParent;
    typedef mozilla::net::PWebrtcTCPSocketChild PWebrtcTCPSocketChild;
    typedef mozilla::net::PWebrtcTCPSocketParent PWebrtcTCPSocketParent;
    typedef mozilla::net::PHttpTransactionChild PHttpTransactionChild;
    typedef mozilla::net::PHttpTransactionParent PHttpTransactionParent;
    typedef mozilla::net::PHttpConnectionMgrChild PHttpConnectionMgrChild;
    typedef mozilla::net::PHttpConnectionMgrParent PHttpConnectionMgrParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::net::PInputChannelThrottleQueueChild PInputChannelThrottleQueueChild;
    typedef mozilla::net::PInputChannelThrottleQueueParent PInputChannelThrottleQueueParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::net::PAltServiceChild PAltServiceChild;
    typedef mozilla::net::PAltServiceParent PAltServiceParent;
    typedef mozilla::net::PAltSvcTransactionChild PAltSvcTransactionChild;
    typedef mozilla::net::PAltSvcTransactionParent PAltSvcTransactionParent;
    typedef mozilla::net::PTRRServiceChild PTRRServiceChild;
    typedef mozilla::net::PTRRServiceParent PTRRServiceParent;
    typedef mozilla::net::PProxyConfigLookupChild PProxyConfigLookupChild;
    typedef mozilla::net::PProxyConfigLookupParent PProxyConfigLookupParent;
    typedef mozilla::net::PNativeDNSResolverOverrideChild PNativeDNSResolverOverrideChild;
    typedef mozilla::net::PNativeDNSResolverOverrideParent PNativeDNSResolverOverrideParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;

public:
    typedef MozPromise<bool, ResponseRejectReason, true> CachePushCheckPromise;
    typedef std::function<void(const uint32_t&)> RequestMemoryReportResolver;
    typedef std::function<void(const SocketDataArgs&)> GetSocketDataResolver;
    typedef std::function<void(nsTArray<DNSCacheEntries>&&)> GetDNSCacheEntriesResolver;
    typedef std::function<void(nsTArray<HttpRetParams>&&)> GetHttpConnectionDataResolver;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPHttpTransactionConstructor(PHttpTransactionChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPParentToChildStreamConstructor(PParentToChildStreamChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPHttpConnectionMgrConstructor(
            PHttpConnectionMgrChild* actor,
            const HttpHandlerInitArgs& aArgs);
    virtual mozilla::ipc::IPCResult
    RecvPInputChannelThrottleQueueConstructor(
            PInputChannelThrottleQueueChild* actor,
            const uint32_t& meanBytesPerSecond,
            const uint32_t& maxBytesPerSecond);
    virtual mozilla::ipc::IPCResult
    RecvPAltSvcTransactionConstructor(
            PAltSvcTransactionChild* actor,
            const HttpConnectionInfoCloneArgs& aConnInfo,
            const uint32_t& aCaps);
    virtual mozilla::ipc::IPCResult
    RecvPTRRServiceConstructor(
            PTRRServiceChild* actor,
            const bool& aCaptiveIsPassed,
            const bool& aParentalControlEnabled,
            nsTArray<nsCString>&& aDNSSuffixList);
    virtual mozilla::ipc::IPCResult
    RecvPNativeDNSResolverOverrideConstructor(PNativeDNSResolverOverrideChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPRemoteLazyInputStreamConstructor(
            PRemoteLazyInputStreamChild* actor,
            const nsID& aID,
            const uint64_t& aSize);
    virtual mozilla::ipc::IPCResult
    RecvPFileDescriptorSetConstructor(
            PFileDescriptorSetChild* actor,
            const FileDescriptor& fd);
    virtual mozilla::ipc::IPCResult
    RecvPDNSRequestConstructor(
            PDNSRequestChild* actor,
            const nsCString& hostName,
            const nsCString& trrServer,
            const uint16_t& type,
            const OriginAttributes& originAttributes,
            const uint32_t& flags);
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PSocketProcessChild();

    virtual ~PSocketProcessChild();

public:
    void
    ManagedPDNSRequestChild(nsTArray<PDNSRequestChild*>& aArr) const;
    const ManagedContainer<PDNSRequestChild>&
    ManagedPDNSRequestChild() const;

    void
    ManagedPWebrtcTCPSocketChild(nsTArray<PWebrtcTCPSocketChild*>& aArr) const;
    const ManagedContainer<PWebrtcTCPSocketChild>&
    ManagedPWebrtcTCPSocketChild() const;

    void
    ManagedPFileDescriptorSetChild(nsTArray<PFileDescriptorSetChild*>& aArr) const;
    const ManagedContainer<PFileDescriptorSetChild>&
    ManagedPFileDescriptorSetChild() const;

    void
    ManagedPHttpTransactionChild(nsTArray<PHttpTransactionChild*>& aArr) const;
    const ManagedContainer<PHttpTransactionChild>&
    ManagedPHttpTransactionChild() const;

    void
    ManagedPHttpConnectionMgrChild(nsTArray<PHttpConnectionMgrChild*>& aArr) const;
    const ManagedContainer<PHttpConnectionMgrChild>&
    ManagedPHttpConnectionMgrChild() const;

    void
    ManagedPChildToParentStreamChild(nsTArray<PChildToParentStreamChild*>& aArr) const;
    const ManagedContainer<PChildToParentStreamChild>&
    ManagedPChildToParentStreamChild() const;

    void
    ManagedPParentToChildStreamChild(nsTArray<PParentToChildStreamChild*>& aArr) const;
    const ManagedContainer<PParentToChildStreamChild>&
    ManagedPParentToChildStreamChild() const;

    void
    ManagedPInputChannelThrottleQueueChild(nsTArray<PInputChannelThrottleQueueChild*>& aArr) const;
    const ManagedContainer<PInputChannelThrottleQueueChild>&
    ManagedPInputChannelThrottleQueueChild() const;

    void
    ManagedPAltServiceChild(nsTArray<PAltServiceChild*>& aArr) const;
    const ManagedContainer<PAltServiceChild>&
    ManagedPAltServiceChild() const;

    void
    ManagedPAltSvcTransactionChild(nsTArray<PAltSvcTransactionChild*>& aArr) const;
    const ManagedContainer<PAltSvcTransactionChild>&
    ManagedPAltSvcTransactionChild() const;

    void
    ManagedPTRRServiceChild(nsTArray<PTRRServiceChild*>& aArr) const;
    const ManagedContainer<PTRRServiceChild>&
    ManagedPTRRServiceChild() const;

    void
    ManagedPProxyConfigLookupChild(nsTArray<PProxyConfigLookupChild*>& aArr) const;
    const ManagedContainer<PProxyConfigLookupChild>&
    ManagedPProxyConfigLookupChild() const;

    void
    ManagedPNativeDNSResolverOverrideChild(nsTArray<PNativeDNSResolverOverrideChild*>& aArr) const;
    const ManagedContainer<PNativeDNSResolverOverrideChild>&
    ManagedPNativeDNSResolverOverrideChild() const;

    void
    ManagedPRemoteLazyInputStreamChild(nsTArray<PRemoteLazyInputStreamChild*>& aArr) const;
    const ManagedContainer<PRemoteLazyInputStreamChild>&
    ManagedPRemoteLazyInputStreamChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PDNSRequestParent>
    OpenPDNSRequestEndpoint(PDNSRequestChild* aActor);
    bool
    BindPDNSRequestEndpoint(
            ManagedEndpoint<PDNSRequestChild> aEndpoint,
            PDNSRequestChild* aActor);

    ManagedEndpoint<PWebrtcTCPSocketParent>
    OpenPWebrtcTCPSocketEndpoint(PWebrtcTCPSocketChild* aActor);
    bool
    BindPWebrtcTCPSocketEndpoint(
            ManagedEndpoint<PWebrtcTCPSocketChild> aEndpoint,
            PWebrtcTCPSocketChild* aActor);

    ManagedEndpoint<PFileDescriptorSetParent>
    OpenPFileDescriptorSetEndpoint(PFileDescriptorSetChild* aActor);
    bool
    BindPFileDescriptorSetEndpoint(
            ManagedEndpoint<PFileDescriptorSetChild> aEndpoint,
            PFileDescriptorSetChild* aActor);

    ManagedEndpoint<PHttpTransactionParent>
    OpenPHttpTransactionEndpoint(PHttpTransactionChild* aActor);
    bool
    BindPHttpTransactionEndpoint(
            ManagedEndpoint<PHttpTransactionChild> aEndpoint,
            PHttpTransactionChild* aActor);

    ManagedEndpoint<PHttpConnectionMgrParent>
    OpenPHttpConnectionMgrEndpoint(PHttpConnectionMgrChild* aActor);
    bool
    BindPHttpConnectionMgrEndpoint(
            ManagedEndpoint<PHttpConnectionMgrChild> aEndpoint,
            PHttpConnectionMgrChild* aActor);

    ManagedEndpoint<PChildToParentStreamParent>
    OpenPChildToParentStreamEndpoint(PChildToParentStreamChild* aActor);
    bool
    BindPChildToParentStreamEndpoint(
            ManagedEndpoint<PChildToParentStreamChild> aEndpoint,
            PChildToParentStreamChild* aActor);

    ManagedEndpoint<PParentToChildStreamParent>
    OpenPParentToChildStreamEndpoint(PParentToChildStreamChild* aActor);
    bool
    BindPParentToChildStreamEndpoint(
            ManagedEndpoint<PParentToChildStreamChild> aEndpoint,
            PParentToChildStreamChild* aActor);

    ManagedEndpoint<PInputChannelThrottleQueueParent>
    OpenPInputChannelThrottleQueueEndpoint(PInputChannelThrottleQueueChild* aActor);
    bool
    BindPInputChannelThrottleQueueEndpoint(
            ManagedEndpoint<PInputChannelThrottleQueueChild> aEndpoint,
            PInputChannelThrottleQueueChild* aActor);

    ManagedEndpoint<PAltServiceParent>
    OpenPAltServiceEndpoint(PAltServiceChild* aActor);
    bool
    BindPAltServiceEndpoint(
            ManagedEndpoint<PAltServiceChild> aEndpoint,
            PAltServiceChild* aActor);

    ManagedEndpoint<PAltSvcTransactionParent>
    OpenPAltSvcTransactionEndpoint(PAltSvcTransactionChild* aActor);
    bool
    BindPAltSvcTransactionEndpoint(
            ManagedEndpoint<PAltSvcTransactionChild> aEndpoint,
            PAltSvcTransactionChild* aActor);

    ManagedEndpoint<PTRRServiceParent>
    OpenPTRRServiceEndpoint(PTRRServiceChild* aActor);
    bool
    BindPTRRServiceEndpoint(
            ManagedEndpoint<PTRRServiceChild> aEndpoint,
            PTRRServiceChild* aActor);

    ManagedEndpoint<PProxyConfigLookupParent>
    OpenPProxyConfigLookupEndpoint(PProxyConfigLookupChild* aActor);
    bool
    BindPProxyConfigLookupEndpoint(
            ManagedEndpoint<PProxyConfigLookupChild> aEndpoint,
            PProxyConfigLookupChild* aActor);

    ManagedEndpoint<PNativeDNSResolverOverrideParent>
    OpenPNativeDNSResolverOverrideEndpoint(PNativeDNSResolverOverrideChild* aActor);
    bool
    BindPNativeDNSResolverOverrideEndpoint(
            ManagedEndpoint<PNativeDNSResolverOverrideChild> aEndpoint,
            PNativeDNSResolverOverrideChild* aActor);

    ManagedEndpoint<PRemoteLazyInputStreamParent>
    OpenPRemoteLazyInputStreamEndpoint(PRemoteLazyInputStreamChild* aActor);
    bool
    BindPRemoteLazyInputStreamEndpoint(
            ManagedEndpoint<PRemoteLazyInputStreamChild> aEndpoint,
            PRemoteLazyInputStreamChild* aActor);

    bool
    SendInitCrashReporter(const NativeThreadId& threadId);

    bool
    SendAddMemoryReport(const MemoryReport& aReport);

    bool
    SendAccumulateChildHistograms(const nsTArray<HistogramAccumulation>& accumulations);

    bool
    SendAccumulateChildKeyedHistograms(const nsTArray<KeyedHistogramAccumulation>& accumulations);

    bool
    SendUpdateChildScalars(const nsTArray<ScalarAction>& actions);

    bool
    SendUpdateChildKeyedScalars(const nsTArray<KeyedScalarAction>& actions);

    bool
    SendRecordChildEvents(const nsTArray<ChildEventData>& events);

    bool
    SendRecordDiscardedData(const DiscardedData& data);

    PWebrtcTCPSocketChild*
    SendPWebrtcTCPSocketConstructor(const mozilla::Maybe<TabId>& tabId);

    PWebrtcTCPSocketChild*
    SendPWebrtcTCPSocketConstructor(
            PWebrtcTCPSocketChild* actor,
            const mozilla::Maybe<TabId>& tabId);

    PChildToParentStreamChild*
    SendPChildToParentStreamConstructor();

    PChildToParentStreamChild*
    SendPChildToParentStreamConstructor(PChildToParentStreamChild* actor);

    bool
    SendObserveHttpActivity(
            const HttpActivityArgs& aActivityArgs,
            const uint32_t& aActivityType,
            const uint32_t& aActivitySubtype,
            const PRTime& aTimestamp,
            const uint64_t& aExtraSizeData,
            const nsCString& aExtraStringData);

    bool
    SendInitBackground(Endpoint<mozilla::ipc::PBackgroundParent>&& aEndpoint);

    PAltServiceChild*
    SendPAltServiceConstructor(PAltServiceChild* actor);

    bool
    SendGetTLSClientCert(
            const nsCString& aHostName,
            const OriginAttributes& aOriginAttributes,
            const int32_t& aPort,
            const uint32_t& aProviderFlags,
            const uint32_t& aProviderTlsFlags,
            const ByteArray& aServerCert,
            const mozilla::Maybe<ByteArray>& aClientCert,
            const nsTArray<ByteArray>& aCollectedCANames,
            bool* aSucceeded,
            ByteArray* aOutCert,
            ByteArray* aOutKey,
            nsTArray<ByteArray>* aBuiltChain);

    PProxyConfigLookupChild*
    SendPProxyConfigLookupConstructor(
            PProxyConfigLookupChild* actor,
            nsIURI* aUri,
            const uint32_t& aFlags);

    void
    SendCachePushCheck(
            nsIURI* aPushedURL,
            const OriginAttributes& aOriginAttributes,
            const nsCString& aRequestString,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<CachePushCheckPromise>
    SendCachePushCheck(
            nsIURI* aPushedURL,
            const OriginAttributes& aOriginAttributes,
            const nsCString& aRequestString);

    bool
    SendODoHServiceActivated(const bool& aActivated);

    PFileDescriptorSetChild*
    SendPFileDescriptorSetConstructor(const FileDescriptor& fd);

    PFileDescriptorSetChild*
    SendPFileDescriptorSetConstructor(
            PFileDescriptorSetChild* actor,
            const FileDescriptor& fd);

    PDNSRequestChild*
    SendPDNSRequestConstructor(
            PDNSRequestChild* actor,
            const nsCString& hostName,
            const nsCString& trrServer,
            const uint16_t& type,
            const OriginAttributes& originAttributes,
            const uint32_t& flags);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PDNSRequestChild> mManagedPDNSRequestChild;
    ManagedContainer<PWebrtcTCPSocketChild> mManagedPWebrtcTCPSocketChild;
    ManagedContainer<PFileDescriptorSetChild> mManagedPFileDescriptorSetChild;
    ManagedContainer<PHttpTransactionChild> mManagedPHttpTransactionChild;
    ManagedContainer<PHttpConnectionMgrChild> mManagedPHttpConnectionMgrChild;
    ManagedContainer<PChildToParentStreamChild> mManagedPChildToParentStreamChild;
    ManagedContainer<PParentToChildStreamChild> mManagedPParentToChildStreamChild;
    ManagedContainer<PInputChannelThrottleQueueChild> mManagedPInputChannelThrottleQueueChild;
    ManagedContainer<PAltServiceChild> mManagedPAltServiceChild;
    ManagedContainer<PAltSvcTransactionChild> mManagedPAltSvcTransactionChild;
    ManagedContainer<PTRRServiceChild> mManagedPTRRServiceChild;
    ManagedContainer<PProxyConfigLookupChild> mManagedPProxyConfigLookupChild;
    ManagedContainer<PNativeDNSResolverOverrideChild> mManagedPNativeDNSResolverOverrideChild;
    ManagedContainer<PRemoteLazyInputStreamChild> mManagedPRemoteLazyInputStreamChild;
};


} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::PSocketProcessChild*>
{
    typedef mozilla::net::PSocketProcessChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PSocketProcessChild_h
