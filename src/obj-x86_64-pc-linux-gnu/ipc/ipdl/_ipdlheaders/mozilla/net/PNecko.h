//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PNecko_h
#define PNecko_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/ipc/IPCStream.h"
#include "mozilla/net/NeckoChannelParams.h"

namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PNeckoChild and PNeckoParent
//
namespace mozilla {
namespace net {
namespace PNecko {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PNeckoParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PNeckoChild>* aChild);

enum MessageType {
    PNeckoStart = PNeckoMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PCookieServiceConstructor__ID,
    Reply_PCookieServiceConstructor__ID,
    Msg_PHttpChannelConstructor__ID,
    Reply_PHttpChannelConstructor__ID,
    Msg_PFTPChannelConstructor__ID,
    Reply_PFTPChannelConstructor__ID,
    Msg_PWebSocketConstructor__ID,
    Reply_PWebSocketConstructor__ID,
    Msg_PTCPServerSocketConstructor__ID,
    Reply_PTCPServerSocketConstructor__ID,
    Msg_PUDPSocketConstructor__ID,
    Reply_PUDPSocketConstructor__ID,
    Msg_PDNSRequestConstructor__ID,
    Reply_PDNSRequestConstructor__ID,
    Msg_PDocumentChannelConstructor__ID,
    Reply_PDocumentChannelConstructor__ID,
    Msg_PWebSocketEventListenerConstructor__ID,
    Reply_PWebSocketEventListenerConstructor__ID,
    Msg_PredPredict__ID,
    Msg_PredLearn__ID,
    Msg_PredReset__ID,
    Msg_SpeculativeConnect__ID,
    Msg_HTMLDNSPrefetch__ID,
    Msg_CancelHTMLDNSPrefetch__ID,
    Msg_PDataChannelConstructor__ID,
    Reply_PDataChannelConstructor__ID,
    Msg_PGIOChannelConstructor__ID,
    Reply_PGIOChannelConstructor__ID,
    Msg_PSimpleChannelConstructor__ID,
    Reply_PSimpleChannelConstructor__ID,
    Msg_PFileChannelConstructor__ID,
    Reply_PFileChannelConstructor__ID,
    Msg_PClassifierDummyChannelConstructor__ID,
    Reply_PClassifierDummyChannelConstructor__ID,
    Msg_OnAuthAvailable__ID,
    Msg_OnAuthCancelled__ID,
    Msg_RequestContextLoadBegin__ID,
    Msg_RequestContextAfterDOMContentLoaded__ID,
    Msg_RemoveRequestContext__ID,
    Msg_PAltDataOutputStreamConstructor__ID,
    Reply_PAltDataOutputStreamConstructor__ID,
    Msg_PStunAddrsRequestConstructor__ID,
    Reply_PStunAddrsRequestConstructor__ID,
    Msg_PWebrtcTCPSocketConstructor__ID,
    Reply_PWebrtcTCPSocketConstructor__ID,
    Msg_GetExtensionStream__ID,
    Reply_GetExtensionStream__ID,
    Msg_GetExtensionFD__ID,
    Reply_GetExtensionFD__ID,
    Msg_InitSocketProcessBridge__ID,
    Reply_InitSocketProcessBridge__ID,
    Msg_ResetSocketProcessBridge__ID,
    Msg_EnsureHSTSData__ID,
    Reply_EnsureHSTSData__ID,
    Msg_GetPageThumbStream__ID,
    Reply_GetPageThumbStream__ID,
    Msg_AsyncAuthPromptForNestedFrame__ID,
    Msg_PredOnPredictPrefetch__ID,
    Msg_PredOnPredictPreconnect__ID,
    Msg_PredOnPredictDNS__ID,
    Msg_SpeculativeConnectRequest__ID,
    Msg_NetworkChangeNotification__ID,
    Msg_PTransportProviderConstructor__ID,
    Reply_PTransportProviderConstructor__ID,
    Msg_PTCPSocketConstructor__ID,
    Reply_PTCPSocketConstructor__ID,
    PNeckoEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_PCookieServiceConstructor(int32_t routingId);
IPC::Message*
Reply_PCookieServiceConstructor(int32_t routingId);

IPC::Message*
Msg_PHttpChannelConstructor(int32_t routingId);
IPC::Message*
Reply_PHttpChannelConstructor(int32_t routingId);

IPC::Message*
Msg_PFTPChannelConstructor(int32_t routingId);
IPC::Message*
Reply_PFTPChannelConstructor(int32_t routingId);

IPC::Message*
Msg_PWebSocketConstructor(int32_t routingId);
IPC::Message*
Reply_PWebSocketConstructor(int32_t routingId);

IPC::Message*
Msg_PTCPServerSocketConstructor(int32_t routingId);
IPC::Message*
Reply_PTCPServerSocketConstructor(int32_t routingId);

IPC::Message*
Msg_PUDPSocketConstructor(int32_t routingId);
IPC::Message*
Reply_PUDPSocketConstructor(int32_t routingId);

IPC::Message*
Msg_PDNSRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PDNSRequestConstructor(int32_t routingId);

IPC::Message*
Msg_PDocumentChannelConstructor(int32_t routingId);
IPC::Message*
Reply_PDocumentChannelConstructor(int32_t routingId);

IPC::Message*
Msg_PWebSocketEventListenerConstructor(int32_t routingId);
IPC::Message*
Reply_PWebSocketEventListenerConstructor(int32_t routingId);

IPC::Message*
Msg_PredPredict(int32_t routingId);

IPC::Message*
Msg_PredLearn(int32_t routingId);

IPC::Message*
Msg_PredReset(int32_t routingId);

IPC::Message*
Msg_SpeculativeConnect(int32_t routingId);

IPC::Message*
Msg_HTMLDNSPrefetch(int32_t routingId);

IPC::Message*
Msg_CancelHTMLDNSPrefetch(int32_t routingId);

IPC::Message*
Msg_PDataChannelConstructor(int32_t routingId);
IPC::Message*
Reply_PDataChannelConstructor(int32_t routingId);

IPC::Message*
Msg_PGIOChannelConstructor(int32_t routingId);
IPC::Message*
Reply_PGIOChannelConstructor(int32_t routingId);

IPC::Message*
Msg_PSimpleChannelConstructor(int32_t routingId);
IPC::Message*
Reply_PSimpleChannelConstructor(int32_t routingId);

IPC::Message*
Msg_PFileChannelConstructor(int32_t routingId);
IPC::Message*
Reply_PFileChannelConstructor(int32_t routingId);

IPC::Message*
Msg_PClassifierDummyChannelConstructor(int32_t routingId);
IPC::Message*
Reply_PClassifierDummyChannelConstructor(int32_t routingId);

IPC::Message*
Msg_OnAuthAvailable(int32_t routingId);

IPC::Message*
Msg_OnAuthCancelled(int32_t routingId);

IPC::Message*
Msg_RequestContextLoadBegin(int32_t routingId);

IPC::Message*
Msg_RequestContextAfterDOMContentLoaded(int32_t routingId);

IPC::Message*
Msg_RemoveRequestContext(int32_t routingId);

IPC::Message*
Msg_PAltDataOutputStreamConstructor(int32_t routingId);
IPC::Message*
Reply_PAltDataOutputStreamConstructor(int32_t routingId);

IPC::Message*
Msg_PStunAddrsRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PStunAddrsRequestConstructor(int32_t routingId);

IPC::Message*
Msg_PWebrtcTCPSocketConstructor(int32_t routingId);
IPC::Message*
Reply_PWebrtcTCPSocketConstructor(int32_t routingId);

IPC::Message*
Msg_GetExtensionStream(int32_t routingId);
IPC::Message*
Reply_GetExtensionStream(int32_t routingId);

IPC::Message*
Msg_GetExtensionFD(int32_t routingId);
IPC::Message*
Reply_GetExtensionFD(int32_t routingId);

IPC::Message*
Msg_InitSocketProcessBridge(int32_t routingId);
IPC::Message*
Reply_InitSocketProcessBridge(int32_t routingId);

IPC::Message*
Msg_ResetSocketProcessBridge(int32_t routingId);

IPC::Message*
Msg_EnsureHSTSData(int32_t routingId);
IPC::Message*
Reply_EnsureHSTSData(int32_t routingId);

IPC::Message*
Msg_GetPageThumbStream(int32_t routingId);
IPC::Message*
Reply_GetPageThumbStream(int32_t routingId);

IPC::Message*
Msg_AsyncAuthPromptForNestedFrame(int32_t routingId);

IPC::Message*
Msg_PredOnPredictPrefetch(int32_t routingId);

IPC::Message*
Msg_PredOnPredictPreconnect(int32_t routingId);

IPC::Message*
Msg_PredOnPredictDNS(int32_t routingId);

IPC::Message*
Msg_SpeculativeConnectRequest(int32_t routingId);

IPC::Message*
Msg_NetworkChangeNotification(int32_t routingId);

IPC::Message*
Msg_PTransportProviderConstructor(int32_t routingId);
IPC::Message*
Reply_PTransportProviderConstructor(int32_t routingId);

IPC::Message*
Msg_PTCPSocketConstructor(int32_t routingId);
IPC::Message*
Reply_PTCPSocketConstructor(int32_t routingId);



} // namespace PNecko
} // namespace net
} // namespace mozilla

#endif // ifndef PNecko_h
