//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHttpBackgroundChannel_h
#define PHttpBackgroundChannel_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/net/NeckoChannelParams.h"
#include "mozilla/net/HttpChannelParams.h"
#include "mozilla/dom/PURLClassifierInfo.h"

namespace mozilla {
namespace net {
class PHttpBackgroundChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpBackgroundChannelChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PHttpBackgroundChannelChild and PHttpBackgroundChannelParent
//
namespace mozilla {
namespace net {
namespace PHttpBackgroundChannel {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PHttpBackgroundChannelParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PHttpBackgroundChannelChild>* aChild);

enum MessageType {
    PHttpBackgroundChannelStart = PHttpBackgroundChannelMsgStart << 16,
    Msg_OnStartRequest__ID,
    Msg_OnTransportAndData__ID,
    Msg_OnStopRequest__ID,
    Msg_OnConsoleReport__ID,
    Msg_OnProgress__ID,
    Msg_OnStatus__ID,
    Msg_OnAfterLastPart__ID,
    Msg_NotifyClassificationFlags__ID,
    Msg_NotifyFlashPluginStateChanged__ID,
    Msg_SetClassifierMatchedInfo__ID,
    Msg_SetClassifierMatchedTrackingInfo__ID,
    Msg_AttachStreamFilter__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PHttpBackgroundChannelEnd
};

IPC::Message*
Msg_OnStartRequest(int32_t routingId);

IPC::Message*
Msg_OnTransportAndData(int32_t routingId);

IPC::Message*
Msg_OnStopRequest(int32_t routingId);

IPC::Message*
Msg_OnConsoleReport(int32_t routingId);

IPC::Message*
Msg_OnProgress(int32_t routingId);

IPC::Message*
Msg_OnStatus(int32_t routingId);

IPC::Message*
Msg_OnAfterLastPart(int32_t routingId);

IPC::Message*
Msg_NotifyClassificationFlags(int32_t routingId);

IPC::Message*
Msg_NotifyFlashPluginStateChanged(int32_t routingId);

IPC::Message*
Msg_SetClassifierMatchedInfo(int32_t routingId);

IPC::Message*
Msg_SetClassifierMatchedTrackingInfo(int32_t routingId);

IPC::Message*
Msg_AttachStreamFilter(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PHttpBackgroundChannel
} // namespace net
} // namespace mozilla

#endif // ifndef PHttpBackgroundChannel_h
