//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGIOChannel_h
#define PGIOChannel_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/ipc/URIParams.h"
#include "mozilla/net/NeckoChannelParams.h"

namespace mozilla {
namespace net {
class PGIOChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PGIOChannelChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PGIOChannelChild and PGIOChannelParent
//
namespace mozilla {
namespace net {
namespace PGIOChannel {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PGIOChannelParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PGIOChannelChild>* aChild);

enum MessageType {
    PGIOChannelStart = PGIOChannelMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Cancel__ID,
    Msg_Suspend__ID,
    Msg_Resume__ID,
    Msg_OnStartRequest__ID,
    Msg_OnDataAvailable__ID,
    Msg_OnStopRequest__ID,
    Msg_FailedAsyncOpen__ID,
    Msg_DeleteSelf__ID,
    PGIOChannelEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Cancel(int32_t routingId);

IPC::Message*
Msg_Suspend(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);

IPC::Message*
Msg_OnStartRequest(int32_t routingId);

IPC::Message*
Msg_OnDataAvailable(int32_t routingId);

IPC::Message*
Msg_OnStopRequest(int32_t routingId);

IPC::Message*
Msg_FailedAsyncOpen(int32_t routingId);

IPC::Message*
Msg_DeleteSelf(int32_t routingId);



} // namespace PGIOChannel
} // namespace net
} // namespace mozilla

#endif // ifndef PGIOChannel_h
