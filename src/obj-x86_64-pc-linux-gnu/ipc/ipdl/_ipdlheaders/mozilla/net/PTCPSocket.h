//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PTCPSocket_h
#define PTCPSocket_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/ipc/IPCCore.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct TCPError|
//
class TCPError final
{
private:

public:
    MOZ_IMPLICIT TCPError() :
        name_(),
        message_()
    {
    }

    MOZ_IMPLICIT TCPError(
            const nsString& _name,
            const nsString& _message) :
        name_(_name),
        message_(_message)
    {
    }

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

    nsString&
    message()
    {
        return message_;
    }
    const nsString&
    message() const
    {
        return message_;
    }

private:
    nsString name_;
    nsString message_;
};

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <TCPError>
{
    typedef TCPError paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union SendableData|
//
class SendableData final
{
public:
    enum Type {
        T__None,
        TArrayOfuint8_t = 1,
        TnsCString,
        T__Last = TnsCString
    };

private:
    typedef nsTArray<uint8_t> ArrayOfuint8_t__tdef;
    typedef nsCString nsCString__tdef;

    union Value {
        mozilla::AlignedStorage2<nsTArray<uint8_t>> VArrayOfuint8_t;
        mozilla::AlignedStorage2<nsCString> VnsCString;
    };

    nsTArray<uint8_t>*
    ptr_ArrayOfuint8_t()
    {
        return ((mValue).VArrayOfuint8_t).addr();
    }
    const nsTArray<uint8_t>*
    constptr_ArrayOfuint8_t() const
    {
        return ((mValue).VArrayOfuint8_t).addr();
    }
    nsCString*
    ptr_nsCString()
    {
        return ((mValue).VnsCString).addr();
    }
    const nsCString*
    constptr_nsCString() const
    {
        return ((mValue).VnsCString).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT SendableData() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT SendableData(const nsTArray<uint8_t>& aOther);

    MOZ_IMPLICIT SendableData(nsTArray<uint8_t>&& aOther);

    MOZ_IMPLICIT SendableData(const nsCString& aOther);

    MOZ_IMPLICIT SendableData(nsCString&& aOther);

    MOZ_IMPLICIT SendableData(const SendableData& aOther);

    MOZ_IMPLICIT SendableData(SendableData&& aOther);

    ~SendableData();

    Type
    type() const
    {
        return mType;
    }

    SendableData&
    operator=(const nsTArray<uint8_t>& aRhs);

    SendableData&
    operator=(nsTArray<uint8_t>&& aRhs);

    SendableData&
    operator=(const nsCString& aRhs);

    SendableData&
    operator=(nsCString&& aRhs);

    SendableData&
    operator=(const SendableData& aRhs);

    SendableData&
    operator=(SendableData&& aRhs);

    nsTArray<uint8_t>&
    get_ArrayOfuint8_t()
    {
        AssertSanity(TArrayOfuint8_t);
        return (*(ptr_ArrayOfuint8_t()));
    }
    const nsTArray<uint8_t>&
    get_ArrayOfuint8_t() const
    {
        AssertSanity(TArrayOfuint8_t);
        return (*(constptr_ArrayOfuint8_t()));
    }
    operator nsTArray<uint8_t>&()
    {
        return get_ArrayOfuint8_t();
    }
    operator const nsTArray<uint8_t>&() const
    {
        return get_ArrayOfuint8_t();
    }

    nsCString&
    get_nsCString()
    {
        AssertSanity(TnsCString);
        return (*(ptr_nsCString()));
    }
    const nsCString&
    get_nsCString() const
    {
        AssertSanity(TnsCString);
        return (*(constptr_nsCString()));
    }
    operator nsCString&()
    {
        return get_nsCString();
    }
    operator const nsCString&() const
    {
        return get_nsCString();
    }

private:
    Value mValue;
    Type mType;
};

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <SendableData>
{
    typedef SendableData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union CallbackData|
//
class CallbackData final
{
public:
    enum Type {
        T__None,
        Tvoid_t = 1,
        TSendableData,
        TTCPError,
        T__Last = TTCPError
    };

private:
    typedef mozilla::void_t void_t;
    typedef void_t void_t__tdef;
    typedef SendableData SendableData__tdef;
    typedef TCPError TCPError__tdef;

    union Value {
        mozilla::AlignedStorage2<void_t> Vvoid_t;
        mozilla::AlignedStorage2<SendableData> VSendableData;
        mozilla::AlignedStorage2<TCPError> VTCPError;
    };

    void_t*
    ptr_void_t()
    {
        return ((mValue).Vvoid_t).addr();
    }
    const void_t*
    constptr_void_t() const
    {
        return ((mValue).Vvoid_t).addr();
    }
    SendableData*
    ptr_SendableData()
    {
        return ((mValue).VSendableData).addr();
    }
    const SendableData*
    constptr_SendableData() const
    {
        return ((mValue).VSendableData).addr();
    }
    TCPError*
    ptr_TCPError()
    {
        return ((mValue).VTCPError).addr();
    }
    const TCPError*
    constptr_TCPError() const
    {
        return ((mValue).VTCPError).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT CallbackData() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT CallbackData(const void_t& aOther);

    MOZ_IMPLICIT CallbackData(void_t&& aOther);

    MOZ_IMPLICIT CallbackData(const SendableData& aOther);

    MOZ_IMPLICIT CallbackData(SendableData&& aOther);

    MOZ_IMPLICIT CallbackData(const TCPError& aOther);

    MOZ_IMPLICIT CallbackData(TCPError&& aOther);

    MOZ_IMPLICIT CallbackData(const CallbackData& aOther);

    MOZ_IMPLICIT CallbackData(CallbackData&& aOther);

    ~CallbackData();

    Type
    type() const
    {
        return mType;
    }

    CallbackData&
    operator=(const void_t& aRhs);

    CallbackData&
    operator=(void_t&& aRhs);

    CallbackData&
    operator=(const SendableData& aRhs);

    CallbackData&
    operator=(SendableData&& aRhs);

    CallbackData&
    operator=(const TCPError& aRhs);

    CallbackData&
    operator=(TCPError&& aRhs);

    CallbackData&
    operator=(const CallbackData& aRhs);

    CallbackData&
    operator=(CallbackData&& aRhs);

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

    SendableData&
    get_SendableData()
    {
        AssertSanity(TSendableData);
        return (*(ptr_SendableData()));
    }
    const SendableData&
    get_SendableData() const
    {
        AssertSanity(TSendableData);
        return (*(constptr_SendableData()));
    }
    operator SendableData&()
    {
        return get_SendableData();
    }
    operator const SendableData&() const
    {
        return get_SendableData();
    }

    TCPError&
    get_TCPError()
    {
        AssertSanity(TTCPError);
        return (*(ptr_TCPError()));
    }
    const TCPError&
    get_TCPError() const
    {
        AssertSanity(TTCPError);
        return (*(constptr_TCPError()));
    }
    operator TCPError&()
    {
        return get_TCPError();
    }
    operator const TCPError&() const
    {
        return get_TCPError();
    }

private:
    Value mValue;
    Type mType;
};

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <CallbackData>
{
    typedef CallbackData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTCPSocketChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PTCPSocketChild and PTCPSocketParent
//
namespace mozilla {
namespace net {
namespace PTCPSocket {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PTCPSocketParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PTCPSocketChild>* aChild);

enum MessageType {
    PTCPSocketStart = PTCPSocketMsgStart << 16,
    Msg_Open__ID,
    Msg_Data__ID,
    Msg_StartTLS__ID,
    Msg_Suspend__ID,
    Msg_Resume__ID,
    Msg_Close__ID,
    Msg_Callback__ID,
    Msg_UpdateBufferedAmount__ID,
    Msg_RequestDelete__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PTCPSocketEnd
};

IPC::Message*
Msg_Open(int32_t routingId);

IPC::Message*
Msg_Data(int32_t routingId);

IPC::Message*
Msg_StartTLS(int32_t routingId);

IPC::Message*
Msg_Suspend(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);

IPC::Message*
Msg_Close(int32_t routingId);

IPC::Message*
Msg_Callback(int32_t routingId);

IPC::Message*
Msg_UpdateBufferedAmount(int32_t routingId);

IPC::Message*
Msg_RequestDelete(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PTCPSocket
} // namespace net
} // namespace mozilla

#endif // ifndef PTCPSocket_h
