//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef HttpChannelParams_h
#define HttpChannelParams_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/net/DNS.h"
#include "nsILoadInfo.h"
#include "nsIReferrerInfo.h"
#include "mozilla/dom/IPCServiceWorkerDescriptor.h"
#include "mozilla/net/NeckoChannelParams.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HttpChannelOnStartRequestArgs|
//
namespace mozilla {
namespace net {
class HttpChannelOnStartRequestArgs final
{
private:
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::net::NetAddr NetAddr;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef nsILoadInfo::CrossOriginOpenerPolicy CrossOriginOpenerPolicy;

public:
    MOZ_IMPLICIT HttpChannelOnStartRequestArgs() :
        channelStatus_(),
        loadInfoForwarder_(),
        isFromCache_(),
        isRacing_(),
        cacheEntryAvailable_(),
        securityInfoSerialization_(),
        selfAddr_(),
        peerAddr_(),
        altDataType_(),
        deliveringAltData_(),
        applyConversion_(),
        isResolvedByTRR_(),
        timing_(),
        allRedirectsSameOrigin_(),
        multiPartID_(),
        isLastPartOfMultiPart_(),
        openerPolicy_(),
        appCacheGroupId_(),
        appCacheClientId_(),
        overrideReferrerInfo_(),
        shouldWaitForOnStartRequestSent_(),
        cookie_(),
        dataFromSocketProcess_(),
        cacheEntryId_(),
        altDataLength_(),
        cacheFetchCount_(),
        cacheExpirationTime_(),
        cacheKey_(),
        redirectCount_()
    {
    }

    MOZ_IMPLICIT HttpChannelOnStartRequestArgs(
            const nsresult& _channelStatus,
            const ParentLoadInfoForwarderArgs& _loadInfoForwarder,
            const bool& _isFromCache,
            const bool& _isRacing,
            const bool& _cacheEntryAvailable,
            const uint64_t& _cacheEntryId,
            const int32_t& _cacheFetchCount,
            const uint32_t& _cacheExpirationTime,
            const nsCString& _securityInfoSerialization,
            const NetAddr& _selfAddr,
            const NetAddr& _peerAddr,
            const uint8_t& _redirectCount,
            const uint32_t& _cacheKey,
            const nsCString& _altDataType,
            const int64_t& _altDataLength,
            const bool& _deliveringAltData,
            const bool& _applyConversion,
            const bool& _isResolvedByTRR,
            const ResourceTimingStructArgs& _timing,
            const bool& _allRedirectsSameOrigin,
            const mozilla::Maybe<uint32_t>& _multiPartID,
            const bool& _isLastPartOfMultiPart,
            const CrossOriginOpenerPolicy& _openerPolicy,
            const nsCString& _appCacheGroupId,
            const nsCString& _appCacheClientId,
            nsIReferrerInfo* _overrideReferrerInfo,
            const bool& _shouldWaitForOnStartRequestSent,
            const nsCString& _cookie,
            const bool& _dataFromSocketProcess) :
        channelStatus_(_channelStatus),
        loadInfoForwarder_(_loadInfoForwarder),
        isFromCache_(_isFromCache),
        isRacing_(_isRacing),
        cacheEntryAvailable_(_cacheEntryAvailable),
        securityInfoSerialization_(_securityInfoSerialization),
        selfAddr_(_selfAddr),
        peerAddr_(_peerAddr),
        altDataType_(_altDataType),
        deliveringAltData_(_deliveringAltData),
        applyConversion_(_applyConversion),
        isResolvedByTRR_(_isResolvedByTRR),
        timing_(_timing),
        allRedirectsSameOrigin_(_allRedirectsSameOrigin),
        multiPartID_(_multiPartID),
        isLastPartOfMultiPart_(_isLastPartOfMultiPart),
        openerPolicy_(_openerPolicy),
        appCacheGroupId_(_appCacheGroupId),
        appCacheClientId_(_appCacheClientId),
        overrideReferrerInfo_(_overrideReferrerInfo),
        shouldWaitForOnStartRequestSent_(_shouldWaitForOnStartRequestSent),
        cookie_(_cookie),
        dataFromSocketProcess_(_dataFromSocketProcess),
        cacheEntryId_(_cacheEntryId),
        altDataLength_(_altDataLength),
        cacheFetchCount_(_cacheFetchCount),
        cacheExpirationTime_(_cacheExpirationTime),
        cacheKey_(_cacheKey),
        redirectCount_(_redirectCount)
    {
    }

    nsresult&
    channelStatus()
    {
        return channelStatus_;
    }
    const nsresult&
    channelStatus() const
    {
        return channelStatus_;
    }

    ParentLoadInfoForwarderArgs&
    loadInfoForwarder()
    {
        return loadInfoForwarder_;
    }
    const ParentLoadInfoForwarderArgs&
    loadInfoForwarder() const
    {
        return loadInfoForwarder_;
    }

    bool&
    isFromCache()
    {
        return isFromCache_;
    }
    const bool&
    isFromCache() const
    {
        return isFromCache_;
    }

    bool&
    isRacing()
    {
        return isRacing_;
    }
    const bool&
    isRacing() const
    {
        return isRacing_;
    }

    bool&
    cacheEntryAvailable()
    {
        return cacheEntryAvailable_;
    }
    const bool&
    cacheEntryAvailable() const
    {
        return cacheEntryAvailable_;
    }

    uint64_t&
    cacheEntryId()
    {
        return cacheEntryId_;
    }
    const uint64_t&
    cacheEntryId() const
    {
        return cacheEntryId_;
    }

    int32_t&
    cacheFetchCount()
    {
        return cacheFetchCount_;
    }
    const int32_t&
    cacheFetchCount() const
    {
        return cacheFetchCount_;
    }

    uint32_t&
    cacheExpirationTime()
    {
        return cacheExpirationTime_;
    }
    const uint32_t&
    cacheExpirationTime() const
    {
        return cacheExpirationTime_;
    }

    nsCString&
    securityInfoSerialization()
    {
        return securityInfoSerialization_;
    }
    const nsCString&
    securityInfoSerialization() const
    {
        return securityInfoSerialization_;
    }

    NetAddr&
    selfAddr()
    {
        return selfAddr_;
    }
    const NetAddr&
    selfAddr() const
    {
        return selfAddr_;
    }

    NetAddr&
    peerAddr()
    {
        return peerAddr_;
    }
    const NetAddr&
    peerAddr() const
    {
        return peerAddr_;
    }

    uint8_t&
    redirectCount()
    {
        return redirectCount_;
    }
    const uint8_t&
    redirectCount() const
    {
        return redirectCount_;
    }

    uint32_t&
    cacheKey()
    {
        return cacheKey_;
    }
    const uint32_t&
    cacheKey() const
    {
        return cacheKey_;
    }

    nsCString&
    altDataType()
    {
        return altDataType_;
    }
    const nsCString&
    altDataType() const
    {
        return altDataType_;
    }

    int64_t&
    altDataLength()
    {
        return altDataLength_;
    }
    const int64_t&
    altDataLength() const
    {
        return altDataLength_;
    }

    bool&
    deliveringAltData()
    {
        return deliveringAltData_;
    }
    const bool&
    deliveringAltData() const
    {
        return deliveringAltData_;
    }

    bool&
    applyConversion()
    {
        return applyConversion_;
    }
    const bool&
    applyConversion() const
    {
        return applyConversion_;
    }

    bool&
    isResolvedByTRR()
    {
        return isResolvedByTRR_;
    }
    const bool&
    isResolvedByTRR() const
    {
        return isResolvedByTRR_;
    }

    ResourceTimingStructArgs&
    timing()
    {
        return timing_;
    }
    const ResourceTimingStructArgs&
    timing() const
    {
        return timing_;
    }

    bool&
    allRedirectsSameOrigin()
    {
        return allRedirectsSameOrigin_;
    }
    const bool&
    allRedirectsSameOrigin() const
    {
        return allRedirectsSameOrigin_;
    }

    mozilla::Maybe<uint32_t>&
    multiPartID()
    {
        return multiPartID_;
    }
    const mozilla::Maybe<uint32_t>&
    multiPartID() const
    {
        return multiPartID_;
    }

    bool&
    isLastPartOfMultiPart()
    {
        return isLastPartOfMultiPart_;
    }
    const bool&
    isLastPartOfMultiPart() const
    {
        return isLastPartOfMultiPart_;
    }

    CrossOriginOpenerPolicy&
    openerPolicy()
    {
        return openerPolicy_;
    }
    const CrossOriginOpenerPolicy&
    openerPolicy() const
    {
        return openerPolicy_;
    }

    nsCString&
    appCacheGroupId()
    {
        return appCacheGroupId_;
    }
    const nsCString&
    appCacheGroupId() const
    {
        return appCacheGroupId_;
    }

    nsCString&
    appCacheClientId()
    {
        return appCacheClientId_;
    }
    const nsCString&
    appCacheClientId() const
    {
        return appCacheClientId_;
    }

    RefPtr<nsIReferrerInfo>&
    overrideReferrerInfo()
    {
        return overrideReferrerInfo_;
    }
    nsIReferrerInfo*
    overrideReferrerInfo() const
    {
        return overrideReferrerInfo_;
    }

    bool&
    shouldWaitForOnStartRequestSent()
    {
        return shouldWaitForOnStartRequestSent_;
    }
    const bool&
    shouldWaitForOnStartRequestSent() const
    {
        return shouldWaitForOnStartRequestSent_;
    }

    nsCString&
    cookie()
    {
        return cookie_;
    }
    const nsCString&
    cookie() const
    {
        return cookie_;
    }

    bool&
    dataFromSocketProcess()
    {
        return dataFromSocketProcess_;
    }
    const bool&
    dataFromSocketProcess() const
    {
        return dataFromSocketProcess_;
    }

private:
    void
    StaticAssertions() const;
    nsresult channelStatus_;
    ParentLoadInfoForwarderArgs loadInfoForwarder_;
    bool isFromCache_;
    bool isRacing_;
    bool cacheEntryAvailable_;
    nsCString securityInfoSerialization_;
    NetAddr selfAddr_;
    NetAddr peerAddr_;
    nsCString altDataType_;
    bool deliveringAltData_;
    bool applyConversion_;
    bool isResolvedByTRR_;
    ResourceTimingStructArgs timing_;
    bool allRedirectsSameOrigin_;
    mozilla::Maybe<uint32_t> multiPartID_;
    bool isLastPartOfMultiPart_;
    CrossOriginOpenerPolicy openerPolicy_;
    nsCString appCacheGroupId_;
    nsCString appCacheClientId_;
    RefPtr<nsIReferrerInfo> overrideReferrerInfo_;
    bool shouldWaitForOnStartRequestSent_;
    nsCString cookie_;
    bool dataFromSocketProcess_;
    uint64_t cacheEntryId_;
    int64_t altDataLength_;
    int32_t cacheFetchCount_;
    uint32_t cacheExpirationTime_;
    uint32_t cacheKey_;
    uint8_t redirectCount_;
};
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::HttpChannelOnStartRequestArgs>
{
    typedef mozilla::net::HttpChannelOnStartRequestArgs paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef HttpChannelParams_h
