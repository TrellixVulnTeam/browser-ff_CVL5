//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PNeckoParent_h
#define PNeckoParent_h

#include "mozilla/net/PNecko.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/BrowsingContext.h"
#include "mozilla/dom/ipc/IdType.h"

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PCookieServiceParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PCookieServiceChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PFTPChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PFTPChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PGIOChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PGIOChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketEventListenerParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebSocketEventListenerChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTCPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPServerSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTCPServerSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PUDPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDNSRequestParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDNSRequestChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PDataChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDataChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PSimpleChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSimpleChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTransportProviderParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTransportProviderChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PStunAddrsRequestParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PStunAddrsRequestChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PFileChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PFileChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PClassifierDummyChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PClassifierDummyChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebrtcTCPSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebrtcTCPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessBridgeParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSocketProcessBridgeChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDocumentChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDocumentChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltDataOutputStreamParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PAltDataOutputStreamChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PGIOChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTransportProviderParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltDataOutputStreamParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PFTPChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PSimpleChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PCookieServiceParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDataChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebrtcTCPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PFileChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPServerSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PClassifierDummyChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDNSRequestParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketEventListenerParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDocumentChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PStunAddrsRequestParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketParent;
} // namespace net
} // namespace mozilla

namespace IPC {
class SerializedLoadContext;
} // namespace IPC

class nsIInputStream;

class nsIURI;

class nsIPrincipal;

namespace mozilla {
namespace net {


class PNeckoParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::net::PGIOChannelParent;
    friend class mozilla::net::PTransportProviderParent;
    friend class mozilla::net::PAltDataOutputStreamParent;
    friend class mozilla::net::PFTPChannelParent;
    friend class mozilla::net::PSimpleChannelParent;
    friend class mozilla::net::PCookieServiceParent;
    friend class mozilla::net::PDataChannelParent;
    friend class mozilla::net::PWebrtcTCPSocketParent;
    friend class mozilla::net::PFileChannelParent;
    friend class mozilla::net::PTCPServerSocketParent;
    friend class mozilla::net::PClassifierDummyChannelParent;
    friend class mozilla::net::PDNSRequestParent;
    friend class mozilla::net::PWebSocketEventListenerParent;
    friend class mozilla::net::PTCPSocketParent;
    friend class mozilla::net::PUDPSocketParent;
    friend class mozilla::dom::PContentParent;
    friend class mozilla::net::PHttpChannelParent;
    friend class mozilla::net::PDocumentChannelParent;
    friend class mozilla::net::PStunAddrsRequestParent;
    friend class mozilla::net::PWebSocketParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef IPC::SerializedLoadContext SerializedLoadContext;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::net::PHttpChannelParent PHttpChannelParent;
    typedef mozilla::net::PHttpChannelChild PHttpChannelChild;
    typedef mozilla::net::PCookieServiceParent PCookieServiceParent;
    typedef mozilla::net::PCookieServiceChild PCookieServiceChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::net::PFTPChannelParent PFTPChannelParent;
    typedef mozilla::net::PFTPChannelChild PFTPChannelChild;
    typedef mozilla::net::PGIOChannelParent PGIOChannelParent;
    typedef mozilla::net::PGIOChannelChild PGIOChannelChild;
    typedef mozilla::net::PWebSocketParent PWebSocketParent;
    typedef mozilla::net::PWebSocketChild PWebSocketChild;
    typedef mozilla::net::PWebSocketEventListenerParent PWebSocketEventListenerParent;
    typedef mozilla::net::PWebSocketEventListenerChild PWebSocketEventListenerChild;
    typedef mozilla::net::PTCPSocketParent PTCPSocketParent;
    typedef mozilla::net::PTCPSocketChild PTCPSocketChild;
    typedef mozilla::net::PTCPServerSocketParent PTCPServerSocketParent;
    typedef mozilla::net::PTCPServerSocketChild PTCPServerSocketChild;
    typedef mozilla::net::PUDPSocketParent PUDPSocketParent;
    typedef mozilla::net::PUDPSocketChild PUDPSocketChild;
    typedef mozilla::net::PDNSRequestParent PDNSRequestParent;
    typedef mozilla::net::PDNSRequestChild PDNSRequestChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::net::PDataChannelParent PDataChannelParent;
    typedef mozilla::net::PDataChannelChild PDataChannelChild;
    typedef mozilla::net::PSimpleChannelParent PSimpleChannelParent;
    typedef mozilla::net::PSimpleChannelChild PSimpleChannelChild;
    typedef mozilla::net::PTransportProviderParent PTransportProviderParent;
    typedef mozilla::net::PTransportProviderChild PTransportProviderChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::net::PStunAddrsRequestParent PStunAddrsRequestParent;
    typedef mozilla::net::PStunAddrsRequestChild PStunAddrsRequestChild;
    typedef mozilla::net::PFileChannelParent PFileChannelParent;
    typedef mozilla::net::PFileChannelChild PFileChannelChild;
    typedef mozilla::net::PClassifierDummyChannelParent PClassifierDummyChannelParent;
    typedef mozilla::net::PClassifierDummyChannelChild PClassifierDummyChannelChild;
    typedef mozilla::net::PWebrtcTCPSocketParent PWebrtcTCPSocketParent;
    typedef mozilla::net::PWebrtcTCPSocketChild PWebrtcTCPSocketChild;
    typedef mozilla::net::PSocketProcessBridgeParent PSocketProcessBridgeParent;
    typedef mozilla::net::PSocketProcessBridgeChild PSocketProcessBridgeChild;
    typedef mozilla::net::PDocumentChannelParent PDocumentChannelParent;
    typedef mozilla::net::PDocumentChannelChild PDocumentChannelChild;
    typedef mozilla::net::PAltDataOutputStreamParent PAltDataOutputStreamParent;
    typedef mozilla::net::PAltDataOutputStreamChild PAltDataOutputStreamChild;

public:
    typedef std::function<void(nsIInputStream*)> GetExtensionStreamResolver;
    typedef std::function<void(const FileDescriptor&)> GetExtensionFDResolver;
    typedef std::function<void(Endpoint<mozilla::net::PSocketProcessBridgeChild>&&)> InitSocketProcessBridgeResolver;
    typedef std::function<void(const bool&)> EnsureHSTSDataResolver;
    typedef std::function<void(nsIInputStream*)> GetPageThumbStreamResolver;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvPCookieServiceConstructor(PCookieServiceParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPHttpChannelConstructor(
            PHttpChannelParent* actor,
            PBrowserParent* browser,
            const SerializedLoadContext& loadContext,
            const HttpChannelCreationArgs& args);
    virtual mozilla::ipc::IPCResult
    RecvPFTPChannelConstructor(
            PFTPChannelParent* actor,
            PBrowserParent* browser,
            const SerializedLoadContext& loadContext,
            const FTPChannelCreationArgs& args);
    virtual mozilla::ipc::IPCResult
    RecvPWebSocketConstructor(
            PWebSocketParent* actor,
            PBrowserParent* browser,
            const SerializedLoadContext& loadContext,
            const uint32_t& aSerialID);
    virtual mozilla::ipc::IPCResult
    RecvPTCPServerSocketConstructor(
            PTCPServerSocketParent* actor,
            const uint16_t& localPort,
            const uint16_t& backlog,
            const bool& useArrayBuffers);
    virtual mozilla::ipc::IPCResult
    RecvPUDPSocketConstructor(
            PUDPSocketParent* actor,
            nsIPrincipal* principal,
            const nsCString& filter);
    virtual mozilla::ipc::IPCResult
    RecvPDNSRequestConstructor(
            PDNSRequestParent* actor,
            const nsCString& hostName,
            const nsCString& trrServer,
            const uint16_t& type,
            const OriginAttributes& originAttributes,
            const uint32_t& flags);
    virtual mozilla::ipc::IPCResult
    RecvPDocumentChannelConstructor(
            PDocumentChannelParent* actor,
            const MaybeDiscardedBrowsingContext& browsingContext,
            const DocumentChannelCreationArgs& args);
    virtual mozilla::ipc::IPCResult
    RecvPWebSocketEventListenerConstructor(
            PWebSocketEventListenerParent* actor,
            const uint64_t& aInnerWindowID);
    virtual mozilla::ipc::IPCResult
    RecvPDataChannelConstructor(
            PDataChannelParent* actor,
            const uint32_t& channelId);
    virtual mozilla::ipc::IPCResult
    RecvPGIOChannelConstructor(
            PGIOChannelParent* actor,
            PBrowserParent* browser,
            const SerializedLoadContext& loadContext,
            const GIOChannelCreationArgs& args);
    virtual mozilla::ipc::IPCResult
    RecvPSimpleChannelConstructor(
            PSimpleChannelParent* actor,
            const uint32_t& channelId);
    virtual mozilla::ipc::IPCResult
    RecvPFileChannelConstructor(
            PFileChannelParent* actor,
            const uint32_t& channelId);
    virtual mozilla::ipc::IPCResult
    RecvPClassifierDummyChannelConstructor(
            PClassifierDummyChannelParent* actor,
            nsIURI* uri,
            nsIURI* aTopWindowURI,
            const nsresult& aTopWindowURIResult,
            const mozilla::Maybe<LoadInfoArgs>& loadInfo);
    virtual mozilla::ipc::IPCResult
    RecvPAltDataOutputStreamConstructor(
            PAltDataOutputStreamParent* actor,
            const nsCString& type,
            const int64_t& predictedSize,
            PHttpChannelParent* channel);
    virtual mozilla::ipc::IPCResult
    RecvPStunAddrsRequestConstructor(PStunAddrsRequestParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPWebrtcTCPSocketConstructor(
            PWebrtcTCPSocketParent* actor,
            const mozilla::Maybe<TabId>& tabId);
    virtual mozilla::ipc::IPCResult
    RecvPTCPSocketConstructor(
            PTCPSocketParent* actor,
            const nsString& host,
            const uint16_t& port);
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PNeckoParent();

    virtual ~PNeckoParent();

public:
    PContentParent*
    Manager() const;

    void
    ManagedPHttpChannelParent(nsTArray<PHttpChannelParent*>& aArr) const;
    const ManagedContainer<PHttpChannelParent>&
    ManagedPHttpChannelParent() const;

    void
    ManagedPCookieServiceParent(nsTArray<PCookieServiceParent*>& aArr) const;
    const ManagedContainer<PCookieServiceParent>&
    ManagedPCookieServiceParent() const;

    void
    ManagedPFTPChannelParent(nsTArray<PFTPChannelParent*>& aArr) const;
    const ManagedContainer<PFTPChannelParent>&
    ManagedPFTPChannelParent() const;

    void
    ManagedPWebSocketParent(nsTArray<PWebSocketParent*>& aArr) const;
    const ManagedContainer<PWebSocketParent>&
    ManagedPWebSocketParent() const;

    void
    ManagedPWebSocketEventListenerParent(nsTArray<PWebSocketEventListenerParent*>& aArr) const;
    const ManagedContainer<PWebSocketEventListenerParent>&
    ManagedPWebSocketEventListenerParent() const;

    void
    ManagedPTCPSocketParent(nsTArray<PTCPSocketParent*>& aArr) const;
    const ManagedContainer<PTCPSocketParent>&
    ManagedPTCPSocketParent() const;

    void
    ManagedPTCPServerSocketParent(nsTArray<PTCPServerSocketParent*>& aArr) const;
    const ManagedContainer<PTCPServerSocketParent>&
    ManagedPTCPServerSocketParent() const;

    void
    ManagedPUDPSocketParent(nsTArray<PUDPSocketParent*>& aArr) const;
    const ManagedContainer<PUDPSocketParent>&
    ManagedPUDPSocketParent() const;

    void
    ManagedPDNSRequestParent(nsTArray<PDNSRequestParent*>& aArr) const;
    const ManagedContainer<PDNSRequestParent>&
    ManagedPDNSRequestParent() const;

    void
    ManagedPDataChannelParent(nsTArray<PDataChannelParent*>& aArr) const;
    const ManagedContainer<PDataChannelParent>&
    ManagedPDataChannelParent() const;

    void
    ManagedPGIOChannelParent(nsTArray<PGIOChannelParent*>& aArr) const;
    const ManagedContainer<PGIOChannelParent>&
    ManagedPGIOChannelParent() const;

    void
    ManagedPSimpleChannelParent(nsTArray<PSimpleChannelParent*>& aArr) const;
    const ManagedContainer<PSimpleChannelParent>&
    ManagedPSimpleChannelParent() const;

    void
    ManagedPFileChannelParent(nsTArray<PFileChannelParent*>& aArr) const;
    const ManagedContainer<PFileChannelParent>&
    ManagedPFileChannelParent() const;

    void
    ManagedPTransportProviderParent(nsTArray<PTransportProviderParent*>& aArr) const;
    const ManagedContainer<PTransportProviderParent>&
    ManagedPTransportProviderParent() const;

    void
    ManagedPAltDataOutputStreamParent(nsTArray<PAltDataOutputStreamParent*>& aArr) const;
    const ManagedContainer<PAltDataOutputStreamParent>&
    ManagedPAltDataOutputStreamParent() const;

    void
    ManagedPStunAddrsRequestParent(nsTArray<PStunAddrsRequestParent*>& aArr) const;
    const ManagedContainer<PStunAddrsRequestParent>&
    ManagedPStunAddrsRequestParent() const;

    void
    ManagedPClassifierDummyChannelParent(nsTArray<PClassifierDummyChannelParent*>& aArr) const;
    const ManagedContainer<PClassifierDummyChannelParent>&
    ManagedPClassifierDummyChannelParent() const;

    void
    ManagedPWebrtcTCPSocketParent(nsTArray<PWebrtcTCPSocketParent*>& aArr) const;
    const ManagedContainer<PWebrtcTCPSocketParent>&
    ManagedPWebrtcTCPSocketParent() const;

    void
    ManagedPDocumentChannelParent(nsTArray<PDocumentChannelParent*>& aArr) const;
    const ManagedContainer<PDocumentChannelParent>&
    ManagedPDocumentChannelParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PHttpChannelChild>
    OpenPHttpChannelEndpoint(PHttpChannelParent* aActor);
    bool
    BindPHttpChannelEndpoint(
            ManagedEndpoint<PHttpChannelParent> aEndpoint,
            PHttpChannelParent* aActor);

    ManagedEndpoint<PCookieServiceChild>
    OpenPCookieServiceEndpoint(PCookieServiceParent* aActor);
    bool
    BindPCookieServiceEndpoint(
            ManagedEndpoint<PCookieServiceParent> aEndpoint,
            PCookieServiceParent* aActor);

    ManagedEndpoint<PFTPChannelChild>
    OpenPFTPChannelEndpoint(PFTPChannelParent* aActor);
    bool
    BindPFTPChannelEndpoint(
            ManagedEndpoint<PFTPChannelParent> aEndpoint,
            PFTPChannelParent* aActor);

    ManagedEndpoint<PWebSocketChild>
    OpenPWebSocketEndpoint(PWebSocketParent* aActor);
    bool
    BindPWebSocketEndpoint(
            ManagedEndpoint<PWebSocketParent> aEndpoint,
            PWebSocketParent* aActor);

    ManagedEndpoint<PWebSocketEventListenerChild>
    OpenPWebSocketEventListenerEndpoint(PWebSocketEventListenerParent* aActor);
    bool
    BindPWebSocketEventListenerEndpoint(
            ManagedEndpoint<PWebSocketEventListenerParent> aEndpoint,
            PWebSocketEventListenerParent* aActor);

    ManagedEndpoint<PTCPSocketChild>
    OpenPTCPSocketEndpoint(PTCPSocketParent* aActor);
    bool
    BindPTCPSocketEndpoint(
            ManagedEndpoint<PTCPSocketParent> aEndpoint,
            PTCPSocketParent* aActor);

    ManagedEndpoint<PTCPServerSocketChild>
    OpenPTCPServerSocketEndpoint(PTCPServerSocketParent* aActor);
    bool
    BindPTCPServerSocketEndpoint(
            ManagedEndpoint<PTCPServerSocketParent> aEndpoint,
            PTCPServerSocketParent* aActor);

    ManagedEndpoint<PUDPSocketChild>
    OpenPUDPSocketEndpoint(PUDPSocketParent* aActor);
    bool
    BindPUDPSocketEndpoint(
            ManagedEndpoint<PUDPSocketParent> aEndpoint,
            PUDPSocketParent* aActor);

    ManagedEndpoint<PDNSRequestChild>
    OpenPDNSRequestEndpoint(PDNSRequestParent* aActor);
    bool
    BindPDNSRequestEndpoint(
            ManagedEndpoint<PDNSRequestParent> aEndpoint,
            PDNSRequestParent* aActor);

    ManagedEndpoint<PDataChannelChild>
    OpenPDataChannelEndpoint(PDataChannelParent* aActor);
    bool
    BindPDataChannelEndpoint(
            ManagedEndpoint<PDataChannelParent> aEndpoint,
            PDataChannelParent* aActor);

    ManagedEndpoint<PGIOChannelChild>
    OpenPGIOChannelEndpoint(PGIOChannelParent* aActor);
    bool
    BindPGIOChannelEndpoint(
            ManagedEndpoint<PGIOChannelParent> aEndpoint,
            PGIOChannelParent* aActor);

    ManagedEndpoint<PSimpleChannelChild>
    OpenPSimpleChannelEndpoint(PSimpleChannelParent* aActor);
    bool
    BindPSimpleChannelEndpoint(
            ManagedEndpoint<PSimpleChannelParent> aEndpoint,
            PSimpleChannelParent* aActor);

    ManagedEndpoint<PFileChannelChild>
    OpenPFileChannelEndpoint(PFileChannelParent* aActor);
    bool
    BindPFileChannelEndpoint(
            ManagedEndpoint<PFileChannelParent> aEndpoint,
            PFileChannelParent* aActor);

    ManagedEndpoint<PTransportProviderChild>
    OpenPTransportProviderEndpoint(PTransportProviderParent* aActor);
    bool
    BindPTransportProviderEndpoint(
            ManagedEndpoint<PTransportProviderParent> aEndpoint,
            PTransportProviderParent* aActor);

    ManagedEndpoint<PAltDataOutputStreamChild>
    OpenPAltDataOutputStreamEndpoint(PAltDataOutputStreamParent* aActor);
    bool
    BindPAltDataOutputStreamEndpoint(
            ManagedEndpoint<PAltDataOutputStreamParent> aEndpoint,
            PAltDataOutputStreamParent* aActor);

    ManagedEndpoint<PStunAddrsRequestChild>
    OpenPStunAddrsRequestEndpoint(PStunAddrsRequestParent* aActor);
    bool
    BindPStunAddrsRequestEndpoint(
            ManagedEndpoint<PStunAddrsRequestParent> aEndpoint,
            PStunAddrsRequestParent* aActor);

    ManagedEndpoint<PClassifierDummyChannelChild>
    OpenPClassifierDummyChannelEndpoint(PClassifierDummyChannelParent* aActor);
    bool
    BindPClassifierDummyChannelEndpoint(
            ManagedEndpoint<PClassifierDummyChannelParent> aEndpoint,
            PClassifierDummyChannelParent* aActor);

    ManagedEndpoint<PWebrtcTCPSocketChild>
    OpenPWebrtcTCPSocketEndpoint(PWebrtcTCPSocketParent* aActor);
    bool
    BindPWebrtcTCPSocketEndpoint(
            ManagedEndpoint<PWebrtcTCPSocketParent> aEndpoint,
            PWebrtcTCPSocketParent* aActor);

    ManagedEndpoint<PDocumentChannelChild>
    OpenPDocumentChannelEndpoint(PDocumentChannelParent* aActor);
    bool
    BindPDocumentChannelEndpoint(
            ManagedEndpoint<PDocumentChannelParent> aEndpoint,
            PDocumentChannelParent* aActor);

    [[nodiscard]] bool
    SendAsyncAuthPromptForNestedFrame(
            const TabId& nestedFrameId,
            const nsCString& uri,
            const nsString& realm,
            const uint64_t& callbackId);

    [[nodiscard]] bool
    SendPredOnPredictPrefetch(
            nsIURI* uri,
            const uint32_t& httpStatus);

    [[nodiscard]] bool
    SendPredOnPredictPreconnect(nsIURI* uri);

    [[nodiscard]] bool
    SendPredOnPredictDNS(nsIURI* uri);

    [[nodiscard]] bool
    SendSpeculativeConnectRequest();

    [[nodiscard]] bool
    SendNetworkChangeNotification(const nsCString& type);

    [[nodiscard]] PTransportProviderParent*
    SendPTransportProviderConstructor();

    [[nodiscard]] PTransportProviderParent*
    SendPTransportProviderConstructor(PTransportProviderParent* actor);

    [[nodiscard]] PTCPSocketParent*
    SendPTCPSocketConstructor(
            const nsString& host,
            const uint16_t& port);

    [[nodiscard]] PTCPSocketParent*
    SendPTCPSocketConstructor(
            PTCPSocketParent* actor,
            const nsString& host,
            const uint16_t& port);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PHttpChannelParent> mManagedPHttpChannelParent;
    ManagedContainer<PCookieServiceParent> mManagedPCookieServiceParent;
    ManagedContainer<PFTPChannelParent> mManagedPFTPChannelParent;
    ManagedContainer<PWebSocketParent> mManagedPWebSocketParent;
    ManagedContainer<PWebSocketEventListenerParent> mManagedPWebSocketEventListenerParent;
    ManagedContainer<PTCPSocketParent> mManagedPTCPSocketParent;
    ManagedContainer<PTCPServerSocketParent> mManagedPTCPServerSocketParent;
    ManagedContainer<PUDPSocketParent> mManagedPUDPSocketParent;
    ManagedContainer<PDNSRequestParent> mManagedPDNSRequestParent;
    ManagedContainer<PDataChannelParent> mManagedPDataChannelParent;
    ManagedContainer<PGIOChannelParent> mManagedPGIOChannelParent;
    ManagedContainer<PSimpleChannelParent> mManagedPSimpleChannelParent;
    ManagedContainer<PFileChannelParent> mManagedPFileChannelParent;
    ManagedContainer<PTransportProviderParent> mManagedPTransportProviderParent;
    ManagedContainer<PAltDataOutputStreamParent> mManagedPAltDataOutputStreamParent;
    ManagedContainer<PStunAddrsRequestParent> mManagedPStunAddrsRequestParent;
    ManagedContainer<PClassifierDummyChannelParent> mManagedPClassifierDummyChannelParent;
    ManagedContainer<PWebrtcTCPSocketParent> mManagedPWebrtcTCPSocketParent;
    ManagedContainer<PDocumentChannelParent> mManagedPDocumentChannelParent;
};


} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::PNeckoParent*>
{
    typedef mozilla::net::PNeckoParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PNeckoParent_h
