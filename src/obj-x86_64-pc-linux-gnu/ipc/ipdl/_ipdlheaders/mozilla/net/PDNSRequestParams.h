//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PDNSRequestParams_h
#define PDNSRequestParams_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/net/DNS.h"
#include "mozilla/net/DNSByTypeRecord.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DNSRecord|
//
namespace mozilla {
namespace net {
class DNSRecord final
{
private:

public:
    MOZ_IMPLICIT DNSRecord() :
        canonicalName_(),
        addrs_(),
        isTRR_(),
        trrFetchDuration_(),
        trrFetchDurationNetworkOnly_(),
        effectiveTRRMode_()
    {
    }

    MOZ_IMPLICIT DNSRecord(
            const nsCString& _canonicalName,
            const nsTArray<NetAddr>& _addrs,
            const double& _trrFetchDuration,
            const double& _trrFetchDurationNetworkOnly,
            const bool& _isTRR,
            const uint32_t& _effectiveTRRMode) :
        canonicalName_(_canonicalName),
        addrs_(_addrs),
        isTRR_(_isTRR),
        trrFetchDuration_(_trrFetchDuration),
        trrFetchDurationNetworkOnly_(_trrFetchDurationNetworkOnly),
        effectiveTRRMode_(_effectiveTRRMode)
    {
    }

    nsCString&
    canonicalName()
    {
        return canonicalName_;
    }
    const nsCString&
    canonicalName() const
    {
        return canonicalName_;
    }

    nsTArray<NetAddr>&
    addrs()
    {
        return addrs_;
    }
    const nsTArray<NetAddr>&
    addrs() const
    {
        return addrs_;
    }

    double&
    trrFetchDuration()
    {
        return trrFetchDuration_;
    }
    const double&
    trrFetchDuration() const
    {
        return trrFetchDuration_;
    }

    double&
    trrFetchDurationNetworkOnly()
    {
        return trrFetchDurationNetworkOnly_;
    }
    const double&
    trrFetchDurationNetworkOnly() const
    {
        return trrFetchDurationNetworkOnly_;
    }

    bool&
    isTRR()
    {
        return isTRR_;
    }
    const bool&
    isTRR() const
    {
        return isTRR_;
    }

    uint32_t&
    effectiveTRRMode()
    {
        return effectiveTRRMode_;
    }
    const uint32_t&
    effectiveTRRMode() const
    {
        return effectiveTRRMode_;
    }

private:
    void
    StaticAssertions() const;
    nsCString canonicalName_;
    CopyableTArray<NetAddr> addrs_;
    bool isTRR_;
    double trrFetchDuration_;
    double trrFetchDurationNetworkOnly_;
    uint32_t effectiveTRRMode_;
};
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::DNSRecord>
{
    typedef mozilla::net::DNSRecord paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union DNSRequestResponse|
//
namespace mozilla {
namespace net {
class DNSRequestResponse final
{
public:
    enum Type {
        T__None,
        TDNSRecord = 1,
        TIPCTypeRecord,
        Tnsresult,
        T__Last = Tnsresult
    };

private:
    typedef mozilla::net::DNSRecord DNSRecord;
    typedef mozilla::net::IPCTypeRecord IPCTypeRecord;
    typedef DNSRecord DNSRecord__tdef;
    typedef IPCTypeRecord IPCTypeRecord__tdef;
    typedef nsresult nsresult__tdef;

    union Value {
        mozilla::AlignedStorage2<DNSRecord> VDNSRecord;
        mozilla::AlignedStorage2<IPCTypeRecord> VIPCTypeRecord;
        mozilla::AlignedStorage2<nsresult> Vnsresult;
    };

    DNSRecord*
    ptr_DNSRecord()
    {
        return ((mValue).VDNSRecord).addr();
    }
    const DNSRecord*
    constptr_DNSRecord() const
    {
        return ((mValue).VDNSRecord).addr();
    }
    IPCTypeRecord*
    ptr_IPCTypeRecord()
    {
        return ((mValue).VIPCTypeRecord).addr();
    }
    const IPCTypeRecord*
    constptr_IPCTypeRecord() const
    {
        return ((mValue).VIPCTypeRecord).addr();
    }
    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT DNSRequestResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT DNSRequestResponse(const DNSRecord& aOther);

    MOZ_IMPLICIT DNSRequestResponse(DNSRecord&& aOther);

    MOZ_IMPLICIT DNSRequestResponse(const IPCTypeRecord& aOther);

    MOZ_IMPLICIT DNSRequestResponse(IPCTypeRecord&& aOther);

    MOZ_IMPLICIT DNSRequestResponse(const nsresult& aOther);

    MOZ_IMPLICIT DNSRequestResponse(nsresult&& aOther);

    MOZ_IMPLICIT DNSRequestResponse(const DNSRequestResponse& aOther);

    MOZ_IMPLICIT DNSRequestResponse(DNSRequestResponse&& aOther);

    ~DNSRequestResponse();

    Type
    type() const
    {
        return mType;
    }

    DNSRequestResponse&
    operator=(const DNSRecord& aRhs);

    DNSRequestResponse&
    operator=(DNSRecord&& aRhs);

    DNSRequestResponse&
    operator=(const IPCTypeRecord& aRhs);

    DNSRequestResponse&
    operator=(IPCTypeRecord&& aRhs);

    DNSRequestResponse&
    operator=(const nsresult& aRhs);

    DNSRequestResponse&
    operator=(nsresult&& aRhs);

    DNSRequestResponse&
    operator=(const DNSRequestResponse& aRhs);

    DNSRequestResponse&
    operator=(DNSRequestResponse&& aRhs);

    DNSRecord&
    get_DNSRecord()
    {
        AssertSanity(TDNSRecord);
        return (*(ptr_DNSRecord()));
    }
    const DNSRecord&
    get_DNSRecord() const
    {
        AssertSanity(TDNSRecord);
        return (*(constptr_DNSRecord()));
    }
    operator DNSRecord&()
    {
        return get_DNSRecord();
    }
    operator const DNSRecord&() const
    {
        return get_DNSRecord();
    }

    IPCTypeRecord&
    get_IPCTypeRecord()
    {
        AssertSanity(TIPCTypeRecord);
        return (*(ptr_IPCTypeRecord()));
    }
    const IPCTypeRecord&
    get_IPCTypeRecord() const
    {
        AssertSanity(TIPCTypeRecord);
        return (*(constptr_IPCTypeRecord()));
    }
    operator IPCTypeRecord&()
    {
        return get_IPCTypeRecord();
    }
    operator const IPCTypeRecord&() const
    {
        return get_IPCTypeRecord();
    }

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::DNSRequestResponse>
{
    typedef mozilla::net::DNSRequestResponse paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PDNSRequestParams_h
