//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSocketProcess_h
#define PSocketProcess_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/net/DashboardTypes.h"
#include "mozilla/dom/MemoryReportTypes.h"
#include "mozilla/net/NeckoChannelParams.h"
#include "mozilla/dom/PrefsTypes.h"
#include "mozilla/psm/PSMIPCTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HttpHandlerInitArgs|
//
namespace mozilla {
namespace net {
class HttpHandlerInitArgs final
{
private:

public:
    MOZ_IMPLICIT HttpHandlerInitArgs() :
        mLegacyAppName_(),
        mLegacyAppVersion_(),
        mPlatform_(),
        mOscpu_(),
        mMisc_(),
        mProduct_(),
        mProductSub_(),
        mAppName_(),
        mAppVersion_(),
        mCompatFirefox_(),
        mCompatDevice_(),
        mDeviceModelId_()
    {
    }

    MOZ_IMPLICIT HttpHandlerInitArgs(
            const nsCString& _mLegacyAppName,
            const nsCString& _mLegacyAppVersion,
            const nsCString& _mPlatform,
            const nsCString& _mOscpu,
            const nsCString& _mMisc,
            const nsCString& _mProduct,
            const nsCString& _mProductSub,
            const nsCString& _mAppName,
            const nsCString& _mAppVersion,
            const nsCString& _mCompatFirefox,
            const nsCString& _mCompatDevice,
            const nsCString& _mDeviceModelId) :
        mLegacyAppName_(_mLegacyAppName),
        mLegacyAppVersion_(_mLegacyAppVersion),
        mPlatform_(_mPlatform),
        mOscpu_(_mOscpu),
        mMisc_(_mMisc),
        mProduct_(_mProduct),
        mProductSub_(_mProductSub),
        mAppName_(_mAppName),
        mAppVersion_(_mAppVersion),
        mCompatFirefox_(_mCompatFirefox),
        mCompatDevice_(_mCompatDevice),
        mDeviceModelId_(_mDeviceModelId)
    {
    }

    nsCString&
    mLegacyAppName()
    {
        return mLegacyAppName_;
    }
    const nsCString&
    mLegacyAppName() const
    {
        return mLegacyAppName_;
    }

    nsCString&
    mLegacyAppVersion()
    {
        return mLegacyAppVersion_;
    }
    const nsCString&
    mLegacyAppVersion() const
    {
        return mLegacyAppVersion_;
    }

    nsCString&
    mPlatform()
    {
        return mPlatform_;
    }
    const nsCString&
    mPlatform() const
    {
        return mPlatform_;
    }

    nsCString&
    mOscpu()
    {
        return mOscpu_;
    }
    const nsCString&
    mOscpu() const
    {
        return mOscpu_;
    }

    nsCString&
    mMisc()
    {
        return mMisc_;
    }
    const nsCString&
    mMisc() const
    {
        return mMisc_;
    }

    nsCString&
    mProduct()
    {
        return mProduct_;
    }
    const nsCString&
    mProduct() const
    {
        return mProduct_;
    }

    nsCString&
    mProductSub()
    {
        return mProductSub_;
    }
    const nsCString&
    mProductSub() const
    {
        return mProductSub_;
    }

    nsCString&
    mAppName()
    {
        return mAppName_;
    }
    const nsCString&
    mAppName() const
    {
        return mAppName_;
    }

    nsCString&
    mAppVersion()
    {
        return mAppVersion_;
    }
    const nsCString&
    mAppVersion() const
    {
        return mAppVersion_;
    }

    nsCString&
    mCompatFirefox()
    {
        return mCompatFirefox_;
    }
    const nsCString&
    mCompatFirefox() const
    {
        return mCompatFirefox_;
    }

    nsCString&
    mCompatDevice()
    {
        return mCompatDevice_;
    }
    const nsCString&
    mCompatDevice() const
    {
        return mCompatDevice_;
    }

    nsCString&
    mDeviceModelId()
    {
        return mDeviceModelId_;
    }
    const nsCString&
    mDeviceModelId() const
    {
        return mDeviceModelId_;
    }

private:
    nsCString mLegacyAppName_;
    nsCString mLegacyAppVersion_;
    nsCString mPlatform_;
    nsCString mOscpu_;
    nsCString mMisc_;
    nsCString mProduct_;
    nsCString mProductSub_;
    nsCString mAppName_;
    nsCString mAppVersion_;
    nsCString mCompatFirefox_;
    nsCString mCompatDevice_;
    nsCString mDeviceModelId_;
};
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::HttpHandlerInitArgs>
{
    typedef mozilla::net::HttpHandlerInitArgs paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SocketDataArgs|
//
namespace mozilla {
namespace net {
class SocketDataArgs final
{
private:
    typedef mozilla::net::SocketInfo SocketInfo;

public:
    MOZ_IMPLICIT SocketDataArgs() :
        info_(),
        totalSent_(),
        totalRecv_()
    {
    }

    MOZ_IMPLICIT SocketDataArgs(
            const uint64_t& _totalSent,
            const uint64_t& _totalRecv,
            const nsTArray<SocketInfo>& _info) :
        info_(_info),
        totalSent_(_totalSent),
        totalRecv_(_totalRecv)
    {
    }

    uint64_t&
    totalSent()
    {
        return totalSent_;
    }
    const uint64_t&
    totalSent() const
    {
        return totalSent_;
    }

    uint64_t&
    totalRecv()
    {
        return totalRecv_;
    }
    const uint64_t&
    totalRecv() const
    {
        return totalRecv_;
    }

    nsTArray<SocketInfo>&
    info()
    {
        return info_;
    }
    const nsTArray<SocketInfo>&
    info() const
    {
        return info_;
    }

private:
    void
    StaticAssertions() const;
    CopyableTArray<SocketInfo> info_;
    uint64_t totalSent_;
    uint64_t totalRecv_;
};
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::SocketDataArgs>
{
    typedef mozilla::net::SocketDataArgs paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct SocketPorcessInitAttributes|
//
namespace mozilla {
namespace net {
class SocketPorcessInitAttributes final
{
private:
    typedef mozilla::ipc::FileDescriptor FileDescriptor;

public:
    MOZ_IMPLICIT SocketPorcessInitAttributes() :
        mOffline_(),
        mConnectivity_(),
        mInitSandbox_(),
        mSandboxBroker_()
    {
    }

    MOZ_IMPLICIT SocketPorcessInitAttributes(
            const bool& _mOffline,
            const bool& _mConnectivity,
            const bool& _mInitSandbox,
            const mozilla::Maybe<FileDescriptor>& _mSandboxBroker) :
        mOffline_(_mOffline),
        mConnectivity_(_mConnectivity),
        mInitSandbox_(_mInitSandbox),
        mSandboxBroker_(_mSandboxBroker)
    {
    }

    bool&
    mOffline()
    {
        return mOffline_;
    }
    const bool&
    mOffline() const
    {
        return mOffline_;
    }

    bool&
    mConnectivity()
    {
        return mConnectivity_;
    }
    const bool&
    mConnectivity() const
    {
        return mConnectivity_;
    }

    bool&
    mInitSandbox()
    {
        return mInitSandbox_;
    }
    const bool&
    mInitSandbox() const
    {
        return mInitSandbox_;
    }

    mozilla::Maybe<FileDescriptor>&
    mSandboxBroker()
    {
        return mSandboxBroker_;
    }
    const mozilla::Maybe<FileDescriptor>&
    mSandboxBroker() const
    {
        return mSandboxBroker_;
    }

private:
    bool mOffline_;
    bool mConnectivity_;
    bool mInitSandbox_;
    mozilla::Maybe<FileDescriptor> mSandboxBroker_;
};
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::SocketPorcessInitAttributes>
{
    typedef mozilla::net::SocketPorcessInitAttributes paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSocketProcessChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PSocketProcessChild and PSocketProcessParent
//
namespace mozilla {
namespace net {
namespace PSocketProcess {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PSocketProcessParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PSocketProcessChild>* aChild);

enum MessageType {
    PSocketProcessStart = PSocketProcessMsgStart << 16,
    Msg_InitCrashReporter__ID,
    Msg_AddMemoryReport__ID,
    Msg_AccumulateChildHistograms__ID,
    Msg_AccumulateChildKeyedHistograms__ID,
    Msg_UpdateChildScalars__ID,
    Msg_UpdateChildKeyedScalars__ID,
    Msg_RecordChildEvents__ID,
    Msg_RecordDiscardedData__ID,
    Msg_PWebrtcTCPSocketConstructor__ID,
    Reply_PWebrtcTCPSocketConstructor__ID,
    Msg_PChildToParentStreamConstructor__ID,
    Reply_PChildToParentStreamConstructor__ID,
    Msg_ObserveHttpActivity__ID,
    Msg_InitBackground__ID,
    Msg_PAltServiceConstructor__ID,
    Reply_PAltServiceConstructor__ID,
    Msg_GetTLSClientCert__ID,
    Reply_GetTLSClientCert__ID,
    Msg_PProxyConfigLookupConstructor__ID,
    Reply_PProxyConfigLookupConstructor__ID,
    Msg_CachePushCheck__ID,
    Reply_CachePushCheck__ID,
    Msg_ODoHServiceActivated__ID,
    Msg_Init__ID,
    Msg_PreferenceUpdate__ID,
    Msg_RequestMemoryReport__ID,
    Reply_RequestMemoryReport__ID,
    Msg_SetOffline__ID,
    Msg_SetConnectivity__ID,
    Msg_InitLinuxSandbox__ID,
    Msg_InitSocketProcessBridgeParent__ID,
    Msg_InitProfiler__ID,
    Msg_SocketProcessTelemetryPing__ID,
    Msg_PHttpTransactionConstructor__ID,
    Reply_PHttpTransactionConstructor__ID,
    Msg_PParentToChildStreamConstructor__ID,
    Reply_PParentToChildStreamConstructor__ID,
    Msg_PHttpConnectionMgrConstructor__ID,
    Reply_PHttpConnectionMgrConstructor__ID,
    Msg_UpdateDeviceModelId__ID,
    Msg_OnHttpActivityDistributorActivated__ID,
    Msg_PInputChannelThrottleQueueConstructor__ID,
    Reply_PInputChannelThrottleQueueConstructor__ID,
    Msg_PAltSvcTransactionConstructor__ID,
    Reply_PAltSvcTransactionConstructor__ID,
    Msg_ClearSessionCache__ID,
    Msg_PTRRServiceConstructor__ID,
    Reply_PTRRServiceConstructor__ID,
    Msg_PNativeDNSResolverOverrideConstructor__ID,
    Reply_PNativeDNSResolverOverrideConstructor__ID,
    Msg_NotifyObserver__ID,
    Msg_PRemoteLazyInputStreamConstructor__ID,
    Reply_PRemoteLazyInputStreamConstructor__ID,
    Msg_GetSocketData__ID,
    Reply_GetSocketData__ID,
    Msg_GetDNSCacheEntries__ID,
    Reply_GetDNSCacheEntries__ID,
    Msg_GetHttpConnectionData__ID,
    Reply_GetHttpConnectionData__ID,
    Msg_PFileDescriptorSetConstructor__ID,
    Reply_PFileDescriptorSetConstructor__ID,
    Msg_PDNSRequestConstructor__ID,
    Reply_PDNSRequestConstructor__ID,
    PSocketProcessEnd
};

IPC::Message*
Msg_InitCrashReporter(int32_t routingId);

IPC::Message*
Msg_AddMemoryReport(int32_t routingId);

IPC::Message*
Msg_AccumulateChildHistograms(int32_t routingId);

IPC::Message*
Msg_AccumulateChildKeyedHistograms(int32_t routingId);

IPC::Message*
Msg_UpdateChildScalars(int32_t routingId);

IPC::Message*
Msg_UpdateChildKeyedScalars(int32_t routingId);

IPC::Message*
Msg_RecordChildEvents(int32_t routingId);

IPC::Message*
Msg_RecordDiscardedData(int32_t routingId);

IPC::Message*
Msg_PWebrtcTCPSocketConstructor(int32_t routingId);
IPC::Message*
Reply_PWebrtcTCPSocketConstructor(int32_t routingId);

IPC::Message*
Msg_PChildToParentStreamConstructor(int32_t routingId);
IPC::Message*
Reply_PChildToParentStreamConstructor(int32_t routingId);

IPC::Message*
Msg_ObserveHttpActivity(int32_t routingId);

IPC::Message*
Msg_InitBackground(int32_t routingId);

IPC::Message*
Msg_PAltServiceConstructor(int32_t routingId);
IPC::Message*
Reply_PAltServiceConstructor(int32_t routingId);

IPC::Message*
Msg_GetTLSClientCert(int32_t routingId);
IPC::Message*
Reply_GetTLSClientCert(int32_t routingId);

IPC::Message*
Msg_PProxyConfigLookupConstructor(int32_t routingId);
IPC::Message*
Reply_PProxyConfigLookupConstructor(int32_t routingId);

IPC::Message*
Msg_CachePushCheck(int32_t routingId);
IPC::Message*
Reply_CachePushCheck(int32_t routingId);

IPC::Message*
Msg_ODoHServiceActivated(int32_t routingId);

IPC::Message*
Msg_Init(int32_t routingId);

IPC::Message*
Msg_PreferenceUpdate(int32_t routingId);

IPC::Message*
Msg_RequestMemoryReport(int32_t routingId);
IPC::Message*
Reply_RequestMemoryReport(int32_t routingId);

IPC::Message*
Msg_SetOffline(int32_t routingId);

IPC::Message*
Msg_SetConnectivity(int32_t routingId);

IPC::Message*
Msg_InitLinuxSandbox(int32_t routingId);

IPC::Message*
Msg_InitSocketProcessBridgeParent(int32_t routingId);

IPC::Message*
Msg_InitProfiler(int32_t routingId);

IPC::Message*
Msg_SocketProcessTelemetryPing(int32_t routingId);

IPC::Message*
Msg_PHttpTransactionConstructor(int32_t routingId);
IPC::Message*
Reply_PHttpTransactionConstructor(int32_t routingId);

IPC::Message*
Msg_PParentToChildStreamConstructor(int32_t routingId);
IPC::Message*
Reply_PParentToChildStreamConstructor(int32_t routingId);

IPC::Message*
Msg_PHttpConnectionMgrConstructor(int32_t routingId);
IPC::Message*
Reply_PHttpConnectionMgrConstructor(int32_t routingId);

IPC::Message*
Msg_UpdateDeviceModelId(int32_t routingId);

IPC::Message*
Msg_OnHttpActivityDistributorActivated(int32_t routingId);

IPC::Message*
Msg_PInputChannelThrottleQueueConstructor(int32_t routingId);
IPC::Message*
Reply_PInputChannelThrottleQueueConstructor(int32_t routingId);

IPC::Message*
Msg_PAltSvcTransactionConstructor(int32_t routingId);
IPC::Message*
Reply_PAltSvcTransactionConstructor(int32_t routingId);

IPC::Message*
Msg_ClearSessionCache(int32_t routingId);

IPC::Message*
Msg_PTRRServiceConstructor(int32_t routingId);
IPC::Message*
Reply_PTRRServiceConstructor(int32_t routingId);

IPC::Message*
Msg_PNativeDNSResolverOverrideConstructor(int32_t routingId);
IPC::Message*
Reply_PNativeDNSResolverOverrideConstructor(int32_t routingId);

IPC::Message*
Msg_NotifyObserver(int32_t routingId);

IPC::Message*
Msg_PRemoteLazyInputStreamConstructor(int32_t routingId);
IPC::Message*
Reply_PRemoteLazyInputStreamConstructor(int32_t routingId);

IPC::Message*
Msg_GetSocketData(int32_t routingId);
IPC::Message*
Reply_GetSocketData(int32_t routingId);

IPC::Message*
Msg_GetDNSCacheEntries(int32_t routingId);
IPC::Message*
Reply_GetDNSCacheEntries(int32_t routingId);

IPC::Message*
Msg_GetHttpConnectionData(int32_t routingId);
IPC::Message*
Reply_GetHttpConnectionData(int32_t routingId);

IPC::Message*
Msg_PFileDescriptorSetConstructor(int32_t routingId);
IPC::Message*
Reply_PFileDescriptorSetConstructor(int32_t routingId);

IPC::Message*
Msg_PDNSRequestConstructor(int32_t routingId);
IPC::Message*
Reply_PDNSRequestConstructor(int32_t routingId);



} // namespace PSocketProcess
} // namespace net
} // namespace mozilla

#endif // ifndef PSocketProcess_h
