//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebSocket_h
#define PWebSocket_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/ipc/IPCStream.h"
#include "mozilla/net/NeckoChannelParams.h"

namespace mozilla {
namespace net {
class PWebSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebSocketChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PWebSocketChild and PWebSocketParent
//
namespace mozilla {
namespace net {
namespace PWebSocket {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PWebSocketParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PWebSocketChild>* aChild);

enum MessageType {
    PWebSocketStart = PWebSocketMsgStart << 16,
    Msg_AsyncOpen__ID,
    Msg_Close__ID,
    Msg_SendMsg__ID,
    Msg_SendBinaryMsg__ID,
    Msg_SendBinaryStream__ID,
    Msg_DeleteSelf__ID,
    Msg_OnStart__ID,
    Msg_OnStop__ID,
    Msg_OnMessageAvailable__ID,
    Msg_OnBinaryMessageAvailable__ID,
    Msg_OnAcknowledge__ID,
    Msg_OnServerClose__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PWebSocketEnd
};

IPC::Message*
Msg_AsyncOpen(int32_t routingId);

IPC::Message*
Msg_Close(int32_t routingId);

IPC::Message*
Msg_SendMsg(int32_t routingId);

IPC::Message*
Msg_SendBinaryMsg(int32_t routingId);

IPC::Message*
Msg_SendBinaryStream(int32_t routingId);

IPC::Message*
Msg_DeleteSelf(int32_t routingId);

IPC::Message*
Msg_OnStart(int32_t routingId);

IPC::Message*
Msg_OnStop(int32_t routingId);

IPC::Message*
Msg_OnMessageAvailable(int32_t routingId);

IPC::Message*
Msg_OnBinaryMessageAvailable(int32_t routingId);

IPC::Message*
Msg_OnAcknowledge(int32_t routingId);

IPC::Message*
Msg_OnServerClose(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PWebSocket
} // namespace net
} // namespace mozilla

#endif // ifndef PWebSocket_h
