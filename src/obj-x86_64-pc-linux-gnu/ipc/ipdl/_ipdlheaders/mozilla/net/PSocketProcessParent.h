//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PSocketProcessParent_h
#define PSocketProcessParent_h

#include "mozilla/net/PSocketProcess.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
class nsIFile;

// Headers for things that cannot be forward declared
#include "base/process.h"
#include "mozilla/TelemetryComms.h"
#include "mozilla/dom/NativeThreadId.h"
#include "mozilla/dom/ipc/IdType.h"
#include "mozilla/ipc/BackgroundUtils.h"
#include "mozilla/net/DashboardTypes.h"
#include "prtime.h"

namespace mozilla {
namespace net {
class PDNSRequestParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDNSRequestChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessBridgeParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSocketProcessBridgeChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PProfilerParent;
} // namespace mozilla
namespace mozilla {
class PProfilerChild;
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebrtcTCPSocketParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebrtcTCPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpTransactionParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpTransactionChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpConnectionMgrParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpConnectionMgrChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PInputChannelThrottleQueueParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PInputChannelThrottleQueueChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltServiceParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PAltServiceChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltSvcTransactionParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PAltSvcTransactionChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTRRServiceParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTRRServiceChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PProxyConfigLookupParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PProxyConfigLookupChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PNativeDNSResolverOverrideParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PNativeDNSResolverOverrideChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla
namespace mozilla {
class PRemoteLazyInputStreamChild;
} // namespace mozilla

namespace mozilla {
namespace net {
class PTRRServiceParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
class PRemoteLazyInputStreamParent;
} // namespace mozilla

namespace mozilla {
namespace net {
class PDNSRequestParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltServiceParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltSvcTransactionParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpConnectionMgrParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebrtcTCPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PProxyConfigLookupParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PNativeDNSResolverOverrideParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PInputChannelThrottleQueueParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpTransactionParent;
} // namespace net
} // namespace mozilla

class nsIURI;

struct nsID;

namespace mozilla {
namespace net {


class PSocketProcessParent :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::net::PTRRServiceParent;
    friend class mozilla::PRemoteLazyInputStreamParent;
    friend class mozilla::net::PDNSRequestParent;
    friend class mozilla::ipc::PChildToParentStreamParent;
    friend class mozilla::ipc::PParentToChildStreamParent;
    friend class mozilla::net::PAltServiceParent;
    friend class mozilla::net::PAltSvcTransactionParent;
    friend class mozilla::net::PHttpConnectionMgrParent;
    friend class mozilla::net::PWebrtcTCPSocketParent;
    friend class mozilla::net::PProxyConfigLookupParent;
    friend class mozilla::net::PNativeDNSResolverOverrideParent;
    friend class mozilla::ipc::PFileDescriptorSetParent;
    friend class mozilla::net::PInputChannelThrottleQueueParent;
    friend class mozilla::net::PHttpTransactionParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::psm::ByteArray ByteArray;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::Telemetry::ChildEventData ChildEventData;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::net::DNSCacheEntries DNSCacheEntries;
    typedef mozilla::psm::DataStorageEntry DataStorageEntry;
    typedef mozilla::psm::DataStorageItem DataStorageItem;
    typedef mozilla::DataStorageType DataStorageType;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::psm::DelegatedCredentialInfoArg DelegatedCredentialInfoArg;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::Telemetry::DiscardedData DiscardedData;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::Telemetry::HistogramAccumulation HistogramAccumulation;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::net::HttpHandlerInitArgs HttpHandlerInitArgs;
    typedef mozilla::net::HttpRetParams HttpRetParams;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::Telemetry::KeyedHistogramAccumulation KeyedHistogramAccumulation;
    typedef mozilla::Telemetry::KeyedScalarAction KeyedScalarAction;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MemoryReport MemoryReport;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::dom::Pref Pref;
    typedef mozilla::dom::PrefValue PrefValue;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::Telemetry::ScalarAction ScalarAction;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SocketDataArgs SocketDataArgs;
    typedef mozilla::net::SocketInfo SocketInfo;
    typedef mozilla::net::SocketPorcessInitAttributes SocketPorcessInitAttributes;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::net::PDNSRequestParent PDNSRequestParent;
    typedef mozilla::net::PDNSRequestChild PDNSRequestChild;
    typedef mozilla::net::PSocketProcessBridgeParent PSocketProcessBridgeParent;
    typedef mozilla::net::PSocketProcessBridgeChild PSocketProcessBridgeChild;
    typedef mozilla::PProfilerParent PProfilerParent;
    typedef mozilla::PProfilerChild PProfilerChild;
    typedef mozilla::net::PWebrtcTCPSocketParent PWebrtcTCPSocketParent;
    typedef mozilla::net::PWebrtcTCPSocketChild PWebrtcTCPSocketChild;
    typedef mozilla::net::PHttpTransactionParent PHttpTransactionParent;
    typedef mozilla::net::PHttpTransactionChild PHttpTransactionChild;
    typedef mozilla::net::PHttpConnectionMgrParent PHttpConnectionMgrParent;
    typedef mozilla::net::PHttpConnectionMgrChild PHttpConnectionMgrChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::net::PInputChannelThrottleQueueParent PInputChannelThrottleQueueParent;
    typedef mozilla::net::PInputChannelThrottleQueueChild PInputChannelThrottleQueueChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::net::PAltServiceParent PAltServiceParent;
    typedef mozilla::net::PAltServiceChild PAltServiceChild;
    typedef mozilla::net::PAltSvcTransactionParent PAltSvcTransactionParent;
    typedef mozilla::net::PAltSvcTransactionChild PAltSvcTransactionChild;
    typedef mozilla::net::PTRRServiceParent PTRRServiceParent;
    typedef mozilla::net::PTRRServiceChild PTRRServiceChild;
    typedef mozilla::net::PProxyConfigLookupParent PProxyConfigLookupParent;
    typedef mozilla::net::PProxyConfigLookupChild PProxyConfigLookupChild;
    typedef mozilla::net::PNativeDNSResolverOverrideParent PNativeDNSResolverOverrideParent;
    typedef mozilla::net::PNativeDNSResolverOverrideChild PNativeDNSResolverOverrideChild;
    typedef mozilla::PRemoteLazyInputStreamParent PRemoteLazyInputStreamParent;
    typedef mozilla::PRemoteLazyInputStreamChild PRemoteLazyInputStreamChild;

public:
    typedef std::function<void(const bool&)> CachePushCheckResolver;
    typedef MozPromise<uint32_t, ResponseRejectReason, true> RequestMemoryReportPromise;
    typedef MozPromise<SocketDataArgs, ResponseRejectReason, true> GetSocketDataPromise;
    typedef MozPromise<nsTArray<DNSCacheEntries>, ResponseRejectReason, true> GetDNSCacheEntriesPromise;
    typedef MozPromise<nsTArray<HttpRetParams>, ResponseRejectReason, true> GetHttpConnectionDataPromise;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPWebrtcTCPSocketConstructor(
            PWebrtcTCPSocketParent* actor,
            const mozilla::Maybe<TabId>& tabId);
    virtual mozilla::ipc::IPCResult
    RecvPChildToParentStreamConstructor(PChildToParentStreamParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPAltServiceConstructor(PAltServiceParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPProxyConfigLookupConstructor(
            PProxyConfigLookupParent* actor,
            nsIURI* aUri,
            const uint32_t& aFlags);
    virtual mozilla::ipc::IPCResult
    RecvPFileDescriptorSetConstructor(
            PFileDescriptorSetParent* actor,
            const FileDescriptor& fd);
    virtual mozilla::ipc::IPCResult
    RecvPDNSRequestConstructor(
            PDNSRequestParent* actor,
            const nsCString& hostName,
            const nsCString& trrServer,
            const uint16_t& type,
            const OriginAttributes& originAttributes,
            const uint32_t& flags);
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PSocketProcessParent();

    virtual ~PSocketProcessParent();

public:
    void
    ManagedPDNSRequestParent(nsTArray<PDNSRequestParent*>& aArr) const;
    const ManagedContainer<PDNSRequestParent>&
    ManagedPDNSRequestParent() const;

    void
    ManagedPWebrtcTCPSocketParent(nsTArray<PWebrtcTCPSocketParent*>& aArr) const;
    const ManagedContainer<PWebrtcTCPSocketParent>&
    ManagedPWebrtcTCPSocketParent() const;

    void
    ManagedPFileDescriptorSetParent(nsTArray<PFileDescriptorSetParent*>& aArr) const;
    const ManagedContainer<PFileDescriptorSetParent>&
    ManagedPFileDescriptorSetParent() const;

    void
    ManagedPHttpTransactionParent(nsTArray<PHttpTransactionParent*>& aArr) const;
    const ManagedContainer<PHttpTransactionParent>&
    ManagedPHttpTransactionParent() const;

    void
    ManagedPHttpConnectionMgrParent(nsTArray<PHttpConnectionMgrParent*>& aArr) const;
    const ManagedContainer<PHttpConnectionMgrParent>&
    ManagedPHttpConnectionMgrParent() const;

    void
    ManagedPChildToParentStreamParent(nsTArray<PChildToParentStreamParent*>& aArr) const;
    const ManagedContainer<PChildToParentStreamParent>&
    ManagedPChildToParentStreamParent() const;

    void
    ManagedPParentToChildStreamParent(nsTArray<PParentToChildStreamParent*>& aArr) const;
    const ManagedContainer<PParentToChildStreamParent>&
    ManagedPParentToChildStreamParent() const;

    void
    ManagedPInputChannelThrottleQueueParent(nsTArray<PInputChannelThrottleQueueParent*>& aArr) const;
    const ManagedContainer<PInputChannelThrottleQueueParent>&
    ManagedPInputChannelThrottleQueueParent() const;

    void
    ManagedPAltServiceParent(nsTArray<PAltServiceParent*>& aArr) const;
    const ManagedContainer<PAltServiceParent>&
    ManagedPAltServiceParent() const;

    void
    ManagedPAltSvcTransactionParent(nsTArray<PAltSvcTransactionParent*>& aArr) const;
    const ManagedContainer<PAltSvcTransactionParent>&
    ManagedPAltSvcTransactionParent() const;

    void
    ManagedPTRRServiceParent(nsTArray<PTRRServiceParent*>& aArr) const;
    const ManagedContainer<PTRRServiceParent>&
    ManagedPTRRServiceParent() const;

    void
    ManagedPProxyConfigLookupParent(nsTArray<PProxyConfigLookupParent*>& aArr) const;
    const ManagedContainer<PProxyConfigLookupParent>&
    ManagedPProxyConfigLookupParent() const;

    void
    ManagedPNativeDNSResolverOverrideParent(nsTArray<PNativeDNSResolverOverrideParent*>& aArr) const;
    const ManagedContainer<PNativeDNSResolverOverrideParent>&
    ManagedPNativeDNSResolverOverrideParent() const;

    void
    ManagedPRemoteLazyInputStreamParent(nsTArray<PRemoteLazyInputStreamParent*>& aArr) const;
    const ManagedContainer<PRemoteLazyInputStreamParent>&
    ManagedPRemoteLazyInputStreamParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PDNSRequestChild>
    OpenPDNSRequestEndpoint(PDNSRequestParent* aActor);
    bool
    BindPDNSRequestEndpoint(
            ManagedEndpoint<PDNSRequestParent> aEndpoint,
            PDNSRequestParent* aActor);

    ManagedEndpoint<PWebrtcTCPSocketChild>
    OpenPWebrtcTCPSocketEndpoint(PWebrtcTCPSocketParent* aActor);
    bool
    BindPWebrtcTCPSocketEndpoint(
            ManagedEndpoint<PWebrtcTCPSocketParent> aEndpoint,
            PWebrtcTCPSocketParent* aActor);

    ManagedEndpoint<PFileDescriptorSetChild>
    OpenPFileDescriptorSetEndpoint(PFileDescriptorSetParent* aActor);
    bool
    BindPFileDescriptorSetEndpoint(
            ManagedEndpoint<PFileDescriptorSetParent> aEndpoint,
            PFileDescriptorSetParent* aActor);

    ManagedEndpoint<PHttpTransactionChild>
    OpenPHttpTransactionEndpoint(PHttpTransactionParent* aActor);
    bool
    BindPHttpTransactionEndpoint(
            ManagedEndpoint<PHttpTransactionParent> aEndpoint,
            PHttpTransactionParent* aActor);

    ManagedEndpoint<PHttpConnectionMgrChild>
    OpenPHttpConnectionMgrEndpoint(PHttpConnectionMgrParent* aActor);
    bool
    BindPHttpConnectionMgrEndpoint(
            ManagedEndpoint<PHttpConnectionMgrParent> aEndpoint,
            PHttpConnectionMgrParent* aActor);

    ManagedEndpoint<PChildToParentStreamChild>
    OpenPChildToParentStreamEndpoint(PChildToParentStreamParent* aActor);
    bool
    BindPChildToParentStreamEndpoint(
            ManagedEndpoint<PChildToParentStreamParent> aEndpoint,
            PChildToParentStreamParent* aActor);

    ManagedEndpoint<PParentToChildStreamChild>
    OpenPParentToChildStreamEndpoint(PParentToChildStreamParent* aActor);
    bool
    BindPParentToChildStreamEndpoint(
            ManagedEndpoint<PParentToChildStreamParent> aEndpoint,
            PParentToChildStreamParent* aActor);

    ManagedEndpoint<PInputChannelThrottleQueueChild>
    OpenPInputChannelThrottleQueueEndpoint(PInputChannelThrottleQueueParent* aActor);
    bool
    BindPInputChannelThrottleQueueEndpoint(
            ManagedEndpoint<PInputChannelThrottleQueueParent> aEndpoint,
            PInputChannelThrottleQueueParent* aActor);

    ManagedEndpoint<PAltServiceChild>
    OpenPAltServiceEndpoint(PAltServiceParent* aActor);
    bool
    BindPAltServiceEndpoint(
            ManagedEndpoint<PAltServiceParent> aEndpoint,
            PAltServiceParent* aActor);

    ManagedEndpoint<PAltSvcTransactionChild>
    OpenPAltSvcTransactionEndpoint(PAltSvcTransactionParent* aActor);
    bool
    BindPAltSvcTransactionEndpoint(
            ManagedEndpoint<PAltSvcTransactionParent> aEndpoint,
            PAltSvcTransactionParent* aActor);

    ManagedEndpoint<PTRRServiceChild>
    OpenPTRRServiceEndpoint(PTRRServiceParent* aActor);
    bool
    BindPTRRServiceEndpoint(
            ManagedEndpoint<PTRRServiceParent> aEndpoint,
            PTRRServiceParent* aActor);

    ManagedEndpoint<PProxyConfigLookupChild>
    OpenPProxyConfigLookupEndpoint(PProxyConfigLookupParent* aActor);
    bool
    BindPProxyConfigLookupEndpoint(
            ManagedEndpoint<PProxyConfigLookupParent> aEndpoint,
            PProxyConfigLookupParent* aActor);

    ManagedEndpoint<PNativeDNSResolverOverrideChild>
    OpenPNativeDNSResolverOverrideEndpoint(PNativeDNSResolverOverrideParent* aActor);
    bool
    BindPNativeDNSResolverOverrideEndpoint(
            ManagedEndpoint<PNativeDNSResolverOverrideParent> aEndpoint,
            PNativeDNSResolverOverrideParent* aActor);

    ManagedEndpoint<PRemoteLazyInputStreamChild>
    OpenPRemoteLazyInputStreamEndpoint(PRemoteLazyInputStreamParent* aActor);
    bool
    BindPRemoteLazyInputStreamEndpoint(
            ManagedEndpoint<PRemoteLazyInputStreamParent> aEndpoint,
            PRemoteLazyInputStreamParent* aActor);

    [[nodiscard]] bool
    SendInit(const SocketPorcessInitAttributes& aAttributes);

    [[nodiscard]] bool
    SendPreferenceUpdate(const Pref& pref);

    void
    SendRequestMemoryReport(
            const uint32_t& generation,
            const bool& anonymize,
            const bool& minimizeMemoryUsage,
            const mozilla::Maybe<FileDescriptor>& DMDFile,
            mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<RequestMemoryReportPromise>
    SendRequestMemoryReport(
            const uint32_t& generation,
            const bool& anonymize,
            const bool& minimizeMemoryUsage,
            const mozilla::Maybe<FileDescriptor>& DMDFile);

    [[nodiscard]] bool
    SendSetOffline(const bool& offline);

    [[nodiscard]] bool
    SendSetConnectivity(const bool& connectivity);

    [[nodiscard]] bool
    SendInitLinuxSandbox(const mozilla::Maybe<FileDescriptor>& sandboxBroker);

    [[nodiscard]] bool
    SendInitSocketProcessBridgeParent(
            const ProcessId& processId,
            Endpoint<mozilla::net::PSocketProcessBridgeParent>&& endpoint);

    [[nodiscard]] bool
    SendInitProfiler(Endpoint<mozilla::PProfilerChild>&& aEndpoint);

    [[nodiscard]] bool
    SendSocketProcessTelemetryPing();

    [[nodiscard]] PHttpTransactionParent*
    SendPHttpTransactionConstructor(PHttpTransactionParent* actor);

    [[nodiscard]] PParentToChildStreamParent*
    SendPParentToChildStreamConstructor();

    [[nodiscard]] PParentToChildStreamParent*
    SendPParentToChildStreamConstructor(PParentToChildStreamParent* actor);

    [[nodiscard]] PHttpConnectionMgrParent*
    SendPHttpConnectionMgrConstructor(
            PHttpConnectionMgrParent* actor,
            const HttpHandlerInitArgs& aArgs);

    [[nodiscard]] bool
    SendUpdateDeviceModelId(const nsCString& aModelId);

    [[nodiscard]] bool
    SendOnHttpActivityDistributorActivated(const bool& aIsActivated);

    [[nodiscard]] PInputChannelThrottleQueueParent*
    SendPInputChannelThrottleQueueConstructor(
            PInputChannelThrottleQueueParent* actor,
            const uint32_t& meanBytesPerSecond,
            const uint32_t& maxBytesPerSecond);

    [[nodiscard]] PAltSvcTransactionParent*
    SendPAltSvcTransactionConstructor(
            PAltSvcTransactionParent* actor,
            const HttpConnectionInfoCloneArgs& aConnInfo,
            const uint32_t& aCaps);

    [[nodiscard]] bool
    SendClearSessionCache();

    [[nodiscard]] PTRRServiceParent*
    SendPTRRServiceConstructor(
            PTRRServiceParent* actor,
            const bool& aCaptiveIsPassed,
            const bool& aParentalControlEnabled,
            const nsTArray<nsCString>& aDNSSuffixList);

    [[nodiscard]] PNativeDNSResolverOverrideParent*
    SendPNativeDNSResolverOverrideConstructor(PNativeDNSResolverOverrideParent* actor);

    [[nodiscard]] bool
    SendNotifyObserver(
            const nsCString& aTopic,
            const nsString& aData);

    [[nodiscard]] PRemoteLazyInputStreamParent*
    SendPRemoteLazyInputStreamConstructor(
            PRemoteLazyInputStreamParent* actor,
            const nsID& aID,
            const uint64_t& aSize);

    void
    SendGetSocketData(
            mozilla::ipc::ResolveCallback<SocketDataArgs>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<GetSocketDataPromise>
    SendGetSocketData();

    void
    SendGetDNSCacheEntries(
            mozilla::ipc::ResolveCallback<nsTArray<DNSCacheEntries>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<GetDNSCacheEntriesPromise>
    SendGetDNSCacheEntries();

    void
    SendGetHttpConnectionData(
            mozilla::ipc::ResolveCallback<nsTArray<HttpRetParams>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<GetHttpConnectionDataPromise>
    SendGetHttpConnectionData();

    [[nodiscard]] PFileDescriptorSetParent*
    SendPFileDescriptorSetConstructor(const FileDescriptor& fd);

    [[nodiscard]] PFileDescriptorSetParent*
    SendPFileDescriptorSetConstructor(
            PFileDescriptorSetParent* actor,
            const FileDescriptor& fd);

    [[nodiscard]] PDNSRequestParent*
    SendPDNSRequestConstructor(
            PDNSRequestParent* actor,
            const nsCString& hostName,
            const nsCString& trrServer,
            const uint16_t& type,
            const OriginAttributes& originAttributes,
            const uint32_t& flags);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PDNSRequestParent> mManagedPDNSRequestParent;
    ManagedContainer<PWebrtcTCPSocketParent> mManagedPWebrtcTCPSocketParent;
    ManagedContainer<PFileDescriptorSetParent> mManagedPFileDescriptorSetParent;
    ManagedContainer<PHttpTransactionParent> mManagedPHttpTransactionParent;
    ManagedContainer<PHttpConnectionMgrParent> mManagedPHttpConnectionMgrParent;
    ManagedContainer<PChildToParentStreamParent> mManagedPChildToParentStreamParent;
    ManagedContainer<PParentToChildStreamParent> mManagedPParentToChildStreamParent;
    ManagedContainer<PInputChannelThrottleQueueParent> mManagedPInputChannelThrottleQueueParent;
    ManagedContainer<PAltServiceParent> mManagedPAltServiceParent;
    ManagedContainer<PAltSvcTransactionParent> mManagedPAltSvcTransactionParent;
    ManagedContainer<PTRRServiceParent> mManagedPTRRServiceParent;
    ManagedContainer<PProxyConfigLookupParent> mManagedPProxyConfigLookupParent;
    ManagedContainer<PNativeDNSResolverOverrideParent> mManagedPNativeDNSResolverOverrideParent;
    ManagedContainer<PRemoteLazyInputStreamParent> mManagedPRemoteLazyInputStreamParent;
};


} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::PSocketProcessParent*>
{
    typedef mozilla::net::PSocketProcessParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PSocketProcessParent_h
