//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PNeckoChild_h
#define PNeckoChild_h

#include "mozilla/net/PNecko.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/BrowsingContext.h"
#include "mozilla/dom/ipc/IdType.h"

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PCookieServiceChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PCookieServiceParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PFTPChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PFTPChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PGIOChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PGIOChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketEventListenerChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebSocketEventListenerParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPSocketChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTCPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPServerSocketChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTCPServerSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PUDPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDNSRequestChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDNSRequestParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PDataChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDataChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PSimpleChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSimpleChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTransportProviderChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PTransportProviderParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PChildToParentStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PChildToParentStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PParentToChildStreamChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PParentToChildStreamParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace net {
class PStunAddrsRequestChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PStunAddrsRequestParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PFileChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PFileChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PClassifierDummyChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PClassifierDummyChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebrtcTCPSocketChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PWebrtcTCPSocketParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PSocketProcessBridgeChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PSocketProcessBridgeParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDocumentChannelChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PDocumentChannelParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltDataOutputStreamChild;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PAltDataOutputStreamParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PGIOChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTransportProviderChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PAltDataOutputStreamChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PFTPChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PSimpleChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PCookieServiceChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDataChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebrtcTCPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PFileChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPServerSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PClassifierDummyChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDNSRequestChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketEventListenerChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PTCPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PUDPSocketChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PDocumentChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PStunAddrsRequestChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PWebSocketChild;
} // namespace net
} // namespace mozilla

namespace IPC {
class SerializedLoadContext;
} // namespace IPC

class nsIInputStream;

class nsIURI;

class nsIPrincipal;

namespace mozilla {
namespace net {


class PNeckoChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::net::PGIOChannelChild;
    friend class mozilla::net::PTransportProviderChild;
    friend class mozilla::net::PAltDataOutputStreamChild;
    friend class mozilla::net::PFTPChannelChild;
    friend class mozilla::net::PSimpleChannelChild;
    friend class mozilla::net::PCookieServiceChild;
    friend class mozilla::net::PDataChannelChild;
    friend class mozilla::net::PWebrtcTCPSocketChild;
    friend class mozilla::net::PFileChannelChild;
    friend class mozilla::net::PTCPServerSocketChild;
    friend class mozilla::net::PClassifierDummyChannelChild;
    friend class mozilla::net::PDNSRequestChild;
    friend class mozilla::net::PWebSocketEventListenerChild;
    friend class mozilla::net::PTCPSocketChild;
    friend class mozilla::net::PUDPSocketChild;
    friend class mozilla::dom::PContentChild;
    friend class mozilla::net::PHttpChannelChild;
    friend class mozilla::net::PDocumentChannelChild;
    friend class mozilla::net::PStunAddrsRequestChild;
    friend class mozilla::net::PWebSocketChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::dom::BrowsingContext BrowsingContext;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::dom::CategoryDispatch CategoryDispatch;
    typedef mozilla::net::ChildLoadInfoForwarderArgs ChildLoadInfoForwarderArgs;
    typedef mozilla::dom::ClientClaimArgs ClientClaimArgs;
    typedef mozilla::dom::ClientControlledArgs ClientControlledArgs;
    typedef mozilla::dom::ClientFocusArgs ClientFocusArgs;
    typedef mozilla::dom::ClientGetInfoAndStateArgs ClientGetInfoAndStateArgs;
    typedef mozilla::dom::ClientInfoAndState ClientInfoAndState;
    typedef mozilla::dom::ClientList ClientList;
    typedef mozilla::dom::ClientMatchAllArgs ClientMatchAllArgs;
    typedef mozilla::dom::ClientNavigateArgs ClientNavigateArgs;
    typedef mozilla::dom::ClientNavigateOpConstructorArgs ClientNavigateOpConstructorArgs;
    typedef mozilla::dom::ClientOpConstructorArgs ClientOpConstructorArgs;
    typedef mozilla::dom::ClientOpResult ClientOpResult;
    typedef mozilla::dom::ClientOpenWindowArgs ClientOpenWindowArgs;
    typedef mozilla::dom::ClientPostMessageArgs ClientPostMessageArgs;
    typedef mozilla::dom::ClientSourceConstructorArgs ClientSourceConstructorArgs;
    typedef mozilla::dom::ClientSourceExecutionReadyArgs ClientSourceExecutionReadyArgs;
    typedef mozilla::dom::ClonedMessageData ClonedMessageData;
    typedef mozilla::dom::ClonedOrErrorMessageData ClonedOrErrorMessageData;
    typedef mozilla::net::ConsoleReportCollected ConsoleReportCollected;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::net::CookiePermissionData CookiePermissionData;
    typedef mozilla::net::CookieStruct CookieStruct;
    typedef mozilla::CopyableErrorResult CopyableErrorResult;
    typedef mozilla::net::CorsPreflightArgs CorsPreflightArgs;
    typedef mozilla::dom::CreatedWindowInfo CreatedWindowInfo;
    typedef nsILoadInfo::CrossOriginEmbedderPolicy CrossOriginEmbedderPolicy;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    typedef mozilla::dom::DimensionInfo DimensionInfo;
    typedef mozilla::dom::DocShellLoadStateInit DocShellLoadStateInit;
    typedef mozilla::net::DocumentChannelCreationArgs DocumentChannelCreationArgs;
    typedef mozilla::net::DocumentChannelElementCreationArgs DocumentChannelElementCreationArgs;
    typedef mozilla::net::DocumentCreationArgs DocumentCreationArgs;
    typedef mozilla::ipc::EncryptedFileInputStreamParams EncryptedFileInputStreamParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::dom::ErrorMessageData ErrorMessageData;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::net::FTPChannelConnectArgs FTPChannelConnectArgs;
    typedef mozilla::net::FTPChannelCreationArgs FTPChannelCreationArgs;
    typedef mozilla::net::FTPChannelOpenArgs FTPChannelOpenArgs;
    typedef mozilla::dom::FeaturePolicyInfo FeaturePolicyInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::FrameScriptInfo FrameScriptInfo;
    typedef mozilla::net::GIOChannelConnectArgs GIOChannelConnectArgs;
    typedef mozilla::net::GIOChannelCreationArgs GIOChannelCreationArgs;
    typedef mozilla::net::GIOChannelOpenArgs GIOChannelOpenArgs;
    typedef mozilla::ipc::HeaderEntry HeaderEntry;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::net::HttpActivity HttpActivity;
    typedef mozilla::net::HttpActivityArgs HttpActivityArgs;
    typedef mozilla::net::HttpChannelConnectArgs HttpChannelConnectArgs;
    typedef mozilla::net::HttpChannelCreationArgs HttpChannelCreationArgs;
    typedef mozilla::net::HttpChannelOpenArgs HttpChannelOpenArgs;
    typedef mozilla::net::HttpConnectionInfoCloneArgs HttpConnectionInfoCloneArgs;
    typedef mozilla::dom::IDPLVariant IDPLVariant;
    typedef mozilla::dom::IPCBlob IPCBlob;
    typedef mozilla::dom::IPCClientInfo IPCClientInfo;
    typedef mozilla::dom::IPCClientState IPCClientState;
    typedef mozilla::dom::IPCClientWindowState IPCClientWindowState;
    typedef mozilla::dom::IPCClientWorkerState IPCClientWorkerState;
    typedef mozilla::dom::IPCDataTransfer IPCDataTransfer;
    typedef mozilla::dom::IPCDataTransferData IPCDataTransferData;
    typedef mozilla::dom::IPCDataTransferImage IPCDataTransferImage;
    typedef mozilla::dom::IPCDataTransferItem IPCDataTransferItem;
    typedef mozilla::dom::IPCFile IPCFile;
    typedef mozilla::ipc::IPCRemoteStreamParams IPCRemoteStreamParams;
    typedef mozilla::ipc::IPCRemoteStreamType IPCRemoteStreamType;
    typedef mozilla::dom::IPCServiceWorkerDescriptor IPCServiceWorkerDescriptor;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::dom::IPDLProperty IPDLProperty;
    typedef mozilla::dom::IPDLVariantValue IPDLVariantValue;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::ipc::InputStreamLengthWrapperParams InputStreamLengthWrapperParams;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::net::LoadInfoArgs LoadInfoArgs;
    typedef mozilla::dom::LoadingSessionHistoryInfo LoadingSessionHistoryInfo;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::MaybeDiscardedBrowsingContext MaybeDiscardedBrowsingContext;
    typedef mozilla::dom::MediaMemoryInfo MediaMemoryInfo;
    typedef mozilla::dom::MessageData MessageData;
    typedef mozilla::dom::MessageDataType MessageDataType;
    typedef mozilla::dom::MessagePortIdentifier MessagePortIdentifier;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::net::ObjectCreationArgs ObjectCreationArgs;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::dom::OwnerShowInfo OwnerShowInfo;
    typedef mozilla::net::ParentLoadInfoForwarderArgs ParentLoadInfoForwarderArgs;
    typedef mozilla::dom::ParentShowInfo ParentShowInfo;
    typedef mozilla::dom::PerformanceInfo PerformanceInfo;
    typedef mozilla::dom::PerformanceMemoryInfo PerformanceMemoryInfo;
    typedef mozilla::net::PreferredAlternativeDataTypeParams PreferredAlternativeDataTypeParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::net::ProxyInfoCloneArgs ProxyInfoCloneArgs;
    typedef mozilla::net::RedirectHistoryEntryInfo RedirectHistoryEntryInfo;
    typedef mozilla::net::RedirectToRealChannelArgs RedirectToRealChannelArgs;
    typedef mozilla::dom::RefMessageData RefMessageData;
    typedef mozilla::ipc::RemoteLazyInputStreamParams RemoteLazyInputStreamParams;
    typedef mozilla::ipc::RemoteLazyInputStreamRef RemoteLazyInputStreamRef;
    typedef mozilla::RemoteLazyStream RemoteLazyStream;
    typedef mozilla::dom::ReplacementChannelConfigInit ReplacementChannelConfigInit;
    typedef mozilla::net::ResourceTimingStructArgs ResourceTimingStructArgs;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::dom::ScreenDetails ScreenDetails;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef IPC::SerializedLoadContext SerializedLoadContext;
    typedef mozilla::SerializedStructuredCloneBuffer SerializedStructuredCloneBuffer;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::SlicedInputStreamParams SlicedInputStreamParams;
    typedef mozilla::net::SpeculativeConnectionOverriderArgs SpeculativeConnectionOverriderArgs;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::StorageAccess StorageAccess;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::dom::TimedChannelInfo TimedChannelInfo;
    typedef mozilla::net::TimingStructArgs TimingStructArgs;
    typedef mozilla::net::TransactionObserverResult TransactionObserverResult;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::net::nsHttpResponseHead nsHttpResponseHead;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::net::PHttpChannelChild PHttpChannelChild;
    typedef mozilla::net::PHttpChannelParent PHttpChannelParent;
    typedef mozilla::net::PCookieServiceChild PCookieServiceChild;
    typedef mozilla::net::PCookieServiceParent PCookieServiceParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::net::PFTPChannelChild PFTPChannelChild;
    typedef mozilla::net::PFTPChannelParent PFTPChannelParent;
    typedef mozilla::net::PGIOChannelChild PGIOChannelChild;
    typedef mozilla::net::PGIOChannelParent PGIOChannelParent;
    typedef mozilla::net::PWebSocketChild PWebSocketChild;
    typedef mozilla::net::PWebSocketParent PWebSocketParent;
    typedef mozilla::net::PWebSocketEventListenerChild PWebSocketEventListenerChild;
    typedef mozilla::net::PWebSocketEventListenerParent PWebSocketEventListenerParent;
    typedef mozilla::net::PTCPSocketChild PTCPSocketChild;
    typedef mozilla::net::PTCPSocketParent PTCPSocketParent;
    typedef mozilla::net::PTCPServerSocketChild PTCPServerSocketChild;
    typedef mozilla::net::PTCPServerSocketParent PTCPServerSocketParent;
    typedef mozilla::net::PUDPSocketChild PUDPSocketChild;
    typedef mozilla::net::PUDPSocketParent PUDPSocketParent;
    typedef mozilla::net::PDNSRequestChild PDNSRequestChild;
    typedef mozilla::net::PDNSRequestParent PDNSRequestParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::net::PDataChannelChild PDataChannelChild;
    typedef mozilla::net::PDataChannelParent PDataChannelParent;
    typedef mozilla::net::PSimpleChannelChild PSimpleChannelChild;
    typedef mozilla::net::PSimpleChannelParent PSimpleChannelParent;
    typedef mozilla::net::PTransportProviderChild PTransportProviderChild;
    typedef mozilla::net::PTransportProviderParent PTransportProviderParent;
    typedef mozilla::ipc::PChildToParentStreamChild PChildToParentStreamChild;
    typedef mozilla::ipc::PChildToParentStreamParent PChildToParentStreamParent;
    typedef mozilla::ipc::PParentToChildStreamChild PParentToChildStreamChild;
    typedef mozilla::ipc::PParentToChildStreamParent PParentToChildStreamParent;
    typedef mozilla::net::PStunAddrsRequestChild PStunAddrsRequestChild;
    typedef mozilla::net::PStunAddrsRequestParent PStunAddrsRequestParent;
    typedef mozilla::net::PFileChannelChild PFileChannelChild;
    typedef mozilla::net::PFileChannelParent PFileChannelParent;
    typedef mozilla::net::PClassifierDummyChannelChild PClassifierDummyChannelChild;
    typedef mozilla::net::PClassifierDummyChannelParent PClassifierDummyChannelParent;
    typedef mozilla::net::PWebrtcTCPSocketChild PWebrtcTCPSocketChild;
    typedef mozilla::net::PWebrtcTCPSocketParent PWebrtcTCPSocketParent;
    typedef mozilla::net::PSocketProcessBridgeChild PSocketProcessBridgeChild;
    typedef mozilla::net::PSocketProcessBridgeParent PSocketProcessBridgeParent;
    typedef mozilla::net::PDocumentChannelChild PDocumentChannelChild;
    typedef mozilla::net::PDocumentChannelParent PDocumentChannelParent;
    typedef mozilla::net::PAltDataOutputStreamChild PAltDataOutputStreamChild;
    typedef mozilla::net::PAltDataOutputStreamParent PAltDataOutputStreamParent;

public:
    typedef MozPromise<RefPtr<nsIInputStream>, ResponseRejectReason, true> GetExtensionStreamPromise;
    typedef MozPromise<FileDescriptor, ResponseRejectReason, true> GetExtensionFDPromise;
    typedef MozPromise<Endpoint<mozilla::net::PSocketProcessBridgeChild>, ResponseRejectReason, true> InitSocketProcessBridgePromise;
    typedef MozPromise<bool, ResponseRejectReason, true> EnsureHSTSDataPromise;
    typedef MozPromise<RefPtr<nsIInputStream>, ResponseRejectReason, true> GetPageThumbStreamPromise;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPTransportProviderConstructor(PTransportProviderChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPTCPSocketConstructor(
            PTCPSocketChild* actor,
            const nsString& host,
            const uint16_t& port);
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PNeckoChild();

    virtual ~PNeckoChild();

public:
    PContentChild*
    Manager() const;

    void
    ManagedPHttpChannelChild(nsTArray<PHttpChannelChild*>& aArr) const;
    const ManagedContainer<PHttpChannelChild>&
    ManagedPHttpChannelChild() const;

    void
    ManagedPCookieServiceChild(nsTArray<PCookieServiceChild*>& aArr) const;
    const ManagedContainer<PCookieServiceChild>&
    ManagedPCookieServiceChild() const;

    void
    ManagedPFTPChannelChild(nsTArray<PFTPChannelChild*>& aArr) const;
    const ManagedContainer<PFTPChannelChild>&
    ManagedPFTPChannelChild() const;

    void
    ManagedPWebSocketChild(nsTArray<PWebSocketChild*>& aArr) const;
    const ManagedContainer<PWebSocketChild>&
    ManagedPWebSocketChild() const;

    void
    ManagedPWebSocketEventListenerChild(nsTArray<PWebSocketEventListenerChild*>& aArr) const;
    const ManagedContainer<PWebSocketEventListenerChild>&
    ManagedPWebSocketEventListenerChild() const;

    void
    ManagedPTCPSocketChild(nsTArray<PTCPSocketChild*>& aArr) const;
    const ManagedContainer<PTCPSocketChild>&
    ManagedPTCPSocketChild() const;

    void
    ManagedPTCPServerSocketChild(nsTArray<PTCPServerSocketChild*>& aArr) const;
    const ManagedContainer<PTCPServerSocketChild>&
    ManagedPTCPServerSocketChild() const;

    void
    ManagedPUDPSocketChild(nsTArray<PUDPSocketChild*>& aArr) const;
    const ManagedContainer<PUDPSocketChild>&
    ManagedPUDPSocketChild() const;

    void
    ManagedPDNSRequestChild(nsTArray<PDNSRequestChild*>& aArr) const;
    const ManagedContainer<PDNSRequestChild>&
    ManagedPDNSRequestChild() const;

    void
    ManagedPDataChannelChild(nsTArray<PDataChannelChild*>& aArr) const;
    const ManagedContainer<PDataChannelChild>&
    ManagedPDataChannelChild() const;

    void
    ManagedPGIOChannelChild(nsTArray<PGIOChannelChild*>& aArr) const;
    const ManagedContainer<PGIOChannelChild>&
    ManagedPGIOChannelChild() const;

    void
    ManagedPSimpleChannelChild(nsTArray<PSimpleChannelChild*>& aArr) const;
    const ManagedContainer<PSimpleChannelChild>&
    ManagedPSimpleChannelChild() const;

    void
    ManagedPFileChannelChild(nsTArray<PFileChannelChild*>& aArr) const;
    const ManagedContainer<PFileChannelChild>&
    ManagedPFileChannelChild() const;

    void
    ManagedPTransportProviderChild(nsTArray<PTransportProviderChild*>& aArr) const;
    const ManagedContainer<PTransportProviderChild>&
    ManagedPTransportProviderChild() const;

    void
    ManagedPAltDataOutputStreamChild(nsTArray<PAltDataOutputStreamChild*>& aArr) const;
    const ManagedContainer<PAltDataOutputStreamChild>&
    ManagedPAltDataOutputStreamChild() const;

    void
    ManagedPStunAddrsRequestChild(nsTArray<PStunAddrsRequestChild*>& aArr) const;
    const ManagedContainer<PStunAddrsRequestChild>&
    ManagedPStunAddrsRequestChild() const;

    void
    ManagedPClassifierDummyChannelChild(nsTArray<PClassifierDummyChannelChild*>& aArr) const;
    const ManagedContainer<PClassifierDummyChannelChild>&
    ManagedPClassifierDummyChannelChild() const;

    void
    ManagedPWebrtcTCPSocketChild(nsTArray<PWebrtcTCPSocketChild*>& aArr) const;
    const ManagedContainer<PWebrtcTCPSocketChild>&
    ManagedPWebrtcTCPSocketChild() const;

    void
    ManagedPDocumentChannelChild(nsTArray<PDocumentChannelChild*>& aArr) const;
    const ManagedContainer<PDocumentChannelChild>&
    ManagedPDocumentChannelChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PHttpChannelParent>
    OpenPHttpChannelEndpoint(PHttpChannelChild* aActor);
    bool
    BindPHttpChannelEndpoint(
            ManagedEndpoint<PHttpChannelChild> aEndpoint,
            PHttpChannelChild* aActor);

    ManagedEndpoint<PCookieServiceParent>
    OpenPCookieServiceEndpoint(PCookieServiceChild* aActor);
    bool
    BindPCookieServiceEndpoint(
            ManagedEndpoint<PCookieServiceChild> aEndpoint,
            PCookieServiceChild* aActor);

    ManagedEndpoint<PFTPChannelParent>
    OpenPFTPChannelEndpoint(PFTPChannelChild* aActor);
    bool
    BindPFTPChannelEndpoint(
            ManagedEndpoint<PFTPChannelChild> aEndpoint,
            PFTPChannelChild* aActor);

    ManagedEndpoint<PWebSocketParent>
    OpenPWebSocketEndpoint(PWebSocketChild* aActor);
    bool
    BindPWebSocketEndpoint(
            ManagedEndpoint<PWebSocketChild> aEndpoint,
            PWebSocketChild* aActor);

    ManagedEndpoint<PWebSocketEventListenerParent>
    OpenPWebSocketEventListenerEndpoint(PWebSocketEventListenerChild* aActor);
    bool
    BindPWebSocketEventListenerEndpoint(
            ManagedEndpoint<PWebSocketEventListenerChild> aEndpoint,
            PWebSocketEventListenerChild* aActor);

    ManagedEndpoint<PTCPSocketParent>
    OpenPTCPSocketEndpoint(PTCPSocketChild* aActor);
    bool
    BindPTCPSocketEndpoint(
            ManagedEndpoint<PTCPSocketChild> aEndpoint,
            PTCPSocketChild* aActor);

    ManagedEndpoint<PTCPServerSocketParent>
    OpenPTCPServerSocketEndpoint(PTCPServerSocketChild* aActor);
    bool
    BindPTCPServerSocketEndpoint(
            ManagedEndpoint<PTCPServerSocketChild> aEndpoint,
            PTCPServerSocketChild* aActor);

    ManagedEndpoint<PUDPSocketParent>
    OpenPUDPSocketEndpoint(PUDPSocketChild* aActor);
    bool
    BindPUDPSocketEndpoint(
            ManagedEndpoint<PUDPSocketChild> aEndpoint,
            PUDPSocketChild* aActor);

    ManagedEndpoint<PDNSRequestParent>
    OpenPDNSRequestEndpoint(PDNSRequestChild* aActor);
    bool
    BindPDNSRequestEndpoint(
            ManagedEndpoint<PDNSRequestChild> aEndpoint,
            PDNSRequestChild* aActor);

    ManagedEndpoint<PDataChannelParent>
    OpenPDataChannelEndpoint(PDataChannelChild* aActor);
    bool
    BindPDataChannelEndpoint(
            ManagedEndpoint<PDataChannelChild> aEndpoint,
            PDataChannelChild* aActor);

    ManagedEndpoint<PGIOChannelParent>
    OpenPGIOChannelEndpoint(PGIOChannelChild* aActor);
    bool
    BindPGIOChannelEndpoint(
            ManagedEndpoint<PGIOChannelChild> aEndpoint,
            PGIOChannelChild* aActor);

    ManagedEndpoint<PSimpleChannelParent>
    OpenPSimpleChannelEndpoint(PSimpleChannelChild* aActor);
    bool
    BindPSimpleChannelEndpoint(
            ManagedEndpoint<PSimpleChannelChild> aEndpoint,
            PSimpleChannelChild* aActor);

    ManagedEndpoint<PFileChannelParent>
    OpenPFileChannelEndpoint(PFileChannelChild* aActor);
    bool
    BindPFileChannelEndpoint(
            ManagedEndpoint<PFileChannelChild> aEndpoint,
            PFileChannelChild* aActor);

    ManagedEndpoint<PTransportProviderParent>
    OpenPTransportProviderEndpoint(PTransportProviderChild* aActor);
    bool
    BindPTransportProviderEndpoint(
            ManagedEndpoint<PTransportProviderChild> aEndpoint,
            PTransportProviderChild* aActor);

    ManagedEndpoint<PAltDataOutputStreamParent>
    OpenPAltDataOutputStreamEndpoint(PAltDataOutputStreamChild* aActor);
    bool
    BindPAltDataOutputStreamEndpoint(
            ManagedEndpoint<PAltDataOutputStreamChild> aEndpoint,
            PAltDataOutputStreamChild* aActor);

    ManagedEndpoint<PStunAddrsRequestParent>
    OpenPStunAddrsRequestEndpoint(PStunAddrsRequestChild* aActor);
    bool
    BindPStunAddrsRequestEndpoint(
            ManagedEndpoint<PStunAddrsRequestChild> aEndpoint,
            PStunAddrsRequestChild* aActor);

    ManagedEndpoint<PClassifierDummyChannelParent>
    OpenPClassifierDummyChannelEndpoint(PClassifierDummyChannelChild* aActor);
    bool
    BindPClassifierDummyChannelEndpoint(
            ManagedEndpoint<PClassifierDummyChannelChild> aEndpoint,
            PClassifierDummyChannelChild* aActor);

    ManagedEndpoint<PWebrtcTCPSocketParent>
    OpenPWebrtcTCPSocketEndpoint(PWebrtcTCPSocketChild* aActor);
    bool
    BindPWebrtcTCPSocketEndpoint(
            ManagedEndpoint<PWebrtcTCPSocketChild> aEndpoint,
            PWebrtcTCPSocketChild* aActor);

    ManagedEndpoint<PDocumentChannelParent>
    OpenPDocumentChannelEndpoint(PDocumentChannelChild* aActor);
    bool
    BindPDocumentChannelEndpoint(
            ManagedEndpoint<PDocumentChannelChild> aEndpoint,
            PDocumentChannelChild* aActor);

    static bool
    Send__delete__(PNeckoChild* actor);

    PCookieServiceChild*
    SendPCookieServiceConstructor();

    PCookieServiceChild*
    SendPCookieServiceConstructor(PCookieServiceChild* actor);

    PHttpChannelChild*
    SendPHttpChannelConstructor(
            PHttpChannelChild* actor,
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext,
            const HttpChannelCreationArgs& args);

    PFTPChannelChild*
    SendPFTPChannelConstructor(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext,
            const FTPChannelCreationArgs& args);

    PFTPChannelChild*
    SendPFTPChannelConstructor(
            PFTPChannelChild* actor,
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext,
            const FTPChannelCreationArgs& args);

    PWebSocketChild*
    SendPWebSocketConstructor(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext,
            const uint32_t& aSerialID);

    PWebSocketChild*
    SendPWebSocketConstructor(
            PWebSocketChild* actor,
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext,
            const uint32_t& aSerialID);

    PTCPServerSocketChild*
    SendPTCPServerSocketConstructor(
            const uint16_t& localPort,
            const uint16_t& backlog,
            const bool& useArrayBuffers);

    PTCPServerSocketChild*
    SendPTCPServerSocketConstructor(
            PTCPServerSocketChild* actor,
            const uint16_t& localPort,
            const uint16_t& backlog,
            const bool& useArrayBuffers);

    PUDPSocketChild*
    SendPUDPSocketConstructor(
            nsIPrincipal* principal,
            const nsCString& filter);

    PUDPSocketChild*
    SendPUDPSocketConstructor(
            PUDPSocketChild* actor,
            nsIPrincipal* principal,
            const nsCString& filter);

    PDNSRequestChild*
    SendPDNSRequestConstructor(
            PDNSRequestChild* actor,
            const nsCString& hostName,
            const nsCString& trrServer,
            const uint16_t& type,
            const OriginAttributes& originAttributes,
            const uint32_t& flags);

    PDocumentChannelChild*
    SendPDocumentChannelConstructor(
            PDocumentChannelChild* actor,
            const MaybeDiscardedBrowsingContext& browsingContext,
            const DocumentChannelCreationArgs& args);

    PWebSocketEventListenerChild*
    SendPWebSocketEventListenerConstructor(const uint64_t& aInnerWindowID);

    PWebSocketEventListenerChild*
    SendPWebSocketEventListenerConstructor(
            PWebSocketEventListenerChild* actor,
            const uint64_t& aInnerWindowID);

    bool
    SendPredPredict(
            nsIURI* targetURI,
            nsIURI* sourceURI,
            const uint32_t& reason,
            const OriginAttributes& originAttributes,
            const bool& hasVerifier);

    bool
    SendPredLearn(
            nsIURI* targetURI,
            nsIURI* sourceURI,
            const uint32_t& reason,
            const OriginAttributes& originAttributes);

    bool
    SendPredReset();

    bool
    SendSpeculativeConnect(
            nsIURI* uri,
            nsIPrincipal* principal,
            const bool& anonymous);

    bool
    SendHTMLDNSPrefetch(
            const nsString& hostname,
            const bool& isHttps,
            const OriginAttributes& originAttributes,
            const uint32_t& flags);

    bool
    SendCancelHTMLDNSPrefetch(
            const nsString& hostname,
            const bool& isHttps,
            const OriginAttributes& originAttributes,
            const uint32_t& flags,
            const nsresult& reason);

    PDataChannelChild*
    SendPDataChannelConstructor(
            PDataChannelChild* actor,
            const uint32_t& channelId);

    PGIOChannelChild*
    SendPGIOChannelConstructor(
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext,
            const GIOChannelCreationArgs& args);

    PGIOChannelChild*
    SendPGIOChannelConstructor(
            PGIOChannelChild* actor,
            PBrowserChild* browser,
            const SerializedLoadContext& loadContext,
            const GIOChannelCreationArgs& args);

    PSimpleChannelChild*
    SendPSimpleChannelConstructor(const uint32_t& channelId);

    PSimpleChannelChild*
    SendPSimpleChannelConstructor(
            PSimpleChannelChild* actor,
            const uint32_t& channelId);

    PFileChannelChild*
    SendPFileChannelConstructor(
            PFileChannelChild* actor,
            const uint32_t& channelId);

    PClassifierDummyChannelChild*
    SendPClassifierDummyChannelConstructor(
            nsIURI* uri,
            nsIURI* aTopWindowURI,
            const nsresult& aTopWindowURIResult,
            const mozilla::Maybe<LoadInfoArgs>& loadInfo);

    PClassifierDummyChannelChild*
    SendPClassifierDummyChannelConstructor(
            PClassifierDummyChannelChild* actor,
            nsIURI* uri,
            nsIURI* aTopWindowURI,
            const nsresult& aTopWindowURIResult,
            const mozilla::Maybe<LoadInfoArgs>& loadInfo);

    bool
    SendOnAuthAvailable(
            const uint64_t& callbackId,
            const nsString& user,
            const nsString& password,
            const nsString& domain);

    bool
    SendOnAuthCancelled(
            const uint64_t& callbackId,
            const bool& userCancel);

    bool
    SendRequestContextLoadBegin(const uint64_t& rcid);

    bool
    SendRequestContextAfterDOMContentLoaded(const uint64_t& rcid);

    bool
    SendRemoveRequestContext(const uint64_t& rcid);

    PAltDataOutputStreamChild*
    SendPAltDataOutputStreamConstructor(
            const nsCString& type,
            const int64_t& predictedSize,
            PHttpChannelChild* channel);

    PAltDataOutputStreamChild*
    SendPAltDataOutputStreamConstructor(
            PAltDataOutputStreamChild* actor,
            const nsCString& type,
            const int64_t& predictedSize,
            PHttpChannelChild* channel);

    PStunAddrsRequestChild*
    SendPStunAddrsRequestConstructor();

    PStunAddrsRequestChild*
    SendPStunAddrsRequestConstructor(PStunAddrsRequestChild* actor);

    PWebrtcTCPSocketChild*
    SendPWebrtcTCPSocketConstructor(const mozilla::Maybe<TabId>& tabId);

    PWebrtcTCPSocketChild*
    SendPWebrtcTCPSocketConstructor(
            PWebrtcTCPSocketChild* actor,
            const mozilla::Maybe<TabId>& tabId);

    void
    SendGetExtensionStream(
            nsIURI* uri,
            mozilla::ipc::ResolveCallback<RefPtr<nsIInputStream>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<GetExtensionStreamPromise>
    SendGetExtensionStream(nsIURI* uri);

    void
    SendGetExtensionFD(
            nsIURI* uri,
            mozilla::ipc::ResolveCallback<FileDescriptor>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<GetExtensionFDPromise>
    SendGetExtensionFD(nsIURI* uri);

    void
    SendInitSocketProcessBridge(
            mozilla::ipc::ResolveCallback<Endpoint<mozilla::net::PSocketProcessBridgeChild>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<InitSocketProcessBridgePromise>
    SendInitSocketProcessBridge();

    bool
    SendResetSocketProcessBridge();

    void
    SendEnsureHSTSData(
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<EnsureHSTSDataPromise>
    SendEnsureHSTSData();

    void
    SendGetPageThumbStream(
            nsIURI* uri,
            mozilla::ipc::ResolveCallback<RefPtr<nsIInputStream>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<GetPageThumbStreamPromise>
    SendGetPageThumbStream(nsIURI* uri);

    PTCPSocketChild*
    SendPTCPSocketConstructor(
            const nsString& host,
            const uint16_t& port);

    PTCPSocketChild*
    SendPTCPSocketConstructor(
            PTCPSocketChild* actor,
            const nsString& host,
            const uint16_t& port);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PHttpChannelChild> mManagedPHttpChannelChild;
    ManagedContainer<PCookieServiceChild> mManagedPCookieServiceChild;
    ManagedContainer<PFTPChannelChild> mManagedPFTPChannelChild;
    ManagedContainer<PWebSocketChild> mManagedPWebSocketChild;
    ManagedContainer<PWebSocketEventListenerChild> mManagedPWebSocketEventListenerChild;
    ManagedContainer<PTCPSocketChild> mManagedPTCPSocketChild;
    ManagedContainer<PTCPServerSocketChild> mManagedPTCPServerSocketChild;
    ManagedContainer<PUDPSocketChild> mManagedPUDPSocketChild;
    ManagedContainer<PDNSRequestChild> mManagedPDNSRequestChild;
    ManagedContainer<PDataChannelChild> mManagedPDataChannelChild;
    ManagedContainer<PGIOChannelChild> mManagedPGIOChannelChild;
    ManagedContainer<PSimpleChannelChild> mManagedPSimpleChannelChild;
    ManagedContainer<PFileChannelChild> mManagedPFileChannelChild;
    ManagedContainer<PTransportProviderChild> mManagedPTransportProviderChild;
    ManagedContainer<PAltDataOutputStreamChild> mManagedPAltDataOutputStreamChild;
    ManagedContainer<PStunAddrsRequestChild> mManagedPStunAddrsRequestChild;
    ManagedContainer<PClassifierDummyChannelChild> mManagedPClassifierDummyChannelChild;
    ManagedContainer<PWebrtcTCPSocketChild> mManagedPWebrtcTCPSocketChild;
    ManagedContainer<PDocumentChannelChild> mManagedPDocumentChannelChild;
};


} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::net::PNeckoChild*>
{
    typedef mozilla::net::PNeckoChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PNeckoChild_h
