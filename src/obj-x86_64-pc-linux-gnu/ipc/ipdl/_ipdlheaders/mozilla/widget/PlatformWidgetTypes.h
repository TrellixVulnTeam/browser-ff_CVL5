//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PlatformWidgetTypes_h
#define PlatformWidgetTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "Units.h"
#include "mozilla/widget/HeadlessWidgetTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GtkCompositorWidgetInitData|
//
namespace mozilla {
namespace widget {
class GtkCompositorWidgetInitData final
{
private:
    typedef mozilla::LayoutDeviceIntSize LayoutDeviceIntSize;

public:
    MOZ_IMPLICIT GtkCompositorWidgetInitData() :
        XWindow_(),
        XDisplayString_(),
        Shaped_(),
        IsX11Display_(),
        InitialClientSize_()
    {
    }

    MOZ_IMPLICIT GtkCompositorWidgetInitData(
            const uintptr_t& _XWindow,
            const nsCString& _XDisplayString,
            const bool& _Shaped,
            const bool& _IsX11Display,
            const LayoutDeviceIntSize& _InitialClientSize) :
        XWindow_(_XWindow),
        XDisplayString_(_XDisplayString),
        Shaped_(_Shaped),
        IsX11Display_(_IsX11Display),
        InitialClientSize_(_InitialClientSize)
    {
    }

    uintptr_t&
    XWindow()
    {
        return XWindow_;
    }
    const uintptr_t&
    XWindow() const
    {
        return XWindow_;
    }

    nsCString&
    XDisplayString()
    {
        return XDisplayString_;
    }
    const nsCString&
    XDisplayString() const
    {
        return XDisplayString_;
    }

    bool&
    Shaped()
    {
        return Shaped_;
    }
    const bool&
    Shaped() const
    {
        return Shaped_;
    }

    bool&
    IsX11Display()
    {
        return IsX11Display_;
    }
    const bool&
    IsX11Display() const
    {
        return IsX11Display_;
    }

    LayoutDeviceIntSize&
    InitialClientSize()
    {
        return InitialClientSize_;
    }
    const LayoutDeviceIntSize&
    InitialClientSize() const
    {
        return InitialClientSize_;
    }

private:
    uintptr_t XWindow_;
    nsCString XDisplayString_;
    bool Shaped_;
    bool IsX11Display_;
    LayoutDeviceIntSize InitialClientSize_;
};
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::widget::GtkCompositorWidgetInitData>
{
    typedef mozilla::widget::GtkCompositorWidgetInitData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union CompositorWidgetInitData|
//
namespace mozilla {
namespace widget {
class CompositorWidgetInitData final
{
public:
    enum Type {
        T__None,
        TGtkCompositorWidgetInitData = 1,
        THeadlessCompositorWidgetInitData,
        T__Last = THeadlessCompositorWidgetInitData
    };

private:
    typedef mozilla::widget::GtkCompositorWidgetInitData GtkCompositorWidgetInitData;
    typedef mozilla::widget::HeadlessCompositorWidgetInitData HeadlessCompositorWidgetInitData;
    typedef GtkCompositorWidgetInitData GtkCompositorWidgetInitData__tdef;
    typedef HeadlessCompositorWidgetInitData HeadlessCompositorWidgetInitData__tdef;

    union Value {
        mozilla::AlignedStorage2<GtkCompositorWidgetInitData> VGtkCompositorWidgetInitData;
        mozilla::AlignedStorage2<HeadlessCompositorWidgetInitData> VHeadlessCompositorWidgetInitData;
    };

    GtkCompositorWidgetInitData*
    ptr_GtkCompositorWidgetInitData()
    {
        return ((mValue).VGtkCompositorWidgetInitData).addr();
    }
    const GtkCompositorWidgetInitData*
    constptr_GtkCompositorWidgetInitData() const
    {
        return ((mValue).VGtkCompositorWidgetInitData).addr();
    }
    HeadlessCompositorWidgetInitData*
    ptr_HeadlessCompositorWidgetInitData()
    {
        return ((mValue).VHeadlessCompositorWidgetInitData).addr();
    }
    const HeadlessCompositorWidgetInitData*
    constptr_HeadlessCompositorWidgetInitData() const
    {
        return ((mValue).VHeadlessCompositorWidgetInitData).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT CompositorWidgetInitData() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT CompositorWidgetInitData(const GtkCompositorWidgetInitData& aOther);

    MOZ_IMPLICIT CompositorWidgetInitData(GtkCompositorWidgetInitData&& aOther);

    MOZ_IMPLICIT CompositorWidgetInitData(const HeadlessCompositorWidgetInitData& aOther);

    MOZ_IMPLICIT CompositorWidgetInitData(HeadlessCompositorWidgetInitData&& aOther);

    MOZ_IMPLICIT CompositorWidgetInitData(const CompositorWidgetInitData& aOther);

    MOZ_IMPLICIT CompositorWidgetInitData(CompositorWidgetInitData&& aOther);

    ~CompositorWidgetInitData();

    Type
    type() const
    {
        return mType;
    }

    CompositorWidgetInitData&
    operator=(const GtkCompositorWidgetInitData& aRhs);

    CompositorWidgetInitData&
    operator=(GtkCompositorWidgetInitData&& aRhs);

    CompositorWidgetInitData&
    operator=(const HeadlessCompositorWidgetInitData& aRhs);

    CompositorWidgetInitData&
    operator=(HeadlessCompositorWidgetInitData&& aRhs);

    CompositorWidgetInitData&
    operator=(const CompositorWidgetInitData& aRhs);

    CompositorWidgetInitData&
    operator=(CompositorWidgetInitData&& aRhs);

    GtkCompositorWidgetInitData&
    get_GtkCompositorWidgetInitData()
    {
        AssertSanity(TGtkCompositorWidgetInitData);
        return (*(ptr_GtkCompositorWidgetInitData()));
    }
    const GtkCompositorWidgetInitData&
    get_GtkCompositorWidgetInitData() const
    {
        AssertSanity(TGtkCompositorWidgetInitData);
        return (*(constptr_GtkCompositorWidgetInitData()));
    }
    operator GtkCompositorWidgetInitData&()
    {
        return get_GtkCompositorWidgetInitData();
    }
    operator const GtkCompositorWidgetInitData&() const
    {
        return get_GtkCompositorWidgetInitData();
    }

    HeadlessCompositorWidgetInitData&
    get_HeadlessCompositorWidgetInitData()
    {
        AssertSanity(THeadlessCompositorWidgetInitData);
        return (*(ptr_HeadlessCompositorWidgetInitData()));
    }
    const HeadlessCompositorWidgetInitData&
    get_HeadlessCompositorWidgetInitData() const
    {
        AssertSanity(THeadlessCompositorWidgetInitData);
        return (*(constptr_HeadlessCompositorWidgetInitData()));
    }
    operator HeadlessCompositorWidgetInitData&()
    {
        return get_HeadlessCompositorWidgetInitData();
    }
    operator const HeadlessCompositorWidgetInitData&() const
    {
        return get_HeadlessCompositorWidgetInitData();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::widget::CompositorWidgetInitData>
{
    typedef mozilla::widget::CompositorWidgetInitData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PlatformWidgetTypes_h
