//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCompositorWidget_h
#define PCompositorWidget_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace widget {
class PCompositorWidgetParent;
} // namespace widget
} // namespace mozilla
namespace mozilla {
namespace widget {
class PCompositorWidgetChild;
} // namespace widget
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PCompositorWidgetChild and PCompositorWidgetParent
//
namespace mozilla {
namespace widget {
namespace PCompositorWidget {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::widget::PCompositorWidgetParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::widget::PCompositorWidgetChild>* aChild);

enum MessageType {
    PCompositorWidgetStart = PCompositorWidgetMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_NotifyClientSizeChanged__ID,
    Msg_ObserveVsync__ID,
    Msg_UnobserveVsync__ID,
    PCompositorWidgetEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_NotifyClientSizeChanged(int32_t routingId);

IPC::Message*
Msg_ObserveVsync(int32_t routingId);

IPC::Message*
Msg_UnobserveVsync(int32_t routingId);



} // namespace PCompositorWidget
} // namespace widget
} // namespace mozilla

#endif // ifndef PCompositorWidget_h
