//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPVideoEncoder_h
#define PGMPVideoEncoder_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/gmp/GMPTypes.h"

namespace mozilla {
namespace gmp {
class PGMPVideoEncoderParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPVideoEncoderChild;
} // namespace gmp
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PGMPVideoEncoderChild and PGMPVideoEncoderParent
//
namespace mozilla {
namespace gmp {
namespace PGMPVideoEncoder {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPVideoEncoderParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPVideoEncoderChild>* aChild);

enum MessageType {
    PGMPVideoEncoderStart = PGMPVideoEncoderMsgStart << 16,
    Msg_InitEncode__ID,
    Msg_Encode__ID,
    Msg_SetChannelParameters__ID,
    Msg_SetRates__ID,
    Msg_SetPeriodicKeyFrames__ID,
    Msg_EncodingComplete__ID,
    Msg_ChildShmemForPool__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Encoded__ID,
    Msg_Error__ID,
    Msg_Shutdown__ID,
    Msg_ParentShmemForPool__ID,
    Msg_NeedShmem__ID,
    Reply_NeedShmem__ID,
    PGMPVideoEncoderEnd
};

IPC::Message*
Msg_InitEncode(int32_t routingId);

IPC::Message*
Msg_Encode(int32_t routingId);

IPC::Message*
Msg_SetChannelParameters(int32_t routingId);

IPC::Message*
Msg_SetRates(int32_t routingId);

IPC::Message*
Msg_SetPeriodicKeyFrames(int32_t routingId);

IPC::Message*
Msg_EncodingComplete(int32_t routingId);

IPC::Message*
Msg_ChildShmemForPool(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Encoded(int32_t routingId);

IPC::Message*
Msg_Error(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_ParentShmemForPool(int32_t routingId);

IPC::Message*
Msg_NeedShmem(int32_t routingId);
IPC::Message*
Reply_NeedShmem(int32_t routingId);



} // namespace PGMPVideoEncoder
} // namespace gmp
} // namespace mozilla

#endif // ifndef PGMPVideoEncoder_h
