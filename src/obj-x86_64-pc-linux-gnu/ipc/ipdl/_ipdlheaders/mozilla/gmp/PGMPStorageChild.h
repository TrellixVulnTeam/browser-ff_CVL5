//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPStorageChild_h
#define PGMPStorageChild_h

#include "mozilla/gmp/PGMPStorage.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "gmp-errors.h"

namespace mozilla {
namespace gmp {
class PGMPChild;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {


class PGMPStorageChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::gmp::PGMPChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::gmp::CDMInputBuffer CDMInputBuffer;
    typedef mozilla::gmp::CDMKeyInformation CDMKeyInformation;
    typedef mozilla::gmp::CDMVideoDecoderConfig CDMVideoDecoderConfig;
    typedef mozilla::gmp::CDMVideoFrame CDMVideoFrame;
    typedef mozilla::gmp::CDMVideoPlane CDMVideoPlane;
    typedef cdm::EncryptionScheme EncryptionScheme;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::gmp::GMPPlaneData GMPPlaneData;
    typedef mozilla::gmp::GMPVideoEncodedFrameData GMPVideoEncodedFrameData;
    typedef mozilla::gmp::GMPVideoi420FrameData GMPVideoi420FrameData;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::gmp::NodeIdParts NodeIdParts;
    typedef mozilla::gmp::NodeIdVariant NodeIdVariant;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::gmp::PGMPChild PGMPChild;
    typedef mozilla::gmp::PGMPParent PGMPParent;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PGMPStorageChild();

    virtual ~PGMPStorageChild();

public:
    PGMPChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendOpen(const nsCString& aRecordName);

    bool
    SendRead(const nsCString& aRecordName);

    bool
    SendWrite(
            const nsCString& aRecordName,
            const nsTArray<uint8_t>& aBytes);

    bool
    SendClose(const nsCString& aRecordName);

    static bool
    Send__delete__(PGMPStorageChild* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::PGMPStorageChild*>
{
    typedef mozilla::gmp::PGMPStorageChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PGMPStorageChild_h
