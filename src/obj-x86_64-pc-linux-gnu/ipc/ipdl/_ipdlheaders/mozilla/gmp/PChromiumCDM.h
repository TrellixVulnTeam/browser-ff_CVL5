//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PChromiumCDM_h
#define PChromiumCDM_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/gmp/GMPTypes.h"

namespace mozilla {
namespace gmp {
class PChromiumCDMParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PChromiumCDMChild;
} // namespace gmp
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PChromiumCDMChild and PChromiumCDMParent
//
namespace mozilla {
namespace gmp {
namespace PChromiumCDM {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gmp::PChromiumCDMParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gmp::PChromiumCDMChild>* aChild);

enum MessageType {
    PChromiumCDMStart = PChromiumCDMMsgStart << 16,
    Msg_Init__ID,
    Reply_Init__ID,
    Msg_GetStatusForPolicy__ID,
    Msg_SetServerCertificate__ID,
    Msg_CreateSessionAndGenerateRequest__ID,
    Msg_LoadSession__ID,
    Msg_UpdateSession__ID,
    Msg_CloseSession__ID,
    Msg_RemoveSession__ID,
    Msg_Decrypt__ID,
    Msg_InitializeVideoDecoder__ID,
    Msg_DeinitializeVideoDecoder__ID,
    Msg_ResetVideoDecoder__ID,
    Msg_DecryptAndDecodeFrame__ID,
    Msg_Drain__ID,
    Msg_Destroy__ID,
    Msg_GiveBuffer__ID,
    Msg_PurgeShmems__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_OnResolvePromiseWithKeyStatus__ID,
    Msg_OnResolveNewSessionPromise__ID,
    Msg_OnResolvePromise__ID,
    Msg_OnRejectPromise__ID,
    Msg_OnSessionMessage__ID,
    Msg_OnSessionKeysChange__ID,
    Msg_OnExpirationChange__ID,
    Msg_OnSessionClosed__ID,
    Msg_ResolveLoadSessionPromise__ID,
    Msg_Decrypted__ID,
    Msg_DecryptFailed__ID,
    Msg_OnDecoderInitDone__ID,
    Msg_DecodedShmem__ID,
    Msg_DecodedData__ID,
    Msg_DecodeFailed__ID,
    Msg_ResetVideoDecoderComplete__ID,
    Msg_DrainComplete__ID,
    Msg_Shutdown__ID,
    Msg_IncreaseShmemPoolSize__ID,
    PChromiumCDMEnd
};

IPC::Message*
Msg_Init(int32_t routingId);
IPC::Message*
Reply_Init(int32_t routingId);

IPC::Message*
Msg_GetStatusForPolicy(int32_t routingId);

IPC::Message*
Msg_SetServerCertificate(int32_t routingId);

IPC::Message*
Msg_CreateSessionAndGenerateRequest(int32_t routingId);

IPC::Message*
Msg_LoadSession(int32_t routingId);

IPC::Message*
Msg_UpdateSession(int32_t routingId);

IPC::Message*
Msg_CloseSession(int32_t routingId);

IPC::Message*
Msg_RemoveSession(int32_t routingId);

IPC::Message*
Msg_Decrypt(int32_t routingId);

IPC::Message*
Msg_InitializeVideoDecoder(int32_t routingId);

IPC::Message*
Msg_DeinitializeVideoDecoder(int32_t routingId);

IPC::Message*
Msg_ResetVideoDecoder(int32_t routingId);

IPC::Message*
Msg_DecryptAndDecodeFrame(int32_t routingId);

IPC::Message*
Msg_Drain(int32_t routingId);

IPC::Message*
Msg_Destroy(int32_t routingId);

IPC::Message*
Msg_GiveBuffer(int32_t routingId);

IPC::Message*
Msg_PurgeShmems(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_OnResolvePromiseWithKeyStatus(int32_t routingId);

IPC::Message*
Msg_OnResolveNewSessionPromise(int32_t routingId);

IPC::Message*
Msg_OnResolvePromise(int32_t routingId);

IPC::Message*
Msg_OnRejectPromise(int32_t routingId);

IPC::Message*
Msg_OnSessionMessage(int32_t routingId);

IPC::Message*
Msg_OnSessionKeysChange(int32_t routingId);

IPC::Message*
Msg_OnExpirationChange(int32_t routingId);

IPC::Message*
Msg_OnSessionClosed(int32_t routingId);

IPC::Message*
Msg_ResolveLoadSessionPromise(int32_t routingId);

IPC::Message*
Msg_Decrypted(int32_t routingId);

IPC::Message*
Msg_DecryptFailed(int32_t routingId);

IPC::Message*
Msg_OnDecoderInitDone(int32_t routingId);

IPC::Message*
Msg_DecodedShmem(int32_t routingId);

IPC::Message*
Msg_DecodedData(int32_t routingId);

IPC::Message*
Msg_DecodeFailed(int32_t routingId);

IPC::Message*
Msg_ResetVideoDecoderComplete(int32_t routingId);

IPC::Message*
Msg_DrainComplete(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_IncreaseShmemPoolSize(int32_t routingId);



} // namespace PChromiumCDM
} // namespace gmp
} // namespace mozilla

#endif // ifndef PChromiumCDM_h
