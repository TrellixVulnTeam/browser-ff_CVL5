//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPVideoDecoderParent_h
#define PGMPVideoDecoderParent_h

#include "mozilla/gmp/PGMPVideoDecoder.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "gmp-errors.h"
#include "gmp-video-codec.h"

namespace mozilla {
namespace gmp {
class PGMPContentParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPContentChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPContentParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {


class PGMPVideoDecoderParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::gmp::PGMPContentParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::gmp::CDMInputBuffer CDMInputBuffer;
    typedef mozilla::gmp::CDMKeyInformation CDMKeyInformation;
    typedef mozilla::gmp::CDMVideoDecoderConfig CDMVideoDecoderConfig;
    typedef mozilla::gmp::CDMVideoFrame CDMVideoFrame;
    typedef mozilla::gmp::CDMVideoPlane CDMVideoPlane;
    typedef cdm::EncryptionScheme EncryptionScheme;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::gmp::GMPPlaneData GMPPlaneData;
    typedef mozilla::gmp::GMPVideoEncodedFrameData GMPVideoEncodedFrameData;
    typedef mozilla::gmp::GMPVideoi420FrameData GMPVideoi420FrameData;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::gmp::NodeIdParts NodeIdParts;
    typedef mozilla::gmp::NodeIdVariant NodeIdVariant;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::gmp::PGMPContentParent PGMPContentParent;
    typedef mozilla::gmp::PGMPContentChild PGMPContentChild;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvDecoded(const GMPVideoi420FrameData& aDecodedFrame) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReceivedDecodedReferenceFrame(const uint64_t& aPictureId) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReceivedDecodedFrame(const uint64_t& aPictureId) = 0;
    virtual mozilla::ipc::IPCResult
    RecvInputDataExhausted() = 0;
    virtual mozilla::ipc::IPCResult
    RecvDrainComplete() = 0;
    virtual mozilla::ipc::IPCResult
    RecvResetComplete() = 0;
    virtual mozilla::ipc::IPCResult
    RecvError(const GMPErr& aErr) = 0;
    virtual mozilla::ipc::IPCResult
    RecvShutdown() = 0;
    virtual mozilla::ipc::IPCResult
    RecvParentShmemForPool(Shmem&& aEncodedBuffer) = 0;
    virtual mozilla::ipc::IPCResult
    AnswerNeedShmem(
            const uint32_t& aFrameBufferSize,
            Shmem* aMem) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PGMPVideoDecoderParent();

    virtual ~PGMPVideoDecoderParent();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PGMPContentParent*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendInitDecode(
            const GMPVideoCodec& aCodecSettings,
            const nsTArray<uint8_t>& aCodecSpecific,
            const int32_t& aCoreCount);

    [[nodiscard]] bool
    SendDecode(
            const GMPVideoEncodedFrameData& aInputFrame,
            const bool& aMissingFrames,
            const nsTArray<uint8_t>& aCodecSpecificInfo,
            const int64_t& aRenderTimeMs);

    [[nodiscard]] bool
    SendReset();

    [[nodiscard]] bool
    SendDrain();

    [[nodiscard]] bool
    SendDecodingComplete();

    [[nodiscard]] bool
    SendChildShmemForPool(Shmem&& aFrameBuffer);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::PGMPVideoDecoderParent*>
{
    typedef mozilla::gmp::PGMPVideoDecoderParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PGMPVideoDecoderParent_h
