//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPContentParent_h
#define PGMPContentParent_h

#include "mozilla/gmp/PGMPContent.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
class nsIFile;

namespace mozilla {
namespace gmp {
class PGMPVideoDecoderParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPVideoDecoderChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPVideoEncoderParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPVideoEncoderChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PChromiumCDMParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PChromiumCDMChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPVideoEncoderParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PChromiumCDMParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPVideoDecoderParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {


class PGMPContentParent :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::gmp::PGMPVideoEncoderParent;
    friend class mozilla::gmp::PChromiumCDMParent;
    friend class mozilla::gmp::PGMPVideoDecoderParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::gmp::PGMPVideoDecoderParent PGMPVideoDecoderParent;
    typedef mozilla::gmp::PGMPVideoDecoderChild PGMPVideoDecoderChild;
    typedef mozilla::gmp::PGMPVideoEncoderParent PGMPVideoEncoderParent;
    typedef mozilla::gmp::PGMPVideoEncoderChild PGMPVideoEncoderChild;
    typedef mozilla::gmp::PChromiumCDMParent PChromiumCDMParent;
    typedef mozilla::gmp::PChromiumCDMChild PChromiumCDMChild;

protected:
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PGMPContentParent();

    virtual ~PGMPContentParent();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    void
    ManagedPGMPVideoDecoderParent(nsTArray<PGMPVideoDecoderParent*>& aArr) const;
    const ManagedContainer<PGMPVideoDecoderParent>&
    ManagedPGMPVideoDecoderParent() const;

    void
    ManagedPGMPVideoEncoderParent(nsTArray<PGMPVideoEncoderParent*>& aArr) const;
    const ManagedContainer<PGMPVideoEncoderParent>&
    ManagedPGMPVideoEncoderParent() const;

    void
    ManagedPChromiumCDMParent(nsTArray<PChromiumCDMParent*>& aArr) const;
    const ManagedContainer<PChromiumCDMParent>&
    ManagedPChromiumCDMParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PGMPVideoDecoderChild>
    OpenPGMPVideoDecoderEndpoint(PGMPVideoDecoderParent* aActor);
    bool
    BindPGMPVideoDecoderEndpoint(
            ManagedEndpoint<PGMPVideoDecoderParent> aEndpoint,
            PGMPVideoDecoderParent* aActor);

    ManagedEndpoint<PGMPVideoEncoderChild>
    OpenPGMPVideoEncoderEndpoint(PGMPVideoEncoderParent* aActor);
    bool
    BindPGMPVideoEncoderEndpoint(
            ManagedEndpoint<PGMPVideoEncoderParent> aEndpoint,
            PGMPVideoEncoderParent* aActor);

    ManagedEndpoint<PChromiumCDMChild>
    OpenPChromiumCDMEndpoint(PChromiumCDMParent* aActor);
    bool
    BindPChromiumCDMEndpoint(
            ManagedEndpoint<PChromiumCDMParent> aEndpoint,
            PChromiumCDMParent* aActor);

    [[nodiscard]] PGMPVideoDecoderParent*
    SendPGMPVideoDecoderConstructor(
            PGMPVideoDecoderParent* actor,
            const uint32_t& aDecryptorId);

    [[nodiscard]] PGMPVideoEncoderParent*
    SendPGMPVideoEncoderConstructor(PGMPVideoEncoderParent* actor);

    [[nodiscard]] PChromiumCDMParent*
    SendPChromiumCDMConstructor(PChromiumCDMParent* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

    void
    ProcessNativeEventsInInterruptCall();

private:
    void
    ClearSubtree();

    ManagedContainer<PGMPVideoDecoderParent> mManagedPGMPVideoDecoderParent;
    ManagedContainer<PGMPVideoEncoderParent> mManagedPGMPVideoEncoderParent;
    ManagedContainer<PChromiumCDMParent> mManagedPChromiumCDMParent;
};


} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::PGMPContentParent*>
{
    typedef mozilla::gmp::PGMPContentParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PGMPContentParent_h
