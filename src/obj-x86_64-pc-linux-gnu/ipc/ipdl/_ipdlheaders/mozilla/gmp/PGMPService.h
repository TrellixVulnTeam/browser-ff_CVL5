//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPService_h
#define PGMPService_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/gmp/GMPTypes.h"

namespace mozilla {
namespace gmp {
class PGMPServiceParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPServiceChild;
} // namespace gmp
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PGMPServiceChild and PGMPServiceParent
//
namespace mozilla {
namespace gmp {
namespace PGMPService {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPServiceParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPServiceChild>* aChild);

enum MessageType {
    PGMPServiceStart = PGMPServiceMsgStart << 16,
    Msg_LaunchGMP__ID,
    Reply_LaunchGMP__ID,
    Msg_GetGMPNodeId__ID,
    Reply_GetGMPNodeId__ID,
    Msg_BeginShutdown__ID,
    PGMPServiceEnd
};

IPC::Message*
Msg_LaunchGMP(int32_t routingId);
IPC::Message*
Reply_LaunchGMP(int32_t routingId);

IPC::Message*
Msg_GetGMPNodeId(int32_t routingId);
IPC::Message*
Reply_GetGMPNodeId(int32_t routingId);

IPC::Message*
Msg_BeginShutdown(int32_t routingId);



} // namespace PGMPService
} // namespace gmp
} // namespace mozilla

#endif // ifndef PGMPService_h
