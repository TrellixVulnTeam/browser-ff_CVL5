//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPParent_h
#define PGMPParent_h

#include "mozilla/gmp/PGMP.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
class nsIFile;

// Headers for things that cannot be forward declared
#include "mozilla/dom/NativeThreadId.h"

namespace mozilla {
namespace gmp {
class PGMPContentParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPContentChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPTimerParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPTimerChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPStorageParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPStorageChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPTimerParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPStorageParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {


class PGMPParent :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::gmp::PGMPTimerParent;
    friend class mozilla::gmp::PGMPStorageParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::gmp::PGMPContentParent PGMPContentParent;
    typedef mozilla::gmp::PGMPContentChild PGMPContentChild;
    typedef mozilla::gmp::PGMPTimerParent PGMPTimerParent;
    typedef mozilla::gmp::PGMPTimerChild PGMPTimerChild;
    typedef mozilla::gmp::PGMPStorageParent PGMPStorageParent;
    typedef mozilla::gmp::PGMPStorageChild PGMPStorageChild;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPGMPTimerConstructor(PGMPTimerParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPGMPStorageConstructor(PGMPStorageParent* actor);
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PGMPParent();

    virtual ~PGMPParent();

public:
    void
    ManagedPGMPTimerParent(nsTArray<PGMPTimerParent*>& aArr) const;
    const ManagedContainer<PGMPTimerParent>&
    ManagedPGMPTimerParent() const;

    void
    ManagedPGMPStorageParent(nsTArray<PGMPStorageParent*>& aArr) const;
    const ManagedContainer<PGMPStorageParent>&
    ManagedPGMPStorageParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PGMPTimerChild>
    OpenPGMPTimerEndpoint(PGMPTimerParent* aActor);
    bool
    BindPGMPTimerEndpoint(
            ManagedEndpoint<PGMPTimerParent> aEndpoint,
            PGMPTimerParent* aActor);

    ManagedEndpoint<PGMPStorageChild>
    OpenPGMPStorageEndpoint(PGMPStorageParent* aActor);
    bool
    BindPGMPStorageEndpoint(
            ManagedEndpoint<PGMPStorageParent> aEndpoint,
            PGMPStorageParent* aActor);

    [[nodiscard]] bool
    SendCrashPluginNow();

    [[nodiscard]] bool
    CallStartPlugin(const nsString& adapter);

    [[nodiscard]] bool
    SendProvideStorageId(const nsCString& storageId);

    [[nodiscard]] bool
    SendPreloadLibs(const nsCString& libs);

    [[nodiscard]] bool
    SendCloseActive();

    [[nodiscard]] bool
    SendInitGMPContentChild(Endpoint<mozilla::gmp::PGMPContentChild>&& endpoint);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

    void
    ProcessNativeEventsInInterruptCall();

private:
    void
    ClearSubtree();

    ManagedContainer<PGMPTimerParent> mManagedPGMPTimerParent;
    ManagedContainer<PGMPStorageParent> mManagedPGMPStorageParent;
};


} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::PGMPParent*>
{
    typedef mozilla::gmp::PGMPParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PGMPParent_h
