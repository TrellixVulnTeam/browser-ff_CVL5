//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPChild_h
#define PGMPChild_h

#include "mozilla/gmp/PGMP.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/dom/NativeThreadId.h"

namespace mozilla {
namespace gmp {
class PGMPContentChild;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPContentParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPTimerChild;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPTimerParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPStorageChild;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPStorageParent;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPTimerChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {
class PGMPStorageChild;
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace gmp {


class PGMPChild :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::gmp::PGMPTimerChild;
    friend class mozilla::gmp::PGMPStorageChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::gmp::PGMPContentChild PGMPContentChild;
    typedef mozilla::gmp::PGMPContentParent PGMPContentParent;
    typedef mozilla::gmp::PGMPTimerChild PGMPTimerChild;
    typedef mozilla::gmp::PGMPTimerParent PGMPTimerParent;
    typedef mozilla::gmp::PGMPStorageChild PGMPStorageChild;
    typedef mozilla::gmp::PGMPStorageParent PGMPStorageParent;

protected:
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PGMPChild();

    virtual ~PGMPChild();

public:
    void
    ManagedPGMPTimerChild(nsTArray<PGMPTimerChild*>& aArr) const;
    const ManagedContainer<PGMPTimerChild>&
    ManagedPGMPTimerChild() const;

    void
    ManagedPGMPStorageChild(nsTArray<PGMPStorageChild*>& aArr) const;
    const ManagedContainer<PGMPStorageChild>&
    ManagedPGMPStorageChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PGMPTimerParent>
    OpenPGMPTimerEndpoint(PGMPTimerChild* aActor);
    bool
    BindPGMPTimerEndpoint(
            ManagedEndpoint<PGMPTimerChild> aEndpoint,
            PGMPTimerChild* aActor);

    ManagedEndpoint<PGMPStorageParent>
    OpenPGMPStorageEndpoint(PGMPStorageChild* aActor);
    bool
    BindPGMPStorageEndpoint(
            ManagedEndpoint<PGMPStorageChild> aEndpoint,
            PGMPStorageChild* aActor);

    bool
    SendInitCrashReporter(const NativeThreadId& threadId);

    PGMPTimerChild*
    SendPGMPTimerConstructor();

    PGMPTimerChild*
    SendPGMPTimerConstructor(PGMPTimerChild* actor);

    PGMPStorageChild*
    SendPGMPStorageConstructor();

    PGMPStorageChild*
    SendPGMPStorageConstructor(PGMPStorageChild* actor);

    bool
    SendPGMPContentChildDestroyed();

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

    void
    ProcessNativeEventsInInterruptCall();

private:
    void
    ClearSubtree();

    ManagedContainer<PGMPTimerChild> mManagedPGMPTimerChild;
    ManagedContainer<PGMPStorageChild> mManagedPGMPStorageChild;
};


} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::PGMPChild*>
{
    typedef mozilla::gmp::PGMPChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PGMPChild_h
