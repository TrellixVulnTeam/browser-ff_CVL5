//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef GMPTypes_h
#define GMPTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "gmp-sanitized-cdm-exports.h"
#include "gmp-video-codec.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct NodeIdParts|
//
namespace mozilla {
namespace gmp {
class NodeIdParts final
{
private:

public:
    MOZ_IMPLICIT NodeIdParts() :
        mOrigin_(),
        mTopLevelOrigin_(),
        mGMPName_()
    {
    }

    MOZ_IMPLICIT NodeIdParts(
            const nsString& _mOrigin,
            const nsString& _mTopLevelOrigin,
            const nsString& _mGMPName) :
        mOrigin_(_mOrigin),
        mTopLevelOrigin_(_mTopLevelOrigin),
        mGMPName_(_mGMPName)
    {
    }

    nsString&
    mOrigin()
    {
        return mOrigin_;
    }
    const nsString&
    mOrigin() const
    {
        return mOrigin_;
    }

    nsString&
    mTopLevelOrigin()
    {
        return mTopLevelOrigin_;
    }
    const nsString&
    mTopLevelOrigin() const
    {
        return mTopLevelOrigin_;
    }

    nsString&
    mGMPName()
    {
        return mGMPName_;
    }
    const nsString&
    mGMPName() const
    {
        return mGMPName_;
    }

private:
    nsString mOrigin_;
    nsString mTopLevelOrigin_;
    nsString mGMPName_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::NodeIdParts>
{
    typedef mozilla::gmp::NodeIdParts paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union NodeIdVariant|
//
namespace mozilla {
namespace gmp {
class NodeIdVariant final
{
public:
    enum Type {
        T__None,
        TnsCString = 1,
        TNodeIdParts,
        T__Last = TNodeIdParts
    };

private:
    typedef mozilla::gmp::NodeIdParts NodeIdParts;
    typedef nsCString nsCString__tdef;
    typedef NodeIdParts NodeIdParts__tdef;

    union Value {
        mozilla::AlignedStorage2<nsCString> VnsCString;
        mozilla::AlignedStorage2<NodeIdParts> VNodeIdParts;
    };

    nsCString*
    ptr_nsCString()
    {
        return ((mValue).VnsCString).addr();
    }
    const nsCString*
    constptr_nsCString() const
    {
        return ((mValue).VnsCString).addr();
    }
    NodeIdParts*
    ptr_NodeIdParts()
    {
        return ((mValue).VNodeIdParts).addr();
    }
    const NodeIdParts*
    constptr_NodeIdParts() const
    {
        return ((mValue).VNodeIdParts).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT NodeIdVariant() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT NodeIdVariant(const nsCString& aOther);

    MOZ_IMPLICIT NodeIdVariant(nsCString&& aOther);

    MOZ_IMPLICIT NodeIdVariant(const NodeIdParts& aOther);

    MOZ_IMPLICIT NodeIdVariant(NodeIdParts&& aOther);

    MOZ_IMPLICIT NodeIdVariant(const NodeIdVariant& aOther);

    MOZ_IMPLICIT NodeIdVariant(NodeIdVariant&& aOther);

    ~NodeIdVariant();

    Type
    type() const
    {
        return mType;
    }

    NodeIdVariant&
    operator=(const nsCString& aRhs);

    NodeIdVariant&
    operator=(nsCString&& aRhs);

    NodeIdVariant&
    operator=(const NodeIdParts& aRhs);

    NodeIdVariant&
    operator=(NodeIdParts&& aRhs);

    NodeIdVariant&
    operator=(const NodeIdVariant& aRhs);

    NodeIdVariant&
    operator=(NodeIdVariant&& aRhs);

    nsCString&
    get_nsCString()
    {
        AssertSanity(TnsCString);
        return (*(ptr_nsCString()));
    }
    const nsCString&
    get_nsCString() const
    {
        AssertSanity(TnsCString);
        return (*(constptr_nsCString()));
    }
    operator nsCString&()
    {
        return get_nsCString();
    }
    operator const nsCString&() const
    {
        return get_nsCString();
    }

    NodeIdParts&
    get_NodeIdParts()
    {
        AssertSanity(TNodeIdParts);
        return (*(ptr_NodeIdParts()));
    }
    const NodeIdParts&
    get_NodeIdParts() const
    {
        AssertSanity(TNodeIdParts);
        return (*(constptr_NodeIdParts()));
    }
    operator NodeIdParts&()
    {
        return get_NodeIdParts();
    }
    operator const NodeIdParts&() const
    {
        return get_NodeIdParts();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::NodeIdVariant>
{
    typedef mozilla::gmp::NodeIdVariant paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GMPVideoEncodedFrameData|
//
namespace mozilla {
namespace gmp {
class GMPVideoEncodedFrameData final
{
private:
    typedef mozilla::ipc::Shmem Shmem;

public:
    MOZ_IMPLICIT GMPVideoEncodedFrameData() :
        mBufferType_(),
        mBuffer_(),
        mCompleteFrame_(),
        mTimestamp_(),
        mDuration_(),
        mEncodedWidth_(),
        mEncodedHeight_(),
        mFrameType_(),
        mSize_()
    {
    }

    MOZ_IMPLICIT GMPVideoEncodedFrameData(
            const uint32_t& _mEncodedWidth,
            const uint32_t& _mEncodedHeight,
            const uint64_t& _mTimestamp,
            const uint64_t& _mDuration,
            const uint32_t& _mFrameType,
            const uint32_t& _mSize,
            const GMPBufferType& _mBufferType,
            Shmem&& _mBuffer,
            const bool& _mCompleteFrame) :
        mBufferType_(_mBufferType),
        mBuffer_(_mBuffer),
        mCompleteFrame_(_mCompleteFrame),
        mTimestamp_(_mTimestamp),
        mDuration_(_mDuration),
        mEncodedWidth_(_mEncodedWidth),
        mEncodedHeight_(_mEncodedHeight),
        mFrameType_(_mFrameType),
        mSize_(_mSize)
    {
    }

    uint32_t&
    mEncodedWidth()
    {
        return mEncodedWidth_;
    }
    const uint32_t&
    mEncodedWidth() const
    {
        return mEncodedWidth_;
    }

    uint32_t&
    mEncodedHeight()
    {
        return mEncodedHeight_;
    }
    const uint32_t&
    mEncodedHeight() const
    {
        return mEncodedHeight_;
    }

    uint64_t&
    mTimestamp()
    {
        return mTimestamp_;
    }
    const uint64_t&
    mTimestamp() const
    {
        return mTimestamp_;
    }

    uint64_t&
    mDuration()
    {
        return mDuration_;
    }
    const uint64_t&
    mDuration() const
    {
        return mDuration_;
    }

    uint32_t&
    mFrameType()
    {
        return mFrameType_;
    }
    const uint32_t&
    mFrameType() const
    {
        return mFrameType_;
    }

    uint32_t&
    mSize()
    {
        return mSize_;
    }
    const uint32_t&
    mSize() const
    {
        return mSize_;
    }

    GMPBufferType&
    mBufferType()
    {
        return mBufferType_;
    }
    const GMPBufferType&
    mBufferType() const
    {
        return mBufferType_;
    }

    Shmem&
    mBuffer()
    {
        return mBuffer_;
    }
    Shmem&
    mBuffer() const
    {
        return const_cast<Shmem&>(mBuffer_);
    }

    bool&
    mCompleteFrame()
    {
        return mCompleteFrame_;
    }
    const bool&
    mCompleteFrame() const
    {
        return mCompleteFrame_;
    }

private:
    void
    StaticAssertions() const;
    GMPBufferType mBufferType_;
    Shmem mBuffer_;
    bool mCompleteFrame_;
    uint64_t mTimestamp_;
    uint64_t mDuration_;
    uint32_t mEncodedWidth_;
    uint32_t mEncodedHeight_;
    uint32_t mFrameType_;
    uint32_t mSize_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::GMPVideoEncodedFrameData>
{
    typedef mozilla::gmp::GMPVideoEncodedFrameData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GMPPlaneData|
//
namespace mozilla {
namespace gmp {
class GMPPlaneData final
{
private:
    typedef mozilla::ipc::Shmem Shmem;

public:
    MOZ_IMPLICIT GMPPlaneData() :
        mBuffer_(),
        mSize_(),
        mStride_()
    {
    }

    MOZ_IMPLICIT GMPPlaneData(
            const int32_t& _mSize,
            const int32_t& _mStride,
            Shmem&& _mBuffer) :
        mBuffer_(_mBuffer),
        mSize_(_mSize),
        mStride_(_mStride)
    {
    }

    int32_t&
    mSize()
    {
        return mSize_;
    }
    const int32_t&
    mSize() const
    {
        return mSize_;
    }

    int32_t&
    mStride()
    {
        return mStride_;
    }
    const int32_t&
    mStride() const
    {
        return mStride_;
    }

    Shmem&
    mBuffer()
    {
        return mBuffer_;
    }
    Shmem&
    mBuffer() const
    {
        return const_cast<Shmem&>(mBuffer_);
    }

private:
    void
    StaticAssertions() const;
    Shmem mBuffer_;
    int32_t mSize_;
    int32_t mStride_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::GMPPlaneData>
{
    typedef mozilla::gmp::GMPPlaneData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GMPVideoi420FrameData|
//
namespace mozilla {
namespace gmp {
class GMPVideoi420FrameData final
{
private:
    typedef mozilla::gmp::GMPPlaneData GMPPlaneData;

public:
    MOZ_IMPLICIT GMPVideoi420FrameData() :
        mYPlane_(),
        mUPlane_(),
        mVPlane_(),
        mTimestamp_(),
        mDuration_(),
        mWidth_(),
        mHeight_()
    {
    }

    MOZ_IMPLICIT GMPVideoi420FrameData(
            const GMPPlaneData& _mYPlane,
            const GMPPlaneData& _mUPlane,
            const GMPPlaneData& _mVPlane,
            const int32_t& _mWidth,
            const int32_t& _mHeight,
            const uint64_t& _mTimestamp,
            const uint64_t& _mDuration) :
        mYPlane_(_mYPlane),
        mUPlane_(_mUPlane),
        mVPlane_(_mVPlane),
        mTimestamp_(_mTimestamp),
        mDuration_(_mDuration),
        mWidth_(_mWidth),
        mHeight_(_mHeight)
    {
    }

    GMPPlaneData&
    mYPlane()
    {
        return mYPlane_;
    }
    const GMPPlaneData&
    mYPlane() const
    {
        return mYPlane_;
    }

    GMPPlaneData&
    mUPlane()
    {
        return mUPlane_;
    }
    const GMPPlaneData&
    mUPlane() const
    {
        return mUPlane_;
    }

    GMPPlaneData&
    mVPlane()
    {
        return mVPlane_;
    }
    const GMPPlaneData&
    mVPlane() const
    {
        return mVPlane_;
    }

    int32_t&
    mWidth()
    {
        return mWidth_;
    }
    const int32_t&
    mWidth() const
    {
        return mWidth_;
    }

    int32_t&
    mHeight()
    {
        return mHeight_;
    }
    const int32_t&
    mHeight() const
    {
        return mHeight_;
    }

    uint64_t&
    mTimestamp()
    {
        return mTimestamp_;
    }
    const uint64_t&
    mTimestamp() const
    {
        return mTimestamp_;
    }

    uint64_t&
    mDuration()
    {
        return mDuration_;
    }
    const uint64_t&
    mDuration() const
    {
        return mDuration_;
    }

private:
    void
    StaticAssertions() const;
    GMPPlaneData mYPlane_;
    GMPPlaneData mUPlane_;
    GMPPlaneData mVPlane_;
    uint64_t mTimestamp_;
    uint64_t mDuration_;
    int32_t mWidth_;
    int32_t mHeight_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::GMPVideoi420FrameData>
{
    typedef mozilla::gmp::GMPVideoi420FrameData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CDMInputBuffer|
//
namespace mozilla {
namespace gmp {
class CDMInputBuffer final
{
private:
    typedef mozilla::ipc::Shmem Shmem;
    typedef cdm::EncryptionScheme EncryptionScheme;

public:
    MOZ_IMPLICIT CDMInputBuffer() :
        mData_(),
        mKeyId_(),
        mIV_(),
        mClearBytes_(),
        mCipherBytes_(),
        mEncryptionScheme_(),
        mTimestamp_(),
        mDuration_(),
        mCryptByteBlock_(),
        mSkipByteBlock_()
    {
    }

    MOZ_IMPLICIT CDMInputBuffer(
            Shmem&& _mData,
            const nsTArray<uint8_t>& _mKeyId,
            const nsTArray<uint8_t>& _mIV,
            const int64_t& _mTimestamp,
            const int64_t& _mDuration,
            const nsTArray<uint32_t>& _mClearBytes,
            const nsTArray<uint32_t>& _mCipherBytes,
            const uint8_t& _mCryptByteBlock,
            const uint8_t& _mSkipByteBlock,
            const EncryptionScheme& _mEncryptionScheme) :
        mData_(_mData),
        mKeyId_(_mKeyId),
        mIV_(_mIV),
        mClearBytes_(_mClearBytes),
        mCipherBytes_(_mCipherBytes),
        mEncryptionScheme_(_mEncryptionScheme),
        mTimestamp_(_mTimestamp),
        mDuration_(_mDuration),
        mCryptByteBlock_(_mCryptByteBlock),
        mSkipByteBlock_(_mSkipByteBlock)
    {
    }

    Shmem&
    mData()
    {
        return mData_;
    }
    Shmem&
    mData() const
    {
        return const_cast<Shmem&>(mData_);
    }

    nsTArray<uint8_t>&
    mKeyId()
    {
        return mKeyId_;
    }
    const nsTArray<uint8_t>&
    mKeyId() const
    {
        return mKeyId_;
    }

    nsTArray<uint8_t>&
    mIV()
    {
        return mIV_;
    }
    const nsTArray<uint8_t>&
    mIV() const
    {
        return mIV_;
    }

    int64_t&
    mTimestamp()
    {
        return mTimestamp_;
    }
    const int64_t&
    mTimestamp() const
    {
        return mTimestamp_;
    }

    int64_t&
    mDuration()
    {
        return mDuration_;
    }
    const int64_t&
    mDuration() const
    {
        return mDuration_;
    }

    nsTArray<uint32_t>&
    mClearBytes()
    {
        return mClearBytes_;
    }
    const nsTArray<uint32_t>&
    mClearBytes() const
    {
        return mClearBytes_;
    }

    nsTArray<uint32_t>&
    mCipherBytes()
    {
        return mCipherBytes_;
    }
    const nsTArray<uint32_t>&
    mCipherBytes() const
    {
        return mCipherBytes_;
    }

    uint8_t&
    mCryptByteBlock()
    {
        return mCryptByteBlock_;
    }
    const uint8_t&
    mCryptByteBlock() const
    {
        return mCryptByteBlock_;
    }

    uint8_t&
    mSkipByteBlock()
    {
        return mSkipByteBlock_;
    }
    const uint8_t&
    mSkipByteBlock() const
    {
        return mSkipByteBlock_;
    }

    EncryptionScheme&
    mEncryptionScheme()
    {
        return mEncryptionScheme_;
    }
    const EncryptionScheme&
    mEncryptionScheme() const
    {
        return mEncryptionScheme_;
    }

private:
    void
    StaticAssertions() const;
    Shmem mData_;
    CopyableTArray<uint8_t> mKeyId_;
    CopyableTArray<uint8_t> mIV_;
    CopyableTArray<uint32_t> mClearBytes_;
    CopyableTArray<uint32_t> mCipherBytes_;
    EncryptionScheme mEncryptionScheme_;
    int64_t mTimestamp_;
    int64_t mDuration_;
    uint8_t mCryptByteBlock_;
    uint8_t mSkipByteBlock_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::CDMInputBuffer>
{
    typedef mozilla::gmp::CDMInputBuffer paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CDMVideoDecoderConfig|
//
namespace mozilla {
namespace gmp {
class CDMVideoDecoderConfig final
{
private:
    typedef cdm::EncryptionScheme EncryptionScheme;

public:
    MOZ_IMPLICIT CDMVideoDecoderConfig() :
        mExtraData_(),
        mEncryptionScheme_(),
        mCodec_(),
        mProfile_(),
        mFormat_(),
        mImageWidth_(),
        mImageHeight_()
    {
    }

    MOZ_IMPLICIT CDMVideoDecoderConfig(
            const uint32_t& _mCodec,
            const uint32_t& _mProfile,
            const uint32_t& _mFormat,
            const int32_t& _mImageWidth,
            const int32_t& _mImageHeight,
            const nsTArray<uint8_t>& _mExtraData,
            const EncryptionScheme& _mEncryptionScheme) :
        mExtraData_(_mExtraData),
        mEncryptionScheme_(_mEncryptionScheme),
        mCodec_(_mCodec),
        mProfile_(_mProfile),
        mFormat_(_mFormat),
        mImageWidth_(_mImageWidth),
        mImageHeight_(_mImageHeight)
    {
    }

    uint32_t&
    mCodec()
    {
        return mCodec_;
    }
    const uint32_t&
    mCodec() const
    {
        return mCodec_;
    }

    uint32_t&
    mProfile()
    {
        return mProfile_;
    }
    const uint32_t&
    mProfile() const
    {
        return mProfile_;
    }

    uint32_t&
    mFormat()
    {
        return mFormat_;
    }
    const uint32_t&
    mFormat() const
    {
        return mFormat_;
    }

    int32_t&
    mImageWidth()
    {
        return mImageWidth_;
    }
    const int32_t&
    mImageWidth() const
    {
        return mImageWidth_;
    }

    int32_t&
    mImageHeight()
    {
        return mImageHeight_;
    }
    const int32_t&
    mImageHeight() const
    {
        return mImageHeight_;
    }

    nsTArray<uint8_t>&
    mExtraData()
    {
        return mExtraData_;
    }
    const nsTArray<uint8_t>&
    mExtraData() const
    {
        return mExtraData_;
    }

    EncryptionScheme&
    mEncryptionScheme()
    {
        return mEncryptionScheme_;
    }
    const EncryptionScheme&
    mEncryptionScheme() const
    {
        return mEncryptionScheme_;
    }

private:
    void
    StaticAssertions() const;
    CopyableTArray<uint8_t> mExtraData_;
    EncryptionScheme mEncryptionScheme_;
    uint32_t mCodec_;
    uint32_t mProfile_;
    uint32_t mFormat_;
    int32_t mImageWidth_;
    int32_t mImageHeight_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::CDMVideoDecoderConfig>
{
    typedef mozilla::gmp::CDMVideoDecoderConfig paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CDMKeyInformation|
//
namespace mozilla {
namespace gmp {
class CDMKeyInformation final
{
private:

public:
    MOZ_IMPLICIT CDMKeyInformation() :
        mKeyId_(),
        mStatus_(),
        mSystemCode_()
    {
    }

    MOZ_IMPLICIT CDMKeyInformation(
            const nsTArray<uint8_t>& _mKeyId,
            const uint32_t& _mStatus,
            const uint32_t& _mSystemCode) :
        mKeyId_(_mKeyId),
        mStatus_(_mStatus),
        mSystemCode_(_mSystemCode)
    {
    }

    nsTArray<uint8_t>&
    mKeyId()
    {
        return mKeyId_;
    }
    const nsTArray<uint8_t>&
    mKeyId() const
    {
        return mKeyId_;
    }

    uint32_t&
    mStatus()
    {
        return mStatus_;
    }
    const uint32_t&
    mStatus() const
    {
        return mStatus_;
    }

    uint32_t&
    mSystemCode()
    {
        return mSystemCode_;
    }
    const uint32_t&
    mSystemCode() const
    {
        return mSystemCode_;
    }

private:
    void
    StaticAssertions() const;
    CopyableTArray<uint8_t> mKeyId_;
    uint32_t mStatus_;
    uint32_t mSystemCode_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::CDMKeyInformation>
{
    typedef mozilla::gmp::CDMKeyInformation paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CDMVideoPlane|
//
namespace mozilla {
namespace gmp {
class CDMVideoPlane final
{
private:

public:
    MOZ_IMPLICIT CDMVideoPlane() :
        mPlaneOffset_(),
        mStride_()
    {
    }

    MOZ_IMPLICIT CDMVideoPlane(
            const uint32_t& _mPlaneOffset,
            const uint32_t& _mStride) :
        mPlaneOffset_(_mPlaneOffset),
        mStride_(_mStride)
    {
    }

    uint32_t&
    mPlaneOffset()
    {
        return mPlaneOffset_;
    }
    const uint32_t&
    mPlaneOffset() const
    {
        return mPlaneOffset_;
    }

    uint32_t&
    mStride()
    {
        return mStride_;
    }
    const uint32_t&
    mStride() const
    {
        return mStride_;
    }

private:
    void
    StaticAssertions() const;
    uint32_t mPlaneOffset_;
    uint32_t mStride_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::CDMVideoPlane>
{
    typedef mozilla::gmp::CDMVideoPlane paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CDMVideoFrame|
//
namespace mozilla {
namespace gmp {
class CDMVideoFrame final
{
private:
    typedef mozilla::gmp::CDMVideoPlane CDMVideoPlane;

public:
    MOZ_IMPLICIT CDMVideoFrame() :
        mYPlane_(),
        mUPlane_(),
        mVPlane_(),
        mTimestamp_(),
        mDuration_(),
        mFormat_(),
        mImageWidth_(),
        mImageHeight_()
    {
    }

    MOZ_IMPLICIT CDMVideoFrame(
            const uint32_t& _mFormat,
            const int32_t& _mImageWidth,
            const int32_t& _mImageHeight,
            const CDMVideoPlane& _mYPlane,
            const CDMVideoPlane& _mUPlane,
            const CDMVideoPlane& _mVPlane,
            const int64_t& _mTimestamp,
            const int64_t& _mDuration) :
        mYPlane_(_mYPlane),
        mUPlane_(_mUPlane),
        mVPlane_(_mVPlane),
        mTimestamp_(_mTimestamp),
        mDuration_(_mDuration),
        mFormat_(_mFormat),
        mImageWidth_(_mImageWidth),
        mImageHeight_(_mImageHeight)
    {
    }

    uint32_t&
    mFormat()
    {
        return mFormat_;
    }
    const uint32_t&
    mFormat() const
    {
        return mFormat_;
    }

    int32_t&
    mImageWidth()
    {
        return mImageWidth_;
    }
    const int32_t&
    mImageWidth() const
    {
        return mImageWidth_;
    }

    int32_t&
    mImageHeight()
    {
        return mImageHeight_;
    }
    const int32_t&
    mImageHeight() const
    {
        return mImageHeight_;
    }

    CDMVideoPlane&
    mYPlane()
    {
        return mYPlane_;
    }
    const CDMVideoPlane&
    mYPlane() const
    {
        return mYPlane_;
    }

    CDMVideoPlane&
    mUPlane()
    {
        return mUPlane_;
    }
    const CDMVideoPlane&
    mUPlane() const
    {
        return mUPlane_;
    }

    CDMVideoPlane&
    mVPlane()
    {
        return mVPlane_;
    }
    const CDMVideoPlane&
    mVPlane() const
    {
        return mVPlane_;
    }

    int64_t&
    mTimestamp()
    {
        return mTimestamp_;
    }
    const int64_t&
    mTimestamp() const
    {
        return mTimestamp_;
    }

    int64_t&
    mDuration()
    {
        return mDuration_;
    }
    const int64_t&
    mDuration() const
    {
        return mDuration_;
    }

private:
    void
    StaticAssertions() const;
    CDMVideoPlane mYPlane_;
    CDMVideoPlane mUPlane_;
    CDMVideoPlane mVPlane_;
    int64_t mTimestamp_;
    int64_t mDuration_;
    uint32_t mFormat_;
    int32_t mImageWidth_;
    int32_t mImageHeight_;
};
} // namespace gmp
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gmp::CDMVideoFrame>
{
    typedef mozilla::gmp::CDMVideoFrame paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef GMPTypes_h
