//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMP_h
#define PGMP_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace gmp {
class PGMPParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPChild;
} // namespace gmp
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PGMPChild and PGMPParent
//
namespace mozilla {
namespace gmp {
namespace PGMP {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPChild>* aChild);

enum MessageType {
    PGMPStart = PGMPMsgStart << 16,
    Msg_InitCrashReporter__ID,
    Msg_PGMPTimerConstructor__ID,
    Reply_PGMPTimerConstructor__ID,
    Msg_PGMPStorageConstructor__ID,
    Reply_PGMPStorageConstructor__ID,
    Msg_PGMPContentChildDestroyed__ID,
    Msg_CrashPluginNow__ID,
    Msg_StartPlugin__ID,
    Reply_StartPlugin__ID,
    Msg_ProvideStorageId__ID,
    Msg_PreloadLibs__ID,
    Msg_CloseActive__ID,
    Msg_InitGMPContentChild__ID,
    PGMPEnd
};

IPC::Message*
Msg_InitCrashReporter(int32_t routingId);

IPC::Message*
Msg_PGMPTimerConstructor(int32_t routingId);
IPC::Message*
Reply_PGMPTimerConstructor(int32_t routingId);

IPC::Message*
Msg_PGMPStorageConstructor(int32_t routingId);
IPC::Message*
Reply_PGMPStorageConstructor(int32_t routingId);

IPC::Message*
Msg_PGMPContentChildDestroyed(int32_t routingId);

IPC::Message*
Msg_CrashPluginNow(int32_t routingId);

IPC::Message*
Msg_StartPlugin(int32_t routingId);
IPC::Message*
Reply_StartPlugin(int32_t routingId);

IPC::Message*
Msg_ProvideStorageId(int32_t routingId);

IPC::Message*
Msg_PreloadLibs(int32_t routingId);

IPC::Message*
Msg_CloseActive(int32_t routingId);

IPC::Message*
Msg_InitGMPContentChild(int32_t routingId);



} // namespace PGMP
} // namespace gmp
} // namespace mozilla

#endif // ifndef PGMP_h
