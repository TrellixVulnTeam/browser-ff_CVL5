//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPVideoDecoder_h
#define PGMPVideoDecoder_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/gmp/GMPTypes.h"

namespace mozilla {
namespace gmp {
class PGMPVideoDecoderParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPVideoDecoderChild;
} // namespace gmp
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PGMPVideoDecoderChild and PGMPVideoDecoderParent
//
namespace mozilla {
namespace gmp {
namespace PGMPVideoDecoder {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPVideoDecoderParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPVideoDecoderChild>* aChild);

enum MessageType {
    PGMPVideoDecoderStart = PGMPVideoDecoderMsgStart << 16,
    Msg_InitDecode__ID,
    Msg_Decode__ID,
    Msg_Reset__ID,
    Msg_Drain__ID,
    Msg_DecodingComplete__ID,
    Msg_ChildShmemForPool__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Decoded__ID,
    Msg_ReceivedDecodedReferenceFrame__ID,
    Msg_ReceivedDecodedFrame__ID,
    Msg_InputDataExhausted__ID,
    Msg_DrainComplete__ID,
    Msg_ResetComplete__ID,
    Msg_Error__ID,
    Msg_Shutdown__ID,
    Msg_ParentShmemForPool__ID,
    Msg_NeedShmem__ID,
    Reply_NeedShmem__ID,
    PGMPVideoDecoderEnd
};

IPC::Message*
Msg_InitDecode(int32_t routingId);

IPC::Message*
Msg_Decode(int32_t routingId);

IPC::Message*
Msg_Reset(int32_t routingId);

IPC::Message*
Msg_Drain(int32_t routingId);

IPC::Message*
Msg_DecodingComplete(int32_t routingId);

IPC::Message*
Msg_ChildShmemForPool(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Decoded(int32_t routingId);

IPC::Message*
Msg_ReceivedDecodedReferenceFrame(int32_t routingId);

IPC::Message*
Msg_ReceivedDecodedFrame(int32_t routingId);

IPC::Message*
Msg_InputDataExhausted(int32_t routingId);

IPC::Message*
Msg_DrainComplete(int32_t routingId);

IPC::Message*
Msg_ResetComplete(int32_t routingId);

IPC::Message*
Msg_Error(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_ParentShmemForPool(int32_t routingId);

IPC::Message*
Msg_NeedShmem(int32_t routingId);
IPC::Message*
Reply_NeedShmem(int32_t routingId);



} // namespace PGMPVideoDecoder
} // namespace gmp
} // namespace mozilla

#endif // ifndef PGMPVideoDecoder_h
