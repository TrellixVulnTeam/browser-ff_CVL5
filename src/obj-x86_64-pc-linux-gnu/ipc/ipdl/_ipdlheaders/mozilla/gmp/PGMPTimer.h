//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPTimer_h
#define PGMPTimer_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace gmp {
class PGMPTimerParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPTimerChild;
} // namespace gmp
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PGMPTimerChild and PGMPTimerParent
//
namespace mozilla {
namespace gmp {
namespace PGMPTimer {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPTimerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPTimerChild>* aChild);

enum MessageType {
    PGMPTimerStart = PGMPTimerMsgStart << 16,
    Msg_TimerExpired__ID,
    Msg_SetTimer__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PGMPTimerEnd
};

IPC::Message*
Msg_TimerExpired(int32_t routingId);

IPC::Message*
Msg_SetTimer(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PGMPTimer
} // namespace gmp
} // namespace mozilla

#endif // ifndef PGMPTimer_h
