//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PRDDChild_h
#define PRDDChild_h

#include "mozilla/PRDD.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "PDMFactory.h"
#include "mozilla/UntrustedModulesData.h"
#include "mozilla/dom/NativeThreadId.h"

namespace mozilla {
class PProfilerChild;
} // namespace mozilla
namespace mozilla {
class PProfilerParent;
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderManagerParent;
} // namespace mozilla

namespace mozilla {
namespace layers {
class PVideoBridgeChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PVideoBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {


class PRDDChild :
    public mozilla::ipc::IToplevelProtocol
{
private:
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::gfx::BackendType BackendType;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::gfx::ContentDeviceData ContentDeviceData;
    typedef mozilla::gfx::D3D11DeviceStatus D3D11DeviceStatus;
    typedef mozilla::gfx::DevicePrefs DevicePrefs;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::gfx::FeatureFailure FeatureFailure;
    typedef mozilla::gfx::FeatureStatus FeatureStatus;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::gfx::GPUDeviceData GPUDeviceData;
    typedef mozilla::gfx::GfxInfoFeatureStatus GfxInfoFeatureStatus;
    typedef mozilla::gfx::GfxVarUpdate GfxVarUpdate;
    typedef mozilla::gfx::GfxVarValue GfxVarValue;
    typedef mozilla::gfx::IntSize IntSize;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::PDMFactory::MediaCodecsSupported MediaCodecsSupported;
    typedef mozilla::dom::MemoryReport MemoryReport;
    typedef mozilla::ModulePaths ModulePaths;
    typedef mozilla::ModulesMapResult ModulesMapResult;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::dom::Pref Pref;
    typedef mozilla::dom::PrefValue PrefValue;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::UntrustedModulesData UntrustedModulesData;
    typedef mozilla::gfx::D3D11Checks::VideoFormatOption VideoFormatOption;
    typedef mozilla::gfx::D3D11Checks::VideoFormatOptionSet VideoFormatOptionSet;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::PProfilerChild PProfilerChild;
    typedef mozilla::PProfilerParent PProfilerParent;
    typedef mozilla::PRemoteDecoderManagerChild PRemoteDecoderManagerChild;
    typedef mozilla::PRemoteDecoderManagerParent PRemoteDecoderManagerParent;
    typedef mozilla::layers::PVideoBridgeChild PVideoBridgeChild;
    typedef mozilla::layers::PVideoBridgeParent PVideoBridgeParent;

public:
    typedef MozPromise<uint32_t, ResponseRejectReason, true> RequestMemoryReportPromise;
    typedef MozPromise<mozilla::Maybe<UntrustedModulesData>, ResponseRejectReason, true> GetUntrustedModulesDataPromise;
    typedef std::function<void(mozilla::Maybe<ModulesMapResult>&&)> GetModulesTrustResolver;

protected:
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PRDDChild();

    virtual ~PRDDChild();

public:
    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendInit(
            const nsTArray<GfxVarUpdate>& vars,
            const mozilla::Maybe<FileDescriptor>& sandboxBroker,
            const bool& canRecordReleaseTelemetry);

    bool
    SendInitProfiler(Endpoint<mozilla::PProfilerChild>&& endpoint);

    bool
    SendNewContentRemoteDecoderManager(Endpoint<mozilla::PRemoteDecoderManagerParent>&& endpoint);

    void
    SendRequestMemoryReport(
            const uint32_t& generation,
            const bool& anonymize,
            const bool& minimizeMemoryUsage,
            const mozilla::Maybe<FileDescriptor>& DMDFile,
            mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<RequestMemoryReportPromise>
    SendRequestMemoryReport(
            const uint32_t& generation,
            const bool& anonymize,
            const bool& minimizeMemoryUsage,
            const mozilla::Maybe<FileDescriptor>& DMDFile);

    bool
    SendPreferenceUpdate(const Pref& pref);

    bool
    SendUpdateVar(const GfxVarUpdate& var);

    bool
    SendInitVideoBridge(
            Endpoint<mozilla::layers::PVideoBridgeChild>&& endpoint,
            const bool& createHardwareDevice,
            const ContentDeviceData& contentDeviceData);

    void
    SendGetUntrustedModulesData(
            mozilla::ipc::ResolveCallback<mozilla::Maybe<UntrustedModulesData>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<GetUntrustedModulesDataPromise>
    SendGetUntrustedModulesData();

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

};


} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::PRDDChild*>
{
    typedef mozilla::PRDDChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PRDDChild_h
