//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PRemoteDecoderChild_h
#define PRemoteDecoderChild_h

#include "mozilla/PRemoteDecoder.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "MediaInfo.h"
#include "MediaResult.h"
#include "PlatformDecoderModule.h"
#include "mozilla/layers/LayersTypes.h"

namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderManagerParent;
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla

namespace mozilla {
class ArrayOfRemoteMediaRawData;
} // namespace mozilla

namespace mozilla {
class ArrayOfRemoteAudioData;
} // namespace mozilla

namespace mozilla {
class ArrayOfRemoteVideoData;
} // namespace mozilla

namespace mozilla {


class PRemoteDecoderChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::PRemoteDecoderManagerChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ArrayOfRemoteAudioData ArrayOfRemoteAudioData;
    typedef mozilla::ArrayOfRemoteMediaRawData ArrayOfRemoteMediaRawData;
    typedef mozilla::ArrayOfRemoteVideoData ArrayOfRemoteVideoData;
    typedef mozilla::layers::BufferDescriptor BufferDescriptor;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::gfx::ColorDepth ColorDepth;
    typedef mozilla::gfx::ColorRange ColorRange;
    typedef mozilla::MediaDataDecoder::ConversionRequired ConversionRequired;
    typedef mozilla::DecodeResultIPDL DecodeResultIPDL;
    typedef mozilla::DecodedOutputIPDL DecodedOutputIPDL;
    typedef mozilla::layers::EGLImageDescriptor EGLImageDescriptor;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::SharedMemoryBasic::Handle Handle;
    typedef mozilla::InitCompletionIPDL InitCompletionIPDL;
    typedef mozilla::InitResultIPDL InitResultIPDL;
    typedef mozilla::gfx::IntRect IntRect;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::layers::LayersBackend LayersBackend;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::layers::MaybeVideoBridgeSource MaybeVideoBridgeSource;
    typedef mozilla::MediaDataIPDL MediaDataIPDL;
    typedef mozilla::MediaResult MediaResult;
    typedef mozilla::layers::MemoryOrShmem MemoryOrShmem;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::layers::RGBDescriptor RGBDescriptor;
    typedef mozilla::layers::RemoteDecoderVideoSubDescriptor RemoteDecoderVideoSubDescriptor;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::StereoMode StereoMode;
    typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer SurfaceDescriptorAndroidHardwareBuffer;
    typedef mozilla::layers::SurfaceDescriptorBuffer SurfaceDescriptorBuffer;
    typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
    typedef mozilla::layers::SurfaceDescriptorDIB SurfaceDescriptorDIB;
    typedef mozilla::layers::SurfaceDescriptorDMABuf SurfaceDescriptorDMABuf;
    typedef mozilla::layers::SurfaceDescriptorDXGIYCbCr SurfaceDescriptorDXGIYCbCr;
    typedef mozilla::layers::SurfaceDescriptorFileMapping SurfaceDescriptorFileMapping;
    typedef mozilla::layers::SurfaceDescriptorGPUVideo SurfaceDescriptorGPUVideo;
    typedef mozilla::layers::SurfaceDescriptorMacIOSurface SurfaceDescriptorMacIOSurface;
    typedef mozilla::layers::SurfaceDescriptorPlugin SurfaceDescriptorPlugin;
    typedef mozilla::layers::SurfaceDescriptorRecorded SurfaceDescriptorRecorded;
    typedef mozilla::layers::SurfaceDescriptorRemoteDecoder SurfaceDescriptorRemoteDecoder;
    typedef mozilla::layers::SurfaceDescriptorShared SurfaceDescriptorShared;
    typedef mozilla::layers::SurfaceDescriptorSharedGLTexture SurfaceDescriptorSharedGLTexture;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::layers::SurfaceTextureDescriptor SurfaceTextureDescriptor;
    typedef mozilla::media::TimeUnit TimeUnit;
    typedef mozilla::TrackInfo::TrackType TrackType;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::YCbCrDescriptor YCbCrDescriptor;
    typedef mozilla::gfx::YUVColorSpace YUVColorSpace;
    typedef mozilla::null_t null_t;
    typedef mozilla::PRemoteDecoderManagerChild PRemoteDecoderManagerChild;
    typedef mozilla::PRemoteDecoderManagerParent PRemoteDecoderManagerParent;

public:
    typedef MozPromise<MediaResult, ResponseRejectReason, true> ConstructPromise;
    typedef MozPromise<InitResultIPDL, ResponseRejectReason, true> InitPromise;
    typedef MozPromise<DecodeResultIPDL, ResponseRejectReason, true> DecodePromise;
    typedef MozPromise<MediaResult, ResponseRejectReason, true> FlushPromise;
    typedef MozPromise<DecodeResultIPDL, ResponseRejectReason, true> DrainPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> ShutdownPromise;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PRemoteDecoderChild();

    virtual ~PRemoteDecoderChild();

public:
    PRemoteDecoderManagerChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    void
    SendConstruct(
            mozilla::ipc::ResolveCallback<MediaResult>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<ConstructPromise>
    SendConstruct();

    void
    SendInit(
            mozilla::ipc::ResolveCallback<InitResultIPDL>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<InitPromise>
    SendInit();

    void
    SendDecode(
            ArrayOfRemoteMediaRawData* data,
            mozilla::ipc::ResolveCallback<DecodeResultIPDL>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<DecodePromise>
    SendDecode(ArrayOfRemoteMediaRawData* data);

    void
    SendFlush(
            mozilla::ipc::ResolveCallback<MediaResult>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<FlushPromise>
    SendFlush();

    void
    SendDrain(
            mozilla::ipc::ResolveCallback<DecodeResultIPDL>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<DrainPromise>
    SendDrain();

    void
    SendShutdown(
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<ShutdownPromise>
    SendShutdown();

    bool
    SendSetSeekThreshold(const TimeUnit& time);

    static bool
    Send__delete__(PRemoteDecoderChild* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::PRemoteDecoderChild*>
{
    typedef mozilla::PRemoteDecoderChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PRemoteDecoderChild_h
