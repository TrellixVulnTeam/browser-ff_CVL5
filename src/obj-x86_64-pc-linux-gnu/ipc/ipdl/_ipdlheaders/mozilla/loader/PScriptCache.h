//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PScriptCache_h
#define PScriptCache_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/TimeStamp.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ScriptData|
//
namespace mozilla {
namespace loader {
class ScriptData final
{
private:
    typedef mozilla::TimeStamp TimeStamp;

public:
    MOZ_IMPLICIT ScriptData() :
        url_(),
        cachePath_(),
        loadTime_(),
        xdrData_()
    {
    }

    MOZ_IMPLICIT ScriptData(
            const nsCString& _url,
            const nsCString& _cachePath,
            const TimeStamp& _loadTime,
            const nsTArray<uint8_t>& _xdrData) :
        url_(_url),
        cachePath_(_cachePath),
        loadTime_(_loadTime),
        xdrData_(_xdrData)
    {
    }

    nsCString&
    url()
    {
        return url_;
    }
    const nsCString&
    url() const
    {
        return url_;
    }

    nsCString&
    cachePath()
    {
        return cachePath_;
    }
    const nsCString&
    cachePath() const
    {
        return cachePath_;
    }

    TimeStamp&
    loadTime()
    {
        return loadTime_;
    }
    const TimeStamp&
    loadTime() const
    {
        return loadTime_;
    }

    nsTArray<uint8_t>&
    xdrData()
    {
        return xdrData_;
    }
    const nsTArray<uint8_t>&
    xdrData() const
    {
        return xdrData_;
    }

private:
    nsCString url_;
    nsCString cachePath_;
    TimeStamp loadTime_;
    CopyableTArray<uint8_t> xdrData_;
};
} // namespace loader
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::loader::ScriptData>
{
    typedef mozilla::loader::ScriptData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace loader {
class PScriptCacheParent;
} // namespace loader
} // namespace mozilla
namespace mozilla {
namespace loader {
class PScriptCacheChild;
} // namespace loader
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PScriptCacheChild and PScriptCacheParent
//
namespace mozilla {
namespace loader {
namespace PScriptCache {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::loader::PScriptCacheParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::loader::PScriptCacheChild>* aChild);

enum MessageType {
    PScriptCacheStart = PScriptCacheMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    PScriptCacheEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PScriptCache
} // namespace loader
} // namespace mozilla

#endif // ifndef PScriptCache_h
