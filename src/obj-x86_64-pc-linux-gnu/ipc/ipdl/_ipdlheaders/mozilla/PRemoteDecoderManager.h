//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PRemoteDecoderManager_h
#define PRemoteDecoderManager_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "MediaInfo.h"
#include "mozilla/layers/LayersSurfaces.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct VideoDecoderInfoIPDL|
//
namespace mozilla {
class VideoDecoderInfoIPDL final
{
private:

public:
    MOZ_IMPLICIT VideoDecoderInfoIPDL() :
        videoInfo_(),
        framerate_()
    {
    }

    MOZ_IMPLICIT VideoDecoderInfoIPDL(
            const VideoInfo& _videoInfo,
            const float& _framerate) :
        videoInfo_(_videoInfo),
        framerate_(_framerate)
    {
    }

    VideoInfo&
    videoInfo()
    {
        return videoInfo_;
    }
    const VideoInfo&
    videoInfo() const
    {
        return videoInfo_;
    }

    float&
    framerate()
    {
        return framerate_;
    }
    const float&
    framerate() const
    {
        return framerate_;
    }

private:
    VideoInfo videoInfo_;
    float framerate_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::VideoDecoderInfoIPDL>
{
    typedef mozilla::VideoDecoderInfoIPDL paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union RemoteDecoderInfoIPDL|
//
namespace mozilla {
class RemoteDecoderInfoIPDL final
{
public:
    enum Type {
        T__None,
        TAudioInfo = 1,
        TVideoDecoderInfoIPDL,
        T__Last = TVideoDecoderInfoIPDL
    };

private:
    typedef mozilla::VideoDecoderInfoIPDL VideoDecoderInfoIPDL;
    typedef AudioInfo AudioInfo__tdef;
    typedef VideoDecoderInfoIPDL VideoDecoderInfoIPDL__tdef;

    union Value {
        mozilla::AlignedStorage2<AudioInfo> VAudioInfo;
        mozilla::AlignedStorage2<VideoDecoderInfoIPDL> VVideoDecoderInfoIPDL;
    };

    AudioInfo*
    ptr_AudioInfo()
    {
        return ((mValue).VAudioInfo).addr();
    }
    const AudioInfo*
    constptr_AudioInfo() const
    {
        return ((mValue).VAudioInfo).addr();
    }
    VideoDecoderInfoIPDL*
    ptr_VideoDecoderInfoIPDL()
    {
        return ((mValue).VVideoDecoderInfoIPDL).addr();
    }
    const VideoDecoderInfoIPDL*
    constptr_VideoDecoderInfoIPDL() const
    {
        return ((mValue).VVideoDecoderInfoIPDL).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT RemoteDecoderInfoIPDL() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT RemoteDecoderInfoIPDL(const AudioInfo& aOther);

    MOZ_IMPLICIT RemoteDecoderInfoIPDL(AudioInfo&& aOther);

    MOZ_IMPLICIT RemoteDecoderInfoIPDL(const VideoDecoderInfoIPDL& aOther);

    MOZ_IMPLICIT RemoteDecoderInfoIPDL(VideoDecoderInfoIPDL&& aOther);

    MOZ_IMPLICIT RemoteDecoderInfoIPDL(const RemoteDecoderInfoIPDL& aOther);

    MOZ_IMPLICIT RemoteDecoderInfoIPDL(RemoteDecoderInfoIPDL&& aOther);

    ~RemoteDecoderInfoIPDL();

    Type
    type() const
    {
        return mType;
    }

    RemoteDecoderInfoIPDL&
    operator=(const AudioInfo& aRhs);

    RemoteDecoderInfoIPDL&
    operator=(AudioInfo&& aRhs);

    RemoteDecoderInfoIPDL&
    operator=(const VideoDecoderInfoIPDL& aRhs);

    RemoteDecoderInfoIPDL&
    operator=(VideoDecoderInfoIPDL&& aRhs);

    RemoteDecoderInfoIPDL&
    operator=(const RemoteDecoderInfoIPDL& aRhs);

    RemoteDecoderInfoIPDL&
    operator=(RemoteDecoderInfoIPDL&& aRhs);

    AudioInfo&
    get_AudioInfo()
    {
        AssertSanity(TAudioInfo);
        return (*(ptr_AudioInfo()));
    }
    const AudioInfo&
    get_AudioInfo() const
    {
        AssertSanity(TAudioInfo);
        return (*(constptr_AudioInfo()));
    }
    operator AudioInfo&()
    {
        return get_AudioInfo();
    }
    operator const AudioInfo&() const
    {
        return get_AudioInfo();
    }

    VideoDecoderInfoIPDL&
    get_VideoDecoderInfoIPDL()
    {
        AssertSanity(TVideoDecoderInfoIPDL);
        return (*(ptr_VideoDecoderInfoIPDL()));
    }
    const VideoDecoderInfoIPDL&
    get_VideoDecoderInfoIPDL() const
    {
        AssertSanity(TVideoDecoderInfoIPDL);
        return (*(constptr_VideoDecoderInfoIPDL()));
    }
    operator VideoDecoderInfoIPDL&()
    {
        return get_VideoDecoderInfoIPDL();
    }
    operator const VideoDecoderInfoIPDL&() const
    {
        return get_VideoDecoderInfoIPDL();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::RemoteDecoderInfoIPDL>
{
    typedef mozilla::RemoteDecoderInfoIPDL paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderManagerParent;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PRemoteDecoderManagerChild and PRemoteDecoderManagerParent
//
namespace mozilla {
namespace PRemoteDecoderManager {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::PRemoteDecoderManagerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::PRemoteDecoderManagerChild>* aChild);

enum MessageType {
    PRemoteDecoderManagerStart = PRemoteDecoderManagerMsgStart << 16,
    Msg_PRemoteDecoderConstructor__ID,
    Reply_PRemoteDecoderConstructor__ID,
    Msg_Readback__ID,
    Reply_Readback__ID,
    Msg_DeallocateSurfaceDescriptorGPUVideo__ID,
    PRemoteDecoderManagerEnd
};

IPC::Message*
Msg_PRemoteDecoderConstructor(int32_t routingId);
IPC::Message*
Reply_PRemoteDecoderConstructor(int32_t routingId);

IPC::Message*
Msg_Readback(int32_t routingId);
IPC::Message*
Reply_Readback(int32_t routingId);

IPC::Message*
Msg_DeallocateSurfaceDescriptorGPUVideo(int32_t routingId);



} // namespace PRemoteDecoderManager
} // namespace mozilla

#endif // ifndef PRemoteDecoderManager_h
