//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PAPZCTreeManager_h
#define PAPZCTreeManager_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace layers {
class PAPZCTreeManagerParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PAPZCTreeManagerChild;
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PAPZCTreeManagerChild and PAPZCTreeManagerParent
//
namespace mozilla {
namespace layers {
namespace PAPZCTreeManager {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PAPZCTreeManagerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PAPZCTreeManagerChild>* aChild);

enum MessageType {
    PAPZCTreeManagerStart = PAPZCTreeManagerMsgStart << 16,
    Msg_ZoomToRect__ID,
    Msg_ContentReceivedInputBlock__ID,
    Msg_SetTargetAPZC__ID,
    Msg_UpdateZoomConstraints__ID,
    Msg_SetKeyboardMap__ID,
    Msg_SetDPI__ID,
    Msg_SetAllowedTouchBehavior__ID,
    Msg_StartScrollbarDrag__ID,
    Msg_StartAutoscroll__ID,
    Msg_StopAutoscroll__ID,
    Msg_SetLongTapEnabled__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_HandleTap__ID,
    Msg_NotifyPinchGesture__ID,
    Msg_CancelAutoscroll__ID,
    PAPZCTreeManagerEnd
};

IPC::Message*
Msg_ZoomToRect(int32_t routingId);

IPC::Message*
Msg_ContentReceivedInputBlock(int32_t routingId);

IPC::Message*
Msg_SetTargetAPZC(int32_t routingId);

IPC::Message*
Msg_UpdateZoomConstraints(int32_t routingId);

IPC::Message*
Msg_SetKeyboardMap(int32_t routingId);

IPC::Message*
Msg_SetDPI(int32_t routingId);

IPC::Message*
Msg_SetAllowedTouchBehavior(int32_t routingId);

IPC::Message*
Msg_StartScrollbarDrag(int32_t routingId);

IPC::Message*
Msg_StartAutoscroll(int32_t routingId);

IPC::Message*
Msg_StopAutoscroll(int32_t routingId);

IPC::Message*
Msg_SetLongTapEnabled(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_HandleTap(int32_t routingId);

IPC::Message*
Msg_NotifyPinchGesture(int32_t routingId);

IPC::Message*
Msg_CancelAutoscroll(int32_t routingId);



} // namespace PAPZCTreeManager
} // namespace layers
} // namespace mozilla

#endif // ifndef PAPZCTreeManager_h
