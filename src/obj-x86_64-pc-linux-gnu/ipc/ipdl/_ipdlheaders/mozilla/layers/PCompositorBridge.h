//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCompositorBridge_h
#define PCompositorBridge_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/TimeStamp.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/layers/LayersSurfaces.h"
#include "mozilla/layers/LayersMessages.h"
#include "mozilla/widget/PlatformWidgetTypes.h"
#include "mozilla/layers/PCompositorBridgeTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FrameStats|
//
namespace mozilla {
namespace layers {
class FrameStats final
{
private:
    typedef mozilla::layers::TransactionId TransactionId;
    typedef mozilla::TimeStamp TimeStamp;

public:
    MOZ_IMPLICIT FrameStats() :
        id_(),
        compositeStart_(),
        renderStart_(),
        compositeEnd_(),
        transactionStart_(),
        refreshStart_(),
        fwdTime_(),
        sceneBuiltTime_(),
        url_(),
        resourceUploadTime_(),
        gpuCacheUploadTime_(),
        contentFrameTime_(),
        skippedComposites_()
    {
    }

    MOZ_IMPLICIT FrameStats(
            const TransactionId& _id,
            const TimeStamp& _compositeStart,
            const TimeStamp& _renderStart,
            const TimeStamp& _compositeEnd,
            const int32_t& _contentFrameTime,
            const double& _resourceUploadTime,
            const double& _gpuCacheUploadTime,
            const TimeStamp& _transactionStart,
            const TimeStamp& _refreshStart,
            const TimeStamp& _fwdTime,
            const TimeStamp& _sceneBuiltTime,
            const uint32_t& _skippedComposites,
            const nsCString& _url) :
        id_(_id),
        compositeStart_(_compositeStart),
        renderStart_(_renderStart),
        compositeEnd_(_compositeEnd),
        transactionStart_(_transactionStart),
        refreshStart_(_refreshStart),
        fwdTime_(_fwdTime),
        sceneBuiltTime_(_sceneBuiltTime),
        url_(_url),
        resourceUploadTime_(_resourceUploadTime),
        gpuCacheUploadTime_(_gpuCacheUploadTime),
        contentFrameTime_(_contentFrameTime),
        skippedComposites_(_skippedComposites)
    {
    }

    TransactionId&
    id()
    {
        return id_;
    }
    const TransactionId&
    id() const
    {
        return id_;
    }

    TimeStamp&
    compositeStart()
    {
        return compositeStart_;
    }
    const TimeStamp&
    compositeStart() const
    {
        return compositeStart_;
    }

    TimeStamp&
    renderStart()
    {
        return renderStart_;
    }
    const TimeStamp&
    renderStart() const
    {
        return renderStart_;
    }

    TimeStamp&
    compositeEnd()
    {
        return compositeEnd_;
    }
    const TimeStamp&
    compositeEnd() const
    {
        return compositeEnd_;
    }

    int32_t&
    contentFrameTime()
    {
        return contentFrameTime_;
    }
    const int32_t&
    contentFrameTime() const
    {
        return contentFrameTime_;
    }

    double&
    resourceUploadTime()
    {
        return resourceUploadTime_;
    }
    const double&
    resourceUploadTime() const
    {
        return resourceUploadTime_;
    }

    double&
    gpuCacheUploadTime()
    {
        return gpuCacheUploadTime_;
    }
    const double&
    gpuCacheUploadTime() const
    {
        return gpuCacheUploadTime_;
    }

    TimeStamp&
    transactionStart()
    {
        return transactionStart_;
    }
    const TimeStamp&
    transactionStart() const
    {
        return transactionStart_;
    }

    TimeStamp&
    refreshStart()
    {
        return refreshStart_;
    }
    const TimeStamp&
    refreshStart() const
    {
        return refreshStart_;
    }

    TimeStamp&
    fwdTime()
    {
        return fwdTime_;
    }
    const TimeStamp&
    fwdTime() const
    {
        return fwdTime_;
    }

    TimeStamp&
    sceneBuiltTime()
    {
        return sceneBuiltTime_;
    }
    const TimeStamp&
    sceneBuiltTime() const
    {
        return sceneBuiltTime_;
    }

    uint32_t&
    skippedComposites()
    {
        return skippedComposites_;
    }
    const uint32_t&
    skippedComposites() const
    {
        return skippedComposites_;
    }

    nsCString&
    url()
    {
        return url_;
    }
    const nsCString&
    url() const
    {
        return url_;
    }

private:
    void
    StaticAssertions() const;
    TransactionId id_;
    TimeStamp compositeStart_;
    TimeStamp renderStart_;
    TimeStamp compositeEnd_;
    TimeStamp transactionStart_;
    TimeStamp refreshStart_;
    TimeStamp fwdTime_;
    TimeStamp sceneBuiltTime_;
    nsCString url_;
    double resourceUploadTime_;
    double gpuCacheUploadTime_;
    int32_t contentFrameTime_;
    uint32_t skippedComposites_;
};
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::layers::FrameStats>
{
    typedef mozilla::layers::FrameStats paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PCompositorBridgeChild and PCompositorBridgeParent
//
namespace mozilla {
namespace layers {
namespace PCompositorBridge {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PCompositorBridgeParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PCompositorBridgeChild>* aChild);

enum MessageType {
    PCompositorBridgeStart = PCompositorBridgeMsgStart << 16,
    Msg_InvalidateLayers__ID,
    Msg_DidComposite__ID,
    Msg_NotifyFrameStats__ID,
    Msg_RemotePaintIsReady__ID,
    Msg_ParentAsyncMessages__ID,
    Msg_ObserveLayersUpdate__ID,
    Msg_CompositorOptionsChanged__ID,
    Msg_NotifyJankedAnimations__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_PCompositorWidgetConstructor__ID,
    Reply_PCompositorWidgetConstructor__ID,
    Msg_Initialize__ID,
    Reply_Initialize__ID,
    Msg_PAPZConstructor__ID,
    Reply_PAPZConstructor__ID,
    Msg_PAPZCTreeManagerConstructor__ID,
    Reply_PAPZCTreeManagerConstructor__ID,
    Msg_PWebGPUConstructor__ID,
    Reply_PWebGPUConstructor__ID,
    Msg_WillClose__ID,
    Reply_WillClose__ID,
    Msg_Pause__ID,
    Reply_Pause__ID,
    Msg_Resume__ID,
    Reply_Resume__ID,
    Msg_ResumeAsync__ID,
    Msg_NotifyChildCreated__ID,
    Reply_NotifyChildCreated__ID,
    Msg_MapAndNotifyChildCreated__ID,
    Reply_MapAndNotifyChildCreated__ID,
    Msg_AdoptChild__ID,
    Msg_NotifyChildRecreated__ID,
    Reply_NotifyChildRecreated__ID,
    Msg_MakeSnapshot__ID,
    Reply_MakeSnapshot__ID,
    Msg_FlushRendering__ID,
    Reply_FlushRendering__ID,
    Msg_FlushRenderingAsync__ID,
    Msg_WaitOnTransactionProcessed__ID,
    Reply_WaitOnTransactionProcessed__ID,
    Msg_ForcePresent__ID,
    Msg_StartFrameTimeRecording__ID,
    Reply_StartFrameTimeRecording__ID,
    Msg_StopFrameTimeRecording__ID,
    Reply_StopFrameTimeRecording__ID,
    Msg_PLayerTransactionConstructor__ID,
    Reply_PLayerTransactionConstructor__ID,
    Msg_NotifyRegionInvalidated__ID,
    Msg_RequestNotifyAfterRemotePaint__ID,
    Msg_PTextureConstructor__ID,
    Reply_PTextureConstructor__ID,
    Msg_InitPCanvasParent__ID,
    Msg_ReleasePCanvasParent__ID,
    Msg_SyncWithCompositor__ID,
    Reply_SyncWithCompositor__ID,
    Msg_PWebRenderBridgeConstructor__ID,
    Reply_PWebRenderBridgeConstructor__ID,
    Msg_CheckContentOnlyTDR__ID,
    Reply_CheckContentOnlyTDR__ID,
    Msg_BeginRecording__ID,
    Reply_BeginRecording__ID,
    Msg_EndRecordingToDisk__ID,
    Reply_EndRecordingToDisk__ID,
    Msg_EndRecordingToMemory__ID,
    Reply_EndRecordingToMemory__ID,
    Msg_SupportsAsyncDXGISurface__ID,
    Reply_SupportsAsyncDXGISurface__ID,
    Msg_PreferredDXGIAdapter__ID,
    Reply_PreferredDXGIAdapter__ID,
    Msg_RequestFxrOutput__ID,
    Msg_PWebGLConstructor__ID,
    Reply_PWebGLConstructor__ID,
    Msg_SharedCompositorFrameMetrics__ID,
    Msg_ReleaseSharedCompositorFrameMetrics__ID,
    PCompositorBridgeEnd
};

IPC::Message*
Msg_InvalidateLayers(int32_t routingId);

IPC::Message*
Msg_DidComposite(int32_t routingId);

IPC::Message*
Msg_NotifyFrameStats(int32_t routingId);

IPC::Message*
Msg_RemotePaintIsReady(int32_t routingId);

IPC::Message*
Msg_ParentAsyncMessages(int32_t routingId);

IPC::Message*
Msg_ObserveLayersUpdate(int32_t routingId);

IPC::Message*
Msg_CompositorOptionsChanged(int32_t routingId);

IPC::Message*
Msg_NotifyJankedAnimations(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_PCompositorWidgetConstructor(int32_t routingId);
IPC::Message*
Reply_PCompositorWidgetConstructor(int32_t routingId);

IPC::Message*
Msg_Initialize(int32_t routingId);
IPC::Message*
Reply_Initialize(int32_t routingId);

IPC::Message*
Msg_PAPZConstructor(int32_t routingId);
IPC::Message*
Reply_PAPZConstructor(int32_t routingId);

IPC::Message*
Msg_PAPZCTreeManagerConstructor(int32_t routingId);
IPC::Message*
Reply_PAPZCTreeManagerConstructor(int32_t routingId);

IPC::Message*
Msg_PWebGPUConstructor(int32_t routingId);
IPC::Message*
Reply_PWebGPUConstructor(int32_t routingId);

IPC::Message*
Msg_WillClose(int32_t routingId);
IPC::Message*
Reply_WillClose(int32_t routingId);

IPC::Message*
Msg_Pause(int32_t routingId);
IPC::Message*
Reply_Pause(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);
IPC::Message*
Reply_Resume(int32_t routingId);

IPC::Message*
Msg_ResumeAsync(int32_t routingId);

IPC::Message*
Msg_NotifyChildCreated(int32_t routingId);
IPC::Message*
Reply_NotifyChildCreated(int32_t routingId);

IPC::Message*
Msg_MapAndNotifyChildCreated(int32_t routingId);
IPC::Message*
Reply_MapAndNotifyChildCreated(int32_t routingId);

IPC::Message*
Msg_AdoptChild(int32_t routingId);

IPC::Message*
Msg_NotifyChildRecreated(int32_t routingId);
IPC::Message*
Reply_NotifyChildRecreated(int32_t routingId);

IPC::Message*
Msg_MakeSnapshot(int32_t routingId);
IPC::Message*
Reply_MakeSnapshot(int32_t routingId);

IPC::Message*
Msg_FlushRendering(int32_t routingId);
IPC::Message*
Reply_FlushRendering(int32_t routingId);

IPC::Message*
Msg_FlushRenderingAsync(int32_t routingId);

IPC::Message*
Msg_WaitOnTransactionProcessed(int32_t routingId);
IPC::Message*
Reply_WaitOnTransactionProcessed(int32_t routingId);

IPC::Message*
Msg_ForcePresent(int32_t routingId);

IPC::Message*
Msg_StartFrameTimeRecording(int32_t routingId);
IPC::Message*
Reply_StartFrameTimeRecording(int32_t routingId);

IPC::Message*
Msg_StopFrameTimeRecording(int32_t routingId);
IPC::Message*
Reply_StopFrameTimeRecording(int32_t routingId);

IPC::Message*
Msg_PLayerTransactionConstructor(int32_t routingId);
IPC::Message*
Reply_PLayerTransactionConstructor(int32_t routingId);

IPC::Message*
Msg_NotifyRegionInvalidated(int32_t routingId);

IPC::Message*
Msg_RequestNotifyAfterRemotePaint(int32_t routingId);

IPC::Message*
Msg_PTextureConstructor(int32_t routingId);
IPC::Message*
Reply_PTextureConstructor(int32_t routingId);

IPC::Message*
Msg_InitPCanvasParent(int32_t routingId);

IPC::Message*
Msg_ReleasePCanvasParent(int32_t routingId);

IPC::Message*
Msg_SyncWithCompositor(int32_t routingId);
IPC::Message*
Reply_SyncWithCompositor(int32_t routingId);

IPC::Message*
Msg_PWebRenderBridgeConstructor(int32_t routingId);
IPC::Message*
Reply_PWebRenderBridgeConstructor(int32_t routingId);

IPC::Message*
Msg_CheckContentOnlyTDR(int32_t routingId);
IPC::Message*
Reply_CheckContentOnlyTDR(int32_t routingId);

IPC::Message*
Msg_BeginRecording(int32_t routingId);
IPC::Message*
Reply_BeginRecording(int32_t routingId);

IPC::Message*
Msg_EndRecordingToDisk(int32_t routingId);
IPC::Message*
Reply_EndRecordingToDisk(int32_t routingId);

IPC::Message*
Msg_EndRecordingToMemory(int32_t routingId);
IPC::Message*
Reply_EndRecordingToMemory(int32_t routingId);

IPC::Message*
Msg_SupportsAsyncDXGISurface(int32_t routingId);
IPC::Message*
Reply_SupportsAsyncDXGISurface(int32_t routingId);

IPC::Message*
Msg_PreferredDXGIAdapter(int32_t routingId);
IPC::Message*
Reply_PreferredDXGIAdapter(int32_t routingId);

IPC::Message*
Msg_RequestFxrOutput(int32_t routingId);

IPC::Message*
Msg_PWebGLConstructor(int32_t routingId);
IPC::Message*
Reply_PWebGLConstructor(int32_t routingId);

IPC::Message*
Msg_SharedCompositorFrameMetrics(int32_t routingId);

IPC::Message*
Msg_ReleaseSharedCompositorFrameMetrics(int32_t routingId);



} // namespace PCompositorBridge
} // namespace layers
} // namespace mozilla

#endif // ifndef PCompositorBridge_h
