//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PAPZInputBridgeChild_h
#define PAPZInputBridgeChild_h

#include "mozilla/layers/PAPZInputBridge.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "Units.h"
#include "mozilla/EventForwards.h"
#include "mozilla/layers/LayersTypes.h"

namespace mozilla {
namespace gfx {
class PGPUChild;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PGPUParent;
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace gfx {
class PGPUChild;
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace layers {
struct ScrollableLayerGuid;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
struct APZEventResult;
} // namespace layers
} // namespace mozilla

namespace mozilla {
class MultiTouchInput;
} // namespace mozilla

namespace mozilla {
class MouseInput;
} // namespace mozilla

namespace mozilla {
class PanGestureInput;
} // namespace mozilla

namespace mozilla {
class PinchGestureInput;
} // namespace mozilla

namespace mozilla {
class TapGestureInput;
} // namespace mozilla

namespace mozilla {
class ScrollWheelInput;
} // namespace mozilla

namespace mozilla {
class KeyboardInput;
} // namespace mozilla

namespace mozilla {
namespace layers {


class PAPZInputBridgeChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::gfx::PGPUChild;
protected:
    typedef mozilla::layers::APZEventResult APZEventResult;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::KeyboardInput KeyboardInput;
    typedef mozilla::layers::LayersId LayersId;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::MouseInput MouseInput;
    typedef mozilla::MultiTouchInput MultiTouchInput;
    typedef mozilla::PanGestureInput PanGestureInput;
    typedef mozilla::PinchGestureInput PinchGestureInput;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ScrollWheelInput ScrollWheelInput;
    typedef mozilla::layers::ScrollableLayerGuid ScrollableLayerGuid;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::TapGestureInput TapGestureInput;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::gfx::PGPUChild PGPUChild;
    typedef mozilla::gfx::PGPUParent PGPUParent;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PAPZInputBridgeChild();

    virtual ~PAPZInputBridgeChild();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PGPUChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendReceiveMultiTouchInputEvent(
            const MultiTouchInput& aEvent,
            APZEventResult* aOutResult,
            MultiTouchInput* aOutEvent);

    bool
    SendReceiveMouseInputEvent(
            const MouseInput& aEvent,
            APZEventResult* aOutResult,
            MouseInput* aOutEvent);

    bool
    SendReceivePanGestureInputEvent(
            const PanGestureInput& aEvent,
            APZEventResult* aOutResult,
            PanGestureInput* aOutEvent);

    bool
    SendReceivePinchGestureInputEvent(
            const PinchGestureInput& aEvent,
            APZEventResult* aOutResult,
            PinchGestureInput* aOutEvent);

    bool
    SendReceiveTapGestureInputEvent(
            const TapGestureInput& aEvent,
            APZEventResult* aOutResult,
            TapGestureInput* aOutEvent);

    bool
    SendReceiveScrollWheelInputEvent(
            const ScrollWheelInput& aEvent,
            APZEventResult* aOutResult,
            ScrollWheelInput* aOutEvent);

    bool
    SendReceiveKeyboardInputEvent(
            const KeyboardInput& aEvent,
            APZEventResult* aOutResult,
            KeyboardInput* aOutEvent);

    bool
    SendUpdateWheelTransaction(
            const LayoutDeviceIntPoint& aRefPoint,
            const EventMessage& aEventMessage);

    bool
    SendProcessUnhandledEvent(
            const LayoutDeviceIntPoint& aRefPoint,
            LayoutDeviceIntPoint* aOutRefPoint,
            ScrollableLayerGuid* aOutTargetGuid,
            uint64_t* aOutFocusSequenceNumber,
            LayersId* aOutLayersId);

    static bool
    Send__delete__(PAPZInputBridgeChild* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::layers::PAPZInputBridgeChild*>
{
    typedef mozilla::layers::PAPZInputBridgeChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PAPZInputBridgeChild_h
