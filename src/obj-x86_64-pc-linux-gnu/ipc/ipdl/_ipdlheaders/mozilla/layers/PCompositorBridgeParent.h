//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCompositorBridgeParent_h
#define PCompositorBridgeParent_h

#include "mozilla/layers/PCompositorBridge.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "Units.h"
#include "base/process.h"
#include "mozilla/ipc/CrossProcessMutex.h"
#include "mozilla/ipc/SharedMemoryBasic.h"
#include "mozilla/layers/CompositorOptions.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "mozilla/layers/ZoomConstraints.h"
#include "mozilla/webrender/WebRenderTypes.h"

namespace mozilla {
namespace layers {
class PAPZParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PAPZChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PAPZCTreeManagerParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PAPZCTreeManagerChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCanvasParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCanvasChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorManagerParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorManagerChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace widget {
class PCompositorWidgetParent;
} // namespace widget
} // namespace mozilla
namespace mozilla {
namespace widget {
class PCompositorWidgetChild;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace layers {
class PLayerTransactionParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PLayerTransactionChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PTextureParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PTextureChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebGLParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWebGLChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PWebRenderBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PWebRenderBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace webgpu {
class PWebGPUParent;
} // namespace webgpu
} // namespace mozilla
namespace mozilla {
namespace webgpu {
class PWebGPUChild;
} // namespace webgpu
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebGLParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PLayerTransactionParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace webgpu {
class PWebGPUParent;
} // namespace webgpu
} // namespace mozilla

namespace mozilla {
namespace widget {
class PCompositorWidgetParent;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorManagerParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PAPZParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PWebRenderBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PTextureParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PAPZCTreeManagerParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
struct null_t;
} // namespace mozilla

namespace mozilla {
namespace layers {
struct LayersId;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
struct TextureFactoryIdentifier;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
struct ScrollableLayerGuid;
} // namespace layers
} // namespace mozilla

namespace mozilla {
class TimeStamp;
} // namespace mozilla

struct DxgiAdapterDesc;

namespace mozilla {
namespace layers {


class PCompositorBridgeParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PWebGLParent;
    friend class mozilla::layers::PLayerTransactionParent;
    friend class mozilla::webgpu::PWebGPUParent;
    friend class mozilla::widget::PCompositorWidgetParent;
    friend class mozilla::layers::PCompositorManagerParent;
    friend class mozilla::layers::PAPZParent;
    friend class mozilla::layers::PWebRenderBridgeParent;
    friend class mozilla::layers::PTextureParent;
    friend class mozilla::layers::PAPZCTreeManagerParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::layers::Animatable Animatable;
    typedef mozilla::layers::Animation Animation;
    typedef mozilla::layers::AnimationSegment AnimationSegment;
    typedef mozilla::layers::AsyncParentMessageData AsyncParentMessageData;
    typedef mozilla::layers::BufferDescriptor BufferDescriptor;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::CSSIntRegion CSSIntRegion;
    typedef mozilla::CSSPoint CSSPoint;
    typedef mozilla::CSSRect CSSRect;
    typedef mozilla::layers::CanvasLayerAttributes CanvasLayerAttributes;
    typedef mozilla::layers::CollectedFrameParams CollectedFrameParams;
    typedef mozilla::layers::CollectedFramesParams CollectedFramesParams;
    typedef mozilla::gfx::ColorDepth ColorDepth;
    typedef mozilla::layers::ColorLayerAttributes ColorLayerAttributes;
    typedef mozilla::gfx::ColorRange ColorRange;
    typedef mozilla::layers::CommonLayerAttributes CommonLayerAttributes;
    typedef mozilla::layers::CompositableHandle CompositableHandle;
    typedef mozilla::layers::CompositableOperation CompositableOperation;
    typedef mozilla::layers::CompositableOperationDetail CompositableOperationDetail;
    typedef mozilla::layers::CompositionPayload CompositionPayload;
    typedef mozilla::layers::CompositorAnimations CompositorAnimations;
    typedef mozilla::layers::CompositorOptions CompositorOptions;
    typedef mozilla::widget::CompositorWidgetInitData CompositorWidgetInitData;
    typedef mozilla::layers::ContainerLayerAttributes ContainerLayerAttributes;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::layers::CrossProcessSemaphoreDescriptor CrossProcessSemaphoreDescriptor;
    typedef mozilla::CrossProcessSemaphoreHandle CrossProcessSemaphoreHandle;
    typedef mozilla::layers::CubicBezierFunction CubicBezierFunction;
    typedef mozilla::gfx::DeviceColor DeviceColor;
    typedef mozilla::layers::DiagnosticTypes DiagnosticTypes;
    typedef mozilla::layers::EGLImageDescriptor EGLImageDescriptor;
    typedef mozilla::layers::Edit Edit;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::layers::EventRegions EventRegions;
    typedef mozilla::layers::EventRegionsOverride EventRegionsOverride;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::layers::FocusTarget FocusTarget;
    typedef mozilla::layers::FrameStats FrameStats;
    typedef mozilla::gfx::Glyph Glyph;
    typedef mozilla::widget::GtkCompositorWidgetInitData GtkCompositorWidgetInitData;
    typedef mozilla::ipc::SharedMemoryBasic::Handle Handle;
    typedef mozilla::widget::HeadlessCompositorWidgetInitData HeadlessCompositorWidgetInitData;
    typedef mozilla::wr::IdNamespace IdNamespace;
    typedef mozilla::layers::ImageCompositeNotification ImageCompositeNotification;
    typedef mozilla::layers::ImageLayerAttributes ImageLayerAttributes;
    typedef mozilla::gfx::IntPoint IntPoint;
    typedef mozilla::gfx::IntRect IntRect;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::layers::LayerAttributes LayerAttributes;
    typedef mozilla::layers::LayerColor LayerColor;
    typedef mozilla::LayerCoord LayerCoord;
    typedef mozilla::layers::LayerHandle LayerHandle;
    typedef mozilla::LayerIntRect LayerIntRect;
    typedef mozilla::LayerIntRegion LayerIntRegion;
    typedef mozilla::LayerIntSize LayerIntSize;
    typedef mozilla::LayerMargin LayerMargin;
    typedef mozilla::LayerPoint LayerPoint;
    typedef mozilla::LayerRect LayerRect;
    typedef mozilla::LayerSize LayerSize;
    typedef mozilla::layers::LayersBackend LayersBackend;
    typedef mozilla::layers::LayersId LayersId;
    typedef mozilla::layers::LayersObserverEpoch LayersObserverEpoch;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::LayoutDeviceIntRect LayoutDeviceIntRect;
    typedef mozilla::LayoutDeviceIntRegion LayoutDeviceIntRegion;
    typedef mozilla::LayoutDeviceIntSize LayoutDeviceIntSize;
    typedef mozilla::LayoutDevicePoint LayoutDevicePoint;
    typedef mozilla::LayoutDeviceRect LayoutDeviceRect;
    typedef mozilla::LengthPercentage LengthPercentage;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::gfx::Matrix4x4 Matrix4x4;
    typedef mozilla::wr::MaybeExternalImageId MaybeExternalImageId;
    typedef mozilla::layers::MaybeVideoBridgeSource MaybeVideoBridgeSource;
    typedef mozilla::layers::MaybeZoomConstraints MaybeZoomConstraints;
    typedef mozilla::layers::MemoryOrShmem MemoryOrShmem;
    typedef mozilla::layers::MotionPathData MotionPathData;
    typedef mozilla::layers::OMTAValue OMTAValue;
    typedef mozilla::layers::OpAttachAsyncCompositable OpAttachAsyncCompositable;
    typedef mozilla::layers::OpAttachCompositable OpAttachCompositable;
    typedef mozilla::layers::OpContentBufferSwap OpContentBufferSwap;
    typedef mozilla::layers::OpCreateCanvasLayer OpCreateCanvasLayer;
    typedef mozilla::layers::OpCreateColorLayer OpCreateColorLayer;
    typedef mozilla::layers::OpCreateContainerLayer OpCreateContainerLayer;
    typedef mozilla::layers::OpCreateImageLayer OpCreateImageLayer;
    typedef mozilla::layers::OpCreatePaintedLayer OpCreatePaintedLayer;
    typedef mozilla::layers::OpCreateRefLayer OpCreateRefLayer;
    typedef mozilla::layers::OpDeliverAcquireFence OpDeliverAcquireFence;
    typedef mozilla::layers::OpDeliverReleaseFence OpDeliverReleaseFence;
    typedef mozilla::layers::OpDestroy OpDestroy;
    typedef mozilla::layers::OpInsertAfter OpInsertAfter;
    typedef mozilla::layers::OpNotifyNotUsed OpNotifyNotUsed;
    typedef mozilla::layers::OpPaintTextureRegion OpPaintTextureRegion;
    typedef mozilla::layers::OpPrependChild OpPrependChild;
    typedef mozilla::layers::OpRaiseToTopChild OpRaiseToTopChild;
    typedef mozilla::layers::OpRemoveChild OpRemoveChild;
    typedef mozilla::layers::OpRemoveTexture OpRemoveTexture;
    typedef mozilla::layers::OpRepositionChild OpRepositionChild;
    typedef mozilla::layers::OpSetDiagnosticTypes OpSetDiagnosticTypes;
    typedef mozilla::layers::OpSetLayerAttributes OpSetLayerAttributes;
    typedef mozilla::layers::OpSetRoot OpSetRoot;
    typedef mozilla::layers::OpSetSimpleLayerAttributes OpSetSimpleLayerAttributes;
    typedef mozilla::layers::OpUseComponentAlphaTextures OpUseComponentAlphaTextures;
    typedef mozilla::layers::OpUseTexture OpUseTexture;
    typedef mozilla::layers::OpUseTiledLayerBuffer OpUseTiledLayerBuffer;
    typedef mozilla::layers::PaintTiming PaintTiming;
    typedef mozilla::layers::PaintedLayerAttributes PaintedLayerAttributes;
    typedef mozilla::ParentLayerIntRect ParentLayerIntRect;
    typedef mozilla::ParentLayerRect ParentLayerRect;
    typedef mozilla::layers::PartialPrerenderData PartialPrerenderData;
    typedef mozilla::wr::PipelineId PipelineId;
    typedef mozilla::layers::PlaceholderTileDescriptor PlaceholderTileDescriptor;
    typedef mozilla::layers::PluginWindowData PluginWindowData;
    typedef mozilla::gfx::Point Point;
    typedef mozilla::gfx::Point3D Point3D;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::layers::RGBDescriptor RGBDescriptor;
    typedef mozilla::RayReferenceData RayReferenceData;
    typedef mozilla::layers::ReadLockDescriptor ReadLockDescriptor;
    typedef mozilla::layers::RefLayerAttributes RefLayerAttributes;
    typedef mozilla::layers::RemoteDecoderVideoSubDescriptor RemoteDecoderVideoSubDescriptor;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::gfx::SamplingFilter SamplingFilter;
    typedef mozilla::layers::ScaleMode ScaleMode;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::ScreenRotation ScreenRotation;
    typedef mozilla::layers::ScrollMetadata ScrollMetadata;
    typedef mozilla::layers::ScrollableLayerGuid ScrollableLayerGuid;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::layers::ShmemSection ShmemSection;
    typedef mozilla::SideBits SideBits;
    typedef mozilla::layers::SimpleLayerAttributes SimpleLayerAttributes;
    typedef mozilla::layers::SpecificLayerAttributes SpecificLayerAttributes;
    typedef mozilla::layers::StepFunction StepFunction;
    typedef mozilla::StereoMode StereoMode;
    typedef mozilla::StyleOffsetPath StyleOffsetPath;
    typedef mozilla::StyleOffsetRotate StyleOffsetRotate;
    typedef mozilla::StylePositionOrAuto StylePositionOrAuto;
    typedef mozilla::StyleRotate StyleRotate;
    typedef mozilla::StyleScale StyleScale;
    typedef mozilla::StyleTransform StyleTransform;
    typedef mozilla::StyleTranslate StyleTranslate;
    typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer SurfaceDescriptorAndroidHardwareBuffer;
    typedef mozilla::layers::SurfaceDescriptorBuffer SurfaceDescriptorBuffer;
    typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
    typedef mozilla::layers::SurfaceDescriptorDIB SurfaceDescriptorDIB;
    typedef mozilla::layers::SurfaceDescriptorDMABuf SurfaceDescriptorDMABuf;
    typedef mozilla::layers::SurfaceDescriptorDXGIYCbCr SurfaceDescriptorDXGIYCbCr;
    typedef mozilla::layers::SurfaceDescriptorFileMapping SurfaceDescriptorFileMapping;
    typedef mozilla::layers::SurfaceDescriptorGPUVideo SurfaceDescriptorGPUVideo;
    typedef mozilla::layers::SurfaceDescriptorMacIOSurface SurfaceDescriptorMacIOSurface;
    typedef mozilla::layers::SurfaceDescriptorPlugin SurfaceDescriptorPlugin;
    typedef mozilla::layers::SurfaceDescriptorRecorded SurfaceDescriptorRecorded;
    typedef mozilla::layers::SurfaceDescriptorRemoteDecoder SurfaceDescriptorRemoteDecoder;
    typedef mozilla::layers::SurfaceDescriptorShared SurfaceDescriptorShared;
    typedef mozilla::layers::SurfaceDescriptorSharedGLTexture SurfaceDescriptorSharedGLTexture;
    typedef mozilla::layers::SurfaceDescriptorTiles SurfaceDescriptorTiles;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::layers::SurfaceTextureDescriptor SurfaceTextureDescriptor;
    typedef mozilla::layers::TargetConfig TargetConfig;
    typedef mozilla::layers::TextureFactoryIdentifier TextureFactoryIdentifier;
    typedef mozilla::layers::TextureFlags TextureFlags;
    typedef mozilla::layers::TextureInfo TextureInfo;
    typedef mozilla::layers::TexturedTileDescriptor TexturedTileDescriptor;
    typedef mozilla::layers::ThebesBufferData ThebesBufferData;
    typedef mozilla::layers::TileDescriptor TileDescriptor;
    typedef mozilla::TimeDuration TimeDuration;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::layers::TimedTexture TimedTexture;
    typedef mozilla::layers::TimingFunction TimingFunction;
    typedef mozilla::layers::TransactionId TransactionId;
    typedef mozilla::layers::TransactionInfo TransactionInfo;
    typedef mozilla::layers::TransformData TransformData;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::layers::ScrollableLayerGuid::ViewID ViewID;
    typedef mozilla::VsyncId VsyncId;
    typedef mozilla::layers::WindowKind WindowKind;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::YCbCrDescriptor YCbCrDescriptor;
    typedef mozilla::gfx::YUVColorSpace YUVColorSpace;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::layers::PAPZParent PAPZParent;
    typedef mozilla::layers::PAPZChild PAPZChild;
    typedef mozilla::layers::PAPZCTreeManagerParent PAPZCTreeManagerParent;
    typedef mozilla::layers::PAPZCTreeManagerChild PAPZCTreeManagerChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::layers::PCanvasParent PCanvasParent;
    typedef mozilla::layers::PCanvasChild PCanvasChild;
    typedef mozilla::layers::PCompositorManagerParent PCompositorManagerParent;
    typedef mozilla::layers::PCompositorManagerChild PCompositorManagerChild;
    typedef mozilla::widget::PCompositorWidgetParent PCompositorWidgetParent;
    typedef mozilla::widget::PCompositorWidgetChild PCompositorWidgetChild;
    typedef mozilla::layers::PLayerTransactionParent PLayerTransactionParent;
    typedef mozilla::layers::PLayerTransactionChild PLayerTransactionChild;
    typedef mozilla::layers::PTextureParent PTextureParent;
    typedef mozilla::layers::PTextureChild PTextureChild;
    typedef mozilla::dom::PWebGLParent PWebGLParent;
    typedef mozilla::dom::PWebGLChild PWebGLChild;
    typedef mozilla::layers::PWebRenderBridgeParent PWebRenderBridgeParent;
    typedef mozilla::layers::PWebRenderBridgeChild PWebRenderBridgeChild;
    typedef mozilla::webgpu::PWebGPUParent PWebGPUParent;
    typedef mozilla::webgpu::PWebGPUChild PWebGPUChild;

public:
    typedef std::function<void(const bool&)> BeginRecordingResolver;
    typedef std::function<void(const bool&)> EndRecordingToDiskResolver;
    typedef std::function<void(const mozilla::Maybe<CollectedFramesParams>&)> EndRecordingToMemoryResolver;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvPCompositorWidgetConstructor(
            PCompositorWidgetParent* actor,
            const CompositorWidgetInitData& aInitData);
    virtual mozilla::ipc::IPCResult
    RecvPAPZConstructor(
            PAPZParent* actor,
            const LayersId& layersId);
    virtual mozilla::ipc::IPCResult
    RecvPAPZCTreeManagerConstructor(
            PAPZCTreeManagerParent* actor,
            const LayersId& layersId);
    virtual mozilla::ipc::IPCResult
    RecvPWebGPUConstructor(PWebGPUParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPLayerTransactionConstructor(
            PLayerTransactionParent* actor,
            nsTArray<LayersBackend>&& layersBackendHints,
            const LayersId& id);
    virtual mozilla::ipc::IPCResult
    RecvPTextureConstructor(
            PTextureParent* actor,
            const SurfaceDescriptor& aSharedData,
            const ReadLockDescriptor& aReadLock,
            const LayersBackend& aBackend,
            const TextureFlags& aTextureFlags,
            const LayersId& id,
            const uint64_t& aSerial,
            const MaybeExternalImageId& aExternalImageId);
    virtual mozilla::ipc::IPCResult
    RecvPWebRenderBridgeConstructor(
            PWebRenderBridgeParent* actor,
            const PipelineId& pipelineId,
            const LayoutDeviceIntSize& aSize,
            const WindowKind& aKind);
    virtual mozilla::ipc::IPCResult
    RecvPWebGLConstructor(PWebGLParent* actor);
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PCompositorBridgeParent();

    virtual ~PCompositorBridgeParent();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PCompositorManagerParent*
    Manager() const;

    void
    ManagedPAPZParent(nsTArray<PAPZParent*>& aArr) const;
    const ManagedContainer<PAPZParent>&
    ManagedPAPZParent() const;

    void
    ManagedPAPZCTreeManagerParent(nsTArray<PAPZCTreeManagerParent*>& aArr) const;
    const ManagedContainer<PAPZCTreeManagerParent>&
    ManagedPAPZCTreeManagerParent() const;

    void
    ManagedPLayerTransactionParent(nsTArray<PLayerTransactionParent*>& aArr) const;
    const ManagedContainer<PLayerTransactionParent>&
    ManagedPLayerTransactionParent() const;

    void
    ManagedPTextureParent(nsTArray<PTextureParent*>& aArr) const;
    const ManagedContainer<PTextureParent>&
    ManagedPTextureParent() const;

    void
    ManagedPCompositorWidgetParent(nsTArray<PCompositorWidgetParent*>& aArr) const;
    const ManagedContainer<PCompositorWidgetParent>&
    ManagedPCompositorWidgetParent() const;

    void
    ManagedPWebRenderBridgeParent(nsTArray<PWebRenderBridgeParent*>& aArr) const;
    const ManagedContainer<PWebRenderBridgeParent>&
    ManagedPWebRenderBridgeParent() const;

    void
    ManagedPWebGLParent(nsTArray<PWebGLParent*>& aArr) const;
    const ManagedContainer<PWebGLParent>&
    ManagedPWebGLParent() const;

    void
    ManagedPWebGPUParent(nsTArray<PWebGPUParent*>& aArr) const;
    const ManagedContainer<PWebGPUParent>&
    ManagedPWebGPUParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PAPZChild>
    OpenPAPZEndpoint(PAPZParent* aActor);
    bool
    BindPAPZEndpoint(
            ManagedEndpoint<PAPZParent> aEndpoint,
            PAPZParent* aActor);

    ManagedEndpoint<PAPZCTreeManagerChild>
    OpenPAPZCTreeManagerEndpoint(PAPZCTreeManagerParent* aActor);
    bool
    BindPAPZCTreeManagerEndpoint(
            ManagedEndpoint<PAPZCTreeManagerParent> aEndpoint,
            PAPZCTreeManagerParent* aActor);

    ManagedEndpoint<PLayerTransactionChild>
    OpenPLayerTransactionEndpoint(PLayerTransactionParent* aActor);
    bool
    BindPLayerTransactionEndpoint(
            ManagedEndpoint<PLayerTransactionParent> aEndpoint,
            PLayerTransactionParent* aActor);

    ManagedEndpoint<PTextureChild>
    OpenPTextureEndpoint(PTextureParent* aActor);
    bool
    BindPTextureEndpoint(
            ManagedEndpoint<PTextureParent> aEndpoint,
            PTextureParent* aActor);

    ManagedEndpoint<PCompositorWidgetChild>
    OpenPCompositorWidgetEndpoint(PCompositorWidgetParent* aActor);
    bool
    BindPCompositorWidgetEndpoint(
            ManagedEndpoint<PCompositorWidgetParent> aEndpoint,
            PCompositorWidgetParent* aActor);

    ManagedEndpoint<PWebRenderBridgeChild>
    OpenPWebRenderBridgeEndpoint(PWebRenderBridgeParent* aActor);
    bool
    BindPWebRenderBridgeEndpoint(
            ManagedEndpoint<PWebRenderBridgeParent> aEndpoint,
            PWebRenderBridgeParent* aActor);

    ManagedEndpoint<PWebGLChild>
    OpenPWebGLEndpoint(PWebGLParent* aActor);
    bool
    BindPWebGLEndpoint(
            ManagedEndpoint<PWebGLParent> aEndpoint,
            PWebGLParent* aActor);

    ManagedEndpoint<PWebGPUChild>
    OpenPWebGPUEndpoint(PWebGPUParent* aActor);
    bool
    BindPWebGPUEndpoint(
            ManagedEndpoint<PWebGPUParent> aEndpoint,
            PWebGPUParent* aActor);

    [[nodiscard]] bool
    SendInvalidateLayers(const LayersId& layersId);

    [[nodiscard]] bool
    SendDidComposite(
            const LayersId& id,
            const TransactionId& transactionId,
            const TimeStamp& compositeStart,
            const TimeStamp& compositeEnd);

    [[nodiscard]] bool
    SendNotifyFrameStats(const nsTArray<FrameStats>& aFrameStats);

    [[nodiscard]] bool
    SendRemotePaintIsReady();

    [[nodiscard]] bool
    SendParentAsyncMessages(const nsTArray<AsyncParentMessageData>& aMessages);

    [[nodiscard]] bool
    SendObserveLayersUpdate(
            const LayersId& aLayersId,
            const LayersObserverEpoch& aEpoch,
            const bool& aActive);

    [[nodiscard]] bool
    SendCompositorOptionsChanged(
            const LayersId& id,
            const CompositorOptions& newOptions);

    [[nodiscard]] bool
    SendNotifyJankedAnimations(
            const LayersId& id,
            const nsTArray<uint64_t>& aJankedAnimations);

    [[nodiscard]] bool
    SendSharedCompositorFrameMetrics(
            const Handle& metrics,
            const CrossProcessMutexHandle& mutex,
            const LayersId& aLayersId,
            const uint32_t& aAPZCId);

    [[nodiscard]] bool
    SendReleaseSharedCompositorFrameMetrics(
            const ViewID& aId,
            const uint32_t& aAPZCId);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PAPZParent> mManagedPAPZParent;
    ManagedContainer<PAPZCTreeManagerParent> mManagedPAPZCTreeManagerParent;
    ManagedContainer<PLayerTransactionParent> mManagedPLayerTransactionParent;
    ManagedContainer<PTextureParent> mManagedPTextureParent;
    ManagedContainer<PCompositorWidgetParent> mManagedPCompositorWidgetParent;
    ManagedContainer<PWebRenderBridgeParent> mManagedPWebRenderBridgeParent;
    ManagedContainer<PWebGLParent> mManagedPWebGLParent;
    ManagedContainer<PWebGPUParent> mManagedPWebGPUParent;
};


} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::layers::PCompositorBridgeParent*>
{
    typedef mozilla::layers::PCompositorBridgeParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PCompositorBridgeParent_h
