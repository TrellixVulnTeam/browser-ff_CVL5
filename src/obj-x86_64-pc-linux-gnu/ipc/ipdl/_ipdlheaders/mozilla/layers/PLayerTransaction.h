//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PLayerTransaction_h
#define PLayerTransaction_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/layers/LayersSurfaces.h"
#include "mozilla/layers/LayersMessages.h"

namespace mozilla {
namespace layers {
class PLayerTransactionParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PLayerTransactionChild;
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PLayerTransactionChild and PLayerTransactionParent
//
namespace mozilla {
namespace layers {
namespace PLayerTransaction {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PLayerTransactionParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PLayerTransactionChild>* aChild);

enum MessageType {
    PLayerTransactionStart = PLayerTransactionMsgStart << 16,
    Msg_Update__ID,
    Msg_PaintTime__ID,
    Msg_SetLayersObserverEpoch__ID,
    Msg_NewCompositable__ID,
    Msg_ReleaseLayer__ID,
    Msg_ReleaseCompositable__ID,
    Msg_SetConfirmedTargetAPZC__ID,
    Msg_SetTestSampleTime__ID,
    Reply_SetTestSampleTime__ID,
    Msg_LeaveTestMode__ID,
    Reply_LeaveTestMode__ID,
    Msg_GetAnimationValue__ID,
    Reply_GetAnimationValue__ID,
    Msg_GetTransform__ID,
    Reply_GetTransform__ID,
    Msg_SetAsyncScrollOffset__ID,
    Reply_SetAsyncScrollOffset__ID,
    Msg_SetAsyncZoom__ID,
    Reply_SetAsyncZoom__ID,
    Msg_FlushApzRepaints__ID,
    Msg_ClearCachedResources__ID,
    Msg_ScheduleComposite__ID,
    Msg_GetAPZTestData__ID,
    Reply_GetAPZTestData__ID,
    Msg_GetFrameUniformity__ID,
    Reply_GetFrameUniformity__ID,
    Msg_RequestProperty__ID,
    Reply_RequestProperty__ID,
    Msg_GetTextureFactoryIdentifier__ID,
    Reply_GetTextureFactoryIdentifier__ID,
    Msg_RecordPaintTimes__ID,
    Msg_Shutdown__ID,
    Msg_ShutdownSync__ID,
    Reply_ShutdownSync__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PLayerTransactionEnd
};

IPC::Message*
Msg_Update(int32_t routingId);

IPC::Message*
Msg_PaintTime(int32_t routingId);

IPC::Message*
Msg_SetLayersObserverEpoch(int32_t routingId);

IPC::Message*
Msg_NewCompositable(int32_t routingId);

IPC::Message*
Msg_ReleaseLayer(int32_t routingId);

IPC::Message*
Msg_ReleaseCompositable(int32_t routingId);

IPC::Message*
Msg_SetConfirmedTargetAPZC(int32_t routingId);

IPC::Message*
Msg_SetTestSampleTime(int32_t routingId);
IPC::Message*
Reply_SetTestSampleTime(int32_t routingId);

IPC::Message*
Msg_LeaveTestMode(int32_t routingId);
IPC::Message*
Reply_LeaveTestMode(int32_t routingId);

IPC::Message*
Msg_GetAnimationValue(int32_t routingId);
IPC::Message*
Reply_GetAnimationValue(int32_t routingId);

IPC::Message*
Msg_GetTransform(int32_t routingId);
IPC::Message*
Reply_GetTransform(int32_t routingId);

IPC::Message*
Msg_SetAsyncScrollOffset(int32_t routingId);
IPC::Message*
Reply_SetAsyncScrollOffset(int32_t routingId);

IPC::Message*
Msg_SetAsyncZoom(int32_t routingId);
IPC::Message*
Reply_SetAsyncZoom(int32_t routingId);

IPC::Message*
Msg_FlushApzRepaints(int32_t routingId);

IPC::Message*
Msg_ClearCachedResources(int32_t routingId);

IPC::Message*
Msg_ScheduleComposite(int32_t routingId);

IPC::Message*
Msg_GetAPZTestData(int32_t routingId);
IPC::Message*
Reply_GetAPZTestData(int32_t routingId);

IPC::Message*
Msg_GetFrameUniformity(int32_t routingId);
IPC::Message*
Reply_GetFrameUniformity(int32_t routingId);

IPC::Message*
Msg_RequestProperty(int32_t routingId);
IPC::Message*
Reply_RequestProperty(int32_t routingId);

IPC::Message*
Msg_GetTextureFactoryIdentifier(int32_t routingId);
IPC::Message*
Reply_GetTextureFactoryIdentifier(int32_t routingId);

IPC::Message*
Msg_RecordPaintTimes(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_ShutdownSync(int32_t routingId);
IPC::Message*
Reply_ShutdownSync(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PLayerTransaction
} // namespace layers
} // namespace mozilla

#endif // ifndef PLayerTransaction_h
