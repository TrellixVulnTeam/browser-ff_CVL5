//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCompositorManagerChild_h
#define PCompositorManagerChild_h

#include "mozilla/layers/PCompositorManager.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "Units.h"
#include "mozilla/TimeStamp.h"
#include "mozilla/gfx/2D.h"
#include "mozilla/ipc/SharedMemoryBasic.h"
#include "mozilla/layers/CompositorOptions.h"
#include "mozilla/layers/SharedSurfacesMemoryReport.h"
#include "mozilla/webrender/WebRenderTypes.h"

namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
struct void_t;
} // namespace mozilla

namespace mozilla {
namespace layers {


class PCompositorManagerChild :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::layers::PCompositorBridgeChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::layers::BufferDescriptor BufferDescriptor;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::CSSToLayoutDeviceScale CSSToLayoutDeviceScale;
    typedef mozilla::gfx::ColorDepth ColorDepth;
    typedef mozilla::gfx::ColorRange ColorRange;
    typedef mozilla::layers::CompositorBridgeOptions CompositorBridgeOptions;
    typedef mozilla::layers::CompositorOptions CompositorOptions;
    typedef mozilla::layers::ContentCompositorOptions ContentCompositorOptions;
    typedef mozilla::layers::EGLImageDescriptor EGLImageDescriptor;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::wr::ExternalImageId ExternalImageId;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::SharedMemoryBasic::Handle Handle;
    typedef mozilla::gfx::IntRect IntRect;
    typedef mozilla::gfx::IntSize IntSize;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::layers::MaybeVideoBridgeSource MaybeVideoBridgeSource;
    typedef mozilla::layers::MemoryOrShmem MemoryOrShmem;
    typedef mozilla::wr::MemoryReport MemoryReport;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::layers::RGBDescriptor RGBDescriptor;
    typedef mozilla::layers::RemoteDecoderVideoSubDescriptor RemoteDecoderVideoSubDescriptor;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::layers::SameProcessWidgetCompositorOptions SameProcessWidgetCompositorOptions;
    typedef mozilla::layers::SharedSurfacesMemoryReport SharedSurfacesMemoryReport;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::StereoMode StereoMode;
    typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer SurfaceDescriptorAndroidHardwareBuffer;
    typedef mozilla::layers::SurfaceDescriptorBuffer SurfaceDescriptorBuffer;
    typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
    typedef mozilla::layers::SurfaceDescriptorDIB SurfaceDescriptorDIB;
    typedef mozilla::layers::SurfaceDescriptorDMABuf SurfaceDescriptorDMABuf;
    typedef mozilla::layers::SurfaceDescriptorDXGIYCbCr SurfaceDescriptorDXGIYCbCr;
    typedef mozilla::layers::SurfaceDescriptorFileMapping SurfaceDescriptorFileMapping;
    typedef mozilla::layers::SurfaceDescriptorGPUVideo SurfaceDescriptorGPUVideo;
    typedef mozilla::layers::SurfaceDescriptorMacIOSurface SurfaceDescriptorMacIOSurface;
    typedef mozilla::layers::SurfaceDescriptorPlugin SurfaceDescriptorPlugin;
    typedef mozilla::layers::SurfaceDescriptorRecorded SurfaceDescriptorRecorded;
    typedef mozilla::layers::SurfaceDescriptorRemoteDecoder SurfaceDescriptorRemoteDecoder;
    typedef mozilla::layers::SurfaceDescriptorShared SurfaceDescriptorShared;
    typedef mozilla::layers::SurfaceDescriptorSharedGLTexture SurfaceDescriptorSharedGLTexture;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::layers::SurfaceTextureDescriptor SurfaceTextureDescriptor;
    typedef mozilla::TimeDuration TimeDuration;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::wr::WebRenderError WebRenderError;
    typedef mozilla::layers::WidgetCompositorOptions WidgetCompositorOptions;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::YCbCrDescriptor YCbCrDescriptor;
    typedef mozilla::gfx::YUVColorSpace YUVColorSpace;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::layers::PCompositorBridgeChild PCompositorBridgeChild;
    typedef mozilla::layers::PCompositorBridgeParent PCompositorBridgeParent;

public:
    typedef MozPromise<SharedSurfacesMemoryReport, ResponseRejectReason, true> ReportSharedSurfacesMemoryPromise;
    typedef MozPromise<MemoryReport, ResponseRejectReason, true> ReportMemoryPromise;

protected:
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PCompositorManagerChild();

    virtual ~PCompositorManagerChild();

public:
    void
    ManagedPCompositorBridgeChild(nsTArray<PCompositorBridgeChild*>& aArr) const;
    const ManagedContainer<PCompositorBridgeChild>&
    ManagedPCompositorBridgeChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PCompositorBridgeParent>
    OpenPCompositorBridgeEndpoint(PCompositorBridgeChild* aActor);
    bool
    BindPCompositorBridgeEndpoint(
            ManagedEndpoint<PCompositorBridgeChild> aEndpoint,
            PCompositorBridgeChild* aActor);

    PCompositorBridgeChild*
    SendPCompositorBridgeConstructor(
            PCompositorBridgeChild* actor,
            const CompositorBridgeOptions& options);

    bool
    SendAddSharedSurface(
            const ExternalImageId& aId,
            const SurfaceDescriptorShared& aDesc);

    bool
    SendRemoveSharedSurface(const ExternalImageId& aId);

    void
    SendReportSharedSurfacesMemory(
            mozilla::ipc::ResolveCallback<SharedSurfacesMemoryReport>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<ReportSharedSurfacesMemoryPromise>
    SendReportSharedSurfacesMemory();

    bool
    SendNotifyMemoryPressure();

    void
    SendReportMemory(
            mozilla::ipc::ResolveCallback<MemoryReport>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<ReportMemoryPromise>
    SendReportMemory();

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PCompositorBridgeChild> mManagedPCompositorBridgeChild;
};


} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::layers::PCompositorManagerChild*>
{
    typedef mozilla::layers::PCompositorManagerChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PCompositorManagerChild_h
