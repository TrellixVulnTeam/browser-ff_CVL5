//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCompositorBridgeChild_h
#define PCompositorBridgeChild_h

#include "mozilla/layers/PCompositorBridge.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "Units.h"
#include "base/process.h"
#include "mozilla/ipc/CrossProcessMutex.h"
#include "mozilla/ipc/SharedMemoryBasic.h"
#include "mozilla/layers/CompositorOptions.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "mozilla/layers/ZoomConstraints.h"
#include "mozilla/webrender/WebRenderTypes.h"

namespace mozilla {
namespace layers {
class PAPZChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PAPZParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PAPZCTreeManagerChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PAPZCTreeManagerParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCanvasChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCanvasParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorManagerChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorManagerParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace widget {
class PCompositorWidgetChild;
} // namespace widget
} // namespace mozilla
namespace mozilla {
namespace widget {
class PCompositorWidgetParent;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace layers {
class PLayerTransactionChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PLayerTransactionParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PTextureChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PTextureParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebGLChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PWebGLParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PWebRenderBridgeChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PWebRenderBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace webgpu {
class PWebGPUChild;
} // namespace webgpu
} // namespace mozilla
namespace mozilla {
namespace webgpu {
class PWebGPUParent;
} // namespace webgpu
} // namespace mozilla

namespace mozilla {
namespace dom {
class PWebGLChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace layers {
class PLayerTransactionChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace webgpu {
class PWebGPUChild;
} // namespace webgpu
} // namespace mozilla

namespace mozilla {
namespace widget {
class PCompositorWidgetChild;
} // namespace widget
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorManagerChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PAPZChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PWebRenderBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PTextureChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PAPZCTreeManagerChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
struct null_t;
} // namespace mozilla

namespace mozilla {
namespace layers {
struct LayersId;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
struct TextureFactoryIdentifier;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
struct ScrollableLayerGuid;
} // namespace layers
} // namespace mozilla

namespace mozilla {
class TimeStamp;
} // namespace mozilla

struct DxgiAdapterDesc;

namespace mozilla {
namespace layers {


class PCompositorBridgeChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PWebGLChild;
    friend class mozilla::layers::PLayerTransactionChild;
    friend class mozilla::webgpu::PWebGPUChild;
    friend class mozilla::widget::PCompositorWidgetChild;
    friend class mozilla::layers::PCompositorManagerChild;
    friend class mozilla::layers::PAPZChild;
    friend class mozilla::layers::PWebRenderBridgeChild;
    friend class mozilla::layers::PTextureChild;
    friend class mozilla::layers::PAPZCTreeManagerChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::layers::Animatable Animatable;
    typedef mozilla::layers::Animation Animation;
    typedef mozilla::layers::AnimationSegment AnimationSegment;
    typedef mozilla::layers::AsyncParentMessageData AsyncParentMessageData;
    typedef mozilla::layers::BufferDescriptor BufferDescriptor;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::CSSIntRegion CSSIntRegion;
    typedef mozilla::CSSPoint CSSPoint;
    typedef mozilla::CSSRect CSSRect;
    typedef mozilla::layers::CanvasLayerAttributes CanvasLayerAttributes;
    typedef mozilla::layers::CollectedFrameParams CollectedFrameParams;
    typedef mozilla::layers::CollectedFramesParams CollectedFramesParams;
    typedef mozilla::gfx::ColorDepth ColorDepth;
    typedef mozilla::layers::ColorLayerAttributes ColorLayerAttributes;
    typedef mozilla::gfx::ColorRange ColorRange;
    typedef mozilla::layers::CommonLayerAttributes CommonLayerAttributes;
    typedef mozilla::layers::CompositableHandle CompositableHandle;
    typedef mozilla::layers::CompositableOperation CompositableOperation;
    typedef mozilla::layers::CompositableOperationDetail CompositableOperationDetail;
    typedef mozilla::layers::CompositionPayload CompositionPayload;
    typedef mozilla::layers::CompositorAnimations CompositorAnimations;
    typedef mozilla::layers::CompositorOptions CompositorOptions;
    typedef mozilla::widget::CompositorWidgetInitData CompositorWidgetInitData;
    typedef mozilla::layers::ContainerLayerAttributes ContainerLayerAttributes;
    typedef mozilla::CrossProcessMutexHandle CrossProcessMutexHandle;
    typedef mozilla::layers::CrossProcessSemaphoreDescriptor CrossProcessSemaphoreDescriptor;
    typedef mozilla::CrossProcessSemaphoreHandle CrossProcessSemaphoreHandle;
    typedef mozilla::layers::CubicBezierFunction CubicBezierFunction;
    typedef mozilla::gfx::DeviceColor DeviceColor;
    typedef mozilla::layers::DiagnosticTypes DiagnosticTypes;
    typedef mozilla::layers::EGLImageDescriptor EGLImageDescriptor;
    typedef mozilla::layers::Edit Edit;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::layers::EventRegions EventRegions;
    typedef mozilla::layers::EventRegionsOverride EventRegionsOverride;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::layers::FocusTarget FocusTarget;
    typedef mozilla::layers::FrameStats FrameStats;
    typedef mozilla::gfx::Glyph Glyph;
    typedef mozilla::widget::GtkCompositorWidgetInitData GtkCompositorWidgetInitData;
    typedef mozilla::ipc::SharedMemoryBasic::Handle Handle;
    typedef mozilla::widget::HeadlessCompositorWidgetInitData HeadlessCompositorWidgetInitData;
    typedef mozilla::wr::IdNamespace IdNamespace;
    typedef mozilla::layers::ImageCompositeNotification ImageCompositeNotification;
    typedef mozilla::layers::ImageLayerAttributes ImageLayerAttributes;
    typedef mozilla::gfx::IntPoint IntPoint;
    typedef mozilla::gfx::IntRect IntRect;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::layers::LayerAttributes LayerAttributes;
    typedef mozilla::layers::LayerColor LayerColor;
    typedef mozilla::LayerCoord LayerCoord;
    typedef mozilla::layers::LayerHandle LayerHandle;
    typedef mozilla::LayerIntRect LayerIntRect;
    typedef mozilla::LayerIntRegion LayerIntRegion;
    typedef mozilla::LayerIntSize LayerIntSize;
    typedef mozilla::LayerMargin LayerMargin;
    typedef mozilla::LayerPoint LayerPoint;
    typedef mozilla::LayerRect LayerRect;
    typedef mozilla::LayerSize LayerSize;
    typedef mozilla::layers::LayersBackend LayersBackend;
    typedef mozilla::layers::LayersId LayersId;
    typedef mozilla::layers::LayersObserverEpoch LayersObserverEpoch;
    typedef mozilla::LayoutDeviceIntPoint LayoutDeviceIntPoint;
    typedef mozilla::LayoutDeviceIntRect LayoutDeviceIntRect;
    typedef mozilla::LayoutDeviceIntRegion LayoutDeviceIntRegion;
    typedef mozilla::LayoutDeviceIntSize LayoutDeviceIntSize;
    typedef mozilla::LayoutDevicePoint LayoutDevicePoint;
    typedef mozilla::LayoutDeviceRect LayoutDeviceRect;
    typedef mozilla::LengthPercentage LengthPercentage;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::gfx::Matrix4x4 Matrix4x4;
    typedef mozilla::wr::MaybeExternalImageId MaybeExternalImageId;
    typedef mozilla::layers::MaybeVideoBridgeSource MaybeVideoBridgeSource;
    typedef mozilla::layers::MaybeZoomConstraints MaybeZoomConstraints;
    typedef mozilla::layers::MemoryOrShmem MemoryOrShmem;
    typedef mozilla::layers::MotionPathData MotionPathData;
    typedef mozilla::layers::OMTAValue OMTAValue;
    typedef mozilla::layers::OpAttachAsyncCompositable OpAttachAsyncCompositable;
    typedef mozilla::layers::OpAttachCompositable OpAttachCompositable;
    typedef mozilla::layers::OpContentBufferSwap OpContentBufferSwap;
    typedef mozilla::layers::OpCreateCanvasLayer OpCreateCanvasLayer;
    typedef mozilla::layers::OpCreateColorLayer OpCreateColorLayer;
    typedef mozilla::layers::OpCreateContainerLayer OpCreateContainerLayer;
    typedef mozilla::layers::OpCreateImageLayer OpCreateImageLayer;
    typedef mozilla::layers::OpCreatePaintedLayer OpCreatePaintedLayer;
    typedef mozilla::layers::OpCreateRefLayer OpCreateRefLayer;
    typedef mozilla::layers::OpDeliverAcquireFence OpDeliverAcquireFence;
    typedef mozilla::layers::OpDeliverReleaseFence OpDeliverReleaseFence;
    typedef mozilla::layers::OpDestroy OpDestroy;
    typedef mozilla::layers::OpInsertAfter OpInsertAfter;
    typedef mozilla::layers::OpNotifyNotUsed OpNotifyNotUsed;
    typedef mozilla::layers::OpPaintTextureRegion OpPaintTextureRegion;
    typedef mozilla::layers::OpPrependChild OpPrependChild;
    typedef mozilla::layers::OpRaiseToTopChild OpRaiseToTopChild;
    typedef mozilla::layers::OpRemoveChild OpRemoveChild;
    typedef mozilla::layers::OpRemoveTexture OpRemoveTexture;
    typedef mozilla::layers::OpRepositionChild OpRepositionChild;
    typedef mozilla::layers::OpSetDiagnosticTypes OpSetDiagnosticTypes;
    typedef mozilla::layers::OpSetLayerAttributes OpSetLayerAttributes;
    typedef mozilla::layers::OpSetRoot OpSetRoot;
    typedef mozilla::layers::OpSetSimpleLayerAttributes OpSetSimpleLayerAttributes;
    typedef mozilla::layers::OpUseComponentAlphaTextures OpUseComponentAlphaTextures;
    typedef mozilla::layers::OpUseTexture OpUseTexture;
    typedef mozilla::layers::OpUseTiledLayerBuffer OpUseTiledLayerBuffer;
    typedef mozilla::layers::PaintTiming PaintTiming;
    typedef mozilla::layers::PaintedLayerAttributes PaintedLayerAttributes;
    typedef mozilla::ParentLayerIntRect ParentLayerIntRect;
    typedef mozilla::ParentLayerRect ParentLayerRect;
    typedef mozilla::layers::PartialPrerenderData PartialPrerenderData;
    typedef mozilla::wr::PipelineId PipelineId;
    typedef mozilla::layers::PlaceholderTileDescriptor PlaceholderTileDescriptor;
    typedef mozilla::layers::PluginWindowData PluginWindowData;
    typedef mozilla::gfx::Point Point;
    typedef mozilla::gfx::Point3D Point3D;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::layers::RGBDescriptor RGBDescriptor;
    typedef mozilla::RayReferenceData RayReferenceData;
    typedef mozilla::layers::ReadLockDescriptor ReadLockDescriptor;
    typedef mozilla::layers::RefLayerAttributes RefLayerAttributes;
    typedef mozilla::layers::RemoteDecoderVideoSubDescriptor RemoteDecoderVideoSubDescriptor;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::gfx::SamplingFilter SamplingFilter;
    typedef mozilla::layers::ScaleMode ScaleMode;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::ScreenRotation ScreenRotation;
    typedef mozilla::layers::ScrollMetadata ScrollMetadata;
    typedef mozilla::layers::ScrollableLayerGuid ScrollableLayerGuid;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::layers::ShmemSection ShmemSection;
    typedef mozilla::SideBits SideBits;
    typedef mozilla::layers::SimpleLayerAttributes SimpleLayerAttributes;
    typedef mozilla::layers::SpecificLayerAttributes SpecificLayerAttributes;
    typedef mozilla::layers::StepFunction StepFunction;
    typedef mozilla::StereoMode StereoMode;
    typedef mozilla::StyleOffsetPath StyleOffsetPath;
    typedef mozilla::StyleOffsetRotate StyleOffsetRotate;
    typedef mozilla::StylePositionOrAuto StylePositionOrAuto;
    typedef mozilla::StyleRotate StyleRotate;
    typedef mozilla::StyleScale StyleScale;
    typedef mozilla::StyleTransform StyleTransform;
    typedef mozilla::StyleTranslate StyleTranslate;
    typedef mozilla::layers::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorAndroidHardwareBuffer SurfaceDescriptorAndroidHardwareBuffer;
    typedef mozilla::layers::SurfaceDescriptorBuffer SurfaceDescriptorBuffer;
    typedef mozilla::layers::SurfaceDescriptorD3D10 SurfaceDescriptorD3D10;
    typedef mozilla::layers::SurfaceDescriptorDIB SurfaceDescriptorDIB;
    typedef mozilla::layers::SurfaceDescriptorDMABuf SurfaceDescriptorDMABuf;
    typedef mozilla::layers::SurfaceDescriptorDXGIYCbCr SurfaceDescriptorDXGIYCbCr;
    typedef mozilla::layers::SurfaceDescriptorFileMapping SurfaceDescriptorFileMapping;
    typedef mozilla::layers::SurfaceDescriptorGPUVideo SurfaceDescriptorGPUVideo;
    typedef mozilla::layers::SurfaceDescriptorMacIOSurface SurfaceDescriptorMacIOSurface;
    typedef mozilla::layers::SurfaceDescriptorPlugin SurfaceDescriptorPlugin;
    typedef mozilla::layers::SurfaceDescriptorRecorded SurfaceDescriptorRecorded;
    typedef mozilla::layers::SurfaceDescriptorRemoteDecoder SurfaceDescriptorRemoteDecoder;
    typedef mozilla::layers::SurfaceDescriptorShared SurfaceDescriptorShared;
    typedef mozilla::layers::SurfaceDescriptorSharedGLTexture SurfaceDescriptorSharedGLTexture;
    typedef mozilla::layers::SurfaceDescriptorTiles SurfaceDescriptorTiles;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::layers::SurfaceTextureDescriptor SurfaceTextureDescriptor;
    typedef mozilla::layers::TargetConfig TargetConfig;
    typedef mozilla::layers::TextureFactoryIdentifier TextureFactoryIdentifier;
    typedef mozilla::layers::TextureFlags TextureFlags;
    typedef mozilla::layers::TextureInfo TextureInfo;
    typedef mozilla::layers::TexturedTileDescriptor TexturedTileDescriptor;
    typedef mozilla::layers::ThebesBufferData ThebesBufferData;
    typedef mozilla::layers::TileDescriptor TileDescriptor;
    typedef mozilla::TimeDuration TimeDuration;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::layers::TimedTexture TimedTexture;
    typedef mozilla::layers::TimingFunction TimingFunction;
    typedef mozilla::layers::TransactionId TransactionId;
    typedef mozilla::layers::TransactionInfo TransactionInfo;
    typedef mozilla::layers::TransformData TransformData;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::layers::ScrollableLayerGuid::ViewID ViewID;
    typedef mozilla::VsyncId VsyncId;
    typedef mozilla::layers::WindowKind WindowKind;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::layers::YCbCrDescriptor YCbCrDescriptor;
    typedef mozilla::gfx::YUVColorSpace YUVColorSpace;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::layers::PAPZChild PAPZChild;
    typedef mozilla::layers::PAPZParent PAPZParent;
    typedef mozilla::layers::PAPZCTreeManagerChild PAPZCTreeManagerChild;
    typedef mozilla::layers::PAPZCTreeManagerParent PAPZCTreeManagerParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::layers::PCanvasChild PCanvasChild;
    typedef mozilla::layers::PCanvasParent PCanvasParent;
    typedef mozilla::layers::PCompositorManagerChild PCompositorManagerChild;
    typedef mozilla::layers::PCompositorManagerParent PCompositorManagerParent;
    typedef mozilla::widget::PCompositorWidgetChild PCompositorWidgetChild;
    typedef mozilla::widget::PCompositorWidgetParent PCompositorWidgetParent;
    typedef mozilla::layers::PLayerTransactionChild PLayerTransactionChild;
    typedef mozilla::layers::PLayerTransactionParent PLayerTransactionParent;
    typedef mozilla::layers::PTextureChild PTextureChild;
    typedef mozilla::layers::PTextureParent PTextureParent;
    typedef mozilla::dom::PWebGLChild PWebGLChild;
    typedef mozilla::dom::PWebGLParent PWebGLParent;
    typedef mozilla::layers::PWebRenderBridgeChild PWebRenderBridgeChild;
    typedef mozilla::layers::PWebRenderBridgeParent PWebRenderBridgeParent;
    typedef mozilla::webgpu::PWebGPUChild PWebGPUChild;
    typedef mozilla::webgpu::PWebGPUParent PWebGPUParent;

public:
    typedef MozPromise<bool, ResponseRejectReason, true> BeginRecordingPromise;
    typedef MozPromise<bool, ResponseRejectReason, true> EndRecordingToDiskPromise;
    typedef MozPromise<mozilla::Maybe<CollectedFramesParams>, ResponseRejectReason, true> EndRecordingToMemoryPromise;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PCompositorBridgeChild();

    virtual ~PCompositorBridgeChild();

    NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
protected:
    void ActorAlloc() final { AddRef(); }
    void ActorDealloc() final { Release(); }
public:
    PCompositorManagerChild*
    Manager() const;

    void
    ManagedPAPZChild(nsTArray<PAPZChild*>& aArr) const;
    const ManagedContainer<PAPZChild>&
    ManagedPAPZChild() const;

    void
    ManagedPAPZCTreeManagerChild(nsTArray<PAPZCTreeManagerChild*>& aArr) const;
    const ManagedContainer<PAPZCTreeManagerChild>&
    ManagedPAPZCTreeManagerChild() const;

    void
    ManagedPLayerTransactionChild(nsTArray<PLayerTransactionChild*>& aArr) const;
    const ManagedContainer<PLayerTransactionChild>&
    ManagedPLayerTransactionChild() const;

    void
    ManagedPTextureChild(nsTArray<PTextureChild*>& aArr) const;
    const ManagedContainer<PTextureChild>&
    ManagedPTextureChild() const;

    void
    ManagedPCompositorWidgetChild(nsTArray<PCompositorWidgetChild*>& aArr) const;
    const ManagedContainer<PCompositorWidgetChild>&
    ManagedPCompositorWidgetChild() const;

    void
    ManagedPWebRenderBridgeChild(nsTArray<PWebRenderBridgeChild*>& aArr) const;
    const ManagedContainer<PWebRenderBridgeChild>&
    ManagedPWebRenderBridgeChild() const;

    void
    ManagedPWebGLChild(nsTArray<PWebGLChild*>& aArr) const;
    const ManagedContainer<PWebGLChild>&
    ManagedPWebGLChild() const;

    void
    ManagedPWebGPUChild(nsTArray<PWebGPUChild*>& aArr) const;
    const ManagedContainer<PWebGPUChild>&
    ManagedPWebGPUChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PAPZParent>
    OpenPAPZEndpoint(PAPZChild* aActor);
    bool
    BindPAPZEndpoint(
            ManagedEndpoint<PAPZChild> aEndpoint,
            PAPZChild* aActor);

    ManagedEndpoint<PAPZCTreeManagerParent>
    OpenPAPZCTreeManagerEndpoint(PAPZCTreeManagerChild* aActor);
    bool
    BindPAPZCTreeManagerEndpoint(
            ManagedEndpoint<PAPZCTreeManagerChild> aEndpoint,
            PAPZCTreeManagerChild* aActor);

    ManagedEndpoint<PLayerTransactionParent>
    OpenPLayerTransactionEndpoint(PLayerTransactionChild* aActor);
    bool
    BindPLayerTransactionEndpoint(
            ManagedEndpoint<PLayerTransactionChild> aEndpoint,
            PLayerTransactionChild* aActor);

    ManagedEndpoint<PTextureParent>
    OpenPTextureEndpoint(PTextureChild* aActor);
    bool
    BindPTextureEndpoint(
            ManagedEndpoint<PTextureChild> aEndpoint,
            PTextureChild* aActor);

    ManagedEndpoint<PCompositorWidgetParent>
    OpenPCompositorWidgetEndpoint(PCompositorWidgetChild* aActor);
    bool
    BindPCompositorWidgetEndpoint(
            ManagedEndpoint<PCompositorWidgetChild> aEndpoint,
            PCompositorWidgetChild* aActor);

    ManagedEndpoint<PWebRenderBridgeParent>
    OpenPWebRenderBridgeEndpoint(PWebRenderBridgeChild* aActor);
    bool
    BindPWebRenderBridgeEndpoint(
            ManagedEndpoint<PWebRenderBridgeChild> aEndpoint,
            PWebRenderBridgeChild* aActor);

    ManagedEndpoint<PWebGLParent>
    OpenPWebGLEndpoint(PWebGLChild* aActor);
    bool
    BindPWebGLEndpoint(
            ManagedEndpoint<PWebGLChild> aEndpoint,
            PWebGLChild* aActor);

    ManagedEndpoint<PWebGPUParent>
    OpenPWebGPUEndpoint(PWebGPUChild* aActor);
    bool
    BindPWebGPUEndpoint(
            ManagedEndpoint<PWebGPUChild> aEndpoint,
            PWebGPUChild* aActor);

    static bool
    Send__delete__(PCompositorBridgeChild* actor);

    PCompositorWidgetChild*
    SendPCompositorWidgetConstructor(const CompositorWidgetInitData& aInitData);

    PCompositorWidgetChild*
    SendPCompositorWidgetConstructor(
            PCompositorWidgetChild* actor,
            const CompositorWidgetInitData& aInitData);

    bool
    SendInitialize(const LayersId& rootLayerTreeId);

    PAPZChild*
    SendPAPZConstructor(const LayersId& layersId);

    PAPZChild*
    SendPAPZConstructor(
            PAPZChild* actor,
            const LayersId& layersId);

    PAPZCTreeManagerChild*
    SendPAPZCTreeManagerConstructor(const LayersId& layersId);

    PAPZCTreeManagerChild*
    SendPAPZCTreeManagerConstructor(
            PAPZCTreeManagerChild* actor,
            const LayersId& layersId);

    PWebGPUChild*
    SendPWebGPUConstructor();

    PWebGPUChild*
    SendPWebGPUConstructor(PWebGPUChild* actor);

    bool
    SendWillClose();

    bool
    SendPause();

    bool
    SendResume();

    bool
    SendResumeAsync();

    bool
    SendNotifyChildCreated(
            const LayersId& id,
            CompositorOptions* compositorOptions);

    bool
    SendMapAndNotifyChildCreated(
            const LayersId& id,
            const ProcessId& owner,
            CompositorOptions* compositorOptions);

    bool
    SendAdoptChild(const LayersId& id);

    bool
    SendNotifyChildRecreated(
            const LayersId& id,
            CompositorOptions* compositorOptions);

    bool
    SendMakeSnapshot(
            const SurfaceDescriptor& inSnapshot,
            const IntRect& dirtyRect);

    bool
    SendFlushRendering();

    bool
    SendFlushRenderingAsync();

    bool
    SendWaitOnTransactionProcessed();

    bool
    SendForcePresent();

    bool
    SendStartFrameTimeRecording(
            const int32_t& bufferSize,
            uint32_t* startIndex);

    bool
    SendStopFrameTimeRecording(
            const uint32_t& startIndex,
            nsTArray<float>* intervals);

    PLayerTransactionChild*
    SendPLayerTransactionConstructor(
            const nsTArray<LayersBackend>& layersBackendHints,
            const LayersId& id);

    PLayerTransactionChild*
    SendPLayerTransactionConstructor(
            PLayerTransactionChild* actor,
            const nsTArray<LayersBackend>& layersBackendHints,
            const LayersId& id);

    bool
    SendNotifyRegionInvalidated(const nsIntRegion& region);

    bool
    SendRequestNotifyAfterRemotePaint();

    PTextureChild*
    SendPTextureConstructor(
            const SurfaceDescriptor& aSharedData,
            const ReadLockDescriptor& aReadLock,
            const LayersBackend& aBackend,
            const TextureFlags& aTextureFlags,
            const LayersId& id,
            const uint64_t& aSerial,
            const MaybeExternalImageId& aExternalImageId);

    PTextureChild*
    SendPTextureConstructor(
            PTextureChild* actor,
            const SurfaceDescriptor& aSharedData,
            const ReadLockDescriptor& aReadLock,
            const LayersBackend& aBackend,
            const TextureFlags& aTextureFlags,
            const LayersId& id,
            const uint64_t& aSerial,
            const MaybeExternalImageId& aExternalImageId);

    bool
    SendInitPCanvasParent(Endpoint<mozilla::layers::PCanvasParent>&& aEndpoint);

    bool
    SendReleasePCanvasParent();

    bool
    SendSyncWithCompositor();

    PWebRenderBridgeChild*
    SendPWebRenderBridgeConstructor(
            const PipelineId& pipelineId,
            const LayoutDeviceIntSize& aSize,
            const WindowKind& aKind);

    PWebRenderBridgeChild*
    SendPWebRenderBridgeConstructor(
            PWebRenderBridgeChild* actor,
            const PipelineId& pipelineId,
            const LayoutDeviceIntSize& aSize,
            const WindowKind& aKind);

    bool
    SendCheckContentOnlyTDR(
            const uint32_t& sequenceNum,
            bool* isContentOnlyTDR);

    void
    SendBeginRecording(
            const TimeStamp& aRecordingStart,
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<BeginRecordingPromise>
    SendBeginRecording(const TimeStamp& aRecordingStart);

    void
    SendEndRecordingToDisk(
            mozilla::ipc::ResolveCallback<bool>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<EndRecordingToDiskPromise>
    SendEndRecordingToDisk();

    void
    SendEndRecordingToMemory(
            mozilla::ipc::ResolveCallback<mozilla::Maybe<CollectedFramesParams>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<EndRecordingToMemoryPromise>
    SendEndRecordingToMemory();

    bool
    SendSupportsAsyncDXGISurface(bool* value);

    bool
    SendPreferredDXGIAdapter(DxgiAdapterDesc* desc);

    bool
    SendRequestFxrOutput();

    PWebGLChild*
    SendPWebGLConstructor(PWebGLChild* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PAPZChild> mManagedPAPZChild;
    ManagedContainer<PAPZCTreeManagerChild> mManagedPAPZCTreeManagerChild;
    ManagedContainer<PLayerTransactionChild> mManagedPLayerTransactionChild;
    ManagedContainer<PTextureChild> mManagedPTextureChild;
    ManagedContainer<PCompositorWidgetChild> mManagedPCompositorWidgetChild;
    ManagedContainer<PWebRenderBridgeChild> mManagedPWebRenderBridgeChild;
    ManagedContainer<PWebGLChild> mManagedPWebGLChild;
    ManagedContainer<PWebGPUChild> mManagedPWebGPUChild;
};


} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::layers::PCompositorBridgeChild*>
{
    typedef mozilla::layers::PCompositorBridgeChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PCompositorBridgeChild_h
