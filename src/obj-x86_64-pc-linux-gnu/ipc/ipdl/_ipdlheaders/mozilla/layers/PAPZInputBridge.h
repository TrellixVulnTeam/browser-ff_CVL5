//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PAPZInputBridge_h
#define PAPZInputBridge_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace layers {
class PAPZInputBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PAPZInputBridgeChild;
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PAPZInputBridgeChild and PAPZInputBridgeParent
//
namespace mozilla {
namespace layers {
namespace PAPZInputBridge {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PAPZInputBridgeParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PAPZInputBridgeChild>* aChild);

enum MessageType {
    PAPZInputBridgeStart = PAPZInputBridgeMsgStart << 16,
    Msg_ReceiveMultiTouchInputEvent__ID,
    Reply_ReceiveMultiTouchInputEvent__ID,
    Msg_ReceiveMouseInputEvent__ID,
    Reply_ReceiveMouseInputEvent__ID,
    Msg_ReceivePanGestureInputEvent__ID,
    Reply_ReceivePanGestureInputEvent__ID,
    Msg_ReceivePinchGestureInputEvent__ID,
    Reply_ReceivePinchGestureInputEvent__ID,
    Msg_ReceiveTapGestureInputEvent__ID,
    Reply_ReceiveTapGestureInputEvent__ID,
    Msg_ReceiveScrollWheelInputEvent__ID,
    Reply_ReceiveScrollWheelInputEvent__ID,
    Msg_ReceiveKeyboardInputEvent__ID,
    Reply_ReceiveKeyboardInputEvent__ID,
    Msg_UpdateWheelTransaction__ID,
    Msg_ProcessUnhandledEvent__ID,
    Reply_ProcessUnhandledEvent__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PAPZInputBridgeEnd
};

IPC::Message*
Msg_ReceiveMultiTouchInputEvent(int32_t routingId);
IPC::Message*
Reply_ReceiveMultiTouchInputEvent(int32_t routingId);

IPC::Message*
Msg_ReceiveMouseInputEvent(int32_t routingId);
IPC::Message*
Reply_ReceiveMouseInputEvent(int32_t routingId);

IPC::Message*
Msg_ReceivePanGestureInputEvent(int32_t routingId);
IPC::Message*
Reply_ReceivePanGestureInputEvent(int32_t routingId);

IPC::Message*
Msg_ReceivePinchGestureInputEvent(int32_t routingId);
IPC::Message*
Reply_ReceivePinchGestureInputEvent(int32_t routingId);

IPC::Message*
Msg_ReceiveTapGestureInputEvent(int32_t routingId);
IPC::Message*
Reply_ReceiveTapGestureInputEvent(int32_t routingId);

IPC::Message*
Msg_ReceiveScrollWheelInputEvent(int32_t routingId);
IPC::Message*
Reply_ReceiveScrollWheelInputEvent(int32_t routingId);

IPC::Message*
Msg_ReceiveKeyboardInputEvent(int32_t routingId);
IPC::Message*
Reply_ReceiveKeyboardInputEvent(int32_t routingId);

IPC::Message*
Msg_UpdateWheelTransaction(int32_t routingId);

IPC::Message*
Msg_ProcessUnhandledEvent(int32_t routingId);
IPC::Message*
Reply_ProcessUnhandledEvent(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PAPZInputBridge
} // namespace layers
} // namespace mozilla

#endif // ifndef PAPZInputBridge_h
