//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PAPZ_h
#define PAPZ_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace layers {
class PAPZParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PAPZChild;
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PAPZChild and PAPZParent
//
namespace mozilla {
namespace layers {
namespace PAPZ {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PAPZParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PAPZChild>* aChild);

enum MessageType {
    PAPZStart = PAPZMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_LayerTransforms__ID,
    Msg_RequestContentRepaint__ID,
    Msg_UpdateOverscrollVelocity__ID,
    Msg_UpdateOverscrollOffset__ID,
    Msg_NotifyMozMouseScrollEvent__ID,
    Msg_NotifyAPZStateChange__ID,
    Msg_NotifyFlushComplete__ID,
    Msg_NotifyAsyncScrollbarDragInitiated__ID,
    Msg_NotifyAsyncScrollbarDragRejected__ID,
    Msg_NotifyAsyncAutoscrollRejected__ID,
    Msg_Destroy__ID,
    PAPZEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_LayerTransforms(int32_t routingId);

IPC::Message*
Msg_RequestContentRepaint(int32_t routingId);

IPC::Message*
Msg_UpdateOverscrollVelocity(int32_t routingId);

IPC::Message*
Msg_UpdateOverscrollOffset(int32_t routingId);

IPC::Message*
Msg_NotifyMozMouseScrollEvent(int32_t routingId);

IPC::Message*
Msg_NotifyAPZStateChange(int32_t routingId);

IPC::Message*
Msg_NotifyFlushComplete(int32_t routingId);

IPC::Message*
Msg_NotifyAsyncScrollbarDragInitiated(int32_t routingId);

IPC::Message*
Msg_NotifyAsyncScrollbarDragRejected(int32_t routingId);

IPC::Message*
Msg_NotifyAsyncAutoscrollRejected(int32_t routingId);

IPC::Message*
Msg_Destroy(int32_t routingId);



} // namespace PAPZ
} // namespace layers
} // namespace mozilla

#endif // ifndef PAPZ_h
