//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PTexture_h
#define PTexture_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/layers/LayersSurfaces.h"

namespace mozilla {
namespace layers {
class PTextureParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PTextureChild;
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PTextureChild and PTextureParent
//
namespace mozilla {
namespace layers {
namespace PTexture {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PTextureParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PTextureChild>* aChild);

enum MessageType {
    PTextureStart = PTextureMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Destroy__ID,
    Msg_RecycleTexture__ID,
    PTextureEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Destroy(int32_t routingId);

IPC::Message*
Msg_RecycleTexture(int32_t routingId);



} // namespace PTexture
} // namespace layers
} // namespace mozilla

#endif // ifndef PTexture_h
