//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCompositorBridgeTypes_h
#define PCompositorBridgeTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CollectedFrameParams|
//
namespace mozilla {
namespace layers {
class CollectedFrameParams final
{
private:

public:
    MOZ_IMPLICIT CollectedFrameParams() :
        timeOffset_(),
        length_()
    {
    }

    MOZ_IMPLICIT CollectedFrameParams(
            const double& _timeOffset,
            const uint32_t& _length) :
        timeOffset_(_timeOffset),
        length_(_length)
    {
    }

    double&
    timeOffset()
    {
        return timeOffset_;
    }
    const double&
    timeOffset() const
    {
        return timeOffset_;
    }

    uint32_t&
    length()
    {
        return length_;
    }
    const uint32_t&
    length() const
    {
        return length_;
    }

private:
    double timeOffset_;
    uint32_t length_;
};
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::layers::CollectedFrameParams>
{
    typedef mozilla::layers::CollectedFrameParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CollectedFramesParams|
//
namespace mozilla {
namespace layers {
class CollectedFramesParams final
{
private:
    typedef mozilla::layers::CollectedFrameParams CollectedFrameParams;
    typedef mozilla::ipc::Shmem Shmem;

public:
    MOZ_IMPLICIT CollectedFramesParams() :
        frames_(),
        buffer_(),
        recordingStart_()
    {
    }

    MOZ_IMPLICIT CollectedFramesParams(
            const double& _recordingStart,
            const nsTArray<CollectedFrameParams>& _frames,
            Shmem&& _buffer) :
        frames_(_frames),
        buffer_(_buffer),
        recordingStart_(_recordingStart)
    {
    }

    double&
    recordingStart()
    {
        return recordingStart_;
    }
    const double&
    recordingStart() const
    {
        return recordingStart_;
    }

    nsTArray<CollectedFrameParams>&
    frames()
    {
        return frames_;
    }
    const nsTArray<CollectedFrameParams>&
    frames() const
    {
        return frames_;
    }

    Shmem&
    buffer()
    {
        return buffer_;
    }
    Shmem&
    buffer() const
    {
        return const_cast<Shmem&>(buffer_);
    }

private:
    CopyableTArray<CollectedFrameParams> frames_;
    Shmem buffer_;
    double recordingStart_;
};
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::layers::CollectedFramesParams>
{
    typedef mozilla::layers::CollectedFramesParams paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PCompositorBridgeTypes_h
