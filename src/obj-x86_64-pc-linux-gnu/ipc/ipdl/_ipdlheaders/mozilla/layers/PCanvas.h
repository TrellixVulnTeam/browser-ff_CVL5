//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCanvas_h
#define PCanvas_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace layers {
class PCanvasParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCanvasChild;
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PCanvasChild and PCanvasParent
//
namespace mozilla {
namespace layers {
namespace PCanvas {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PCanvasParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PCanvasChild>* aChild);

enum MessageType {
    PCanvasStart = PCanvasMsgStart << 16,
    Msg_InitTranslator__ID,
    Msg_ResumeTranslation__ID,
    Msg_NotifyDeviceChanged__ID,
    Msg_Deactivate__ID,
    PCanvasEnd
};

IPC::Message*
Msg_InitTranslator(int32_t routingId);

IPC::Message*
Msg_ResumeTranslation(int32_t routingId);

IPC::Message*
Msg_NotifyDeviceChanged(int32_t routingId);

IPC::Message*
Msg_Deactivate(int32_t routingId);



} // namespace PCanvas
} // namespace layers
} // namespace mozilla

#endif // ifndef PCanvas_h
