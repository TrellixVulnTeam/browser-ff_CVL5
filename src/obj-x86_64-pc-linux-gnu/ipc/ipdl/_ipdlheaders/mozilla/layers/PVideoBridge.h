//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PVideoBridge_h
#define PVideoBridge_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/layers/LayersSurfaces.h"
#include "mozilla/layers/LayersMessages.h"

namespace mozilla {
namespace layers {
class PVideoBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PVideoBridgeChild;
} // namespace layers
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PVideoBridgeChild and PVideoBridgeParent
//
namespace mozilla {
namespace layers {
namespace PVideoBridge {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::layers::PVideoBridgeParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::layers::PVideoBridgeChild>* aChild);

enum MessageType {
    PVideoBridgeStart = PVideoBridgeMsgStart << 16,
    Msg_PTextureConstructor__ID,
    Reply_PTextureConstructor__ID,
    PVideoBridgeEnd
};

IPC::Message*
Msg_PTextureConstructor(int32_t routingId);
IPC::Message*
Reply_PTextureConstructor(int32_t routingId);



} // namespace PVideoBridge
} // namespace layers
} // namespace mozilla

#endif // ifndef PVideoBridge_h
