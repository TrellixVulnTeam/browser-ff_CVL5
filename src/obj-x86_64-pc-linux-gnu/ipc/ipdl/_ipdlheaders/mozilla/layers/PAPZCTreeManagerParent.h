//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PAPZCTreeManagerParent_h
#define PAPZCTreeManagerParent_h

#include "mozilla/layers/PAPZCTreeManager.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "InputData.h"
#include "Units.h"
#include "mozilla/EventForwards.h"
#include "mozilla/layers/AsyncDragMetrics.h"
#include "mozilla/layers/GeckoContentControllerTypes.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "mozilla/layers/ZoomConstraints.h"
#include "mozilla/webrender/WebRenderTypes.h"

namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class KeyboardMap;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {


class PAPZCTreeManagerParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::layers::PCompositorBridgeParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::layers::AsyncDragMetrics AsyncDragMetrics;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::layers::GeckoContentController_TapType GeckoContentController_TapType;
    typedef mozilla::layers::KeyboardMap KeyboardMap;
    typedef mozilla::LayoutDevicePoint LayoutDevicePoint;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::layers::MaybeZoomConstraints MaybeZoomConstraints;
    typedef mozilla::Modifiers Modifiers;
    typedef mozilla::PinchGestureInput::PinchGestureType PinchGestureType;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::wr::RenderRoot RenderRoot;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::layers::ScrollableLayerGuid ScrollableLayerGuid;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::layers::TouchBehaviorFlags TouchBehaviorFlags;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::layers::ScrollableLayerGuid::ViewID ViewID;
    typedef mozilla::layers::PCompositorBridgeParent PCompositorBridgeParent;
    typedef mozilla::layers::PCompositorBridgeChild PCompositorBridgeChild;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PAPZCTreeManagerParent();

    virtual ~PAPZCTreeManagerParent();

public:
    PCompositorBridgeParent*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendHandleTap(
            const GeckoContentController_TapType& aType,
            const LayoutDevicePoint& point,
            const Modifiers& aModifiers,
            const ScrollableLayerGuid& aGuid,
            const uint64_t& aInputBlockId);

    [[nodiscard]] bool
    SendNotifyPinchGesture(
            const PinchGestureType& aType,
            const ScrollableLayerGuid& aGuid,
            const LayoutDevicePoint& aFocusPoint,
            const LayoutDeviceCoord& aSpanChange,
            const Modifiers& aModifiers);

    [[nodiscard]] bool
    SendCancelAutoscroll(const ViewID& aScrollId);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::layers::PAPZCTreeManagerParent*>
{
    typedef mozilla::layers::PAPZCTreeManagerParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PAPZCTreeManagerParent_h
