//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGPU_h
#define PGPU_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "base/process.h"
#include "mozilla/layers/LayersTypes.h"
#include "mozilla/gfx/GraphicsMessages.h"
#include "mozilla/dom/MemoryReportTypes.h"
#include "mozilla/HangTypes.h"
#include "mozilla/dom/PrefsTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct LayerTreeIdMapping|
//
namespace mozilla {
namespace gfx {
class LayerTreeIdMapping final
{
private:
    typedef mozilla::layers::LayersId LayersId;
    typedef base::ProcessId ProcessId;

public:
    MOZ_IMPLICIT LayerTreeIdMapping() :
        layersId_(),
        ownerId_()
    {
    }

    MOZ_IMPLICIT LayerTreeIdMapping(
            const LayersId& _layersId,
            const ProcessId& _ownerId) :
        layersId_(_layersId),
        ownerId_(_ownerId)
    {
    }

    LayersId&
    layersId()
    {
        return layersId_;
    }
    const LayersId&
    layersId() const
    {
        return layersId_;
    }

    ProcessId&
    ownerId()
    {
        return ownerId_;
    }
    const ProcessId&
    ownerId() const
    {
        return ownerId_;
    }

private:
    LayersId layersId_;
    ProcessId ownerId_;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::LayerTreeIdMapping>
{
    typedef mozilla::gfx::LayerTreeIdMapping paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace gfx {
class PGPUParent;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PGPUChild;
} // namespace gfx
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PGPUChild and PGPUParent
//
namespace mozilla {
namespace gfx {
namespace PGPU {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gfx::PGPUParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gfx::PGPUChild>* aChild);

enum MessageType {
    PGPUStart = PGPUMsgStart << 16,
    Msg_PAPZInputBridgeConstructor__ID,
    Reply_PAPZInputBridgeConstructor__ID,
    Msg_Init__ID,
    Msg_InitCompositorManager__ID,
    Msg_InitVsyncBridge__ID,
    Msg_InitImageBridge__ID,
    Msg_InitVideoBridge__ID,
    Msg_InitVRManager__ID,
    Msg_InitUiCompositorController__ID,
    Msg_InitProfiler__ID,
    Msg_InitVR__ID,
    Msg_UpdateVar__ID,
    Msg_PreferenceUpdate__ID,
    Msg_NewContentCompositorManager__ID,
    Msg_NewContentImageBridge__ID,
    Msg_NewContentVRManager__ID,
    Msg_NewContentRemoteDecoderManager__ID,
    Msg_AddLayerTreeIdMapping__ID,
    Reply_AddLayerTreeIdMapping__ID,
    Msg_RemoveLayerTreeIdMapping__ID,
    Msg_GetDeviceStatus__ID,
    Reply_GetDeviceStatus__ID,
    Msg_SimulateDeviceReset__ID,
    Reply_SimulateDeviceReset__ID,
    Msg_NotifyGpuObservers__ID,
    Msg_RequestMemoryReport__ID,
    Reply_RequestMemoryReport__ID,
    Msg_ShutdownVR__ID,
    Msg_UpdatePerfStatsCollectionMask__ID,
    Msg_CollectPerfStatsJSON__ID,
    Reply_CollectPerfStatsJSON__ID,
    Msg_InitComplete__ID,
    Msg_ReportCheckerboard__ID,
    Msg_GraphicsError__ID,
    Msg_InitCrashReporter__ID,
    Msg_CreateVRProcess__ID,
    Msg_ShutdownVRProcess__ID,
    Msg_NotifyUiObservers__ID,
    Msg_AccumulateChildHistograms__ID,
    Msg_AccumulateChildKeyedHistograms__ID,
    Msg_UpdateChildScalars__ID,
    Msg_UpdateChildKeyedScalars__ID,
    Msg_RecordChildEvents__ID,
    Msg_RecordDiscardedData__ID,
    Msg_NotifyDeviceReset__ID,
    Msg_AddMemoryReport__ID,
    Msg_UpdateFeature__ID,
    Msg_UsedFallback__ID,
    Msg_BHRThreadHang__ID,
    Msg_UpdateMediaCodecsSupported__ID,
    PGPUEnd
};

IPC::Message*
Msg_PAPZInputBridgeConstructor(int32_t routingId);
IPC::Message*
Reply_PAPZInputBridgeConstructor(int32_t routingId);

IPC::Message*
Msg_Init(int32_t routingId);

IPC::Message*
Msg_InitCompositorManager(int32_t routingId);

IPC::Message*
Msg_InitVsyncBridge(int32_t routingId);

IPC::Message*
Msg_InitImageBridge(int32_t routingId);

IPC::Message*
Msg_InitVideoBridge(int32_t routingId);

IPC::Message*
Msg_InitVRManager(int32_t routingId);

IPC::Message*
Msg_InitUiCompositorController(int32_t routingId);

IPC::Message*
Msg_InitProfiler(int32_t routingId);

IPC::Message*
Msg_InitVR(int32_t routingId);

IPC::Message*
Msg_UpdateVar(int32_t routingId);

IPC::Message*
Msg_PreferenceUpdate(int32_t routingId);

IPC::Message*
Msg_NewContentCompositorManager(int32_t routingId);

IPC::Message*
Msg_NewContentImageBridge(int32_t routingId);

IPC::Message*
Msg_NewContentVRManager(int32_t routingId);

IPC::Message*
Msg_NewContentRemoteDecoderManager(int32_t routingId);

IPC::Message*
Msg_AddLayerTreeIdMapping(int32_t routingId);
IPC::Message*
Reply_AddLayerTreeIdMapping(int32_t routingId);

IPC::Message*
Msg_RemoveLayerTreeIdMapping(int32_t routingId);

IPC::Message*
Msg_GetDeviceStatus(int32_t routingId);
IPC::Message*
Reply_GetDeviceStatus(int32_t routingId);

IPC::Message*
Msg_SimulateDeviceReset(int32_t routingId);
IPC::Message*
Reply_SimulateDeviceReset(int32_t routingId);

IPC::Message*
Msg_NotifyGpuObservers(int32_t routingId);

IPC::Message*
Msg_RequestMemoryReport(int32_t routingId);
IPC::Message*
Reply_RequestMemoryReport(int32_t routingId);

IPC::Message*
Msg_ShutdownVR(int32_t routingId);

IPC::Message*
Msg_UpdatePerfStatsCollectionMask(int32_t routingId);

IPC::Message*
Msg_CollectPerfStatsJSON(int32_t routingId);
IPC::Message*
Reply_CollectPerfStatsJSON(int32_t routingId);

IPC::Message*
Msg_InitComplete(int32_t routingId);

IPC::Message*
Msg_ReportCheckerboard(int32_t routingId);

IPC::Message*
Msg_GraphicsError(int32_t routingId);

IPC::Message*
Msg_InitCrashReporter(int32_t routingId);

IPC::Message*
Msg_CreateVRProcess(int32_t routingId);

IPC::Message*
Msg_ShutdownVRProcess(int32_t routingId);

IPC::Message*
Msg_NotifyUiObservers(int32_t routingId);

IPC::Message*
Msg_AccumulateChildHistograms(int32_t routingId);

IPC::Message*
Msg_AccumulateChildKeyedHistograms(int32_t routingId);

IPC::Message*
Msg_UpdateChildScalars(int32_t routingId);

IPC::Message*
Msg_UpdateChildKeyedScalars(int32_t routingId);

IPC::Message*
Msg_RecordChildEvents(int32_t routingId);

IPC::Message*
Msg_RecordDiscardedData(int32_t routingId);

IPC::Message*
Msg_NotifyDeviceReset(int32_t routingId);

IPC::Message*
Msg_AddMemoryReport(int32_t routingId);

IPC::Message*
Msg_UpdateFeature(int32_t routingId);

IPC::Message*
Msg_UsedFallback(int32_t routingId);

IPC::Message*
Msg_BHRThreadHang(int32_t routingId);

IPC::Message*
Msg_UpdateMediaCodecsSupported(int32_t routingId);



} // namespace PGPU
} // namespace gfx
} // namespace mozilla

#endif // ifndef PGPU_h
