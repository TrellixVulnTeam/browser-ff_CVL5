//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PVRManager_h
#define PVRManager_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/layers/LayersSurfaces.h"
#include "mozilla/layers/LayersMessages.h"
#include "mozilla/dom/GamepadEventTypes.h"

namespace mozilla {
namespace gfx {
class PVRManagerParent;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PVRManagerChild;
} // namespace gfx
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PVRManagerChild and PVRManagerParent
//
namespace mozilla {
namespace gfx {
namespace PVRManager {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gfx::PVRManagerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gfx::PVRManagerChild>* aChild);

enum MessageType {
    PVRManagerStart = PVRManagerMsgStart << 16,
    Msg_PVRLayerConstructor__ID,
    Reply_PVRLayerConstructor__ID,
    Msg_DetectRuntimes__ID,
    Msg_RefreshDisplays__ID,
    Msg_SetGroupMask__ID,
    Msg_SetHaveEventListener__ID,
    Msg_ControllerListenerAdded__ID,
    Msg_ControllerListenerRemoved__ID,
    Msg_VibrateHaptic__ID,
    Msg_StopVibrateHaptic__ID,
    Msg_StartVRNavigation__ID,
    Msg_StopVRNavigation__ID,
    Msg_StartActivity__ID,
    Msg_StopActivity__ID,
    Msg_RunPuppet__ID,
    Msg_ResetPuppet__ID,
    Msg_UpdateDisplayInfo__ID,
    Msg_UpdateRuntimeCapabilities__ID,
    Msg_ReplyGamepadVibrateHaptic__ID,
    Msg_NotifyPuppetCommandBufferCompleted__ID,
    Msg_NotifyPuppetResetComplete__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PVRManagerEnd
};

IPC::Message*
Msg_PVRLayerConstructor(int32_t routingId);
IPC::Message*
Reply_PVRLayerConstructor(int32_t routingId);

IPC::Message*
Msg_DetectRuntimes(int32_t routingId);

IPC::Message*
Msg_RefreshDisplays(int32_t routingId);

IPC::Message*
Msg_SetGroupMask(int32_t routingId);

IPC::Message*
Msg_SetHaveEventListener(int32_t routingId);

IPC::Message*
Msg_ControllerListenerAdded(int32_t routingId);

IPC::Message*
Msg_ControllerListenerRemoved(int32_t routingId);

IPC::Message*
Msg_VibrateHaptic(int32_t routingId);

IPC::Message*
Msg_StopVibrateHaptic(int32_t routingId);

IPC::Message*
Msg_StartVRNavigation(int32_t routingId);

IPC::Message*
Msg_StopVRNavigation(int32_t routingId);

IPC::Message*
Msg_StartActivity(int32_t routingId);

IPC::Message*
Msg_StopActivity(int32_t routingId);

IPC::Message*
Msg_RunPuppet(int32_t routingId);

IPC::Message*
Msg_ResetPuppet(int32_t routingId);

IPC::Message*
Msg_UpdateDisplayInfo(int32_t routingId);

IPC::Message*
Msg_UpdateRuntimeCapabilities(int32_t routingId);

IPC::Message*
Msg_ReplyGamepadVibrateHaptic(int32_t routingId);

IPC::Message*
Msg_NotifyPuppetCommandBufferCompleted(int32_t routingId);

IPC::Message*
Msg_NotifyPuppetResetComplete(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PVRManager
} // namespace gfx
} // namespace mozilla

#endif // ifndef PVRManager_h
