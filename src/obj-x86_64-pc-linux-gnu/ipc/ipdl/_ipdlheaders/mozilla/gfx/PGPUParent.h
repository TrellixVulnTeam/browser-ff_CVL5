//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGPUParent_h
#define PGPUParent_h

#include "mozilla/gfx/PGPU.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
class nsIFile;

// Headers for things that cannot be forward declared
#include "PDMFactory.h"
#include "base/process.h"
#include "gfxFallback.h"
#include "gfxFeature.h"
#include "mozilla/TelemetryComms.h"
#include "mozilla/dom/NativeThreadId.h"
#include "mozilla/layers/LayersTypes.h"

namespace mozilla {
namespace layers {
class PAPZInputBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PAPZInputBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorManagerParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorManagerChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PImageBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PImageBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
class PProfilerParent;
} // namespace mozilla
namespace mozilla {
class PProfilerChild;
} // namespace mozilla

namespace mozilla {
namespace gfx {
class PVRGPUParent;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PVRGPUChild;
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace gfx {
class PVRManagerParent;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PVRManagerChild;
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace layers {
class PVideoBridgeParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PVideoBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace gfx {
class PVsyncBridgeParent;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PVsyncBridgeChild;
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace layers {
class PUiCompositorControllerParent;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PUiCompositorControllerChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
class PRemoteDecoderManagerParent;
} // namespace mozilla
namespace mozilla {
class PRemoteDecoderManagerChild;
} // namespace mozilla

namespace mozilla {
namespace layers {
class PAPZInputBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace gfx {


class PGPUParent :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::layers::PAPZInputBridgeParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::gfx::BackendType BackendType;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::Telemetry::ChildEventData ChildEventData;
    typedef mozilla::gfx::ContentDeviceData ContentDeviceData;
    typedef mozilla::gfx::D3D11DeviceStatus D3D11DeviceStatus;
    typedef mozilla::gfx::DevicePrefs DevicePrefs;
    typedef mozilla::Telemetry::DiscardedData DiscardedData;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::gfx::Fallback Fallback;
    typedef mozilla::gfx::Feature Feature;
    typedef mozilla::gfx::FeatureFailure FeatureFailure;
    typedef mozilla::gfx::FeatureStatus FeatureStatus;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::gfx::GPUDeviceData GPUDeviceData;
    typedef mozilla::gfx::GfxInfoFeatureStatus GfxInfoFeatureStatus;
    typedef mozilla::gfx::GfxVarUpdate GfxVarUpdate;
    typedef mozilla::gfx::GfxVarValue GfxVarValue;
    typedef mozilla::HangAnnotation HangAnnotation;
    typedef mozilla::HangDetails HangDetails;
    typedef mozilla::HangEntry HangEntry;
    typedef mozilla::HangEntryBufOffset HangEntryBufOffset;
    typedef mozilla::HangEntryChromeScript HangEntryChromeScript;
    typedef mozilla::HangEntryContent HangEntryContent;
    typedef mozilla::HangEntryJit HangEntryJit;
    typedef mozilla::HangEntryModOffset HangEntryModOffset;
    typedef mozilla::HangEntryProgCounter HangEntryProgCounter;
    typedef mozilla::HangEntrySuppressed HangEntrySuppressed;
    typedef mozilla::HangEntryWasm HangEntryWasm;
    typedef mozilla::HangModule HangModule;
    typedef mozilla::HangStack HangStack;
    typedef mozilla::Telemetry::HistogramAccumulation HistogramAccumulation;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::Telemetry::KeyedHistogramAccumulation KeyedHistogramAccumulation;
    typedef mozilla::Telemetry::KeyedScalarAction KeyedScalarAction;
    typedef mozilla::gfx::LayerTreeIdMapping LayerTreeIdMapping;
    typedef mozilla::layers::LayersId LayersId;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::PDMFactory::MediaCodecsSupported MediaCodecsSupported;
    typedef mozilla::dom::MemoryReport MemoryReport;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::dom::Pref Pref;
    typedef mozilla::dom::PrefValue PrefValue;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::Telemetry::ScalarAction ScalarAction;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::TimeDuration TimeDuration;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::gfx::D3D11Checks::VideoFormatOption VideoFormatOption;
    typedef mozilla::gfx::D3D11Checks::VideoFormatOptionSet VideoFormatOptionSet;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::layers::PAPZInputBridgeParent PAPZInputBridgeParent;
    typedef mozilla::layers::PAPZInputBridgeChild PAPZInputBridgeChild;
    typedef mozilla::layers::PCompositorManagerParent PCompositorManagerParent;
    typedef mozilla::layers::PCompositorManagerChild PCompositorManagerChild;
    typedef mozilla::layers::PImageBridgeParent PImageBridgeParent;
    typedef mozilla::layers::PImageBridgeChild PImageBridgeChild;
    typedef mozilla::PProfilerParent PProfilerParent;
    typedef mozilla::PProfilerChild PProfilerChild;
    typedef mozilla::gfx::PVRGPUParent PVRGPUParent;
    typedef mozilla::gfx::PVRGPUChild PVRGPUChild;
    typedef mozilla::gfx::PVRManagerParent PVRManagerParent;
    typedef mozilla::gfx::PVRManagerChild PVRManagerChild;
    typedef mozilla::layers::PVideoBridgeParent PVideoBridgeParent;
    typedef mozilla::layers::PVideoBridgeChild PVideoBridgeChild;
    typedef mozilla::gfx::PVsyncBridgeParent PVsyncBridgeParent;
    typedef mozilla::gfx::PVsyncBridgeChild PVsyncBridgeChild;
    typedef mozilla::layers::PUiCompositorControllerParent PUiCompositorControllerParent;
    typedef mozilla::layers::PUiCompositorControllerChild PUiCompositorControllerChild;
    typedef mozilla::PRemoteDecoderManagerParent PRemoteDecoderManagerParent;
    typedef mozilla::PRemoteDecoderManagerChild PRemoteDecoderManagerChild;

public:
    typedef std::function<void(const uint32_t&)> RequestMemoryReportResolver;
    typedef std::function<void(const nsCString&)> CollectPerfStatsJSONResolver;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPAPZInputBridgeConstructor(
            PAPZInputBridgeParent* actor,
            const LayersId& aLayersId);
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PGPUParent();

    virtual ~PGPUParent();

public:
    void
    ManagedPAPZInputBridgeParent(nsTArray<PAPZInputBridgeParent*>& aArr) const;
    const ManagedContainer<PAPZInputBridgeParent>&
    ManagedPAPZInputBridgeParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PAPZInputBridgeChild>
    OpenPAPZInputBridgeEndpoint(PAPZInputBridgeParent* aActor);
    bool
    BindPAPZInputBridgeEndpoint(
            ManagedEndpoint<PAPZInputBridgeParent> aEndpoint,
            PAPZInputBridgeParent* aActor);

    [[nodiscard]] bool
    SendInitComplete(const GPUDeviceData& data);

    [[nodiscard]] bool
    SendReportCheckerboard(
            const uint32_t& severity,
            const nsCString& log);

    [[nodiscard]] bool
    SendGraphicsError(const nsCString& aError);

    [[nodiscard]] bool
    SendInitCrashReporter(const NativeThreadId& threadId);

    [[nodiscard]] bool
    SendCreateVRProcess();

    [[nodiscard]] bool
    SendShutdownVRProcess();

    [[nodiscard]] bool
    SendNotifyUiObservers(const nsCString& aTopic);

    [[nodiscard]] bool
    SendAccumulateChildHistograms(const nsTArray<HistogramAccumulation>& accumulations);

    [[nodiscard]] bool
    SendAccumulateChildKeyedHistograms(const nsTArray<KeyedHistogramAccumulation>& accumulations);

    [[nodiscard]] bool
    SendUpdateChildScalars(const nsTArray<ScalarAction>& actions);

    [[nodiscard]] bool
    SendUpdateChildKeyedScalars(const nsTArray<KeyedScalarAction>& actions);

    [[nodiscard]] bool
    SendRecordChildEvents(const nsTArray<ChildEventData>& events);

    [[nodiscard]] bool
    SendRecordDiscardedData(const DiscardedData& data);

    [[nodiscard]] bool
    SendNotifyDeviceReset(const GPUDeviceData& status);

    [[nodiscard]] bool
    SendAddMemoryReport(const MemoryReport& aReport);

    [[nodiscard]] bool
    SendUpdateFeature(
            const Feature& aFeature,
            const FeatureFailure& aChange);

    [[nodiscard]] bool
    SendUsedFallback(
            const Fallback& aFallback,
            const nsCString& message);

    [[nodiscard]] bool
    SendBHRThreadHang(const HangDetails& aDetails);

    [[nodiscard]] bool
    SendUpdateMediaCodecsSupported(const MediaCodecsSupported& aSupported);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

    ManagedContainer<PAPZInputBridgeParent> mManagedPAPZInputBridgeParent;
};


} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::PGPUParent*>
{
    typedef mozilla::gfx::PGPUParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PGPUParent_h
