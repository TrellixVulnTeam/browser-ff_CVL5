//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef GraphicsMessages_h
#define GraphicsMessages_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "gfxTelemetry.h"
#include "mozilla/D3DMessageUtils.h"
#include "mozilla/gfx/D3D11Checks.h"
#include "mozilla/gfx/Point.h"
#include "mozilla/gfx/Types.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct D3D11DeviceStatus|
//
namespace mozilla {
namespace gfx {
class D3D11DeviceStatus final
{
private:
    typedef mozilla::gfx::D3D11Checks::VideoFormatOptionSet VideoFormatOptionSet;

public:
    MOZ_IMPLICIT D3D11DeviceStatus() :
        isWARP_(),
        textureSharingWorks_(),
        adapter_(),
        formatOptions_(),
        featureLevel_(),
        sequenceNumber_()
    {
    }

    MOZ_IMPLICIT D3D11DeviceStatus(
            const bool& _isWARP,
            const bool& _textureSharingWorks,
            const uint32_t& _featureLevel,
            const DxgiAdapterDesc& _adapter,
            const int32_t& _sequenceNumber,
            const VideoFormatOptionSet& _formatOptions) :
        isWARP_(_isWARP),
        textureSharingWorks_(_textureSharingWorks),
        adapter_(_adapter),
        formatOptions_(_formatOptions),
        featureLevel_(_featureLevel),
        sequenceNumber_(_sequenceNumber)
    {
    }

    bool&
    isWARP()
    {
        return isWARP_;
    }
    const bool&
    isWARP() const
    {
        return isWARP_;
    }

    bool&
    textureSharingWorks()
    {
        return textureSharingWorks_;
    }
    const bool&
    textureSharingWorks() const
    {
        return textureSharingWorks_;
    }

    uint32_t&
    featureLevel()
    {
        return featureLevel_;
    }
    const uint32_t&
    featureLevel() const
    {
        return featureLevel_;
    }

    DxgiAdapterDesc&
    adapter()
    {
        return adapter_;
    }
    const DxgiAdapterDesc&
    adapter() const
    {
        return adapter_;
    }

    int32_t&
    sequenceNumber()
    {
        return sequenceNumber_;
    }
    const int32_t&
    sequenceNumber() const
    {
        return sequenceNumber_;
    }

    VideoFormatOptionSet&
    formatOptions()
    {
        return formatOptions_;
    }
    const VideoFormatOptionSet&
    formatOptions() const
    {
        return formatOptions_;
    }

private:
    void
    StaticAssertions() const;
    bool isWARP_;
    bool textureSharingWorks_;
    DxgiAdapterDesc adapter_;
    VideoFormatOptionSet formatOptions_;
    uint32_t featureLevel_;
    int32_t sequenceNumber_;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::D3D11DeviceStatus>
{
    typedef mozilla::gfx::D3D11DeviceStatus paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct DevicePrefs|
//
namespace mozilla {
namespace gfx {
class DevicePrefs final
{
private:
    typedef mozilla::gfx::FeatureStatus FeatureStatus;

public:
    MOZ_IMPLICIT DevicePrefs() :
        hwCompositing_(),
        d3d11Compositing_(),
        oglCompositing_(),
        useD2D1_(),
        webGPU_(),
        d3d11HwAngle_()
    {
    }

    MOZ_IMPLICIT DevicePrefs(
            const FeatureStatus& _hwCompositing,
            const FeatureStatus& _d3d11Compositing,
            const FeatureStatus& _oglCompositing,
            const FeatureStatus& _useD2D1,
            const FeatureStatus& _webGPU,
            const FeatureStatus& _d3d11HwAngle) :
        hwCompositing_(_hwCompositing),
        d3d11Compositing_(_d3d11Compositing),
        oglCompositing_(_oglCompositing),
        useD2D1_(_useD2D1),
        webGPU_(_webGPU),
        d3d11HwAngle_(_d3d11HwAngle)
    {
    }

    FeatureStatus&
    hwCompositing()
    {
        return hwCompositing_;
    }
    const FeatureStatus&
    hwCompositing() const
    {
        return hwCompositing_;
    }

    FeatureStatus&
    d3d11Compositing()
    {
        return d3d11Compositing_;
    }
    const FeatureStatus&
    d3d11Compositing() const
    {
        return d3d11Compositing_;
    }

    FeatureStatus&
    oglCompositing()
    {
        return oglCompositing_;
    }
    const FeatureStatus&
    oglCompositing() const
    {
        return oglCompositing_;
    }

    FeatureStatus&
    useD2D1()
    {
        return useD2D1_;
    }
    const FeatureStatus&
    useD2D1() const
    {
        return useD2D1_;
    }

    FeatureStatus&
    webGPU()
    {
        return webGPU_;
    }
    const FeatureStatus&
    webGPU() const
    {
        return webGPU_;
    }

    FeatureStatus&
    d3d11HwAngle()
    {
        return d3d11HwAngle_;
    }
    const FeatureStatus&
    d3d11HwAngle() const
    {
        return d3d11HwAngle_;
    }

private:
    FeatureStatus hwCompositing_;
    FeatureStatus d3d11Compositing_;
    FeatureStatus oglCompositing_;
    FeatureStatus useD2D1_;
    FeatureStatus webGPU_;
    FeatureStatus d3d11HwAngle_;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::DevicePrefs>
{
    typedef mozilla::gfx::DevicePrefs paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ContentDeviceData|
//
namespace mozilla {
namespace gfx {
class ContentDeviceData final
{
private:
    typedef mozilla::gfx::DevicePrefs DevicePrefs;
    typedef mozilla::gfx::D3D11DeviceStatus D3D11DeviceStatus;

public:
    MOZ_IMPLICIT ContentDeviceData() :
        prefs_(),
        d3d11_(),
        cmsOutputProfileData_()
    {
    }

    MOZ_IMPLICIT ContentDeviceData(
            const DevicePrefs& _prefs,
            const D3D11DeviceStatus& _d3d11,
            const nsTArray<uint8_t>& _cmsOutputProfileData) :
        prefs_(_prefs),
        d3d11_(_d3d11),
        cmsOutputProfileData_(_cmsOutputProfileData)
    {
    }

    DevicePrefs&
    prefs()
    {
        return prefs_;
    }
    const DevicePrefs&
    prefs() const
    {
        return prefs_;
    }

    D3D11DeviceStatus&
    d3d11()
    {
        return d3d11_;
    }
    const D3D11DeviceStatus&
    d3d11() const
    {
        return d3d11_;
    }

    nsTArray<uint8_t>&
    cmsOutputProfileData()
    {
        return cmsOutputProfileData_;
    }
    const nsTArray<uint8_t>&
    cmsOutputProfileData() const
    {
        return cmsOutputProfileData_;
    }

private:
    DevicePrefs prefs_;
    D3D11DeviceStatus d3d11_;
    CopyableTArray<uint8_t> cmsOutputProfileData_;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::ContentDeviceData>
{
    typedef mozilla::gfx::ContentDeviceData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FeatureFailure|
//
namespace mozilla {
namespace gfx {
class FeatureFailure final
{
private:
    typedef mozilla::gfx::FeatureStatus FeatureStatus;

public:
    MOZ_IMPLICIT FeatureFailure() :
        status_(),
        message_(),
        failureId_()
    {
    }

    MOZ_IMPLICIT FeatureFailure(
            const FeatureStatus& _status,
            const nsCString& _message,
            const nsCString& _failureId) :
        status_(_status),
        message_(_message),
        failureId_(_failureId)
    {
    }

    FeatureStatus&
    status()
    {
        return status_;
    }
    const FeatureStatus&
    status() const
    {
        return status_;
    }

    nsCString&
    message()
    {
        return message_;
    }
    const nsCString&
    message() const
    {
        return message_;
    }

    nsCString&
    failureId()
    {
        return failureId_;
    }
    const nsCString&
    failureId() const
    {
        return failureId_;
    }

private:
    FeatureStatus status_;
    nsCString message_;
    nsCString failureId_;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::FeatureFailure>
{
    typedef mozilla::gfx::FeatureFailure paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GPUDeviceData|
//
namespace mozilla {
namespace gfx {
class GPUDeviceData final
{
private:
    typedef mozilla::gfx::FeatureFailure FeatureFailure;
    typedef mozilla::gfx::D3D11DeviceStatus D3D11DeviceStatus;

public:
    MOZ_IMPLICIT GPUDeviceData() :
        d3d11Compositing_(),
        oglCompositing_(),
        gpuDevice_(),
        webGPU_()
    {
    }

    MOZ_IMPLICIT GPUDeviceData(
            const mozilla::Maybe<FeatureFailure>& _d3d11Compositing,
            const mozilla::Maybe<FeatureFailure>& _oglCompositing,
            const mozilla::Maybe<D3D11DeviceStatus>& _gpuDevice,
            const mozilla::Maybe<FeatureFailure>& _webGPU) :
        d3d11Compositing_(_d3d11Compositing),
        oglCompositing_(_oglCompositing),
        gpuDevice_(_gpuDevice),
        webGPU_(_webGPU)
    {
    }

    mozilla::Maybe<FeatureFailure>&
    d3d11Compositing()
    {
        return d3d11Compositing_;
    }
    const mozilla::Maybe<FeatureFailure>&
    d3d11Compositing() const
    {
        return d3d11Compositing_;
    }

    mozilla::Maybe<FeatureFailure>&
    oglCompositing()
    {
        return oglCompositing_;
    }
    const mozilla::Maybe<FeatureFailure>&
    oglCompositing() const
    {
        return oglCompositing_;
    }

    mozilla::Maybe<D3D11DeviceStatus>&
    gpuDevice()
    {
        return gpuDevice_;
    }
    const mozilla::Maybe<D3D11DeviceStatus>&
    gpuDevice() const
    {
        return gpuDevice_;
    }

    mozilla::Maybe<FeatureFailure>&
    webGPU()
    {
        return webGPU_;
    }
    const mozilla::Maybe<FeatureFailure>&
    webGPU() const
    {
        return webGPU_;
    }

private:
    mozilla::Maybe<FeatureFailure> d3d11Compositing_;
    mozilla::Maybe<FeatureFailure> oglCompositing_;
    mozilla::Maybe<D3D11DeviceStatus> gpuDevice_;
    mozilla::Maybe<FeatureFailure> webGPU_;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::GPUDeviceData>
{
    typedef mozilla::gfx::GPUDeviceData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union GfxVarValue|
//
namespace mozilla {
namespace gfx {
class GfxVarValue final
{
public:
    enum Type {
        T__None,
        TBackendType = 1,
        Tbool,
        TgfxImageFormat,
        TIntSize,
        TnsCString,
        TnsString,
        Tint32_t,
        T__Last = Tint32_t
    };

private:
    typedef mozilla::gfx::BackendType BackendType;
    typedef mozilla::gfx::IntSize IntSize;
    typedef BackendType BackendType__tdef;
    typedef bool bool__tdef;
    typedef gfxImageFormat gfxImageFormat__tdef;
    typedef IntSize IntSize__tdef;
    typedef nsCString nsCString__tdef;
    typedef nsString nsString__tdef;
    typedef int32_t int32_t__tdef;

    union Value {
        mozilla::AlignedStorage2<BackendType> VBackendType;
        mozilla::AlignedStorage2<bool> Vbool;
        mozilla::AlignedStorage2<gfxImageFormat> VgfxImageFormat;
        mozilla::AlignedStorage2<IntSize> VIntSize;
        mozilla::AlignedStorage2<nsCString> VnsCString;
        mozilla::AlignedStorage2<nsString> VnsString;
        mozilla::AlignedStorage2<int32_t> Vint32_t;
    };

    BackendType*
    ptr_BackendType()
    {
        return ((mValue).VBackendType).addr();
    }
    const BackendType*
    constptr_BackendType() const
    {
        return ((mValue).VBackendType).addr();
    }
    bool*
    ptr_bool()
    {
        return ((mValue).Vbool).addr();
    }
    const bool*
    constptr_bool() const
    {
        return ((mValue).Vbool).addr();
    }
    gfxImageFormat*
    ptr_gfxImageFormat()
    {
        return ((mValue).VgfxImageFormat).addr();
    }
    const gfxImageFormat*
    constptr_gfxImageFormat() const
    {
        return ((mValue).VgfxImageFormat).addr();
    }
    IntSize*
    ptr_IntSize()
    {
        return ((mValue).VIntSize).addr();
    }
    const IntSize*
    constptr_IntSize() const
    {
        return ((mValue).VIntSize).addr();
    }
    nsCString*
    ptr_nsCString()
    {
        return ((mValue).VnsCString).addr();
    }
    const nsCString*
    constptr_nsCString() const
    {
        return ((mValue).VnsCString).addr();
    }
    nsString*
    ptr_nsString()
    {
        return ((mValue).VnsString).addr();
    }
    const nsString*
    constptr_nsString() const
    {
        return ((mValue).VnsString).addr();
    }
    int32_t*
    ptr_int32_t()
    {
        return ((mValue).Vint32_t).addr();
    }
    const int32_t*
    constptr_int32_t() const
    {
        return ((mValue).Vint32_t).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT GfxVarValue() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT GfxVarValue(const BackendType& aOther);

    MOZ_IMPLICIT GfxVarValue(BackendType&& aOther);

    MOZ_IMPLICIT GfxVarValue(const bool& aOther);

    MOZ_IMPLICIT GfxVarValue(bool&& aOther);

    MOZ_IMPLICIT GfxVarValue(const gfxImageFormat& aOther);

    MOZ_IMPLICIT GfxVarValue(gfxImageFormat&& aOther);

    MOZ_IMPLICIT GfxVarValue(const IntSize& aOther);

    MOZ_IMPLICIT GfxVarValue(IntSize&& aOther);

    MOZ_IMPLICIT GfxVarValue(const nsCString& aOther);

    MOZ_IMPLICIT GfxVarValue(nsCString&& aOther);

    MOZ_IMPLICIT GfxVarValue(const nsString& aOther);

    MOZ_IMPLICIT GfxVarValue(nsString&& aOther);

    MOZ_IMPLICIT GfxVarValue(const int32_t& aOther);

    MOZ_IMPLICIT GfxVarValue(int32_t&& aOther);

    MOZ_IMPLICIT GfxVarValue(const GfxVarValue& aOther);

    MOZ_IMPLICIT GfxVarValue(GfxVarValue&& aOther);

    ~GfxVarValue();

    Type
    type() const
    {
        return mType;
    }

    GfxVarValue&
    operator=(const BackendType& aRhs);

    GfxVarValue&
    operator=(BackendType&& aRhs);

    GfxVarValue&
    operator=(const bool& aRhs);

    GfxVarValue&
    operator=(bool&& aRhs);

    GfxVarValue&
    operator=(const gfxImageFormat& aRhs);

    GfxVarValue&
    operator=(gfxImageFormat&& aRhs);

    GfxVarValue&
    operator=(const IntSize& aRhs);

    GfxVarValue&
    operator=(IntSize&& aRhs);

    GfxVarValue&
    operator=(const nsCString& aRhs);

    GfxVarValue&
    operator=(nsCString&& aRhs);

    GfxVarValue&
    operator=(const nsString& aRhs);

    GfxVarValue&
    operator=(nsString&& aRhs);

    GfxVarValue&
    operator=(const int32_t& aRhs);

    GfxVarValue&
    operator=(int32_t&& aRhs);

    GfxVarValue&
    operator=(const GfxVarValue& aRhs);

    GfxVarValue&
    operator=(GfxVarValue&& aRhs);

    BackendType&
    get_BackendType()
    {
        AssertSanity(TBackendType);
        return (*(ptr_BackendType()));
    }
    const BackendType&
    get_BackendType() const
    {
        AssertSanity(TBackendType);
        return (*(constptr_BackendType()));
    }
    operator BackendType&()
    {
        return get_BackendType();
    }
    operator const BackendType&() const
    {
        return get_BackendType();
    }

    bool&
    get_bool()
    {
        AssertSanity(Tbool);
        return (*(ptr_bool()));
    }
    const bool&
    get_bool() const
    {
        AssertSanity(Tbool);
        return (*(constptr_bool()));
    }
    operator bool&()
    {
        return get_bool();
    }
    operator const bool&() const
    {
        return get_bool();
    }

    gfxImageFormat&
    get_gfxImageFormat()
    {
        AssertSanity(TgfxImageFormat);
        return (*(ptr_gfxImageFormat()));
    }
    const gfxImageFormat&
    get_gfxImageFormat() const
    {
        AssertSanity(TgfxImageFormat);
        return (*(constptr_gfxImageFormat()));
    }
    operator gfxImageFormat&()
    {
        return get_gfxImageFormat();
    }
    operator const gfxImageFormat&() const
    {
        return get_gfxImageFormat();
    }

    IntSize&
    get_IntSize()
    {
        AssertSanity(TIntSize);
        return (*(ptr_IntSize()));
    }
    const IntSize&
    get_IntSize() const
    {
        AssertSanity(TIntSize);
        return (*(constptr_IntSize()));
    }
    operator IntSize&()
    {
        return get_IntSize();
    }
    operator const IntSize&() const
    {
        return get_IntSize();
    }

    nsCString&
    get_nsCString()
    {
        AssertSanity(TnsCString);
        return (*(ptr_nsCString()));
    }
    const nsCString&
    get_nsCString() const
    {
        AssertSanity(TnsCString);
        return (*(constptr_nsCString()));
    }
    operator nsCString&()
    {
        return get_nsCString();
    }
    operator const nsCString&() const
    {
        return get_nsCString();
    }

    nsString&
    get_nsString()
    {
        AssertSanity(TnsString);
        return (*(ptr_nsString()));
    }
    const nsString&
    get_nsString() const
    {
        AssertSanity(TnsString);
        return (*(constptr_nsString()));
    }
    operator nsString&()
    {
        return get_nsString();
    }
    operator const nsString&() const
    {
        return get_nsString();
    }

    int32_t&
    get_int32_t()
    {
        AssertSanity(Tint32_t);
        return (*(ptr_int32_t()));
    }
    const int32_t&
    get_int32_t() const
    {
        AssertSanity(Tint32_t);
        return (*(constptr_int32_t()));
    }
    operator int32_t&()
    {
        return get_int32_t();
    }
    operator const int32_t&() const
    {
        return get_int32_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::GfxVarValue>
{
    typedef mozilla::gfx::GfxVarValue paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GfxVarUpdate|
//
namespace mozilla {
namespace gfx {
class GfxVarUpdate final
{
private:
    typedef mozilla::gfx::GfxVarValue GfxVarValue;

public:
    MOZ_IMPLICIT GfxVarUpdate() :
        value_(),
        index_()
    {
    }

    MOZ_IMPLICIT GfxVarUpdate(
            const uint32_t& _index,
            const GfxVarValue& _value) :
        value_(_value),
        index_(_index)
    {
    }

    uint32_t&
    index()
    {
        return index_;
    }
    const uint32_t&
    index() const
    {
        return index_;
    }

    GfxVarValue&
    value()
    {
        return value_;
    }
    const GfxVarValue&
    value() const
    {
        return value_;
    }

private:
    GfxVarValue value_;
    uint32_t index_;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::GfxVarUpdate>
{
    typedef mozilla::gfx::GfxVarUpdate paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GfxInfoFeatureStatus|
//
namespace mozilla {
namespace gfx {
class GfxInfoFeatureStatus final
{
private:

public:
    MOZ_IMPLICIT GfxInfoFeatureStatus() :
        failureId_(),
        feature_(),
        status_()
    {
    }

    MOZ_IMPLICIT GfxInfoFeatureStatus(
            const int32_t& _feature,
            const int32_t& _status,
            const nsCString& _failureId) :
        failureId_(_failureId),
        feature_(_feature),
        status_(_status)
    {
    }

    int32_t&
    feature()
    {
        return feature_;
    }
    const int32_t&
    feature() const
    {
        return feature_;
    }

    int32_t&
    status()
    {
        return status_;
    }
    const int32_t&
    status() const
    {
        return status_;
    }

    nsCString&
    failureId()
    {
        return failureId_;
    }
    const nsCString&
    failureId() const
    {
        return failureId_;
    }

private:
    void
    StaticAssertions() const;
    nsCString failureId_;
    int32_t feature_;
    int32_t status_;
};
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::gfx::GfxInfoFeatureStatus>
{
    typedef mozilla::gfx::GfxInfoFeatureStatus paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef GraphicsMessages_h
