//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PVRGPU_h
#define PVRGPU_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace gfx {
class PVRGPUParent;
} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace gfx {
class PVRGPUChild;
} // namespace gfx
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PVRGPUChild and PVRGPUParent
//
namespace mozilla {
namespace gfx {
namespace PVRGPU {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gfx::PVRGPUParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gfx::PVRGPUChild>* aChild);

enum MessageType {
    PVRGPUStart = PVRGPUMsgStart << 16,
    Msg_StartVRService__ID,
    Msg_StopVRService__ID,
    Msg_PuppetSubmit__ID,
    Msg_PuppetReset__ID,
    Msg_PuppetCheckForCompletion__ID,
    Msg_NotifyPuppetComplete__ID,
    PVRGPUEnd
};

IPC::Message*
Msg_StartVRService(int32_t routingId);

IPC::Message*
Msg_StopVRService(int32_t routingId);

IPC::Message*
Msg_PuppetSubmit(int32_t routingId);

IPC::Message*
Msg_PuppetReset(int32_t routingId);

IPC::Message*
Msg_PuppetCheckForCompletion(int32_t routingId);

IPC::Message*
Msg_NotifyPuppetComplete(int32_t routingId);



} // namespace PVRGPU
} // namespace gfx
} // namespace mozilla

#endif // ifndef PVRGPU_h
