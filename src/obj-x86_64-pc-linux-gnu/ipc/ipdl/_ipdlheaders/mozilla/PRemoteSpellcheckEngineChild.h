//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PRemoteSpellcheckEngineChild_h
#define PRemoteSpellcheckEngineChild_h

#include "mozilla/PRemoteSpellcheckEngine.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {


class PRemoteSpellcheckEngineChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PContentChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PContentParent PContentParent;

public:
    typedef MozPromise<nsTArray<bool>, ResponseRejectReason, true> CheckAsyncPromise;
    typedef MozPromise<Tuple<bool, nsCString>, ResponseRejectReason, true> SetDictionaryFromListPromise;

protected:
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PRemoteSpellcheckEngineChild();

    virtual ~PRemoteSpellcheckEngineChild();

public:
    PContentChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    static bool
    Send__delete__(PRemoteSpellcheckEngineChild* actor);

    void
    SendCheckAsync(
            const nsTArray<nsString>& aWord,
            mozilla::ipc::ResolveCallback<nsTArray<bool>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<CheckAsyncPromise>
    SendCheckAsync(const nsTArray<nsString>& aWord);

    bool
    SendCheckAndSuggest(
            const nsString& aWord,
            bool* aIsMisspelled,
            nsTArray<nsString>* aSuggestions);

    bool
    SendSetDictionary(
            const nsCString& aDictionary,
            bool* success);

    void
    SendSetDictionaryFromList(
            const nsTArray<nsCString>& aList,
            mozilla::ipc::ResolveCallback<Tuple<bool, nsCString>>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    RefPtr<SetDictionaryFromListPromise>
    SendSetDictionaryFromList(const nsTArray<nsCString>& aList);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::PRemoteSpellcheckEngineChild*>
{
    typedef mozilla::PRemoteSpellcheckEngineChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PRemoteSpellcheckEngineChild_h
