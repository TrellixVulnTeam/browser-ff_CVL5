//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PDocAccessible_h
#define PDocAccessible_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/a11y/IPCTypes.h"
#include "nsRect.h"
#include "mozilla/a11y/DocAccessibleTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct AccessibleData|
//
namespace mozilla {
namespace a11y {
class AccessibleData final
{
private:
    typedef mozilla::a11y::role role;

public:
    MOZ_IMPLICIT AccessibleData() :
        Role_(),
        ID_(),
        ChildrenCount_(),
        Interfaces_()
    {
    }

    MOZ_IMPLICIT AccessibleData(
            const uint64_t& _ID,
            const role& _Role,
            const uint32_t& _ChildrenCount,
            const uint32_t& _Interfaces) :
        Role_(_Role),
        ID_(_ID),
        ChildrenCount_(_ChildrenCount),
        Interfaces_(_Interfaces)
    {
    }

    uint64_t&
    ID()
    {
        return ID_;
    }
    const uint64_t&
    ID() const
    {
        return ID_;
    }

    role&
    Role()
    {
        return Role_;
    }
    const role&
    Role() const
    {
        return Role_;
    }

    uint32_t&
    ChildrenCount()
    {
        return ChildrenCount_;
    }
    const uint32_t&
    ChildrenCount() const
    {
        return ChildrenCount_;
    }

    uint32_t&
    Interfaces()
    {
        return Interfaces_;
    }
    const uint32_t&
    Interfaces() const
    {
        return Interfaces_;
    }

private:
    void
    StaticAssertions() const;
    role Role_;
    uint64_t ID_;
    uint32_t ChildrenCount_;
    uint32_t Interfaces_;
};
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::AccessibleData>
{
    typedef mozilla::a11y::AccessibleData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessibleParent;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessibleChild;
} // namespace a11y
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union OriginDocument|
//
namespace mozilla {
namespace a11y {
class OriginDocument final
{
public:
    enum Type {
        T__None,
        TPDocAccessibleParent = 1,
        TPDocAccessibleChild,
        T__Last = TPDocAccessibleChild
    };

private:
    typedef mozilla::a11y::PDocAccessibleParent PDocAccessibleParent;
    typedef mozilla::a11y::PDocAccessibleChild PDocAccessibleChild;
    typedef PDocAccessibleParent* PDocAccessibleParent__tdef;
    typedef PDocAccessibleChild* PDocAccessibleChild__tdef;

    union Value {
        mozilla::AlignedStorage2<PDocAccessibleParent*> VPDocAccessibleParent;
        mozilla::AlignedStorage2<PDocAccessibleChild*> VPDocAccessibleChild;
    };

    PDocAccessibleParent**
    ptr_PDocAccessibleParent()
    {
        return ((mValue).VPDocAccessibleParent).addr();
    }
    PDocAccessibleParent* const*
    constptr_PDocAccessibleParent() const
    {
        return ((mValue).VPDocAccessibleParent).addr();
    }
    PDocAccessibleChild**
    ptr_PDocAccessibleChild()
    {
        return ((mValue).VPDocAccessibleChild).addr();
    }
    PDocAccessibleChild* const*
    constptr_PDocAccessibleChild() const
    {
        return ((mValue).VPDocAccessibleChild).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT OriginDocument() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT OriginDocument(PDocAccessibleParent* aOther);

    MOZ_IMPLICIT OriginDocument(PDocAccessibleChild* aOther);

    MOZ_IMPLICIT OriginDocument(const OriginDocument& aOther);

    MOZ_IMPLICIT OriginDocument(OriginDocument&& aOther);

    ~OriginDocument();

    Type
    type() const
    {
        return mType;
    }

    OriginDocument&
    operator=(PDocAccessibleParent* aRhs);

    OriginDocument&
    operator=(PDocAccessibleChild* aRhs);

    OriginDocument&
    operator=(const OriginDocument& aRhs);

    OriginDocument&
    operator=(OriginDocument&& aRhs);

    PDocAccessibleParent*&
    get_PDocAccessibleParent()
    {
        AssertSanity(TPDocAccessibleParent);
        return (*(ptr_PDocAccessibleParent()));
    }
    PDocAccessibleParent*
    get_PDocAccessibleParent() const
    {
        AssertSanity(TPDocAccessibleParent);
        return (*(constptr_PDocAccessibleParent()));
    }
    operator PDocAccessibleParent*&()
    {
        return get_PDocAccessibleParent();
    }
    operator PDocAccessibleParent*() const
    {
        return get_PDocAccessibleParent();
    }

    PDocAccessibleChild*&
    get_PDocAccessibleChild()
    {
        AssertSanity(TPDocAccessibleChild);
        return (*(ptr_PDocAccessibleChild()));
    }
    PDocAccessibleChild*
    get_PDocAccessibleChild() const
    {
        AssertSanity(TPDocAccessibleChild);
        return (*(constptr_PDocAccessibleChild()));
    }
    operator PDocAccessibleChild*&()
    {
        return get_PDocAccessibleChild();
    }
    operator PDocAccessibleChild*() const
    {
        return get_PDocAccessibleChild();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::OriginDocument>
{
    typedef mozilla::a11y::OriginDocument paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct BatchData|
//
namespace mozilla {
namespace a11y {
class BatchData final
{
private:
    typedef mozilla::a11y::OriginDocument OriginDocument;
    typedef mozilla::a11y::Attribute Attribute;

public:
    MOZ_IMPLICIT BatchData() :
        Document_(),
        Bounds_(),
        Name_(),
        TextValue_(),
        DOMNodeID_(),
        Description_(),
        Attributes_(),
        ID_(),
        State_(),
        CurValue_(),
        MinValue_(),
        MaxValue_(),
        Step_(),
        ActionCount_()
    {
    }

    MOZ_IMPLICIT BatchData(
            const OriginDocument& _Document,
            const uint64_t& _ID,
            const uint64_t& _State,
            const nsIntRect& _Bounds,
            const uint8_t& _ActionCount,
            const nsString& _Name,
            const nsString& _TextValue,
            const nsString& _DOMNodeID,
            const nsString& _Description,
            const double& _CurValue,
            const double& _MinValue,
            const double& _MaxValue,
            const double& _Step,
            const nsTArray<Attribute>& _Attributes) :
        Document_(_Document),
        Bounds_(_Bounds),
        Name_(_Name),
        TextValue_(_TextValue),
        DOMNodeID_(_DOMNodeID),
        Description_(_Description),
        Attributes_(_Attributes),
        ID_(_ID),
        State_(_State),
        CurValue_(_CurValue),
        MinValue_(_MinValue),
        MaxValue_(_MaxValue),
        Step_(_Step),
        ActionCount_(_ActionCount)
    {
    }

    OriginDocument&
    Document()
    {
        return Document_;
    }
    const OriginDocument&
    Document() const
    {
        return Document_;
    }

    uint64_t&
    ID()
    {
        return ID_;
    }
    const uint64_t&
    ID() const
    {
        return ID_;
    }

    uint64_t&
    State()
    {
        return State_;
    }
    const uint64_t&
    State() const
    {
        return State_;
    }

    nsIntRect&
    Bounds()
    {
        return Bounds_;
    }
    const nsIntRect&
    Bounds() const
    {
        return Bounds_;
    }

    uint8_t&
    ActionCount()
    {
        return ActionCount_;
    }
    const uint8_t&
    ActionCount() const
    {
        return ActionCount_;
    }

    nsString&
    Name()
    {
        return Name_;
    }
    const nsString&
    Name() const
    {
        return Name_;
    }

    nsString&
    TextValue()
    {
        return TextValue_;
    }
    const nsString&
    TextValue() const
    {
        return TextValue_;
    }

    nsString&
    DOMNodeID()
    {
        return DOMNodeID_;
    }
    const nsString&
    DOMNodeID() const
    {
        return DOMNodeID_;
    }

    nsString&
    Description()
    {
        return Description_;
    }
    const nsString&
    Description() const
    {
        return Description_;
    }

    double&
    CurValue()
    {
        return CurValue_;
    }
    const double&
    CurValue() const
    {
        return CurValue_;
    }

    double&
    MinValue()
    {
        return MinValue_;
    }
    const double&
    MinValue() const
    {
        return MinValue_;
    }

    double&
    MaxValue()
    {
        return MaxValue_;
    }
    const double&
    MaxValue() const
    {
        return MaxValue_;
    }

    double&
    Step()
    {
        return Step_;
    }
    const double&
    Step() const
    {
        return Step_;
    }

    nsTArray<Attribute>&
    Attributes()
    {
        return Attributes_;
    }
    const nsTArray<Attribute>&
    Attributes() const
    {
        return Attributes_;
    }

private:
    void
    StaticAssertions() const;
    OriginDocument Document_;
    nsIntRect Bounds_;
    nsString Name_;
    nsString TextValue_;
    nsString DOMNodeID_;
    nsString Description_;
    CopyableTArray<Attribute> Attributes_;
    uint64_t ID_;
    uint64_t State_;
    double CurValue_;
    double MinValue_;
    double MaxValue_;
    double Step_;
    uint8_t ActionCount_;
};
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::BatchData>
{
    typedef mozilla::a11y::BatchData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct ShowEventData|
//
namespace mozilla {
namespace a11y {
class ShowEventData final
{
private:
    typedef mozilla::a11y::AccessibleData AccessibleData;

public:
    MOZ_IMPLICIT ShowEventData() :
        NewTree_(),
        EventSuppressed_(),
        ID_(),
        Idx_()
    {
    }

    MOZ_IMPLICIT ShowEventData(
            const uint64_t& _ID,
            const uint32_t& _Idx,
            const nsTArray<AccessibleData>& _NewTree,
            const bool& _EventSuppressed) :
        NewTree_(_NewTree),
        EventSuppressed_(_EventSuppressed),
        ID_(_ID),
        Idx_(_Idx)
    {
    }

    uint64_t&
    ID()
    {
        return ID_;
    }
    const uint64_t&
    ID() const
    {
        return ID_;
    }

    uint32_t&
    Idx()
    {
        return Idx_;
    }
    const uint32_t&
    Idx() const
    {
        return Idx_;
    }

    nsTArray<AccessibleData>&
    NewTree()
    {
        return NewTree_;
    }
    const nsTArray<AccessibleData>&
    NewTree() const
    {
        return NewTree_;
    }

    bool&
    EventSuppressed()
    {
        return EventSuppressed_;
    }
    const bool&
    EventSuppressed() const
    {
        return EventSuppressed_;
    }

private:
    CopyableTArray<AccessibleData> NewTree_;
    bool EventSuppressed_;
    uint64_t ID_;
    uint32_t Idx_;
};
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::ShowEventData>
{
    typedef mozilla::a11y::ShowEventData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct RelationTargets|
//
namespace mozilla {
namespace a11y {
class RelationTargets final
{
private:

public:
    MOZ_IMPLICIT RelationTargets() :
        Targets_(),
        Type_()
    {
    }

    MOZ_IMPLICIT RelationTargets(
            const uint32_t& _Type,
            const nsTArray<uint64_t>& _Targets) :
        Targets_(_Targets),
        Type_(_Type)
    {
    }

    uint32_t&
    Type()
    {
        return Type_;
    }
    const uint32_t&
    Type() const
    {
        return Type_;
    }

    nsTArray<uint64_t>&
    Targets()
    {
        return Targets_;
    }
    const nsTArray<uint64_t>&
    Targets() const
    {
        return Targets_;
    }

private:
    CopyableTArray<uint64_t> Targets_;
    uint32_t Type_;
};
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::RelationTargets>
{
    typedef mozilla::a11y::RelationTargets paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct TextRangeData|
//
namespace mozilla {
namespace a11y {
class TextRangeData final
{
private:

public:
    MOZ_IMPLICIT TextRangeData() :
        StartID_(),
        EndID_(),
        StartOffset_(),
        EndOffset_()
    {
    }

    MOZ_IMPLICIT TextRangeData(
            const uint64_t& _StartID,
            const uint64_t& _EndID,
            const int32_t& _StartOffset,
            const int32_t& _EndOffset) :
        StartID_(_StartID),
        EndID_(_EndID),
        StartOffset_(_StartOffset),
        EndOffset_(_EndOffset)
    {
    }

    uint64_t&
    StartID()
    {
        return StartID_;
    }
    const uint64_t&
    StartID() const
    {
        return StartID_;
    }

    uint64_t&
    EndID()
    {
        return EndID_;
    }
    const uint64_t&
    EndID() const
    {
        return EndID_;
    }

    int32_t&
    StartOffset()
    {
        return StartOffset_;
    }
    const int32_t&
    StartOffset() const
    {
        return StartOffset_;
    }

    int32_t&
    EndOffset()
    {
        return EndOffset_;
    }
    const int32_t&
    EndOffset() const
    {
        return EndOffset_;
    }

private:
    void
    StaticAssertions() const;
    uint64_t StartID_;
    uint64_t EndID_;
    int32_t StartOffset_;
    int32_t EndOffset_;
};
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::TextRangeData>
{
    typedef mozilla::a11y::TextRangeData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessibleParent;
} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace a11y {
class PDocAccessibleChild;
} // namespace a11y
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PDocAccessibleChild and PDocAccessibleParent
//
namespace mozilla {
namespace a11y {
namespace PDocAccessible {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::a11y::PDocAccessibleParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::a11y::PDocAccessibleChild>* aChild);

enum MessageType {
    PDocAccessibleStart = PDocAccessibleMsgStart << 16,
    Msg_PDocAccessiblePlatformExtConstructor__ID,
    Reply_PDocAccessiblePlatformExtConstructor__ID,
    Msg_Shutdown__ID,
    Msg_Event__ID,
    Msg_ShowEvent__ID,
    Msg_HideEvent__ID,
    Msg_StateChangeEvent__ID,
    Msg_CaretMoveEvent__ID,
    Msg_TextChangeEvent__ID,
    Msg_SelectionEvent__ID,
    Msg_RoleChangedEvent__ID,
    Msg_VirtualCursorChangeEvent__ID,
    Msg_ScrollingEvent__ID,
    Msg_AnnouncementEvent__ID,
    Msg_TextSelectionChangeEvent__ID,
    Msg_BindChildDoc__ID,
    Msg_Batch__ID,
    Msg_ConstructedInParentProcess__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_RestoreFocus__ID,
    Msg_State__ID,
    Reply_State__ID,
    Msg_NativeState__ID,
    Reply_NativeState__ID,
    Msg_Name__ID,
    Reply_Name__ID,
    Msg_Value__ID,
    Reply_Value__ID,
    Msg_Help__ID,
    Reply_Help__ID,
    Msg_Description__ID,
    Reply_Description__ID,
    Msg_Attributes__ID,
    Reply_Attributes__ID,
    Msg_RelationByType__ID,
    Reply_RelationByType__ID,
    Msg_Relations__ID,
    Reply_Relations__ID,
    Msg_IsSearchbox__ID,
    Reply_IsSearchbox__ID,
    Msg_LandmarkRole__ID,
    Reply_LandmarkRole__ID,
    Msg_ARIARoleAtom__ID,
    Reply_ARIARoleAtom__ID,
    Msg_GroupPosition__ID,
    Reply_GroupPosition__ID,
    Msg_ScrollTo__ID,
    Msg_ScrollToPoint__ID,
    Msg_Announce__ID,
    Msg_CaretLineNumber__ID,
    Reply_CaretLineNumber__ID,
    Msg_CaretOffset__ID,
    Reply_CaretOffset__ID,
    Msg_SetCaretOffset__ID,
    Msg_CharacterCount__ID,
    Reply_CharacterCount__ID,
    Msg_SelectionCount__ID,
    Reply_SelectionCount__ID,
    Msg_TextSubstring__ID,
    Reply_TextSubstring__ID,
    Msg_GetTextAfterOffset__ID,
    Reply_GetTextAfterOffset__ID,
    Msg_GetTextAtOffset__ID,
    Reply_GetTextAtOffset__ID,
    Msg_GetTextBeforeOffset__ID,
    Reply_GetTextBeforeOffset__ID,
    Msg_CharAt__ID,
    Reply_CharAt__ID,
    Msg_TextAttributes__ID,
    Reply_TextAttributes__ID,
    Msg_DefaultTextAttributes__ID,
    Reply_DefaultTextAttributes__ID,
    Msg_TextBounds__ID,
    Reply_TextBounds__ID,
    Msg_CharBounds__ID,
    Reply_CharBounds__ID,
    Msg_OffsetAtPoint__ID,
    Reply_OffsetAtPoint__ID,
    Msg_SelectionBoundsAt__ID,
    Reply_SelectionBoundsAt__ID,
    Msg_SetSelectionBoundsAt__ID,
    Reply_SetSelectionBoundsAt__ID,
    Msg_AddToSelection__ID,
    Reply_AddToSelection__ID,
    Msg_RemoveFromSelection__ID,
    Reply_RemoveFromSelection__ID,
    Msg_ScrollSubstringTo__ID,
    Msg_ScrollSubstringToPoint__ID,
    Msg_Text__ID,
    Reply_Text__ID,
    Msg_ReplaceText__ID,
    Reply_ReplaceText__ID,
    Msg_InsertText__ID,
    Reply_InsertText__ID,
    Msg_CopyText__ID,
    Reply_CopyText__ID,
    Msg_CutText__ID,
    Reply_CutText__ID,
    Msg_DeleteText__ID,
    Reply_DeleteText__ID,
    Msg_PasteText__ID,
    Reply_PasteText__ID,
    Msg_ImagePosition__ID,
    Reply_ImagePosition__ID,
    Msg_ImageSize__ID,
    Reply_ImageSize__ID,
    Msg_StartOffset__ID,
    Reply_StartOffset__ID,
    Msg_EndOffset__ID,
    Reply_EndOffset__ID,
    Msg_IsLinkValid__ID,
    Reply_IsLinkValid__ID,
    Msg_AnchorCount__ID,
    Reply_AnchorCount__ID,
    Msg_AnchorURIAt__ID,
    Reply_AnchorURIAt__ID,
    Msg_AnchorAt__ID,
    Reply_AnchorAt__ID,
    Msg_LinkCount__ID,
    Reply_LinkCount__ID,
    Msg_LinkAt__ID,
    Reply_LinkAt__ID,
    Msg_LinkIndexOf__ID,
    Reply_LinkIndexOf__ID,
    Msg_LinkIndexAtOffset__ID,
    Reply_LinkIndexAtOffset__ID,
    Msg_TableOfACell__ID,
    Reply_TableOfACell__ID,
    Msg_ColIdx__ID,
    Reply_ColIdx__ID,
    Msg_RowIdx__ID,
    Reply_RowIdx__ID,
    Msg_GetPosition__ID,
    Reply_GetPosition__ID,
    Msg_ColExtent__ID,
    Reply_ColExtent__ID,
    Msg_RowExtent__ID,
    Reply_RowExtent__ID,
    Msg_GetColRowExtents__ID,
    Reply_GetColRowExtents__ID,
    Msg_ColHeaderCells__ID,
    Reply_ColHeaderCells__ID,
    Msg_RowHeaderCells__ID,
    Reply_RowHeaderCells__ID,
    Msg_IsCellSelected__ID,
    Reply_IsCellSelected__ID,
    Msg_TableCaption__ID,
    Reply_TableCaption__ID,
    Msg_TableSummary__ID,
    Reply_TableSummary__ID,
    Msg_TableColumnCount__ID,
    Reply_TableColumnCount__ID,
    Msg_TableRowCount__ID,
    Reply_TableRowCount__ID,
    Msg_TableCellAt__ID,
    Reply_TableCellAt__ID,
    Msg_TableCellIndexAt__ID,
    Reply_TableCellIndexAt__ID,
    Msg_TableColumnIndexAt__ID,
    Reply_TableColumnIndexAt__ID,
    Msg_TableRowIndexAt__ID,
    Reply_TableRowIndexAt__ID,
    Msg_TableRowAndColumnIndicesAt__ID,
    Reply_TableRowAndColumnIndicesAt__ID,
    Msg_TableColumnExtentAt__ID,
    Reply_TableColumnExtentAt__ID,
    Msg_TableRowExtentAt__ID,
    Reply_TableRowExtentAt__ID,
    Msg_TableColumnDescription__ID,
    Reply_TableColumnDescription__ID,
    Msg_TableRowDescription__ID,
    Reply_TableRowDescription__ID,
    Msg_TableColumnSelected__ID,
    Reply_TableColumnSelected__ID,
    Msg_TableRowSelected__ID,
    Reply_TableRowSelected__ID,
    Msg_TableCellSelected__ID,
    Reply_TableCellSelected__ID,
    Msg_TableSelectedCellCount__ID,
    Reply_TableSelectedCellCount__ID,
    Msg_TableSelectedColumnCount__ID,
    Reply_TableSelectedColumnCount__ID,
    Msg_TableSelectedRowCount__ID,
    Reply_TableSelectedRowCount__ID,
    Msg_TableSelectedCells__ID,
    Reply_TableSelectedCells__ID,
    Msg_TableSelectedCellIndices__ID,
    Reply_TableSelectedCellIndices__ID,
    Msg_TableSelectedColumnIndices__ID,
    Reply_TableSelectedColumnIndices__ID,
    Msg_TableSelectedRowIndices__ID,
    Reply_TableSelectedRowIndices__ID,
    Msg_TableSelectColumn__ID,
    Reply_TableSelectColumn__ID,
    Msg_TableSelectRow__ID,
    Reply_TableSelectRow__ID,
    Msg_TableUnselectColumn__ID,
    Reply_TableUnselectColumn__ID,
    Msg_TableUnselectRow__ID,
    Reply_TableUnselectRow__ID,
    Msg_TableIsProbablyForLayout__ID,
    Reply_TableIsProbablyForLayout__ID,
    Msg_AtkTableColumnHeader__ID,
    Reply_AtkTableColumnHeader__ID,
    Msg_AtkTableRowHeader__ID,
    Reply_AtkTableRowHeader__ID,
    Msg_SelectedItems__ID,
    Reply_SelectedItems__ID,
    Msg_SelectedItemCount__ID,
    Reply_SelectedItemCount__ID,
    Msg_GetSelectedItem__ID,
    Reply_GetSelectedItem__ID,
    Msg_IsItemSelected__ID,
    Reply_IsItemSelected__ID,
    Msg_AddItemToSelection__ID,
    Reply_AddItemToSelection__ID,
    Msg_RemoveItemFromSelection__ID,
    Reply_RemoveItemFromSelection__ID,
    Msg_SelectAll__ID,
    Reply_SelectAll__ID,
    Msg_UnselectAll__ID,
    Reply_UnselectAll__ID,
    Msg_TakeSelection__ID,
    Msg_SetSelected__ID,
    Msg_DoAction__ID,
    Reply_DoAction__ID,
    Msg_ActionCount__ID,
    Reply_ActionCount__ID,
    Msg_ActionDescriptionAt__ID,
    Reply_ActionDescriptionAt__ID,
    Msg_ActionNameAt__ID,
    Reply_ActionNameAt__ID,
    Msg_AccessKey__ID,
    Reply_AccessKey__ID,
    Msg_KeyboardShortcut__ID,
    Reply_KeyboardShortcut__ID,
    Msg_AtkKeyBinding__ID,
    Reply_AtkKeyBinding__ID,
    Msg_CurValue__ID,
    Reply_CurValue__ID,
    Msg_SetCurValue__ID,
    Reply_SetCurValue__ID,
    Msg_MinValue__ID,
    Reply_MinValue__ID,
    Msg_MaxValue__ID,
    Reply_MaxValue__ID,
    Msg_Step__ID,
    Reply_Step__ID,
    Msg_TakeFocus__ID,
    Msg_FocusedChild__ID,
    Reply_FocusedChild__ID,
    Msg_Language__ID,
    Reply_Language__ID,
    Msg_DocType__ID,
    Reply_DocType__ID,
    Msg_Title__ID,
    Reply_Title__ID,
    Msg_URL__ID,
    Reply_URL__ID,
    Msg_MimeType__ID,
    Reply_MimeType__ID,
    Msg_URLDocTypeMimeType__ID,
    Reply_URLDocTypeMimeType__ID,
    Msg_ChildAtPoint__ID,
    Reply_ChildAtPoint__ID,
    Msg_Extents__ID,
    Reply_Extents__ID,
    Msg_ExtentsInCSSPixels__ID,
    Reply_ExtentsInCSSPixels__ID,
    Msg_DOMNodeID__ID,
    Reply_DOMNodeID__ID,
    PDocAccessibleEnd
};

IPC::Message*
Msg_PDocAccessiblePlatformExtConstructor(int32_t routingId);
IPC::Message*
Reply_PDocAccessiblePlatformExtConstructor(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_Event(int32_t routingId);

IPC::Message*
Msg_ShowEvent(int32_t routingId);

IPC::Message*
Msg_HideEvent(int32_t routingId);

IPC::Message*
Msg_StateChangeEvent(int32_t routingId);

IPC::Message*
Msg_CaretMoveEvent(int32_t routingId);

IPC::Message*
Msg_TextChangeEvent(int32_t routingId);

IPC::Message*
Msg_SelectionEvent(int32_t routingId);

IPC::Message*
Msg_RoleChangedEvent(int32_t routingId);

IPC::Message*
Msg_VirtualCursorChangeEvent(int32_t routingId);

IPC::Message*
Msg_ScrollingEvent(int32_t routingId);

IPC::Message*
Msg_AnnouncementEvent(int32_t routingId);

IPC::Message*
Msg_TextSelectionChangeEvent(int32_t routingId);

IPC::Message*
Msg_BindChildDoc(int32_t routingId);

IPC::Message*
Msg_Batch(int32_t routingId);

IPC::Message*
Msg_ConstructedInParentProcess(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_RestoreFocus(int32_t routingId);

IPC::Message*
Msg_State(int32_t routingId);
IPC::Message*
Reply_State(int32_t routingId);

IPC::Message*
Msg_NativeState(int32_t routingId);
IPC::Message*
Reply_NativeState(int32_t routingId);

IPC::Message*
Msg_Name(int32_t routingId);
IPC::Message*
Reply_Name(int32_t routingId);

IPC::Message*
Msg_Value(int32_t routingId);
IPC::Message*
Reply_Value(int32_t routingId);

IPC::Message*
Msg_Help(int32_t routingId);
IPC::Message*
Reply_Help(int32_t routingId);

IPC::Message*
Msg_Description(int32_t routingId);
IPC::Message*
Reply_Description(int32_t routingId);

IPC::Message*
Msg_Attributes(int32_t routingId);
IPC::Message*
Reply_Attributes(int32_t routingId);

IPC::Message*
Msg_RelationByType(int32_t routingId);
IPC::Message*
Reply_RelationByType(int32_t routingId);

IPC::Message*
Msg_Relations(int32_t routingId);
IPC::Message*
Reply_Relations(int32_t routingId);

IPC::Message*
Msg_IsSearchbox(int32_t routingId);
IPC::Message*
Reply_IsSearchbox(int32_t routingId);

IPC::Message*
Msg_LandmarkRole(int32_t routingId);
IPC::Message*
Reply_LandmarkRole(int32_t routingId);

IPC::Message*
Msg_ARIARoleAtom(int32_t routingId);
IPC::Message*
Reply_ARIARoleAtom(int32_t routingId);

IPC::Message*
Msg_GroupPosition(int32_t routingId);
IPC::Message*
Reply_GroupPosition(int32_t routingId);

IPC::Message*
Msg_ScrollTo(int32_t routingId);

IPC::Message*
Msg_ScrollToPoint(int32_t routingId);

IPC::Message*
Msg_Announce(int32_t routingId);

IPC::Message*
Msg_CaretLineNumber(int32_t routingId);
IPC::Message*
Reply_CaretLineNumber(int32_t routingId);

IPC::Message*
Msg_CaretOffset(int32_t routingId);
IPC::Message*
Reply_CaretOffset(int32_t routingId);

IPC::Message*
Msg_SetCaretOffset(int32_t routingId);

IPC::Message*
Msg_CharacterCount(int32_t routingId);
IPC::Message*
Reply_CharacterCount(int32_t routingId);

IPC::Message*
Msg_SelectionCount(int32_t routingId);
IPC::Message*
Reply_SelectionCount(int32_t routingId);

IPC::Message*
Msg_TextSubstring(int32_t routingId);
IPC::Message*
Reply_TextSubstring(int32_t routingId);

IPC::Message*
Msg_GetTextAfterOffset(int32_t routingId);
IPC::Message*
Reply_GetTextAfterOffset(int32_t routingId);

IPC::Message*
Msg_GetTextAtOffset(int32_t routingId);
IPC::Message*
Reply_GetTextAtOffset(int32_t routingId);

IPC::Message*
Msg_GetTextBeforeOffset(int32_t routingId);
IPC::Message*
Reply_GetTextBeforeOffset(int32_t routingId);

IPC::Message*
Msg_CharAt(int32_t routingId);
IPC::Message*
Reply_CharAt(int32_t routingId);

IPC::Message*
Msg_TextAttributes(int32_t routingId);
IPC::Message*
Reply_TextAttributes(int32_t routingId);

IPC::Message*
Msg_DefaultTextAttributes(int32_t routingId);
IPC::Message*
Reply_DefaultTextAttributes(int32_t routingId);

IPC::Message*
Msg_TextBounds(int32_t routingId);
IPC::Message*
Reply_TextBounds(int32_t routingId);

IPC::Message*
Msg_CharBounds(int32_t routingId);
IPC::Message*
Reply_CharBounds(int32_t routingId);

IPC::Message*
Msg_OffsetAtPoint(int32_t routingId);
IPC::Message*
Reply_OffsetAtPoint(int32_t routingId);

IPC::Message*
Msg_SelectionBoundsAt(int32_t routingId);
IPC::Message*
Reply_SelectionBoundsAt(int32_t routingId);

IPC::Message*
Msg_SetSelectionBoundsAt(int32_t routingId);
IPC::Message*
Reply_SetSelectionBoundsAt(int32_t routingId);

IPC::Message*
Msg_AddToSelection(int32_t routingId);
IPC::Message*
Reply_AddToSelection(int32_t routingId);

IPC::Message*
Msg_RemoveFromSelection(int32_t routingId);
IPC::Message*
Reply_RemoveFromSelection(int32_t routingId);

IPC::Message*
Msg_ScrollSubstringTo(int32_t routingId);

IPC::Message*
Msg_ScrollSubstringToPoint(int32_t routingId);

IPC::Message*
Msg_Text(int32_t routingId);
IPC::Message*
Reply_Text(int32_t routingId);

IPC::Message*
Msg_ReplaceText(int32_t routingId);
IPC::Message*
Reply_ReplaceText(int32_t routingId);

IPC::Message*
Msg_InsertText(int32_t routingId);
IPC::Message*
Reply_InsertText(int32_t routingId);

IPC::Message*
Msg_CopyText(int32_t routingId);
IPC::Message*
Reply_CopyText(int32_t routingId);

IPC::Message*
Msg_CutText(int32_t routingId);
IPC::Message*
Reply_CutText(int32_t routingId);

IPC::Message*
Msg_DeleteText(int32_t routingId);
IPC::Message*
Reply_DeleteText(int32_t routingId);

IPC::Message*
Msg_PasteText(int32_t routingId);
IPC::Message*
Reply_PasteText(int32_t routingId);

IPC::Message*
Msg_ImagePosition(int32_t routingId);
IPC::Message*
Reply_ImagePosition(int32_t routingId);

IPC::Message*
Msg_ImageSize(int32_t routingId);
IPC::Message*
Reply_ImageSize(int32_t routingId);

IPC::Message*
Msg_StartOffset(int32_t routingId);
IPC::Message*
Reply_StartOffset(int32_t routingId);

IPC::Message*
Msg_EndOffset(int32_t routingId);
IPC::Message*
Reply_EndOffset(int32_t routingId);

IPC::Message*
Msg_IsLinkValid(int32_t routingId);
IPC::Message*
Reply_IsLinkValid(int32_t routingId);

IPC::Message*
Msg_AnchorCount(int32_t routingId);
IPC::Message*
Reply_AnchorCount(int32_t routingId);

IPC::Message*
Msg_AnchorURIAt(int32_t routingId);
IPC::Message*
Reply_AnchorURIAt(int32_t routingId);

IPC::Message*
Msg_AnchorAt(int32_t routingId);
IPC::Message*
Reply_AnchorAt(int32_t routingId);

IPC::Message*
Msg_LinkCount(int32_t routingId);
IPC::Message*
Reply_LinkCount(int32_t routingId);

IPC::Message*
Msg_LinkAt(int32_t routingId);
IPC::Message*
Reply_LinkAt(int32_t routingId);

IPC::Message*
Msg_LinkIndexOf(int32_t routingId);
IPC::Message*
Reply_LinkIndexOf(int32_t routingId);

IPC::Message*
Msg_LinkIndexAtOffset(int32_t routingId);
IPC::Message*
Reply_LinkIndexAtOffset(int32_t routingId);

IPC::Message*
Msg_TableOfACell(int32_t routingId);
IPC::Message*
Reply_TableOfACell(int32_t routingId);

IPC::Message*
Msg_ColIdx(int32_t routingId);
IPC::Message*
Reply_ColIdx(int32_t routingId);

IPC::Message*
Msg_RowIdx(int32_t routingId);
IPC::Message*
Reply_RowIdx(int32_t routingId);

IPC::Message*
Msg_GetPosition(int32_t routingId);
IPC::Message*
Reply_GetPosition(int32_t routingId);

IPC::Message*
Msg_ColExtent(int32_t routingId);
IPC::Message*
Reply_ColExtent(int32_t routingId);

IPC::Message*
Msg_RowExtent(int32_t routingId);
IPC::Message*
Reply_RowExtent(int32_t routingId);

IPC::Message*
Msg_GetColRowExtents(int32_t routingId);
IPC::Message*
Reply_GetColRowExtents(int32_t routingId);

IPC::Message*
Msg_ColHeaderCells(int32_t routingId);
IPC::Message*
Reply_ColHeaderCells(int32_t routingId);

IPC::Message*
Msg_RowHeaderCells(int32_t routingId);
IPC::Message*
Reply_RowHeaderCells(int32_t routingId);

IPC::Message*
Msg_IsCellSelected(int32_t routingId);
IPC::Message*
Reply_IsCellSelected(int32_t routingId);

IPC::Message*
Msg_TableCaption(int32_t routingId);
IPC::Message*
Reply_TableCaption(int32_t routingId);

IPC::Message*
Msg_TableSummary(int32_t routingId);
IPC::Message*
Reply_TableSummary(int32_t routingId);

IPC::Message*
Msg_TableColumnCount(int32_t routingId);
IPC::Message*
Reply_TableColumnCount(int32_t routingId);

IPC::Message*
Msg_TableRowCount(int32_t routingId);
IPC::Message*
Reply_TableRowCount(int32_t routingId);

IPC::Message*
Msg_TableCellAt(int32_t routingId);
IPC::Message*
Reply_TableCellAt(int32_t routingId);

IPC::Message*
Msg_TableCellIndexAt(int32_t routingId);
IPC::Message*
Reply_TableCellIndexAt(int32_t routingId);

IPC::Message*
Msg_TableColumnIndexAt(int32_t routingId);
IPC::Message*
Reply_TableColumnIndexAt(int32_t routingId);

IPC::Message*
Msg_TableRowIndexAt(int32_t routingId);
IPC::Message*
Reply_TableRowIndexAt(int32_t routingId);

IPC::Message*
Msg_TableRowAndColumnIndicesAt(int32_t routingId);
IPC::Message*
Reply_TableRowAndColumnIndicesAt(int32_t routingId);

IPC::Message*
Msg_TableColumnExtentAt(int32_t routingId);
IPC::Message*
Reply_TableColumnExtentAt(int32_t routingId);

IPC::Message*
Msg_TableRowExtentAt(int32_t routingId);
IPC::Message*
Reply_TableRowExtentAt(int32_t routingId);

IPC::Message*
Msg_TableColumnDescription(int32_t routingId);
IPC::Message*
Reply_TableColumnDescription(int32_t routingId);

IPC::Message*
Msg_TableRowDescription(int32_t routingId);
IPC::Message*
Reply_TableRowDescription(int32_t routingId);

IPC::Message*
Msg_TableColumnSelected(int32_t routingId);
IPC::Message*
Reply_TableColumnSelected(int32_t routingId);

IPC::Message*
Msg_TableRowSelected(int32_t routingId);
IPC::Message*
Reply_TableRowSelected(int32_t routingId);

IPC::Message*
Msg_TableCellSelected(int32_t routingId);
IPC::Message*
Reply_TableCellSelected(int32_t routingId);

IPC::Message*
Msg_TableSelectedCellCount(int32_t routingId);
IPC::Message*
Reply_TableSelectedCellCount(int32_t routingId);

IPC::Message*
Msg_TableSelectedColumnCount(int32_t routingId);
IPC::Message*
Reply_TableSelectedColumnCount(int32_t routingId);

IPC::Message*
Msg_TableSelectedRowCount(int32_t routingId);
IPC::Message*
Reply_TableSelectedRowCount(int32_t routingId);

IPC::Message*
Msg_TableSelectedCells(int32_t routingId);
IPC::Message*
Reply_TableSelectedCells(int32_t routingId);

IPC::Message*
Msg_TableSelectedCellIndices(int32_t routingId);
IPC::Message*
Reply_TableSelectedCellIndices(int32_t routingId);

IPC::Message*
Msg_TableSelectedColumnIndices(int32_t routingId);
IPC::Message*
Reply_TableSelectedColumnIndices(int32_t routingId);

IPC::Message*
Msg_TableSelectedRowIndices(int32_t routingId);
IPC::Message*
Reply_TableSelectedRowIndices(int32_t routingId);

IPC::Message*
Msg_TableSelectColumn(int32_t routingId);
IPC::Message*
Reply_TableSelectColumn(int32_t routingId);

IPC::Message*
Msg_TableSelectRow(int32_t routingId);
IPC::Message*
Reply_TableSelectRow(int32_t routingId);

IPC::Message*
Msg_TableUnselectColumn(int32_t routingId);
IPC::Message*
Reply_TableUnselectColumn(int32_t routingId);

IPC::Message*
Msg_TableUnselectRow(int32_t routingId);
IPC::Message*
Reply_TableUnselectRow(int32_t routingId);

IPC::Message*
Msg_TableIsProbablyForLayout(int32_t routingId);
IPC::Message*
Reply_TableIsProbablyForLayout(int32_t routingId);

IPC::Message*
Msg_AtkTableColumnHeader(int32_t routingId);
IPC::Message*
Reply_AtkTableColumnHeader(int32_t routingId);

IPC::Message*
Msg_AtkTableRowHeader(int32_t routingId);
IPC::Message*
Reply_AtkTableRowHeader(int32_t routingId);

IPC::Message*
Msg_SelectedItems(int32_t routingId);
IPC::Message*
Reply_SelectedItems(int32_t routingId);

IPC::Message*
Msg_SelectedItemCount(int32_t routingId);
IPC::Message*
Reply_SelectedItemCount(int32_t routingId);

IPC::Message*
Msg_GetSelectedItem(int32_t routingId);
IPC::Message*
Reply_GetSelectedItem(int32_t routingId);

IPC::Message*
Msg_IsItemSelected(int32_t routingId);
IPC::Message*
Reply_IsItemSelected(int32_t routingId);

IPC::Message*
Msg_AddItemToSelection(int32_t routingId);
IPC::Message*
Reply_AddItemToSelection(int32_t routingId);

IPC::Message*
Msg_RemoveItemFromSelection(int32_t routingId);
IPC::Message*
Reply_RemoveItemFromSelection(int32_t routingId);

IPC::Message*
Msg_SelectAll(int32_t routingId);
IPC::Message*
Reply_SelectAll(int32_t routingId);

IPC::Message*
Msg_UnselectAll(int32_t routingId);
IPC::Message*
Reply_UnselectAll(int32_t routingId);

IPC::Message*
Msg_TakeSelection(int32_t routingId);

IPC::Message*
Msg_SetSelected(int32_t routingId);

IPC::Message*
Msg_DoAction(int32_t routingId);
IPC::Message*
Reply_DoAction(int32_t routingId);

IPC::Message*
Msg_ActionCount(int32_t routingId);
IPC::Message*
Reply_ActionCount(int32_t routingId);

IPC::Message*
Msg_ActionDescriptionAt(int32_t routingId);
IPC::Message*
Reply_ActionDescriptionAt(int32_t routingId);

IPC::Message*
Msg_ActionNameAt(int32_t routingId);
IPC::Message*
Reply_ActionNameAt(int32_t routingId);

IPC::Message*
Msg_AccessKey(int32_t routingId);
IPC::Message*
Reply_AccessKey(int32_t routingId);

IPC::Message*
Msg_KeyboardShortcut(int32_t routingId);
IPC::Message*
Reply_KeyboardShortcut(int32_t routingId);

IPC::Message*
Msg_AtkKeyBinding(int32_t routingId);
IPC::Message*
Reply_AtkKeyBinding(int32_t routingId);

IPC::Message*
Msg_CurValue(int32_t routingId);
IPC::Message*
Reply_CurValue(int32_t routingId);

IPC::Message*
Msg_SetCurValue(int32_t routingId);
IPC::Message*
Reply_SetCurValue(int32_t routingId);

IPC::Message*
Msg_MinValue(int32_t routingId);
IPC::Message*
Reply_MinValue(int32_t routingId);

IPC::Message*
Msg_MaxValue(int32_t routingId);
IPC::Message*
Reply_MaxValue(int32_t routingId);

IPC::Message*
Msg_Step(int32_t routingId);
IPC::Message*
Reply_Step(int32_t routingId);

IPC::Message*
Msg_TakeFocus(int32_t routingId);

IPC::Message*
Msg_FocusedChild(int32_t routingId);
IPC::Message*
Reply_FocusedChild(int32_t routingId);

IPC::Message*
Msg_Language(int32_t routingId);
IPC::Message*
Reply_Language(int32_t routingId);

IPC::Message*
Msg_DocType(int32_t routingId);
IPC::Message*
Reply_DocType(int32_t routingId);

IPC::Message*
Msg_Title(int32_t routingId);
IPC::Message*
Reply_Title(int32_t routingId);

IPC::Message*
Msg_URL(int32_t routingId);
IPC::Message*
Reply_URL(int32_t routingId);

IPC::Message*
Msg_MimeType(int32_t routingId);
IPC::Message*
Reply_MimeType(int32_t routingId);

IPC::Message*
Msg_URLDocTypeMimeType(int32_t routingId);
IPC::Message*
Reply_URLDocTypeMimeType(int32_t routingId);

IPC::Message*
Msg_ChildAtPoint(int32_t routingId);
IPC::Message*
Reply_ChildAtPoint(int32_t routingId);

IPC::Message*
Msg_Extents(int32_t routingId);
IPC::Message*
Reply_Extents(int32_t routingId);

IPC::Message*
Msg_ExtentsInCSSPixels(int32_t routingId);
IPC::Message*
Reply_ExtentsInCSSPixels(int32_t routingId);

IPC::Message*
Msg_DOMNodeID(int32_t routingId);
IPC::Message*
Reply_DOMNodeID(int32_t routingId);



} // namespace PDocAccessible
} // namespace a11y
} // namespace mozilla

#endif // ifndef PDocAccessible_h
