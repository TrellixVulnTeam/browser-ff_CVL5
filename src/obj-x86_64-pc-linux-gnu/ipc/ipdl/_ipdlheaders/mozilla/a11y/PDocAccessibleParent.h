//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PDocAccessibleParent_h
#define PDocAccessibleParent_h

#include "mozilla/a11y/PDocAccessible.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/a11y/IPCTypes.h"
#include "mozilla/gfx/Point.h"
#include "nsRect.h"

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessiblePlatformExtParent;
} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace a11y {
class PDocAccessiblePlatformExtChild;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserBridgeParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessiblePlatformExtParent;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace a11y {


class PDocAccessibleParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PBrowserBridgeParent;
    friend class mozilla::dom::PBrowserParent;
    friend class mozilla::a11y::PDocAccessiblePlatformExtParent;
protected:
    typedef mozilla::a11y::AccessibleData AccessibleData;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::a11y::Attribute Attribute;
    typedef mozilla::a11y::BatchData BatchData;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::gfx::IntPoint IntPoint;
    typedef mozilla::gfx::IntSize IntSize;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::a11y::OriginDocument OriginDocument;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::a11y::RelationTargets RelationTargets;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::a11y::ShowEventData ShowEventData;
    typedef mozilla::a11y::TextAttributesRun TextAttributesRun;
    typedef mozilla::a11y::TextRangeData TextRangeData;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::a11y::role role;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::a11y::PDocAccessiblePlatformExtParent PDocAccessiblePlatformExtParent;
    typedef mozilla::a11y::PDocAccessiblePlatformExtChild PDocAccessiblePlatformExtChild;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPDocAccessiblePlatformExtConstructor(PDocAccessiblePlatformExtParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvShutdown() = 0;
    virtual mozilla::ipc::IPCResult
    RecvEvent(
            const uint64_t& aID,
            const uint32_t& type) = 0;
    virtual mozilla::ipc::IPCResult
    RecvShowEvent(
            const ShowEventData& data,
            const bool& aFromuser) = 0;
    virtual mozilla::ipc::IPCResult
    RecvHideEvent(
            const uint64_t& aRootID,
            const bool& aFromUser) = 0;
    virtual mozilla::ipc::IPCResult
    RecvStateChangeEvent(
            const uint64_t& aID,
            const uint64_t& aState,
            const bool& aEnabled) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCaretMoveEvent(
            const uint64_t& aID,
            const int32_t& aOffset,
            const bool& aIsSelectionCollapsed) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTextChangeEvent(
            const uint64_t& aID,
            const nsString& aStr,
            const int32_t& aStart,
            const uint32_t& aLen,
            const bool& aIsInsert,
            const bool& aFromUser) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSelectionEvent(
            const uint64_t& aID,
            const uint64_t& aWidgetID,
            const uint32_t& aType) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRoleChangedEvent(const role& aRole) = 0;
    virtual mozilla::ipc::IPCResult
    RecvVirtualCursorChangeEvent(
            const uint64_t& aID,
            const uint64_t& aOldPosition,
            const int32_t& aOldStartOffset,
            const int32_t& aOldEndOffset,
            const uint64_t& aPosition,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            const int16_t& aReason,
            const int16_t& aBoundaryType,
            const bool& aFromUservcEvent) = 0;
    virtual mozilla::ipc::IPCResult
    RecvScrollingEvent(
            const uint64_t& aID,
            const uint64_t& aType,
            const uint32_t& aScrollX,
            const uint32_t& aScrollY,
            const uint32_t& aMaxScrollX,
            const uint32_t& aMaxScrollY) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAnnouncementEvent(
            const uint64_t& aID,
            const nsString& aAnnouncement,
            const uint16_t& aPriority) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTextSelectionChangeEvent(
            const uint64_t& aID,
            nsTArray<TextRangeData>&& aSelection) = 0;
    virtual mozilla::ipc::IPCResult
    RecvBindChildDoc(
            PDocAccessibleParent* aChildDoc,
            const uint64_t& aID) = 0;
    virtual mozilla::ipc::IPCResult
    RecvBatch(
            const uint64_t& aBatchType,
            nsTArray<BatchData>&& aData) = 0;
    virtual PDocAccessiblePlatformExtParent*
    AllocPDocAccessiblePlatformExtParent() = 0;
    virtual bool
    DeallocPDocAccessiblePlatformExtParent(PDocAccessiblePlatformExtParent* aActor) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PDocAccessibleParent();

    virtual ~PDocAccessibleParent();

public:
    PBrowserParent*
    Manager() const;

    void
    ManagedPDocAccessiblePlatformExtParent(nsTArray<PDocAccessiblePlatformExtParent*>& aArr) const;
    const ManagedContainer<PDocAccessiblePlatformExtParent>&
    ManagedPDocAccessiblePlatformExtParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PDocAccessiblePlatformExtChild>
    OpenPDocAccessiblePlatformExtEndpoint(PDocAccessiblePlatformExtParent* aActor);
    bool
    BindPDocAccessiblePlatformExtEndpoint(
            ManagedEndpoint<PDocAccessiblePlatformExtParent> aEndpoint,
            PDocAccessiblePlatformExtParent* aActor);

    [[nodiscard]] bool
    SendConstructedInParentProcess();

    [[nodiscard]] static bool
    Send__delete__(PDocAccessibleParent* actor);

    [[nodiscard]] bool
    SendRestoreFocus();

    [[nodiscard]] bool
    SendState(
            const uint64_t& aID,
            uint64_t* states);

    [[nodiscard]] bool
    SendNativeState(
            const uint64_t& aID,
            uint64_t* states);

    [[nodiscard]] bool
    SendName(
            const uint64_t& aID,
            nsString* name,
            uint32_t* flag);

    [[nodiscard]] bool
    SendValue(
            const uint64_t& aID,
            nsString* value);

    [[nodiscard]] bool
    SendHelp(
            const uint64_t& aID,
            nsString* help);

    [[nodiscard]] bool
    SendDescription(
            const uint64_t& aID,
            nsString* desc);

    [[nodiscard]] bool
    SendAttributes(
            const uint64_t& aID,
            nsTArray<Attribute>* attributes);

    [[nodiscard]] bool
    SendRelationByType(
            const uint64_t& aID,
            const uint32_t& aRelationType,
            nsTArray<uint64_t>* targets);

    [[nodiscard]] bool
    SendRelations(
            const uint64_t& aID,
            nsTArray<RelationTargets>* relations);

    [[nodiscard]] bool
    SendIsSearchbox(
            const uint64_t& aID,
            bool* retval);

    [[nodiscard]] bool
    SendLandmarkRole(
            const uint64_t& aID,
            nsString* landmark);

    [[nodiscard]] bool
    SendARIARoleAtom(
            const uint64_t& aID,
            nsString* ariaRole);

    [[nodiscard]] bool
    SendGroupPosition(
            const uint64_t& aID,
            int32_t* groupLevel,
            int32_t* similarItemsInGroup,
            int32_t* positionInGroup);

    [[nodiscard]] bool
    SendScrollTo(
            const uint64_t& aID,
            const uint32_t& aScrollType);

    [[nodiscard]] bool
    SendScrollToPoint(
            const uint64_t& aID,
            const uint32_t& aScrollType,
            const int32_t& aX,
            const int32_t& aY);

    [[nodiscard]] bool
    SendAnnounce(
            const uint64_t& aID,
            const nsString& aAnnouncement,
            const uint16_t& aPriority);

    [[nodiscard]] bool
    SendCaretLineNumber(
            const uint64_t& aID,
            int32_t* aLineNumber);

    [[nodiscard]] bool
    SendCaretOffset(
            const uint64_t& aID,
            int32_t* aOffset);

    [[nodiscard]] bool
    SendSetCaretOffset(
            const uint64_t& aID,
            const int32_t& aOffset);

    [[nodiscard]] bool
    SendCharacterCount(
            const uint64_t& aID,
            int32_t* aCount);

    [[nodiscard]] bool
    SendSelectionCount(
            const uint64_t& aID,
            int32_t* aCount);

    [[nodiscard]] bool
    SendTextSubstring(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            nsString* aText,
            bool* aValid);

    [[nodiscard]] bool
    SendGetTextAfterOffset(
            const uint64_t& aID,
            const int32_t& aOffset,
            const int32_t& aBoundaryType,
            nsString* aText,
            int32_t* aStartOffset,
            int32_t* aEndOffset);

    [[nodiscard]] bool
    SendGetTextAtOffset(
            const uint64_t& aID,
            const int32_t& aOffset,
            const int32_t& aBoundaryType,
            nsString* aText,
            int32_t* aStartOffset,
            int32_t* aEndOffset);

    [[nodiscard]] bool
    SendGetTextBeforeOffset(
            const uint64_t& aID,
            const int32_t& aOffset,
            const int32_t& aBoundaryType,
            nsString* aText,
            int32_t* aStartOffset,
            int32_t* aEndOffset);

    [[nodiscard]] bool
    SendCharAt(
            const uint64_t& aID,
            const int32_t& aOffset,
            uint16_t* aChar);

    [[nodiscard]] bool
    SendTextAttributes(
            const uint64_t& aID,
            const bool& aIncludeDefAttrs,
            const int32_t& aOffset,
            nsTArray<Attribute>* aAttributes,
            int32_t* aStartOffset,
            int32_t* aEndOffset);

    [[nodiscard]] bool
    SendDefaultTextAttributes(
            const uint64_t& aID,
            nsTArray<Attribute>* aAttributes);

    [[nodiscard]] bool
    SendTextBounds(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            const uint32_t& aCoordType,
            nsIntRect* aRetVal);

    [[nodiscard]] bool
    SendCharBounds(
            const uint64_t& aID,
            const int32_t& aOffset,
            const uint32_t& aCoordType,
            nsIntRect* aRetVal);

    [[nodiscard]] bool
    SendOffsetAtPoint(
            const uint64_t& aID,
            const int32_t& aX,
            const int32_t& aY,
            const uint32_t& aCoordType,
            int32_t* aRetVal);

    [[nodiscard]] bool
    SendSelectionBoundsAt(
            const uint64_t& aID,
            const int32_t& aSelectionNum,
            bool* aSucceeded,
            nsString* aData,
            int32_t* aStartOffset,
            int32_t* aEndOffset);

    [[nodiscard]] bool
    SendSetSelectionBoundsAt(
            const uint64_t& aID,
            const int32_t& aSelectionNum,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            bool* aSucceeded);

    [[nodiscard]] bool
    SendAddToSelection(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            bool* aSucceeded);

    [[nodiscard]] bool
    SendRemoveFromSelection(
            const uint64_t& aID,
            const int32_t& aSelectionNum,
            bool* aSucceeded);

    [[nodiscard]] bool
    SendScrollSubstringTo(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            const uint32_t& aScrollType);

    [[nodiscard]] bool
    SendScrollSubstringToPoint(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            const uint32_t& aCoordinateType,
            const int32_t& aX,
            const int32_t& aY);

    [[nodiscard]] bool
    SendText(
            const uint64_t& aID,
            nsString* aText);

    [[nodiscard]] bool
    SendReplaceText(
            const uint64_t& aID,
            const nsString& aText);

    [[nodiscard]] bool
    SendInsertText(
            const uint64_t& aID,
            const nsString& aText,
            const int32_t& aPosition,
            bool* aValid);

    [[nodiscard]] bool
    SendCopyText(
            const uint64_t& aID,
            const int32_t& aStartPos,
            const int32_t& aEndPos,
            bool* aValid);

    [[nodiscard]] bool
    SendCutText(
            const uint64_t& aID,
            const int32_t& aStartPos,
            const int32_t& aEndPos,
            bool* aValid);

    [[nodiscard]] bool
    SendDeleteText(
            const uint64_t& aID,
            const int32_t& aStartPos,
            const int32_t& aEndPos,
            bool* aValid);

    [[nodiscard]] bool
    SendPasteText(
            const uint64_t& aID,
            const int32_t& aPosition,
            bool* aValid);

    [[nodiscard]] bool
    SendImagePosition(
            const uint64_t& aID,
            const uint32_t& aCoordType,
            IntPoint* aRetVal);

    [[nodiscard]] bool
    SendImageSize(
            const uint64_t& aID,
            IntSize* aRetVal);

    [[nodiscard]] bool
    SendStartOffset(
            const uint64_t& aID,
            uint32_t* aRetVal,
            bool* aOk);

    [[nodiscard]] bool
    SendEndOffset(
            const uint64_t& aID,
            uint32_t* aRetVal,
            bool* aOk);

    [[nodiscard]] bool
    SendIsLinkValid(
            const uint64_t& aID,
            bool* aRetVal);

    [[nodiscard]] bool
    SendAnchorCount(
            const uint64_t& aID,
            uint32_t* aRetVal,
            bool* aOk);

    [[nodiscard]] bool
    SendAnchorURIAt(
            const uint64_t& aID,
            const uint32_t& aIndex,
            nsCString* aURI,
            bool* aOk);

    [[nodiscard]] bool
    SendAnchorAt(
            const uint64_t& aID,
            const uint32_t& aIndex,
            uint64_t* aIDOfAnchor,
            bool* aOk);

    [[nodiscard]] bool
    SendLinkCount(
            const uint64_t& aID,
            uint32_t* aCount);

    [[nodiscard]] bool
    SendLinkAt(
            const uint64_t& aID,
            const uint32_t& aIndex,
            uint64_t* aIDOfLink,
            bool* aOk);

    [[nodiscard]] bool
    SendLinkIndexOf(
            const uint64_t& aID,
            const uint64_t& aLinkID,
            int32_t* aIndex);

    [[nodiscard]] bool
    SendLinkIndexAtOffset(
            const uint64_t& aID,
            const uint32_t& aOffset,
            int32_t* aIndex);

    [[nodiscard]] bool
    SendTableOfACell(
            const uint64_t& aID,
            uint64_t* aTableID,
            bool* aOk);

    [[nodiscard]] bool
    SendColIdx(
            const uint64_t& aID,
            uint32_t* aIndex);

    [[nodiscard]] bool
    SendRowIdx(
            const uint64_t& aID,
            uint32_t* aIndex);

    [[nodiscard]] bool
    SendGetPosition(
            const uint64_t& aID,
            uint32_t* aRow,
            uint32_t* aCol);

    [[nodiscard]] bool
    SendColExtent(
            const uint64_t& aID,
            uint32_t* aExtent);

    [[nodiscard]] bool
    SendRowExtent(
            const uint64_t& aID,
            uint32_t* aExtent);

    [[nodiscard]] bool
    SendGetColRowExtents(
            const uint64_t& aID,
            uint32_t* aCol,
            uint32_t* aRow,
            uint32_t* aColExtent,
            uint32_t* aRowExtent);

    [[nodiscard]] bool
    SendColHeaderCells(
            const uint64_t& aID,
            nsTArray<uint64_t>* aCells);

    [[nodiscard]] bool
    SendRowHeaderCells(
            const uint64_t& aID,
            nsTArray<uint64_t>* aCells);

    [[nodiscard]] bool
    SendIsCellSelected(
            const uint64_t& aID,
            bool* aSelected);

    [[nodiscard]] bool
    SendTableCaption(
            const uint64_t& aID,
            uint64_t* aCaptionID,
            bool* aOk);

    [[nodiscard]] bool
    SendTableSummary(
            const uint64_t& aID,
            nsString* aSummary);

    [[nodiscard]] bool
    SendTableColumnCount(
            const uint64_t& aID,
            uint32_t* aColCount);

    [[nodiscard]] bool
    SendTableRowCount(
            const uint64_t& aID,
            uint32_t* aRowCount);

    [[nodiscard]] bool
    SendTableCellAt(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            uint64_t* aCellID,
            bool* aOk);

    [[nodiscard]] bool
    SendTableCellIndexAt(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            int32_t* aIndex);

    [[nodiscard]] bool
    SendTableColumnIndexAt(
            const uint64_t& aID,
            const uint32_t& aCellIndex,
            int32_t* aCol);

    [[nodiscard]] bool
    SendTableRowIndexAt(
            const uint64_t& aID,
            const uint32_t& aCellIndex,
            int32_t* aRow);

    [[nodiscard]] bool
    SendTableRowAndColumnIndicesAt(
            const uint64_t& aID,
            const uint32_t& aCellIndex,
            int32_t* aRow,
            int32_t* aCol);

    [[nodiscard]] bool
    SendTableColumnExtentAt(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            uint32_t* aExtent);

    [[nodiscard]] bool
    SendTableRowExtentAt(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            uint32_t* aExtent);

    [[nodiscard]] bool
    SendTableColumnDescription(
            const uint64_t& aID,
            const uint32_t& aCol,
            nsString* aDescription);

    [[nodiscard]] bool
    SendTableRowDescription(
            const uint64_t& aID,
            const uint32_t& aRow,
            nsString* aDescription);

    [[nodiscard]] bool
    SendTableColumnSelected(
            const uint64_t& aID,
            const uint32_t& aCol,
            bool* aSelected);

    [[nodiscard]] bool
    SendTableRowSelected(
            const uint64_t& aID,
            const uint32_t& aRow,
            bool* aSelected);

    [[nodiscard]] bool
    SendTableCellSelected(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            bool* aSelected);

    [[nodiscard]] bool
    SendTableSelectedCellCount(
            const uint64_t& aID,
            uint32_t* aSelectedCells);

    [[nodiscard]] bool
    SendTableSelectedColumnCount(
            const uint64_t& aID,
            uint32_t* aSelectedColumns);

    [[nodiscard]] bool
    SendTableSelectedRowCount(
            const uint64_t& aID,
            uint32_t* aSelectedRows);

    [[nodiscard]] bool
    SendTableSelectedCells(
            const uint64_t& aID,
            nsTArray<uint64_t>* aCellIDs);

    [[nodiscard]] bool
    SendTableSelectedCellIndices(
            const uint64_t& aID,
            nsTArray<uint32_t>* aCellIndeces);

    [[nodiscard]] bool
    SendTableSelectedColumnIndices(
            const uint64_t& aID,
            nsTArray<uint32_t>* aColumnIndeces);

    [[nodiscard]] bool
    SendTableSelectedRowIndices(
            const uint64_t& aID,
            nsTArray<uint32_t>* aRowIndeces);

    [[nodiscard]] bool
    SendTableSelectColumn(
            const uint64_t& aID,
            const uint32_t& aCol);

    [[nodiscard]] bool
    SendTableSelectRow(
            const uint64_t& aID,
            const uint32_t& aRow);

    [[nodiscard]] bool
    SendTableUnselectColumn(
            const uint64_t& aID,
            const uint32_t& aCol);

    [[nodiscard]] bool
    SendTableUnselectRow(
            const uint64_t& aID,
            const uint32_t& aRow);

    [[nodiscard]] bool
    SendTableIsProbablyForLayout(
            const uint64_t& aID,
            bool* aForLayout);

    [[nodiscard]] bool
    SendAtkTableColumnHeader(
            const uint64_t& aID,
            const int32_t& aCol,
            uint64_t* aHeaderID,
            bool* aOk);

    [[nodiscard]] bool
    SendAtkTableRowHeader(
            const uint64_t& aID,
            const int32_t& aRow,
            uint64_t* aHeaderID,
            bool* aOk);

    [[nodiscard]] bool
    SendSelectedItems(
            const uint64_t& aID,
            nsTArray<uint64_t>* aSelectedItemIDs);

    [[nodiscard]] bool
    SendSelectedItemCount(
            const uint64_t& aID,
            uint32_t* aCount);

    [[nodiscard]] bool
    SendGetSelectedItem(
            const uint64_t& aID,
            const uint32_t& aIndex,
            uint64_t* aSelected,
            bool* aOk);

    [[nodiscard]] bool
    SendIsItemSelected(
            const uint64_t& aID,
            const uint32_t& aIndex,
            bool* aSelected);

    [[nodiscard]] bool
    SendAddItemToSelection(
            const uint64_t& aID,
            const uint32_t& aIndex,
            bool* aSuccess);

    [[nodiscard]] bool
    SendRemoveItemFromSelection(
            const uint64_t& aID,
            const uint32_t& aIndex,
            bool* aSuccess);

    [[nodiscard]] bool
    SendSelectAll(
            const uint64_t& aID,
            bool* aSuccess);

    [[nodiscard]] bool
    SendUnselectAll(
            const uint64_t& aID,
            bool* aSuccess);

    [[nodiscard]] bool
    SendTakeSelection(const uint64_t& aID);

    [[nodiscard]] bool
    SendSetSelected(
            const uint64_t& aID,
            const bool& aSelected);

    [[nodiscard]] bool
    SendDoAction(
            const uint64_t& aID,
            const uint8_t& aIndex,
            bool* aSuccess);

    [[nodiscard]] bool
    SendActionCount(
            const uint64_t& aID,
            uint8_t* aCount);

    [[nodiscard]] bool
    SendActionDescriptionAt(
            const uint64_t& aID,
            const uint8_t& aIndex,
            nsString* aDescription);

    [[nodiscard]] bool
    SendActionNameAt(
            const uint64_t& aID,
            const uint8_t& aIndex,
            nsString* aName);

    [[nodiscard]] bool
    SendAccessKey(
            const uint64_t& aID,
            uint32_t* aKey,
            uint32_t* aModifierMask);

    [[nodiscard]] bool
    SendKeyboardShortcut(
            const uint64_t& aID,
            uint32_t* aKey,
            uint32_t* aModifierMask);

    [[nodiscard]] bool
    SendAtkKeyBinding(
            const uint64_t& aID,
            nsString* aResult);

    [[nodiscard]] bool
    SendCurValue(
            const uint64_t& aID,
            double* aValue);

    [[nodiscard]] bool
    SendSetCurValue(
            const uint64_t& aID,
            const double& aValue,
            bool* aRetVal);

    [[nodiscard]] bool
    SendMinValue(
            const uint64_t& aID,
            double* aValue);

    [[nodiscard]] bool
    SendMaxValue(
            const uint64_t& aID,
            double* aValue);

    [[nodiscard]] bool
    SendStep(
            const uint64_t& aID,
            double* aStep);

    [[nodiscard]] bool
    SendTakeFocus(const uint64_t& aID);

    [[nodiscard]] bool
    SendFocusedChild(
            const uint64_t& aID,
            PDocAccessibleParent** aResultDoc,
            uint64_t* aResultID);

    [[nodiscard]] bool
    SendLanguage(
            const uint64_t& aID,
            nsString* aLocale);

    [[nodiscard]] bool
    SendDocType(
            const uint64_t& aID,
            nsString* aType);

    [[nodiscard]] bool
    SendTitle(
            const uint64_t& aID,
            nsString* aTitle);

    [[nodiscard]] bool
    SendURL(
            const uint64_t& aID,
            nsString* aURL);

    [[nodiscard]] bool
    SendMimeType(
            const uint64_t& aID,
            nsString* aMime);

    [[nodiscard]] bool
    SendURLDocTypeMimeType(
            const uint64_t& aID,
            nsString* aURL,
            nsString* aDocType,
            nsString* aMimeType);

    [[nodiscard]] bool
    SendChildAtPoint(
            const uint64_t& aID,
            const int32_t& aX,
            const int32_t& aY,
            const uint32_t& aWhich,
            PDocAccessibleParent** aResultDoc,
            uint64_t* aResultID);

    [[nodiscard]] bool
    SendExtents(
            const uint64_t& aID,
            const bool& aNeedsScreenCoords,
            int32_t* aX,
            int32_t* aY,
            int32_t* aWidth,
            int32_t* aHeight);

    [[nodiscard]] bool
    SendExtentsInCSSPixels(
            const uint64_t& aID,
            int32_t* aX,
            int32_t* aY,
            int32_t* aWidth,
            int32_t* aHeight);

    [[nodiscard]] bool
    SendDOMNodeID(
            const uint64_t& aID,
            nsString* aDOMNodeID);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PDocAccessiblePlatformExtParent> mManagedPDocAccessiblePlatformExtParent;
};


} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::PDocAccessibleParent*>
{
    typedef mozilla::a11y::PDocAccessibleParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PDocAccessibleParent_h
