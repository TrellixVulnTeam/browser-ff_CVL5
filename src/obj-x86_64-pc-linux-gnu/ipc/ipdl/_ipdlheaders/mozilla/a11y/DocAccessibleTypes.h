//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef DocAccessibleTypes_h
#define DocAccessibleTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct Attribute|
//
namespace mozilla {
namespace a11y {
class Attribute final
{
private:

public:
    MOZ_IMPLICIT Attribute() :
        Name_(),
        Value_()
    {
    }

    MOZ_IMPLICIT Attribute(
            const nsCString& _Name,
            const nsString& _Value) :
        Name_(_Name),
        Value_(_Value)
    {
    }

    nsCString&
    Name()
    {
        return Name_;
    }
    const nsCString&
    Name() const
    {
        return Name_;
    }

    nsString&
    Value()
    {
        return Value_;
    }
    const nsString&
    Value() const
    {
        return Value_;
    }

private:
    nsCString Name_;
    nsString Value_;
};
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::Attribute>
{
    typedef mozilla::a11y::Attribute paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct TextAttributesRun|
//
namespace mozilla {
namespace a11y {
class TextAttributesRun final
{
private:
    typedef mozilla::a11y::Attribute Attribute;

public:
    MOZ_IMPLICIT TextAttributesRun() :
        Text_(),
        TextAttributes_(),
        ContainerID_()
    {
    }

    MOZ_IMPLICIT TextAttributesRun(
            const nsString& _Text,
            const uint64_t& _ContainerID,
            const nsTArray<Attribute>& _TextAttributes) :
        Text_(_Text),
        TextAttributes_(_TextAttributes),
        ContainerID_(_ContainerID)
    {
    }

    nsString&
    Text()
    {
        return Text_;
    }
    const nsString&
    Text() const
    {
        return Text_;
    }

    uint64_t&
    ContainerID()
    {
        return ContainerID_;
    }
    const uint64_t&
    ContainerID() const
    {
        return ContainerID_;
    }

    nsTArray<Attribute>&
    TextAttributes()
    {
        return TextAttributes_;
    }
    const nsTArray<Attribute>&
    TextAttributes() const
    {
        return TextAttributes_;
    }

private:
    nsString Text_;
    CopyableTArray<Attribute> TextAttributes_;
    uint64_t ContainerID_;
};
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::TextAttributesRun>
{
    typedef mozilla::a11y::TextAttributesRun paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef DocAccessibleTypes_h
