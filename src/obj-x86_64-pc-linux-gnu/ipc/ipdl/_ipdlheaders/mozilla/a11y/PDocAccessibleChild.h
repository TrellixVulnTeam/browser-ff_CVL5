//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PDocAccessibleChild_h
#define PDocAccessibleChild_h

#include "mozilla/a11y/PDocAccessible.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/a11y/IPCTypes.h"
#include "mozilla/gfx/Point.h"
#include "nsRect.h"

namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessiblePlatformExtChild;
} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace a11y {
class PDocAccessiblePlatformExtParent;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserBridgeChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace a11y {
class PDocAccessiblePlatformExtChild;
} // namespace a11y
} // namespace mozilla

namespace mozilla {
namespace a11y {


class PDocAccessibleChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PBrowserBridgeChild;
    friend class mozilla::dom::PBrowserChild;
    friend class mozilla::a11y::PDocAccessiblePlatformExtChild;
protected:
    typedef mozilla::a11y::AccessibleData AccessibleData;
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::a11y::Attribute Attribute;
    typedef mozilla::a11y::BatchData BatchData;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::gfx::IntPoint IntPoint;
    typedef mozilla::gfx::IntSize IntSize;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::a11y::OriginDocument OriginDocument;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::a11y::RelationTargets RelationTargets;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::a11y::ShowEventData ShowEventData;
    typedef mozilla::a11y::TextAttributesRun TextAttributesRun;
    typedef mozilla::a11y::TextRangeData TextRangeData;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::a11y::role role;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::a11y::PDocAccessiblePlatformExtChild PDocAccessiblePlatformExtChild;
    typedef mozilla::a11y::PDocAccessiblePlatformExtParent PDocAccessiblePlatformExtParent;

protected:
    virtual mozilla::ipc::IPCResult
    RecvConstructedInParentProcess() = 0;
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvRestoreFocus() = 0;
    virtual mozilla::ipc::IPCResult
    RecvState(
            const uint64_t& aID,
            uint64_t* states) = 0;
    virtual mozilla::ipc::IPCResult
    RecvNativeState(
            const uint64_t& aID,
            uint64_t* states) = 0;
    virtual mozilla::ipc::IPCResult
    RecvName(
            const uint64_t& aID,
            nsString* name,
            uint32_t* flag) = 0;
    virtual mozilla::ipc::IPCResult
    RecvValue(
            const uint64_t& aID,
            nsString* value) = 0;
    virtual mozilla::ipc::IPCResult
    RecvHelp(
            const uint64_t& aID,
            nsString* help) = 0;
    virtual mozilla::ipc::IPCResult
    RecvDescription(
            const uint64_t& aID,
            nsString* desc) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAttributes(
            const uint64_t& aID,
            nsTArray<Attribute>* attributes) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRelationByType(
            const uint64_t& aID,
            const uint32_t& aRelationType,
            nsTArray<uint64_t>* targets) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRelations(
            const uint64_t& aID,
            nsTArray<RelationTargets>* relations) = 0;
    virtual mozilla::ipc::IPCResult
    RecvIsSearchbox(
            const uint64_t& aID,
            bool* retval) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLandmarkRole(
            const uint64_t& aID,
            nsString* landmark) = 0;
    virtual mozilla::ipc::IPCResult
    RecvARIARoleAtom(
            const uint64_t& aID,
            nsString* ariaRole) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGroupPosition(
            const uint64_t& aID,
            int32_t* groupLevel,
            int32_t* similarItemsInGroup,
            int32_t* positionInGroup) = 0;
    virtual mozilla::ipc::IPCResult
    RecvScrollTo(
            const uint64_t& aID,
            const uint32_t& aScrollType) = 0;
    virtual mozilla::ipc::IPCResult
    RecvScrollToPoint(
            const uint64_t& aID,
            const uint32_t& aScrollType,
            const int32_t& aX,
            const int32_t& aY) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAnnounce(
            const uint64_t& aID,
            const nsString& aAnnouncement,
            const uint16_t& aPriority) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCaretLineNumber(
            const uint64_t& aID,
            int32_t* aLineNumber) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCaretOffset(
            const uint64_t& aID,
            int32_t* aOffset) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSetCaretOffset(
            const uint64_t& aID,
            const int32_t& aOffset) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCharacterCount(
            const uint64_t& aID,
            int32_t* aCount) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSelectionCount(
            const uint64_t& aID,
            int32_t* aCount) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTextSubstring(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            nsString* aText,
            bool* aValid) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetTextAfterOffset(
            const uint64_t& aID,
            const int32_t& aOffset,
            const int32_t& aBoundaryType,
            nsString* aText,
            int32_t* aStartOffset,
            int32_t* aEndOffset) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetTextAtOffset(
            const uint64_t& aID,
            const int32_t& aOffset,
            const int32_t& aBoundaryType,
            nsString* aText,
            int32_t* aStartOffset,
            int32_t* aEndOffset) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetTextBeforeOffset(
            const uint64_t& aID,
            const int32_t& aOffset,
            const int32_t& aBoundaryType,
            nsString* aText,
            int32_t* aStartOffset,
            int32_t* aEndOffset) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCharAt(
            const uint64_t& aID,
            const int32_t& aOffset,
            uint16_t* aChar) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTextAttributes(
            const uint64_t& aID,
            const bool& aIncludeDefAttrs,
            const int32_t& aOffset,
            nsTArray<Attribute>* aAttributes,
            int32_t* aStartOffset,
            int32_t* aEndOffset) = 0;
    virtual mozilla::ipc::IPCResult
    RecvDefaultTextAttributes(
            const uint64_t& aID,
            nsTArray<Attribute>* aAttributes) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTextBounds(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            const uint32_t& aCoordType,
            nsIntRect* aRetVal) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCharBounds(
            const uint64_t& aID,
            const int32_t& aOffset,
            const uint32_t& aCoordType,
            nsIntRect* aRetVal) = 0;
    virtual mozilla::ipc::IPCResult
    RecvOffsetAtPoint(
            const uint64_t& aID,
            const int32_t& aX,
            const int32_t& aY,
            const uint32_t& aCoordType,
            int32_t* aRetVal) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSelectionBoundsAt(
            const uint64_t& aID,
            const int32_t& aSelectionNum,
            bool* aSucceeded,
            nsString* aData,
            int32_t* aStartOffset,
            int32_t* aEndOffset) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSetSelectionBoundsAt(
            const uint64_t& aID,
            const int32_t& aSelectionNum,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            bool* aSucceeded) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAddToSelection(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            bool* aSucceeded) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRemoveFromSelection(
            const uint64_t& aID,
            const int32_t& aSelectionNum,
            bool* aSucceeded) = 0;
    virtual mozilla::ipc::IPCResult
    RecvScrollSubstringTo(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            const uint32_t& aScrollType) = 0;
    virtual mozilla::ipc::IPCResult
    RecvScrollSubstringToPoint(
            const uint64_t& aID,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            const uint32_t& aCoordinateType,
            const int32_t& aX,
            const int32_t& aY) = 0;
    virtual mozilla::ipc::IPCResult
    RecvText(
            const uint64_t& aID,
            nsString* aText) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReplaceText(
            const uint64_t& aID,
            const nsString& aText) = 0;
    virtual mozilla::ipc::IPCResult
    RecvInsertText(
            const uint64_t& aID,
            const nsString& aText,
            const int32_t& aPosition,
            bool* aValid) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCopyText(
            const uint64_t& aID,
            const int32_t& aStartPos,
            const int32_t& aEndPos,
            bool* aValid) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCutText(
            const uint64_t& aID,
            const int32_t& aStartPos,
            const int32_t& aEndPos,
            bool* aValid) = 0;
    virtual mozilla::ipc::IPCResult
    RecvDeleteText(
            const uint64_t& aID,
            const int32_t& aStartPos,
            const int32_t& aEndPos,
            bool* aValid) = 0;
    virtual mozilla::ipc::IPCResult
    RecvPasteText(
            const uint64_t& aID,
            const int32_t& aPosition,
            bool* aValid) = 0;
    virtual mozilla::ipc::IPCResult
    RecvImagePosition(
            const uint64_t& aID,
            const uint32_t& aCoordType,
            IntPoint* aRetVal) = 0;
    virtual mozilla::ipc::IPCResult
    RecvImageSize(
            const uint64_t& aID,
            IntSize* aRetVal) = 0;
    virtual mozilla::ipc::IPCResult
    RecvStartOffset(
            const uint64_t& aID,
            uint32_t* aRetVal,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvEndOffset(
            const uint64_t& aID,
            uint32_t* aRetVal,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvIsLinkValid(
            const uint64_t& aID,
            bool* aRetVal) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAnchorCount(
            const uint64_t& aID,
            uint32_t* aRetVal,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAnchorURIAt(
            const uint64_t& aID,
            const uint32_t& aIndex,
            nsCString* aURI,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAnchorAt(
            const uint64_t& aID,
            const uint32_t& aIndex,
            uint64_t* aIDOfAnchor,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLinkCount(
            const uint64_t& aID,
            uint32_t* aCount) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLinkAt(
            const uint64_t& aID,
            const uint32_t& aIndex,
            uint64_t* aIDOfLink,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLinkIndexOf(
            const uint64_t& aID,
            const uint64_t& aLinkID,
            int32_t* aIndex) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLinkIndexAtOffset(
            const uint64_t& aID,
            const uint32_t& aOffset,
            int32_t* aIndex) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableOfACell(
            const uint64_t& aID,
            uint64_t* aTableID,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvColIdx(
            const uint64_t& aID,
            uint32_t* aIndex) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRowIdx(
            const uint64_t& aID,
            uint32_t* aIndex) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetPosition(
            const uint64_t& aID,
            uint32_t* aRow,
            uint32_t* aCol) = 0;
    virtual mozilla::ipc::IPCResult
    RecvColExtent(
            const uint64_t& aID,
            uint32_t* aExtent) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRowExtent(
            const uint64_t& aID,
            uint32_t* aExtent) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetColRowExtents(
            const uint64_t& aID,
            uint32_t* aCol,
            uint32_t* aRow,
            uint32_t* aColExtent,
            uint32_t* aRowExtent) = 0;
    virtual mozilla::ipc::IPCResult
    RecvColHeaderCells(
            const uint64_t& aID,
            nsTArray<uint64_t>* aCells) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRowHeaderCells(
            const uint64_t& aID,
            nsTArray<uint64_t>* aCells) = 0;
    virtual mozilla::ipc::IPCResult
    RecvIsCellSelected(
            const uint64_t& aID,
            bool* aSelected) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableCaption(
            const uint64_t& aID,
            uint64_t* aCaptionID,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSummary(
            const uint64_t& aID,
            nsString* aSummary) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableColumnCount(
            const uint64_t& aID,
            uint32_t* aColCount) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableRowCount(
            const uint64_t& aID,
            uint32_t* aRowCount) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableCellAt(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            uint64_t* aCellID,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableCellIndexAt(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            int32_t* aIndex) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableColumnIndexAt(
            const uint64_t& aID,
            const uint32_t& aCellIndex,
            int32_t* aCol) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableRowIndexAt(
            const uint64_t& aID,
            const uint32_t& aCellIndex,
            int32_t* aRow) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableRowAndColumnIndicesAt(
            const uint64_t& aID,
            const uint32_t& aCellIndex,
            int32_t* aRow,
            int32_t* aCol) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableColumnExtentAt(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            uint32_t* aExtent) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableRowExtentAt(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            uint32_t* aExtent) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableColumnDescription(
            const uint64_t& aID,
            const uint32_t& aCol,
            nsString* aDescription) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableRowDescription(
            const uint64_t& aID,
            const uint32_t& aRow,
            nsString* aDescription) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableColumnSelected(
            const uint64_t& aID,
            const uint32_t& aCol,
            bool* aSelected) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableRowSelected(
            const uint64_t& aID,
            const uint32_t& aRow,
            bool* aSelected) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableCellSelected(
            const uint64_t& aID,
            const uint32_t& aRow,
            const uint32_t& aCol,
            bool* aSelected) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectedCellCount(
            const uint64_t& aID,
            uint32_t* aSelectedCells) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectedColumnCount(
            const uint64_t& aID,
            uint32_t* aSelectedColumns) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectedRowCount(
            const uint64_t& aID,
            uint32_t* aSelectedRows) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectedCells(
            const uint64_t& aID,
            nsTArray<uint64_t>* aCellIDs) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectedCellIndices(
            const uint64_t& aID,
            nsTArray<uint32_t>* aCellIndeces) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectedColumnIndices(
            const uint64_t& aID,
            nsTArray<uint32_t>* aColumnIndeces) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectedRowIndices(
            const uint64_t& aID,
            nsTArray<uint32_t>* aRowIndeces) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectColumn(
            const uint64_t& aID,
            const uint32_t& aCol) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableSelectRow(
            const uint64_t& aID,
            const uint32_t& aRow) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableUnselectColumn(
            const uint64_t& aID,
            const uint32_t& aCol) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableUnselectRow(
            const uint64_t& aID,
            const uint32_t& aRow) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTableIsProbablyForLayout(
            const uint64_t& aID,
            bool* aForLayout) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAtkTableColumnHeader(
            const uint64_t& aID,
            const int32_t& aCol,
            uint64_t* aHeaderID,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAtkTableRowHeader(
            const uint64_t& aID,
            const int32_t& aRow,
            uint64_t* aHeaderID,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSelectedItems(
            const uint64_t& aID,
            nsTArray<uint64_t>* aSelectedItemIDs) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSelectedItemCount(
            const uint64_t& aID,
            uint32_t* aCount) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetSelectedItem(
            const uint64_t& aID,
            const uint32_t& aIndex,
            uint64_t* aSelected,
            bool* aOk) = 0;
    virtual mozilla::ipc::IPCResult
    RecvIsItemSelected(
            const uint64_t& aID,
            const uint32_t& aIndex,
            bool* aSelected) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAddItemToSelection(
            const uint64_t& aID,
            const uint32_t& aIndex,
            bool* aSuccess) = 0;
    virtual mozilla::ipc::IPCResult
    RecvRemoveItemFromSelection(
            const uint64_t& aID,
            const uint32_t& aIndex,
            bool* aSuccess) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSelectAll(
            const uint64_t& aID,
            bool* aSuccess) = 0;
    virtual mozilla::ipc::IPCResult
    RecvUnselectAll(
            const uint64_t& aID,
            bool* aSuccess) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTakeSelection(const uint64_t& aID) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSetSelected(
            const uint64_t& aID,
            const bool& aSelected) = 0;
    virtual mozilla::ipc::IPCResult
    RecvDoAction(
            const uint64_t& aID,
            const uint8_t& aIndex,
            bool* aSuccess) = 0;
    virtual mozilla::ipc::IPCResult
    RecvActionCount(
            const uint64_t& aID,
            uint8_t* aCount) = 0;
    virtual mozilla::ipc::IPCResult
    RecvActionDescriptionAt(
            const uint64_t& aID,
            const uint8_t& aIndex,
            nsString* aDescription) = 0;
    virtual mozilla::ipc::IPCResult
    RecvActionNameAt(
            const uint64_t& aID,
            const uint8_t& aIndex,
            nsString* aName) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAccessKey(
            const uint64_t& aID,
            uint32_t* aKey,
            uint32_t* aModifierMask) = 0;
    virtual mozilla::ipc::IPCResult
    RecvKeyboardShortcut(
            const uint64_t& aID,
            uint32_t* aKey,
            uint32_t* aModifierMask) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAtkKeyBinding(
            const uint64_t& aID,
            nsString* aResult) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCurValue(
            const uint64_t& aID,
            double* aValue) = 0;
    virtual mozilla::ipc::IPCResult
    RecvSetCurValue(
            const uint64_t& aID,
            const double& aValue,
            bool* aRetVal) = 0;
    virtual mozilla::ipc::IPCResult
    RecvMinValue(
            const uint64_t& aID,
            double* aValue) = 0;
    virtual mozilla::ipc::IPCResult
    RecvMaxValue(
            const uint64_t& aID,
            double* aValue) = 0;
    virtual mozilla::ipc::IPCResult
    RecvStep(
            const uint64_t& aID,
            double* aStep) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTakeFocus(const uint64_t& aID) = 0;
    virtual mozilla::ipc::IPCResult
    RecvFocusedChild(
            const uint64_t& aID,
            PDocAccessibleChild** aResultDoc,
            uint64_t* aResultID) = 0;
    virtual mozilla::ipc::IPCResult
    RecvLanguage(
            const uint64_t& aID,
            nsString* aLocale) = 0;
    virtual mozilla::ipc::IPCResult
    RecvDocType(
            const uint64_t& aID,
            nsString* aType) = 0;
    virtual mozilla::ipc::IPCResult
    RecvTitle(
            const uint64_t& aID,
            nsString* aTitle) = 0;
    virtual mozilla::ipc::IPCResult
    RecvURL(
            const uint64_t& aID,
            nsString* aURL) = 0;
    virtual mozilla::ipc::IPCResult
    RecvMimeType(
            const uint64_t& aID,
            nsString* aMime) = 0;
    virtual mozilla::ipc::IPCResult
    RecvURLDocTypeMimeType(
            const uint64_t& aID,
            nsString* aURL,
            nsString* aDocType,
            nsString* aMimeType) = 0;
    virtual mozilla::ipc::IPCResult
    RecvChildAtPoint(
            const uint64_t& aID,
            const int32_t& aX,
            const int32_t& aY,
            const uint32_t& aWhich,
            PDocAccessibleChild** aResultDoc,
            uint64_t* aResultID) = 0;
    virtual mozilla::ipc::IPCResult
    RecvExtents(
            const uint64_t& aID,
            const bool& aNeedsScreenCoords,
            int32_t* aX,
            int32_t* aY,
            int32_t* aWidth,
            int32_t* aHeight) = 0;
    virtual mozilla::ipc::IPCResult
    RecvExtentsInCSSPixels(
            const uint64_t& aID,
            int32_t* aX,
            int32_t* aY,
            int32_t* aWidth,
            int32_t* aHeight) = 0;
    virtual mozilla::ipc::IPCResult
    RecvDOMNodeID(
            const uint64_t& aID,
            nsString* aDOMNodeID) = 0;
    virtual PDocAccessiblePlatformExtChild*
    AllocPDocAccessiblePlatformExtChild() = 0;
    virtual bool
    DeallocPDocAccessiblePlatformExtChild(PDocAccessiblePlatformExtChild* aActor) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PDocAccessibleChild();

    virtual ~PDocAccessibleChild();

public:
    PBrowserChild*
    Manager() const;

    void
    ManagedPDocAccessiblePlatformExtChild(nsTArray<PDocAccessiblePlatformExtChild*>& aArr) const;
    const ManagedContainer<PDocAccessiblePlatformExtChild>&
    ManagedPDocAccessiblePlatformExtChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PDocAccessiblePlatformExtParent>
    OpenPDocAccessiblePlatformExtEndpoint(PDocAccessiblePlatformExtChild* aActor);
    bool
    BindPDocAccessiblePlatformExtEndpoint(
            ManagedEndpoint<PDocAccessiblePlatformExtChild> aEndpoint,
            PDocAccessiblePlatformExtChild* aActor);

    PDocAccessiblePlatformExtChild*
    SendPDocAccessiblePlatformExtConstructor();

    PDocAccessiblePlatformExtChild*
    SendPDocAccessiblePlatformExtConstructor(PDocAccessiblePlatformExtChild* actor);

    bool
    SendShutdown();

    bool
    SendEvent(
            const uint64_t& aID,
            const uint32_t& type);

    bool
    SendShowEvent(
            const ShowEventData& data,
            const bool& aFromuser);

    bool
    SendHideEvent(
            const uint64_t& aRootID,
            const bool& aFromUser);

    bool
    SendStateChangeEvent(
            const uint64_t& aID,
            const uint64_t& aState,
            const bool& aEnabled);

    bool
    SendCaretMoveEvent(
            const uint64_t& aID,
            const int32_t& aOffset,
            const bool& aIsSelectionCollapsed);

    bool
    SendTextChangeEvent(
            const uint64_t& aID,
            const nsString& aStr,
            const int32_t& aStart,
            const uint32_t& aLen,
            const bool& aIsInsert,
            const bool& aFromUser);

    bool
    SendSelectionEvent(
            const uint64_t& aID,
            const uint64_t& aWidgetID,
            const uint32_t& aType);

    bool
    SendRoleChangedEvent(const role& aRole);

    bool
    SendVirtualCursorChangeEvent(
            const uint64_t& aID,
            const uint64_t& aOldPosition,
            const int32_t& aOldStartOffset,
            const int32_t& aOldEndOffset,
            const uint64_t& aPosition,
            const int32_t& aStartOffset,
            const int32_t& aEndOffset,
            const int16_t& aReason,
            const int16_t& aBoundaryType,
            const bool& aFromUservcEvent);

    bool
    SendScrollingEvent(
            const uint64_t& aID,
            const uint64_t& aType,
            const uint32_t& aScrollX,
            const uint32_t& aScrollY,
            const uint32_t& aMaxScrollX,
            const uint32_t& aMaxScrollY);

    bool
    SendAnnouncementEvent(
            const uint64_t& aID,
            const nsString& aAnnouncement,
            const uint16_t& aPriority);

    bool
    SendTextSelectionChangeEvent(
            const uint64_t& aID,
            const nsTArray<TextRangeData>& aSelection);

    bool
    SendBindChildDoc(
            PDocAccessibleChild* aChildDoc,
            const uint64_t& aID);

    bool
    SendBatch(
            const uint64_t& aBatchType,
            const nsTArray<BatchData>& aData);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PDocAccessiblePlatformExtChild> mManagedPDocAccessiblePlatformExtChild;
};


} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::a11y::PDocAccessibleChild*>
{
    typedef mozilla::a11y::PDocAccessibleChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PDocAccessibleChild_h
