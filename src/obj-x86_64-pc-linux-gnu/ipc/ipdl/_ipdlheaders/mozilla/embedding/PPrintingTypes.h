//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPrintingTypes_h
#define PPrintingTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct CStringKeyValue|
//
namespace mozilla {
namespace embedding {
class CStringKeyValue final
{
private:

public:
    MOZ_IMPLICIT CStringKeyValue() :
        key_(),
        value_()
    {
    }

    MOZ_IMPLICIT CStringKeyValue(
            const nsCString& _key,
            const nsCString& _value) :
        key_(_key),
        value_(_value)
    {
    }

    nsCString&
    key()
    {
        return key_;
    }
    const nsCString&
    key() const
    {
        return key_;
    }

    nsCString&
    value()
    {
        return value_;
    }
    const nsCString&
    value() const
    {
        return value_;
    }

private:
    nsCString key_;
    nsCString value_;
};
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::embedding::CStringKeyValue>
{
    typedef mozilla::embedding::CStringKeyValue paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRemotePrintJobParent;
} // namespace layout
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRemotePrintJobChild;
} // namespace layout
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PrintData|
//
namespace mozilla {
namespace embedding {
class PrintData final
{
private:
    typedef mozilla::layout::PRemotePrintJobParent PRemotePrintJobParent;
    typedef mozilla::layout::PRemotePrintJobChild PRemotePrintJobChild;
    typedef mozilla::embedding::CStringKeyValue CStringKeyValue;

public:
    MOZ_IMPLICIT PrintData() :
        remotePrintJobParent_(),
        remotePrintJobChild_(),
        printBGColors_(),
        printBGImages_(),
        honorPageRuleMargins_(),
        showMarginGuides_(),
        isPrintSelectionRBEnabled_(),
        printSelectionOnly_(),
        pageRanges_(),
        title_(),
        docURL_(),
        headerStrLeft_(),
        headerStrCenter_(),
        headerStrRight_(),
        footerStrLeft_(),
        footerStrCenter_(),
        footerStrRight_(),
        isCancelled_(),
        printSilent_(),
        shrinkToFit_(),
        showPrintProgress_(),
        paperId_(),
        paperSizeUnit_(),
        printReversed_(),
        printInColor_(),
        printerName_(),
        printToFile_(),
        toFileName_(),
        outputFormat_(),
        isInitializedFromPrinter_(),
        isInitializedFromPrefs_(),
        driverName_(),
        deviceName_(),
        devModeData_(),
        GTKPrintSettings_(),
        disposition_(),
        edgeTop_(),
        edgeLeft_(),
        edgeBottom_(),
        edgeRight_(),
        marginTop_(),
        marginLeft_(),
        marginBottom_(),
        marginRight_(),
        unwriteableMarginTop_(),
        unwriteableMarginLeft_(),
        unwriteableMarginBottom_(),
        unwriteableMarginRight_(),
        scaling_(),
        paperWidth_(),
        paperHeight_(),
        orientation_(),
        numCopies_(),
        numPagesPerSheet_(),
        printPageDelay_(),
        resolution_(),
        duplex_(),
        destination_()
    {
    }

    MOZ_IMPLICIT PrintData(
            PRemotePrintJobParent* _remotePrintJobParent,
            PRemotePrintJobChild* _remotePrintJobChild,
            const double& _edgeTop,
            const double& _edgeLeft,
            const double& _edgeBottom,
            const double& _edgeRight,
            const double& _marginTop,
            const double& _marginLeft,
            const double& _marginBottom,
            const double& _marginRight,
            const double& _unwriteableMarginTop,
            const double& _unwriteableMarginLeft,
            const double& _unwriteableMarginBottom,
            const double& _unwriteableMarginRight,
            const double& _scaling,
            const bool& _printBGColors,
            const bool& _printBGImages,
            const bool& _honorPageRuleMargins,
            const bool& _showMarginGuides,
            const bool& _isPrintSelectionRBEnabled,
            const bool& _printSelectionOnly,
            const nsTArray<int32_t>& _pageRanges,
            const nsString& _title,
            const nsString& _docURL,
            const nsString& _headerStrLeft,
            const nsString& _headerStrCenter,
            const nsString& _headerStrRight,
            const nsString& _footerStrLeft,
            const nsString& _footerStrCenter,
            const nsString& _footerStrRight,
            const bool& _isCancelled,
            const bool& _printSilent,
            const bool& _shrinkToFit,
            const bool& _showPrintProgress,
            const nsString& _paperId,
            const double& _paperWidth,
            const double& _paperHeight,
            const short& _paperSizeUnit,
            const bool& _printReversed,
            const bool& _printInColor,
            const int32_t& _orientation,
            const int32_t& _numCopies,
            const int32_t& _numPagesPerSheet,
            const nsString& _printerName,
            const bool& _printToFile,
            const nsString& _toFileName,
            const short& _outputFormat,
            const int32_t& _printPageDelay,
            const int32_t& _resolution,
            const int32_t& _duplex,
            const bool& _isInitializedFromPrinter,
            const bool& _isInitializedFromPrefs,
            const nsString& _driverName,
            const nsString& _deviceName,
            const nsTArray<uint8_t>& _devModeData,
            const nsTArray<CStringKeyValue>& _GTKPrintSettings,
            const nsString& _disposition,
            const uint16_t& _destination) :
        remotePrintJobParent_(_remotePrintJobParent),
        remotePrintJobChild_(_remotePrintJobChild),
        printBGColors_(_printBGColors),
        printBGImages_(_printBGImages),
        honorPageRuleMargins_(_honorPageRuleMargins),
        showMarginGuides_(_showMarginGuides),
        isPrintSelectionRBEnabled_(_isPrintSelectionRBEnabled),
        printSelectionOnly_(_printSelectionOnly),
        pageRanges_(_pageRanges),
        title_(_title),
        docURL_(_docURL),
        headerStrLeft_(_headerStrLeft),
        headerStrCenter_(_headerStrCenter),
        headerStrRight_(_headerStrRight),
        footerStrLeft_(_footerStrLeft),
        footerStrCenter_(_footerStrCenter),
        footerStrRight_(_footerStrRight),
        isCancelled_(_isCancelled),
        printSilent_(_printSilent),
        shrinkToFit_(_shrinkToFit),
        showPrintProgress_(_showPrintProgress),
        paperId_(_paperId),
        paperSizeUnit_(_paperSizeUnit),
        printReversed_(_printReversed),
        printInColor_(_printInColor),
        printerName_(_printerName),
        printToFile_(_printToFile),
        toFileName_(_toFileName),
        outputFormat_(_outputFormat),
        isInitializedFromPrinter_(_isInitializedFromPrinter),
        isInitializedFromPrefs_(_isInitializedFromPrefs),
        driverName_(_driverName),
        deviceName_(_deviceName),
        devModeData_(_devModeData),
        GTKPrintSettings_(_GTKPrintSettings),
        disposition_(_disposition),
        edgeTop_(_edgeTop),
        edgeLeft_(_edgeLeft),
        edgeBottom_(_edgeBottom),
        edgeRight_(_edgeRight),
        marginTop_(_marginTop),
        marginLeft_(_marginLeft),
        marginBottom_(_marginBottom),
        marginRight_(_marginRight),
        unwriteableMarginTop_(_unwriteableMarginTop),
        unwriteableMarginLeft_(_unwriteableMarginLeft),
        unwriteableMarginBottom_(_unwriteableMarginBottom),
        unwriteableMarginRight_(_unwriteableMarginRight),
        scaling_(_scaling),
        paperWidth_(_paperWidth),
        paperHeight_(_paperHeight),
        orientation_(_orientation),
        numCopies_(_numCopies),
        numPagesPerSheet_(_numPagesPerSheet),
        printPageDelay_(_printPageDelay),
        resolution_(_resolution),
        duplex_(_duplex),
        destination_(_destination)
    {
    }

    PRemotePrintJobParent*&
    remotePrintJobParent()
    {
        return remotePrintJobParent_;
    }
    PRemotePrintJobParent*
    remotePrintJobParent() const
    {
        return remotePrintJobParent_;
    }

    PRemotePrintJobChild*&
    remotePrintJobChild()
    {
        return remotePrintJobChild_;
    }
    PRemotePrintJobChild*
    remotePrintJobChild() const
    {
        return remotePrintJobChild_;
    }

    double&
    edgeTop()
    {
        return edgeTop_;
    }
    const double&
    edgeTop() const
    {
        return edgeTop_;
    }

    double&
    edgeLeft()
    {
        return edgeLeft_;
    }
    const double&
    edgeLeft() const
    {
        return edgeLeft_;
    }

    double&
    edgeBottom()
    {
        return edgeBottom_;
    }
    const double&
    edgeBottom() const
    {
        return edgeBottom_;
    }

    double&
    edgeRight()
    {
        return edgeRight_;
    }
    const double&
    edgeRight() const
    {
        return edgeRight_;
    }

    double&
    marginTop()
    {
        return marginTop_;
    }
    const double&
    marginTop() const
    {
        return marginTop_;
    }

    double&
    marginLeft()
    {
        return marginLeft_;
    }
    const double&
    marginLeft() const
    {
        return marginLeft_;
    }

    double&
    marginBottom()
    {
        return marginBottom_;
    }
    const double&
    marginBottom() const
    {
        return marginBottom_;
    }

    double&
    marginRight()
    {
        return marginRight_;
    }
    const double&
    marginRight() const
    {
        return marginRight_;
    }

    double&
    unwriteableMarginTop()
    {
        return unwriteableMarginTop_;
    }
    const double&
    unwriteableMarginTop() const
    {
        return unwriteableMarginTop_;
    }

    double&
    unwriteableMarginLeft()
    {
        return unwriteableMarginLeft_;
    }
    const double&
    unwriteableMarginLeft() const
    {
        return unwriteableMarginLeft_;
    }

    double&
    unwriteableMarginBottom()
    {
        return unwriteableMarginBottom_;
    }
    const double&
    unwriteableMarginBottom() const
    {
        return unwriteableMarginBottom_;
    }

    double&
    unwriteableMarginRight()
    {
        return unwriteableMarginRight_;
    }
    const double&
    unwriteableMarginRight() const
    {
        return unwriteableMarginRight_;
    }

    double&
    scaling()
    {
        return scaling_;
    }
    const double&
    scaling() const
    {
        return scaling_;
    }

    bool&
    printBGColors()
    {
        return printBGColors_;
    }
    const bool&
    printBGColors() const
    {
        return printBGColors_;
    }

    bool&
    printBGImages()
    {
        return printBGImages_;
    }
    const bool&
    printBGImages() const
    {
        return printBGImages_;
    }

    bool&
    honorPageRuleMargins()
    {
        return honorPageRuleMargins_;
    }
    const bool&
    honorPageRuleMargins() const
    {
        return honorPageRuleMargins_;
    }

    bool&
    showMarginGuides()
    {
        return showMarginGuides_;
    }
    const bool&
    showMarginGuides() const
    {
        return showMarginGuides_;
    }

    bool&
    isPrintSelectionRBEnabled()
    {
        return isPrintSelectionRBEnabled_;
    }
    const bool&
    isPrintSelectionRBEnabled() const
    {
        return isPrintSelectionRBEnabled_;
    }

    bool&
    printSelectionOnly()
    {
        return printSelectionOnly_;
    }
    const bool&
    printSelectionOnly() const
    {
        return printSelectionOnly_;
    }

    nsTArray<int32_t>&
    pageRanges()
    {
        return pageRanges_;
    }
    const nsTArray<int32_t>&
    pageRanges() const
    {
        return pageRanges_;
    }

    nsString&
    title()
    {
        return title_;
    }
    const nsString&
    title() const
    {
        return title_;
    }

    nsString&
    docURL()
    {
        return docURL_;
    }
    const nsString&
    docURL() const
    {
        return docURL_;
    }

    nsString&
    headerStrLeft()
    {
        return headerStrLeft_;
    }
    const nsString&
    headerStrLeft() const
    {
        return headerStrLeft_;
    }

    nsString&
    headerStrCenter()
    {
        return headerStrCenter_;
    }
    const nsString&
    headerStrCenter() const
    {
        return headerStrCenter_;
    }

    nsString&
    headerStrRight()
    {
        return headerStrRight_;
    }
    const nsString&
    headerStrRight() const
    {
        return headerStrRight_;
    }

    nsString&
    footerStrLeft()
    {
        return footerStrLeft_;
    }
    const nsString&
    footerStrLeft() const
    {
        return footerStrLeft_;
    }

    nsString&
    footerStrCenter()
    {
        return footerStrCenter_;
    }
    const nsString&
    footerStrCenter() const
    {
        return footerStrCenter_;
    }

    nsString&
    footerStrRight()
    {
        return footerStrRight_;
    }
    const nsString&
    footerStrRight() const
    {
        return footerStrRight_;
    }

    bool&
    isCancelled()
    {
        return isCancelled_;
    }
    const bool&
    isCancelled() const
    {
        return isCancelled_;
    }

    bool&
    printSilent()
    {
        return printSilent_;
    }
    const bool&
    printSilent() const
    {
        return printSilent_;
    }

    bool&
    shrinkToFit()
    {
        return shrinkToFit_;
    }
    const bool&
    shrinkToFit() const
    {
        return shrinkToFit_;
    }

    bool&
    showPrintProgress()
    {
        return showPrintProgress_;
    }
    const bool&
    showPrintProgress() const
    {
        return showPrintProgress_;
    }

    nsString&
    paperId()
    {
        return paperId_;
    }
    const nsString&
    paperId() const
    {
        return paperId_;
    }

    double&
    paperWidth()
    {
        return paperWidth_;
    }
    const double&
    paperWidth() const
    {
        return paperWidth_;
    }

    double&
    paperHeight()
    {
        return paperHeight_;
    }
    const double&
    paperHeight() const
    {
        return paperHeight_;
    }

    short&
    paperSizeUnit()
    {
        return paperSizeUnit_;
    }
    const short&
    paperSizeUnit() const
    {
        return paperSizeUnit_;
    }

    bool&
    printReversed()
    {
        return printReversed_;
    }
    const bool&
    printReversed() const
    {
        return printReversed_;
    }

    bool&
    printInColor()
    {
        return printInColor_;
    }
    const bool&
    printInColor() const
    {
        return printInColor_;
    }

    int32_t&
    orientation()
    {
        return orientation_;
    }
    const int32_t&
    orientation() const
    {
        return orientation_;
    }

    int32_t&
    numCopies()
    {
        return numCopies_;
    }
    const int32_t&
    numCopies() const
    {
        return numCopies_;
    }

    int32_t&
    numPagesPerSheet()
    {
        return numPagesPerSheet_;
    }
    const int32_t&
    numPagesPerSheet() const
    {
        return numPagesPerSheet_;
    }

    nsString&
    printerName()
    {
        return printerName_;
    }
    const nsString&
    printerName() const
    {
        return printerName_;
    }

    bool&
    printToFile()
    {
        return printToFile_;
    }
    const bool&
    printToFile() const
    {
        return printToFile_;
    }

    nsString&
    toFileName()
    {
        return toFileName_;
    }
    const nsString&
    toFileName() const
    {
        return toFileName_;
    }

    short&
    outputFormat()
    {
        return outputFormat_;
    }
    const short&
    outputFormat() const
    {
        return outputFormat_;
    }

    int32_t&
    printPageDelay()
    {
        return printPageDelay_;
    }
    const int32_t&
    printPageDelay() const
    {
        return printPageDelay_;
    }

    int32_t&
    resolution()
    {
        return resolution_;
    }
    const int32_t&
    resolution() const
    {
        return resolution_;
    }

    int32_t&
    duplex()
    {
        return duplex_;
    }
    const int32_t&
    duplex() const
    {
        return duplex_;
    }

    bool&
    isInitializedFromPrinter()
    {
        return isInitializedFromPrinter_;
    }
    const bool&
    isInitializedFromPrinter() const
    {
        return isInitializedFromPrinter_;
    }

    bool&
    isInitializedFromPrefs()
    {
        return isInitializedFromPrefs_;
    }
    const bool&
    isInitializedFromPrefs() const
    {
        return isInitializedFromPrefs_;
    }

    nsString&
    driverName()
    {
        return driverName_;
    }
    const nsString&
    driverName() const
    {
        return driverName_;
    }

    nsString&
    deviceName()
    {
        return deviceName_;
    }
    const nsString&
    deviceName() const
    {
        return deviceName_;
    }

    nsTArray<uint8_t>&
    devModeData()
    {
        return devModeData_;
    }
    const nsTArray<uint8_t>&
    devModeData() const
    {
        return devModeData_;
    }

    nsTArray<CStringKeyValue>&
    GTKPrintSettings()
    {
        return GTKPrintSettings_;
    }
    const nsTArray<CStringKeyValue>&
    GTKPrintSettings() const
    {
        return GTKPrintSettings_;
    }

    nsString&
    disposition()
    {
        return disposition_;
    }
    const nsString&
    disposition() const
    {
        return disposition_;
    }

    uint16_t&
    destination()
    {
        return destination_;
    }
    const uint16_t&
    destination() const
    {
        return destination_;
    }

private:
    void
    StaticAssertions() const;
    PRemotePrintJobParent* remotePrintJobParent_;
    PRemotePrintJobChild* remotePrintJobChild_;
    bool printBGColors_;
    bool printBGImages_;
    bool honorPageRuleMargins_;
    bool showMarginGuides_;
    bool isPrintSelectionRBEnabled_;
    bool printSelectionOnly_;
    CopyableTArray<int32_t> pageRanges_;
    nsString title_;
    nsString docURL_;
    nsString headerStrLeft_;
    nsString headerStrCenter_;
    nsString headerStrRight_;
    nsString footerStrLeft_;
    nsString footerStrCenter_;
    nsString footerStrRight_;
    bool isCancelled_;
    bool printSilent_;
    bool shrinkToFit_;
    bool showPrintProgress_;
    nsString paperId_;
    short paperSizeUnit_;
    bool printReversed_;
    bool printInColor_;
    nsString printerName_;
    bool printToFile_;
    nsString toFileName_;
    short outputFormat_;
    bool isInitializedFromPrinter_;
    bool isInitializedFromPrefs_;
    nsString driverName_;
    nsString deviceName_;
    CopyableTArray<uint8_t> devModeData_;
    CopyableTArray<CStringKeyValue> GTKPrintSettings_;
    nsString disposition_;
    double edgeTop_;
    double edgeLeft_;
    double edgeBottom_;
    double edgeRight_;
    double marginTop_;
    double marginLeft_;
    double marginBottom_;
    double marginRight_;
    double unwriteableMarginTop_;
    double unwriteableMarginLeft_;
    double unwriteableMarginBottom_;
    double unwriteableMarginRight_;
    double scaling_;
    double paperWidth_;
    double paperHeight_;
    int32_t orientation_;
    int32_t numCopies_;
    int32_t numPagesPerSheet_;
    int32_t printPageDelay_;
    int32_t resolution_;
    int32_t duplex_;
    uint16_t destination_;
};
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::embedding::PrintData>
{
    typedef mozilla::embedding::PrintData paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PPrintingTypes_h
