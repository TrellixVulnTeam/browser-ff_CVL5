//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPrintSettingsDialog_h
#define PPrintSettingsDialog_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/embedding/PPrintingTypes.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union PrintDataOrNSResult|
//
namespace mozilla {
namespace embedding {
class PrintDataOrNSResult final
{
public:
    enum Type {
        T__None,
        TPrintData = 1,
        Tnsresult,
        T__Last = Tnsresult
    };

private:
    typedef mozilla::embedding::PrintData PrintData;
    typedef PrintData PrintData__tdef;
    typedef nsresult nsresult__tdef;

    union Value {
        mozilla::AlignedStorage2<PrintData> VPrintData;
        mozilla::AlignedStorage2<nsresult> Vnsresult;
    };

    PrintData*
    ptr_PrintData()
    {
        return ((mValue).VPrintData).addr();
    }
    const PrintData*
    constptr_PrintData() const
    {
        return ((mValue).VPrintData).addr();
    }
    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT PrintDataOrNSResult() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT PrintDataOrNSResult(const PrintData& aOther);

    MOZ_IMPLICIT PrintDataOrNSResult(PrintData&& aOther);

    MOZ_IMPLICIT PrintDataOrNSResult(const nsresult& aOther);

    MOZ_IMPLICIT PrintDataOrNSResult(nsresult&& aOther);

    MOZ_IMPLICIT PrintDataOrNSResult(const PrintDataOrNSResult& aOther);

    MOZ_IMPLICIT PrintDataOrNSResult(PrintDataOrNSResult&& aOther);

    ~PrintDataOrNSResult();

    Type
    type() const
    {
        return mType;
    }

    PrintDataOrNSResult&
    operator=(const PrintData& aRhs);

    PrintDataOrNSResult&
    operator=(PrintData&& aRhs);

    PrintDataOrNSResult&
    operator=(const nsresult& aRhs);

    PrintDataOrNSResult&
    operator=(nsresult&& aRhs);

    PrintDataOrNSResult&
    operator=(const PrintDataOrNSResult& aRhs);

    PrintDataOrNSResult&
    operator=(PrintDataOrNSResult&& aRhs);

    PrintData&
    get_PrintData()
    {
        AssertSanity(TPrintData);
        return (*(ptr_PrintData()));
    }
    const PrintData&
    get_PrintData() const
    {
        AssertSanity(TPrintData);
        return (*(constptr_PrintData()));
    }
    operator PrintData&()
    {
        return get_PrintData();
    }
    operator const PrintData&() const
    {
        return get_PrintData();
    }

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::embedding::PrintDataOrNSResult>
{
    typedef mozilla::embedding::PrintDataOrNSResult paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintSettingsDialogParent;
} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace embedding {
class PPrintSettingsDialogChild;
} // namespace embedding
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PPrintSettingsDialogChild and PPrintSettingsDialogParent
//
namespace mozilla {
namespace embedding {
namespace PPrintSettingsDialog {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::embedding::PPrintSettingsDialogParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::embedding::PPrintSettingsDialogChild>* aChild);

enum MessageType {
    PPrintSettingsDialogStart = PPrintSettingsDialogMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    PPrintSettingsDialogEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PPrintSettingsDialog
} // namespace embedding
} // namespace mozilla

#endif // ifndef PPrintSettingsDialog_h
