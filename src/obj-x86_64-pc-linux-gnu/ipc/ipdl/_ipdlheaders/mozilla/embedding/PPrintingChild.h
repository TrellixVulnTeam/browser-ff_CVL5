//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPrintingChild_h
#define PPrintingChild_h

#include "mozilla/embedding/PPrinting.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintProgressDialogChild;
} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace embedding {
class PPrintProgressDialogParent;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintSettingsDialogChild;
} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace embedding {
class PPrintSettingsDialogParent;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRemotePrintJobChild;
} // namespace layout
} // namespace mozilla
namespace mozilla {
namespace layout {
class PRemotePrintJobParent;
} // namespace layout
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintProgressDialogChild;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRemotePrintJobChild;
} // namespace layout
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintSettingsDialogChild;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace embedding {


class PPrintingChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::embedding::PPrintProgressDialogChild;
    friend class mozilla::layout::PRemotePrintJobChild;
    friend class mozilla::dom::PContentChild;
    friend class mozilla::embedding::PPrintSettingsDialogChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::embedding::CStringKeyValue CStringKeyValue;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::embedding::PrintData PrintData;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::embedding::PPrintProgressDialogChild PPrintProgressDialogChild;
    typedef mozilla::embedding::PPrintProgressDialogParent PPrintProgressDialogParent;
    typedef mozilla::embedding::PPrintSettingsDialogChild PPrintSettingsDialogChild;
    typedef mozilla::embedding::PPrintSettingsDialogParent PPrintSettingsDialogParent;
    typedef mozilla::layout::PRemotePrintJobChild PRemotePrintJobChild;
    typedef mozilla::layout::PRemotePrintJobParent PRemotePrintJobParent;

protected:
    virtual mozilla::ipc::IPCResult
    RecvPRemotePrintJobConstructor(PRemotePrintJobChild* actor);
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual PPrintProgressDialogChild*
    AllocPPrintProgressDialogChild() = 0;
    virtual PPrintSettingsDialogChild*
    AllocPPrintSettingsDialogChild() = 0;
    virtual already_AddRefed<PRemotePrintJobChild>
    AllocPRemotePrintJobChild() = 0;
    virtual bool
    DeallocPPrintProgressDialogChild(PPrintProgressDialogChild* aActor) = 0;
    virtual bool
    DeallocPPrintSettingsDialogChild(PPrintSettingsDialogChild* aActor) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PPrintingChild();

    virtual ~PPrintingChild();

public:
    PContentChild*
    Manager() const;

    void
    ManagedPPrintProgressDialogChild(nsTArray<PPrintProgressDialogChild*>& aArr) const;
    const ManagedContainer<PPrintProgressDialogChild>&
    ManagedPPrintProgressDialogChild() const;

    void
    ManagedPPrintSettingsDialogChild(nsTArray<PPrintSettingsDialogChild*>& aArr) const;
    const ManagedContainer<PPrintSettingsDialogChild>&
    ManagedPPrintSettingsDialogChild() const;

    void
    ManagedPRemotePrintJobChild(nsTArray<PRemotePrintJobChild*>& aArr) const;
    const ManagedContainer<PRemotePrintJobChild>&
    ManagedPRemotePrintJobChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PPrintProgressDialogParent>
    OpenPPrintProgressDialogEndpoint(PPrintProgressDialogChild* aActor);
    bool
    BindPPrintProgressDialogEndpoint(
            ManagedEndpoint<PPrintProgressDialogChild> aEndpoint,
            PPrintProgressDialogChild* aActor);

    ManagedEndpoint<PPrintSettingsDialogParent>
    OpenPPrintSettingsDialogEndpoint(PPrintSettingsDialogChild* aActor);
    bool
    BindPPrintSettingsDialogEndpoint(
            ManagedEndpoint<PPrintSettingsDialogChild> aEndpoint,
            PPrintSettingsDialogChild* aActor);

    ManagedEndpoint<PRemotePrintJobParent>
    OpenPRemotePrintJobEndpoint(PRemotePrintJobChild* aActor);
    bool
    BindPRemotePrintJobEndpoint(
            ManagedEndpoint<PRemotePrintJobChild> aEndpoint,
            PRemotePrintJobChild* aActor);

    bool
    SendShowProgress(
            PBrowserChild* browser,
            PPrintProgressDialogChild* printProgressDialog,
            PRemotePrintJobChild* remotePrintJob,
            const bool& isForPrinting);

    bool
    SendShowPrintDialog(
            PPrintSettingsDialogChild* dialog,
            PBrowserChild* browser,
            const PrintData& settings);

    PPrintProgressDialogChild*
    SendPPrintProgressDialogConstructor();

    PPrintProgressDialogChild*
    SendPPrintProgressDialogConstructor(PPrintProgressDialogChild* actor);

    PPrintSettingsDialogChild*
    SendPPrintSettingsDialogConstructor();

    PPrintSettingsDialogChild*
    SendPPrintSettingsDialogConstructor(PPrintSettingsDialogChild* actor);

    bool
    SendSavePrintSettings(
            const PrintData& settings,
            const bool& usePrinterNamePrefix,
            const uint32_t& flags,
            nsresult* rv);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PPrintProgressDialogChild> mManagedPPrintProgressDialogChild;
    ManagedContainer<PPrintSettingsDialogChild> mManagedPPrintSettingsDialogChild;
    ManagedContainer<PRemotePrintJobChild> mManagedPRemotePrintJobChild;
};


} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::embedding::PPrintingChild*>
{
    typedef mozilla::embedding::PPrintingChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PPrintingChild_h
