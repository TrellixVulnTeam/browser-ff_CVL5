//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPrintingParent_h
#define PPrintingParent_h

#include "mozilla/embedding/PPrinting.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintProgressDialogParent;
} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace embedding {
class PPrintProgressDialogChild;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintSettingsDialogParent;
} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace embedding {
class PPrintSettingsDialogChild;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRemotePrintJobParent;
} // namespace layout
} // namespace mozilla
namespace mozilla {
namespace layout {
class PRemotePrintJobChild;
} // namespace layout
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintProgressDialogParent;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace layout {
class PRemotePrintJobParent;
} // namespace layout
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace embedding {
class PPrintSettingsDialogParent;
} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace embedding {


class PPrintingParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::embedding::PPrintProgressDialogParent;
    friend class mozilla::layout::PRemotePrintJobParent;
    friend class mozilla::dom::PContentParent;
    friend class mozilla::embedding::PPrintSettingsDialogParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::embedding::CStringKeyValue CStringKeyValue;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::embedding::PrintData PrintData;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::embedding::PPrintProgressDialogParent PPrintProgressDialogParent;
    typedef mozilla::embedding::PPrintProgressDialogChild PPrintProgressDialogChild;
    typedef mozilla::embedding::PPrintSettingsDialogParent PPrintSettingsDialogParent;
    typedef mozilla::embedding::PPrintSettingsDialogChild PPrintSettingsDialogChild;
    typedef mozilla::layout::PRemotePrintJobParent PRemotePrintJobParent;
    typedef mozilla::layout::PRemotePrintJobChild PRemotePrintJobChild;

protected:
    virtual mozilla::ipc::IPCResult
    RecvShowProgress(
            PBrowserParent* browser,
            PPrintProgressDialogParent* printProgressDialog,
            PRemotePrintJobParent* remotePrintJob,
            const bool& isForPrinting) = 0;
    virtual mozilla::ipc::IPCResult
    RecvShowPrintDialog(
            PPrintSettingsDialogParent* dialog,
            PBrowserParent* browser,
            const PrintData& settings) = 0;
    virtual mozilla::ipc::IPCResult
    RecvPPrintProgressDialogConstructor(PPrintProgressDialogParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvPPrintSettingsDialogConstructor(PPrintSettingsDialogParent* actor);
    virtual mozilla::ipc::IPCResult
    RecvSavePrintSettings(
            const PrintData& settings,
            const bool& usePrinterNamePrefix,
            const uint32_t& flags,
            nsresult* rv) = 0;
    virtual PPrintProgressDialogParent*
    AllocPPrintProgressDialogParent() = 0;
    virtual PPrintSettingsDialogParent*
    AllocPPrintSettingsDialogParent() = 0;
    virtual bool
    DeallocPPrintProgressDialogParent(PPrintProgressDialogParent* aActor) = 0;
    virtual bool
    DeallocPPrintSettingsDialogParent(PPrintSettingsDialogParent* aActor) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PPrintingParent();

    virtual ~PPrintingParent();

public:
    PContentParent*
    Manager() const;

    void
    ManagedPPrintProgressDialogParent(nsTArray<PPrintProgressDialogParent*>& aArr) const;
    const ManagedContainer<PPrintProgressDialogParent>&
    ManagedPPrintProgressDialogParent() const;

    void
    ManagedPPrintSettingsDialogParent(nsTArray<PPrintSettingsDialogParent*>& aArr) const;
    const ManagedContainer<PPrintSettingsDialogParent>&
    ManagedPPrintSettingsDialogParent() const;

    void
    ManagedPRemotePrintJobParent(nsTArray<PRemotePrintJobParent*>& aArr) const;
    const ManagedContainer<PRemotePrintJobParent>&
    ManagedPRemotePrintJobParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PPrintProgressDialogChild>
    OpenPPrintProgressDialogEndpoint(PPrintProgressDialogParent* aActor);
    bool
    BindPPrintProgressDialogEndpoint(
            ManagedEndpoint<PPrintProgressDialogParent> aEndpoint,
            PPrintProgressDialogParent* aActor);

    ManagedEndpoint<PPrintSettingsDialogChild>
    OpenPPrintSettingsDialogEndpoint(PPrintSettingsDialogParent* aActor);
    bool
    BindPPrintSettingsDialogEndpoint(
            ManagedEndpoint<PPrintSettingsDialogParent> aEndpoint,
            PPrintSettingsDialogParent* aActor);

    ManagedEndpoint<PRemotePrintJobChild>
    OpenPRemotePrintJobEndpoint(PRemotePrintJobParent* aActor);
    bool
    BindPRemotePrintJobEndpoint(
            ManagedEndpoint<PRemotePrintJobParent> aEndpoint,
            PRemotePrintJobParent* aActor);

    [[nodiscard]] PRemotePrintJobParent*
    SendPRemotePrintJobConstructor(PRemotePrintJobParent* actor);

    [[nodiscard]] static bool
    Send__delete__(PPrintingParent* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PPrintProgressDialogParent> mManagedPPrintProgressDialogParent;
    ManagedContainer<PPrintSettingsDialogParent> mManagedPPrintSettingsDialogParent;
    ManagedContainer<PRemotePrintJobParent> mManagedPRemotePrintJobParent;
};


} // namespace embedding
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::embedding::PPrintingParent*>
{
    typedef mozilla::embedding::PPrintingParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PPrintingParent_h
