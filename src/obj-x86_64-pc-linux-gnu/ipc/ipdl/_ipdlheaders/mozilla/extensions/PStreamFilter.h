//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PStreamFilter_h
#define PStreamFilter_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace extensions {
class PStreamFilterParent;
} // namespace extensions
} // namespace mozilla
namespace mozilla {
namespace extensions {
class PStreamFilterChild;
} // namespace extensions
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PStreamFilterChild and PStreamFilterParent
//
namespace mozilla {
namespace extensions {
namespace PStreamFilter {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::extensions::PStreamFilterParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::extensions::PStreamFilterChild>* aChild);

enum MessageType {
    PStreamFilterStart = PStreamFilterMsgStart << 16,
    Msg_Write__ID,
    Msg_FlushedData__ID,
    Msg_Suspend__ID,
    Msg_Resume__ID,
    Msg_Close__ID,
    Msg_Disconnect__ID,
    Msg_Destroy__ID,
    Msg_Resumed__ID,
    Msg_Suspended__ID,
    Msg_Closed__ID,
    Msg_Error__ID,
    Msg_FlushData__ID,
    Msg_StartRequest__ID,
    Msg_Data__ID,
    Msg_StopRequest__ID,
    PStreamFilterEnd
};

IPC::Message*
Msg_Write(int32_t routingId);

IPC::Message*
Msg_FlushedData(int32_t routingId);

IPC::Message*
Msg_Suspend(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);

IPC::Message*
Msg_Close(int32_t routingId);

IPC::Message*
Msg_Disconnect(int32_t routingId);

IPC::Message*
Msg_Destroy(int32_t routingId);

IPC::Message*
Msg_Resumed(int32_t routingId);

IPC::Message*
Msg_Suspended(int32_t routingId);

IPC::Message*
Msg_Closed(int32_t routingId);

IPC::Message*
Msg_Error(int32_t routingId);

IPC::Message*
Msg_FlushData(int32_t routingId);

IPC::Message*
Msg_StartRequest(int32_t routingId);

IPC::Message*
Msg_Data(int32_t routingId);

IPC::Message*
Msg_StopRequest(int32_t routingId);



} // namespace PStreamFilter
} // namespace extensions
} // namespace mozilla

#endif // ifndef PStreamFilter_h
