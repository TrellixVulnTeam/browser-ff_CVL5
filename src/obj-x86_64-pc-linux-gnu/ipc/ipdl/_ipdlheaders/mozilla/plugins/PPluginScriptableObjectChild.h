//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginScriptableObjectChild_h
#define PPluginScriptableObjectChild_h

#include "mozilla/plugins/PPluginScriptableObject.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
namespace mozilla {
namespace plugins {
class PPluginInstanceChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginInstanceChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
struct void_t;
} // namespace mozilla

namespace mozilla {
struct null_t;
} // namespace mozilla

namespace mozilla {
namespace plugins {


class PPluginScriptableObjectChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::plugins::PPluginInstanceChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    typedef mozilla::ipc::DefaultURIParams DefaultURIParams;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::plugins::FakePluginTag FakePluginTag;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::HostObjectURIParams HostObjectURIParams;
    typedef mozilla::ipc::IconURIParams IconURIParams;
    typedef mozilla::ipc::JARURIParams JARURIParams;
    typedef mozilla::ipc::JSURIParams JSURIParams;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::NestedAboutURIParams NestedAboutURIParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::ipc::NullPrincipalURIParams NullPrincipalURIParams;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::plugins::PluginIdentifier PluginIdentifier;
    typedef mozilla::plugins::PluginTag PluginTag;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SimpleNestedURIParams SimpleNestedURIParams;
    typedef mozilla::ipc::SimpleURIParams SimpleURIParams;
    typedef mozilla::ipc::StandardURLParams StandardURLParams;
    typedef mozilla::ipc::StandardURLSegment StandardURLSegment;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::URIParams URIParams;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::plugins::PPluginInstanceChild PPluginInstanceChild;
    typedef mozilla::plugins::PPluginInstanceParent PPluginInstanceParent;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PPluginScriptableObjectChild();

    virtual ~PPluginScriptableObjectChild();

public:
    PPluginInstanceChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    static bool
    Send__delete__(PPluginScriptableObjectChild* actor);

    bool
    CallNPN_Evaluate(
            const nsCString& aScript,
            Variant* aResult,
            bool* aSuccess);

    bool
    CallHasMethod(
            const PluginIdentifier& aId,
            bool* aHasMethod);

    bool
    CallInvoke(
            const PluginIdentifier& aId,
            const nsTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    bool
    CallInvokeDefault(
            const nsTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    bool
    CallHasProperty(
            const PluginIdentifier& aId,
            bool* aHasProperty);

    bool
    CallSetProperty(
            const PluginIdentifier& aId,
            const Variant& aValue,
            bool* aSuccess);

    bool
    CallRemoveProperty(
            const PluginIdentifier& aId,
            bool* aSuccess);

    bool
    CallEnumerate(
            nsTArray<PluginIdentifier>* aProperties,
            bool* aSuccess);

    bool
    CallConstruct(
            const nsTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    bool
    SendProtect();

    bool
    SendUnprotect();

    bool
    CallGetParentProperty(
            const PluginIdentifier& aId,
            Variant* aResult,
            bool* aSuccess);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::plugins::PPluginScriptableObjectChild*>
{
    typedef mozilla::plugins::PPluginScriptableObjectChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PPluginScriptableObjectChild_h
