//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginModuleParent_h
#define PPluginModuleParent_h

#include "mozilla/plugins/PPluginModule.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
class nsIFile;

// Headers for things that cannot be forward declared
#include "mozilla/dom/NativeThreadId.h"
#include "npapi.h"

namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginInstanceChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginScriptableObjectChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
class PProfilerParent;
} // namespace mozilla
namespace mozilla {
class PProfilerChild;
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PFunctionBrokerParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PFunctionBrokerChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla

namespace mac_plugin_interposing {
class NSCursorInfo;
} // namespace mac_plugin_interposing

struct nsID;

namespace mozilla {
namespace plugins {
struct NPAudioDeviceChangeDetailsIPC;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
struct NPAudioDeviceStateChangedIPC;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {


class PPluginModuleParent :
    public mozilla::ipc::IToplevelProtocol
{
private:
    friend class mozilla::plugins::PPluginInstanceParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::plugins::NPAudioDeviceChangeDetailsIPC NPAudioDeviceChangeDetailsIPC;
    typedef mozilla::plugins::NPAudioDeviceStateChangedIPC NPAudioDeviceStateChangedIPC;
    typedef mac_plugin_interposing::NSCursorInfo NSCursorInfo;
    typedef mozilla::dom::NativeThreadId NativeThreadId;
    typedef mozilla::plugins::PluginSettings PluginSettings;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::plugins::PPluginInstanceParent PPluginInstanceParent;
    typedef mozilla::plugins::PPluginInstanceChild PPluginInstanceChild;
    typedef mozilla::plugins::PPluginScriptableObjectParent PPluginScriptableObjectParent;
    typedef mozilla::plugins::PPluginScriptableObjectChild PPluginScriptableObjectChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::PProfilerParent PProfilerParent;
    typedef mozilla::PProfilerChild PProfilerChild;
    typedef mozilla::plugins::PFunctionBrokerParent PFunctionBrokerParent;
    typedef mozilla::plugins::PFunctionBrokerChild PFunctionBrokerChild;

protected:
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PPluginModuleParent();

    virtual ~PPluginModuleParent();

public:
    void
    ManagedPPluginInstanceParent(nsTArray<PPluginInstanceParent*>& aArr) const;
    const ManagedContainer<PPluginInstanceParent>&
    ManagedPPluginInstanceParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PPluginInstanceChild>
    OpenPPluginInstanceEndpoint(PPluginInstanceParent* aActor);
    bool
    BindPPluginInstanceEndpoint(
            ManagedEndpoint<PPluginInstanceParent> aEndpoint,
            PPluginInstanceParent* aActor);

    [[nodiscard]] bool
    SendProcessNativeEventsInInterruptCall();

    [[nodiscard]] bool
    SendInitProfiler(Endpoint<mozilla::PProfilerChild>&& aEndPoint);

    [[nodiscard]] bool
    SendDisableFlashProtectedMode();

    [[nodiscard]] bool
    CallModuleSupportsAsyncRender(bool* result);

    [[nodiscard]] bool
    CallNP_GetEntryPoints(NPError* rv);

    [[nodiscard]] bool
    CallNP_Initialize(
            const PluginSettings& settings,
            NPError* rv);

    [[nodiscard]] PPluginInstanceParent*
    SendPPluginInstanceConstructor(
            const nsCString& aMimeType,
            const nsTArray<nsCString>& aNames,
            const nsTArray<nsCString>& aValues);

    [[nodiscard]] PPluginInstanceParent*
    SendPPluginInstanceConstructor(
            PPluginInstanceParent* actor,
            const nsCString& aMimeType,
            const nsTArray<nsCString>& aNames,
            const nsTArray<nsCString>& aValues);

    [[nodiscard]] bool
    CallSyncNPP_New(
            PPluginInstanceParent* aActor,
            NPError* rv);

    [[nodiscard]] bool
    CallNP_Shutdown(NPError* rv);

    [[nodiscard]] bool
    CallOptionalFunctionsSupported(
            bool* aURLRedirectNotify,
            bool* aClearSiteData,
            bool* aGetSitesWithData);

    [[nodiscard]] bool
    SendNPP_ClearSiteData(
            const nsCString& site,
            const uint64_t& flags,
            const uint64_t& maxAge,
            const uint64_t& aCallbackId);

    [[nodiscard]] bool
    SendNPP_GetSitesWithData(const uint64_t& aCallbackId);

    [[nodiscard]] bool
    SendSetAudioSessionData(
            const nsID& aID,
            const nsString& aDisplayName,
            const nsString& aIconPath);

    [[nodiscard]] bool
    SendSetParentHangTimeout(const uint32_t& seconds);

    [[nodiscard]] bool
    CallInitCrashReporter(NativeThreadId* tid);

    [[nodiscard]] bool
    SendSettingChanged(const PluginSettings& settings);

    [[nodiscard]] bool
    SendNPP_SetValue_NPNVaudioDeviceChangeDetails(const NPAudioDeviceChangeDetailsIPC& changeDetails);

    [[nodiscard]] bool
    SendNPP_SetValue_NPNVaudioDeviceStateChanged(const NPAudioDeviceStateChangedIPC& deviceState);

    [[nodiscard]] bool
    SendInitPluginModuleChild(Endpoint<mozilla::plugins::PPluginModuleChild>&& endpoint);

    [[nodiscard]] bool
    SendInitPluginFunctionBroker(Endpoint<mozilla::plugins::PFunctionBrokerChild>&& endpoint);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

    void
    ProcessNativeEventsInInterruptCall();

private:
    void
    ClearSubtree();

    ManagedContainer<PPluginInstanceParent> mManagedPPluginInstanceParent;
};


} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::plugins::PPluginModuleParent*>
{
    typedef mozilla::plugins::PPluginModuleParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PPluginModuleParent_h
