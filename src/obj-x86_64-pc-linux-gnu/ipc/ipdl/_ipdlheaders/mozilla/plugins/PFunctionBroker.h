//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PFunctionBroker_h
#define PFunctionBroker_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace plugins {
class PFunctionBrokerParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PFunctionBrokerChild;
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PFunctionBrokerChild and PFunctionBrokerParent
//
namespace mozilla {
namespace plugins {
namespace PFunctionBroker {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::plugins::PFunctionBrokerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::plugins::PFunctionBrokerChild>* aChild);

enum MessageType {
    PFunctionBrokerStart = PFunctionBrokerMsgStart << 16,
    Msg_BrokerFunction__ID,
    Reply_BrokerFunction__ID,
    PFunctionBrokerEnd
};

IPC::Message*
Msg_BrokerFunction(int32_t routingId);
IPC::Message*
Reply_BrokerFunction(int32_t routingId);



} // namespace PFunctionBroker
} // namespace plugins
} // namespace mozilla

#endif // ifndef PFunctionBroker_h
