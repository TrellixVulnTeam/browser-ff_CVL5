//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginModule_h
#define PPluginModule_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct PluginSettings|
//
namespace mozilla {
namespace plugins {
class PluginSettings final
{
private:

public:
    MOZ_IMPLICIT PluginSettings() :
        javascriptEnabled_(),
        asdEnabled_(),
        isOffline_(),
        supportsXembed_(),
        supportsWindowless_(),
        userAgent_(),
        nativeCursorsSupported_()
    {
    }

    MOZ_IMPLICIT PluginSettings(
            const bool& _javascriptEnabled,
            const bool& _asdEnabled,
            const bool& _isOffline,
            const bool& _supportsXembed,
            const bool& _supportsWindowless,
            const nsCString& _userAgent,
            const bool& _nativeCursorsSupported) :
        javascriptEnabled_(_javascriptEnabled),
        asdEnabled_(_asdEnabled),
        isOffline_(_isOffline),
        supportsXembed_(_supportsXembed),
        supportsWindowless_(_supportsWindowless),
        userAgent_(_userAgent),
        nativeCursorsSupported_(_nativeCursorsSupported)
    {
    }

    bool&
    javascriptEnabled()
    {
        return javascriptEnabled_;
    }
    const bool&
    javascriptEnabled() const
    {
        return javascriptEnabled_;
    }

    bool&
    asdEnabled()
    {
        return asdEnabled_;
    }
    const bool&
    asdEnabled() const
    {
        return asdEnabled_;
    }

    bool&
    isOffline()
    {
        return isOffline_;
    }
    const bool&
    isOffline() const
    {
        return isOffline_;
    }

    bool&
    supportsXembed()
    {
        return supportsXembed_;
    }
    const bool&
    supportsXembed() const
    {
        return supportsXembed_;
    }

    bool&
    supportsWindowless()
    {
        return supportsWindowless_;
    }
    const bool&
    supportsWindowless() const
    {
        return supportsWindowless_;
    }

    nsCString&
    userAgent()
    {
        return userAgent_;
    }
    const nsCString&
    userAgent() const
    {
        return userAgent_;
    }

    bool&
    nativeCursorsSupported()
    {
        return nativeCursorsSupported_;
    }
    const bool&
    nativeCursorsSupported() const
    {
        return nativeCursorsSupported_;
    }

private:
    bool javascriptEnabled_;
    bool asdEnabled_;
    bool isOffline_;
    bool supportsXembed_;
    bool supportsWindowless_;
    nsCString userAgent_;
    bool nativeCursorsSupported_;
};
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::plugins::PluginSettings>
{
    typedef mozilla::plugins::PluginSettings paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginModuleChild;
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PPluginModuleChild and PPluginModuleParent
//
namespace mozilla {
namespace plugins {
namespace PPluginModule {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginModuleParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginModuleChild>* aChild);

enum MessageType {
    PPluginModuleStart = PPluginModuleMsgStart << 16,
    Msg_ProcessNativeEventsInInterruptCall__ID,
    Msg_InitProfiler__ID,
    Msg_DisableFlashProtectedMode__ID,
    Msg_ModuleSupportsAsyncRender__ID,
    Reply_ModuleSupportsAsyncRender__ID,
    Msg_NP_GetEntryPoints__ID,
    Reply_NP_GetEntryPoints__ID,
    Msg_NP_Initialize__ID,
    Reply_NP_Initialize__ID,
    Msg_PPluginInstanceConstructor__ID,
    Reply_PPluginInstanceConstructor__ID,
    Msg_SyncNPP_New__ID,
    Reply_SyncNPP_New__ID,
    Msg_NP_Shutdown__ID,
    Reply_NP_Shutdown__ID,
    Msg_OptionalFunctionsSupported__ID,
    Reply_OptionalFunctionsSupported__ID,
    Msg_NPP_ClearSiteData__ID,
    Msg_NPP_GetSitesWithData__ID,
    Msg_SetAudioSessionData__ID,
    Msg_SetParentHangTimeout__ID,
    Msg_InitCrashReporter__ID,
    Reply_InitCrashReporter__ID,
    Msg_SettingChanged__ID,
    Msg_NPP_SetValue_NPNVaudioDeviceChangeDetails__ID,
    Msg_NPP_SetValue_NPNVaudioDeviceStateChanged__ID,
    Msg_InitPluginModuleChild__ID,
    Msg_InitPluginFunctionBroker__ID,
    Msg_BackUpXResources__ID,
    Msg_ProcessSomeEvents__ID,
    Reply_ProcessSomeEvents__ID,
    Msg_PluginShowWindow__ID,
    Msg_PluginHideWindow__ID,
    Msg_SetCursor__ID,
    Msg_ShowCursor__ID,
    Msg_PushCursor__ID,
    Msg_PopCursor__ID,
    Msg_NPN_SetException__ID,
    Reply_NPN_SetException__ID,
    Msg_NPN_ReloadPlugins__ID,
    Msg_NotifyContentModuleDestroyed__ID,
    Msg_ReturnClearSiteData__ID,
    Msg_ReturnSitesWithData__ID,
    Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges__ID,
    Reply_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges__ID,
    PPluginModuleEnd
};

IPC::Message*
Msg_ProcessNativeEventsInInterruptCall(int32_t routingId);

IPC::Message*
Msg_InitProfiler(int32_t routingId);

IPC::Message*
Msg_DisableFlashProtectedMode(int32_t routingId);

IPC::Message*
Msg_ModuleSupportsAsyncRender(int32_t routingId);
IPC::Message*
Reply_ModuleSupportsAsyncRender(int32_t routingId);

IPC::Message*
Msg_NP_GetEntryPoints(int32_t routingId);
IPC::Message*
Reply_NP_GetEntryPoints(int32_t routingId);

IPC::Message*
Msg_NP_Initialize(int32_t routingId);
IPC::Message*
Reply_NP_Initialize(int32_t routingId);

IPC::Message*
Msg_PPluginInstanceConstructor(int32_t routingId);
IPC::Message*
Reply_PPluginInstanceConstructor(int32_t routingId);

IPC::Message*
Msg_SyncNPP_New(int32_t routingId);
IPC::Message*
Reply_SyncNPP_New(int32_t routingId);

IPC::Message*
Msg_NP_Shutdown(int32_t routingId);
IPC::Message*
Reply_NP_Shutdown(int32_t routingId);

IPC::Message*
Msg_OptionalFunctionsSupported(int32_t routingId);
IPC::Message*
Reply_OptionalFunctionsSupported(int32_t routingId);

IPC::Message*
Msg_NPP_ClearSiteData(int32_t routingId);

IPC::Message*
Msg_NPP_GetSitesWithData(int32_t routingId);

IPC::Message*
Msg_SetAudioSessionData(int32_t routingId);

IPC::Message*
Msg_SetParentHangTimeout(int32_t routingId);

IPC::Message*
Msg_InitCrashReporter(int32_t routingId);
IPC::Message*
Reply_InitCrashReporter(int32_t routingId);

IPC::Message*
Msg_SettingChanged(int32_t routingId);

IPC::Message*
Msg_NPP_SetValue_NPNVaudioDeviceChangeDetails(int32_t routingId);

IPC::Message*
Msg_NPP_SetValue_NPNVaudioDeviceStateChanged(int32_t routingId);

IPC::Message*
Msg_InitPluginModuleChild(int32_t routingId);

IPC::Message*
Msg_InitPluginFunctionBroker(int32_t routingId);

IPC::Message*
Msg_BackUpXResources(int32_t routingId);

IPC::Message*
Msg_ProcessSomeEvents(int32_t routingId);
IPC::Message*
Reply_ProcessSomeEvents(int32_t routingId);

IPC::Message*
Msg_PluginShowWindow(int32_t routingId);

IPC::Message*
Msg_PluginHideWindow(int32_t routingId);

IPC::Message*
Msg_SetCursor(int32_t routingId);

IPC::Message*
Msg_ShowCursor(int32_t routingId);

IPC::Message*
Msg_PushCursor(int32_t routingId);

IPC::Message*
Msg_PopCursor(int32_t routingId);

IPC::Message*
Msg_NPN_SetException(int32_t routingId);
IPC::Message*
Reply_NPN_SetException(int32_t routingId);

IPC::Message*
Msg_NPN_ReloadPlugins(int32_t routingId);

IPC::Message*
Msg_NotifyContentModuleDestroyed(int32_t routingId);

IPC::Message*
Msg_ReturnClearSiteData(int32_t routingId);

IPC::Message*
Msg_ReturnSitesWithData(int32_t routingId);

IPC::Message*
Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges(int32_t routingId);
IPC::Message*
Reply_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges(int32_t routingId);



} // namespace PPluginModule
} // namespace plugins
} // namespace mozilla

#endif // ifndef PPluginModule_h
