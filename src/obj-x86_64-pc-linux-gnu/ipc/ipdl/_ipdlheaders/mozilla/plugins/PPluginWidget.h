//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginWidget_h
#define PPluginWidget_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

namespace mozilla {
namespace plugins {
class PPluginWidgetParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginWidgetChild;
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PPluginWidgetChild and PPluginWidgetParent
//
namespace mozilla {
namespace plugins {
namespace PPluginWidget {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginWidgetParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginWidgetChild>* aChild);

enum MessageType {
    PPluginWidgetStart = PPluginWidgetMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Create__ID,
    Reply_Create__ID,
    Msg_SetFocus__ID,
    Msg_GetNativePluginPort__ID,
    Reply_GetNativePluginPort__ID,
    Msg_SetNativeChildWindow__ID,
    Reply_SetNativeChildWindow__ID,
    PPluginWidgetEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Create(int32_t routingId);
IPC::Message*
Reply_Create(int32_t routingId);

IPC::Message*
Msg_SetFocus(int32_t routingId);

IPC::Message*
Msg_GetNativePluginPort(int32_t routingId);
IPC::Message*
Reply_GetNativePluginPort(int32_t routingId);

IPC::Message*
Msg_SetNativeChildWindow(int32_t routingId);
IPC::Message*
Reply_SetNativeChildWindow(int32_t routingId);



} // namespace PPluginWidget
} // namespace plugins
} // namespace mozilla

#endif // ifndef PPluginWidget_h
