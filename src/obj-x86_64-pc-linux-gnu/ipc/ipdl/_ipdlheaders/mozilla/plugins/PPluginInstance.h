//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginInstance_h
#define PPluginInstance_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "gfxipc/SurfaceDescriptor.h"
#include "mozilla/ipc/IPCCore.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct IOSurfaceDescriptor|
//
namespace mozilla {
namespace plugins {
class IOSurfaceDescriptor final
{
private:

public:
    MOZ_IMPLICIT IOSurfaceDescriptor() :
        contentsScaleFactor_(),
        surfaceId_()
    {
    }

    MOZ_IMPLICIT IOSurfaceDescriptor(
            const uint32_t& _surfaceId,
            const double& _contentsScaleFactor) :
        contentsScaleFactor_(_contentsScaleFactor),
        surfaceId_(_surfaceId)
    {
    }

    uint32_t&
    surfaceId()
    {
        return surfaceId_;
    }
    const uint32_t&
    surfaceId() const
    {
        return surfaceId_;
    }

    double&
    contentsScaleFactor()
    {
        return contentsScaleFactor_;
    }
    const double&
    contentsScaleFactor() const
    {
        return contentsScaleFactor_;
    }

private:
    double contentsScaleFactor_;
    uint32_t surfaceId_;
};
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::plugins::IOSurfaceDescriptor>
{
    typedef mozilla::plugins::IOSurfaceDescriptor paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceChild;
} // namespace plugins
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union SurfaceDescriptor|
//
namespace mozilla {
namespace plugins {
class SurfaceDescriptor final
{
public:
    enum Type {
        T__None,
        TShmem = 1,
        TSurfaceDescriptorX11,
        TPPluginSurfaceParent,
        TPPluginSurfaceChild,
        TIOSurfaceDescriptor,
        Tnull_t,
        T__Last = Tnull_t
    };

private:
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::plugins::PPluginSurfaceParent PPluginSurfaceParent;
    typedef mozilla::plugins::PPluginSurfaceChild PPluginSurfaceChild;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::null_t null_t;
    typedef Shmem Shmem__tdef;
    typedef SurfaceDescriptorX11 SurfaceDescriptorX11__tdef;
    typedef PPluginSurfaceParent* PPluginSurfaceParent__tdef;
    typedef PPluginSurfaceChild* PPluginSurfaceChild__tdef;
    typedef IOSurfaceDescriptor IOSurfaceDescriptor__tdef;
    typedef null_t null_t__tdef;

    union Value {
        mozilla::AlignedStorage2<Shmem> VShmem;
        mozilla::AlignedStorage2<SurfaceDescriptorX11> VSurfaceDescriptorX11;
        mozilla::AlignedStorage2<PPluginSurfaceParent*> VPPluginSurfaceParent;
        mozilla::AlignedStorage2<PPluginSurfaceChild*> VPPluginSurfaceChild;
        mozilla::AlignedStorage2<IOSurfaceDescriptor> VIOSurfaceDescriptor;
        mozilla::AlignedStorage2<null_t> Vnull_t;
    };

    Shmem*
    ptr_Shmem()
    {
        return ((mValue).VShmem).addr();
    }
    const Shmem*
    constptr_Shmem() const
    {
        return ((mValue).VShmem).addr();
    }
    SurfaceDescriptorX11*
    ptr_SurfaceDescriptorX11()
    {
        return ((mValue).VSurfaceDescriptorX11).addr();
    }
    const SurfaceDescriptorX11*
    constptr_SurfaceDescriptorX11() const
    {
        return ((mValue).VSurfaceDescriptorX11).addr();
    }
    PPluginSurfaceParent**
    ptr_PPluginSurfaceParent()
    {
        return ((mValue).VPPluginSurfaceParent).addr();
    }
    PPluginSurfaceParent* const*
    constptr_PPluginSurfaceParent() const
    {
        return ((mValue).VPPluginSurfaceParent).addr();
    }
    PPluginSurfaceChild**
    ptr_PPluginSurfaceChild()
    {
        return ((mValue).VPPluginSurfaceChild).addr();
    }
    PPluginSurfaceChild* const*
    constptr_PPluginSurfaceChild() const
    {
        return ((mValue).VPPluginSurfaceChild).addr();
    }
    IOSurfaceDescriptor*
    ptr_IOSurfaceDescriptor()
    {
        return ((mValue).VIOSurfaceDescriptor).addr();
    }
    const IOSurfaceDescriptor*
    constptr_IOSurfaceDescriptor() const
    {
        return ((mValue).VIOSurfaceDescriptor).addr();
    }
    null_t*
    ptr_null_t()
    {
        return ((mValue).Vnull_t).addr();
    }
    const null_t*
    constptr_null_t() const
    {
        return ((mValue).Vnull_t).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT SurfaceDescriptor() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT SurfaceDescriptor(Shmem&& aOther);

    MOZ_IMPLICIT SurfaceDescriptor(const SurfaceDescriptorX11& aOther);

    MOZ_IMPLICIT SurfaceDescriptor(SurfaceDescriptorX11&& aOther);

    MOZ_IMPLICIT SurfaceDescriptor(PPluginSurfaceParent* aOther);

    MOZ_IMPLICIT SurfaceDescriptor(PPluginSurfaceChild* aOther);

    MOZ_IMPLICIT SurfaceDescriptor(const IOSurfaceDescriptor& aOther);

    MOZ_IMPLICIT SurfaceDescriptor(IOSurfaceDescriptor&& aOther);

    MOZ_IMPLICIT SurfaceDescriptor(const null_t& aOther);

    MOZ_IMPLICIT SurfaceDescriptor(null_t&& aOther);

    MOZ_IMPLICIT SurfaceDescriptor(const SurfaceDescriptor& aOther);

    MOZ_IMPLICIT SurfaceDescriptor(SurfaceDescriptor&& aOther);

    ~SurfaceDescriptor();

    Type
    type() const
    {
        return mType;
    }

    SurfaceDescriptor&
    operator=(Shmem&& aRhs);

    SurfaceDescriptor&
    operator=(const SurfaceDescriptorX11& aRhs);

    SurfaceDescriptor&
    operator=(SurfaceDescriptorX11&& aRhs);

    SurfaceDescriptor&
    operator=(PPluginSurfaceParent* aRhs);

    SurfaceDescriptor&
    operator=(PPluginSurfaceChild* aRhs);

    SurfaceDescriptor&
    operator=(const IOSurfaceDescriptor& aRhs);

    SurfaceDescriptor&
    operator=(IOSurfaceDescriptor&& aRhs);

    SurfaceDescriptor&
    operator=(const null_t& aRhs);

    SurfaceDescriptor&
    operator=(null_t&& aRhs);

    SurfaceDescriptor&
    operator=(const SurfaceDescriptor& aRhs);

    SurfaceDescriptor&
    operator=(SurfaceDescriptor&& aRhs);

    Shmem&
    get_Shmem()
    {
        AssertSanity(TShmem);
        return (*(ptr_Shmem()));
    }
    Shmem&
    get_Shmem() const
    {
        AssertSanity(TShmem);
        return const_cast<Shmem&>((*(constptr_Shmem())));
    }
    operator Shmem&()
    {
        return get_Shmem();
    }
    operator Shmem&() const
    {
        return get_Shmem();
    }

    SurfaceDescriptorX11&
    get_SurfaceDescriptorX11()
    {
        AssertSanity(TSurfaceDescriptorX11);
        return (*(ptr_SurfaceDescriptorX11()));
    }
    const SurfaceDescriptorX11&
    get_SurfaceDescriptorX11() const
    {
        AssertSanity(TSurfaceDescriptorX11);
        return (*(constptr_SurfaceDescriptorX11()));
    }
    operator SurfaceDescriptorX11&()
    {
        return get_SurfaceDescriptorX11();
    }
    operator const SurfaceDescriptorX11&() const
    {
        return get_SurfaceDescriptorX11();
    }

    PPluginSurfaceParent*&
    get_PPluginSurfaceParent()
    {
        AssertSanity(TPPluginSurfaceParent);
        return (*(ptr_PPluginSurfaceParent()));
    }
    PPluginSurfaceParent*
    get_PPluginSurfaceParent() const
    {
        AssertSanity(TPPluginSurfaceParent);
        return (*(constptr_PPluginSurfaceParent()));
    }
    operator PPluginSurfaceParent*&()
    {
        return get_PPluginSurfaceParent();
    }
    operator PPluginSurfaceParent*() const
    {
        return get_PPluginSurfaceParent();
    }

    PPluginSurfaceChild*&
    get_PPluginSurfaceChild()
    {
        AssertSanity(TPPluginSurfaceChild);
        return (*(ptr_PPluginSurfaceChild()));
    }
    PPluginSurfaceChild*
    get_PPluginSurfaceChild() const
    {
        AssertSanity(TPPluginSurfaceChild);
        return (*(constptr_PPluginSurfaceChild()));
    }
    operator PPluginSurfaceChild*&()
    {
        return get_PPluginSurfaceChild();
    }
    operator PPluginSurfaceChild*() const
    {
        return get_PPluginSurfaceChild();
    }

    IOSurfaceDescriptor&
    get_IOSurfaceDescriptor()
    {
        AssertSanity(TIOSurfaceDescriptor);
        return (*(ptr_IOSurfaceDescriptor()));
    }
    const IOSurfaceDescriptor&
    get_IOSurfaceDescriptor() const
    {
        AssertSanity(TIOSurfaceDescriptor);
        return (*(constptr_IOSurfaceDescriptor()));
    }
    operator IOSurfaceDescriptor&()
    {
        return get_IOSurfaceDescriptor();
    }
    operator const IOSurfaceDescriptor&() const
    {
        return get_IOSurfaceDescriptor();
    }

    null_t&
    get_null_t()
    {
        AssertSanity(Tnull_t);
        return (*(ptr_null_t()));
    }
    const null_t&
    get_null_t() const
    {
        AssertSanity(Tnull_t);
        return (*(constptr_null_t()));
    }
    operator null_t&()
    {
        return get_null_t();
    }
    operator const null_t&() const
    {
        return get_null_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::plugins::SurfaceDescriptor>
{
    typedef mozilla::plugins::SurfaceDescriptor paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginInstanceChild;
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PPluginInstanceChild and PPluginInstanceParent
//
namespace mozilla {
namespace plugins {
namespace PPluginInstance {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginInstanceParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginInstanceChild>* aChild);

enum MessageType {
    PPluginInstanceStart = PPluginInstanceMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_CreateChildPluginWindow__ID,
    Reply_CreateChildPluginWindow__ID,
    Msg_CreateChildPopupSurrogate__ID,
    Msg_NPP_SetWindow__ID,
    Reply_NPP_SetWindow__ID,
    Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID,
    Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams__ID,
    Msg_NPP_GetValue_NPPVpluginScriptableNPObject__ID,
    Reply_NPP_GetValue_NPPVpluginScriptableNPObject__ID,
    Msg_NPP_SetValue_NPNVprivateModeBool__ID,
    Reply_NPP_SetValue_NPNVprivateModeBool__ID,
    Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID,
    Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId__ID,
    Msg_NPP_SetValue_NPNVCSSZoomFactor__ID,
    Reply_NPP_SetValue_NPNVCSSZoomFactor__ID,
    Msg_NPP_SetValue_NPNVmuteAudioBool__ID,
    Reply_NPP_SetValue_NPNVmuteAudioBool__ID,
    Msg_NPP_HandleEvent__ID,
    Reply_NPP_HandleEvent__ID,
    Msg_NPP_HandleEvent_Shmem__ID,
    Reply_NPP_HandleEvent_Shmem__ID,
    Msg_NPP_HandleEvent_IOSurface__ID,
    Reply_NPP_HandleEvent_IOSurface__ID,
    Msg_Paint__ID,
    Reply_Paint__ID,
    Msg_WindowPosChanged__ID,
    Msg_ContentsScaleFactorChanged__ID,
    Msg_AsyncSetWindow__ID,
    Msg_UpdateBackground__ID,
    Msg_NPP_DidComposite__ID,
    Msg_NPP_Destroy__ID,
    Reply_NPP_Destroy__ID,
    Msg_NPN_GetValue_NPNVWindowNPObject__ID,
    Reply_NPN_GetValue_NPNVWindowNPObject__ID,
    Msg_NPN_GetValue_NPNVPluginElementNPObject__ID,
    Reply_NPN_GetValue_NPNVPluginElementNPObject__ID,
    Msg_NPN_GetValue_NPNVprivateModeBool__ID,
    Reply_NPN_GetValue_NPNVprivateModeBool__ID,
    Msg_NPN_GetValue_NPNVnetscapeWindow__ID,
    Reply_NPN_GetValue_NPNVnetscapeWindow__ID,
    Msg_NPN_GetValue_NPNVdocumentOrigin__ID,
    Reply_NPN_GetValue_NPNVdocumentOrigin__ID,
    Msg_NPN_GetValue_DrawingModelSupport__ID,
    Reply_NPN_GetValue_DrawingModelSupport__ID,
    Msg_NPN_GetValue_SupportsAsyncBitmapSurface__ID,
    Reply_NPN_GetValue_SupportsAsyncBitmapSurface__ID,
    Msg_NPN_GetValue_SupportsAsyncDXGISurface__ID,
    Reply_NPN_GetValue_SupportsAsyncDXGISurface__ID,
    Msg_NPN_GetValue_PreferredDXGIAdapter__ID,
    Reply_NPN_GetValue_PreferredDXGIAdapter__ID,
    Msg_NPN_SetValue_NPPVpluginWindow__ID,
    Reply_NPN_SetValue_NPPVpluginWindow__ID,
    Msg_NPN_SetValue_NPPVpluginTransparent__ID,
    Reply_NPN_SetValue_NPPVpluginTransparent__ID,
    Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID,
    Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor__ID,
    Msg_NPN_SetValue_NPPVpluginDrawingModel__ID,
    Reply_NPN_SetValue_NPPVpluginDrawingModel__ID,
    Msg_NPN_SetValue_NPPVpluginEventModel__ID,
    Reply_NPN_SetValue_NPPVpluginEventModel__ID,
    Msg_NPN_SetValue_NPPVpluginIsPlayingAudio__ID,
    Reply_NPN_SetValue_NPPVpluginIsPlayingAudio__ID,
    Msg_NPN_GetURL__ID,
    Reply_NPN_GetURL__ID,
    Msg_NPN_PostURL__ID,
    Reply_NPN_PostURL__ID,
    Msg_PStreamNotifyConstructor__ID,
    Reply_PStreamNotifyConstructor__ID,
    Msg_NPN_InvalidateRect__ID,
    Msg_RevokeCurrentDirectSurface__ID,
    Reply_RevokeCurrentDirectSurface__ID,
    Msg_InitDXGISurface__ID,
    Reply_InitDXGISurface__ID,
    Msg_FinalizeDXGISurface__ID,
    Reply_FinalizeDXGISurface__ID,
    Msg_ShowDirectBitmap__ID,
    Reply_ShowDirectBitmap__ID,
    Msg_ShowDirectDXGISurface__ID,
    Reply_ShowDirectDXGISurface__ID,
    Msg_Show__ID,
    Reply_Show__ID,
    Msg_PPluginSurfaceConstructor__ID,
    Reply_PPluginSurfaceConstructor__ID,
    Msg_NPN_PushPopupsEnabledState__ID,
    Reply_NPN_PushPopupsEnabledState__ID,
    Msg_NPN_PopPopupsEnabledState__ID,
    Reply_NPN_PopPopupsEnabledState__ID,
    Msg_NPN_GetValueForURL__ID,
    Reply_NPN_GetValueForURL__ID,
    Msg_NPN_SetValueForURL__ID,
    Reply_NPN_SetValueForURL__ID,
    Msg_NPN_ConvertPoint__ID,
    Reply_NPN_ConvertPoint__ID,
    Msg_RedrawPlugin__ID,
    Msg_SetNetscapeWindowAsParent__ID,
    Msg_GetCompositionString__ID,
    Reply_GetCompositionString__ID,
    Msg_RequestCommitOrCancel__ID,
    Msg_PPluginScriptableObjectConstructor__ID,
    Reply_PPluginScriptableObjectConstructor__ID,
    Msg_PBrowserStreamConstructor__ID,
    Reply_PBrowserStreamConstructor__ID,
    Msg_NPP_NewStream__ID,
    Reply_NPP_NewStream__ID,
    Msg_PluginFocusChange__ID,
    Reply_PluginFocusChange__ID,
    Msg_SetPluginFocus__ID,
    Reply_SetPluginFocus__ID,
    Msg_UpdateWindow__ID,
    Reply_UpdateWindow__ID,
    Msg_PPluginBackgroundDestroyerConstructor__ID,
    Reply_PPluginBackgroundDestroyerConstructor__ID,
    PPluginInstanceEnd
};

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_CreateChildPluginWindow(int32_t routingId);
IPC::Message*
Reply_CreateChildPluginWindow(int32_t routingId);

IPC::Message*
Msg_CreateChildPopupSurrogate(int32_t routingId);

IPC::Message*
Msg_NPP_SetWindow(int32_t routingId);
IPC::Message*
Reply_NPP_SetWindow(int32_t routingId);

IPC::Message*
Msg_NPP_GetValue_NPPVpluginWantsAllNetworkStreams(int32_t routingId);
IPC::Message*
Reply_NPP_GetValue_NPPVpluginWantsAllNetworkStreams(int32_t routingId);

IPC::Message*
Msg_NPP_GetValue_NPPVpluginScriptableNPObject(int32_t routingId);
IPC::Message*
Reply_NPP_GetValue_NPPVpluginScriptableNPObject(int32_t routingId);

IPC::Message*
Msg_NPP_SetValue_NPNVprivateModeBool(int32_t routingId);
IPC::Message*
Reply_NPP_SetValue_NPNVprivateModeBool(int32_t routingId);

IPC::Message*
Msg_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(int32_t routingId);
IPC::Message*
Reply_NPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(int32_t routingId);

IPC::Message*
Msg_NPP_SetValue_NPNVCSSZoomFactor(int32_t routingId);
IPC::Message*
Reply_NPP_SetValue_NPNVCSSZoomFactor(int32_t routingId);

IPC::Message*
Msg_NPP_SetValue_NPNVmuteAudioBool(int32_t routingId);
IPC::Message*
Reply_NPP_SetValue_NPNVmuteAudioBool(int32_t routingId);

IPC::Message*
Msg_NPP_HandleEvent(int32_t routingId);
IPC::Message*
Reply_NPP_HandleEvent(int32_t routingId);

IPC::Message*
Msg_NPP_HandleEvent_Shmem(int32_t routingId);
IPC::Message*
Reply_NPP_HandleEvent_Shmem(int32_t routingId);

IPC::Message*
Msg_NPP_HandleEvent_IOSurface(int32_t routingId);
IPC::Message*
Reply_NPP_HandleEvent_IOSurface(int32_t routingId);

IPC::Message*
Msg_Paint(int32_t routingId);
IPC::Message*
Reply_Paint(int32_t routingId);

IPC::Message*
Msg_WindowPosChanged(int32_t routingId);

IPC::Message*
Msg_ContentsScaleFactorChanged(int32_t routingId);

IPC::Message*
Msg_AsyncSetWindow(int32_t routingId);

IPC::Message*
Msg_UpdateBackground(int32_t routingId);

IPC::Message*
Msg_NPP_DidComposite(int32_t routingId);

IPC::Message*
Msg_NPP_Destroy(int32_t routingId);
IPC::Message*
Reply_NPP_Destroy(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_NPNVWindowNPObject(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_NPNVWindowNPObject(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_NPNVPluginElementNPObject(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_NPNVPluginElementNPObject(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_NPNVprivateModeBool(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_NPNVprivateModeBool(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_NPNVnetscapeWindow(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_NPNVnetscapeWindow(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_NPNVdocumentOrigin(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_NPNVdocumentOrigin(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_DrawingModelSupport(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_DrawingModelSupport(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_SupportsAsyncBitmapSurface(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_SupportsAsyncBitmapSurface(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_SupportsAsyncDXGISurface(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_SupportsAsyncDXGISurface(int32_t routingId);

IPC::Message*
Msg_NPN_GetValue_PreferredDXGIAdapter(int32_t routingId);
IPC::Message*
Reply_NPN_GetValue_PreferredDXGIAdapter(int32_t routingId);

IPC::Message*
Msg_NPN_SetValue_NPPVpluginWindow(int32_t routingId);
IPC::Message*
Reply_NPN_SetValue_NPPVpluginWindow(int32_t routingId);

IPC::Message*
Msg_NPN_SetValue_NPPVpluginTransparent(int32_t routingId);
IPC::Message*
Reply_NPN_SetValue_NPPVpluginTransparent(int32_t routingId);

IPC::Message*
Msg_NPN_SetValue_NPPVpluginUsesDOMForCursor(int32_t routingId);
IPC::Message*
Reply_NPN_SetValue_NPPVpluginUsesDOMForCursor(int32_t routingId);

IPC::Message*
Msg_NPN_SetValue_NPPVpluginDrawingModel(int32_t routingId);
IPC::Message*
Reply_NPN_SetValue_NPPVpluginDrawingModel(int32_t routingId);

IPC::Message*
Msg_NPN_SetValue_NPPVpluginEventModel(int32_t routingId);
IPC::Message*
Reply_NPN_SetValue_NPPVpluginEventModel(int32_t routingId);

IPC::Message*
Msg_NPN_SetValue_NPPVpluginIsPlayingAudio(int32_t routingId);
IPC::Message*
Reply_NPN_SetValue_NPPVpluginIsPlayingAudio(int32_t routingId);

IPC::Message*
Msg_NPN_GetURL(int32_t routingId);
IPC::Message*
Reply_NPN_GetURL(int32_t routingId);

IPC::Message*
Msg_NPN_PostURL(int32_t routingId);
IPC::Message*
Reply_NPN_PostURL(int32_t routingId);

IPC::Message*
Msg_PStreamNotifyConstructor(int32_t routingId);
IPC::Message*
Reply_PStreamNotifyConstructor(int32_t routingId);

IPC::Message*
Msg_NPN_InvalidateRect(int32_t routingId);

IPC::Message*
Msg_RevokeCurrentDirectSurface(int32_t routingId);
IPC::Message*
Reply_RevokeCurrentDirectSurface(int32_t routingId);

IPC::Message*
Msg_InitDXGISurface(int32_t routingId);
IPC::Message*
Reply_InitDXGISurface(int32_t routingId);

IPC::Message*
Msg_FinalizeDXGISurface(int32_t routingId);
IPC::Message*
Reply_FinalizeDXGISurface(int32_t routingId);

IPC::Message*
Msg_ShowDirectBitmap(int32_t routingId);
IPC::Message*
Reply_ShowDirectBitmap(int32_t routingId);

IPC::Message*
Msg_ShowDirectDXGISurface(int32_t routingId);
IPC::Message*
Reply_ShowDirectDXGISurface(int32_t routingId);

IPC::Message*
Msg_Show(int32_t routingId);
IPC::Message*
Reply_Show(int32_t routingId);

IPC::Message*
Msg_PPluginSurfaceConstructor(int32_t routingId);
IPC::Message*
Reply_PPluginSurfaceConstructor(int32_t routingId);

IPC::Message*
Msg_NPN_PushPopupsEnabledState(int32_t routingId);
IPC::Message*
Reply_NPN_PushPopupsEnabledState(int32_t routingId);

IPC::Message*
Msg_NPN_PopPopupsEnabledState(int32_t routingId);
IPC::Message*
Reply_NPN_PopPopupsEnabledState(int32_t routingId);

IPC::Message*
Msg_NPN_GetValueForURL(int32_t routingId);
IPC::Message*
Reply_NPN_GetValueForURL(int32_t routingId);

IPC::Message*
Msg_NPN_SetValueForURL(int32_t routingId);
IPC::Message*
Reply_NPN_SetValueForURL(int32_t routingId);

IPC::Message*
Msg_NPN_ConvertPoint(int32_t routingId);
IPC::Message*
Reply_NPN_ConvertPoint(int32_t routingId);

IPC::Message*
Msg_RedrawPlugin(int32_t routingId);

IPC::Message*
Msg_SetNetscapeWindowAsParent(int32_t routingId);

IPC::Message*
Msg_GetCompositionString(int32_t routingId);
IPC::Message*
Reply_GetCompositionString(int32_t routingId);

IPC::Message*
Msg_RequestCommitOrCancel(int32_t routingId);

IPC::Message*
Msg_PPluginScriptableObjectConstructor(int32_t routingId);
IPC::Message*
Reply_PPluginScriptableObjectConstructor(int32_t routingId);

IPC::Message*
Msg_PBrowserStreamConstructor(int32_t routingId);
IPC::Message*
Reply_PBrowserStreamConstructor(int32_t routingId);

IPC::Message*
Msg_NPP_NewStream(int32_t routingId);
IPC::Message*
Reply_NPP_NewStream(int32_t routingId);

IPC::Message*
Msg_PluginFocusChange(int32_t routingId);
IPC::Message*
Reply_PluginFocusChange(int32_t routingId);

IPC::Message*
Msg_SetPluginFocus(int32_t routingId);
IPC::Message*
Reply_SetPluginFocus(int32_t routingId);

IPC::Message*
Msg_UpdateWindow(int32_t routingId);
IPC::Message*
Reply_UpdateWindow(int32_t routingId);

IPC::Message*
Msg_PPluginBackgroundDestroyerConstructor(int32_t routingId);
IPC::Message*
Reply_PPluginBackgroundDestroyerConstructor(int32_t routingId);



} // namespace PPluginInstance
} // namespace plugins
} // namespace mozilla

#endif // ifndef PPluginInstance_h
