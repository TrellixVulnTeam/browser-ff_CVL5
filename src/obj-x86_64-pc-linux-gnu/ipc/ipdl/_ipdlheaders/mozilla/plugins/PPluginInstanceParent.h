//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginInstanceParent_h
#define PPluginInstanceParent_h

#include "mozilla/plugins/PPluginInstance.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "gfxTypes.h"
#include "gfxipc/SurfaceDescriptor.h"
#include "mozilla/gfx/2D.h"
#include "mozilla/gfx/Types.h"
#include "mozilla/ipc/IPCTypes.h"
#include "mozilla/plugins/PluginMessageUtils.h"
#include "npapi.h"
#include "nsRect.h"

namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginModuleChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginScriptableObjectChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PBrowserStreamParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PBrowserStreamChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PStreamNotifyParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PStreamNotifyChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceParent;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginSurfaceChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PBrowserStreamParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PStreamNotifyParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
struct NPRemoteWindow;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
struct NPRemoteEvent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
struct null_t;
} // namespace mozilla

struct DxgiAdapterDesc;

namespace mozilla {
namespace widget {
struct CandidateWindowPosition;
} // namespace widget
} // namespace mozilla

namespace mozilla {
class NativeEventData;
} // namespace mozilla

namespace mozilla {
namespace plugins {


class PPluginInstanceParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::plugins::PPluginScriptableObjectParent;
    friend class mozilla::plugins::PPluginBackgroundDestroyerParent;
    friend class mozilla::plugins::PBrowserStreamParent;
    friend class mozilla::plugins::PPluginModuleParent;
    friend class mozilla::plugins::PPluginSurfaceParent;
    friend class mozilla::plugins::PStreamNotifyParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::widget::CandidateWindowPosition CandidateWindowPosition;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::gfx::IntRect IntRect;
    typedef mozilla::gfx::IntSize IntSize;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::plugins::NPRemoteEvent NPRemoteEvent;
    typedef mozilla::plugins::NPRemoteWindow NPRemoteWindow;
    typedef mozilla::NativeEventData NativeEventData;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::null_t null_t;
    typedef mozilla::plugins::PPluginBackgroundDestroyerParent PPluginBackgroundDestroyerParent;
    typedef mozilla::plugins::PPluginBackgroundDestroyerChild PPluginBackgroundDestroyerChild;
    typedef mozilla::plugins::PPluginModuleParent PPluginModuleParent;
    typedef mozilla::plugins::PPluginModuleChild PPluginModuleChild;
    typedef mozilla::plugins::PPluginScriptableObjectParent PPluginScriptableObjectParent;
    typedef mozilla::plugins::PPluginScriptableObjectChild PPluginScriptableObjectChild;
    typedef mozilla::plugins::PBrowserStreamParent PBrowserStreamParent;
    typedef mozilla::plugins::PBrowserStreamChild PBrowserStreamChild;
    typedef mozilla::plugins::PStreamNotifyParent PStreamNotifyParent;
    typedef mozilla::plugins::PStreamNotifyChild PStreamNotifyChild;
    typedef mozilla::plugins::PPluginSurfaceParent PPluginSurfaceParent;
    typedef mozilla::plugins::PPluginSurfaceChild PPluginSurfaceChild;

protected:
    virtual mozilla::ipc::IPCResult
    AnswerPStreamNotifyConstructor(
            PStreamNotifyParent* actor,
            const nsCString& url,
            const nsCString& target,
            const bool& post,
            const nsCString& buffer,
            const bool& file,
            NPError* result);
    virtual mozilla::ipc::IPCResult
    RecvPPluginSurfaceConstructor(
            PPluginSurfaceParent* actor,
            const WindowsSharedMemoryHandle& handle,
            const IntSize& size,
            const bool& transparent);
    virtual mozilla::ipc::IPCResult
    RecvPPluginScriptableObjectConstructor(PPluginScriptableObjectParent* actor);
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PPluginInstanceParent();

    virtual ~PPluginInstanceParent();

public:
    PPluginModuleParent*
    Manager() const;

    void
    ManagedPPluginBackgroundDestroyerParent(nsTArray<PPluginBackgroundDestroyerParent*>& aArr) const;
    const ManagedContainer<PPluginBackgroundDestroyerParent>&
    ManagedPPluginBackgroundDestroyerParent() const;

    void
    ManagedPPluginScriptableObjectParent(nsTArray<PPluginScriptableObjectParent*>& aArr) const;
    const ManagedContainer<PPluginScriptableObjectParent>&
    ManagedPPluginScriptableObjectParent() const;

    void
    ManagedPBrowserStreamParent(nsTArray<PBrowserStreamParent*>& aArr) const;
    const ManagedContainer<PBrowserStreamParent>&
    ManagedPBrowserStreamParent() const;

    void
    ManagedPStreamNotifyParent(nsTArray<PStreamNotifyParent*>& aArr) const;
    const ManagedContainer<PStreamNotifyParent>&
    ManagedPStreamNotifyParent() const;

    void
    ManagedPPluginSurfaceParent(nsTArray<PPluginSurfaceParent*>& aArr) const;
    const ManagedContainer<PPluginSurfaceParent>&
    ManagedPPluginSurfaceParent() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PPluginBackgroundDestroyerChild>
    OpenPPluginBackgroundDestroyerEndpoint(PPluginBackgroundDestroyerParent* aActor);
    bool
    BindPPluginBackgroundDestroyerEndpoint(
            ManagedEndpoint<PPluginBackgroundDestroyerParent> aEndpoint,
            PPluginBackgroundDestroyerParent* aActor);

    ManagedEndpoint<PPluginScriptableObjectChild>
    OpenPPluginScriptableObjectEndpoint(PPluginScriptableObjectParent* aActor);
    bool
    BindPPluginScriptableObjectEndpoint(
            ManagedEndpoint<PPluginScriptableObjectParent> aEndpoint,
            PPluginScriptableObjectParent* aActor);

    ManagedEndpoint<PBrowserStreamChild>
    OpenPBrowserStreamEndpoint(PBrowserStreamParent* aActor);
    bool
    BindPBrowserStreamEndpoint(
            ManagedEndpoint<PBrowserStreamParent> aEndpoint,
            PBrowserStreamParent* aActor);

    ManagedEndpoint<PStreamNotifyChild>
    OpenPStreamNotifyEndpoint(PStreamNotifyParent* aActor);
    bool
    BindPStreamNotifyEndpoint(
            ManagedEndpoint<PStreamNotifyParent> aEndpoint,
            PStreamNotifyParent* aActor);

    ManagedEndpoint<PPluginSurfaceChild>
    OpenPPluginSurfaceEndpoint(PPluginSurfaceParent* aActor);
    bool
    BindPPluginSurfaceEndpoint(
            ManagedEndpoint<PPluginSurfaceParent> aEndpoint,
            PPluginSurfaceParent* aActor);

    [[nodiscard]] static bool
    Send__delete__(PPluginInstanceParent* actor);

    [[nodiscard]] bool
    CallCreateChildPluginWindow(NativeWindowHandle* childPluginWindow);

    [[nodiscard]] bool
    SendCreateChildPopupSurrogate(const NativeWindowHandle& netscapeWindow);

    [[nodiscard]] bool
    CallNPP_SetWindow(const NPRemoteWindow& window);

    [[nodiscard]] bool
    CallNPP_GetValue_NPPVpluginWantsAllNetworkStreams(
            bool* value,
            NPError* result);

    [[nodiscard]] bool
    CallNPP_GetValue_NPPVpluginScriptableNPObject(
            PPluginScriptableObjectParent** value,
            NPError* result);

    [[nodiscard]] bool
    CallNPP_SetValue_NPNVprivateModeBool(
            const bool& value,
            NPError* result);

    [[nodiscard]] bool
    CallNPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(
            nsCString* plug_id,
            NPError* result);

    [[nodiscard]] bool
    CallNPP_SetValue_NPNVCSSZoomFactor(
            const double& value,
            NPError* result);

    [[nodiscard]] bool
    CallNPP_SetValue_NPNVmuteAudioBool(
            const bool& muted,
            NPError* result);

    [[nodiscard]] bool
    CallNPP_HandleEvent(
            const NPRemoteEvent& event,
            int16_t* handled);

    [[nodiscard]] bool
    CallNPP_HandleEvent_Shmem(
            const NPRemoteEvent& event,
            Shmem&& buffer,
            int16_t* handled,
            Shmem* rtnbuffer);

    [[nodiscard]] bool
    CallNPP_HandleEvent_IOSurface(
            const NPRemoteEvent& event,
            const uint32_t& surfaceid,
            int16_t* handled);

    [[nodiscard]] bool
    CallPaint(
            const NPRemoteEvent& event,
            int16_t* handled);

    [[nodiscard]] bool
    SendWindowPosChanged(const NPRemoteEvent& event);

    [[nodiscard]] bool
    SendContentsScaleFactorChanged(const double& aContentsScaleFactor);

    [[nodiscard]] bool
    SendAsyncSetWindow(
            const gfxSurfaceType& surfaceType,
            const NPRemoteWindow& window);

    [[nodiscard]] bool
    SendUpdateBackground(
            const SurfaceDescriptor& background,
            const nsIntRect& rect);

    [[nodiscard]] bool
    SendNPP_DidComposite();

    [[nodiscard]] bool
    CallNPP_Destroy(NPError* rv);

    [[nodiscard]] PPluginScriptableObjectParent*
    SendPPluginScriptableObjectConstructor();

    [[nodiscard]] PPluginScriptableObjectParent*
    SendPPluginScriptableObjectConstructor(PPluginScriptableObjectParent* actor);

    [[nodiscard]] PBrowserStreamParent*
    SendPBrowserStreamConstructor(
            const nsCString& url,
            const uint32_t& length,
            const uint32_t& lastmodified,
            PStreamNotifyParent* notifyData,
            const nsCString& headers);

    [[nodiscard]] PBrowserStreamParent*
    SendPBrowserStreamConstructor(
            PBrowserStreamParent* actor,
            const nsCString& url,
            const uint32_t& length,
            const uint32_t& lastmodified,
            PStreamNotifyParent* notifyData,
            const nsCString& headers);

    [[nodiscard]] bool
    CallNPP_NewStream(
            PBrowserStreamParent* actor,
            const nsCString& mimeType,
            const bool& seekable,
            NPError* rv,
            uint16_t* stype);

    [[nodiscard]] bool
    CallSetPluginFocus();

    [[nodiscard]] bool
    CallUpdateWindow();

    [[nodiscard]] PPluginBackgroundDestroyerParent*
    SendPPluginBackgroundDestroyerConstructor();

    [[nodiscard]] PPluginBackgroundDestroyerParent*
    SendPPluginBackgroundDestroyerConstructor(PPluginBackgroundDestroyerParent* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PPluginBackgroundDestroyerParent> mManagedPPluginBackgroundDestroyerParent;
    ManagedContainer<PPluginScriptableObjectParent> mManagedPPluginScriptableObjectParent;
    ManagedContainer<PBrowserStreamParent> mManagedPBrowserStreamParent;
    ManagedContainer<PStreamNotifyParent> mManagedPStreamNotifyParent;
    ManagedContainer<PPluginSurfaceParent> mManagedPPluginSurfaceParent;
};


} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::plugins::PPluginInstanceParent*>
{
    typedef mozilla::plugins::PPluginInstanceParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PPluginInstanceParent_h
