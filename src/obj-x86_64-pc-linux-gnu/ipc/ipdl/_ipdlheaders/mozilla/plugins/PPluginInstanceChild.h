//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginInstanceChild_h
#define PPluginInstanceChild_h

#include "mozilla/plugins/PPluginInstance.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "gfxTypes.h"
#include "gfxipc/SurfaceDescriptor.h"
#include "mozilla/gfx/2D.h"
#include "mozilla/gfx/Types.h"
#include "mozilla/ipc/IPCTypes.h"
#include "mozilla/plugins/PluginMessageUtils.h"
#include "npapi.h"
#include "nsRect.h"

namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginModuleParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginScriptableObjectParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PBrowserStreamChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PBrowserStreamParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PStreamNotifyChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PStreamNotifyParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginSurfaceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PBrowserStreamChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PStreamNotifyChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
struct NPRemoteWindow;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
struct NPRemoteEvent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
struct null_t;
} // namespace mozilla

struct DxgiAdapterDesc;

namespace mozilla {
namespace widget {
struct CandidateWindowPosition;
} // namespace widget
} // namespace mozilla

namespace mozilla {
class NativeEventData;
} // namespace mozilla

namespace mozilla {
namespace plugins {


class PPluginInstanceChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::plugins::PPluginScriptableObjectChild;
    friend class mozilla::plugins::PPluginBackgroundDestroyerChild;
    friend class mozilla::plugins::PBrowserStreamChild;
    friend class mozilla::plugins::PPluginModuleChild;
    friend class mozilla::plugins::PPluginSurfaceChild;
    friend class mozilla::plugins::PStreamNotifyChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::widget::CandidateWindowPosition CandidateWindowPosition;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::gfx::IntRect IntRect;
    typedef mozilla::gfx::IntSize IntSize;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::plugins::NPRemoteEvent NPRemoteEvent;
    typedef mozilla::plugins::NPRemoteWindow NPRemoteWindow;
    typedef mozilla::NativeEventData NativeEventData;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::null_t null_t;
    typedef mozilla::plugins::PPluginBackgroundDestroyerChild PPluginBackgroundDestroyerChild;
    typedef mozilla::plugins::PPluginBackgroundDestroyerParent PPluginBackgroundDestroyerParent;
    typedef mozilla::plugins::PPluginModuleChild PPluginModuleChild;
    typedef mozilla::plugins::PPluginModuleParent PPluginModuleParent;
    typedef mozilla::plugins::PPluginScriptableObjectChild PPluginScriptableObjectChild;
    typedef mozilla::plugins::PPluginScriptableObjectParent PPluginScriptableObjectParent;
    typedef mozilla::plugins::PBrowserStreamChild PBrowserStreamChild;
    typedef mozilla::plugins::PBrowserStreamParent PBrowserStreamParent;
    typedef mozilla::plugins::PStreamNotifyChild PStreamNotifyChild;
    typedef mozilla::plugins::PStreamNotifyParent PStreamNotifyParent;
    typedef mozilla::plugins::PPluginSurfaceChild PPluginSurfaceChild;
    typedef mozilla::plugins::PPluginSurfaceParent PPluginSurfaceParent;

protected:
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
    virtual mozilla::ipc::IPCResult
    RecvPPluginScriptableObjectConstructor(PPluginScriptableObjectChild* actor);
    virtual mozilla::ipc::IPCResult
    RecvPBrowserStreamConstructor(
            PBrowserStreamChild* actor,
            const nsCString& url,
            const uint32_t& length,
            const uint32_t& lastmodified,
            PStreamNotifyChild* notifyData,
            const nsCString& headers);
    virtual mozilla::ipc::IPCResult
    RecvPPluginBackgroundDestroyerConstructor(PPluginBackgroundDestroyerChild* actor);
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PPluginInstanceChild();

    virtual ~PPluginInstanceChild();

public:
    PPluginModuleChild*
    Manager() const;

    void
    ManagedPPluginBackgroundDestroyerChild(nsTArray<PPluginBackgroundDestroyerChild*>& aArr) const;
    const ManagedContainer<PPluginBackgroundDestroyerChild>&
    ManagedPPluginBackgroundDestroyerChild() const;

    void
    ManagedPPluginScriptableObjectChild(nsTArray<PPluginScriptableObjectChild*>& aArr) const;
    const ManagedContainer<PPluginScriptableObjectChild>&
    ManagedPPluginScriptableObjectChild() const;

    void
    ManagedPBrowserStreamChild(nsTArray<PBrowserStreamChild*>& aArr) const;
    const ManagedContainer<PBrowserStreamChild>&
    ManagedPBrowserStreamChild() const;

    void
    ManagedPStreamNotifyChild(nsTArray<PStreamNotifyChild*>& aArr) const;
    const ManagedContainer<PStreamNotifyChild>&
    ManagedPStreamNotifyChild() const;

    void
    ManagedPPluginSurfaceChild(nsTArray<PPluginSurfaceChild*>& aArr) const;
    const ManagedContainer<PPluginSurfaceChild>&
    ManagedPPluginSurfaceChild() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    ManagedEndpoint<PPluginBackgroundDestroyerParent>
    OpenPPluginBackgroundDestroyerEndpoint(PPluginBackgroundDestroyerChild* aActor);
    bool
    BindPPluginBackgroundDestroyerEndpoint(
            ManagedEndpoint<PPluginBackgroundDestroyerChild> aEndpoint,
            PPluginBackgroundDestroyerChild* aActor);

    ManagedEndpoint<PPluginScriptableObjectParent>
    OpenPPluginScriptableObjectEndpoint(PPluginScriptableObjectChild* aActor);
    bool
    BindPPluginScriptableObjectEndpoint(
            ManagedEndpoint<PPluginScriptableObjectChild> aEndpoint,
            PPluginScriptableObjectChild* aActor);

    ManagedEndpoint<PBrowserStreamParent>
    OpenPBrowserStreamEndpoint(PBrowserStreamChild* aActor);
    bool
    BindPBrowserStreamEndpoint(
            ManagedEndpoint<PBrowserStreamChild> aEndpoint,
            PBrowserStreamChild* aActor);

    ManagedEndpoint<PStreamNotifyParent>
    OpenPStreamNotifyEndpoint(PStreamNotifyChild* aActor);
    bool
    BindPStreamNotifyEndpoint(
            ManagedEndpoint<PStreamNotifyChild> aEndpoint,
            PStreamNotifyChild* aActor);

    ManagedEndpoint<PPluginSurfaceParent>
    OpenPPluginSurfaceEndpoint(PPluginSurfaceChild* aActor);
    bool
    BindPPluginSurfaceEndpoint(
            ManagedEndpoint<PPluginSurfaceChild> aEndpoint,
            PPluginSurfaceChild* aActor);

    bool
    CallNPN_GetValue_NPNVWindowNPObject(
            PPluginScriptableObjectChild** value,
            NPError* result);

    bool
    CallNPN_GetValue_NPNVPluginElementNPObject(
            PPluginScriptableObjectChild** value,
            NPError* result);

    bool
    CallNPN_GetValue_NPNVprivateModeBool(
            bool* value,
            NPError* result);

    bool
    CallNPN_GetValue_NPNVnetscapeWindow(
            NativeWindowHandle* value,
            NPError* result);

    bool
    CallNPN_GetValue_NPNVdocumentOrigin(
            nsCString* value,
            NPError* result);

    bool
    CallNPN_GetValue_DrawingModelSupport(
            const NPNVariable& model,
            bool* value);

    bool
    CallNPN_GetValue_SupportsAsyncBitmapSurface(bool* value);

    bool
    CallNPN_GetValue_SupportsAsyncDXGISurface(bool* value);

    bool
    CallNPN_GetValue_PreferredDXGIAdapter(DxgiAdapterDesc* desc);

    bool
    CallNPN_SetValue_NPPVpluginWindow(
            const bool& windowed,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginTransparent(
            const bool& transparent,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginUsesDOMForCursor(
            const bool& useDOMForCursor,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginDrawingModel(
            const int& drawingModel,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginEventModel(
            const int& eventModel,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginIsPlayingAudio(
            const bool& isAudioPlaying,
            NPError* result);

    bool
    CallNPN_GetURL(
            const nsCString& url,
            const nsCString& target,
            NPError* result);

    bool
    CallNPN_PostURL(
            const nsCString& url,
            const nsCString& target,
            const nsCString& buffer,
            const bool& file,
            NPError* result);

    [[nodiscard]] PStreamNotifyChild*
    CallPStreamNotifyConstructor(
            const nsCString& url,
            const nsCString& target,
            const bool& post,
            const nsCString& buffer,
            const bool& file,
            NPError* result);

    [[nodiscard]] PStreamNotifyChild*
    CallPStreamNotifyConstructor(
            PStreamNotifyChild* actor,
            const nsCString& url,
            const nsCString& target,
            const bool& post,
            const nsCString& buffer,
            const bool& file,
            NPError* result);

    bool
    SendNPN_InvalidateRect(const NPRect& rect);

    bool
    SendRevokeCurrentDirectSurface();

    bool
    SendInitDXGISurface(
            const SurfaceFormat& format,
            const IntSize& size,
            WindowsHandle* handle,
            NPError* result);

    bool
    SendFinalizeDXGISurface(const WindowsHandle& handle);

    bool
    SendShowDirectBitmap(
            Shmem&& buffer,
            const SurfaceFormat& format,
            const uint32_t& stride,
            const IntSize& size,
            const IntRect& dirty);

    bool
    SendShowDirectDXGISurface(
            const WindowsHandle& handle,
            const IntRect& dirty);

    bool
    SendShow(
            const NPRect& updatedRect,
            const SurfaceDescriptor& newSurface,
            SurfaceDescriptor* prevSurface);

    PPluginSurfaceChild*
    SendPPluginSurfaceConstructor(
            const WindowsSharedMemoryHandle& handle,
            const IntSize& size,
            const bool& transparent);

    PPluginSurfaceChild*
    SendPPluginSurfaceConstructor(
            PPluginSurfaceChild* actor,
            const WindowsSharedMemoryHandle& handle,
            const IntSize& size,
            const bool& transparent);

    bool
    CallNPN_PushPopupsEnabledState(const bool& aState);

    bool
    CallNPN_PopPopupsEnabledState();

    bool
    CallNPN_GetValueForURL(
            const NPNURLVariable& variable,
            const nsCString& url,
            nsCString* value,
            NPError* result);

    bool
    CallNPN_SetValueForURL(
            const NPNURLVariable& variable,
            const nsCString& url,
            const nsCString& value,
            NPError* result);

    bool
    CallNPN_ConvertPoint(
            const double& sourceX,
            const bool& ignoreDestX,
            const double& sourceY,
            const bool& ignoreDestY,
            const NPCoordinateSpace& sourceSpace,
            const NPCoordinateSpace& destSpace,
            double* destX,
            double* destY,
            bool* result);

    bool
    SendRedrawPlugin();

    bool
    SendSetNetscapeWindowAsParent(const NativeWindowHandle& childWindow);

    bool
    SendGetCompositionString(
            const uint32_t& aType,
            nsTArray<uint8_t>* aDist,
            int32_t* aLength);

    bool
    SendRequestCommitOrCancel(const bool& aCommitted);

    PPluginScriptableObjectChild*
    SendPPluginScriptableObjectConstructor();

    PPluginScriptableObjectChild*
    SendPPluginScriptableObjectConstructor(PPluginScriptableObjectChild* actor);

    bool
    CallPluginFocusChange(const bool& gotFocus);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

    ManagedContainer<PPluginBackgroundDestroyerChild> mManagedPPluginBackgroundDestroyerChild;
    ManagedContainer<PPluginScriptableObjectChild> mManagedPPluginScriptableObjectChild;
    ManagedContainer<PBrowserStreamChild> mManagedPBrowserStreamChild;
    ManagedContainer<PStreamNotifyChild> mManagedPStreamNotifyChild;
    ManagedContainer<PPluginSurfaceChild> mManagedPPluginSurfaceChild;
};


} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::plugins::PPluginInstanceChild*>
{
    typedef mozilla::plugins::PPluginInstanceChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PPluginInstanceChild_h
