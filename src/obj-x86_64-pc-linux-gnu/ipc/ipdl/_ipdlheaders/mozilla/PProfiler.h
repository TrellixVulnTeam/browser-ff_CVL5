//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PProfiler_h
#define PProfiler_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"
#include "mozilla/ProfilerTypes.h"

namespace mozilla {
class PProfilerParent;
} // namespace mozilla
namespace mozilla {
class PProfilerChild;
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PProfilerChild and PProfilerParent
//
namespace mozilla {
namespace PProfiler {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::PProfilerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::PProfilerChild>* aChild);

enum MessageType {
    PProfilerStart = PProfilerMsgStart << 16,
    Msg_Start__ID,
    Msg_EnsureStarted__ID,
    Msg_Stop__ID,
    Msg_Pause__ID,
    Msg_Resume__ID,
    Msg_PauseSampling__ID,
    Msg_ResumeSampling__ID,
    Msg_AwaitNextChunkManagerUpdate__ID,
    Reply_AwaitNextChunkManagerUpdate__ID,
    Msg_DestroyReleasedChunksAtOrBefore__ID,
    Msg_GatherProfile__ID,
    Reply_GatherProfile__ID,
    Msg_ClearAllPages__ID,
    PProfilerEnd
};

IPC::Message*
Msg_Start(int32_t routingId);

IPC::Message*
Msg_EnsureStarted(int32_t routingId);

IPC::Message*
Msg_Stop(int32_t routingId);

IPC::Message*
Msg_Pause(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);

IPC::Message*
Msg_PauseSampling(int32_t routingId);

IPC::Message*
Msg_ResumeSampling(int32_t routingId);

IPC::Message*
Msg_AwaitNextChunkManagerUpdate(int32_t routingId);
IPC::Message*
Reply_AwaitNextChunkManagerUpdate(int32_t routingId);

IPC::Message*
Msg_DestroyReleasedChunksAtOrBefore(int32_t routingId);

IPC::Message*
Msg_GatherProfile(int32_t routingId);
IPC::Message*
Reply_GatherProfile(int32_t routingId);

IPC::Message*
Msg_ClearAllPages(int32_t routingId);



} // namespace PProfiler
} // namespace mozilla

#endif // ifndef PProfiler_h
