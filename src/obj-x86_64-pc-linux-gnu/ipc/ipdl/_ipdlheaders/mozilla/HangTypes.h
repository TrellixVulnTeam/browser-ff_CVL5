//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef HangTypes_h
#define HangTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "mozilla/TimeStamp.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangEntryBufOffset|
//
namespace mozilla {
class HangEntryBufOffset final
{
private:

public:
    MOZ_IMPLICIT HangEntryBufOffset() :
        index_()
    {
    }

    MOZ_IMPLICIT HangEntryBufOffset(const uint32_t& _index) :
        index_(_index)
    {
    }

    uint32_t&
    index()
    {
        return index_;
    }
    const uint32_t&
    index() const
    {
        return index_;
    }

private:
    uint32_t index_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntryBufOffset>
{
    typedef mozilla::HangEntryBufOffset paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangEntryModOffset|
//
namespace mozilla {
class HangEntryModOffset final
{
private:

public:
    MOZ_IMPLICIT HangEntryModOffset() :
        module_(),
        offset_()
    {
    }

    MOZ_IMPLICIT HangEntryModOffset(
            const uint32_t& _module,
            const uint32_t& _offset) :
        module_(_module),
        offset_(_offset)
    {
    }

    uint32_t&
    module()
    {
        return module_;
    }
    const uint32_t&
    module() const
    {
        return module_;
    }

    uint32_t&
    offset()
    {
        return offset_;
    }
    const uint32_t&
    offset() const
    {
        return offset_;
    }

private:
    void
    StaticAssertions() const;
    uint32_t module_;
    uint32_t offset_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntryModOffset>
{
    typedef mozilla::HangEntryModOffset paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangEntryProgCounter|
//
namespace mozilla {
class HangEntryProgCounter final
{
private:

public:
    MOZ_IMPLICIT HangEntryProgCounter() :
        pc_()
    {
    }

    MOZ_IMPLICIT HangEntryProgCounter(const uintptr_t& _pc) :
        pc_(_pc)
    {
    }

    uintptr_t&
    pc()
    {
        return pc_;
    }
    const uintptr_t&
    pc() const
    {
        return pc_;
    }

private:
    uintptr_t pc_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntryProgCounter>
{
    typedef mozilla::HangEntryProgCounter paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangEntryContent|
//
namespace mozilla {
class HangEntryContent final
{
private:

public:
    MOZ_IMPLICIT HangEntryContent()
    {
    }

private:
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntryContent>
{
    typedef mozilla::HangEntryContent paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangEntryJit|
//
namespace mozilla {
class HangEntryJit final
{
private:

public:
    MOZ_IMPLICIT HangEntryJit()
    {
    }

private:
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntryJit>
{
    typedef mozilla::HangEntryJit paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangEntryWasm|
//
namespace mozilla {
class HangEntryWasm final
{
private:

public:
    MOZ_IMPLICIT HangEntryWasm()
    {
    }

private:
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntryWasm>
{
    typedef mozilla::HangEntryWasm paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangEntryChromeScript|
//
namespace mozilla {
class HangEntryChromeScript final
{
private:

public:
    MOZ_IMPLICIT HangEntryChromeScript()
    {
    }

private:
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntryChromeScript>
{
    typedef mozilla::HangEntryChromeScript paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangEntrySuppressed|
//
namespace mozilla {
class HangEntrySuppressed final
{
private:

public:
    MOZ_IMPLICIT HangEntrySuppressed()
    {
    }

private:
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntrySuppressed>
{
    typedef mozilla::HangEntrySuppressed paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union HangEntry|
//
namespace mozilla {
class HangEntry final
{
public:
    enum Type {
        T__None,
        TnsCString = 1,
        THangEntryBufOffset,
        THangEntryModOffset,
        THangEntryProgCounter,
        THangEntryContent,
        THangEntryJit,
        THangEntryWasm,
        THangEntryChromeScript,
        THangEntrySuppressed,
        T__Last = THangEntrySuppressed
    };

private:
    typedef mozilla::HangEntryBufOffset HangEntryBufOffset;
    typedef mozilla::HangEntryModOffset HangEntryModOffset;
    typedef mozilla::HangEntryProgCounter HangEntryProgCounter;
    typedef mozilla::HangEntryContent HangEntryContent;
    typedef mozilla::HangEntryJit HangEntryJit;
    typedef mozilla::HangEntryWasm HangEntryWasm;
    typedef mozilla::HangEntryChromeScript HangEntryChromeScript;
    typedef mozilla::HangEntrySuppressed HangEntrySuppressed;
    typedef nsCString nsCString__tdef;
    typedef HangEntryBufOffset HangEntryBufOffset__tdef;
    typedef HangEntryModOffset HangEntryModOffset__tdef;
    typedef HangEntryProgCounter HangEntryProgCounter__tdef;
    typedef HangEntryContent HangEntryContent__tdef;
    typedef HangEntryJit HangEntryJit__tdef;
    typedef HangEntryWasm HangEntryWasm__tdef;
    typedef HangEntryChromeScript HangEntryChromeScript__tdef;
    typedef HangEntrySuppressed HangEntrySuppressed__tdef;

    union Value {
        mozilla::AlignedStorage2<nsCString> VnsCString;
        mozilla::AlignedStorage2<HangEntryBufOffset> VHangEntryBufOffset;
        mozilla::AlignedStorage2<HangEntryModOffset> VHangEntryModOffset;
        mozilla::AlignedStorage2<HangEntryProgCounter> VHangEntryProgCounter;
        mozilla::AlignedStorage2<HangEntryContent> VHangEntryContent;
        mozilla::AlignedStorage2<HangEntryJit> VHangEntryJit;
        mozilla::AlignedStorage2<HangEntryWasm> VHangEntryWasm;
        mozilla::AlignedStorage2<HangEntryChromeScript> VHangEntryChromeScript;
        mozilla::AlignedStorage2<HangEntrySuppressed> VHangEntrySuppressed;
    };

    nsCString*
    ptr_nsCString()
    {
        return ((mValue).VnsCString).addr();
    }
    const nsCString*
    constptr_nsCString() const
    {
        return ((mValue).VnsCString).addr();
    }
    HangEntryBufOffset*
    ptr_HangEntryBufOffset()
    {
        return ((mValue).VHangEntryBufOffset).addr();
    }
    const HangEntryBufOffset*
    constptr_HangEntryBufOffset() const
    {
        return ((mValue).VHangEntryBufOffset).addr();
    }
    HangEntryModOffset*
    ptr_HangEntryModOffset()
    {
        return ((mValue).VHangEntryModOffset).addr();
    }
    const HangEntryModOffset*
    constptr_HangEntryModOffset() const
    {
        return ((mValue).VHangEntryModOffset).addr();
    }
    HangEntryProgCounter*
    ptr_HangEntryProgCounter()
    {
        return ((mValue).VHangEntryProgCounter).addr();
    }
    const HangEntryProgCounter*
    constptr_HangEntryProgCounter() const
    {
        return ((mValue).VHangEntryProgCounter).addr();
    }
    HangEntryContent*
    ptr_HangEntryContent()
    {
        return ((mValue).VHangEntryContent).addr();
    }
    const HangEntryContent*
    constptr_HangEntryContent() const
    {
        return ((mValue).VHangEntryContent).addr();
    }
    HangEntryJit*
    ptr_HangEntryJit()
    {
        return ((mValue).VHangEntryJit).addr();
    }
    const HangEntryJit*
    constptr_HangEntryJit() const
    {
        return ((mValue).VHangEntryJit).addr();
    }
    HangEntryWasm*
    ptr_HangEntryWasm()
    {
        return ((mValue).VHangEntryWasm).addr();
    }
    const HangEntryWasm*
    constptr_HangEntryWasm() const
    {
        return ((mValue).VHangEntryWasm).addr();
    }
    HangEntryChromeScript*
    ptr_HangEntryChromeScript()
    {
        return ((mValue).VHangEntryChromeScript).addr();
    }
    const HangEntryChromeScript*
    constptr_HangEntryChromeScript() const
    {
        return ((mValue).VHangEntryChromeScript).addr();
    }
    HangEntrySuppressed*
    ptr_HangEntrySuppressed()
    {
        return ((mValue).VHangEntrySuppressed).addr();
    }
    const HangEntrySuppressed*
    constptr_HangEntrySuppressed() const
    {
        return ((mValue).VHangEntrySuppressed).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT HangEntry() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT HangEntry(const nsCString& aOther);

    MOZ_IMPLICIT HangEntry(nsCString&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntryBufOffset& aOther);

    MOZ_IMPLICIT HangEntry(HangEntryBufOffset&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntryModOffset& aOther);

    MOZ_IMPLICIT HangEntry(HangEntryModOffset&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntryProgCounter& aOther);

    MOZ_IMPLICIT HangEntry(HangEntryProgCounter&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntryContent& aOther);

    MOZ_IMPLICIT HangEntry(HangEntryContent&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntryJit& aOther);

    MOZ_IMPLICIT HangEntry(HangEntryJit&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntryWasm& aOther);

    MOZ_IMPLICIT HangEntry(HangEntryWasm&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntryChromeScript& aOther);

    MOZ_IMPLICIT HangEntry(HangEntryChromeScript&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntrySuppressed& aOther);

    MOZ_IMPLICIT HangEntry(HangEntrySuppressed&& aOther);

    MOZ_IMPLICIT HangEntry(const HangEntry& aOther);

    MOZ_IMPLICIT HangEntry(HangEntry&& aOther);

    ~HangEntry();

    Type
    type() const
    {
        return mType;
    }

    HangEntry&
    operator=(const nsCString& aRhs);

    HangEntry&
    operator=(nsCString&& aRhs);

    HangEntry&
    operator=(const HangEntryBufOffset& aRhs);

    HangEntry&
    operator=(HangEntryBufOffset&& aRhs);

    HangEntry&
    operator=(const HangEntryModOffset& aRhs);

    HangEntry&
    operator=(HangEntryModOffset&& aRhs);

    HangEntry&
    operator=(const HangEntryProgCounter& aRhs);

    HangEntry&
    operator=(HangEntryProgCounter&& aRhs);

    HangEntry&
    operator=(const HangEntryContent& aRhs);

    HangEntry&
    operator=(HangEntryContent&& aRhs);

    HangEntry&
    operator=(const HangEntryJit& aRhs);

    HangEntry&
    operator=(HangEntryJit&& aRhs);

    HangEntry&
    operator=(const HangEntryWasm& aRhs);

    HangEntry&
    operator=(HangEntryWasm&& aRhs);

    HangEntry&
    operator=(const HangEntryChromeScript& aRhs);

    HangEntry&
    operator=(HangEntryChromeScript&& aRhs);

    HangEntry&
    operator=(const HangEntrySuppressed& aRhs);

    HangEntry&
    operator=(HangEntrySuppressed&& aRhs);

    HangEntry&
    operator=(const HangEntry& aRhs);

    HangEntry&
    operator=(HangEntry&& aRhs);

    nsCString&
    get_nsCString()
    {
        AssertSanity(TnsCString);
        return (*(ptr_nsCString()));
    }
    const nsCString&
    get_nsCString() const
    {
        AssertSanity(TnsCString);
        return (*(constptr_nsCString()));
    }
    operator nsCString&()
    {
        return get_nsCString();
    }
    operator const nsCString&() const
    {
        return get_nsCString();
    }

    HangEntryBufOffset&
    get_HangEntryBufOffset()
    {
        AssertSanity(THangEntryBufOffset);
        return (*(ptr_HangEntryBufOffset()));
    }
    const HangEntryBufOffset&
    get_HangEntryBufOffset() const
    {
        AssertSanity(THangEntryBufOffset);
        return (*(constptr_HangEntryBufOffset()));
    }
    operator HangEntryBufOffset&()
    {
        return get_HangEntryBufOffset();
    }
    operator const HangEntryBufOffset&() const
    {
        return get_HangEntryBufOffset();
    }

    HangEntryModOffset&
    get_HangEntryModOffset()
    {
        AssertSanity(THangEntryModOffset);
        return (*(ptr_HangEntryModOffset()));
    }
    const HangEntryModOffset&
    get_HangEntryModOffset() const
    {
        AssertSanity(THangEntryModOffset);
        return (*(constptr_HangEntryModOffset()));
    }
    operator HangEntryModOffset&()
    {
        return get_HangEntryModOffset();
    }
    operator const HangEntryModOffset&() const
    {
        return get_HangEntryModOffset();
    }

    HangEntryProgCounter&
    get_HangEntryProgCounter()
    {
        AssertSanity(THangEntryProgCounter);
        return (*(ptr_HangEntryProgCounter()));
    }
    const HangEntryProgCounter&
    get_HangEntryProgCounter() const
    {
        AssertSanity(THangEntryProgCounter);
        return (*(constptr_HangEntryProgCounter()));
    }
    operator HangEntryProgCounter&()
    {
        return get_HangEntryProgCounter();
    }
    operator const HangEntryProgCounter&() const
    {
        return get_HangEntryProgCounter();
    }

    HangEntryContent&
    get_HangEntryContent()
    {
        AssertSanity(THangEntryContent);
        return (*(ptr_HangEntryContent()));
    }
    const HangEntryContent&
    get_HangEntryContent() const
    {
        AssertSanity(THangEntryContent);
        return (*(constptr_HangEntryContent()));
    }
    operator HangEntryContent&()
    {
        return get_HangEntryContent();
    }
    operator const HangEntryContent&() const
    {
        return get_HangEntryContent();
    }

    HangEntryJit&
    get_HangEntryJit()
    {
        AssertSanity(THangEntryJit);
        return (*(ptr_HangEntryJit()));
    }
    const HangEntryJit&
    get_HangEntryJit() const
    {
        AssertSanity(THangEntryJit);
        return (*(constptr_HangEntryJit()));
    }
    operator HangEntryJit&()
    {
        return get_HangEntryJit();
    }
    operator const HangEntryJit&() const
    {
        return get_HangEntryJit();
    }

    HangEntryWasm&
    get_HangEntryWasm()
    {
        AssertSanity(THangEntryWasm);
        return (*(ptr_HangEntryWasm()));
    }
    const HangEntryWasm&
    get_HangEntryWasm() const
    {
        AssertSanity(THangEntryWasm);
        return (*(constptr_HangEntryWasm()));
    }
    operator HangEntryWasm&()
    {
        return get_HangEntryWasm();
    }
    operator const HangEntryWasm&() const
    {
        return get_HangEntryWasm();
    }

    HangEntryChromeScript&
    get_HangEntryChromeScript()
    {
        AssertSanity(THangEntryChromeScript);
        return (*(ptr_HangEntryChromeScript()));
    }
    const HangEntryChromeScript&
    get_HangEntryChromeScript() const
    {
        AssertSanity(THangEntryChromeScript);
        return (*(constptr_HangEntryChromeScript()));
    }
    operator HangEntryChromeScript&()
    {
        return get_HangEntryChromeScript();
    }
    operator const HangEntryChromeScript&() const
    {
        return get_HangEntryChromeScript();
    }

    HangEntrySuppressed&
    get_HangEntrySuppressed()
    {
        AssertSanity(THangEntrySuppressed);
        return (*(ptr_HangEntrySuppressed()));
    }
    const HangEntrySuppressed&
    get_HangEntrySuppressed() const
    {
        AssertSanity(THangEntrySuppressed);
        return (*(constptr_HangEntrySuppressed()));
    }
    operator HangEntrySuppressed&()
    {
        return get_HangEntrySuppressed();
    }
    operator const HangEntrySuppressed&() const
    {
        return get_HangEntrySuppressed();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangEntry>
{
    typedef mozilla::HangEntry paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangModule|
//
namespace mozilla {
class HangModule final
{
private:

public:
    MOZ_IMPLICIT HangModule() :
        name_(),
        breakpadId_()
    {
    }

    MOZ_IMPLICIT HangModule(
            const nsString& _name,
            const nsCString& _breakpadId) :
        name_(_name),
        breakpadId_(_breakpadId)
    {
    }

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

    nsCString&
    breakpadId()
    {
        return breakpadId_;
    }
    const nsCString&
    breakpadId() const
    {
        return breakpadId_;
    }

private:
    nsString name_;
    nsCString breakpadId_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangModule>
{
    typedef mozilla::HangModule paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangStack|
//
namespace mozilla {
class HangStack final
{
private:
    typedef mozilla::HangEntry HangEntry;
    typedef mozilla::HangModule HangModule;

public:
    MOZ_IMPLICIT HangStack() :
        stack_(),
        strbuffer_(),
        modules_()
    {
    }

    MOZ_IMPLICIT HangStack(
            const nsTArray<HangEntry>& _stack,
            const nsTArray<int8_t>& _strbuffer,
            const nsTArray<HangModule>& _modules) :
        stack_(_stack),
        strbuffer_(_strbuffer),
        modules_(_modules)
    {
    }

    nsTArray<HangEntry>&
    stack()
    {
        return stack_;
    }
    const nsTArray<HangEntry>&
    stack() const
    {
        return stack_;
    }

    nsTArray<int8_t>&
    strbuffer()
    {
        return strbuffer_;
    }
    const nsTArray<int8_t>&
    strbuffer() const
    {
        return strbuffer_;
    }

    nsTArray<HangModule>&
    modules()
    {
        return modules_;
    }
    const nsTArray<HangModule>&
    modules() const
    {
        return modules_;
    }

private:
    CopyableTArray<HangEntry> stack_;
    CopyableTArray<int8_t> strbuffer_;
    CopyableTArray<HangModule> modules_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangStack>
{
    typedef mozilla::HangStack paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangAnnotation|
//
namespace mozilla {
class HangAnnotation final
{
private:

public:
    MOZ_IMPLICIT HangAnnotation() :
        name_(),
        value_()
    {
    }

    MOZ_IMPLICIT HangAnnotation(
            const nsString& _name,
            const nsString& _value) :
        name_(_name),
        value_(_value)
    {
    }

    nsString&
    name()
    {
        return name_;
    }
    const nsString&
    name() const
    {
        return name_;
    }

    nsString&
    value()
    {
        return value_;
    }
    const nsString&
    value() const
    {
        return value_;
    }

private:
    nsString name_;
    nsString value_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangAnnotation>
{
    typedef mozilla::HangAnnotation paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct HangDetails|
//
namespace mozilla {
class HangDetails final
{
private:
    typedef mozilla::TimeDuration TimeDuration;
    typedef mozilla::HangStack HangStack;
    typedef mozilla::HangAnnotation HangAnnotation;

public:
    MOZ_IMPLICIT HangDetails() :
        duration_(),
        process_(),
        remoteType_(),
        threadName_(),
        runnableName_(),
        stack_(),
        annotations_()
    {
    }

    MOZ_IMPLICIT HangDetails(
            const TimeDuration& _duration,
            const nsCString& _process,
            const nsCString& _remoteType,
            const nsCString& _threadName,
            const nsCString& _runnableName,
            const HangStack& _stack,
            const nsTArray<HangAnnotation>& _annotations) :
        duration_(_duration),
        process_(_process),
        remoteType_(_remoteType),
        threadName_(_threadName),
        runnableName_(_runnableName),
        stack_(_stack),
        annotations_(_annotations)
    {
    }

    TimeDuration&
    duration()
    {
        return duration_;
    }
    const TimeDuration&
    duration() const
    {
        return duration_;
    }

    nsCString&
    process()
    {
        return process_;
    }
    const nsCString&
    process() const
    {
        return process_;
    }

    nsCString&
    remoteType()
    {
        return remoteType_;
    }
    const nsCString&
    remoteType() const
    {
        return remoteType_;
    }

    nsCString&
    threadName()
    {
        return threadName_;
    }
    const nsCString&
    threadName() const
    {
        return threadName_;
    }

    nsCString&
    runnableName()
    {
        return runnableName_;
    }
    const nsCString&
    runnableName() const
    {
        return runnableName_;
    }

    HangStack&
    stack()
    {
        return stack_;
    }
    const HangStack&
    stack() const
    {
        return stack_;
    }

    nsTArray<HangAnnotation>&
    annotations()
    {
        return annotations_;
    }
    const nsTArray<HangAnnotation>&
    annotations() const
    {
        return annotations_;
    }

private:
    TimeDuration duration_;
    nsCString process_;
    nsCString remoteType_;
    nsCString threadName_;
    nsCString runnableName_;
    HangStack stack_;
    CopyableTArray<HangAnnotation> annotations_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::HangDetails>
{
    typedef mozilla::HangDetails paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef HangTypes_h
