//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PProfilerParent_h
#define PProfilerParent_h

#include "mozilla/PProfiler.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
class nsIFile;

namespace mozilla {


class PProfilerParent :
    public mozilla::ipc::IToplevelProtocol
{
private:
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ProfileBufferChunkManagerUpdate ProfileBufferChunkManagerUpdate;
    typedef mozilla::ProfileBufferChunkMetadata ProfileBufferChunkMetadata;
    typedef mozilla::ProfilerInitParams ProfilerInitParams;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::TimeStamp TimeStamp;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;

public:
    typedef MozPromise<ProfileBufferChunkManagerUpdate, ResponseRejectReason, true> AwaitNextChunkManagerUpdatePromise;
    typedef MozPromise<Shmem, ResponseRejectReason, true> GatherProfilePromise;

protected:
    void
    ProcessingError(
            Result aCode,
            const char* aReason) override;
    bool
    ShouldContinueFromReplyTimeout() override;
    void
    EnteredCxxStack() override;
    void
    ExitedCxxStack() override;
    void
    EnteredCall() override;
    void
    ExitedCall() override;

public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PProfilerParent();

    virtual ~PProfilerParent();

public:
    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendStart(const ProfilerInitParams& params);

    [[nodiscard]] bool
    SendEnsureStarted(const ProfilerInitParams& params);

    [[nodiscard]] bool
    SendStop();

    [[nodiscard]] bool
    SendPause();

    [[nodiscard]] bool
    SendResume();

    [[nodiscard]] bool
    SendPauseSampling();

    [[nodiscard]] bool
    SendResumeSampling();

    void
    SendAwaitNextChunkManagerUpdate(
            mozilla::ipc::ResolveCallback<ProfileBufferChunkManagerUpdate>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<AwaitNextChunkManagerUpdatePromise>
    SendAwaitNextChunkManagerUpdate();

    [[nodiscard]] bool
    SendDestroyReleasedChunksAtOrBefore(const TimeStamp& timeStamp);

    void
    SendGatherProfile(
            mozilla::ipc::ResolveCallback<Shmem>&& aResolve,
            mozilla::ipc::RejectCallback&& aReject);

    [[nodiscard]] RefPtr<GatherProfilePromise>
    SendGatherProfile();

    [[nodiscard]] bool
    SendClearAllPages();

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

    void
    OnChannelClose() override;

    void
    OnChannelError() override;

private:
    void
    ClearSubtree();

};


} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::PProfilerParent*>
{
    typedef mozilla::PProfilerParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PProfilerParent_h
