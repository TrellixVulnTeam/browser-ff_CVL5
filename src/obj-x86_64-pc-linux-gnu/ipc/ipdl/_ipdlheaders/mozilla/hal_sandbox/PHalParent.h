//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHalParent_h
#define PHalParent_h

#include "mozilla/hal_sandbox/PHal.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/HalScreenConfiguration.h"
#include "mozilla/HalSensor.h"
#include "mozilla/HalTypes.h"
#include "nsRect.h"
#include "prtime.h"

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {


class PHalParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PContentParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef base::ProcessId ProcessId;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;

protected:
    virtual mozilla::ipc::IPCResult
    RecvVibrate(
            nsTArray<uint32_t>&& pattern,
            nsTArray<uint64_t>&& id,
            PBrowserParent* browser) = 0;
    virtual mozilla::ipc::IPCResult
    RecvCancelVibrate(
            nsTArray<uint64_t>&& id,
            PBrowserParent* browser) = 0;
    virtual mozilla::ipc::IPCResult
    RecvEnableBatteryNotifications() = 0;
    virtual mozilla::ipc::IPCResult
    RecvDisableBatteryNotifications() = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetCurrentBatteryInformation(BatteryInformation* aBatteryInfo) = 0;
    virtual mozilla::ipc::IPCResult
    RecvEnableNetworkNotifications() = 0;
    virtual mozilla::ipc::IPCResult
    RecvDisableNetworkNotifications() = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetCurrentNetworkInformation(NetworkInformation* aNetworkInfo) = 0;
    virtual mozilla::ipc::IPCResult
    RecvModifyWakeLock(
            const nsString& aTopic,
            const WakeLockControl& aLockAdjust,
            const WakeLockControl& aHiddenAdjust,
            const uint64_t& aProcessID) = 0;
    virtual mozilla::ipc::IPCResult
    RecvEnableWakeLockNotifications() = 0;
    virtual mozilla::ipc::IPCResult
    RecvDisableWakeLockNotifications() = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetWakeLockInfo(
            const nsString& aTopic,
            WakeLockInformation* aWakeLockInfo) = 0;
    virtual mozilla::ipc::IPCResult
    RecvEnableScreenConfigurationNotifications() = 0;
    virtual mozilla::ipc::IPCResult
    RecvDisableScreenConfigurationNotifications() = 0;
    virtual mozilla::ipc::IPCResult
    RecvLockScreenOrientation(
            const ScreenOrientation& aOrientation,
            bool* allowed) = 0;
    virtual mozilla::ipc::IPCResult
    RecvUnlockScreenOrientation() = 0;
    virtual mozilla::ipc::IPCResult
    RecvEnableSensorNotifications(const SensorType& aSensor) = 0;
    virtual mozilla::ipc::IPCResult
    RecvDisableSensorNotifications(const SensorType& aSensor) = 0;
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PHalParent();

    virtual ~PHalParent();

public:
    PContentParent*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendNotifyBatteryChange(const BatteryInformation& aBatteryInfo);

    [[nodiscard]] bool
    SendNotifyNetworkChange(const NetworkInformation& aNetworkInfo);

    [[nodiscard]] bool
    SendNotifyWakeLockChange(const WakeLockInformation& aWakeLockInfo);

    [[nodiscard]] bool
    SendNotifyScreenConfigurationChange(const ScreenConfiguration& aScreenOrientation);

    [[nodiscard]] bool
    SendNotifySensorChange(const SensorData& aSensorData);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace hal_sandbox
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::hal_sandbox::PHalParent*>
{
    typedef mozilla::hal_sandbox::PHalParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PHalParent_h
