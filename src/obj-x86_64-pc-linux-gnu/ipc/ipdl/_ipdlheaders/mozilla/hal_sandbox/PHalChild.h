//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHalChild_h
#define PHalChild_h

#include "mozilla/hal_sandbox/PHal.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/HalScreenConfiguration.h"
#include "mozilla/HalSensor.h"
#include "mozilla/HalTypes.h"
#include "nsRect.h"
#include "prtime.h"

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBrowserChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBrowserParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace hal_sandbox {


class PHalChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::dom::PContentChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::hal::BatteryInformation BatteryInformation;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::hal::NetworkInformation NetworkInformation;
    typedef base::ProcessId ProcessId;
    typedef mozilla::hal::ProcessPriority ProcessPriority;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::hal::ScreenConfiguration ScreenConfiguration;
    typedef hal::ScreenOrientation ScreenOrientation;
    typedef mozilla::hal::SensorData SensorData;
    typedef mozilla::hal::SensorType SensorType;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::hal::WakeLockControl WakeLockControl;
    typedef mozilla::hal::WakeLockInformation WakeLockInformation;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PBrowserChild PBrowserChild;
    typedef mozilla::dom::PBrowserParent PBrowserParent;

protected:
    virtual mozilla::ipc::IPCResult
    RecvNotifyBatteryChange(const BatteryInformation& aBatteryInfo) = 0;
    virtual mozilla::ipc::IPCResult
    RecvNotifyNetworkChange(const NetworkInformation& aNetworkInfo) = 0;
    virtual mozilla::ipc::IPCResult
    RecvNotifyWakeLockChange(const WakeLockInformation& aWakeLockInfo) = 0;
    virtual mozilla::ipc::IPCResult
    RecvNotifyScreenConfigurationChange(const ScreenConfiguration& aScreenOrientation) = 0;
    virtual mozilla::ipc::IPCResult
    RecvNotifySensorChange(const SensorData& aSensorData) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PHalChild();

    virtual ~PHalChild();

public:
    PContentChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendVibrate(
            const nsTArray<uint32_t>& pattern,
            const nsTArray<uint64_t>& id,
            PBrowserChild* browser);

    bool
    SendCancelVibrate(
            const nsTArray<uint64_t>& id,
            PBrowserChild* browser);

    bool
    SendEnableBatteryNotifications();

    bool
    SendDisableBatteryNotifications();

    bool
    SendGetCurrentBatteryInformation(BatteryInformation* aBatteryInfo);

    bool
    SendEnableNetworkNotifications();

    bool
    SendDisableNetworkNotifications();

    bool
    SendGetCurrentNetworkInformation(NetworkInformation* aNetworkInfo);

    bool
    SendModifyWakeLock(
            const nsString& aTopic,
            const WakeLockControl& aLockAdjust,
            const WakeLockControl& aHiddenAdjust,
            const uint64_t& aProcessID);

    bool
    SendEnableWakeLockNotifications();

    bool
    SendDisableWakeLockNotifications();

    bool
    SendGetWakeLockInfo(
            const nsString& aTopic,
            WakeLockInformation* aWakeLockInfo);

    bool
    SendEnableScreenConfigurationNotifications();

    bool
    SendDisableScreenConfigurationNotifications();

    bool
    SendLockScreenOrientation(
            const ScreenOrientation& aOrientation,
            bool* allowed);

    bool
    SendUnlockScreenOrientation();

    bool
    SendEnableSensorNotifications(const SensorType& aSensor);

    bool
    SendDisableSensorNotifications(const SensorType& aSensor);

    static bool
    Send__delete__(PHalChild* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace hal_sandbox
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::hal_sandbox::PHalChild*>
{
    typedef mozilla::hal_sandbox::PHalChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PHalChild_h
