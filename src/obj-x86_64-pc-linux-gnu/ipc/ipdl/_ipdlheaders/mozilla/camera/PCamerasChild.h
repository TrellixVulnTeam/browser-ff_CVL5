//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCamerasChild_h
#define PCamerasChild_h

#include "mozilla/camera/PCameras.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/media/CamerasTypes.h"

namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace camera {


class PCamerasChild :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::ipc::PBackgroundChild;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::camera::CaptureEngine CaptureEngine;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::camera::VideoCaptureCapability VideoCaptureCapability;
    typedef mozilla::camera::VideoFrameProperties VideoFrameProperties;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;

protected:
    virtual mozilla::ipc::IPCResult
    RecvDeliverFrame(
            const CaptureEngine& capEngine,
            const int& streamId,
            Shmem&& buffer,
            const VideoFrameProperties& props) = 0;
    virtual mozilla::ipc::IPCResult
    RecvDeviceChange() = 0;
    virtual mozilla::ipc::IPCResult
    RecvReplyNumberOfCaptureDevices(const int& numdev) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReplyNumberOfCapabilities(const int& numdev) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReplyAllocateCaptureDevice(const int& numdev) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReplyGetCaptureCapability(const VideoCaptureCapability& cap) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReplyGetCaptureDevice(
            const nsCString& device_name,
            const nsCString& device_id,
            const bool& scary) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReplyFailure() = 0;
    virtual mozilla::ipc::IPCResult
    RecvReplySuccess() = 0;
    virtual mozilla::ipc::IPCResult
    Recv__delete__();
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PCamerasChild();

    virtual ~PCamerasChild();

public:
    PBackgroundChild*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    bool
    SendNumberOfCaptureDevices(const CaptureEngine& engine);

    bool
    SendNumberOfCapabilities(
            const CaptureEngine& engine,
            const nsCString& deviceUniqueIdUTF8);

    bool
    SendGetCaptureCapability(
            const CaptureEngine& engine,
            const nsCString& unique_idUTF8,
            const int& capability_number);

    bool
    SendGetCaptureDevice(
            const CaptureEngine& engine,
            const int& num);

    bool
    SendAllocateCaptureDevice(
            const CaptureEngine& engine,
            const nsCString& unique_idUTF8,
            const uint64_t& windowID);

    bool
    SendReleaseCaptureDevice(
            const CaptureEngine& engine,
            const int& numdev);

    bool
    SendStartCapture(
            const CaptureEngine& engine,
            const int& numdev,
            const VideoCaptureCapability& capability);

    bool
    SendFocusOnSelectedSource(
            const CaptureEngine& engine,
            const int& numdev);

    bool
    SendStopCapture(
            const CaptureEngine& engine,
            const int& numdev);

    bool
    SendReleaseFrame(Shmem&& s);

    bool
    SendAllDone();

    bool
    SendEnsureInitialized(const CaptureEngine& engine);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace camera
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::camera::PCamerasChild*>
{
    typedef mozilla::camera::PCamerasChild* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PCamerasChild_h
