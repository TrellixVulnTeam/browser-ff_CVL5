//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCamerasParent_h
#define PCamerasParent_h

#include "mozilla/camera/PCameras.h"
#ifdef DEBUG
#include "prenv.h"
#endif  // DEBUG

#include "mozilla/Tainting.h"
#include "mozilla/ipc/MessageChannel.h"
#include "mozilla/ipc/ProtocolUtils.h"
// Headers for things that cannot be forward declared
#include "mozilla/media/CamerasTypes.h"

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace camera {


class PCamerasParent :
    public mozilla::ipc::IProtocol
{
private:
    friend class mozilla::ipc::PBackgroundParent;
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::ByteBuf ByteBuf;
    typedef mozilla::ipc::CSPInfo CSPInfo;
    typedef mozilla::camera::CaptureEngine CaptureEngine;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentSecurityPolicy ContentSecurityPolicy;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    template<class FooSide> using ManagedEndpoint = mozilla::ipc::ManagedEndpoint<FooSide>;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::OriginAttributes OriginAttributes;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::ResponseRejectReason ResponseRejectReason;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    template<class T> using UniquePtr = mozilla::UniquePtr<T>;
    typedef mozilla::camera::VideoCaptureCapability VideoCaptureCapability;
    typedef mozilla::camera::VideoFrameProperties VideoFrameProperties;
    typedef mozilla::void_t void_t;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;

protected:
    virtual mozilla::ipc::IPCResult
    RecvNumberOfCaptureDevices(const CaptureEngine& engine) = 0;
    virtual mozilla::ipc::IPCResult
    RecvNumberOfCapabilities(
            const CaptureEngine& engine,
            const nsCString& deviceUniqueIdUTF8) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetCaptureCapability(
            const CaptureEngine& engine,
            const nsCString& unique_idUTF8,
            const int& capability_number) = 0;
    virtual mozilla::ipc::IPCResult
    RecvGetCaptureDevice(
            const CaptureEngine& engine,
            const int& num) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAllocateCaptureDevice(
            const CaptureEngine& engine,
            const nsCString& unique_idUTF8,
            const uint64_t& windowID) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReleaseCaptureDevice(
            const CaptureEngine& engine,
            const int& numdev) = 0;
    virtual mozilla::ipc::IPCResult
    RecvStartCapture(
            const CaptureEngine& engine,
            const int& numdev,
            const VideoCaptureCapability& capability) = 0;
    virtual mozilla::ipc::IPCResult
    RecvFocusOnSelectedSource(
            const CaptureEngine& engine,
            const int& numdev) = 0;
    virtual mozilla::ipc::IPCResult
    RecvStopCapture(
            const CaptureEngine& engine,
            const int& numdev) = 0;
    virtual mozilla::ipc::IPCResult
    RecvReleaseFrame(Shmem&& s) = 0;
    virtual mozilla::ipc::IPCResult
    RecvAllDone() = 0;
    virtual mozilla::ipc::IPCResult
    RecvEnsureInitialized(const CaptureEngine& engine) = 0;
public:
    typedef mozilla::ipc::IProtocol IProtocol;
    typedef IPC::Message Message;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;

public:
    MOZ_IMPLICIT PCamerasParent();

    virtual ~PCamerasParent();

public:
    PBackgroundParent*
    Manager() const;

    void
    AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const override;

    [[nodiscard]] bool
    SendDeliverFrame(
            const CaptureEngine& capEngine,
            const int& streamId,
            Shmem&& buffer,
            const VideoFrameProperties& props);

    [[nodiscard]] bool
    SendDeviceChange();

    [[nodiscard]] bool
    SendReplyNumberOfCaptureDevices(const int& numdev);

    [[nodiscard]] bool
    SendReplyNumberOfCapabilities(const int& numdev);

    [[nodiscard]] bool
    SendReplyAllocateCaptureDevice(const int& numdev);

    [[nodiscard]] bool
    SendReplyGetCaptureCapability(const VideoCaptureCapability& cap);

    [[nodiscard]] bool
    SendReplyGetCaptureDevice(
            const nsCString& device_name,
            const nsCString& device_id,
            const bool& scary);

    [[nodiscard]] bool
    SendReplyFailure();

    [[nodiscard]] bool
    SendReplySuccess();

    [[nodiscard]] static bool
    Send__delete__(PCamerasParent* actor);

    void
    RemoveManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;
    void
    DeallocManagee(
            int32_t aProtocolId,
            IProtocol* aListener) override;

    Result
    OnMessageReceived(const Message& msg__) override;

    Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__) override;

    Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__) override;

private:
    void
    ClearSubtree();

};


} // namespace camera
} // namespace mozilla
namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::camera::PCamerasParent*>
{
    typedef mozilla::camera::PCamerasParent* paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

#endif // ifndef PCamerasParent_h
