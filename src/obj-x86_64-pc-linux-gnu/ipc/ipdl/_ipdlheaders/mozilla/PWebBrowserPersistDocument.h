//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebBrowserPersistDocument_h
#define PWebBrowserPersistDocument_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "mozilla/RefPtr.h"
#include "nsString.h"
#include "nsTArray.h"
#include "nsTHashtable.h"
#include "mozilla/MozPromise.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/UniquePtr.h"
#include "mozilla/ipc/ByteBuf.h"
#include "mozilla/ipc/FileDescriptor.h"
#include "mozilla/ipc/ProtocolUtilsFwd.h"
#include "mozilla/ipc/Shmem.h"

// Headers for typedefs
#include "nsIReferrerInfo.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"
#include "mozilla/ipc/IPCStream.h"
#include "mozilla/net/NeckoChannelParams.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebBrowserPersistDocumentAttrs|
//
namespace mozilla {
class WebBrowserPersistDocumentAttrs final
{
private:
    typedef mozilla::net::CookieJarSettingsArgs CookieJarSettingsArgs;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;

public:
    MOZ_IMPLICIT WebBrowserPersistDocumentAttrs() :
        isPrivate_(),
        documentURI_(),
        baseURI_(),
        contentType_(),
        characterSet_(),
        title_(),
        referrerInfo_(),
        cookieJarSettings_(),
        contentDisposition_(),
        principal_(),
        sessionHistoryCacheKey_(),
        persistFlags_()
    {
    }

    MOZ_IMPLICIT WebBrowserPersistDocumentAttrs(
            const bool& _isPrivate,
            const nsCString& _documentURI,
            const nsCString& _baseURI,
            const nsCString& _contentType,
            const nsCString& _characterSet,
            const nsString& _title,
            nsIReferrerInfo* _referrerInfo,
            const CookieJarSettingsArgs& _cookieJarSettings,
            const nsString& _contentDisposition,
            const uint32_t& _sessionHistoryCacheKey,
            const uint32_t& _persistFlags,
            const PrincipalInfo& _principal) :
        isPrivate_(_isPrivate),
        documentURI_(_documentURI),
        baseURI_(_baseURI),
        contentType_(_contentType),
        characterSet_(_characterSet),
        title_(_title),
        referrerInfo_(_referrerInfo),
        cookieJarSettings_(_cookieJarSettings),
        contentDisposition_(_contentDisposition),
        principal_(_principal),
        sessionHistoryCacheKey_(_sessionHistoryCacheKey),
        persistFlags_(_persistFlags)
    {
    }

    bool&
    isPrivate()
    {
        return isPrivate_;
    }
    const bool&
    isPrivate() const
    {
        return isPrivate_;
    }

    nsCString&
    documentURI()
    {
        return documentURI_;
    }
    const nsCString&
    documentURI() const
    {
        return documentURI_;
    }

    nsCString&
    baseURI()
    {
        return baseURI_;
    }
    const nsCString&
    baseURI() const
    {
        return baseURI_;
    }

    nsCString&
    contentType()
    {
        return contentType_;
    }
    const nsCString&
    contentType() const
    {
        return contentType_;
    }

    nsCString&
    characterSet()
    {
        return characterSet_;
    }
    const nsCString&
    characterSet() const
    {
        return characterSet_;
    }

    nsString&
    title()
    {
        return title_;
    }
    const nsString&
    title() const
    {
        return title_;
    }

    RefPtr<nsIReferrerInfo>&
    referrerInfo()
    {
        return referrerInfo_;
    }
    nsIReferrerInfo*
    referrerInfo() const
    {
        return referrerInfo_;
    }

    CookieJarSettingsArgs&
    cookieJarSettings()
    {
        return cookieJarSettings_;
    }
    const CookieJarSettingsArgs&
    cookieJarSettings() const
    {
        return cookieJarSettings_;
    }

    nsString&
    contentDisposition()
    {
        return contentDisposition_;
    }
    const nsString&
    contentDisposition() const
    {
        return contentDisposition_;
    }

    uint32_t&
    sessionHistoryCacheKey()
    {
        return sessionHistoryCacheKey_;
    }
    const uint32_t&
    sessionHistoryCacheKey() const
    {
        return sessionHistoryCacheKey_;
    }

    uint32_t&
    persistFlags()
    {
        return persistFlags_;
    }
    const uint32_t&
    persistFlags() const
    {
        return persistFlags_;
    }

    PrincipalInfo&
    principal()
    {
        return principal_;
    }
    const PrincipalInfo&
    principal() const
    {
        return principal_;
    }

private:
    void
    StaticAssertions() const;
    bool isPrivate_;
    nsCString documentURI_;
    nsCString baseURI_;
    nsCString contentType_;
    nsCString characterSet_;
    nsString title_;
    RefPtr<nsIReferrerInfo> referrerInfo_;
    CookieJarSettingsArgs cookieJarSettings_;
    nsString contentDisposition_;
    PrincipalInfo principal_;
    uint32_t sessionHistoryCacheKey_;
    uint32_t persistFlags_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::WebBrowserPersistDocumentAttrs>
{
    typedef mozilla::WebBrowserPersistDocumentAttrs paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebBrowserPersistURIMapEntry|
//
namespace mozilla {
class WebBrowserPersistURIMapEntry final
{
private:

public:
    MOZ_IMPLICIT WebBrowserPersistURIMapEntry() :
        mapFrom_(),
        mapTo_()
    {
    }

    MOZ_IMPLICIT WebBrowserPersistURIMapEntry(
            const nsCString& _mapFrom,
            const nsCString& _mapTo) :
        mapFrom_(_mapFrom),
        mapTo_(_mapTo)
    {
    }

    nsCString&
    mapFrom()
    {
        return mapFrom_;
    }
    const nsCString&
    mapFrom() const
    {
        return mapFrom_;
    }

    nsCString&
    mapTo()
    {
        return mapTo_;
    }
    const nsCString&
    mapTo() const
    {
        return mapTo_;
    }

private:
    nsCString mapFrom_;
    nsCString mapTo_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::WebBrowserPersistURIMapEntry>
{
    typedef mozilla::WebBrowserPersistURIMapEntry paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct WebBrowserPersistURIMap|
//
namespace mozilla {
class WebBrowserPersistURIMap final
{
private:
    typedef mozilla::WebBrowserPersistURIMapEntry WebBrowserPersistURIMapEntry;

public:
    MOZ_IMPLICIT WebBrowserPersistURIMap() :
        mapURIs_(),
        targetBaseURI_()
    {
    }

    MOZ_IMPLICIT WebBrowserPersistURIMap(
            const nsTArray<WebBrowserPersistURIMapEntry>& _mapURIs,
            const nsCString& _targetBaseURI) :
        mapURIs_(_mapURIs),
        targetBaseURI_(_targetBaseURI)
    {
    }

    nsTArray<WebBrowserPersistURIMapEntry>&
    mapURIs()
    {
        return mapURIs_;
    }
    const nsTArray<WebBrowserPersistURIMapEntry>&
    mapURIs() const
    {
        return mapURIs_;
    }

    nsCString&
    targetBaseURI()
    {
        return targetBaseURI_;
    }
    const nsCString&
    targetBaseURI() const
    {
        return targetBaseURI_;
    }

private:
    CopyableTArray<WebBrowserPersistURIMapEntry> mapURIs_;
    nsCString targetBaseURI_;
};
} // namespace mozilla

namespace mozilla {
namespace ipc {
template<>
struct IPDLParamTraits <mozilla::WebBrowserPersistURIMap>
{
    typedef mozilla::WebBrowserPersistURIMap paramType;
    static void
    Write(
            IPC::Message* aMsg,
            mozilla::ipc::IProtocol* aActor,
            const paramType& aVar);
    static bool
    Read(
            const IPC::Message* aMsg,
            PickleIterator* aIter,
            mozilla::ipc::IProtocol* aActor,
            paramType* aVar);
};
} // namespace ipc
} // namespace mozilla

namespace mozilla {
class PWebBrowserPersistDocumentParent;
} // namespace mozilla
namespace mozilla {
class PWebBrowserPersistDocumentChild;
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PWebBrowserPersistDocumentChild and PWebBrowserPersistDocumentParent
//
namespace mozilla {
namespace PWebBrowserPersistDocument {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::PWebBrowserPersistDocumentParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::PWebBrowserPersistDocumentChild>* aChild);

enum MessageType {
    PWebBrowserPersistDocumentStart = PWebBrowserPersistDocumentMsgStart << 16,
    Msg_Attributes__ID,
    Msg_InitFailure__ID,
    Msg_SetPersistFlags__ID,
    Msg_PWebBrowserPersistResourcesConstructor__ID,
    Reply_PWebBrowserPersistResourcesConstructor__ID,
    Msg_PWebBrowserPersistSerializeConstructor__ID,
    Reply_PWebBrowserPersistSerializeConstructor__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PWebBrowserPersistDocumentEnd
};

IPC::Message*
Msg_Attributes(int32_t routingId);

IPC::Message*
Msg_InitFailure(int32_t routingId);

IPC::Message*
Msg_SetPersistFlags(int32_t routingId);

IPC::Message*
Msg_PWebBrowserPersistResourcesConstructor(int32_t routingId);
IPC::Message*
Reply_PWebBrowserPersistResourcesConstructor(int32_t routingId);

IPC::Message*
Msg_PWebBrowserPersistSerializeConstructor(int32_t routingId);
IPC::Message*
Reply_PWebBrowserPersistSerializeConstructor(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PWebBrowserPersistDocument
} // namespace mozilla

#endif // ifndef PWebBrowserPersistDocument_h
