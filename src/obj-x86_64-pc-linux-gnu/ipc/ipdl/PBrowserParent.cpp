//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBrowserParent.h"
#include "ipc/nsGUIEventIPC.h"
#include "mozilla/AntiTrackingIPCUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/LayoutMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/BrowserParent.h"
#include "mozilla/dom/CSPMessageUtils.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/MessagePort.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/dom/SessionStoreMessageUtils.h"
#include "mozilla/dom/TabMessageTypes.h"
#include "mozilla/dom/TabMessageUtils.h"
#include "mozilla/dom/ipc/StructuredCloneData.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/ipc/TransportSecurityInfoUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "mozilla/layers/ZoomConstraints.h"
#include "mozilla/widget/IMEData.h"
#include "mozilla/widget/WidgetMessageUtils.h"
#include "nsDocShellLoadState.h"
#include "nsRect.h"

#include "mozilla/dom/PColorPickerParent.h"
#include "mozilla/dom/PContentParent.h"
#include "mozilla/a11y/PDocAccessibleParent.h"
#include "mozilla/dom/PFilePickerParent.h"
#include "mozilla/plugins/PPluginWidgetParent.h"
#include "mozilla/layout/PRemotePrintJobParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/dom/PPaymentRequestParent.h"
#include "mozilla/dom/PWindowGlobalParent.h"
#include "mozilla/dom/PBrowserBridgeParent.h"
#include "mozilla/dom/PVsyncParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBrowserParent::RecvPDocAccessibleConstructor(
        PDocAccessibleParent* actor,
        PDocAccessibleParent* aParentDoc,
        const uint64_t& aParentAcc,
        const uint32_t& aMsaaID,
        const IAccessibleHolder& aDocCOMProxy) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBrowserParent::RecvPPluginWidgetConstructor(PPluginWidgetParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBrowserParent::RecvPPaymentRequestConstructor(PPaymentRequestParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBrowserParent::RecvPVsyncConstructor(PVsyncParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBrowserParent::RecvPColorPickerConstructor(
        PColorPickerParent* actor,
        const nsString& title,
        const nsString& initialColor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBrowserParent::RecvPFilePickerConstructor(
        PFilePickerParent* actor,
        const nsString& aTitle,
        const int16_t& aMode) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBrowserParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBrowserParent::PBrowserParent() :
    mozilla::ipc::IProtocol(PBrowserMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PBrowserParent);
}

PBrowserParent::~PBrowserParent()
{
    MOZ_COUNT_DTOR(PBrowserParent);
}

auto PBrowserParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PBrowserParent::ManagedPColorPickerParent(nsTArray<PColorPickerParent*>& aArr) const -> void
{
    mManagedPColorPickerParent.ToArray(aArr);
}

auto PBrowserParent::ManagedPColorPickerParent() const -> const ManagedContainer<PColorPickerParent>&
{
    return mManagedPColorPickerParent;
}

auto PBrowserParent::ManagedPDocAccessibleParent(nsTArray<PDocAccessibleParent*>& aArr) const -> void
{
    mManagedPDocAccessibleParent.ToArray(aArr);
}

auto PBrowserParent::ManagedPDocAccessibleParent() const -> const ManagedContainer<PDocAccessibleParent>&
{
    return mManagedPDocAccessibleParent;
}

auto PBrowserParent::ManagedPFilePickerParent(nsTArray<PFilePickerParent*>& aArr) const -> void
{
    mManagedPFilePickerParent.ToArray(aArr);
}

auto PBrowserParent::ManagedPFilePickerParent() const -> const ManagedContainer<PFilePickerParent>&
{
    return mManagedPFilePickerParent;
}

auto PBrowserParent::ManagedPPluginWidgetParent(nsTArray<PPluginWidgetParent*>& aArr) const -> void
{
    mManagedPPluginWidgetParent.ToArray(aArr);
}

auto PBrowserParent::ManagedPPluginWidgetParent() const -> const ManagedContainer<PPluginWidgetParent>&
{
    return mManagedPPluginWidgetParent;
}

auto PBrowserParent::ManagedPPaymentRequestParent(nsTArray<PPaymentRequestParent*>& aArr) const -> void
{
    mManagedPPaymentRequestParent.ToArray(aArr);
}

auto PBrowserParent::ManagedPPaymentRequestParent() const -> const ManagedContainer<PPaymentRequestParent>&
{
    return mManagedPPaymentRequestParent;
}

auto PBrowserParent::ManagedPWindowGlobalParent(nsTArray<PWindowGlobalParent*>& aArr) const -> void
{
    mManagedPWindowGlobalParent.ToArray(aArr);
}

auto PBrowserParent::ManagedPWindowGlobalParent() const -> const ManagedContainer<PWindowGlobalParent>&
{
    return mManagedPWindowGlobalParent;
}

auto PBrowserParent::ManagedPBrowserBridgeParent(nsTArray<PBrowserBridgeParent*>& aArr) const -> void
{
    mManagedPBrowserBridgeParent.ToArray(aArr);
}

auto PBrowserParent::ManagedPBrowserBridgeParent() const -> const ManagedContainer<PBrowserBridgeParent>&
{
    return mManagedPBrowserBridgeParent;
}

auto PBrowserParent::ManagedPVsyncParent(nsTArray<PVsyncParent*>& aArr) const -> void
{
    mManagedPVsyncParent.ToArray(aArr);
}

auto PBrowserParent::ManagedPVsyncParent() const -> const ManagedContainer<PVsyncParent>&
{
    return mManagedPVsyncParent;
}

auto PBrowserParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPColorPickerParent.Count();
    total += mManagedPDocAccessibleParent.Count();
    total += mManagedPFilePickerParent.Count();
    total += mManagedPPluginWidgetParent.Count();
    total += mManagedPPaymentRequestParent.Count();
    total += mManagedPWindowGlobalParent.Count();
    total += mManagedPBrowserBridgeParent.Count();
    total += mManagedPVsyncParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPColorPickerParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPDocAccessibleParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPFilePickerParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPluginWidgetParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPaymentRequestParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPWindowGlobalParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBrowserBridgeParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPVsyncParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBrowserParent::OpenPColorPickerEndpoint(PColorPickerParent* aActor) -> ManagedEndpoint<PColorPickerChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PColorPickerParent actor");
        return ManagedEndpoint<PColorPickerChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPColorPickerParent.PutEntry(aActor);

    return ManagedEndpoint<PColorPickerChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserParent::BindPColorPickerEndpoint(
        ManagedEndpoint<PColorPickerParent> aEndpoint,
        PColorPickerParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PColorPickerParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPColorPickerParent.PutEntry(aActor);

    return true;
}

auto PBrowserParent::OpenPDocAccessibleEndpoint(PDocAccessibleParent* aActor) -> ManagedEndpoint<PDocAccessibleChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PDocAccessibleParent actor");
        return ManagedEndpoint<PDocAccessibleChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPDocAccessibleParent.PutEntry(aActor);

    return ManagedEndpoint<PDocAccessibleChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserParent::BindPDocAccessibleEndpoint(
        ManagedEndpoint<PDocAccessibleParent> aEndpoint,
        PDocAccessibleParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PDocAccessibleParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPDocAccessibleParent.PutEntry(aActor);

    return true;
}

auto PBrowserParent::OpenPFilePickerEndpoint(PFilePickerParent* aActor) -> ManagedEndpoint<PFilePickerChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PFilePickerParent actor");
        return ManagedEndpoint<PFilePickerChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPFilePickerParent.PutEntry(aActor);

    return ManagedEndpoint<PFilePickerChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserParent::BindPFilePickerEndpoint(
        ManagedEndpoint<PFilePickerParent> aEndpoint,
        PFilePickerParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PFilePickerParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPFilePickerParent.PutEntry(aActor);

    return true;
}

auto PBrowserParent::OpenPPluginWidgetEndpoint(PPluginWidgetParent* aActor) -> ManagedEndpoint<PPluginWidgetChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginWidgetParent actor");
        return ManagedEndpoint<PPluginWidgetChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginWidgetParent.PutEntry(aActor);

    return ManagedEndpoint<PPluginWidgetChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserParent::BindPPluginWidgetEndpoint(
        ManagedEndpoint<PPluginWidgetParent> aEndpoint,
        PPluginWidgetParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginWidgetParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginWidgetParent.PutEntry(aActor);

    return true;
}

auto PBrowserParent::OpenPPaymentRequestEndpoint(PPaymentRequestParent* aActor) -> ManagedEndpoint<PPaymentRequestChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPaymentRequestParent actor");
        return ManagedEndpoint<PPaymentRequestChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPaymentRequestParent.PutEntry(aActor);

    return ManagedEndpoint<PPaymentRequestChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserParent::BindPPaymentRequestEndpoint(
        ManagedEndpoint<PPaymentRequestParent> aEndpoint,
        PPaymentRequestParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPaymentRequestParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPaymentRequestParent.PutEntry(aActor);

    return true;
}

auto PBrowserParent::OpenPWindowGlobalEndpoint(PWindowGlobalParent* aActor) -> ManagedEndpoint<PWindowGlobalChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWindowGlobalParent actor");
        return ManagedEndpoint<PWindowGlobalChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWindowGlobalParent.PutEntry(aActor);

    return ManagedEndpoint<PWindowGlobalChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserParent::BindPWindowGlobalEndpoint(
        ManagedEndpoint<PWindowGlobalParent> aEndpoint,
        PWindowGlobalParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWindowGlobalParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWindowGlobalParent.PutEntry(aActor);

    return true;
}

auto PBrowserParent::OpenPBrowserBridgeEndpoint(PBrowserBridgeParent* aActor) -> ManagedEndpoint<PBrowserBridgeChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserBridgeParent actor");
        return ManagedEndpoint<PBrowserBridgeChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBrowserBridgeParent.PutEntry(aActor);

    return ManagedEndpoint<PBrowserBridgeChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserParent::BindPBrowserBridgeEndpoint(
        ManagedEndpoint<PBrowserBridgeParent> aEndpoint,
        PBrowserBridgeParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserBridgeParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBrowserBridgeParent.PutEntry(aActor);

    return true;
}

auto PBrowserParent::OpenPVsyncEndpoint(PVsyncParent* aActor) -> ManagedEndpoint<PVsyncChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PVsyncParent actor");
        return ManagedEndpoint<PVsyncChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPVsyncParent.PutEntry(aActor);

    return ManagedEndpoint<PVsyncChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserParent::BindPVsyncEndpoint(
        ManagedEndpoint<PVsyncParent> aEndpoint,
        PVsyncParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PVsyncParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPVsyncParent.PutEntry(aActor);

    return true;
}

auto PBrowserParent::SendAsyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_AsyncMessage(Id());

    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_AsyncMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNativeSynthesisResponse(
        const uint64_t& aObserverId,
        const nsCString& aResponse) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NativeSynthesisResponse(Id());

    WriteIPDLParam(msg__, this, aObserverId);
    // Sentinel = 'aObserverId'
    (msg__)->WriteSentinel(435356759);
    WriteIPDLParam(msg__, this, aResponse);
    // Sentinel = 'aResponse'
    (msg__)->WriteSentinel(301466545);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NativeSynthesisResponse", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendFlushTabState(
        const uint32_t& aFlushId,
        const bool& aIsFinal) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_FlushTabState(Id());

    WriteIPDLParam(msg__, this, aFlushId);
    // Sentinel = 'aFlushId'
    (msg__)->WriteSentinel(231015185);
    WriteIPDLParam(msg__, this, aIsFinal);
    // Sentinel = 'aIsFinal'
    (msg__)->WriteSentinel(221971208);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_FlushTabState", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendUpdateEpoch(const uint32_t& aEpoch) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_UpdateEpoch(Id());

    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateEpoch", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendUpdateSHistory(const bool& aImmediately) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_UpdateSHistory(Id());

    WriteIPDLParam(msg__, this, aImmediately);
    // Sentinel = 'aImmediately'
    (msg__)->WriteSentinel(509674710);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateSHistory", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendCloneDocumentTreeIntoSelf(const MaybeDiscardedBrowsingContext& aBc) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_CloneDocumentTreeIntoSelf(Id());

    WriteIPDLParam(msg__, this, aBc);
    // Sentinel = 'aBc'
    (msg__)->WriteSentinel(34406663);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_CloneDocumentTreeIntoSelf", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendReleaseAllPointerCapture() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ReleaseAllPointerCapture(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ReleaseAllPointerCapture", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendUpdateEffects(const EffectsInfo& aEffects) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_UpdateEffects(Id());

    WriteIPDLParam(msg__, this, aEffects);
    // Sentinel = 'aEffects'
    (msg__)->WriteSentinel(225248034);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateEffects", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendShow(
        const ParentShowInfo& parentInfo,
        const OwnerShowInfo& childInfo) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_Show(Id());

    WriteIPDLParam(msg__, this, parentInfo);
    // Sentinel = 'parentInfo'
    (msg__)->WriteSentinel(380044311);
    WriteIPDLParam(msg__, this, childInfo);
    // Sentinel = 'childInfo'
    (msg__)->WriteSentinel(298320785);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_Show", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendActivate(const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_Activate(Id());

    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_Activate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendDeactivate(const uint64_t& aActionId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_Deactivate(Id());

    WriteIPDLParam(msg__, this, aActionId);
    // Sentinel = 'aActionId'
    (msg__)->WriteSentinel(284164973);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_Deactivate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendScrollbarPreferenceChanged(const ScrollbarPreference& pref) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ScrollbarPreferenceChanged(Id());

    WriteIPDLParam(msg__, this, pref);
    // Sentinel = 'pref'
    (msg__)->WriteSentinel(71958958);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ScrollbarPreferenceChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendInitRendering(
        const TextureFactoryIdentifier& textureFactoryIdentifier,
        const LayersId& layersId,
        const CompositorOptions& compositorOptions,
        const bool& layersConnected) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_InitRendering(Id());

    WriteIPDLParam(msg__, this, textureFactoryIdentifier);
    // Sentinel = 'textureFactoryIdentifier'
    (msg__)->WriteSentinel(2096630253);
    WriteIPDLParam(msg__, this, layersId);
    // Sentinel = 'layersId'
    (msg__)->WriteSentinel(250938174);
    WriteIPDLParam(msg__, this, compositorOptions);
    // Sentinel = 'compositorOptions'
    (msg__)->WriteSentinel(1089275708);
    WriteIPDLParam(msg__, this, layersConnected);
    // Sentinel = 'layersConnected'
    (msg__)->WriteSentinel(829294116);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_InitRendering", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendCompositorOptionsChanged(const CompositorOptions& newOptions) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_CompositorOptionsChanged(Id());

    WriteIPDLParam(msg__, this, newOptions);
    // Sentinel = 'newOptions'
    (msg__)->WriteSentinel(384304183);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_CompositorOptionsChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendLoadURL(
        nsDocShellLoadState* loadState,
        const ParentShowInfo& info) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_LoadURL(Id());

    WriteIPDLParam(msg__, this, loadState);
    // Sentinel = 'loadState'
    (msg__)->WriteSentinel(304808866);
    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_LoadURL", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendResumeLoad(
        const uint64_t& pendingSwitchID,
        const ParentShowInfo& info) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ResumeLoad(Id());

    WriteIPDLParam(msg__, this, pendingSwitchID);
    // Sentinel = 'pendingSwitchID'
    (msg__)->WriteSentinel(822478309);
    WriteIPDLParam(msg__, this, info);
    // Sentinel = 'info'
    (msg__)->WriteSentinel(70058413);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ResumeLoad", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendUpdateDimensions(const DimensionInfo& dimensions) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_UpdateDimensions(Id());

    WriteIPDLParam(msg__, this, dimensions);
    // Sentinel = 'dimensions'
    (msg__)->WriteSentinel(383845434);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateDimensions", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSizeModeChanged(const nsSizeMode& sizeMode) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SizeModeChanged(Id());

    WriteIPDLParam(msg__, this, sizeMode);
    // Sentinel = 'sizeMode'
    (msg__)->WriteSentinel(251790145);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SizeModeChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendChildToParentMatrix(
        const MaybeMatrix4x4& aMatrix,
        const ScreenRect& aRemoteDocumentRect) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ChildToParentMatrix(Id());

    WriteIPDLParam(msg__, this, aMatrix);
    // Sentinel = 'aMatrix'
    (msg__)->WriteSentinel(181469911);
    WriteIPDLParam(msg__, this, aRemoteDocumentRect);
    // Sentinel = 'aRemoteDocumentRect'
    (msg__)->WriteSentinel(1261242267);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ChildToParentMatrix", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSetIsUnderHiddenEmbedderElement(const bool& aIsUnderHiddenEmbedderElement) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetIsUnderHiddenEmbedderElement(Id());

    WriteIPDLParam(msg__, this, aIsUnderHiddenEmbedderElement);
    // Sentinel = 'aIsUnderHiddenEmbedderElement'
    (msg__)->WriteSentinel(2795113290);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetIsUnderHiddenEmbedderElement", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendDynamicToolbarMaxHeightChanged(const ScreenIntCoord& height) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_DynamicToolbarMaxHeightChanged(Id());

    WriteIPDLParam(msg__, this, height);
    // Sentinel = 'height'
    (msg__)->WriteSentinel(143393402);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_DynamicToolbarMaxHeightChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendDynamicToolbarOffsetChanged(const ScreenIntCoord& height) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_DynamicToolbarOffsetChanged(Id());

    WriteIPDLParam(msg__, this, height);
    // Sentinel = 'height'
    (msg__)->WriteSentinel(143393402);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_DynamicToolbarOffsetChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSetKeyboardIndicators(const UIStateChangeType& showFocusRings) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetKeyboardIndicators(Id());

    WriteIPDLParam(msg__, this, showFocusRings);
    // Sentinel = 'showFocusRings'
    (msg__)->WriteSentinel(727320005);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetKeyboardIndicators", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendStopIMEStateManagement() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_StopIMEStateManagement(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_StopIMEStateManagement", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendMouseEvent(
        const nsString& aType,
        const float& aX,
        const float& aY,
        const int32_t& aButton,
        const int32_t& aClickCount,
        const int32_t& aModifiers) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_MouseEvent(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);
    WriteIPDLParam(msg__, this, aButton);
    // Sentinel = 'aButton'
    (msg__)->WriteSentinel(184222430);
    WriteIPDLParam(msg__, this, aClickCount);
    // Sentinel = 'aClickCount'
    (msg__)->WriteSentinel(416875601);
    WriteIPDLParam(msg__, this, aModifiers);
    // Sentinel = 'aModifiers'
    (msg__)->WriteSentinel(358286340);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_MouseEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRealMouseMoveEvent(
        const WidgetMouseEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RealMouseMoveEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RealMouseMoveEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityRealMouseMoveEvent(
        const WidgetMouseEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityRealMouseMoveEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealMouseMoveEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRealMouseMoveEventForTests(
        const WidgetMouseEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RealMouseMoveEventForTests(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RealMouseMoveEventForTests", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityRealMouseMoveEventForTests(
        const WidgetMouseEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityRealMouseMoveEventForTests(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealMouseMoveEventForTests", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSynthMouseMoveEvent(
        const WidgetMouseEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SynthMouseMoveEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SynthMouseMoveEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPrioritySynthMouseMoveEvent(
        const WidgetMouseEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPrioritySynthMouseMoveEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPrioritySynthMouseMoveEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRealMouseButtonEvent(
        const WidgetMouseEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RealMouseButtonEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RealMouseButtonEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityRealMouseButtonEvent(
        const WidgetMouseEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityRealMouseButtonEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealMouseButtonEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRealKeyEvent(const WidgetKeyboardEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RealKeyEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RealKeyEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityRealKeyEvent(const WidgetKeyboardEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityRealKeyEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealKeyEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendMouseWheelEvent(
        const WidgetWheelEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_MouseWheelEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_MouseWheelEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityMouseWheelEvent(
        const WidgetWheelEvent& event,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityMouseWheelEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityMouseWheelEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRealTouchEvent(
        const WidgetTouchEvent& aEvent,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId,
        const nsEventStatus& aApzResponse) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RealTouchEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aApzResponse);
    // Sentinel = 'aApzResponse'
    (msg__)->WriteSentinel(512951516);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RealTouchEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityRealTouchEvent(
        const WidgetTouchEvent& aEvent,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId,
        const nsEventStatus& aApzResponse) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityRealTouchEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aApzResponse);
    // Sentinel = 'aApzResponse'
    (msg__)->WriteSentinel(512951516);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealTouchEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendHandleTap(
        const GeckoContentController_TapType& aType,
        const LayoutDevicePoint& point,
        const Modifiers& aModifiers,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_HandleTap(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, point);
    // Sentinel = 'point'
    (msg__)->WriteSentinel(108790315);
    WriteIPDLParam(msg__, this, aModifiers);
    // Sentinel = 'aModifiers'
    (msg__)->WriteSentinel(358286340);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_HandleTap", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityHandleTap(
        const GeckoContentController_TapType& aType,
        const LayoutDevicePoint& point,
        const Modifiers& aModifiers,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityHandleTap(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, point);
    // Sentinel = 'point'
    (msg__)->WriteSentinel(108790315);
    WriteIPDLParam(msg__, this, aModifiers);
    // Sentinel = 'aModifiers'
    (msg__)->WriteSentinel(358286340);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityHandleTap", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRealTouchMoveEvent(
        const WidgetTouchEvent& aEvent,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId,
        const nsEventStatus& aApzResponse) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RealTouchMoveEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aApzResponse);
    // Sentinel = 'aApzResponse'
    (msg__)->WriteSentinel(512951516);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RealTouchMoveEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityRealTouchMoveEvent(
        const WidgetTouchEvent& aEvent,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId,
        const nsEventStatus& aApzResponse) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityRealTouchMoveEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aApzResponse);
    // Sentinel = 'aApzResponse'
    (msg__)->WriteSentinel(512951516);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealTouchMoveEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRealTouchMoveEvent2(
        const WidgetTouchEvent& aEvent,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId,
        const nsEventStatus& aApzResponse) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RealTouchMoveEvent2(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aApzResponse);
    // Sentinel = 'aApzResponse'
    (msg__)->WriteSentinel(512951516);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RealTouchMoveEvent2", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityRealTouchMoveEvent2(
        const WidgetTouchEvent& aEvent,
        const ScrollableLayerGuid& aGuid,
        const uint64_t& aInputBlockId,
        const nsEventStatus& aApzResponse) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityRealTouchMoveEvent2(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);
    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aApzResponse);
    // Sentinel = 'aApzResponse'
    (msg__)->WriteSentinel(512951516);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealTouchMoveEvent2", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRealDragEvent(
        const WidgetDragEvent& aEvent,
        const uint32_t& aDragAction,
        const uint32_t& aDropEffect,
        nsIPrincipal* aPrincipal,
        nsIContentSecurityPolicy* csp) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RealDragEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);
    WriteIPDLParam(msg__, this, aDragAction);
    // Sentinel = 'aDragAction'
    (msg__)->WriteSentinel(411370558);
    WriteIPDLParam(msg__, this, aDropEffect);
    // Sentinel = 'aDropEffect'
    (msg__)->WriteSentinel(419759172);
    WriteIPDLParam(msg__, this, aPrincipal);
    // Sentinel = 'aPrincipal'
    (msg__)->WriteSentinel(364381188);
    WriteIPDLParam(msg__, this, csp);
    // Sentinel = 'csp'
    (msg__)->WriteSentinel(42074439);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RealDragEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendCompositionEvent(const WidgetCompositionEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_CompositionEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_CompositionEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPriorityCompositionEvent(const WidgetCompositionEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPriorityCompositionEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityCompositionEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSelectionEvent(const WidgetSelectionEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SelectionEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SelectionEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNormalPrioritySelectionEvent(const WidgetSelectionEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NormalPrioritySelectionEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPrioritySelectionEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendPasteTransferable(
        const IPCDataTransfer& aDataTransfer,
        const bool& aIsPrivateData,
        nsIPrincipal* aRequestingPrincipal,
        const nsContentPolicyType& aContentPolicyType) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_PasteTransferable(Id());

    WriteIPDLParam(msg__, this, aDataTransfer);
    // Sentinel = 'aDataTransfer'
    (msg__)->WriteSentinel(581567777);
    WriteIPDLParam(msg__, this, aIsPrivateData);
    // Sentinel = 'aIsPrivateData'
    (msg__)->WriteSentinel(680396147);
    WriteIPDLParam(msg__, this, aRequestingPrincipal);
    // Sentinel = 'aRequestingPrincipal'
    (msg__)->WriteSentinel(1431439403);
    WriteIPDLParam(msg__, this, aContentPolicyType);
    // Sentinel = 'aContentPolicyType'
    (msg__)->WriteSentinel(1145767759);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PasteTransferable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendActivateFrameEvent(
        const nsString& aType,
        const bool& capture) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ActivateFrameEvent(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, capture);
    // Sentinel = 'capture'
    (msg__)->WriteSentinel(195691253);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ActivateFrameEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendLoadRemoteScript(
        const nsString& aURL,
        const bool& aRunInGlobalScope) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_LoadRemoteScript(Id());

    WriteIPDLParam(msg__, this, aURL);
    // Sentinel = 'aURL'
    (msg__)->WriteSentinel(58130773);
    WriteIPDLParam(msg__, this, aRunInGlobalScope);
    // Sentinel = 'aRunInGlobalScope'
    (msg__)->WriteSentinel(981862041);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_LoadRemoteScript", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendDestroy() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_Destroy(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_Destroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRenderLayers(
        const bool& aEnabled,
        const LayersObserverEpoch& aEpoch) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RenderLayers(Id());

    WriteIPDLParam(msg__, this, aEnabled);
    // Sentinel = 'aEnabled'
    (msg__)->WriteSentinel(224789261);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RenderLayers", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSuppressDisplayport(const bool& aEnabled) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SuppressDisplayport(Id());

    WriteIPDLParam(msg__, this, aEnabled);
    // Sentinel = 'aEnabled'
    (msg__)->WriteSentinel(224789261);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SuppressDisplayport", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendNavigateByKey(
        const bool& aForward,
        const bool& aForDocumentNavigation) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NavigateByKey(Id());

    WriteIPDLParam(msg__, this, aForward);
    // Sentinel = 'aForward'
    (msg__)->WriteSentinel(236258103);
    WriteIPDLParam(msg__, this, aForDocumentNavigation);
    // Sentinel = 'aForDocumentNavigation'
    (msg__)->WriteSentinel(1667434712);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NavigateByKey", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendRequestNotifyAfterRemotePaint() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RequestNotifyAfterRemotePaint(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RequestNotifyAfterRemotePaint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendUIResolutionChanged(
        const float& dpi,
        const int32_t& rounding,
        const double& scale) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_UIResolutionChanged(Id());

    WriteIPDLParam(msg__, this, dpi);
    // Sentinel = 'dpi'
    (msg__)->WriteSentinel(41419070);
    WriteIPDLParam(msg__, this, rounding);
    // Sentinel = 'rounding'
    (msg__)->WriteSentinel(261292903);
    WriteIPDLParam(msg__, this, scale);
    // Sentinel = 'scale'
    (msg__)->WriteSentinel(103809545);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_UIResolutionChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSafeAreaInsetsChanged(const ScreenIntMargin& aSafeAreaInsets) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SafeAreaInsetsChanged(Id());

    WriteIPDLParam(msg__, this, aSafeAreaInsets);
    // Sentinel = 'aSafeAreaInsets'
    (msg__)->WriteSentinel(752944592);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SafeAreaInsetsChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSwappedWithOtherRemoteLoader(const IPCTabContext& context) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SwappedWithOtherRemoteLoader(Id());

    WriteIPDLParam(msg__, this, context);
    // Sentinel = 'context'
    (msg__)->WriteSentinel(199164678);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SwappedWithOtherRemoteLoader", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendHandleAccessKey(
        const WidgetKeyboardEvent& event,
        const nsTArray<uint32_t>& charCodes) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_HandleAccessKey(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);
    WriteIPDLParam(msg__, this, charCodes);
    // Sentinel = 'charCodes'
    (msg__)->WriteSentinel(294323085);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_HandleAccessKey", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendPrintPreview(
        const PrintData& aPrintData,
        const mozilla::Maybe<uint64_t>& aSourceOuterWindowID,
        mozilla::ipc::ResolveCallback<PrintPreviewResultInfo>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBrowser::Msg_PrintPreview(Id());

    WriteIPDLParam(msg__, this, aPrintData);
    // Sentinel = 'aPrintData'
    (msg__)->WriteSentinel(359072745);
    WriteIPDLParam(msg__, this, aSourceOuterWindowID);
    // Sentinel = 'aSourceOuterWindowID'
    (msg__)->WriteSentinel(1415317479);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PrintPreview", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBrowserParent::SendPrintPreview(
        const PrintData& aPrintData,
        const mozilla::Maybe<uint64_t>& aSourceOuterWindowID) -> RefPtr<PrintPreviewPromise>
{
    RefPtr<MozPromise<PrintPreviewResultInfo, ResponseRejectReason, true>::Private> promise__ = new MozPromise<PrintPreviewResultInfo, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendPrintPreview(std::move(aPrintData), std::move(aSourceOuterWindowID), [promise__](PrintPreviewResultInfo&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBrowserParent::SendExitPrintPreview() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ExitPrintPreview(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ExitPrintPreview", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendPrint(
        const uint64_t& aOuterWindowID,
        const PrintData& aPrintData) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_Print(Id());

    WriteIPDLParam(msg__, this, aOuterWindowID);
    // Sentinel = 'aOuterWindowID'
    (msg__)->WriteSentinel(702612854);
    WriteIPDLParam(msg__, this, aPrintData);
    // Sentinel = 'aPrintData'
    (msg__)->WriteSentinel(359072745);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_Print", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendUpdateNativeWindowHandle(const uintptr_t& aNewHandle) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_UpdateNativeWindowHandle(Id());

    WriteIPDLParam(msg__, this, aNewHandle);
    // Sentinel = 'aNewHandle'
    (msg__)->WriteSentinel(347145176);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateNativeWindowHandle", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendAllowScriptsToClose() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_AllowScriptsToClose(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_AllowScriptsToClose", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendSetWidgetNativeData(const WindowsHandle& aHandle) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetWidgetNativeData(Id());

    WriteIPDLParam(msg__, this, aHandle);
    // Sentinel = 'aHandle'
    (msg__)->WriteSentinel(174326446);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetWidgetNativeData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserParent::SendWillChangeProcess(
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBrowser::Msg_WillChangeProcess(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_WillChangeProcess", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBrowserParent::SendWillChangeProcess() -> RefPtr<WillChangeProcessPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendWillChangeProcess([promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBrowserParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PColorPickerMsgStart:
{
            PColorPickerParent* actor = static_cast<PColorPickerParent*>(aListener);
            auto& container = mManagedPColorPickerParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PDocAccessibleMsgStart:
{
            PDocAccessibleParent* actor = static_cast<PDocAccessibleParent*>(aListener);
            auto& container = mManagedPDocAccessibleParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PFilePickerMsgStart:
{
            PFilePickerParent* actor = static_cast<PFilePickerParent*>(aListener);
            auto& container = mManagedPFilePickerParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPluginWidgetMsgStart:
{
            PPluginWidgetParent* actor = static_cast<PPluginWidgetParent*>(aListener);
            auto& container = mManagedPPluginWidgetParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPaymentRequestMsgStart:
{
            PPaymentRequestParent* actor = static_cast<PPaymentRequestParent*>(aListener);
            auto& container = mManagedPPaymentRequestParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PWindowGlobalMsgStart:
{
            PWindowGlobalParent* actor = static_cast<PWindowGlobalParent*>(aListener);
            auto& container = mManagedPWindowGlobalParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBrowserBridgeMsgStart:
{
            PBrowserBridgeParent* actor = static_cast<PBrowserBridgeParent*>(aListener);
            auto& container = mManagedPBrowserBridgeParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PVsyncMsgStart:
{
            PVsyncParent* actor = static_cast<PVsyncParent*>(aListener);
            auto& container = mManagedPVsyncParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBrowserParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PColorPickerMsgStart:
        static_cast<BrowserParent*>(this)->DeallocPColorPickerParent(static_cast<PColorPickerParent*>(aListener));
        return;
    case PDocAccessibleMsgStart:
        static_cast<BrowserParent*>(this)->DeallocPDocAccessibleParent(static_cast<PDocAccessibleParent*>(aListener));
        return;
    case PFilePickerMsgStart:
        static_cast<BrowserParent*>(this)->DeallocPFilePickerParent(static_cast<PFilePickerParent*>(aListener));
        return;
    case PPluginWidgetMsgStart:
        static_cast<BrowserParent*>(this)->DeallocPPluginWidgetParent(static_cast<PPluginWidgetParent*>(aListener));
        return;
    case PPaymentRequestMsgStart:
        static_cast<BrowserParent*>(this)->DeallocPPaymentRequestParent(static_cast<PPaymentRequestParent*>(aListener));
        return;
    case PVsyncMsgStart:
        static_cast<BrowserParent*>(this)->DeallocPVsyncParent(static_cast<PVsyncParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBrowserParent::OnMessageReceived(const Message& msg__) -> PBrowserParent::Result
{
    switch (msg__.type()) {
    case PBrowser::Msg_AsyncMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_AsyncMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString aMessage{};
            ClonedMessageData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvAsyncMessage(std::move(aMessage), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_PDocAccessibleConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PDocAccessibleConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            PDocAccessibleParent* aParentDoc{};
            uint64_t aParentAcc{};
            uint32_t aMsaaID{};
            IAccessibleHolder aDocCOMProxy{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aParentDoc)))))) {
                FatalError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            // Sentinel = 'aParentDoc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 355140578)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aParentAcc)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aParentAcc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 352977875)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMsaaID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMsaaID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 171442801)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDocCOMProxy)))))) {
                FatalError("Error deserializing 'IAccessibleHolder'");
                return MsgValueError;
            }
            // Sentinel = 'aDocCOMProxy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 460457081)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IAccessibleHolder'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PDocAccessibleParent* actor = (static_cast<BrowserParent*>(this))->AllocPDocAccessibleParent(aParentDoc, aParentAcc, aMsaaID, aDocCOMProxy);
            if (!actor) {
                NS_WARNING("Cannot bind null PDocAccessibleParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPDocAccessibleParent.PutEntry(actor);

            if ((!((static_cast<BrowserParent*>(this))->RecvPDocAccessibleConstructor(std::move(actor), std::move(aParentDoc), std::move(aParentAcc), std::move(aMsaaID), std::move(aDocCOMProxy))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_PPaymentRequestConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PPaymentRequestConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPaymentRequestParent* actor = (static_cast<BrowserParent*>(this))->AllocPPaymentRequestParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PPaymentRequestParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPaymentRequestParent.PutEntry(actor);

            if ((!((static_cast<BrowserParent*>(this))->RecvPPaymentRequestConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_PVsyncConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PVsyncConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PVsyncParent* actor = (static_cast<BrowserParent*>(this))->AllocPVsyncParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PVsyncParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPVsyncParent.PutEntry(actor);

            if ((!((static_cast<BrowserParent*>(this))->RecvPVsyncConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetNativeChildOfShareableWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetNativeChildOfShareableWindow", OTHER);

            PickleIterator iter__{msg__};
            uintptr_t childWindow{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(childWindow)))))) {
                FatalError("Error deserializing 'uintptr_t'");
                return MsgValueError;
            }
            // Sentinel = 'childWindow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 444138621)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uintptr_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSetNativeChildOfShareableWindow(std::move(childWindow))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_MoveFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_MoveFocus", OTHER);

            PickleIterator iter__{msg__};
            bool forward{};
            bool forDocumentNavigation{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(forward)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'forward'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200016630)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(forDocumentNavigation)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'forDocumentNavigation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1571555479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvMoveFocus(std::move(forward), std::move(forDocumentNavigation))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SizeShellTo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SizeShellTo", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aFlag{};
            int32_t aWidth{};
            int32_t aHeight{};
            int32_t aShellItemWidth{};
            int32_t aShellItemHeight{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlag)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlag'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 91161052)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWidth)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWidth'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136249954)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHeight)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aHeight'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175375035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aShellItemWidth)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aShellItemWidth'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 779945449)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aShellItemHeight)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aShellItemHeight'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 878249538)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSizeShellTo(std::move(aFlag), std::move(aWidth), std::move(aHeight), std::move(aShellItemWidth), std::move(aShellItemHeight))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_DropLinks__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_DropLinks", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsString> aLinks{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLinks)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aLinks'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 134152803)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvDropLinks(std::move(aLinks))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_Event__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_Event", OTHER);

            PickleIterator iter__{msg__};
            RemoteDOMEvent aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'RemoteDOMEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RemoteDOMEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvEvent(std::move(aEvent))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NotifyIMEFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMEFocus", OTHER);

            PickleIterator iter__{msg__};
            ContentCache contentCache{};
            IMENotification notification{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(contentCache)))))) {
                FatalError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            // Sentinel = 'contentCache'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 535299280)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(notification)))))) {
                FatalError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            // Sentinel = 'notification'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 550438152)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            NotifyIMEFocusResolver resolver = [proxy__, seqno__, id__](const IMENotificationRequests& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBrowserParent* self__ = static_cast<PBrowserParent*>(proxy__->Get());

                IPC::Message* reply__ = PBrowser::Reply_NotifyIMEFocus(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'requests'
                (reply__)->WriteSentinel(261227389);

                if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBrowserParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BrowserParent*>(this))->RecvNotifyIMEFocus(std::move(contentCache), std::move(notification), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NotifyIMETextChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMETextChange", OTHER);

            PickleIterator iter__{msg__};
            ContentCache contentCache{};
            IMENotification notification{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(contentCache)))))) {
                FatalError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            // Sentinel = 'contentCache'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 535299280)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(notification)))))) {
                FatalError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            // Sentinel = 'notification'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 550438152)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvNotifyIMETextChange(std::move(contentCache), std::move(notification))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NotifyIMECompositionUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMECompositionUpdate", OTHER);

            PickleIterator iter__{msg__};
            ContentCache contentCache{};
            IMENotification notification{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(contentCache)))))) {
                FatalError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            // Sentinel = 'contentCache'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 535299280)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(notification)))))) {
                FatalError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            // Sentinel = 'notification'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 550438152)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvNotifyIMECompositionUpdate(std::move(contentCache), std::move(notification))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NotifyIMESelection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMESelection", OTHER);

            PickleIterator iter__{msg__};
            ContentCache contentCache{};
            IMENotification notification{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(contentCache)))))) {
                FatalError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            // Sentinel = 'contentCache'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 535299280)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(notification)))))) {
                FatalError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            // Sentinel = 'notification'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 550438152)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvNotifyIMESelection(std::move(contentCache), std::move(notification))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_UpdateContentCache__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateContentCache", OTHER);

            PickleIterator iter__{msg__};
            ContentCache contentCache{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(contentCache)))))) {
                FatalError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            // Sentinel = 'contentCache'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 535299280)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvUpdateContentCache(std::move(contentCache))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NotifyIMEPositionChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMEPositionChange", OTHER);

            PickleIterator iter__{msg__};
            ContentCache contentCache{};
            IMENotification notification{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(contentCache)))))) {
                FatalError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            // Sentinel = 'contentCache'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 535299280)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ContentCache'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(notification)))))) {
                FatalError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            // Sentinel = 'notification'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 550438152)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvNotifyIMEPositionChange(std::move(contentCache), std::move(notification))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_OnEventNeedingAckHandled__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_OnEventNeedingAckHandled", OTHER);

            PickleIterator iter__{msg__};
            EventMessage message{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'EventMessage'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'EventMessage'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvOnEventNeedingAckHandled(std::move(message))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RequestFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RequestFocus", OTHER);

            PickleIterator iter__{msg__};
            bool canRaise{};
            CallerType aCallerType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(canRaise)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'canRaise'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 234816295)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallerType)))))) {
                FatalError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            // Sentinel = 'aCallerType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422118487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallerType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvRequestFocus(std::move(canRaise), std::move(aCallerType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_WheelZoomChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_WheelZoomChange", OTHER);

            PickleIterator iter__{msg__};
            bool increase{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(increase)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'increase'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 249561931)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvWheelZoomChange(std::move(increase))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_EnableDisableCommands__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_EnableDisableCommands", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext bc{};
            nsString action{};
            nsTArray<nsCString> enabledCommands{};
            nsTArray<nsCString> disabledCommands{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(bc)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'bc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 19464390)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(action)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'action'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143786623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(enabledCommands)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'enabledCommands'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 796263934)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(disabledCommands)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'disabledCommands'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 909706859)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvEnableDisableCommands(std::move(bc), std::move(action), std::move(enabledCommands), std::move(disabledCommands))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetInputContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetInputContext", OTHER);

            PickleIterator iter__{msg__};
            InputContext context{};
            InputContextAction action{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(context)))))) {
                FatalError("Error deserializing 'InputContext'");
                return MsgValueError;
            }
            // Sentinel = 'context'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 199164678)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'InputContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(action)))))) {
                FatalError("Error deserializing 'InputContextAction'");
                return MsgValueError;
            }
            // Sentinel = 'action'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143786623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'InputContextAction'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSetInputContext(std::move(context), std::move(action))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetCursor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetCursor", OTHER);

            PickleIterator iter__{msg__};
            nsCursor value{};
            bool hasCustomCursor{};
            nsCString customCursorData{};
            uint32_t width{};
            uint32_t height{};
            uint32_t stride{};
            SurfaceFormat format{};
            uint32_t hotspotX{};
            uint32_t hotspotY{};
            bool force{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(value)))))) {
                FatalError("Error deserializing 'nsCursor'");
                return MsgValueError;
            }
            // Sentinel = 'value'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCursor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(hasCustomCursor)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'hasCustomCursor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 818415158)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(customCursorData)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'customCursorData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 954992276)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(width)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'width'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 108528161)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(height)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'height'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143393402)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stride)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'stride'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153879180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(format)))))) {
                FatalError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            // Sentinel = 'format'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148505226)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(hotspotX)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'hotspotX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 261423978)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(hotspotY)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'hotspotY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 261489515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(force)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'force'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 104858128)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSetCursor(std::move(value), std::move(hasCustomCursor), std::move(customCursorData), std::move(width), std::move(height), std::move(stride), std::move(format), std::move(hotspotX), std::move(hotspotY), std::move(force))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetLinkStatus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetLinkStatus", OTHER);

            PickleIterator iter__{msg__};
            nsString status{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSetLinkStatus(std::move(status))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ShowTooltip__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ShowTooltip", OTHER);

            PickleIterator iter__{msg__};
            uint32_t x{};
            uint32_t y{};
            nsString tooltip{};
            nsString direction{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(x)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'x'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 7929977)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(y)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'y'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 7995514)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(tooltip)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'tooltip'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 205914892)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(direction)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'direction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 311886786)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvShowTooltip(std::move(x), std::move(y), std::move(tooltip), std::move(direction))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_HideTooltip__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_HideTooltip", OTHER);

            if ((!((static_cast<BrowserParent*>(this))->RecvHideTooltip()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_PColorPickerConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PColorPickerConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsString title{};
            nsString initialColor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(title)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'title'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109445667)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(initialColor)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'initialColor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 536216810)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PColorPickerParent* actor = (static_cast<BrowserParent*>(this))->AllocPColorPickerParent(title, initialColor);
            if (!actor) {
                NS_WARNING("Cannot bind null PColorPickerParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPColorPickerParent.PutEntry(actor);

            if ((!((static_cast<BrowserParent*>(this))->RecvPColorPickerConstructor(std::move(actor), std::move(title), std::move(initialColor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_PFilePickerConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PFilePickerConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsString aTitle{};
            int16_t aMode{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTitle)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aTitle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137167460)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMode)))))) {
                FatalError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 93848039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PFilePickerParent* actor = (static_cast<BrowserParent*>(this))->AllocPFilePickerParent(aTitle, aMode);
            if (!actor) {
                NS_WARNING("Cannot bind null PFilePickerParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPFilePickerParent.PutEntry(actor);

            if ((!((static_cast<BrowserParent*>(this))->RecvPFilePickerConstructor(std::move(actor), std::move(aTitle), std::move(aMode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_IndexedDBPermissionRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_IndexedDBPermissionRequest", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIPrincipal> aPrincipal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'aPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364381188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            IndexedDBPermissionRequestResolver resolver = [proxy__, seqno__, id__](const uint32_t& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBrowserParent* self__ = static_cast<PBrowserParent*>(proxy__->Get());

                IPC::Message* reply__ = PBrowser::Reply_IndexedDBPermissionRequest(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'permission'
                (reply__)->WriteSentinel(394921034);

                if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBrowserParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BrowserParent*>(this))->RecvIndexedDBPermissionRequest(aPrincipal, std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RespondStartSwipeEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RespondStartSwipeEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aInputBlockId{};
            bool aStartSwipe{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartSwipe)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aStartSwipe'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 442565752)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvRespondStartSwipeEvent(std::move(aInputBlockId), std::move(aStartSwipe))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_AsyncAuthPrompt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_AsyncAuthPrompt", OTHER);

            PickleIterator iter__{msg__};
            nsCString uri{};
            nsString realm{};
            uint64_t aCallbackId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(uri)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'uri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45023569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(realm)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'realm'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 104530450)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCallbackId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCallbackId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 411370524)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvAsyncAuthPrompt(std::move(uri), std::move(realm), std::move(aCallbackId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_LookUpDictionary__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_LookUpDictionary", OTHER);

            PickleIterator iter__{msg__};
            nsString aText{};
            nsTArray<FontRange> aFontRangeArray{};
            bool aIsVertical{};
            LayoutDeviceIntPoint aPoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aText)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aText'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97321479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFontRangeArray)))))) {
                FatalError("Error deserializing 'FontRange[]'");
                return MsgValueError;
            }
            // Sentinel = 'aFontRangeArray'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 775095781)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FontRange[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsVertical)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsVertical'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 427361368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136512108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvLookUpDictionary(std::move(aText), std::move(aFontRangeArray), std::move(aIsVertical), std::move(aPoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBrowserParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBrowser'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBrowserMsgStart, actor);

            return MsgProcessed;
        }
    case PBrowser::Msg_ReplyKeyEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ReplyKeyEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetKeyboardEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvReplyKeyEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SynthesizeNativeKeyEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeKeyEvent", OTHER);

            PickleIterator iter__{msg__};
            int32_t aNativeKeyboardLayout{};
            int32_t aNativeKeyCode{};
            uint32_t aModifierFlags{};
            nsString aCharacters{};
            nsString aUnmodifiedCharacters{};
            uint64_t aObserverId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNativeKeyboardLayout)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNativeKeyboardLayout'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1529153656)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNativeKeyCode)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNativeKeyCode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 680527213)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifierFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aModifierFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681444734)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCharacters)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aCharacters'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422380642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUnmodifiedCharacters)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aUnmodifiedCharacters'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1529874534)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aObserverId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aObserverId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435356759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSynthesizeNativeKeyEvent(std::move(aNativeKeyboardLayout), std::move(aNativeKeyCode), std::move(aModifierFlags), std::move(aCharacters), std::move(aUnmodifiedCharacters), std::move(aObserverId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SynthesizeNativeMouseEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeMouseEvent", OTHER);

            PickleIterator iter__{msg__};
            LayoutDeviceIntPoint aPoint{};
            uint32_t aNativeMessage{};
            uint32_t aModifierFlags{};
            uint64_t aObserverId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136512108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNativeMessage)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNativeMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 689702286)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifierFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aModifierFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681444734)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aObserverId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aObserverId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435356759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSynthesizeNativeMouseEvent(std::move(aPoint), std::move(aNativeMessage), std::move(aModifierFlags), std::move(aObserverId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SynthesizeNativeMouseMove__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeMouseMove", OTHER);

            PickleIterator iter__{msg__};
            LayoutDeviceIntPoint aPoint{};
            uint64_t aObserverId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136512108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aObserverId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aObserverId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435356759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSynthesizeNativeMouseMove(std::move(aPoint), std::move(aObserverId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SynthesizeNativeMouseScrollEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeMouseScrollEvent", OTHER);

            PickleIterator iter__{msg__};
            LayoutDeviceIntPoint aPoint{};
            uint32_t aNativeMessage{};
            double aDeltaX{};
            double aDeltaY{};
            double aDeltaZ{};
            uint32_t aModifierFlags{};
            uint32_t aAdditionalFlags{};
            uint64_t aObserverId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136512108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNativeMessage)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNativeMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 689702286)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDeltaX)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aDeltaX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 174391972)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDeltaY)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aDeltaY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 174457509)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDeltaZ)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aDeltaZ'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 174523046)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifierFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aModifierFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681444734)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAdditionalFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aAdditionalFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 880084552)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aObserverId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aObserverId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435356759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSynthesizeNativeMouseScrollEvent(std::move(aPoint), std::move(aNativeMessage), std::move(aDeltaX), std::move(aDeltaY), std::move(aDeltaZ), std::move(aModifierFlags), std::move(aAdditionalFlags), std::move(aObserverId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SynthesizeNativeTouchPoint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeTouchPoint", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPointerId{};
            TouchPointerState aPointerState{};
            LayoutDeviceIntPoint aPoint{};
            double aPointerPressure{};
            uint32_t aPointerOrientation{};
            uint64_t aObserverId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPointerId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPointerId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364053488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPointerState)))))) {
                FatalError("Error deserializing 'TouchPointerState'");
                return MsgValueError;
            }
            // Sentinel = 'aPointerState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 610600260)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TouchPointerState'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136512108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPointerPressure)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aPointerPressure'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 922617500)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPointerOrientation)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPointerOrientation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1287653327)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aObserverId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aObserverId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435356759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSynthesizeNativeTouchPoint(std::move(aPointerId), std::move(aPointerState), std::move(aPoint), std::move(aPointerPressure), std::move(aPointerOrientation), std::move(aObserverId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SynthesizeNativeTouchPadPinch__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeTouchPadPinch", OTHER);

            PickleIterator iter__{msg__};
            TouchpadPinchPhase aEventPhase{};
            float aScale{};
            LayoutDeviceIntPoint aPoint{};
            int32_t aModifierFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEventPhase)))))) {
                FatalError("Error deserializing 'TouchpadPinchPhase'");
                return MsgValueError;
            }
            // Sentinel = 'aEventPhase'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 428737621)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TouchpadPinchPhase'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScale)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aScale'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 131531338)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136512108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifierFlags)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aModifierFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681444734)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSynthesizeNativeTouchPadPinch(std::move(aEventPhase), std::move(aScale), std::move(aPoint), std::move(aModifierFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SynthesizeNativeTouchTap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeTouchTap", OTHER);

            PickleIterator iter__{msg__};
            LayoutDeviceIntPoint aPoint{};
            bool aLongTap{};
            uint64_t aObserverId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPoint)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            // Sentinel = 'aPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136512108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntPoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLongTap)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aLongTap'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 229507863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aObserverId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aObserverId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435356759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSynthesizeNativeTouchTap(std::move(aPoint), std::move(aLongTap), std::move(aObserverId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ClearNativeTouchSequence__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ClearNativeTouchSequence", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aObserverId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aObserverId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aObserverId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435356759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvClearNativeTouchSequence(std::move(aObserverId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_AccessKeyNotHandled__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_AccessKeyNotHandled", OTHER);

            PickleIterator iter__{msg__};
            WidgetKeyboardEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvAccessKeyNotHandled(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RegisterProtocolHandler__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RegisterProtocolHandler", OTHER);

            PickleIterator iter__{msg__};
            nsString scheme{};
            RefPtr<nsIURI> handlerURI{};
            nsString title{};
            RefPtr<nsIURI> documentURI{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scheme)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'scheme'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146080374)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handlerURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'handlerURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 367264719)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(title)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'title'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109445667)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(documentURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'documentURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 453706832)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvRegisterProtocolHandler(std::move(scheme), handlerURI, std::move(title), documentURI)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_OnStateChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_OnStateChange", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<WebProgressData> aWebProgressData{};
            RequestData aRequestData{};
            uint32_t aStateFlags{};
            nsresult aStatus{};
            mozilla::Maybe<WebProgressStateChangeData> aStateChangeData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWebProgressData)))))) {
                FatalError("Error deserializing 'WebProgressData?'");
                return MsgValueError;
            }
            // Sentinel = 'aWebProgressData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 890504783)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebProgressData?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestData)))))) {
                FatalError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 518390981)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStateFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStateFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 428606544)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStateChangeData)))))) {
                FatalError("Error deserializing 'WebProgressStateChangeData?'");
                return MsgValueError;
            }
            // Sentinel = 'aStateChangeData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 876086819)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebProgressStateChangeData?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvOnStateChange(std::move(aWebProgressData), std::move(aRequestData), std::move(aStateFlags), std::move(aStatus), std::move(aStateChangeData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_OnProgressChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_OnProgressChange", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<WebProgressData> aWebProgressData{};
            RequestData aRequestData{};
            int32_t aCurSelfProgress{};
            int32_t aMaxSelfProgress{};
            int32_t aCurTotalProgress{};
            int32_t aMaxTotalProgress{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWebProgressData)))))) {
                FatalError("Error deserializing 'WebProgressData?'");
                return MsgValueError;
            }
            // Sentinel = 'aWebProgressData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 890504783)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebProgressData?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestData)))))) {
                FatalError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 518390981)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCurSelfProgress)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCurSelfProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 886113899)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMaxSelfProgress)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMaxSelfProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 882706023)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCurTotalProgress)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCurTotalProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1012795109)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMaxTotalProgress)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMaxTotalProgress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1009125089)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvOnProgressChange(std::move(aWebProgressData), std::move(aRequestData), std::move(aCurSelfProgress), std::move(aMaxSelfProgress), std::move(aCurTotalProgress), std::move(aMaxTotalProgress))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_OnLocationChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_OnLocationChange", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<WebProgressData> aWebProgressData{};
            RequestData aRequestData{};
            RefPtr<nsIURI> aLocation{};
            uint32_t aFlags{};
            bool aCanGoBack{};
            bool aCanGoForward{};
            mozilla::Maybe<WebProgressLocationChangeData> aLocationChangeData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWebProgressData)))))) {
                FatalError("Error deserializing 'WebProgressData?'");
                return MsgValueError;
            }
            // Sentinel = 'aWebProgressData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 890504783)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebProgressData?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestData)))))) {
                FatalError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 518390981)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLocation)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aLocation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292094875)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 129892943)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCanGoBack)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCanGoBack'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 325714843)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCanGoForward)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aCanGoForward'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 563152127)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLocationChangeData)))))) {
                FatalError("Error deserializing 'WebProgressLocationChangeData?'");
                return MsgValueError;
            }
            // Sentinel = 'aLocationChangeData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1235617627)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebProgressLocationChangeData?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvOnLocationChange(std::move(aWebProgressData), std::move(aRequestData), aLocation, std::move(aFlags), std::move(aCanGoBack), std::move(aCanGoForward), std::move(aLocationChangeData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_OnStatusChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_OnStatusChange", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<WebProgressData> aWebProgressData{};
            RequestData aRequestData{};
            nsresult aStatus{};
            nsString aMessage{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWebProgressData)))))) {
                FatalError("Error deserializing 'WebProgressData?'");
                return MsgValueError;
            }
            // Sentinel = 'aWebProgressData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 890504783)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebProgressData?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestData)))))) {
                FatalError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 518390981)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvOnStatusChange(std::move(aWebProgressData), std::move(aRequestData), std::move(aStatus), std::move(aMessage))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NotifyContentBlockingEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyContentBlockingEvent", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aEvent{};
            RequestData aRequestData{};
            bool aBlocked{};
            nsCString aTrackingOrigin{};
            nsTArray<nsCString> aTrackingFullHashes{};
            mozilla::Maybe<StorageAccessPermissionGrantedReason> aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestData)))))) {
                FatalError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 518390981)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RequestData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBlocked)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aBlocked'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 227279638)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrackingOrigin)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aTrackingOrigin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 792331773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrackingFullHashes)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aTrackingFullHashes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1248069508)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'StorageAccessPermissionGrantedReason?'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'StorageAccessPermissionGrantedReason?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvNotifyContentBlockingEvent(std::move(aEvent), std::move(aRequestData), std::move(aBlocked), std::move(aTrackingOrigin), std::move(aTrackingFullHashes), std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NavigationFinished__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NavigationFinished", OTHER);

            if ((!((static_cast<BrowserParent*>(this))->RecvNavigationFinished()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SessionStoreUpdate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SessionStoreUpdate", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<nsCString> aDocShellCaps{};
            mozilla::Maybe<bool> aPrivatedMode{};
            nsTArray<nsCString> aPositions{};
            nsTArray<int32_t> aPositionDescendants{};
            nsTArray<InputFormData> aInputs{};
            nsTArray<CollectedInputDataValue> aIdVals{};
            nsTArray<CollectedInputDataValue> aXPathVals{};
            nsTArray<nsCString> aOrigins{};
            nsTArray<nsString> aKeys{};
            nsTArray<nsString> aValues{};
            bool aIsFullStorage{};
            bool aNeedCollectSHistory{};
            uint32_t aFlushId{};
            bool aIsFinal{};
            uint32_t aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDocShellCaps)))))) {
                FatalError("Error deserializing 'nsCString?'");
                return MsgValueError;
            }
            // Sentinel = 'aDocShellCaps'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 568394999)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrivatedMode)))))) {
                FatalError("Error deserializing 'bool?'");
                return MsgValueError;
            }
            // Sentinel = 'aPrivatedMode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 605291814)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPositions)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aPositions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 372966442)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPositionDescendants)))))) {
                FatalError("Error deserializing 'int32_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aPositionDescendants'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1415776291)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputs)))))) {
                FatalError("Error deserializing 'InputFormData[]'");
                return MsgValueError;
            }
            // Sentinel = 'aInputs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184812261)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'InputFormData[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIdVals)))))) {
                FatalError("Error deserializing 'CollectedInputDataValue[]'");
                return MsgValueError;
            }
            // Sentinel = 'aIdVals'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 169738917)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CollectedInputDataValue[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aXPathVals)))))) {
                FatalError("Error deserializing 'CollectedInputDataValue[]'");
                return MsgValueError;
            }
            // Sentinel = 'aXPathVals'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 345572317)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CollectedInputDataValue[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOrigins)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aOrigins'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236454717)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKeys)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aKeys'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 95027710)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aValues)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aValues'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 182649554)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsFullStorage)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsFullStorage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 679150982)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNeedCollectSHistory)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aNeedCollectSHistory'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1343490025)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlushId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlushId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 231015185)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsFinal)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsFinal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 221971208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSessionStoreUpdate(std::move(aDocShellCaps), std::move(aPrivatedMode), std::move(aPositions), std::move(aPositionDescendants), std::move(aInputs), std::move(aIdVals), std::move(aXPathVals), std::move(aOrigins), std::move(aKeys), std::move(aValues), std::move(aIsFullStorage), std::move(aNeedCollectSHistory), std::move(aFlushId), std::move(aIsFinal), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_IntrinsicSizeOrRatioChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_IntrinsicSizeOrRatioChanged", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<IntrinsicSize> aIntrinsicSize{};
            mozilla::Maybe<AspectRatio> aIntrinsicRatio{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIntrinsicSize)))))) {
                FatalError("Error deserializing 'IntrinsicSize?'");
                return MsgValueError;
            }
            // Sentinel = 'aIntrinsicSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 708052400)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntrinsicSize?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIntrinsicRatio)))))) {
                FatalError("Error deserializing 'AspectRatio?'");
                return MsgValueError;
            }
            // Sentinel = 'aIntrinsicRatio'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 807667220)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'AspectRatio?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvIntrinsicSizeOrRatioChanged(std::move(aIntrinsicSize), std::move(aIntrinsicRatio))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RequestPointerLock__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RequestPointerLock", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            RequestPointerLockResolver resolver = [proxy__, seqno__, id__](const nsCString& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBrowserParent* self__ = static_cast<PBrowserParent*>(proxy__->Get());

                IPC::Message* reply__ = PBrowser::Reply_RequestPointerLock(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'error'
                (reply__)->WriteSentinel(107741739);

                if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBrowserParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BrowserParent*>(this))->RecvRequestPointerLock(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ReleasePointerLock__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ReleasePointerLock", OTHER);

            if ((!((static_cast<BrowserParent*>(this))->RecvReleasePointerLock()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RequestPointerCapture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RequestPointerCapture", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPointerId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPointerId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPointerId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364053488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            RequestPointerCaptureResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBrowserParent* self__ = static_cast<PBrowserParent*>(proxy__->Get());

                IPC::Message* reply__ = PBrowser::Reply_RequestPointerCapture(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aSuccess'
                (reply__)->WriteSentinel(236323643);

                if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBrowserParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BrowserParent*>(this))->RecvRequestPointerCapture(std::move(aPointerId), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ReleasePointerCapture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ReleasePointerCapture", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPointerId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPointerId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPointerId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364053488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvReleasePointerCapture(std::move(aPointerId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RemotePaintIsReady__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RemotePaintIsReady", OTHER);

            if ((!((static_cast<BrowserParent*>(this))->RecvRemotePaintIsReady()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RemoteIsReadyToHandleInputEvents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RemoteIsReadyToHandleInputEvents", OTHER);

            if ((!((static_cast<BrowserParent*>(this))->RecvRemoteIsReadyToHandleInputEvents()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_PaintWhileInterruptingJSNoOp__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PaintWhileInterruptingJSNoOp", OTHER);

            PickleIterator iter__{msg__};
            LayersObserverEpoch aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvPaintWhileInterruptingJSNoOp(std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetDimensions__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetDimensions", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aFlags{};
            int32_t aX{};
            int32_t aY{};
            int32_t aCx{};
            int32_t aCy{};
            double aScale{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 129892943)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCx)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCx'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35914013)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCy)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35979550)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScale)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'aScale'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 131531338)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSetDimensions(std::move(aFlags), std::move(aX), std::move(aY), std::move(aCx), std::move(aCy), std::move(aScale))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_InvokeDragSession__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_InvokeDragSession", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<IPCDataTransfer> transfers{};
            uint32_t action{};
            mozilla::Maybe<Shmem> visualData{};
            uint32_t stride{};
            SurfaceFormat format{};
            LayoutDeviceIntRect dragRect{};
            RefPtr<nsIPrincipal> principal{};
            RefPtr<nsIContentSecurityPolicy> csp{};
            CookieJarSettingsArgs cookieJarSettings{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transfers)))))) {
                FatalError("Error deserializing 'IPCDataTransfer[]'");
                return MsgValueError;
            }
            // Sentinel = 'transfers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 323290073)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCDataTransfer[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(action)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'action'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143786623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(visualData)))))) {
                FatalError("Error deserializing 'Shmem?'");
                return MsgValueError;
            }
            // Sentinel = 'visualData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 385877007)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stride)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'stride'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153879180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(format)))))) {
                FatalError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            // Sentinel = 'format'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148505226)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceFormat'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dragRect)))))) {
                FatalError("Error deserializing 'LayoutDeviceIntRect'");
                return MsgValueError;
            }
            // Sentinel = 'dragRect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 239076141)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceIntRect'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(principal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'principal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 319620035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(csp)))))) {
                FatalError("Error deserializing 'nsIContentSecurityPolicy'");
                return MsgValueError;
            }
            // Sentinel = 'csp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 42074439)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIContentSecurityPolicy'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cookieJarSettings)))))) {
                FatalError("Error deserializing 'CookieJarSettingsArgs'");
                return MsgValueError;
            }
            // Sentinel = 'cookieJarSettings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1031800553)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CookieJarSettingsArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvInvokeDragSession(std::move(transfers), std::move(action), std::move(visualData), std::move(stride), std::move(format), std::move(dragRect), principal, csp, std::move(cookieJarSettings))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ShowCanvasPermissionPrompt__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ShowCanvasPermissionPrompt", OTHER);

            PickleIterator iter__{msg__};
            nsCString aOrigin{};
            bool aHideDoorHanger{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOrigin)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aOrigin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 182125258)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHideDoorHanger)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aHideDoorHanger'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 753731013)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvShowCanvasPermissionPrompt(std::move(aOrigin), std::move(aHideDoorHanger))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_MaybeFireEmbedderLoadEvents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_MaybeFireEmbedderLoadEvents", OTHER);

            PickleIterator iter__{msg__};
            EmbedderElementEventType aFireEventAtEmbeddingElement{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFireEventAtEmbeddingElement)))))) {
                FatalError("Error deserializing 'EmbedderElementEventType'");
                return MsgValueError;
            }
            // Sentinel = 'aFireEventAtEmbeddingElement'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2607483624)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'EmbedderElementEventType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvMaybeFireEmbedderLoadEvents(std::move(aFireEventAtEmbeddingElement))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ScrollRectIntoView__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ScrollRectIntoView", OTHER);

            PickleIterator iter__{msg__};
            nsRect aRect{};
            ScrollAxis aVertical{};
            ScrollAxis aHorizontal{};
            ScrollFlags aScrollFlags{};
            int32_t aAppUnitsPerDevPixel{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRect)))))) {
                FatalError("Error deserializing 'nsRect'");
                return MsgValueError;
            }
            // Sentinel = 'aRect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044656)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsRect'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aVertical)))))) {
                FatalError("Error deserializing 'ScrollAxis'");
                return MsgValueError;
            }
            // Sentinel = 'aVertical'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 298845084)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollAxis'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHorizontal)))))) {
                FatalError("Error deserializing 'ScrollAxis'");
                return MsgValueError;
            }
            // Sentinel = 'aHorizontal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 447022220)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollAxis'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollFlags)))))) {
                FatalError("Error deserializing 'ScrollFlags'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 510592190)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollFlags'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAppUnitsPerDevPixel)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aAppUnitsPerDevPixel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1366296542)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvScrollRectIntoView(std::move(aRect), std::move(aVertical), std::move(aHorizontal), std::move(aScrollFlags), std::move(aAppUnitsPerDevPixel))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetAllowDeprecatedTls__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetAllowDeprecatedTls", OTHER);

            PickleIterator iter__{msg__};
            bool value{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(value)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'value'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvSetAllowDeprecatedTls(std::move(value))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Reply_PrintPreview__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PrintPreview", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<PrintPreviewResultInfo> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                PrintPreviewResultInfo aInfo{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInfo)))))) {
                    FatalError("Error deserializing 'PrintPreviewResultInfo'");
                    return MsgValueError;
                }
                // Sentinel = 'aInfo'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 93520366)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'PrintPreviewResultInfo'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aInfo));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PBrowser::Reply_WillChangeProcess__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_WillChangeProcess", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool success{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(success)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'success'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200082170)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(success));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_IsWindowSupportingProtectedMedia__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_IsWindowSupportingProtectedMedia", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aOuterWindowID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOuterWindowID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOuterWindowID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 702612854)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            IsWindowSupportingProtectedMediaResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBrowserParent* self__ = static_cast<PBrowserParent*>(proxy__->Get());

                IPC::Message* reply__ = PBrowser::Reply_IsWindowSupportingProtectedMedia(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'isSupported'
                (reply__)->WriteSentinel(466355363);

                if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBrowserParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BrowserParent*>(this))->RecvIsWindowSupportingProtectedMedia(std::move(aOuterWindowID), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_IsWindowSupportingWebVR__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_IsWindowSupportingWebVR", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aOuterWindowID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOuterWindowID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOuterWindowID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 702612854)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            IsWindowSupportingWebVRResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBrowserParent* self__ = static_cast<PBrowserParent*>(proxy__->Get());

                IPC::Message* reply__ = PBrowser::Reply_IsWindowSupportingWebVR(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'isSupported'
                (reply__)->WriteSentinel(466355363);

                if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBrowserParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BrowserParent*>(this))->RecvIsWindowSupportingWebVR(std::move(aOuterWindowID), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_VisitURI__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_VisitURI", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> aURI{};
            RefPtr<nsIURI> aLastVisitedURI{};
            uint32_t aFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLastVisitedURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aLastVisitedURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 786695614)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 129892943)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvVisitURI(aURI, aLastVisitedURI, std::move(aFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_QueryVisitedState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_QueryVisitedState", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<RefPtr<nsIURI>> aURIs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURIs)))))) {
                FatalError("Error deserializing 'nsIURI[]'");
                return MsgValueError;
            }
            // Sentinel = 'aURIs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 87622085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvQueryVisitedState(std::move(aURIs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NewWindowGlobal__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NewWindowGlobal", OTHER);

            PickleIterator iter__{msg__};
            ManagedEndpoint<mozilla::dom::PWindowGlobalParent> aEndpoint{};
            WindowGlobalInit aInit{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                FatalError("Error deserializing 'ManagedEndpoint<mozilla::dom::PWindowGlobalParent>'");
                return MsgValueError;
            }
            // Sentinel = 'aEndpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ManagedEndpoint<mozilla::dom::PWindowGlobalParent>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInit)))))) {
                FatalError("Error deserializing 'WindowGlobalInit'");
                return MsgValueError;
            }
            // Sentinel = 'aInit'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94241270)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowGlobalInit'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserParent*>(this))->RecvNewWindowGlobal(std::move(aEndpoint), std::move(aInit))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBrowserParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBrowserParent::Result
{
    switch (msg__.type()) {
    case PBrowser::Msg_PPluginWidgetConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PPluginWidgetConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPluginWidgetParent* actor = (static_cast<BrowserParent*>(this))->AllocPPluginWidgetParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PPluginWidgetParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPluginWidgetParent.PutEntry(actor);

            int32_t id__ = Id();
            if ((!((static_cast<BrowserParent*>(this))->RecvPPluginWidgetConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }
            reply__ = PBrowser::Reply_PPluginWidgetConstructor(id__);


            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_DispatchFocusToTopLevelWindow__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_DispatchFocusToTopLevelWindow", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<BrowserParent*>(this))->RecvDispatchFocusToTopLevelWindow()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_DispatchFocusToTopLevelWindow(id__);


            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_SyncMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SyncMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString aMessage{};
            ClonedMessageData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<StructuredCloneData> retval{};
            if ((!((static_cast<BrowserParent*>(this))->RecvSyncMessage(std::move(aMessage), std::move(aData), (&(retval)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_SyncMessage(id__);

            WriteIPDLParam(reply__, this, retval);
            // Sentinel = 'retval'
            (reply__)->WriteSentinel(151716495);

            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_NotifyIMEMouseButtonEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMEMouseButtonEvent", OTHER);

            PickleIterator iter__{msg__};
            IMENotification notification{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(notification)))))) {
                FatalError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            // Sentinel = 'notification'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 550438152)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IMENotification'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool consumedByIME{};
            if ((!((static_cast<BrowserParent*>(this))->RecvNotifyIMEMouseButtonEvent(std::move(notification), (&(consumedByIME)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_NotifyIMEMouseButtonEvent(id__);

            WriteIPDLParam(reply__, this, consumedByIME);
            // Sentinel = 'consumedByIME'
            (reply__)->WriteSentinel(621282549);

            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_RequestIMEToCommitComposition__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RequestIMEToCommitComposition", OTHER);

            PickleIterator iter__{msg__};
            bool cancel{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(cancel)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'cancel'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 139723367)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool isCommitted{};
            nsString committedString{};
            if ((!((static_cast<BrowserParent*>(this))->RecvRequestIMEToCommitComposition(std::move(cancel), (&(isCommitted)), (&(committedString)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_RequestIMEToCommitComposition(id__);

            WriteIPDLParam(reply__, this, isCommitted);
            // Sentinel = 'isCommitted'
            (reply__)->WriteSentinel(449774723);
            WriteIPDLParam(reply__, this, committedString);
            // Sentinel = 'committedString'
            (reply__)->WriteSentinel(840042046);

            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_GetInputContext__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_GetInputContext", OTHER);

            int32_t id__ = Id();
            IMEState state{};
            if ((!((static_cast<BrowserParent*>(this))->RecvGetInputContext((&(state)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_GetInputContext(id__);

            WriteIPDLParam(reply__, this, state);
            // Sentinel = 'state'
            (reply__)->WriteSentinel(109314594);

            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_RequestNativeKeyBindings__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RequestNativeKeyBindings", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aType{};
            WidgetKeyboardEvent aEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsTArray<CommandInt> commands{};
            if ((!((static_cast<BrowserParent*>(this))->RecvRequestNativeKeyBindings(std::move(aType), std::move(aEvent), (&(commands)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_RequestNativeKeyBindings(id__);

            WriteIPDLParam(reply__, this, commands);
            // Sentinel = 'commands'
            (reply__)->WriteSentinel(249627475);

            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_DispatchWheelEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_DispatchWheelEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetWheelEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetWheelEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetWheelEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<BrowserParent*>(this))->RecvDispatchWheelEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_DispatchWheelEvent(id__);


            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_DispatchMouseEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_DispatchMouseEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<BrowserParent*>(this))->RecvDispatchMouseEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_DispatchMouseEvent(id__);


            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_DispatchKeyboardEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_DispatchKeyboardEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetKeyboardEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<BrowserParent*>(this))->RecvDispatchKeyboardEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_DispatchKeyboardEvent(id__);


            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_EnsureLayersConnected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_EnsureLayersConnected", OTHER);

            int32_t id__ = Id();
            CompositorOptions compositorOptions{};
            if ((!((static_cast<BrowserParent*>(this))->RecvEnsureLayersConnected((&(compositorOptions)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_EnsureLayersConnected(id__);

            WriteIPDLParam(reply__, this, compositorOptions);
            // Sentinel = 'compositorOptions'
            (reply__)->WriteSentinel(1089275708);

            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_SetSystemFont__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetSystemFont", OTHER);

            PickleIterator iter__{msg__};
            nsCString aFontName{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFontName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aFontName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 287114106)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((static_cast<BrowserParent*>(this))->RecvSetSystemFont(std::move(aFontName))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_SetSystemFont(id__);


            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_GetSystemFont__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_GetSystemFont", OTHER);

            int32_t id__ = Id();
            nsCString retval{};
            if ((!((static_cast<BrowserParent*>(this))->RecvGetSystemFont((&(retval)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PBrowser::Reply_GetSystemFont(id__);

            WriteIPDLParam(reply__, this, retval);
            // Sentinel = 'retval'
            (reply__)->WriteSentinel(151716495);

            if (mozilla::ipc::LoggingEnabledFor("PBrowserParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBrowserParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBrowserParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBrowserParent::ClearSubtree() -> void
{
    for (auto it = mManagedPColorPickerParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPColorPickerParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPColorPickerParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPColorPickerParent.Clear();

    for (auto it = mManagedPDocAccessibleParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPDocAccessibleParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPDocAccessibleParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPDocAccessibleParent.Clear();

    for (auto it = mManagedPFilePickerParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPFilePickerParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPFilePickerParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPFilePickerParent.Clear();

    for (auto it = mManagedPPluginWidgetParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginWidgetParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginWidgetParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginWidgetParent.Clear();

    for (auto it = mManagedPPaymentRequestParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPaymentRequestParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPaymentRequestParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPaymentRequestParent.Clear();

    for (auto it = mManagedPWindowGlobalParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWindowGlobalParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWindowGlobalParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWindowGlobalParent.Clear();

    for (auto it = mManagedPBrowserBridgeParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBrowserBridgeParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBrowserBridgeParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBrowserBridgeParent.Clear();

    for (auto it = mManagedPVsyncParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPVsyncParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPVsyncParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPVsyncParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBrowserParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBrowserParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBrowser", PBrowserMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBrowserParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
