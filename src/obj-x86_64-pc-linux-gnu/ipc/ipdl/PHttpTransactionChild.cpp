//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PHttpTransactionChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/HttpTransactionChild.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "nsHttpHeaderArray.h"
#include "nsHttpRequestHead.h"

#include "mozilla/net/PSocketProcessChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/net/PInputChannelThrottleQueueChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PHttpTransactionChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PHttpTransactionChild::PHttpTransactionChild() :
    mozilla::ipc::IProtocol(PHttpTransactionMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PHttpTransactionChild);
}

PHttpTransactionChild::~PHttpTransactionChild()
{
    MOZ_COUNT_DTOR(PHttpTransactionChild);
}

auto PHttpTransactionChild::Manager() const -> PSocketProcessChild*
{
    return static_cast<PSocketProcessChild*>(IProtocol::Manager());
}

auto PHttpTransactionChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHttpTransactionChild::SendOnStartRequest(
        const nsresult& status,
        const mozilla::Maybe<nsHttpResponseHead>& responseHead,
        const nsCString& securityInfoSerialization,
        const bool& proxyConnectFailed,
        const TimingStructArgs& timings,
        const int32_t& proxyConnectResponseCode,
        const nsTArray<uint8_t>& dataForSniffer,
        const mozilla::Maybe<nsCString>& altSvcUsed,
        const bool& dataToChildProcess,
        const bool& restarted,
        const uint32_t& HTTPSSVCReceivedStage,
        const bool& supportsHttp3) -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_OnStartRequest(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);
    WriteIPDLParam(msg__, this, responseHead);
    // Sentinel = 'responseHead'
    (msg__)->WriteSentinel(549651682);
    WriteIPDLParam(msg__, this, securityInfoSerialization);
    // Sentinel = 'securityInfoSerialization'
    (msg__)->WriteSentinel(2263026275);
    WriteIPDLParam(msg__, this, proxyConnectFailed);
    // Sentinel = 'proxyConnectFailed'
    (msg__)->WriteSentinel(1194002258);
    WriteIPDLParam(msg__, this, timings);
    // Sentinel = 'timings'
    (msg__)->WriteSentinel(200868604);
    WriteIPDLParam(msg__, this, proxyConnectResponseCode);
    // Sentinel = 'proxyConnectResponseCode'
    (msg__)->WriteSentinel(2099382743);
    WriteIPDLParam(msg__, this, dataForSniffer);
    // Sentinel = 'dataForSniffer'
    (msg__)->WriteSentinel(690816399);
    WriteIPDLParam(msg__, this, altSvcUsed);
    // Sentinel = 'altSvcUsed'
    (msg__)->WriteSentinel(370344959);
    WriteIPDLParam(msg__, this, dataToChildProcess);
    // Sentinel = 'dataToChildProcess'
    (msg__)->WriteSentinel(1114769185);
    WriteIPDLParam(msg__, this, restarted);
    // Sentinel = 'restarted'
    (msg__)->WriteSentinel(323421135);
    WriteIPDLParam(msg__, this, HTTPSSVCReceivedStage);
    // Sentinel = 'HTTPSSVCReceivedStage'
    (msg__)->WriteSentinel(1328154523);
    WriteIPDLParam(msg__, this, supportsHttp3);
    // Sentinel = 'supportsHttp3'
    (msg__)->WriteSentinel(663487844);




    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnStartRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionChild::SendOnTransportStatus(
        const nsresult& status,
        const int64_t& progress,
        const int64_t& progressMax,
        const mozilla::Maybe<NetworkAddressArg>& networkAddressArg) -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_OnTransportStatus(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);
    WriteIPDLParam(msg__, this, progress);
    // Sentinel = 'progress'
    (msg__)->WriteSentinel(261292918);
    WriteIPDLParam(msg__, this, progressMax);
    // Sentinel = 'progressMax'
    (msg__)->WriteSentinel(471205020);
    WriteIPDLParam(msg__, this, networkAddressArg);
    // Sentinel = 'networkAddressArg'
    (msg__)->WriteSentinel(1062471403);




    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnTransportStatus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionChild::SendOnDataAvailable(
        const nsCString& data,
        const uint64_t& offset,
        const uint32_t& count) -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_OnDataAvailable(Id());

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);
    WriteIPDLParam(msg__, this, offset);
    // Sentinel = 'offset'
    (msg__)->WriteSentinel(147653256);
    WriteIPDLParam(msg__, this, count);
    // Sentinel = 'count'
    (msg__)->WriteSentinel(106889770);




    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnDataAvailable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionChild::SendOnStopRequest(
        const nsresult& status,
        const bool& responseIsComplete,
        const int64_t& transferSize,
        const TimingStructArgs& timings,
        const mozilla::Maybe<nsHttpHeaderArray>& responseTrailers,
        const mozilla::Maybe<TransactionObserverResult>& transactionObserverResult,
        const TimeStamp& lastActiveTabOptimization,
        const uint32_t& caps,
        const HttpConnectionInfoCloneArgs& connInfoArgs) -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_OnStopRequest(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);
    WriteIPDLParam(msg__, this, responseIsComplete);
    // Sentinel = 'responseIsComplete'
    (msg__)->WriteSentinel(1188956005);
    WriteIPDLParam(msg__, this, transferSize);
    // Sentinel = 'transferSize'
    (msg__)->WriteSentinel(551814401);
    WriteIPDLParam(msg__, this, timings);
    // Sentinel = 'timings'
    (msg__)->WriteSentinel(200868604);
    WriteIPDLParam(msg__, this, responseTrailers);
    // Sentinel = 'responseTrailers'
    (msg__)->WriteSentinel(961873590);
    WriteIPDLParam(msg__, this, transactionObserverResult);
    // Sentinel = 'transactionObserverResult'
    (msg__)->WriteSentinel(2271873646);
    WriteIPDLParam(msg__, this, lastActiveTabOptimization);
    // Sentinel = 'lastActiveTabOptimization'
    (msg__)->WriteSentinel(2190412335);
    WriteIPDLParam(msg__, this, caps);
    // Sentinel = 'caps'
    (msg__)->WriteSentinel(67502504);
    WriteIPDLParam(msg__, this, connInfoArgs);
    // Sentinel = 'connInfoArgs'
    (msg__)->WriteSentinel(521340104);




    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnStopRequest", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionChild::SendOnInitFailed(const nsresult& status) -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_OnInitFailed(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnInitFailed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionChild::SendOnH2PushStream(
        const uint32_t& pushedStreamId,
        const nsCString& resourceUrl,
        const nsCString& requestString) -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_OnH2PushStream(Id());

    WriteIPDLParam(msg__, this, pushedStreamId);
    // Sentinel = 'pushedStreamId'
    (msg__)->WriteSentinel(731579811);
    WriteIPDLParam(msg__, this, resourceUrl);
    // Sentinel = 'resourceUrl'
    (msg__)->WriteSentinel(471270556);
    WriteIPDLParam(msg__, this, requestString);
    // Sentinel = 'requestString'
    (msg__)->WriteSentinel(650970497);




    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnH2PushStream", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpTransactionChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpTransactionChild::OnMessageReceived(const Message& msg__) -> PHttpTransactionChild::Result
{
    switch (msg__.type()) {
    case PHttpTransaction::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PHttpTransactionChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHttpTransaction'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PHttpTransactionMsgStart, actor);

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_Init__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_Init", OTHER);

            PickleIterator iter__{msg__};
            uint32_t caps{};
            HttpConnectionInfoCloneArgs aArgs{};
            nsHttpRequestHead reqHeaders{};
            mozilla::Maybe<IPCStream> requestBody{};
            uint64_t reqContentLength{};
            bool reqBodyIncludesHeaders{};
            uint64_t topLevelOuterContentWindowId{};
            uint8_t httpTrafficCategory{};
            uint64_t requestContextID{};
            uint32_t classOfService{};
            uint32_t initialRwin{};
            bool responseTimeoutEnabled{};
            uint64_t channelId{};
            bool hasTransactionObserver{};
            mozilla::Maybe<H2PushedStreamArg> pushedStreamArg{};
            mozilla::Maybe<PInputChannelThrottleQueueChild*> throttleQueue{};
            bool aIsDocumentLoad{};
            TimeStamp aRedirectStart{};
            TimeStamp aRedirectEnd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(caps)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'caps'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67502504)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'HttpConnectionInfoCloneArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HttpConnectionInfoCloneArgs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reqHeaders)))))) {
                FatalError("Error deserializing 'nsHttpRequestHead'");
                return MsgValueError;
            }
            // Sentinel = 'reqHeaders'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 367264773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsHttpRequestHead'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestBody)))))) {
                FatalError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            // Sentinel = 'requestBody'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 466814104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reqContentLength)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'reqContentLength'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 927794822)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reqBodyIncludesHeaders)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'reqBodyIncludesHeaders'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1689127114)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(topLevelOuterContentWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'topLevelOuterContentWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2779974491)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(httpTrafficCategory)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'httpTrafficCategory'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1295058878)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestContextID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'requestContextID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 956761724)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(classOfService)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'classOfService'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 704710045)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(initialRwin)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'initialRwin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 458818699)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(responseTimeoutEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'responseTimeoutEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1769408770)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(channelId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'channelId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301138823)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(hasTransactionObserver)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'hasTransactionObserver'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1727531275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pushedStreamArg)))))) {
                FatalError("Error deserializing 'H2PushedStreamArg?'");
                return MsgValueError;
            }
            // Sentinel = 'pushedStreamArg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 833160720)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'H2PushedStreamArg?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(throttleQueue)))))) {
                FatalError("Error deserializing 'PInputChannelThrottleQueue?'");
                return MsgValueError;
            }
            // Sentinel = 'throttleQueue'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 653919612)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PInputChannelThrottleQueue?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsDocumentLoad)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsDocumentLoad'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 774440413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRedirectStart)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'aRedirectStart'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 690554274)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRedirectEnd)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'aRedirectEnd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 505808043)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionChild*>(this))->RecvInit(std::move(caps), std::move(aArgs), std::move(reqHeaders), std::move(requestBody), std::move(reqContentLength), std::move(reqBodyIncludesHeaders), std::move(topLevelOuterContentWindowId), std::move(httpTrafficCategory), std::move(requestContextID), std::move(classOfService), std::move(initialRwin), std::move(responseTimeoutEnabled), std::move(channelId), std::move(hasTransactionObserver), std::move(pushedStreamArg), std::move(throttleQueue), std::move(aIsDocumentLoad), std::move(aRedirectStart), std::move(aRedirectEnd))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_CancelPump__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_CancelPump", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionChild*>(this))->RecvCancelPump(std::move(status))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_SuspendPump__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_SuspendPump", OTHER);

            if ((!((static_cast<HttpTransactionChild*>(this))->RecvSuspendPump()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_ResumePump__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_ResumePump", OTHER);

            if ((!((static_cast<HttpTransactionChild*>(this))->RecvResumePump()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_SetDNSWasRefreshed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_SetDNSWasRefreshed", OTHER);

            if ((!((static_cast<HttpTransactionChild*>(this))->RecvSetDNSWasRefreshed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_DontReuseConnection__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_DontReuseConnection", OTHER);

            if ((!((static_cast<HttpTransactionChild*>(this))->RecvDontReuseConnection()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_SetH2WSConnRefTaken__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_SetH2WSConnRefTaken", OTHER);

            if ((!((static_cast<HttpTransactionChild*>(this))->RecvSetH2WSConnRefTaken()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHttpTransactionChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpTransactionChild::Result
{
    return MsgNotKnown;
}

auto PHttpTransactionChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpTransactionChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHttpTransactionChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PHttpTransactionChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PHttpTransactionChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHttpTransaction", PHttpTransactionMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PHttpTransactionChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
