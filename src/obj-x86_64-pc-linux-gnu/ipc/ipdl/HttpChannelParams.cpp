//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "mozilla/net/HttpChannelParams.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HttpChannelOnStartRequestArgs|
//
namespace mozilla {
namespace net {
auto HttpChannelOnStartRequestArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(HttpChannelOnStartRequestArgs, altDataLength_) - offsetof(HttpChannelOnStartRequestArgs, cacheEntryId_)) == 8,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(HttpChannelOnStartRequestArgs, cacheKey_) - offsetof(HttpChannelOnStartRequestArgs, cacheFetchCount_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::HttpChannelOnStartRequestArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).channelStatus());
    // Sentinel = 'channelStatus'
    (aMsg)->WriteSentinel(618136926);
    WriteIPDLParam(aMsg, aActor, (aVar).loadInfoForwarder());
    // Sentinel = 'loadInfoForwarder'
    (aMsg)->WriteSentinel(1020528345);
    WriteIPDLParam(aMsg, aActor, (aVar).isFromCache());
    // Sentinel = 'isFromCache'
    (aMsg)->WriteSentinel(433718341);
    WriteIPDLParam(aMsg, aActor, (aVar).isRacing());
    // Sentinel = 'isRacing'
    (aMsg)->WriteSentinel(240124721);
    WriteIPDLParam(aMsg, aActor, (aVar).cacheEntryAvailable());
    // Sentinel = 'cacheEntryAvailable'
    (aMsg)->WriteSentinel(1254164360);
    WriteIPDLParam(aMsg, aActor, (aVar).securityInfoSerialization());
    // Sentinel = 'securityInfoSerialization'
    (aMsg)->WriteSentinel(2263026275);
    WriteIPDLParam(aMsg, aActor, (aVar).selfAddr());
    // Sentinel = 'selfAddr'
    (aMsg)->WriteSentinel(240321318);
    WriteIPDLParam(aMsg, aActor, (aVar).peerAddr());
    // Sentinel = 'peerAddr'
    (aMsg)->WriteSentinel(239928104);
    WriteIPDLParam(aMsg, aActor, (aVar).altDataType());
    // Sentinel = 'altDataType'
    (aMsg)->WriteSentinel(434504798);
    WriteIPDLParam(aMsg, aActor, (aVar).deliveringAltData());
    // Sentinel = 'deliveringAltData'
    (aMsg)->WriteSentinel(1039533765);
    WriteIPDLParam(aMsg, aActor, (aVar).applyConversion());
    // Sentinel = 'applyConversion'
    (aMsg)->WriteSentinel(837486157);
    WriteIPDLParam(aMsg, aActor, (aVar).isResolvedByTRR());
    // Sentinel = 'isResolvedByTRR'
    (aMsg)->WriteSentinel(811861460);
    WriteIPDLParam(aMsg, aActor, (aVar).timing());
    // Sentinel = 'timing'
    (aMsg)->WriteSentinel(150798985);
    WriteIPDLParam(aMsg, aActor, (aVar).allRedirectsSameOrigin());
    // Sentinel = 'allRedirectsSameOrigin'
    (aMsg)->WriteSentinel(1689716941);
    WriteIPDLParam(aMsg, aActor, (aVar).multiPartID());
    // Sentinel = 'multiPartID'
    (aMsg)->WriteSentinel(458622032);
    WriteIPDLParam(aMsg, aActor, (aVar).isLastPartOfMultiPart());
    // Sentinel = 'isLastPartOfMultiPart'
    (aMsg)->WriteSentinel(1534134367);
    WriteIPDLParam(aMsg, aActor, (aVar).openerPolicy());
    // Sentinel = 'openerPolicy'
    (aMsg)->WriteSentinel(542835962);
    WriteIPDLParam(aMsg, aActor, (aVar).appCacheGroupId());
    // Sentinel = 'appCacheGroupId'
    (aMsg)->WriteSentinel(778896848);
    WriteIPDLParam(aMsg, aActor, (aVar).appCacheClientId());
    // Sentinel = 'appCacheClientId'
    (aMsg)->WriteSentinel(874907170);
    WriteIPDLParam(aMsg, aActor, (aVar).overrideReferrerInfo());
    // Sentinel = 'overrideReferrerInfo'
    (aMsg)->WriteSentinel(1454704682);
    WriteIPDLParam(aMsg, aActor, (aVar).shouldWaitForOnStartRequestSent());
    // Sentinel = 'shouldWaitForOnStartRequestSent'
    (aMsg)->WriteSentinel(3372354714);
    WriteIPDLParam(aMsg, aActor, (aVar).cookie());
    // Sentinel = 'cookie'
    (aMsg)->WriteSentinel(146211451);
    WriteIPDLParam(aMsg, aActor, (aVar).dataFromSocketProcess());
    // Sentinel = 'dataFromSocketProcess'
    (aMsg)->WriteSentinel(1537869943);
    (aMsg)->WriteBytes((&((aVar).cacheEntryId())), 16);
    // Sentinel = 'cacheEntryId | altDataLength'
    (aMsg)->WriteSentinel(2550139533);
    (aMsg)->WriteBytes((&((aVar).cacheFetchCount())), 12);
    // Sentinel = 'cacheFetchCount | cacheExpirationTime | cacheKey'
    (aMsg)->WriteSentinel(3181515299);
    (aMsg)->WriteBytes((&((aVar).redirectCount())), 1);
    // Sentinel = 'redirectCount'
    (aMsg)->WriteSentinel(625608028);
}

auto IPDLParamTraits<mozilla::net::HttpChannelOnStartRequestArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->channelStatus())))))) {
        aActor->FatalError("Error deserializing 'channelStatus' (nsresult) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'channelStatus'
    if ((!((aMsg)->ReadSentinel(aIter, 618136926)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'channelStatus' (nsresult) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadInfoForwarder())))))) {
        aActor->FatalError("Error deserializing 'loadInfoForwarder' (ParentLoadInfoForwarderArgs) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'loadInfoForwarder'
    if ((!((aMsg)->ReadSentinel(aIter, 1020528345)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadInfoForwarder' (ParentLoadInfoForwarderArgs) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFromCache())))))) {
        aActor->FatalError("Error deserializing 'isFromCache' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'isFromCache'
    if ((!((aMsg)->ReadSentinel(aIter, 433718341)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFromCache' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isRacing())))))) {
        aActor->FatalError("Error deserializing 'isRacing' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'isRacing'
    if ((!((aMsg)->ReadSentinel(aIter, 240124721)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isRacing' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cacheEntryAvailable())))))) {
        aActor->FatalError("Error deserializing 'cacheEntryAvailable' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'cacheEntryAvailable'
    if ((!((aMsg)->ReadSentinel(aIter, 1254164360)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cacheEntryAvailable' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->securityInfoSerialization())))))) {
        aActor->FatalError("Error deserializing 'securityInfoSerialization' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'securityInfoSerialization'
    if ((!((aMsg)->ReadSentinel(aIter, 2263026275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'securityInfoSerialization' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->selfAddr())))))) {
        aActor->FatalError("Error deserializing 'selfAddr' (NetAddr) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'selfAddr'
    if ((!((aMsg)->ReadSentinel(aIter, 240321318)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'selfAddr' (NetAddr) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->peerAddr())))))) {
        aActor->FatalError("Error deserializing 'peerAddr' (NetAddr) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'peerAddr'
    if ((!((aMsg)->ReadSentinel(aIter, 239928104)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'peerAddr' (NetAddr) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->altDataType())))))) {
        aActor->FatalError("Error deserializing 'altDataType' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'altDataType'
    if ((!((aMsg)->ReadSentinel(aIter, 434504798)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'altDataType' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->deliveringAltData())))))) {
        aActor->FatalError("Error deserializing 'deliveringAltData' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'deliveringAltData'
    if ((!((aMsg)->ReadSentinel(aIter, 1039533765)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'deliveringAltData' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->applyConversion())))))) {
        aActor->FatalError("Error deserializing 'applyConversion' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'applyConversion'
    if ((!((aMsg)->ReadSentinel(aIter, 837486157)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'applyConversion' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isResolvedByTRR())))))) {
        aActor->FatalError("Error deserializing 'isResolvedByTRR' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'isResolvedByTRR'
    if ((!((aMsg)->ReadSentinel(aIter, 811861460)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isResolvedByTRR' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->timing())))))) {
        aActor->FatalError("Error deserializing 'timing' (ResourceTimingStructArgs) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'timing'
    if ((!((aMsg)->ReadSentinel(aIter, 150798985)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'timing' (ResourceTimingStructArgs) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allRedirectsSameOrigin())))))) {
        aActor->FatalError("Error deserializing 'allRedirectsSameOrigin' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'allRedirectsSameOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 1689716941)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allRedirectsSameOrigin' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->multiPartID())))))) {
        aActor->FatalError("Error deserializing 'multiPartID' (uint32_t?) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'multiPartID'
    if ((!((aMsg)->ReadSentinel(aIter, 458622032)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'multiPartID' (uint32_t?) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isLastPartOfMultiPart())))))) {
        aActor->FatalError("Error deserializing 'isLastPartOfMultiPart' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'isLastPartOfMultiPart'
    if ((!((aMsg)->ReadSentinel(aIter, 1534134367)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isLastPartOfMultiPart' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->openerPolicy())))))) {
        aActor->FatalError("Error deserializing 'openerPolicy' (CrossOriginOpenerPolicy) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'openerPolicy'
    if ((!((aMsg)->ReadSentinel(aIter, 542835962)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'openerPolicy' (CrossOriginOpenerPolicy) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->appCacheGroupId())))))) {
        aActor->FatalError("Error deserializing 'appCacheGroupId' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'appCacheGroupId'
    if ((!((aMsg)->ReadSentinel(aIter, 778896848)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'appCacheGroupId' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->appCacheClientId())))))) {
        aActor->FatalError("Error deserializing 'appCacheClientId' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'appCacheClientId'
    if ((!((aMsg)->ReadSentinel(aIter, 874907170)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'appCacheClientId' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->overrideReferrerInfo())))))) {
        aActor->FatalError("Error deserializing 'overrideReferrerInfo' (nsIReferrerInfo) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'overrideReferrerInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1454704682)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'overrideReferrerInfo' (nsIReferrerInfo) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->shouldWaitForOnStartRequestSent())))))) {
        aActor->FatalError("Error deserializing 'shouldWaitForOnStartRequestSent' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'shouldWaitForOnStartRequestSent'
    if ((!((aMsg)->ReadSentinel(aIter, 3372354714)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'shouldWaitForOnStartRequestSent' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cookie())))))) {
        aActor->FatalError("Error deserializing 'cookie' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'cookie'
    if ((!((aMsg)->ReadSentinel(aIter, 146211451)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cookie' (nsCString) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dataFromSocketProcess())))))) {
        aActor->FatalError("Error deserializing 'dataFromSocketProcess' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    // Sentinel = 'dataFromSocketProcess'
    if ((!((aMsg)->ReadSentinel(aIter, 1537869943)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dataFromSocketProcess' (bool) member of 'HttpChannelOnStartRequestArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->cacheEntryId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'cacheEntryId | altDataLength'
    if ((!((aMsg)->ReadSentinel(aIter, 2550139533)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->cacheFetchCount())), 12)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'cacheFetchCount | cacheExpirationTime | cacheKey'
    if ((!((aMsg)->ReadSentinel(aIter, 3181515299)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->redirectCount())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'redirectCount'
    if ((!((aMsg)->ReadSentinel(aIter, 625608028)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
