//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundFileHandleParent.h"
#include "mozilla/dom/PBackgroundFileHandleChild.h"
#include "mozilla/dom/PBackgroundFileRequest.h"
#include "mozilla/dom/PBackgroundFileRequestParent.h"
#include "mozilla/dom/PBackgroundFileRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PBackgroundFileRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundFileRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundFileRequestChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Progress(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Progress__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PBackgroundFileRequest
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileRequestMetadata|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileRequestMetadata>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).lastModified());
    // Sentinel = 'lastModified'
    (aMsg)->WriteSentinel(531629270);
}

auto IPDLParamTraits<mozilla::dom::FileRequestMetadata>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (uint64_t?) member of 'FileRequestMetadata'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (uint64_t?) member of 'FileRequestMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->lastModified())))))) {
        aActor->FatalError("Error deserializing 'lastModified' (int64_t?) member of 'FileRequestMetadata'");
        return false;
    }
    // Sentinel = 'lastModified'
    if ((!((aMsg)->ReadSentinel(aIter, 531629270)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'lastModified' (int64_t?) member of 'FileRequestMetadata'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileRequestGetMetadataResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileRequestGetMetadataResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).metadata());
    // Sentinel = 'metadata'
    (aMsg)->WriteSentinel(248251202);
}

auto IPDLParamTraits<mozilla::dom::FileRequestGetMetadataResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->metadata())))))) {
        aActor->FatalError("Error deserializing 'metadata' (FileRequestMetadata) member of 'FileRequestGetMetadataResponse'");
        return false;
    }
    // Sentinel = 'metadata'
    if ((!((aMsg)->ReadSentinel(aIter, 248251202)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'metadata' (FileRequestMetadata) member of 'FileRequestGetMetadataResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileRequestReadResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileRequestReadResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::FileRequestReadResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsCString) member of 'FileRequestReadResponse'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsCString) member of 'FileRequestReadResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileRequestWriteResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileRequestWriteResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::FileRequestWriteResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileRequestTruncateResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileRequestTruncateResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::FileRequestTruncateResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileRequestFlushResponse|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileRequestFlushResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::FileRequestFlushResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union FileRequestResponse|
//
namespace mozilla {
namespace dom {
auto FileRequestResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TFileRequestGetMetadataResponse:
        {
            (ptr_FileRequestGetMetadataResponse())->~FileRequestGetMetadataResponse__tdef();
            break;
        }
    case TFileRequestReadResponse:
        {
            (ptr_FileRequestReadResponse())->~FileRequestReadResponse__tdef();
            break;
        }
    case TFileRequestWriteResponse:
        {
            (ptr_FileRequestWriteResponse())->~FileRequestWriteResponse__tdef();
            break;
        }
    case TFileRequestTruncateResponse:
        {
            (ptr_FileRequestTruncateResponse())->~FileRequestTruncateResponse__tdef();
            break;
        }
    case TFileRequestFlushResponse:
        {
            (ptr_FileRequestFlushResponse())->~FileRequestFlushResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(const FileRequestGetMetadataResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestGetMetadataResponse()) FileRequestGetMetadataResponse(aOther);
    mType = TFileRequestGetMetadataResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(FileRequestGetMetadataResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestGetMetadataResponse()) FileRequestGetMetadataResponse(std::move(aOther));
    mType = TFileRequestGetMetadataResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(const FileRequestReadResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestReadResponse()) FileRequestReadResponse(aOther);
    mType = TFileRequestReadResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(FileRequestReadResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestReadResponse()) FileRequestReadResponse(std::move(aOther));
    mType = TFileRequestReadResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(const FileRequestWriteResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestWriteResponse()) FileRequestWriteResponse(aOther);
    mType = TFileRequestWriteResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(FileRequestWriteResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestWriteResponse()) FileRequestWriteResponse(std::move(aOther));
    mType = TFileRequestWriteResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(const FileRequestTruncateResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestTruncateResponse()) FileRequestTruncateResponse(aOther);
    mType = TFileRequestTruncateResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(FileRequestTruncateResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestTruncateResponse()) FileRequestTruncateResponse(std::move(aOther));
    mType = TFileRequestTruncateResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(const FileRequestFlushResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestFlushResponse()) FileRequestFlushResponse(aOther);
    mType = TFileRequestFlushResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(FileRequestFlushResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FileRequestFlushResponse()) FileRequestFlushResponse(std::move(aOther));
    mType = TFileRequestFlushResponse;
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(const FileRequestResponse& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TFileRequestGetMetadataResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestGetMetadataResponse()) FileRequestGetMetadataResponse((aOther).get_FileRequestGetMetadataResponse());
            break;
        }
    case TFileRequestReadResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestReadResponse()) FileRequestReadResponse((aOther).get_FileRequestReadResponse());
            break;
        }
    case TFileRequestWriteResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestWriteResponse()) FileRequestWriteResponse((aOther).get_FileRequestWriteResponse());
            break;
        }
    case TFileRequestTruncateResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestTruncateResponse()) FileRequestTruncateResponse((aOther).get_FileRequestTruncateResponse());
            break;
        }
    case TFileRequestFlushResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestFlushResponse()) FileRequestFlushResponse((aOther).get_FileRequestFlushResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT FileRequestResponse::FileRequestResponse(FileRequestResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestGetMetadataResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestGetMetadataResponse()) FileRequestGetMetadataResponse(std::move((aOther).get_FileRequestGetMetadataResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestReadResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestReadResponse()) FileRequestReadResponse(std::move((aOther).get_FileRequestReadResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestWriteResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestWriteResponse()) FileRequestWriteResponse(std::move((aOther).get_FileRequestWriteResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestTruncateResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestTruncateResponse()) FileRequestTruncateResponse(std::move((aOther).get_FileRequestTruncateResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestFlushResponse:
        {
            new (mozilla::KnownNotNull, ptr_FileRequestFlushResponse()) FileRequestFlushResponse(std::move((aOther).get_FileRequestFlushResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

FileRequestResponse::~FileRequestResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto FileRequestResponse::operator=(const nsresult& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto FileRequestResponse::operator=(nsresult&& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto FileRequestResponse::operator=(const FileRequestGetMetadataResponse& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestGetMetadataResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestGetMetadataResponse()) FileRequestGetMetadataResponse;
    }
    (*(ptr_FileRequestGetMetadataResponse())) = aRhs;
    mType = TFileRequestGetMetadataResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(FileRequestGetMetadataResponse&& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestGetMetadataResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestGetMetadataResponse()) FileRequestGetMetadataResponse;
    }
    (*(ptr_FileRequestGetMetadataResponse())) = std::move(aRhs);
    mType = TFileRequestGetMetadataResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(const FileRequestReadResponse& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestReadResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestReadResponse()) FileRequestReadResponse;
    }
    (*(ptr_FileRequestReadResponse())) = aRhs;
    mType = TFileRequestReadResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(FileRequestReadResponse&& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestReadResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestReadResponse()) FileRequestReadResponse;
    }
    (*(ptr_FileRequestReadResponse())) = std::move(aRhs);
    mType = TFileRequestReadResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(const FileRequestWriteResponse& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestWriteResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestWriteResponse()) FileRequestWriteResponse;
    }
    (*(ptr_FileRequestWriteResponse())) = aRhs;
    mType = TFileRequestWriteResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(FileRequestWriteResponse&& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestWriteResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestWriteResponse()) FileRequestWriteResponse;
    }
    (*(ptr_FileRequestWriteResponse())) = std::move(aRhs);
    mType = TFileRequestWriteResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(const FileRequestTruncateResponse& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestTruncateResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestTruncateResponse()) FileRequestTruncateResponse;
    }
    (*(ptr_FileRequestTruncateResponse())) = aRhs;
    mType = TFileRequestTruncateResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(FileRequestTruncateResponse&& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestTruncateResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestTruncateResponse()) FileRequestTruncateResponse;
    }
    (*(ptr_FileRequestTruncateResponse())) = std::move(aRhs);
    mType = TFileRequestTruncateResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(const FileRequestFlushResponse& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestFlushResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestFlushResponse()) FileRequestFlushResponse;
    }
    (*(ptr_FileRequestFlushResponse())) = aRhs;
    mType = TFileRequestFlushResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(FileRequestFlushResponse&& aRhs) -> FileRequestResponse&
{
    if (MaybeDestroy(TFileRequestFlushResponse)) {
        new (mozilla::KnownNotNull, ptr_FileRequestFlushResponse()) FileRequestFlushResponse;
    }
    (*(ptr_FileRequestFlushResponse())) = std::move(aRhs);
    mType = TFileRequestFlushResponse;
    return (*(this));
}

auto FileRequestResponse::operator=(const FileRequestResponse& aRhs) -> FileRequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TFileRequestGetMetadataResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestGetMetadataResponse()) FileRequestGetMetadataResponse;
            }
            (*(ptr_FileRequestGetMetadataResponse())) = (aRhs).get_FileRequestGetMetadataResponse();
            break;
        }
    case TFileRequestReadResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestReadResponse()) FileRequestReadResponse;
            }
            (*(ptr_FileRequestReadResponse())) = (aRhs).get_FileRequestReadResponse();
            break;
        }
    case TFileRequestWriteResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestWriteResponse()) FileRequestWriteResponse;
            }
            (*(ptr_FileRequestWriteResponse())) = (aRhs).get_FileRequestWriteResponse();
            break;
        }
    case TFileRequestTruncateResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestTruncateResponse()) FileRequestTruncateResponse;
            }
            (*(ptr_FileRequestTruncateResponse())) = (aRhs).get_FileRequestTruncateResponse();
            break;
        }
    case TFileRequestFlushResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestFlushResponse()) FileRequestFlushResponse;
            }
            (*(ptr_FileRequestFlushResponse())) = (aRhs).get_FileRequestFlushResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto FileRequestResponse::operator=(FileRequestResponse&& aRhs) -> FileRequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestGetMetadataResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestGetMetadataResponse()) FileRequestGetMetadataResponse;
            }
            (*(ptr_FileRequestGetMetadataResponse())) = std::move((aRhs).get_FileRequestGetMetadataResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestReadResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestReadResponse()) FileRequestReadResponse;
            }
            (*(ptr_FileRequestReadResponse())) = std::move((aRhs).get_FileRequestReadResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestWriteResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestWriteResponse()) FileRequestWriteResponse;
            }
            (*(ptr_FileRequestWriteResponse())) = std::move((aRhs).get_FileRequestWriteResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestTruncateResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestTruncateResponse()) FileRequestTruncateResponse;
            }
            (*(ptr_FileRequestTruncateResponse())) = std::move((aRhs).get_FileRequestTruncateResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFileRequestFlushResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FileRequestFlushResponse()) FileRequestFlushResponse;
            }
            (*(ptr_FileRequestFlushResponse())) = std::move((aRhs).get_FileRequestFlushResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FileRequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::FileRequestResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'FileRequestResponse'
    (aMsg)->WriteSentinel(1260324793);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TFileRequestGetMetadataResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileRequestGetMetadataResponse());
            // Sentinel = 'TFileRequestGetMetadataResponse'
            (aMsg)->WriteSentinel(3233352782);
            return;
        }
    case union__::TFileRequestReadResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileRequestReadResponse());
            // Sentinel = 'TFileRequestReadResponse'
            (aMsg)->WriteSentinel(1948584329);
            return;
        }
    case union__::TFileRequestWriteResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileRequestWriteResponse());
            // Sentinel = 'TFileRequestWriteResponse'
            (aMsg)->WriteSentinel(2143357464);
            return;
        }
    case union__::TFileRequestTruncateResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileRequestTruncateResponse());
            // Sentinel = 'TFileRequestTruncateResponse'
            (aMsg)->WriteSentinel(2691566419);
            return;
        }
    case union__::TFileRequestFlushResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FileRequestFlushResponse());
            // Sentinel = 'TFileRequestFlushResponse'
            (aMsg)->WriteSentinel(2133920271);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::FileRequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::FileRequestResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union FileRequestResponse");
        return false;
    }
    // Sentinel = 'FileRequestResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 1260324793)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union FileRequestResponse");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union FileRequestResponse");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union FileRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TFileRequestGetMetadataResponse:
        {
            mozilla::dom::FileRequestGetMetadataResponse tmp = mozilla::dom::FileRequestGetMetadataResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileRequestGetMetadataResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileRequestGetMetadataResponse of union FileRequestResponse");
                return false;
            }
            // Sentinel = 'TFileRequestGetMetadataResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 3233352782)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileRequestGetMetadataResponse of union FileRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TFileRequestReadResponse:
        {
            mozilla::dom::FileRequestReadResponse tmp = mozilla::dom::FileRequestReadResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileRequestReadResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileRequestReadResponse of union FileRequestResponse");
                return false;
            }
            // Sentinel = 'TFileRequestReadResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1948584329)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileRequestReadResponse of union FileRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TFileRequestWriteResponse:
        {
            mozilla::dom::FileRequestWriteResponse tmp = mozilla::dom::FileRequestWriteResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileRequestWriteResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileRequestWriteResponse of union FileRequestResponse");
                return false;
            }
            // Sentinel = 'TFileRequestWriteResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2143357464)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileRequestWriteResponse of union FileRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TFileRequestTruncateResponse:
        {
            mozilla::dom::FileRequestTruncateResponse tmp = mozilla::dom::FileRequestTruncateResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileRequestTruncateResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileRequestTruncateResponse of union FileRequestResponse");
                return false;
            }
            // Sentinel = 'TFileRequestTruncateResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2691566419)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileRequestTruncateResponse of union FileRequestResponse");
                return false;
            }
            return true;
        }
    case union__::TFileRequestFlushResponse:
        {
            mozilla::dom::FileRequestFlushResponse tmp = mozilla::dom::FileRequestFlushResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FileRequestFlushResponse())))))) {
                aActor->FatalError("Error deserializing variant TFileRequestFlushResponse of union FileRequestResponse");
                return false;
            }
            // Sentinel = 'TFileRequestFlushResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2133920271)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFileRequestFlushResponse of union FileRequestResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
