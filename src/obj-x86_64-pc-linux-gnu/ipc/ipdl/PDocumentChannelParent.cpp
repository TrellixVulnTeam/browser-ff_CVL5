//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PDocumentChannelParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/DocumentChannelParent.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "nsHttpHeaderArray.h"

#include "mozilla/net/PNeckoParent.h"
#include "mozilla/extensions/PStreamFilterParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PDocumentChannelParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PDocumentChannelParent::PDocumentChannelParent() :
    mozilla::ipc::IProtocol(PDocumentChannelMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PDocumentChannelParent);
}

PDocumentChannelParent::~PDocumentChannelParent()
{
    MOZ_COUNT_DTOR(PDocumentChannelParent);
}

auto PDocumentChannelParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PDocumentChannelParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PDocumentChannelParent::SendFailedAsyncOpen(const nsresult& status) -> bool
{
    IPC::Message* msg__ = PDocumentChannel::Msg_FailedAsyncOpen(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocumentChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocumentChannel::Msg_FailedAsyncOpen", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocumentChannelParent::SendDisconnectChildListeners(
        const nsresult& aStatus,
        const nsresult& aLoadGroupReason,
        const bool& aSwitchedProcess) -> bool
{
    IPC::Message* msg__ = PDocumentChannel::Msg_DisconnectChildListeners(Id());

    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);
    WriteIPDLParam(msg__, this, aLoadGroupReason);
    // Sentinel = 'aLoadGroupReason'
    (msg__)->WriteSentinel(879822423);
    WriteIPDLParam(msg__, this, aSwitchedProcess);
    // Sentinel = 'aSwitchedProcess'
    (msg__)->WriteSentinel(912066172);




    if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocumentChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocumentChannel::Msg_DisconnectChildListeners", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocumentChannelParent::SendRedirectToRealChannel(
        const RedirectToRealChannelArgs& args,
        nsTArray<Endpoint<mozilla::extensions::PStreamFilterParent>>&& aEndpoint,
        mozilla::ipc::ResolveCallback<nsresult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PDocumentChannel::Msg_RedirectToRealChannel(Id());

    WriteIPDLParam(msg__, this, args);
    // Sentinel = 'args'
    (msg__)->WriteSentinel(69140910);
    WriteIPDLParam(msg__, this, std::move(aEndpoint));
    // Sentinel = 'aEndpoint'
    (msg__)->WriteSentinel(292225955);




    if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocumentChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocumentChannel::Msg_RedirectToRealChannel", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PDocumentChannelParent::SendRedirectToRealChannel(
        const RedirectToRealChannelArgs& args,
        nsTArray<Endpoint<mozilla::extensions::PStreamFilterParent>>&& aEndpoint) -> RefPtr<RedirectToRealChannelPromise>
{
    RefPtr<MozPromise<nsresult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsresult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendRedirectToRealChannel(std::move(args), std::move(aEndpoint), [promise__](nsresult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PDocumentChannelParent::SendUpgradeObjectLoad(
        mozilla::ipc::ResolveCallback<MaybeDiscardedBrowsingContext>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PDocumentChannel::Msg_UpgradeObjectLoad(Id());





    if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocumentChannelParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocumentChannel::Msg_UpgradeObjectLoad", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PDocumentChannelParent::SendUpgradeObjectLoad() -> RefPtr<UpgradeObjectLoadPromise>
{
    RefPtr<MozPromise<MaybeDiscardedBrowsingContext, ResponseRejectReason, true>::Private> promise__ = new MozPromise<MaybeDiscardedBrowsingContext, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendUpgradeObjectLoad([promise__](MaybeDiscardedBrowsingContext&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PDocumentChannelParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PDocumentChannelParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PDocumentChannelParent::OnMessageReceived(const Message& msg__) -> PDocumentChannelParent::Result
{
    switch (msg__.type()) {
    case PDocumentChannel::Msg_Cancel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocumentChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocumentChannel::Msg_Cancel", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<DocumentChannelParent*>(this))->RecvCancel(std::move(status))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocumentChannel::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocumentChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocumentChannel::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PDocumentChannelParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PDocumentChannel'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PDocumentChannel'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PDocumentChannel'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<DocumentChannelParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PDocumentChannelMsgStart, actor);

            return MsgProcessed;
        }
    case PDocumentChannel::Reply_RedirectToRealChannel__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocumentChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocumentChannel::Msg_RedirectToRealChannel", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsresult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsresult rv{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rv)))))) {
                    FatalError("Error deserializing 'nsresult'");
                    return MsgValueError;
                }
                // Sentinel = 'rv'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 22806761)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(rv));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PDocumentChannel::Reply_UpgradeObjectLoad__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocumentChannelParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocumentChannelParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocumentChannel::Msg_UpgradeObjectLoad", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<MaybeDiscardedBrowsingContext> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                MaybeDiscardedBrowsingContext frameContext{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(frameContext)))))) {
                    FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                    return MsgValueError;
                }
                // Sentinel = 'frameContext'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 528024817)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(frameContext));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PDocumentChannelParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PDocumentChannelParent::Result
{
    return MsgNotKnown;
}

auto PDocumentChannelParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PDocumentChannelParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PDocumentChannelParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PDocumentChannelParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PDocumentChannelParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PDocumentChannel", PDocumentChannelMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PDocumentChannelParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
