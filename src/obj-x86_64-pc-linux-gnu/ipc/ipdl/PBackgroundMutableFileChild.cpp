//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/dom/filehandle/SerializationHelpers.h"
#include "mozilla/dom/indexedDB/ActorsChild.h"

#include "mozilla/dom/PBackgroundFileHandleChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBackgroundMutableFileChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundMutableFileChild::PBackgroundMutableFileChild() :
    mozilla::ipc::IProtocol(PBackgroundMutableFileMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBackgroundMutableFileChild);
}

PBackgroundMutableFileChild::~PBackgroundMutableFileChild()
{
    MOZ_COUNT_DTOR(PBackgroundMutableFileChild);
}

auto PBackgroundMutableFileChild::Manager() const -> PBackgroundIDBDatabaseChild*
{
    return static_cast<PBackgroundIDBDatabaseChild*>(IProtocol::Manager());
}

auto PBackgroundMutableFileChild::ManagedPBackgroundFileHandleChild(nsTArray<PBackgroundFileHandleChild*>& aArr) const -> void
{
    mManagedPBackgroundFileHandleChild.ToArray(aArr);
}

auto PBackgroundMutableFileChild::ManagedPBackgroundFileHandleChild() const -> const ManagedContainer<PBackgroundFileHandleChild>&
{
    return mManagedPBackgroundFileHandleChild;
}

auto PBackgroundMutableFileChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundFileHandleChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundFileHandleChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundMutableFileChild::OpenPBackgroundFileHandleEndpoint(PBackgroundFileHandleChild* aActor) -> ManagedEndpoint<PBackgroundFileHandleParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundFileHandleChild actor");
        return ManagedEndpoint<PBackgroundFileHandleParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundFileHandleChild.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundFileHandleParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundMutableFileChild::BindPBackgroundFileHandleEndpoint(
        ManagedEndpoint<PBackgroundFileHandleChild> aEndpoint,
        PBackgroundFileHandleChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundFileHandleChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundFileHandleChild.PutEntry(aActor);

    return true;
}

auto PBackgroundMutableFileChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundMutableFile::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundMutableFileChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundMutableFile::Msg_DeleteMe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundMutableFileChild::SendPBackgroundFileHandleConstructor(const FileMode& mode) -> PBackgroundFileHandleChild*
{
    PBackgroundFileHandleChild* actor = (static_cast<indexedDB::BackgroundMutableFileChild*>(this))->AllocPBackgroundFileHandleChild(mode);
    return SendPBackgroundFileHandleConstructor(actor, mode);
}

auto PBackgroundMutableFileChild::SendPBackgroundFileHandleConstructor(
        PBackgroundFileHandleChild* actor,
        const FileMode& mode) -> PBackgroundFileHandleChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundFileHandleChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundFileHandleChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundMutableFile::Msg_PBackgroundFileHandleConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, mode);
    // Sentinel = 'mode'
    (msg__)->WriteSentinel(70386086);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundMutableFileChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundMutableFile::Msg_PBackgroundFileHandleConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundFileHandleChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundFileHandleMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundMutableFileChild::SendGetFileId(int64_t* fileId) -> bool
{
    IPC::Message* msg__ = PBackgroundMutableFile::Msg_GetFileId(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundMutableFileChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundMutableFile::Msg_GetFileId", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBackgroundMutableFile::Msg_GetFileId", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundMutableFileChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, fileId)))) {
        FatalError("Error deserializing 'int64_t'");
        return false;
    }
    // Sentinel = 'fileId'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 139199054)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBackgroundMutableFileChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundFileHandleMsgStart:
{
            PBackgroundFileHandleChild* actor = static_cast<PBackgroundFileHandleChild*>(aListener);
            auto& container = mManagedPBackgroundFileHandleChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundMutableFileChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundFileHandleMsgStart:
        static_cast<indexedDB::BackgroundMutableFileChild*>(this)->DeallocPBackgroundFileHandleChild(static_cast<PBackgroundFileHandleChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundMutableFileChild::OnMessageReceived(const Message& msg__) -> PBackgroundMutableFileChild::Result
{
    switch (msg__.type()) {
    case PBackgroundMutableFile::Reply_PBackgroundFileHandleConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundMutableFile::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundMutableFileChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundMutableFileChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundMutableFile::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBackgroundMutableFileChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBackgroundMutableFile'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBackgroundMutableFile'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundMutableFile'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<indexedDB::BackgroundMutableFileChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBackgroundMutableFileMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundMutableFileChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundMutableFileChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundMutableFileChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundMutableFileChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundMutableFileChild::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundFileHandleChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundFileHandleChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundFileHandleChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundFileHandleChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundMutableFileChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundMutableFileChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundMutableFile", PBackgroundMutableFileMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundMutableFileChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
