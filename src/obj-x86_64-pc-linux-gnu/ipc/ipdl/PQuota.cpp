//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/quota/SerializationHelpers.h"
#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/quota/PQuotaRequestParent.h"
#include "mozilla/dom/quota/PQuotaRequestChild.h"
#include "mozilla/dom/quota/PQuotaUsageRequestParent.h"
#include "mozilla/dom/quota/PQuotaUsageRequestChild.h"
#include "mozilla/dom/quota/PQuota.h"
#include "mozilla/dom/quota/PQuotaParent.h"
#include "mozilla/dom/quota/PQuotaChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace quota {
namespace PQuota {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::quota::PQuotaParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::quota::PQuotaChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PQuotaUsageRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PQuotaUsageRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PQuotaUsageRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PQuotaUsageRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PQuotaRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PQuotaRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PQuotaRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PQuotaRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_StartIdleMaintenance(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StartIdleMaintenance__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_StopIdleMaintenance(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StopIdleMaintenance__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AbortOperationsForProcess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AbortOperationsForProcess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PQuota
} // namespace quota
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageNameParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::StorageNameParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::StorageNameParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageInitializedParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::StorageInitializedParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::StorageInitializedParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TemporaryStorageInitializedParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::TemporaryStorageInitializedParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::TemporaryStorageInitializedParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InitParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::InitParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::InitParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InitTemporaryStorageParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::InitTemporaryStorageParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::InitTemporaryStorageParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InitializePersistentOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::InitializePersistentOriginParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
}

auto IPDLParamTraits<mozilla::dom::quota::InitializePersistentOriginParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'InitializePersistentOriginParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'InitializePersistentOriginParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InitializeTemporaryOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::InitializeTemporaryOriginParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).persistenceType());
    // Sentinel = 'persistenceType'
    (aMsg)->WriteSentinel(853345864);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
}

auto IPDLParamTraits<mozilla::dom::quota::InitializeTemporaryOriginParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->persistenceType())))))) {
        aActor->FatalError("Error deserializing 'persistenceType' (PersistenceType) member of 'InitializeTemporaryOriginParams'");
        return false;
    }
    // Sentinel = 'persistenceType'
    if ((!((aMsg)->ReadSentinel(aIter, 853345864)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'persistenceType' (PersistenceType) member of 'InitializeTemporaryOriginParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'InitializeTemporaryOriginParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'InitializeTemporaryOriginParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct AllUsageParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::AllUsageParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).getAll());
    // Sentinel = 'getAll'
    (aMsg)->WriteSentinel(138412634);
}

auto IPDLParamTraits<mozilla::dom::quota::AllUsageParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->getAll())))))) {
        aActor->FatalError("Error deserializing 'getAll' (bool) member of 'AllUsageParams'");
        return false;
    }
    // Sentinel = 'getAll'
    if ((!((aMsg)->ReadSentinel(aIter, 138412634)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'getAll' (bool) member of 'AllUsageParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OriginUsageParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::OriginUsageParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).fromMemory());
    // Sentinel = 'fromMemory'
    (aMsg)->WriteSentinel(379585582);
}

auto IPDLParamTraits<mozilla::dom::quota::OriginUsageParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'OriginUsageParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'OriginUsageParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fromMemory())))))) {
        aActor->FatalError("Error deserializing 'fromMemory' (bool) member of 'OriginUsageParams'");
        return false;
    }
    // Sentinel = 'fromMemory'
    if ((!((aMsg)->ReadSentinel(aIter, 379585582)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fromMemory' (bool) member of 'OriginUsageParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union UsageRequestParams|
//
namespace mozilla {
namespace dom {
namespace quota {
auto UsageRequestParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TAllUsageParams:
        {
            (ptr_AllUsageParams())->~AllUsageParams__tdef();
            break;
        }
    case TOriginUsageParams:
        {
            (ptr_OriginUsageParams())->~OriginUsageParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT UsageRequestParams::UsageRequestParams(const AllUsageParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_AllUsageParams()) AllUsageParams(aOther);
    mType = TAllUsageParams;
}

MOZ_IMPLICIT UsageRequestParams::UsageRequestParams(AllUsageParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_AllUsageParams()) AllUsageParams(std::move(aOther));
    mType = TAllUsageParams;
}

MOZ_IMPLICIT UsageRequestParams::UsageRequestParams(const OriginUsageParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_OriginUsageParams()) OriginUsageParams(aOther);
    mType = TOriginUsageParams;
}

MOZ_IMPLICIT UsageRequestParams::UsageRequestParams(OriginUsageParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_OriginUsageParams()) OriginUsageParams(std::move(aOther));
    mType = TOriginUsageParams;
}

MOZ_IMPLICIT UsageRequestParams::UsageRequestParams(const UsageRequestParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TAllUsageParams:
        {
            new (mozilla::KnownNotNull, ptr_AllUsageParams()) AllUsageParams((aOther).get_AllUsageParams());
            break;
        }
    case TOriginUsageParams:
        {
            new (mozilla::KnownNotNull, ptr_OriginUsageParams()) OriginUsageParams((aOther).get_OriginUsageParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT UsageRequestParams::UsageRequestParams(UsageRequestParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TAllUsageParams:
        {
            new (mozilla::KnownNotNull, ptr_AllUsageParams()) AllUsageParams(std::move((aOther).get_AllUsageParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TOriginUsageParams:
        {
            new (mozilla::KnownNotNull, ptr_OriginUsageParams()) OriginUsageParams(std::move((aOther).get_OriginUsageParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

UsageRequestParams::~UsageRequestParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto UsageRequestParams::operator=(const AllUsageParams& aRhs) -> UsageRequestParams&
{
    if (MaybeDestroy(TAllUsageParams)) {
        new (mozilla::KnownNotNull, ptr_AllUsageParams()) AllUsageParams;
    }
    (*(ptr_AllUsageParams())) = aRhs;
    mType = TAllUsageParams;
    return (*(this));
}

auto UsageRequestParams::operator=(AllUsageParams&& aRhs) -> UsageRequestParams&
{
    if (MaybeDestroy(TAllUsageParams)) {
        new (mozilla::KnownNotNull, ptr_AllUsageParams()) AllUsageParams;
    }
    (*(ptr_AllUsageParams())) = std::move(aRhs);
    mType = TAllUsageParams;
    return (*(this));
}

auto UsageRequestParams::operator=(const OriginUsageParams& aRhs) -> UsageRequestParams&
{
    if (MaybeDestroy(TOriginUsageParams)) {
        new (mozilla::KnownNotNull, ptr_OriginUsageParams()) OriginUsageParams;
    }
    (*(ptr_OriginUsageParams())) = aRhs;
    mType = TOriginUsageParams;
    return (*(this));
}

auto UsageRequestParams::operator=(OriginUsageParams&& aRhs) -> UsageRequestParams&
{
    if (MaybeDestroy(TOriginUsageParams)) {
        new (mozilla::KnownNotNull, ptr_OriginUsageParams()) OriginUsageParams;
    }
    (*(ptr_OriginUsageParams())) = std::move(aRhs);
    mType = TOriginUsageParams;
    return (*(this));
}

auto UsageRequestParams::operator=(const UsageRequestParams& aRhs) -> UsageRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TAllUsageParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_AllUsageParams()) AllUsageParams;
            }
            (*(ptr_AllUsageParams())) = (aRhs).get_AllUsageParams();
            break;
        }
    case TOriginUsageParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OriginUsageParams()) OriginUsageParams;
            }
            (*(ptr_OriginUsageParams())) = (aRhs).get_OriginUsageParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto UsageRequestParams::operator=(UsageRequestParams&& aRhs) -> UsageRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TAllUsageParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_AllUsageParams()) AllUsageParams;
            }
            (*(ptr_AllUsageParams())) = std::move((aRhs).get_AllUsageParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TOriginUsageParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_OriginUsageParams()) OriginUsageParams;
            }
            (*(ptr_OriginUsageParams())) = std::move((aRhs).get_OriginUsageParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::UsageRequestParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::quota::UsageRequestParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'UsageRequestParams'
    (aMsg)->WriteSentinel(1139738435);

    switch (type) {
    case union__::TAllUsageParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_AllUsageParams());
            // Sentinel = 'TAllUsageParams'
            (aMsg)->WriteSentinel(748357063);
            return;
        }
    case union__::TOriginUsageParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_OriginUsageParams());
            // Sentinel = 'TOriginUsageParams'
            (aMsg)->WriteSentinel(1109722902);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::quota::UsageRequestParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::quota::UsageRequestParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union UsageRequestParams");
        return false;
    }
    // Sentinel = 'UsageRequestParams'
    if ((!((aMsg)->ReadSentinel(aIter, 1139738435)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union UsageRequestParams");
        return false;
    }

    switch (type) {
    case union__::TAllUsageParams:
        {
            mozilla::dom::quota::AllUsageParams tmp = mozilla::dom::quota::AllUsageParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_AllUsageParams())))))) {
                aActor->FatalError("Error deserializing variant TAllUsageParams of union UsageRequestParams");
                return false;
            }
            // Sentinel = 'TAllUsageParams'
            if ((!((aMsg)->ReadSentinel(aIter, 748357063)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TAllUsageParams of union UsageRequestParams");
                return false;
            }
            return true;
        }
    case union__::TOriginUsageParams:
        {
            mozilla::dom::quota::OriginUsageParams tmp = mozilla::dom::quota::OriginUsageParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_OriginUsageParams())))))) {
                aActor->FatalError("Error deserializing variant TOriginUsageParams of union UsageRequestParams");
                return false;
            }
            // Sentinel = 'TOriginUsageParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1109722902)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TOriginUsageParams of union UsageRequestParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClearResetOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ClearResetOriginParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).persistenceType());
    // Sentinel = 'persistenceType'
    (aMsg)->WriteSentinel(853345864);
    WriteIPDLParam(aMsg, aActor, (aVar).persistenceTypeIsExplicit());
    // Sentinel = 'persistenceTypeIsExplicit'
    (aMsg)->WriteSentinel(2261846598);
    WriteIPDLParam(aMsg, aActor, (aVar).clientType());
    // Sentinel = 'clientType'
    (aMsg)->WriteSentinel(378995746);
    WriteIPDLParam(aMsg, aActor, (aVar).clientTypeIsExplicit());
    // Sentinel = 'clientTypeIsExplicit'
    (aMsg)->WriteSentinel(1427048480);
}

auto IPDLParamTraits<mozilla::dom::quota::ClearResetOriginParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'ClearResetOriginParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'ClearResetOriginParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->persistenceType())))))) {
        aActor->FatalError("Error deserializing 'persistenceType' (PersistenceType) member of 'ClearResetOriginParams'");
        return false;
    }
    // Sentinel = 'persistenceType'
    if ((!((aMsg)->ReadSentinel(aIter, 853345864)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'persistenceType' (PersistenceType) member of 'ClearResetOriginParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->persistenceTypeIsExplicit())))))) {
        aActor->FatalError("Error deserializing 'persistenceTypeIsExplicit' (bool) member of 'ClearResetOriginParams'");
        return false;
    }
    // Sentinel = 'persistenceTypeIsExplicit'
    if ((!((aMsg)->ReadSentinel(aIter, 2261846598)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'persistenceTypeIsExplicit' (bool) member of 'ClearResetOriginParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientType())))))) {
        aActor->FatalError("Error deserializing 'clientType' (Type) member of 'ClearResetOriginParams'");
        return false;
    }
    // Sentinel = 'clientType'
    if ((!((aMsg)->ReadSentinel(aIter, 378995746)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientType' (Type) member of 'ClearResetOriginParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientTypeIsExplicit())))))) {
        aActor->FatalError("Error deserializing 'clientTypeIsExplicit' (bool) member of 'ClearResetOriginParams'");
        return false;
    }
    // Sentinel = 'clientTypeIsExplicit'
    if ((!((aMsg)->ReadSentinel(aIter, 1427048480)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientTypeIsExplicit' (bool) member of 'ClearResetOriginParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClearOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ClearOriginParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
    WriteIPDLParam(aMsg, aActor, (aVar).matchAll());
    // Sentinel = 'matchAll'
    (aMsg)->WriteSentinel(241500967);
}

auto IPDLParamTraits<mozilla::dom::quota::ClearOriginParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (ClearResetOriginParams) member of 'ClearOriginParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (ClearResetOriginParams) member of 'ClearOriginParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->matchAll())))))) {
        aActor->FatalError("Error deserializing 'matchAll' (bool) member of 'ClearOriginParams'");
        return false;
    }
    // Sentinel = 'matchAll'
    if ((!((aMsg)->ReadSentinel(aIter, 241500967)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'matchAll' (bool) member of 'ClearOriginParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ResetOriginParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ResetOriginParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
}

auto IPDLParamTraits<mozilla::dom::quota::ResetOriginParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (ClearResetOriginParams) member of 'ResetOriginParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (ClearResetOriginParams) member of 'ResetOriginParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClearDataParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ClearDataParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).pattern());
    // Sentinel = 'pattern'
    (aMsg)->WriteSentinel(200409855);
}

auto IPDLParamTraits<mozilla::dom::quota::ClearDataParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->pattern())))))) {
        aActor->FatalError("Error deserializing 'pattern' (OriginAttributesPattern) member of 'ClearDataParams'");
        return false;
    }
    // Sentinel = 'pattern'
    if ((!((aMsg)->ReadSentinel(aIter, 200409855)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'pattern' (OriginAttributesPattern) member of 'ClearDataParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClearAllParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ClearAllParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::ClearAllParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ResetAllParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ResetAllParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::ResetAllParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PersistedParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::PersistedParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
}

auto IPDLParamTraits<mozilla::dom::quota::PersistedParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'PersistedParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'PersistedParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PersistParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::PersistParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
}

auto IPDLParamTraits<mozilla::dom::quota::PersistParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'PersistParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'PersistParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct EstimateParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::EstimateParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
}

auto IPDLParamTraits<mozilla::dom::quota::EstimateParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'EstimateParams'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'EstimateParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ListOriginsParams|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ListOriginsParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::ListOriginsParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union RequestParams|
//
namespace mozilla {
namespace dom {
namespace quota {
auto RequestParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TStorageNameParams:
        {
            (ptr_StorageNameParams())->~StorageNameParams__tdef();
            break;
        }
    case TStorageInitializedParams:
        {
            (ptr_StorageInitializedParams())->~StorageInitializedParams__tdef();
            break;
        }
    case TTemporaryStorageInitializedParams:
        {
            (ptr_TemporaryStorageInitializedParams())->~TemporaryStorageInitializedParams__tdef();
            break;
        }
    case TInitParams:
        {
            (ptr_InitParams())->~InitParams__tdef();
            break;
        }
    case TInitTemporaryStorageParams:
        {
            (ptr_InitTemporaryStorageParams())->~InitTemporaryStorageParams__tdef();
            break;
        }
    case TInitializePersistentOriginParams:
        {
            (ptr_InitializePersistentOriginParams())->~InitializePersistentOriginParams__tdef();
            break;
        }
    case TInitializeTemporaryOriginParams:
        {
            (ptr_InitializeTemporaryOriginParams())->~InitializeTemporaryOriginParams__tdef();
            break;
        }
    case TClearOriginParams:
        {
            (ptr_ClearOriginParams())->~ClearOriginParams__tdef();
            break;
        }
    case TResetOriginParams:
        {
            (ptr_ResetOriginParams())->~ResetOriginParams__tdef();
            break;
        }
    case TClearDataParams:
        {
            (ptr_ClearDataParams())->~ClearDataParams__tdef();
            break;
        }
    case TClearAllParams:
        {
            (ptr_ClearAllParams())->~ClearAllParams__tdef();
            break;
        }
    case TResetAllParams:
        {
            (ptr_ResetAllParams())->~ResetAllParams__tdef();
            break;
        }
    case TPersistedParams:
        {
            (ptr_PersistedParams())->~PersistedParams__tdef();
            break;
        }
    case TPersistParams:
        {
            (ptr_PersistParams())->~PersistParams__tdef();
            break;
        }
    case TEstimateParams:
        {
            (ptr_EstimateParams())->~EstimateParams__tdef();
            break;
        }
    case TListOriginsParams:
        {
            (ptr_ListOriginsParams())->~ListOriginsParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT RequestParams::RequestParams(const StorageNameParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageNameParams()) StorageNameParams(aOther);
    mType = TStorageNameParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(StorageNameParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageNameParams()) StorageNameParams(std::move(aOther));
    mType = TStorageNameParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const StorageInitializedParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageInitializedParams()) StorageInitializedParams(aOther);
    mType = TStorageInitializedParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(StorageInitializedParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageInitializedParams()) StorageInitializedParams(std::move(aOther));
    mType = TStorageInitializedParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const TemporaryStorageInitializedParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedParams()) TemporaryStorageInitializedParams(aOther);
    mType = TTemporaryStorageInitializedParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(TemporaryStorageInitializedParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedParams()) TemporaryStorageInitializedParams(std::move(aOther));
    mType = TTemporaryStorageInitializedParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const InitParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitParams()) InitParams(aOther);
    mType = TInitParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(InitParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitParams()) InitParams(std::move(aOther));
    mType = TInitParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const InitTemporaryStorageParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitTemporaryStorageParams()) InitTemporaryStorageParams(aOther);
    mType = TInitTemporaryStorageParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(InitTemporaryStorageParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitTemporaryStorageParams()) InitTemporaryStorageParams(std::move(aOther));
    mType = TInitTemporaryStorageParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const InitializePersistentOriginParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitializePersistentOriginParams()) InitializePersistentOriginParams(aOther);
    mType = TInitializePersistentOriginParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(InitializePersistentOriginParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitializePersistentOriginParams()) InitializePersistentOriginParams(std::move(aOther));
    mType = TInitializePersistentOriginParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const InitializeTemporaryOriginParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginParams()) InitializeTemporaryOriginParams(aOther);
    mType = TInitializeTemporaryOriginParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(InitializeTemporaryOriginParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginParams()) InitializeTemporaryOriginParams(std::move(aOther));
    mType = TInitializeTemporaryOriginParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ClearOriginParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearOriginParams()) ClearOriginParams(aOther);
    mType = TClearOriginParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ClearOriginParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearOriginParams()) ClearOriginParams(std::move(aOther));
    mType = TClearOriginParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ResetOriginParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetOriginParams()) ResetOriginParams(aOther);
    mType = TResetOriginParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ResetOriginParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetOriginParams()) ResetOriginParams(std::move(aOther));
    mType = TResetOriginParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ClearDataParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearDataParams()) ClearDataParams(aOther);
    mType = TClearDataParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ClearDataParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearDataParams()) ClearDataParams(std::move(aOther));
    mType = TClearDataParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ClearAllParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearAllParams()) ClearAllParams(aOther);
    mType = TClearAllParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ClearAllParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearAllParams()) ClearAllParams(std::move(aOther));
    mType = TClearAllParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ResetAllParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetAllParams()) ResetAllParams(aOther);
    mType = TResetAllParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ResetAllParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetAllParams()) ResetAllParams(std::move(aOther));
    mType = TResetAllParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const PersistedParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_PersistedParams()) PersistedParams(aOther);
    mType = TPersistedParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(PersistedParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_PersistedParams()) PersistedParams(std::move(aOther));
    mType = TPersistedParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const PersistParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_PersistParams()) PersistParams(aOther);
    mType = TPersistParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(PersistParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_PersistParams()) PersistParams(std::move(aOther));
    mType = TPersistParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const EstimateParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_EstimateParams()) EstimateParams(aOther);
    mType = TEstimateParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(EstimateParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_EstimateParams()) EstimateParams(std::move(aOther));
    mType = TEstimateParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ListOriginsParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ListOriginsParams()) ListOriginsParams(aOther);
    mType = TListOriginsParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ListOriginsParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ListOriginsParams()) ListOriginsParams(std::move(aOther));
    mType = TListOriginsParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const RequestParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TStorageNameParams:
        {
            new (mozilla::KnownNotNull, ptr_StorageNameParams()) StorageNameParams((aOther).get_StorageNameParams());
            break;
        }
    case TStorageInitializedParams:
        {
            new (mozilla::KnownNotNull, ptr_StorageInitializedParams()) StorageInitializedParams((aOther).get_StorageInitializedParams());
            break;
        }
    case TTemporaryStorageInitializedParams:
        {
            new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedParams()) TemporaryStorageInitializedParams((aOther).get_TemporaryStorageInitializedParams());
            break;
        }
    case TInitParams:
        {
            new (mozilla::KnownNotNull, ptr_InitParams()) InitParams((aOther).get_InitParams());
            break;
        }
    case TInitTemporaryStorageParams:
        {
            new (mozilla::KnownNotNull, ptr_InitTemporaryStorageParams()) InitTemporaryStorageParams((aOther).get_InitTemporaryStorageParams());
            break;
        }
    case TInitializePersistentOriginParams:
        {
            new (mozilla::KnownNotNull, ptr_InitializePersistentOriginParams()) InitializePersistentOriginParams((aOther).get_InitializePersistentOriginParams());
            break;
        }
    case TInitializeTemporaryOriginParams:
        {
            new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginParams()) InitializeTemporaryOriginParams((aOther).get_InitializeTemporaryOriginParams());
            break;
        }
    case TClearOriginParams:
        {
            new (mozilla::KnownNotNull, ptr_ClearOriginParams()) ClearOriginParams((aOther).get_ClearOriginParams());
            break;
        }
    case TResetOriginParams:
        {
            new (mozilla::KnownNotNull, ptr_ResetOriginParams()) ResetOriginParams((aOther).get_ResetOriginParams());
            break;
        }
    case TClearDataParams:
        {
            new (mozilla::KnownNotNull, ptr_ClearDataParams()) ClearDataParams((aOther).get_ClearDataParams());
            break;
        }
    case TClearAllParams:
        {
            new (mozilla::KnownNotNull, ptr_ClearAllParams()) ClearAllParams((aOther).get_ClearAllParams());
            break;
        }
    case TResetAllParams:
        {
            new (mozilla::KnownNotNull, ptr_ResetAllParams()) ResetAllParams((aOther).get_ResetAllParams());
            break;
        }
    case TPersistedParams:
        {
            new (mozilla::KnownNotNull, ptr_PersistedParams()) PersistedParams((aOther).get_PersistedParams());
            break;
        }
    case TPersistParams:
        {
            new (mozilla::KnownNotNull, ptr_PersistParams()) PersistParams((aOther).get_PersistParams());
            break;
        }
    case TEstimateParams:
        {
            new (mozilla::KnownNotNull, ptr_EstimateParams()) EstimateParams((aOther).get_EstimateParams());
            break;
        }
    case TListOriginsParams:
        {
            new (mozilla::KnownNotNull, ptr_ListOriginsParams()) ListOriginsParams((aOther).get_ListOriginsParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT RequestParams::RequestParams(RequestParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TStorageNameParams:
        {
            new (mozilla::KnownNotNull, ptr_StorageNameParams()) StorageNameParams(std::move((aOther).get_StorageNameParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageInitializedParams:
        {
            new (mozilla::KnownNotNull, ptr_StorageInitializedParams()) StorageInitializedParams(std::move((aOther).get_StorageInitializedParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TTemporaryStorageInitializedParams:
        {
            new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedParams()) TemporaryStorageInitializedParams(std::move((aOther).get_TemporaryStorageInitializedParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInitParams:
        {
            new (mozilla::KnownNotNull, ptr_InitParams()) InitParams(std::move((aOther).get_InitParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInitTemporaryStorageParams:
        {
            new (mozilla::KnownNotNull, ptr_InitTemporaryStorageParams()) InitTemporaryStorageParams(std::move((aOther).get_InitTemporaryStorageParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInitializePersistentOriginParams:
        {
            new (mozilla::KnownNotNull, ptr_InitializePersistentOriginParams()) InitializePersistentOriginParams(std::move((aOther).get_InitializePersistentOriginParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInitializeTemporaryOriginParams:
        {
            new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginParams()) InitializeTemporaryOriginParams(std::move((aOther).get_InitializeTemporaryOriginParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClearOriginParams:
        {
            new (mozilla::KnownNotNull, ptr_ClearOriginParams()) ClearOriginParams(std::move((aOther).get_ClearOriginParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TResetOriginParams:
        {
            new (mozilla::KnownNotNull, ptr_ResetOriginParams()) ResetOriginParams(std::move((aOther).get_ResetOriginParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClearDataParams:
        {
            new (mozilla::KnownNotNull, ptr_ClearDataParams()) ClearDataParams(std::move((aOther).get_ClearDataParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClearAllParams:
        {
            new (mozilla::KnownNotNull, ptr_ClearAllParams()) ClearAllParams(std::move((aOther).get_ClearAllParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TResetAllParams:
        {
            new (mozilla::KnownNotNull, ptr_ResetAllParams()) ResetAllParams(std::move((aOther).get_ResetAllParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPersistedParams:
        {
            new (mozilla::KnownNotNull, ptr_PersistedParams()) PersistedParams(std::move((aOther).get_PersistedParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPersistParams:
        {
            new (mozilla::KnownNotNull, ptr_PersistParams()) PersistParams(std::move((aOther).get_PersistParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TEstimateParams:
        {
            new (mozilla::KnownNotNull, ptr_EstimateParams()) EstimateParams(std::move((aOther).get_EstimateParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TListOriginsParams:
        {
            new (mozilla::KnownNotNull, ptr_ListOriginsParams()) ListOriginsParams(std::move((aOther).get_ListOriginsParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

RequestParams::~RequestParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto RequestParams::operator=(const StorageNameParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TStorageNameParams)) {
        new (mozilla::KnownNotNull, ptr_StorageNameParams()) StorageNameParams;
    }
    (*(ptr_StorageNameParams())) = aRhs;
    mType = TStorageNameParams;
    return (*(this));
}

auto RequestParams::operator=(StorageNameParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TStorageNameParams)) {
        new (mozilla::KnownNotNull, ptr_StorageNameParams()) StorageNameParams;
    }
    (*(ptr_StorageNameParams())) = std::move(aRhs);
    mType = TStorageNameParams;
    return (*(this));
}

auto RequestParams::operator=(const StorageInitializedParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TStorageInitializedParams)) {
        new (mozilla::KnownNotNull, ptr_StorageInitializedParams()) StorageInitializedParams;
    }
    (*(ptr_StorageInitializedParams())) = aRhs;
    mType = TStorageInitializedParams;
    return (*(this));
}

auto RequestParams::operator=(StorageInitializedParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TStorageInitializedParams)) {
        new (mozilla::KnownNotNull, ptr_StorageInitializedParams()) StorageInitializedParams;
    }
    (*(ptr_StorageInitializedParams())) = std::move(aRhs);
    mType = TStorageInitializedParams;
    return (*(this));
}

auto RequestParams::operator=(const TemporaryStorageInitializedParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TTemporaryStorageInitializedParams)) {
        new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedParams()) TemporaryStorageInitializedParams;
    }
    (*(ptr_TemporaryStorageInitializedParams())) = aRhs;
    mType = TTemporaryStorageInitializedParams;
    return (*(this));
}

auto RequestParams::operator=(TemporaryStorageInitializedParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TTemporaryStorageInitializedParams)) {
        new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedParams()) TemporaryStorageInitializedParams;
    }
    (*(ptr_TemporaryStorageInitializedParams())) = std::move(aRhs);
    mType = TTemporaryStorageInitializedParams;
    return (*(this));
}

auto RequestParams::operator=(const InitParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TInitParams)) {
        new (mozilla::KnownNotNull, ptr_InitParams()) InitParams;
    }
    (*(ptr_InitParams())) = aRhs;
    mType = TInitParams;
    return (*(this));
}

auto RequestParams::operator=(InitParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TInitParams)) {
        new (mozilla::KnownNotNull, ptr_InitParams()) InitParams;
    }
    (*(ptr_InitParams())) = std::move(aRhs);
    mType = TInitParams;
    return (*(this));
}

auto RequestParams::operator=(const InitTemporaryStorageParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TInitTemporaryStorageParams)) {
        new (mozilla::KnownNotNull, ptr_InitTemporaryStorageParams()) InitTemporaryStorageParams;
    }
    (*(ptr_InitTemporaryStorageParams())) = aRhs;
    mType = TInitTemporaryStorageParams;
    return (*(this));
}

auto RequestParams::operator=(InitTemporaryStorageParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TInitTemporaryStorageParams)) {
        new (mozilla::KnownNotNull, ptr_InitTemporaryStorageParams()) InitTemporaryStorageParams;
    }
    (*(ptr_InitTemporaryStorageParams())) = std::move(aRhs);
    mType = TInitTemporaryStorageParams;
    return (*(this));
}

auto RequestParams::operator=(const InitializePersistentOriginParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TInitializePersistentOriginParams)) {
        new (mozilla::KnownNotNull, ptr_InitializePersistentOriginParams()) InitializePersistentOriginParams;
    }
    (*(ptr_InitializePersistentOriginParams())) = aRhs;
    mType = TInitializePersistentOriginParams;
    return (*(this));
}

auto RequestParams::operator=(InitializePersistentOriginParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TInitializePersistentOriginParams)) {
        new (mozilla::KnownNotNull, ptr_InitializePersistentOriginParams()) InitializePersistentOriginParams;
    }
    (*(ptr_InitializePersistentOriginParams())) = std::move(aRhs);
    mType = TInitializePersistentOriginParams;
    return (*(this));
}

auto RequestParams::operator=(const InitializeTemporaryOriginParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TInitializeTemporaryOriginParams)) {
        new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginParams()) InitializeTemporaryOriginParams;
    }
    (*(ptr_InitializeTemporaryOriginParams())) = aRhs;
    mType = TInitializeTemporaryOriginParams;
    return (*(this));
}

auto RequestParams::operator=(InitializeTemporaryOriginParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TInitializeTemporaryOriginParams)) {
        new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginParams()) InitializeTemporaryOriginParams;
    }
    (*(ptr_InitializeTemporaryOriginParams())) = std::move(aRhs);
    mType = TInitializeTemporaryOriginParams;
    return (*(this));
}

auto RequestParams::operator=(const ClearOriginParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TClearOriginParams)) {
        new (mozilla::KnownNotNull, ptr_ClearOriginParams()) ClearOriginParams;
    }
    (*(ptr_ClearOriginParams())) = aRhs;
    mType = TClearOriginParams;
    return (*(this));
}

auto RequestParams::operator=(ClearOriginParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TClearOriginParams)) {
        new (mozilla::KnownNotNull, ptr_ClearOriginParams()) ClearOriginParams;
    }
    (*(ptr_ClearOriginParams())) = std::move(aRhs);
    mType = TClearOriginParams;
    return (*(this));
}

auto RequestParams::operator=(const ResetOriginParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TResetOriginParams)) {
        new (mozilla::KnownNotNull, ptr_ResetOriginParams()) ResetOriginParams;
    }
    (*(ptr_ResetOriginParams())) = aRhs;
    mType = TResetOriginParams;
    return (*(this));
}

auto RequestParams::operator=(ResetOriginParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TResetOriginParams)) {
        new (mozilla::KnownNotNull, ptr_ResetOriginParams()) ResetOriginParams;
    }
    (*(ptr_ResetOriginParams())) = std::move(aRhs);
    mType = TResetOriginParams;
    return (*(this));
}

auto RequestParams::operator=(const ClearDataParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TClearDataParams)) {
        new (mozilla::KnownNotNull, ptr_ClearDataParams()) ClearDataParams;
    }
    (*(ptr_ClearDataParams())) = aRhs;
    mType = TClearDataParams;
    return (*(this));
}

auto RequestParams::operator=(ClearDataParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TClearDataParams)) {
        new (mozilla::KnownNotNull, ptr_ClearDataParams()) ClearDataParams;
    }
    (*(ptr_ClearDataParams())) = std::move(aRhs);
    mType = TClearDataParams;
    return (*(this));
}

auto RequestParams::operator=(const ClearAllParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TClearAllParams)) {
        new (mozilla::KnownNotNull, ptr_ClearAllParams()) ClearAllParams;
    }
    (*(ptr_ClearAllParams())) = aRhs;
    mType = TClearAllParams;
    return (*(this));
}

auto RequestParams::operator=(ClearAllParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TClearAllParams)) {
        new (mozilla::KnownNotNull, ptr_ClearAllParams()) ClearAllParams;
    }
    (*(ptr_ClearAllParams())) = std::move(aRhs);
    mType = TClearAllParams;
    return (*(this));
}

auto RequestParams::operator=(const ResetAllParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TResetAllParams)) {
        new (mozilla::KnownNotNull, ptr_ResetAllParams()) ResetAllParams;
    }
    (*(ptr_ResetAllParams())) = aRhs;
    mType = TResetAllParams;
    return (*(this));
}

auto RequestParams::operator=(ResetAllParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TResetAllParams)) {
        new (mozilla::KnownNotNull, ptr_ResetAllParams()) ResetAllParams;
    }
    (*(ptr_ResetAllParams())) = std::move(aRhs);
    mType = TResetAllParams;
    return (*(this));
}

auto RequestParams::operator=(const PersistedParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TPersistedParams)) {
        new (mozilla::KnownNotNull, ptr_PersistedParams()) PersistedParams;
    }
    (*(ptr_PersistedParams())) = aRhs;
    mType = TPersistedParams;
    return (*(this));
}

auto RequestParams::operator=(PersistedParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TPersistedParams)) {
        new (mozilla::KnownNotNull, ptr_PersistedParams()) PersistedParams;
    }
    (*(ptr_PersistedParams())) = std::move(aRhs);
    mType = TPersistedParams;
    return (*(this));
}

auto RequestParams::operator=(const PersistParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TPersistParams)) {
        new (mozilla::KnownNotNull, ptr_PersistParams()) PersistParams;
    }
    (*(ptr_PersistParams())) = aRhs;
    mType = TPersistParams;
    return (*(this));
}

auto RequestParams::operator=(PersistParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TPersistParams)) {
        new (mozilla::KnownNotNull, ptr_PersistParams()) PersistParams;
    }
    (*(ptr_PersistParams())) = std::move(aRhs);
    mType = TPersistParams;
    return (*(this));
}

auto RequestParams::operator=(const EstimateParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TEstimateParams)) {
        new (mozilla::KnownNotNull, ptr_EstimateParams()) EstimateParams;
    }
    (*(ptr_EstimateParams())) = aRhs;
    mType = TEstimateParams;
    return (*(this));
}

auto RequestParams::operator=(EstimateParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TEstimateParams)) {
        new (mozilla::KnownNotNull, ptr_EstimateParams()) EstimateParams;
    }
    (*(ptr_EstimateParams())) = std::move(aRhs);
    mType = TEstimateParams;
    return (*(this));
}

auto RequestParams::operator=(const ListOriginsParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TListOriginsParams)) {
        new (mozilla::KnownNotNull, ptr_ListOriginsParams()) ListOriginsParams;
    }
    (*(ptr_ListOriginsParams())) = aRhs;
    mType = TListOriginsParams;
    return (*(this));
}

auto RequestParams::operator=(ListOriginsParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TListOriginsParams)) {
        new (mozilla::KnownNotNull, ptr_ListOriginsParams()) ListOriginsParams;
    }
    (*(ptr_ListOriginsParams())) = std::move(aRhs);
    mType = TListOriginsParams;
    return (*(this));
}

auto RequestParams::operator=(const RequestParams& aRhs) -> RequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TStorageNameParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageNameParams()) StorageNameParams;
            }
            (*(ptr_StorageNameParams())) = (aRhs).get_StorageNameParams();
            break;
        }
    case TStorageInitializedParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageInitializedParams()) StorageInitializedParams;
            }
            (*(ptr_StorageInitializedParams())) = (aRhs).get_StorageInitializedParams();
            break;
        }
    case TTemporaryStorageInitializedParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedParams()) TemporaryStorageInitializedParams;
            }
            (*(ptr_TemporaryStorageInitializedParams())) = (aRhs).get_TemporaryStorageInitializedParams();
            break;
        }
    case TInitParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitParams()) InitParams;
            }
            (*(ptr_InitParams())) = (aRhs).get_InitParams();
            break;
        }
    case TInitTemporaryStorageParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitTemporaryStorageParams()) InitTemporaryStorageParams;
            }
            (*(ptr_InitTemporaryStorageParams())) = (aRhs).get_InitTemporaryStorageParams();
            break;
        }
    case TInitializePersistentOriginParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitializePersistentOriginParams()) InitializePersistentOriginParams;
            }
            (*(ptr_InitializePersistentOriginParams())) = (aRhs).get_InitializePersistentOriginParams();
            break;
        }
    case TInitializeTemporaryOriginParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginParams()) InitializeTemporaryOriginParams;
            }
            (*(ptr_InitializeTemporaryOriginParams())) = (aRhs).get_InitializeTemporaryOriginParams();
            break;
        }
    case TClearOriginParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearOriginParams()) ClearOriginParams;
            }
            (*(ptr_ClearOriginParams())) = (aRhs).get_ClearOriginParams();
            break;
        }
    case TResetOriginParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetOriginParams()) ResetOriginParams;
            }
            (*(ptr_ResetOriginParams())) = (aRhs).get_ResetOriginParams();
            break;
        }
    case TClearDataParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearDataParams()) ClearDataParams;
            }
            (*(ptr_ClearDataParams())) = (aRhs).get_ClearDataParams();
            break;
        }
    case TClearAllParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearAllParams()) ClearAllParams;
            }
            (*(ptr_ClearAllParams())) = (aRhs).get_ClearAllParams();
            break;
        }
    case TResetAllParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetAllParams()) ResetAllParams;
            }
            (*(ptr_ResetAllParams())) = (aRhs).get_ResetAllParams();
            break;
        }
    case TPersistedParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PersistedParams()) PersistedParams;
            }
            (*(ptr_PersistedParams())) = (aRhs).get_PersistedParams();
            break;
        }
    case TPersistParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PersistParams()) PersistParams;
            }
            (*(ptr_PersistParams())) = (aRhs).get_PersistParams();
            break;
        }
    case TEstimateParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_EstimateParams()) EstimateParams;
            }
            (*(ptr_EstimateParams())) = (aRhs).get_EstimateParams();
            break;
        }
    case TListOriginsParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ListOriginsParams()) ListOriginsParams;
            }
            (*(ptr_ListOriginsParams())) = (aRhs).get_ListOriginsParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto RequestParams::operator=(RequestParams&& aRhs) -> RequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TStorageNameParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageNameParams()) StorageNameParams;
            }
            (*(ptr_StorageNameParams())) = std::move((aRhs).get_StorageNameParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageInitializedParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageInitializedParams()) StorageInitializedParams;
            }
            (*(ptr_StorageInitializedParams())) = std::move((aRhs).get_StorageInitializedParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TTemporaryStorageInitializedParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedParams()) TemporaryStorageInitializedParams;
            }
            (*(ptr_TemporaryStorageInitializedParams())) = std::move((aRhs).get_TemporaryStorageInitializedParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInitParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitParams()) InitParams;
            }
            (*(ptr_InitParams())) = std::move((aRhs).get_InitParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInitTemporaryStorageParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitTemporaryStorageParams()) InitTemporaryStorageParams;
            }
            (*(ptr_InitTemporaryStorageParams())) = std::move((aRhs).get_InitTemporaryStorageParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInitializePersistentOriginParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitializePersistentOriginParams()) InitializePersistentOriginParams;
            }
            (*(ptr_InitializePersistentOriginParams())) = std::move((aRhs).get_InitializePersistentOriginParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInitializeTemporaryOriginParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginParams()) InitializeTemporaryOriginParams;
            }
            (*(ptr_InitializeTemporaryOriginParams())) = std::move((aRhs).get_InitializeTemporaryOriginParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClearOriginParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearOriginParams()) ClearOriginParams;
            }
            (*(ptr_ClearOriginParams())) = std::move((aRhs).get_ClearOriginParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TResetOriginParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetOriginParams()) ResetOriginParams;
            }
            (*(ptr_ResetOriginParams())) = std::move((aRhs).get_ResetOriginParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClearDataParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearDataParams()) ClearDataParams;
            }
            (*(ptr_ClearDataParams())) = std::move((aRhs).get_ClearDataParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClearAllParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearAllParams()) ClearAllParams;
            }
            (*(ptr_ClearAllParams())) = std::move((aRhs).get_ClearAllParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TResetAllParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetAllParams()) ResetAllParams;
            }
            (*(ptr_ResetAllParams())) = std::move((aRhs).get_ResetAllParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPersistedParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PersistedParams()) PersistedParams;
            }
            (*(ptr_PersistedParams())) = std::move((aRhs).get_PersistedParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPersistParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PersistParams()) PersistParams;
            }
            (*(ptr_PersistParams())) = std::move((aRhs).get_PersistParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TEstimateParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_EstimateParams()) EstimateParams;
            }
            (*(ptr_EstimateParams())) = std::move((aRhs).get_EstimateParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TListOriginsParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ListOriginsParams()) ListOriginsParams;
            }
            (*(ptr_ListOriginsParams())) = std::move((aRhs).get_ListOriginsParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::RequestParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::quota::RequestParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'RequestParams'
    (aMsg)->WriteSentinel(615384398);

    switch (type) {
    case union__::TStorageNameParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageNameParams());
            // Sentinel = 'TStorageNameParams'
            (aMsg)->WriteSentinel(1110378255);
            return;
        }
    case union__::TStorageInitializedParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageInitializedParams());
            // Sentinel = 'TStorageInitializedParams'
            (aMsg)->WriteSentinel(2159675908);
            return;
        }
    case union__::TTemporaryStorageInitializedParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_TemporaryStorageInitializedParams());
            // Sentinel = 'TTemporaryStorageInitializedParams'
            (aMsg)->WriteSentinel(4029222343);
            return;
        }
    case union__::TInitParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InitParams());
            // Sentinel = 'TInitParams'
            (aMsg)->WriteSentinel(416285773);
            return;
        }
    case union__::TInitTemporaryStorageParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InitTemporaryStorageParams());
            // Sentinel = 'TInitTemporaryStorageParams'
            (aMsg)->WriteSentinel(2528447205);
            return;
        }
    case union__::TInitializePersistentOriginParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InitializePersistentOriginParams());
            // Sentinel = 'TInitializePersistentOriginParams'
            (aMsg)->WriteSentinel(3784838500);
            return;
        }
    case union__::TInitializeTemporaryOriginParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InitializeTemporaryOriginParams());
            // Sentinel = 'TInitializeTemporaryOriginParams'
            (aMsg)->WriteSentinel(3553430774);
            return;
        }
    case union__::TClearOriginParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClearOriginParams());
            // Sentinel = 'TClearOriginParams'
            (aMsg)->WriteSentinel(1086981896);
            return;
        }
    case union__::TResetOriginParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ResetOriginParams());
            // Sentinel = 'TResetOriginParams'
            (aMsg)->WriteSentinel(1115490084);
            return;
        }
    case union__::TClearDataParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClearDataParams());
            // Sentinel = 'TClearDataParams'
            (aMsg)->WriteSentinel(839714330);
            return;
        }
    case union__::TClearAllParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClearAllParams());
            // Sentinel = 'TClearAllParams'
            (aMsg)->WriteSentinel(739640761);
            return;
        }
    case union__::TResetAllParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ResetAllParams());
            // Sentinel = 'TResetAllParams'
            (aMsg)->WriteSentinel(762643925);
            return;
        }
    case union__::TPersistedParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_PersistedParams());
            // Sentinel = 'TPersistedParams'
            (aMsg)->WriteSentinel(900335212);
            return;
        }
    case union__::TPersistParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_PersistParams());
            // Sentinel = 'TPersistParams'
            (aMsg)->WriteSentinel(692585891);
            return;
        }
    case union__::TEstimateParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_EstimateParams());
            // Sentinel = 'TEstimateParams'
            (aMsg)->WriteSentinel(781583861);
            return;
        }
    case union__::TListOriginsParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ListOriginsParams());
            // Sentinel = 'TListOriginsParams'
            (aMsg)->WriteSentinel(1121060656);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::quota::RequestParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::quota::RequestParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union RequestParams");
        return false;
    }
    // Sentinel = 'RequestParams'
    if ((!((aMsg)->ReadSentinel(aIter, 615384398)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union RequestParams");
        return false;
    }

    switch (type) {
    case union__::TStorageNameParams:
        {
            mozilla::dom::quota::StorageNameParams tmp = mozilla::dom::quota::StorageNameParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageNameParams())))))) {
                aActor->FatalError("Error deserializing variant TStorageNameParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TStorageNameParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1110378255)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageNameParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TStorageInitializedParams:
        {
            mozilla::dom::quota::StorageInitializedParams tmp = mozilla::dom::quota::StorageInitializedParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageInitializedParams())))))) {
                aActor->FatalError("Error deserializing variant TStorageInitializedParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TStorageInitializedParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2159675908)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageInitializedParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TTemporaryStorageInitializedParams:
        {
            mozilla::dom::quota::TemporaryStorageInitializedParams tmp = mozilla::dom::quota::TemporaryStorageInitializedParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_TemporaryStorageInitializedParams())))))) {
                aActor->FatalError("Error deserializing variant TTemporaryStorageInitializedParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TTemporaryStorageInitializedParams'
            if ((!((aMsg)->ReadSentinel(aIter, 4029222343)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TTemporaryStorageInitializedParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TInitParams:
        {
            mozilla::dom::quota::InitParams tmp = mozilla::dom::quota::InitParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InitParams())))))) {
                aActor->FatalError("Error deserializing variant TInitParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TInitParams'
            if ((!((aMsg)->ReadSentinel(aIter, 416285773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInitParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TInitTemporaryStorageParams:
        {
            mozilla::dom::quota::InitTemporaryStorageParams tmp = mozilla::dom::quota::InitTemporaryStorageParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InitTemporaryStorageParams())))))) {
                aActor->FatalError("Error deserializing variant TInitTemporaryStorageParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TInitTemporaryStorageParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2528447205)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInitTemporaryStorageParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TInitializePersistentOriginParams:
        {
            mozilla::dom::quota::InitializePersistentOriginParams tmp = mozilla::dom::quota::InitializePersistentOriginParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InitializePersistentOriginParams())))))) {
                aActor->FatalError("Error deserializing variant TInitializePersistentOriginParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TInitializePersistentOriginParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3784838500)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInitializePersistentOriginParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TInitializeTemporaryOriginParams:
        {
            mozilla::dom::quota::InitializeTemporaryOriginParams tmp = mozilla::dom::quota::InitializeTemporaryOriginParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InitializeTemporaryOriginParams())))))) {
                aActor->FatalError("Error deserializing variant TInitializeTemporaryOriginParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TInitializeTemporaryOriginParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3553430774)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInitializeTemporaryOriginParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TClearOriginParams:
        {
            mozilla::dom::quota::ClearOriginParams tmp = mozilla::dom::quota::ClearOriginParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClearOriginParams())))))) {
                aActor->FatalError("Error deserializing variant TClearOriginParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TClearOriginParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1086981896)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClearOriginParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TResetOriginParams:
        {
            mozilla::dom::quota::ResetOriginParams tmp = mozilla::dom::quota::ResetOriginParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ResetOriginParams())))))) {
                aActor->FatalError("Error deserializing variant TResetOriginParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TResetOriginParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1115490084)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TResetOriginParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TClearDataParams:
        {
            mozilla::dom::quota::ClearDataParams tmp = mozilla::dom::quota::ClearDataParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClearDataParams())))))) {
                aActor->FatalError("Error deserializing variant TClearDataParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TClearDataParams'
            if ((!((aMsg)->ReadSentinel(aIter, 839714330)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClearDataParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TClearAllParams:
        {
            mozilla::dom::quota::ClearAllParams tmp = mozilla::dom::quota::ClearAllParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClearAllParams())))))) {
                aActor->FatalError("Error deserializing variant TClearAllParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TClearAllParams'
            if ((!((aMsg)->ReadSentinel(aIter, 739640761)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClearAllParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TResetAllParams:
        {
            mozilla::dom::quota::ResetAllParams tmp = mozilla::dom::quota::ResetAllParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ResetAllParams())))))) {
                aActor->FatalError("Error deserializing variant TResetAllParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TResetAllParams'
            if ((!((aMsg)->ReadSentinel(aIter, 762643925)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TResetAllParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TPersistedParams:
        {
            mozilla::dom::quota::PersistedParams tmp = mozilla::dom::quota::PersistedParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PersistedParams())))))) {
                aActor->FatalError("Error deserializing variant TPersistedParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TPersistedParams'
            if ((!((aMsg)->ReadSentinel(aIter, 900335212)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPersistedParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TPersistParams:
        {
            mozilla::dom::quota::PersistParams tmp = mozilla::dom::quota::PersistParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PersistParams())))))) {
                aActor->FatalError("Error deserializing variant TPersistParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TPersistParams'
            if ((!((aMsg)->ReadSentinel(aIter, 692585891)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPersistParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TEstimateParams:
        {
            mozilla::dom::quota::EstimateParams tmp = mozilla::dom::quota::EstimateParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_EstimateParams())))))) {
                aActor->FatalError("Error deserializing variant TEstimateParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TEstimateParams'
            if ((!((aMsg)->ReadSentinel(aIter, 781583861)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TEstimateParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TListOriginsParams:
        {
            mozilla::dom::quota::ListOriginsParams tmp = mozilla::dom::quota::ListOriginsParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ListOriginsParams())))))) {
                aActor->FatalError("Error deserializing variant TListOriginsParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TListOriginsParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1121060656)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TListOriginsParams of union RequestParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
