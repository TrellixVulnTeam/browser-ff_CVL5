//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/ipc/TransportSecurityInfoUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/dom/WindowGlobalTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WindowGlobalInit|
//
namespace mozilla {
namespace dom {
auto WindowGlobalInit::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(WindowGlobalInit, httpsOnlyStatus_) - offsetof(WindowGlobalInit, sandboxFlags_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WindowGlobalInit>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).context());
    // Sentinel = 'context'
    (aMsg)->WriteSentinel(199164678);
    WriteIPDLParam(aMsg, aActor, (aVar).principal());
    // Sentinel = 'principal'
    (aMsg)->WriteSentinel(319620035);
    WriteIPDLParam(aMsg, aActor, (aVar).documentURI());
    // Sentinel = 'documentURI'
    (aMsg)->WriteSentinel(453706832);
    WriteIPDLParam(aMsg, aActor, (aVar).blockAllMixedContent());
    // Sentinel = 'blockAllMixedContent'
    (aMsg)->WriteSentinel(1382287351);
    WriteIPDLParam(aMsg, aActor, (aVar).upgradeInsecureRequests());
    // Sentinel = 'upgradeInsecureRequests'
    (aMsg)->WriteSentinel(1898449283);
    WriteIPDLParam(aMsg, aActor, (aVar).cookieJarSettings());
    // Sentinel = 'cookieJarSettings'
    (aMsg)->WriteSentinel(1031800553);
    WriteIPDLParam(aMsg, aActor, (aVar).securityInfo());
    // Sentinel = 'securityInfo'
    (aMsg)->WriteSentinel(552535301);
    (aMsg)->WriteBytes((&((aVar).sandboxFlags())), 8);
    // Sentinel = 'sandboxFlags | httpsOnlyStatus'
    (aMsg)->WriteSentinel(3060206578);
}

auto IPDLParamTraits<mozilla::dom::WindowGlobalInit>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->context())))))) {
        aActor->FatalError("Error deserializing 'context' (WindowContextInitializer) member of 'WindowGlobalInit'");
        return false;
    }
    // Sentinel = 'context'
    if ((!((aMsg)->ReadSentinel(aIter, 199164678)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'context' (WindowContextInitializer) member of 'WindowGlobalInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principal())))))) {
        aActor->FatalError("Error deserializing 'principal' (nsIPrincipal) member of 'WindowGlobalInit'");
        return false;
    }
    // Sentinel = 'principal'
    if ((!((aMsg)->ReadSentinel(aIter, 319620035)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principal' (nsIPrincipal) member of 'WindowGlobalInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->documentURI())))))) {
        aActor->FatalError("Error deserializing 'documentURI' (nsIURI) member of 'WindowGlobalInit'");
        return false;
    }
    // Sentinel = 'documentURI'
    if ((!((aMsg)->ReadSentinel(aIter, 453706832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'documentURI' (nsIURI) member of 'WindowGlobalInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blockAllMixedContent())))))) {
        aActor->FatalError("Error deserializing 'blockAllMixedContent' (bool) member of 'WindowGlobalInit'");
        return false;
    }
    // Sentinel = 'blockAllMixedContent'
    if ((!((aMsg)->ReadSentinel(aIter, 1382287351)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blockAllMixedContent' (bool) member of 'WindowGlobalInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->upgradeInsecureRequests())))))) {
        aActor->FatalError("Error deserializing 'upgradeInsecureRequests' (bool) member of 'WindowGlobalInit'");
        return false;
    }
    // Sentinel = 'upgradeInsecureRequests'
    if ((!((aMsg)->ReadSentinel(aIter, 1898449283)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'upgradeInsecureRequests' (bool) member of 'WindowGlobalInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cookieJarSettings())))))) {
        aActor->FatalError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs) member of 'WindowGlobalInit'");
        return false;
    }
    // Sentinel = 'cookieJarSettings'
    if ((!((aMsg)->ReadSentinel(aIter, 1031800553)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs) member of 'WindowGlobalInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->securityInfo())))))) {
        aActor->FatalError("Error deserializing 'securityInfo' (nsITransportSecurityInfo) member of 'WindowGlobalInit'");
        return false;
    }
    // Sentinel = 'securityInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 552535301)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'securityInfo' (nsITransportSecurityInfo) member of 'WindowGlobalInit'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->sandboxFlags())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'sandboxFlags | httpsOnlyStatus'
    if ((!((aMsg)->ReadSentinel(aIter, 3060206578)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
