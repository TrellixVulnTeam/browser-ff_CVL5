//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PIdleSchedulerParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/IdleSchedulerParent.h"

#include "mozilla/ipc/PBackgroundParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace ipc {


auto PIdleSchedulerParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PIdleSchedulerParent::PIdleSchedulerParent() :
    mozilla::ipc::IProtocol(PIdleSchedulerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PIdleSchedulerParent);
}

PIdleSchedulerParent::~PIdleSchedulerParent()
{
    MOZ_COUNT_DTOR(PIdleSchedulerParent);
}

auto PIdleSchedulerParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PIdleSchedulerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PIdleSchedulerParent::SendIdleTime(
        const uint64_t& id,
        const TimeDuration& budget) -> bool
{
    IPC::Message* msg__ = PIdleScheduler::Msg_IdleTime(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    WriteIPDLParam(msg__, this, budget);
    // Sentinel = 'budget'
    (msg__)->WriteSentinel(144573052);




    if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PIdleSchedulerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PIdleScheduler::Msg_IdleTime", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PIdleSchedulerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PIdleSchedulerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PIdleSchedulerParent::OnMessageReceived(const Message& msg__) -> PIdleSchedulerParent::Result
{
    switch (msg__.type()) {
    case PIdleScheduler::Msg_InitForIdleUse__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg_InitForIdleUse", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            InitForIdleUseResolver resolver = [proxy__, seqno__, id__](Tuple<const mozilla::Maybe<SharedMemoryHandle>&, const uint32_t&> aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PIdleSchedulerParent* self__ = static_cast<PIdleSchedulerParent*>(proxy__->Get());

                IPC::Message* reply__ = PIdleScheduler::Reply_InitForIdleUse(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, mozilla::Get<0>(aParam));
                // Sentinel = 'state'
                (reply__)->WriteSentinel(109314594);
                WriteIPDLParam(reply__, self__, mozilla::Get<1>(aParam));
                // Sentinel = 'childId'
                (reply__)->WriteSentinel(185270962);

                if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PIdleSchedulerParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<IdleSchedulerParent*>(this))->RecvInitForIdleUse(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIdleScheduler::Msg_RequestIdleTime__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg_RequestIdleTime", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};
            TimeDuration budget{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(budget)))))) {
                FatalError("Error deserializing 'TimeDuration'");
                return MsgValueError;
            }
            // Sentinel = 'budget'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 144573052)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeDuration'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<IdleSchedulerParent*>(this))->RecvRequestIdleTime(std::move(id), std::move(budget))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIdleScheduler::Msg_IdleTimeUsed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg_IdleTimeUsed", OTHER);

            PickleIterator iter__{msg__};
            uint64_t id{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(id)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'id'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 20447438)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<IdleSchedulerParent*>(this))->RecvIdleTimeUsed(std::move(id))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIdleScheduler::Msg_Schedule__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg_Schedule", OTHER);

            if ((!((static_cast<IdleSchedulerParent*>(this))->RecvSchedule()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIdleScheduler::Msg_RunningPrioritizedOperation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg_RunningPrioritizedOperation", OTHER);

            if ((!((static_cast<IdleSchedulerParent*>(this))->RecvRunningPrioritizedOperation()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIdleScheduler::Msg_PrioritizedOperationDone__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg_PrioritizedOperationDone", OTHER);

            if ((!((static_cast<IdleSchedulerParent*>(this))->RecvPrioritizedOperationDone()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PIdleScheduler::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PIdleSchedulerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PIdleSchedulerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PIdleScheduler::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PIdleSchedulerParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PIdleScheduler'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PIdleScheduler'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PIdleScheduler'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<IdleSchedulerParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PIdleSchedulerMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PIdleSchedulerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PIdleSchedulerParent::Result
{
    return MsgNotKnown;
}

auto PIdleSchedulerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PIdleSchedulerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PIdleSchedulerParent::ClearSubtree() -> void
{
}



} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::PIdleSchedulerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::ipc::PIdleSchedulerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PIdleScheduler", PIdleSchedulerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::ipc::PIdleSchedulerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
