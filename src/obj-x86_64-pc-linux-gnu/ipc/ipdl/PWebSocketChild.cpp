//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PWebSocketChild.h"
#include "SerializedLoadContext.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/net/WebSocketChannelChild.h"

#include "mozilla/net/PNeckoChild.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/net/PTransportProviderChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PWebSocketChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PWebSocketChild::PWebSocketChild() :
    mozilla::ipc::IProtocol(PWebSocketMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PWebSocketChild);
}

PWebSocketChild::~PWebSocketChild()
{
    MOZ_COUNT_DTOR(PWebSocketChild);
}

auto PWebSocketChild::Manager() const -> PNeckoChild*
{
    return static_cast<PNeckoChild*>(IProtocol::Manager());
}

auto PWebSocketChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebSocketChild::SendAsyncOpen(
        nsIURI* aURI,
        const nsCString& aOrigin,
        const uint64_t& aInnerWindowID,
        const nsCString& aProtocol,
        const bool& aSecure,
        const uint32_t& aPingInterval,
        const bool& aClientSetPingInterval,
        const uint32_t& aPingTimeout,
        const bool& aClientSetPingTimeout,
        const mozilla::Maybe<LoadInfoArgs>& aLoadInfoArgs,
        const mozilla::Maybe<PTransportProviderChild*>& aProvider,
        const nsCString& aNegotiatedExtensions) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_AsyncOpen(Id());

    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);
    WriteIPDLParam(msg__, this, aOrigin);
    // Sentinel = 'aOrigin'
    (msg__)->WriteSentinel(182125258);
    WriteIPDLParam(msg__, this, aInnerWindowID);
    // Sentinel = 'aInnerWindowID'
    (msg__)->WriteSentinel(687670627);
    WriteIPDLParam(msg__, this, aProtocol);
    // Sentinel = 'aProtocol'
    (msg__)->WriteSentinel(303891380);
    WriteIPDLParam(msg__, this, aSecure);
    // Sentinel = 'aSecure'
    (msg__)->WriteSentinel(181207753);
    WriteIPDLParam(msg__, this, aPingInterval);
    // Sentinel = 'aPingInterval'
    (msg__)->WriteSentinel(595264821);
    WriteIPDLParam(msg__, this, aClientSetPingInterval);
    // Sentinel = 'aClientSetPingInterval'
    (msg__)->WriteSentinel(1653999808);
    WriteIPDLParam(msg__, this, aPingTimeout);
    // Sentinel = 'aPingTimeout'
    (msg__)->WriteSentinel(509215959);
    WriteIPDLParam(msg__, this, aClientSetPingTimeout);
    // Sentinel = 'aClientSetPingTimeout'
    (msg__)->WriteSentinel(1508509794);
    WriteIPDLParam(msg__, this, aLoadInfoArgs);
    // Sentinel = 'aLoadInfoArgs'
    (msg__)->WriteSentinel(571540731);
    WriteIPDLParam(msg__, this, aProvider);
    // Sentinel = 'aProvider'
    (msg__)->WriteSentinel(302252973);
    WriteIPDLParam(msg__, this, aNegotiatedExtensions);
    // Sentinel = 'aNegotiatedExtensions'
    (msg__)->WriteSentinel(1547634838);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_AsyncOpen", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketChild::SendClose(
        const uint16_t& code,
        const nsCString& reason) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_Close(Id());

    WriteIPDLParam(msg__, this, code);
    // Sentinel = 'code'
    (msg__)->WriteSentinel(67764636);
    WriteIPDLParam(msg__, this, reason);
    // Sentinel = 'reason'
    (msg__)->WriteSentinel(148112009);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_Close", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketChild::SendSendMsg(const nsCString& aMsg) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_SendMsg(Id());

    WriteIPDLParam(msg__, this, aMsg);
    // Sentinel = 'aMsg'
    (msg__)->WriteSentinel(62652809);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_SendMsg", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketChild::SendSendBinaryMsg(const nsCString& aMsg) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_SendBinaryMsg(Id());

    WriteIPDLParam(msg__, this, aMsg);
    // Sentinel = 'aMsg'
    (msg__)->WriteSentinel(62652809);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_SendBinaryMsg", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketChild::SendSendBinaryStream(
        const IPCStream& aStream,
        const uint32_t& aLength) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_SendBinaryStream(Id());

    WriteIPDLParam(msg__, this, aStream);
    // Sentinel = 'aStream'
    (msg__)->WriteSentinel(185205454);
    WriteIPDLParam(msg__, this, aLength);
    // Sentinel = 'aLength'
    (msg__)->WriteSentinel(179045060);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_SendBinaryStream", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketChild::SendDeleteSelf() -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_DeleteSelf(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_DeleteSelf", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketChild::OnMessageReceived(const Message& msg__) -> PWebSocketChild::Result
{
    switch (msg__.type()) {
    case PWebSocket::Msg_OnStart__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_OnStart", OTHER);

            PickleIterator iter__{msg__};
            nsCString aProtocol{};
            nsCString aExtensions{};
            nsString aEffectiveURL{};
            bool aEncrypted{};
            uint64_t aHttpChannelId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProtocol)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aProtocol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303891380)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aExtensions)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aExtensions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 446039186)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEffectiveURL)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aEffectiveURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 581698790)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEncrypted)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEncrypted'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364446736)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHttpChannelId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aHttpChannelId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681182568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelChild*>(this))->RecvOnStart(std::move(aProtocol), std::move(aExtensions), std::move(aEffectiveURL), std::move(aEncrypted), std::move(aHttpChannelId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnStop__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_OnStop", OTHER);

            PickleIterator iter__{msg__};
            nsresult aStatusCode{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatusCode)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatusCode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 440337505)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelChild*>(this))->RecvOnStop(std::move(aStatusCode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnMessageAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_OnMessageAvailable", OTHER);

            PickleIterator iter__{msg__};
            nsDependentCSubstring aMsg{};
            bool aMoreData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMsg)))))) {
                FatalError("Error deserializing 'nsDependentCSubstring'");
                return MsgValueError;
            }
            // Sentinel = 'aMsg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 62652809)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDependentCSubstring'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMoreData)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aMoreData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 285475695)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelChild*>(this))->RecvOnMessageAvailable(std::move(aMsg), std::move(aMoreData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnBinaryMessageAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_OnBinaryMessageAvailable", OTHER);

            PickleIterator iter__{msg__};
            nsDependentCSubstring aMsg{};
            bool aMoreData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMsg)))))) {
                FatalError("Error deserializing 'nsDependentCSubstring'");
                return MsgValueError;
            }
            // Sentinel = 'aMsg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 62652809)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDependentCSubstring'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMoreData)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aMoreData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 285475695)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelChild*>(this))->RecvOnBinaryMessageAvailable(std::move(aMsg), std::move(aMoreData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnAcknowledge__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_OnAcknowledge", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSize)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97124861)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelChild*>(this))->RecvOnAcknowledge(std::move(aSize))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnServerClose__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_OnServerClose", OTHER);

            PickleIterator iter__{msg__};
            uint16_t code{};
            nsCString aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(code)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'code'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67764636)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelChild*>(this))->RecvOnServerClose(std::move(code), std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWebSocketChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWebSocket'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWebSocket'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebSocket'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWebSocketMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebSocketChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketChild::Result
{
    return MsgNotKnown;
}

auto PWebSocketChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebSocketChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PWebSocketChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PWebSocketChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebSocket", PWebSocketMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PWebSocketChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
