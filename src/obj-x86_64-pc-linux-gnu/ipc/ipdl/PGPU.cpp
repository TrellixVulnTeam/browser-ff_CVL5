//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/PAPZInputBridgeParent.h"
#include "mozilla/layers/PAPZInputBridgeChild.h"
#include "mozilla/layers/PCompositorManagerParent.h"
#include "mozilla/layers/PCompositorManagerChild.h"
#include "mozilla/layers/PImageBridgeParent.h"
#include "mozilla/layers/PImageBridgeChild.h"
#include "mozilla/PProfilerParent.h"
#include "mozilla/PProfilerChild.h"
#include "mozilla/gfx/PVRGPUParent.h"
#include "mozilla/gfx/PVRGPUChild.h"
#include "mozilla/gfx/PVRManagerParent.h"
#include "mozilla/gfx/PVRManagerChild.h"
#include "mozilla/layers/PVideoBridgeParent.h"
#include "mozilla/layers/PVideoBridgeChild.h"
#include "mozilla/gfx/PVsyncBridgeParent.h"
#include "mozilla/gfx/PVsyncBridgeChild.h"
#include "mozilla/layers/PUiCompositorControllerParent.h"
#include "mozilla/layers/PUiCompositorControllerChild.h"
#include "mozilla/PRemoteDecoderManagerParent.h"
#include "mozilla/PRemoteDecoderManagerChild.h"
#include "mozilla/gfx/PGPU.h"
#include "mozilla/gfx/PGPUParent.h"
#include "mozilla/gfx/PGPUChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gfx {
namespace PGPU {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gfx::PGPUParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gfx::PGPUChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_PAPZInputBridgeConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PAPZInputBridgeConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PAPZInputBridgeConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PAPZInputBridgeConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Init(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Init__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitCompositorManager(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitCompositorManager__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitVsyncBridge(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitVsyncBridge__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitImageBridge(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitImageBridge__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitVideoBridge(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitVideoBridge__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitVRManager(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitVRManager__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitUiCompositorController(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitUiCompositorController__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitProfiler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitProfiler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitVR(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitVR__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateVar(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateVar__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PreferenceUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PreferenceUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NewContentCompositorManager(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NewContentCompositorManager__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NewContentImageBridge(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NewContentImageBridge__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NewContentVRManager(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NewContentVRManager__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NewContentRemoteDecoderManager(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NewContentRemoteDecoderManager__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddLayerTreeIdMapping(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddLayerTreeIdMapping__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_AddLayerTreeIdMapping(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_AddLayerTreeIdMapping__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RemoveLayerTreeIdMapping(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveLayerTreeIdMapping__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetDeviceStatus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetDeviceStatus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetDeviceStatus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetDeviceStatus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SimulateDeviceReset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SimulateDeviceReset__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SimulateDeviceReset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SimulateDeviceReset__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NotifyGpuObservers(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyGpuObservers__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RequestMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RequestMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ShutdownVR(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShutdownVR__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdatePerfStatsCollectionMask(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdatePerfStatsCollectionMask__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CollectPerfStatsJSON(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CollectPerfStatsJSON__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_CollectPerfStatsJSON(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_CollectPerfStatsJSON__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InitComplete(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitComplete__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReportCheckerboard(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReportCheckerboard__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GraphicsError(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GraphicsError__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitCrashReporter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitCrashReporter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CreateVRProcess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CreateVRProcess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ShutdownVRProcess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShutdownVRProcess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyUiObservers(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyUiObservers__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AccumulateChildHistograms(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AccumulateChildHistograms__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AccumulateChildKeyedHistograms(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AccumulateChildKeyedHistograms__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateChildScalars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateChildScalars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateChildKeyedScalars(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateChildKeyedScalars__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RecordChildEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RecordChildEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RecordDiscardedData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RecordDiscardedData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyDeviceReset(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyDeviceReset__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AddMemoryReport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AddMemoryReport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateFeature(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateFeature__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UsedFallback(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UsedFallback__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BHRThreadHang(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BHRThreadHang__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateMediaCodecsSupported(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateMediaCodecsSupported__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PGPU
} // namespace gfx
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LayerTreeIdMapping|
//
namespace mozilla {
namespace gfx {
} // namespace gfx
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::LayerTreeIdMapping>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).layersId());
    // Sentinel = 'layersId'
    (aMsg)->WriteSentinel(250938174);
    WriteIPDLParam(aMsg, aActor, (aVar).ownerId());
    // Sentinel = 'ownerId'
    (aMsg)->WriteSentinel(199230169);
}

auto IPDLParamTraits<mozilla::gfx::LayerTreeIdMapping>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->layersId())))))) {
        aActor->FatalError("Error deserializing 'layersId' (LayersId) member of 'LayerTreeIdMapping'");
        return false;
    }
    // Sentinel = 'layersId'
    if ((!((aMsg)->ReadSentinel(aIter, 250938174)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'layersId' (LayersId) member of 'LayerTreeIdMapping'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ownerId())))))) {
        aActor->FatalError("Error deserializing 'ownerId' (ProcessId) member of 'LayerTreeIdMapping'");
        return false;
    }
    // Sentinel = 'ownerId'
    if ((!((aMsg)->ReadSentinel(aIter, 199230169)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ownerId' (ProcessId) member of 'LayerTreeIdMapping'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
