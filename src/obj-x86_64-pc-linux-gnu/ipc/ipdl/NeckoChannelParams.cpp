//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PropertyBagUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/net/PHttpChannelParent.h"
#include "mozilla/net/PHttpChannelChild.h"
#include "mozilla/net/PFTPChannelParent.h"
#include "mozilla/net/PFTPChannelChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/net/NeckoChannelParams.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CookiePermissionData|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::CookiePermissionData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    (aMsg)->WriteBytes((&((aVar).cookiePermission())), 4);
    // Sentinel = 'cookiePermission'
    (aMsg)->WriteSentinel(935659172);
}

auto IPDLParamTraits<mozilla::net::CookiePermissionData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'CookiePermissionData'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'CookiePermissionData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->cookiePermission())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'cookiePermission'
    if ((!((aMsg)->ReadSentinel(aIter, 935659172)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CookieJarSettingsArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::CookieJarSettingsArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isFirstPartyIsolated());
    // Sentinel = 'isFirstPartyIsolated'
    (aMsg)->WriteSentinel(1432815658);
    WriteIPDLParam(aMsg, aActor, (aVar).isOnContentBlockingAllowList());
    // Sentinel = 'isOnContentBlockingAllowList'
    (aMsg)->WriteSentinel(2707622713);
    WriteIPDLParam(aMsg, aActor, (aVar).cookiePermissions());
    // Sentinel = 'cookiePermissions'
    (aMsg)->WriteSentinel(1054607127);
    WriteIPDLParam(aMsg, aActor, (aVar).isFixed());
    // Sentinel = 'isFixed'
    (aMsg)->WriteSentinel(187695821);
    WriteIPDLParam(aMsg, aActor, (aVar).partitionKey());
    // Sentinel = 'partitionKey'
    (aMsg)->WriteSentinel(552600836);
    (aMsg)->WriteBytes((&((aVar).cookieBehavior())), 4);
    // Sentinel = 'cookieBehavior'
    (aMsg)->WriteSentinel(706348459);
}

auto IPDLParamTraits<mozilla::net::CookieJarSettingsArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFirstPartyIsolated())))))) {
        aActor->FatalError("Error deserializing 'isFirstPartyIsolated' (bool) member of 'CookieJarSettingsArgs'");
        return false;
    }
    // Sentinel = 'isFirstPartyIsolated'
    if ((!((aMsg)->ReadSentinel(aIter, 1432815658)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFirstPartyIsolated' (bool) member of 'CookieJarSettingsArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isOnContentBlockingAllowList())))))) {
        aActor->FatalError("Error deserializing 'isOnContentBlockingAllowList' (bool) member of 'CookieJarSettingsArgs'");
        return false;
    }
    // Sentinel = 'isOnContentBlockingAllowList'
    if ((!((aMsg)->ReadSentinel(aIter, 2707622713)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isOnContentBlockingAllowList' (bool) member of 'CookieJarSettingsArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cookiePermissions())))))) {
        aActor->FatalError("Error deserializing 'cookiePermissions' (CookiePermissionData[]) member of 'CookieJarSettingsArgs'");
        return false;
    }
    // Sentinel = 'cookiePermissions'
    if ((!((aMsg)->ReadSentinel(aIter, 1054607127)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cookiePermissions' (CookiePermissionData[]) member of 'CookieJarSettingsArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFixed())))))) {
        aActor->FatalError("Error deserializing 'isFixed' (bool) member of 'CookieJarSettingsArgs'");
        return false;
    }
    // Sentinel = 'isFixed'
    if ((!((aMsg)->ReadSentinel(aIter, 187695821)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFixed' (bool) member of 'CookieJarSettingsArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->partitionKey())))))) {
        aActor->FatalError("Error deserializing 'partitionKey' (nsString) member of 'CookieJarSettingsArgs'");
        return false;
    }
    // Sentinel = 'partitionKey'
    if ((!((aMsg)->ReadSentinel(aIter, 552600836)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'partitionKey' (nsString) member of 'CookieJarSettingsArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->cookieBehavior())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'cookieBehavior'
    if ((!((aMsg)->ReadSentinel(aIter, 706348459)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PreferredAlternativeDataTypeParams|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PreferredAlternativeDataTypeParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).contentType());
    // Sentinel = 'contentType'
    (aMsg)->WriteSentinel(465241246);
    WriteIPDLParam(aMsg, aActor, (aVar).deliverAltData());
    // Sentinel = 'deliverAltData'
    (aMsg)->WriteSentinel(704775559);
}

auto IPDLParamTraits<mozilla::net::PreferredAlternativeDataTypeParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (nsCString) member of 'PreferredAlternativeDataTypeParams'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (nsCString) member of 'PreferredAlternativeDataTypeParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentType())))))) {
        aActor->FatalError("Error deserializing 'contentType' (nsCString) member of 'PreferredAlternativeDataTypeParams'");
        return false;
    }
    // Sentinel = 'contentType'
    if ((!((aMsg)->ReadSentinel(aIter, 465241246)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentType' (nsCString) member of 'PreferredAlternativeDataTypeParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->deliverAltData())))))) {
        aActor->FatalError("Error deserializing 'deliverAltData' (bool) member of 'PreferredAlternativeDataTypeParams'");
        return false;
    }
    // Sentinel = 'deliverAltData'
    if ((!((aMsg)->ReadSentinel(aIter, 704775559)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'deliverAltData' (bool) member of 'PreferredAlternativeDataTypeParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RedirectHistoryEntryInfo|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::RedirectHistoryEntryInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).referrerUri());
    // Sentinel = 'referrerUri'
    (aMsg)->WriteSentinel(460850318);
    WriteIPDLParam(aMsg, aActor, (aVar).remoteAddress());
    // Sentinel = 'remoteAddress'
    (aMsg)->WriteSentinel(624362835);
}

auto IPDLParamTraits<mozilla::net::RedirectHistoryEntryInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'RedirectHistoryEntryInfo'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'RedirectHistoryEntryInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrerUri())))))) {
        aActor->FatalError("Error deserializing 'referrerUri' (URIParams?) member of 'RedirectHistoryEntryInfo'");
        return false;
    }
    // Sentinel = 'referrerUri'
    if ((!((aMsg)->ReadSentinel(aIter, 460850318)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrerUri' (URIParams?) member of 'RedirectHistoryEntryInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->remoteAddress())))))) {
        aActor->FatalError("Error deserializing 'remoteAddress' (nsCString) member of 'RedirectHistoryEntryInfo'");
        return false;
    }
    // Sentinel = 'remoteAddress'
    if ((!((aMsg)->ReadSentinel(aIter, 624362835)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'remoteAddress' (nsCString) member of 'RedirectHistoryEntryInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LoadInfoArgs|
//
namespace mozilla {
namespace net {
auto LoadInfoArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(LoadInfoArgs, frameBrowsingContextID_) - offsetof(LoadInfoArgs, innerWindowID_)) == 16,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(LoadInfoArgs, requestBlockingReason_) - offsetof(LoadInfoArgs, securityFlags_)) == 20,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::LoadInfoArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestingPrincipalInfo());
    // Sentinel = 'requestingPrincipalInfo'
    (aMsg)->WriteSentinel(1936591222);
    WriteIPDLParam(aMsg, aActor, (aVar).triggeringPrincipalInfo());
    // Sentinel = 'triggeringPrincipalInfo'
    (aMsg)->WriteSentinel(1912736097);
    WriteIPDLParam(aMsg, aActor, (aVar).principalToInheritInfo());
    // Sentinel = 'principalToInheritInfo'
    (aMsg)->WriteSentinel(1730939109);
    WriteIPDLParam(aMsg, aActor, (aVar).sandboxedLoadingPrincipalInfo());
    // Sentinel = 'sandboxedLoadingPrincipalInfo'
    (aMsg)->WriteSentinel(2944535461);
    WriteIPDLParam(aMsg, aActor, (aVar).topLevelPrincipalInfo());
    // Sentinel = 'topLevelPrincipalInfo'
    (aMsg)->WriteSentinel(1575618682);
    WriteIPDLParam(aMsg, aActor, (aVar).topLevelStorageAreaPrincipalInfo());
    // Sentinel = 'topLevelStorageAreaPrincipalInfo'
    (aMsg)->WriteSentinel(3561163976);
    WriteIPDLParam(aMsg, aActor, (aVar).resultPrincipalURI());
    // Sentinel = 'resultPrincipalURI'
    (aMsg)->WriteSentinel(1196951346);
    WriteIPDLParam(aMsg, aActor, (aVar).contentPolicyType());
    // Sentinel = 'contentPolicyType'
    (aMsg)->WriteSentinel(1066927886);
    WriteIPDLParam(aMsg, aActor, (aVar).blockAllMixedContent());
    // Sentinel = 'blockAllMixedContent'
    (aMsg)->WriteSentinel(1382287351);
    WriteIPDLParam(aMsg, aActor, (aVar).upgradeInsecureRequests());
    // Sentinel = 'upgradeInsecureRequests'
    (aMsg)->WriteSentinel(1898449283);
    WriteIPDLParam(aMsg, aActor, (aVar).browserUpgradeInsecureRequests());
    // Sentinel = 'browserUpgradeInsecureRequests'
    (aMsg)->WriteSentinel(3215002727);
    WriteIPDLParam(aMsg, aActor, (aVar).browserDidUpgradeInsecureRequests());
    // Sentinel = 'browserDidUpgradeInsecureRequests'
    (aMsg)->WriteSentinel(3812167032);
    WriteIPDLParam(aMsg, aActor, (aVar).browserWouldUpgradeInsecureRequests());
    // Sentinel = 'browserWouldUpgradeInsecureRequests'
    (aMsg)->WriteSentinel(63966834);
    WriteIPDLParam(aMsg, aActor, (aVar).forceAllowDataURI());
    // Sentinel = 'forceAllowDataURI'
    (aMsg)->WriteSentinel(1012729465);
    WriteIPDLParam(aMsg, aActor, (aVar).allowInsecureRedirectToDataURI());
    // Sentinel = 'allowInsecureRedirectToDataURI'
    (aMsg)->WriteSentinel(3146189757);
    WriteIPDLParam(aMsg, aActor, (aVar).bypassCORSChecks());
    // Sentinel = 'bypassCORSChecks'
    (aMsg)->WriteSentinel(881002011);
    WriteIPDLParam(aMsg, aActor, (aVar).skipContentPolicyCheckForWebRequest());
    // Sentinel = 'skipContentPolicyCheckForWebRequest'
    (aMsg)->WriteSentinel(4253683215);
    WriteIPDLParam(aMsg, aActor, (aVar).originalFrameSrcLoad());
    // Sentinel = 'originalFrameSrcLoad'
    (aMsg)->WriteSentinel(1421019113);
    WriteIPDLParam(aMsg, aActor, (aVar).forceInheritPrincipalDropped());
    // Sentinel = 'forceInheritPrincipalDropped'
    (aMsg)->WriteSentinel(2750286675);
    WriteIPDLParam(aMsg, aActor, (aVar).initialSecurityCheckDone());
    // Sentinel = 'initialSecurityCheckDone'
    (aMsg)->WriteSentinel(2050099623);
    WriteIPDLParam(aMsg, aActor, (aVar).isInThirdPartyContext());
    // Sentinel = 'isInThirdPartyContext'
    (aMsg)->WriteSentinel(1536362628);
    WriteIPDLParam(aMsg, aActor, (aVar).isThirdPartyContextToTopWindow());
    // Sentinel = 'isThirdPartyContextToTopWindow'
    (aMsg)->WriteSentinel(3158248507);
    WriteIPDLParam(aMsg, aActor, (aVar).isFormSubmission());
    // Sentinel = 'isFormSubmission'
    (aMsg)->WriteSentinel(927532701);
    WriteIPDLParam(aMsg, aActor, (aVar).sendCSPViolationEvents());
    // Sentinel = 'sendCSPViolationEvents'
    (aMsg)->WriteSentinel(1643907259);
    WriteIPDLParam(aMsg, aActor, (aVar).originAttributes());
    // Sentinel = 'originAttributes'
    (aMsg)->WriteSentinel(947259056);
    WriteIPDLParam(aMsg, aActor, (aVar).redirectChainIncludingInternalRedirects());
    // Sentinel = 'redirectChainIncludingInternalRedirects'
    (aMsg)->WriteSentinel(945622965);
    WriteIPDLParam(aMsg, aActor, (aVar).redirectChain());
    // Sentinel = 'redirectChain'
    (aMsg)->WriteSentinel(618792246);
    WriteIPDLParam(aMsg, aActor, (aVar).clientInfo());
    // Sentinel = 'clientInfo'
    (aMsg)->WriteSentinel(373294092);
    WriteIPDLParam(aMsg, aActor, (aVar).reservedClientInfo());
    // Sentinel = 'reservedClientInfo'
    (aMsg)->WriteSentinel(1176373068);
    WriteIPDLParam(aMsg, aActor, (aVar).initialClientInfo());
    // Sentinel = 'initialClientInfo'
    (aMsg)->WriteSentinel(1038354134);
    WriteIPDLParam(aMsg, aActor, (aVar).controller());
    // Sentinel = 'controller'
    (aMsg)->WriteSentinel(393348165);
    WriteIPDLParam(aMsg, aActor, (aVar).corsUnsafeHeaders());
    // Sentinel = 'corsUnsafeHeaders'
    (aMsg)->WriteSentinel(1036977878);
    WriteIPDLParam(aMsg, aActor, (aVar).forcePreflight());
    // Sentinel = 'forcePreflight'
    (aMsg)->WriteSentinel(714081717);
    WriteIPDLParam(aMsg, aActor, (aVar).isPreflight());
    // Sentinel = 'isPreflight'
    (aMsg)->WriteSentinel(449578114);
    WriteIPDLParam(aMsg, aActor, (aVar).loadTriggeredFromExternal());
    // Sentinel = 'loadTriggeredFromExternal'
    (aMsg)->WriteSentinel(2186938901);
    WriteIPDLParam(aMsg, aActor, (aVar).serviceWorkerTaintingSynthesized());
    // Sentinel = 'serviceWorkerTaintingSynthesized'
    (aMsg)->WriteSentinel(3666152772);
    WriteIPDLParam(aMsg, aActor, (aVar).documentHasUserInteracted());
    // Sentinel = 'documentHasUserInteracted'
    (aMsg)->WriteSentinel(2211777054);
    WriteIPDLParam(aMsg, aActor, (aVar).allowListFutureDocumentsCreatedFromThisRedirectChain());
    // Sentinel = 'allowListFutureDocumentsCreatedFromThisRedirectChain'
    (aMsg)->WriteSentinel(777917666);
    WriteIPDLParam(aMsg, aActor, (aVar).cspNonce());
    // Sentinel = 'cspNonce'
    (aMsg)->WriteSentinel(245105466);
    WriteIPDLParam(aMsg, aActor, (aVar).skipContentSniffing());
    // Sentinel = 'skipContentSniffing'
    (aMsg)->WriteSentinel(1308297159);
    WriteIPDLParam(aMsg, aActor, (aVar).hasValidUserGestureActivation());
    // Sentinel = 'hasValidUserGestureActivation'
    (aMsg)->WriteSentinel(2914388925);
    WriteIPDLParam(aMsg, aActor, (aVar).allowDeprecatedSystemRequests());
    // Sentinel = 'allowDeprecatedSystemRequests'
    (aMsg)->WriteSentinel(2968456178);
    WriteIPDLParam(aMsg, aActor, (aVar).isInDevToolsContext());
    // Sentinel = 'isInDevToolsContext'
    (aMsg)->WriteSentinel(1251215273);
    WriteIPDLParam(aMsg, aActor, (aVar).parserCreatedScript());
    // Sentinel = 'parserCreatedScript'
    (aMsg)->WriteSentinel(1294862267);
    WriteIPDLParam(aMsg, aActor, (aVar).isFromProcessingFrameAttributes());
    // Sentinel = 'isFromProcessingFrameAttributes'
    (aMsg)->WriteSentinel(3359968416);
    WriteIPDLParam(aMsg, aActor, (aVar).cookieJarSettings());
    // Sentinel = 'cookieJarSettings'
    (aMsg)->WriteSentinel(1031800553);
    WriteIPDLParam(aMsg, aActor, (aVar).cspToInheritInfo());
    // Sentinel = 'cspToInheritInfo'
    (aMsg)->WriteSentinel(911541865);
    WriteIPDLParam(aMsg, aActor, (aVar).hasStoragePermission());
    // Sentinel = 'hasStoragePermission'
    (aMsg)->WriteSentinel(1431636027);
    WriteIPDLParam(aMsg, aActor, (aVar).loadingEmbedderPolicy());
    // Sentinel = 'loadingEmbedderPolicy'
    (aMsg)->WriteSentinel(1541343335);
    (aMsg)->WriteBytes((&((aVar).innerWindowID())), 24);
    // Sentinel = 'innerWindowID | browsingContextID | frameBrowsingContextID'
    (aMsg)->WriteSentinel(2418939455);
    (aMsg)->WriteBytes((&((aVar).securityFlags())), 24);
    // Sentinel = 'securityFlags | sandboxFlags | triggeringSandboxFlags | tainting | httpsOnlyStatus | requestBlockingReason'
    (aMsg)->WriteSentinel(2428512557);
}

auto IPDLParamTraits<mozilla::net::LoadInfoArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestingPrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'requestingPrincipalInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'requestingPrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1936591222)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestingPrincipalInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->triggeringPrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'triggeringPrincipalInfo' (PrincipalInfo) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'triggeringPrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1912736097)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'triggeringPrincipalInfo' (PrincipalInfo) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalToInheritInfo())))))) {
        aActor->FatalError("Error deserializing 'principalToInheritInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'principalToInheritInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1730939109)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalToInheritInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sandboxedLoadingPrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'sandboxedLoadingPrincipalInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'sandboxedLoadingPrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 2944535461)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sandboxedLoadingPrincipalInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->topLevelPrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'topLevelPrincipalInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'topLevelPrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1575618682)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'topLevelPrincipalInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->topLevelStorageAreaPrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'topLevelStorageAreaPrincipalInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'topLevelStorageAreaPrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 3561163976)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'topLevelStorageAreaPrincipalInfo' (PrincipalInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->resultPrincipalURI())))))) {
        aActor->FatalError("Error deserializing 'resultPrincipalURI' (URIParams?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'resultPrincipalURI'
    if ((!((aMsg)->ReadSentinel(aIter, 1196951346)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'resultPrincipalURI' (URIParams?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentPolicyType())))))) {
        aActor->FatalError("Error deserializing 'contentPolicyType' (nsContentPolicyType) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'contentPolicyType'
    if ((!((aMsg)->ReadSentinel(aIter, 1066927886)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentPolicyType' (nsContentPolicyType) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blockAllMixedContent())))))) {
        aActor->FatalError("Error deserializing 'blockAllMixedContent' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'blockAllMixedContent'
    if ((!((aMsg)->ReadSentinel(aIter, 1382287351)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blockAllMixedContent' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->upgradeInsecureRequests())))))) {
        aActor->FatalError("Error deserializing 'upgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'upgradeInsecureRequests'
    if ((!((aMsg)->ReadSentinel(aIter, 1898449283)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'upgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->browserUpgradeInsecureRequests())))))) {
        aActor->FatalError("Error deserializing 'browserUpgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'browserUpgradeInsecureRequests'
    if ((!((aMsg)->ReadSentinel(aIter, 3215002727)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'browserUpgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->browserDidUpgradeInsecureRequests())))))) {
        aActor->FatalError("Error deserializing 'browserDidUpgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'browserDidUpgradeInsecureRequests'
    if ((!((aMsg)->ReadSentinel(aIter, 3812167032)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'browserDidUpgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->browserWouldUpgradeInsecureRequests())))))) {
        aActor->FatalError("Error deserializing 'browserWouldUpgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'browserWouldUpgradeInsecureRequests'
    if ((!((aMsg)->ReadSentinel(aIter, 63966834)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'browserWouldUpgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->forceAllowDataURI())))))) {
        aActor->FatalError("Error deserializing 'forceAllowDataURI' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'forceAllowDataURI'
    if ((!((aMsg)->ReadSentinel(aIter, 1012729465)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'forceAllowDataURI' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowInsecureRedirectToDataURI())))))) {
        aActor->FatalError("Error deserializing 'allowInsecureRedirectToDataURI' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'allowInsecureRedirectToDataURI'
    if ((!((aMsg)->ReadSentinel(aIter, 3146189757)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowInsecureRedirectToDataURI' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bypassCORSChecks())))))) {
        aActor->FatalError("Error deserializing 'bypassCORSChecks' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'bypassCORSChecks'
    if ((!((aMsg)->ReadSentinel(aIter, 881002011)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bypassCORSChecks' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->skipContentPolicyCheckForWebRequest())))))) {
        aActor->FatalError("Error deserializing 'skipContentPolicyCheckForWebRequest' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'skipContentPolicyCheckForWebRequest'
    if ((!((aMsg)->ReadSentinel(aIter, 4253683215)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'skipContentPolicyCheckForWebRequest' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originalFrameSrcLoad())))))) {
        aActor->FatalError("Error deserializing 'originalFrameSrcLoad' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'originalFrameSrcLoad'
    if ((!((aMsg)->ReadSentinel(aIter, 1421019113)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originalFrameSrcLoad' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->forceInheritPrincipalDropped())))))) {
        aActor->FatalError("Error deserializing 'forceInheritPrincipalDropped' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'forceInheritPrincipalDropped'
    if ((!((aMsg)->ReadSentinel(aIter, 2750286675)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'forceInheritPrincipalDropped' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->initialSecurityCheckDone())))))) {
        aActor->FatalError("Error deserializing 'initialSecurityCheckDone' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'initialSecurityCheckDone'
    if ((!((aMsg)->ReadSentinel(aIter, 2050099623)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'initialSecurityCheckDone' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isInThirdPartyContext())))))) {
        aActor->FatalError("Error deserializing 'isInThirdPartyContext' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isInThirdPartyContext'
    if ((!((aMsg)->ReadSentinel(aIter, 1536362628)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isInThirdPartyContext' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isThirdPartyContextToTopWindow())))))) {
        aActor->FatalError("Error deserializing 'isThirdPartyContextToTopWindow' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isThirdPartyContextToTopWindow'
    if ((!((aMsg)->ReadSentinel(aIter, 3158248507)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isThirdPartyContextToTopWindow' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFormSubmission())))))) {
        aActor->FatalError("Error deserializing 'isFormSubmission' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isFormSubmission'
    if ((!((aMsg)->ReadSentinel(aIter, 927532701)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFormSubmission' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sendCSPViolationEvents())))))) {
        aActor->FatalError("Error deserializing 'sendCSPViolationEvents' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'sendCSPViolationEvents'
    if ((!((aMsg)->ReadSentinel(aIter, 1643907259)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sendCSPViolationEvents' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originAttributes())))))) {
        aActor->FatalError("Error deserializing 'originAttributes' (OriginAttributes) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'originAttributes'
    if ((!((aMsg)->ReadSentinel(aIter, 947259056)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originAttributes' (OriginAttributes) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->redirectChainIncludingInternalRedirects())))))) {
        aActor->FatalError("Error deserializing 'redirectChainIncludingInternalRedirects' (RedirectHistoryEntryInfo[]) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'redirectChainIncludingInternalRedirects'
    if ((!((aMsg)->ReadSentinel(aIter, 945622965)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'redirectChainIncludingInternalRedirects' (RedirectHistoryEntryInfo[]) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->redirectChain())))))) {
        aActor->FatalError("Error deserializing 'redirectChain' (RedirectHistoryEntryInfo[]) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'redirectChain'
    if ((!((aMsg)->ReadSentinel(aIter, 618792246)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'redirectChain' (RedirectHistoryEntryInfo[]) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientInfo())))))) {
        aActor->FatalError("Error deserializing 'clientInfo' (IPCClientInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'clientInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 373294092)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientInfo' (IPCClientInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->reservedClientInfo())))))) {
        aActor->FatalError("Error deserializing 'reservedClientInfo' (IPCClientInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'reservedClientInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1176373068)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'reservedClientInfo' (IPCClientInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->initialClientInfo())))))) {
        aActor->FatalError("Error deserializing 'initialClientInfo' (IPCClientInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'initialClientInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1038354134)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'initialClientInfo' (IPCClientInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->controller())))))) {
        aActor->FatalError("Error deserializing 'controller' (IPCServiceWorkerDescriptor?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'controller'
    if ((!((aMsg)->ReadSentinel(aIter, 393348165)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'controller' (IPCServiceWorkerDescriptor?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->corsUnsafeHeaders())))))) {
        aActor->FatalError("Error deserializing 'corsUnsafeHeaders' (nsCString[]) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'corsUnsafeHeaders'
    if ((!((aMsg)->ReadSentinel(aIter, 1036977878)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'corsUnsafeHeaders' (nsCString[]) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->forcePreflight())))))) {
        aActor->FatalError("Error deserializing 'forcePreflight' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'forcePreflight'
    if ((!((aMsg)->ReadSentinel(aIter, 714081717)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'forcePreflight' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isPreflight())))))) {
        aActor->FatalError("Error deserializing 'isPreflight' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isPreflight'
    if ((!((aMsg)->ReadSentinel(aIter, 449578114)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isPreflight' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadTriggeredFromExternal())))))) {
        aActor->FatalError("Error deserializing 'loadTriggeredFromExternal' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'loadTriggeredFromExternal'
    if ((!((aMsg)->ReadSentinel(aIter, 2186938901)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadTriggeredFromExternal' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->serviceWorkerTaintingSynthesized())))))) {
        aActor->FatalError("Error deserializing 'serviceWorkerTaintingSynthesized' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'serviceWorkerTaintingSynthesized'
    if ((!((aMsg)->ReadSentinel(aIter, 3666152772)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'serviceWorkerTaintingSynthesized' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->documentHasUserInteracted())))))) {
        aActor->FatalError("Error deserializing 'documentHasUserInteracted' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'documentHasUserInteracted'
    if ((!((aMsg)->ReadSentinel(aIter, 2211777054)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'documentHasUserInteracted' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowListFutureDocumentsCreatedFromThisRedirectChain())))))) {
        aActor->FatalError("Error deserializing 'allowListFutureDocumentsCreatedFromThisRedirectChain' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'allowListFutureDocumentsCreatedFromThisRedirectChain'
    if ((!((aMsg)->ReadSentinel(aIter, 777917666)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowListFutureDocumentsCreatedFromThisRedirectChain' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cspNonce())))))) {
        aActor->FatalError("Error deserializing 'cspNonce' (nsString) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'cspNonce'
    if ((!((aMsg)->ReadSentinel(aIter, 245105466)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cspNonce' (nsString) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->skipContentSniffing())))))) {
        aActor->FatalError("Error deserializing 'skipContentSniffing' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'skipContentSniffing'
    if ((!((aMsg)->ReadSentinel(aIter, 1308297159)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'skipContentSniffing' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasValidUserGestureActivation())))))) {
        aActor->FatalError("Error deserializing 'hasValidUserGestureActivation' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'hasValidUserGestureActivation'
    if ((!((aMsg)->ReadSentinel(aIter, 2914388925)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasValidUserGestureActivation' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowDeprecatedSystemRequests())))))) {
        aActor->FatalError("Error deserializing 'allowDeprecatedSystemRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'allowDeprecatedSystemRequests'
    if ((!((aMsg)->ReadSentinel(aIter, 2968456178)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowDeprecatedSystemRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isInDevToolsContext())))))) {
        aActor->FatalError("Error deserializing 'isInDevToolsContext' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isInDevToolsContext'
    if ((!((aMsg)->ReadSentinel(aIter, 1251215273)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isInDevToolsContext' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->parserCreatedScript())))))) {
        aActor->FatalError("Error deserializing 'parserCreatedScript' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'parserCreatedScript'
    if ((!((aMsg)->ReadSentinel(aIter, 1294862267)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'parserCreatedScript' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFromProcessingFrameAttributes())))))) {
        aActor->FatalError("Error deserializing 'isFromProcessingFrameAttributes' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isFromProcessingFrameAttributes'
    if ((!((aMsg)->ReadSentinel(aIter, 3359968416)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFromProcessingFrameAttributes' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cookieJarSettings())))))) {
        aActor->FatalError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'cookieJarSettings'
    if ((!((aMsg)->ReadSentinel(aIter, 1031800553)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cspToInheritInfo())))))) {
        aActor->FatalError("Error deserializing 'cspToInheritInfo' (CSPInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'cspToInheritInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 911541865)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cspToInheritInfo' (CSPInfo?) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasStoragePermission())))))) {
        aActor->FatalError("Error deserializing 'hasStoragePermission' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'hasStoragePermission'
    if ((!((aMsg)->ReadSentinel(aIter, 1431636027)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasStoragePermission' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadingEmbedderPolicy())))))) {
        aActor->FatalError("Error deserializing 'loadingEmbedderPolicy' (CrossOriginEmbedderPolicy) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'loadingEmbedderPolicy'
    if ((!((aMsg)->ReadSentinel(aIter, 1541343335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadingEmbedderPolicy' (CrossOriginEmbedderPolicy) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->innerWindowID())), 24)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'innerWindowID | browsingContextID | frameBrowsingContextID'
    if ((!((aMsg)->ReadSentinel(aIter, 2418939455)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->securityFlags())), 24)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'securityFlags | sandboxFlags | triggeringSandboxFlags | tainting | httpsOnlyStatus | requestBlockingReason'
    if ((!((aMsg)->ReadSentinel(aIter, 2428512557)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ParentLoadInfoForwarderArgs|
//
namespace mozilla {
namespace net {
auto ParentLoadInfoForwarderArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ParentLoadInfoForwarderArgs, requestBlockingReason_) - offsetof(ParentLoadInfoForwarderArgs, tainting_)) == 12,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::ParentLoadInfoForwarderArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).allowInsecureRedirectToDataURI());
    // Sentinel = 'allowInsecureRedirectToDataURI'
    (aMsg)->WriteSentinel(3146189757);
    WriteIPDLParam(aMsg, aActor, (aVar).bypassCORSChecks());
    // Sentinel = 'bypassCORSChecks'
    (aMsg)->WriteSentinel(881002011);
    WriteIPDLParam(aMsg, aActor, (aVar).controller());
    // Sentinel = 'controller'
    (aMsg)->WriteSentinel(393348165);
    WriteIPDLParam(aMsg, aActor, (aVar).skipContentSniffing());
    // Sentinel = 'skipContentSniffing'
    (aMsg)->WriteSentinel(1308297159);
    WriteIPDLParam(aMsg, aActor, (aVar).hasValidUserGestureActivation());
    // Sentinel = 'hasValidUserGestureActivation'
    (aMsg)->WriteSentinel(2914388925);
    WriteIPDLParam(aMsg, aActor, (aVar).allowDeprecatedSystemRequests());
    // Sentinel = 'allowDeprecatedSystemRequests'
    (aMsg)->WriteSentinel(2968456178);
    WriteIPDLParam(aMsg, aActor, (aVar).isInDevToolsContext());
    // Sentinel = 'isInDevToolsContext'
    (aMsg)->WriteSentinel(1251215273);
    WriteIPDLParam(aMsg, aActor, (aVar).parserCreatedScript());
    // Sentinel = 'parserCreatedScript'
    (aMsg)->WriteSentinel(1294862267);
    WriteIPDLParam(aMsg, aActor, (aVar).serviceWorkerTaintingSynthesized());
    // Sentinel = 'serviceWorkerTaintingSynthesized'
    (aMsg)->WriteSentinel(3666152772);
    WriteIPDLParam(aMsg, aActor, (aVar).documentHasUserInteracted());
    // Sentinel = 'documentHasUserInteracted'
    (aMsg)->WriteSentinel(2211777054);
    WriteIPDLParam(aMsg, aActor, (aVar).allowListFutureDocumentsCreatedFromThisRedirectChain());
    // Sentinel = 'allowListFutureDocumentsCreatedFromThisRedirectChain'
    (aMsg)->WriteSentinel(777917666);
    WriteIPDLParam(aMsg, aActor, (aVar).cookieJarSettings());
    // Sentinel = 'cookieJarSettings'
    (aMsg)->WriteSentinel(1031800553);
    WriteIPDLParam(aMsg, aActor, (aVar).hasStoragePermission());
    // Sentinel = 'hasStoragePermission'
    (aMsg)->WriteSentinel(1431636027);
    WriteIPDLParam(aMsg, aActor, (aVar).isThirdPartyContextToTopWindow());
    // Sentinel = 'isThirdPartyContextToTopWindow'
    (aMsg)->WriteSentinel(3158248507);
    WriteIPDLParam(aMsg, aActor, (aVar).isInThirdPartyContext());
    // Sentinel = 'isInThirdPartyContext'
    (aMsg)->WriteSentinel(1536362628);
    (aMsg)->WriteBytes((&((aVar).tainting())), 16);
    // Sentinel = 'tainting | httpsOnlyStatus | triggeringSandboxFlags | requestBlockingReason'
    (aMsg)->WriteSentinel(1560747380);
}

auto IPDLParamTraits<mozilla::net::ParentLoadInfoForwarderArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowInsecureRedirectToDataURI())))))) {
        aActor->FatalError("Error deserializing 'allowInsecureRedirectToDataURI' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'allowInsecureRedirectToDataURI'
    if ((!((aMsg)->ReadSentinel(aIter, 3146189757)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowInsecureRedirectToDataURI' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->bypassCORSChecks())))))) {
        aActor->FatalError("Error deserializing 'bypassCORSChecks' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'bypassCORSChecks'
    if ((!((aMsg)->ReadSentinel(aIter, 881002011)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bypassCORSChecks' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->controller())))))) {
        aActor->FatalError("Error deserializing 'controller' (IPCServiceWorkerDescriptor?) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'controller'
    if ((!((aMsg)->ReadSentinel(aIter, 393348165)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'controller' (IPCServiceWorkerDescriptor?) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->skipContentSniffing())))))) {
        aActor->FatalError("Error deserializing 'skipContentSniffing' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'skipContentSniffing'
    if ((!((aMsg)->ReadSentinel(aIter, 1308297159)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'skipContentSniffing' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasValidUserGestureActivation())))))) {
        aActor->FatalError("Error deserializing 'hasValidUserGestureActivation' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'hasValidUserGestureActivation'
    if ((!((aMsg)->ReadSentinel(aIter, 2914388925)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasValidUserGestureActivation' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowDeprecatedSystemRequests())))))) {
        aActor->FatalError("Error deserializing 'allowDeprecatedSystemRequests' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'allowDeprecatedSystemRequests'
    if ((!((aMsg)->ReadSentinel(aIter, 2968456178)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowDeprecatedSystemRequests' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isInDevToolsContext())))))) {
        aActor->FatalError("Error deserializing 'isInDevToolsContext' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'isInDevToolsContext'
    if ((!((aMsg)->ReadSentinel(aIter, 1251215273)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isInDevToolsContext' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->parserCreatedScript())))))) {
        aActor->FatalError("Error deserializing 'parserCreatedScript' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'parserCreatedScript'
    if ((!((aMsg)->ReadSentinel(aIter, 1294862267)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'parserCreatedScript' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->serviceWorkerTaintingSynthesized())))))) {
        aActor->FatalError("Error deserializing 'serviceWorkerTaintingSynthesized' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'serviceWorkerTaintingSynthesized'
    if ((!((aMsg)->ReadSentinel(aIter, 3666152772)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'serviceWorkerTaintingSynthesized' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->documentHasUserInteracted())))))) {
        aActor->FatalError("Error deserializing 'documentHasUserInteracted' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'documentHasUserInteracted'
    if ((!((aMsg)->ReadSentinel(aIter, 2211777054)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'documentHasUserInteracted' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowListFutureDocumentsCreatedFromThisRedirectChain())))))) {
        aActor->FatalError("Error deserializing 'allowListFutureDocumentsCreatedFromThisRedirectChain' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'allowListFutureDocumentsCreatedFromThisRedirectChain'
    if ((!((aMsg)->ReadSentinel(aIter, 777917666)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowListFutureDocumentsCreatedFromThisRedirectChain' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cookieJarSettings())))))) {
        aActor->FatalError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs?) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'cookieJarSettings'
    if ((!((aMsg)->ReadSentinel(aIter, 1031800553)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs?) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasStoragePermission())))))) {
        aActor->FatalError("Error deserializing 'hasStoragePermission' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'hasStoragePermission'
    if ((!((aMsg)->ReadSentinel(aIter, 1431636027)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasStoragePermission' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isThirdPartyContextToTopWindow())))))) {
        aActor->FatalError("Error deserializing 'isThirdPartyContextToTopWindow' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'isThirdPartyContextToTopWindow'
    if ((!((aMsg)->ReadSentinel(aIter, 3158248507)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isThirdPartyContextToTopWindow' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isInThirdPartyContext())))))) {
        aActor->FatalError("Error deserializing 'isInThirdPartyContext' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'isInThirdPartyContext'
    if ((!((aMsg)->ReadSentinel(aIter, 1536362628)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isInThirdPartyContext' (bool) member of 'ParentLoadInfoForwarderArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->tainting())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'tainting | httpsOnlyStatus | triggeringSandboxFlags | requestBlockingReason'
    if ((!((aMsg)->ReadSentinel(aIter, 1560747380)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ChildLoadInfoForwarderArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::ChildLoadInfoForwarderArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).reservedClientInfo());
    // Sentinel = 'reservedClientInfo'
    (aMsg)->WriteSentinel(1176373068);
    WriteIPDLParam(aMsg, aActor, (aVar).initialClientInfo());
    // Sentinel = 'initialClientInfo'
    (aMsg)->WriteSentinel(1038354134);
    WriteIPDLParam(aMsg, aActor, (aVar).controller());
    // Sentinel = 'controller'
    (aMsg)->WriteSentinel(393348165);
    (aMsg)->WriteBytes((&((aVar).requestBlockingReason())), 4);
    // Sentinel = 'requestBlockingReason'
    (aMsg)->WriteSentinel(1599867035);
}

auto IPDLParamTraits<mozilla::net::ChildLoadInfoForwarderArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->reservedClientInfo())))))) {
        aActor->FatalError("Error deserializing 'reservedClientInfo' (IPCClientInfo?) member of 'ChildLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'reservedClientInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1176373068)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'reservedClientInfo' (IPCClientInfo?) member of 'ChildLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->initialClientInfo())))))) {
        aActor->FatalError("Error deserializing 'initialClientInfo' (IPCClientInfo?) member of 'ChildLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'initialClientInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1038354134)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'initialClientInfo' (IPCClientInfo?) member of 'ChildLoadInfoForwarderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->controller())))))) {
        aActor->FatalError("Error deserializing 'controller' (IPCServiceWorkerDescriptor?) member of 'ChildLoadInfoForwarderArgs'");
        return false;
    }
    // Sentinel = 'controller'
    if ((!((aMsg)->ReadSentinel(aIter, 393348165)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'controller' (IPCServiceWorkerDescriptor?) member of 'ChildLoadInfoForwarderArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->requestBlockingReason())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'requestBlockingReason'
    if ((!((aMsg)->ReadSentinel(aIter, 1599867035)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CorsPreflightArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::CorsPreflightArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).unsafeHeaders());
    // Sentinel = 'unsafeHeaders'
    (aMsg)->WriteSentinel(619709759);
}

auto IPDLParamTraits<mozilla::net::CorsPreflightArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->unsafeHeaders())))))) {
        aActor->FatalError("Error deserializing 'unsafeHeaders' (nsCString[]) member of 'CorsPreflightArgs'");
        return false;
    }
    // Sentinel = 'unsafeHeaders'
    if ((!((aMsg)->ReadSentinel(aIter, 619709759)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'unsafeHeaders' (nsCString[]) member of 'CorsPreflightArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HttpChannelOpenArgs|
//
namespace mozilla {
namespace net {
auto HttpChannelOpenArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(HttpChannelOpenArgs, topLevelOuterContentWindowId_) - offsetof(HttpChannelOpenArgs, startPos_)) == 32,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(HttpChannelOpenArgs, redirectMode_) - offsetof(HttpChannelOpenArgs, loadFlags_)) == 28,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::HttpChannelOpenArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uri());
    // Sentinel = 'uri'
    (aMsg)->WriteSentinel(45023569);
    WriteIPDLParam(aMsg, aActor, (aVar).original());
    // Sentinel = 'original'
    (aMsg)->WriteSentinel(255001430);
    WriteIPDLParam(aMsg, aActor, (aVar).doc());
    // Sentinel = 'doc'
    (aMsg)->WriteSentinel(40894775);
    WriteIPDLParam(aMsg, aActor, (aVar).referrerInfo());
    // Sentinel = 'referrerInfo'
    (aMsg)->WriteSentinel(540214506);
    WriteIPDLParam(aMsg, aActor, (aVar).apiRedirectTo());
    // Sentinel = 'apiRedirectTo'
    (aMsg)->WriteSentinel(606143792);
    WriteIPDLParam(aMsg, aActor, (aVar).topWindowURI());
    // Sentinel = 'topWindowURI'
    (aMsg)->WriteSentinel(541394108);
    WriteIPDLParam(aMsg, aActor, (aVar).requestHeaders());
    // Sentinel = 'requestHeaders'
    (aMsg)->WriteSentinel(732693958);
    WriteIPDLParam(aMsg, aActor, (aVar).requestMethod());
    // Sentinel = 'requestMethod'
    (aMsg)->WriteSentinel(643958123);
    WriteIPDLParam(aMsg, aActor, (aVar).uploadStream());
    // Sentinel = 'uploadStream'
    (aMsg)->WriteSentinel(546768114);
    WriteIPDLParam(aMsg, aActor, (aVar).uploadStreamHasHeaders());
    // Sentinel = 'uploadStreamHasHeaders'
    (aMsg)->WriteSentinel(1714227402);
    WriteIPDLParam(aMsg, aActor, (aVar).allowSTS());
    // Sentinel = 'allowSTS'
    (aMsg)->WriteSentinel(243729178);
    WriteIPDLParam(aMsg, aActor, (aVar).resumeAt());
    // Sentinel = 'resumeAt'
    (aMsg)->WriteSentinel(254739271);
    WriteIPDLParam(aMsg, aActor, (aVar).entityID());
    // Sentinel = 'entityID'
    (aMsg)->WriteSentinel(252183339);
    WriteIPDLParam(aMsg, aActor, (aVar).chooseApplicationCache());
    // Sentinel = 'chooseApplicationCache'
    (aMsg)->WriteSentinel(1714489546);
    WriteIPDLParam(aMsg, aActor, (aVar).appCacheClientID());
    // Sentinel = 'appCacheClientID'
    (aMsg)->WriteSentinel(872809986);
    WriteIPDLParam(aMsg, aActor, (aVar).allowSpdy());
    // Sentinel = 'allowSpdy'
    (aMsg)->WriteSentinel(311428032);
    WriteIPDLParam(aMsg, aActor, (aVar).allowHttp3());
    // Sentinel = 'allowHttp3'
    (aMsg)->WriteSentinel(377095155);
    WriteIPDLParam(aMsg, aActor, (aVar).allowAltSvc());
    // Sentinel = 'allowAltSvc'
    (aMsg)->WriteSentinel(447546477);
    WriteIPDLParam(aMsg, aActor, (aVar).beConservative());
    // Sentinel = 'beConservative'
    (aMsg)->WriteSentinel(706086337);
    WriteIPDLParam(aMsg, aActor, (aVar).loadInfo());
    // Sentinel = 'loadInfo'
    (aMsg)->WriteSentinel(240386861);
    WriteIPDLParam(aMsg, aActor, (aVar).preflightArgs());
    // Sentinel = 'preflightArgs'
    (aMsg)->WriteSentinel(630981971);
    WriteIPDLParam(aMsg, aActor, (aVar).blockAuthPrompt());
    // Sentinel = 'blockAuthPrompt'
    (aMsg)->WriteSentinel(807732768);
    WriteIPDLParam(aMsg, aActor, (aVar).allowStaleCacheContent());
    // Sentinel = 'allowStaleCacheContent'
    (aMsg)->WriteSentinel(1689192648);
    WriteIPDLParam(aMsg, aActor, (aVar).preferCacheLoadOverBypass());
    // Sentinel = 'preferCacheLoadOverBypass'
    (aMsg)->WriteSentinel(2144602599);
    WriteIPDLParam(aMsg, aActor, (aVar).contentTypeHint());
    // Sentinel = 'contentTypeHint'
    (aMsg)->WriteSentinel(836634161);
    WriteIPDLParam(aMsg, aActor, (aVar).integrityMetadata());
    // Sentinel = 'integrityMetadata'
    (aMsg)->WriteSentinel(1071580929);
    WriteIPDLParam(aMsg, aActor, (aVar).preferredAlternativeTypes());
    // Sentinel = 'preferredAlternativeTypes'
    (aMsg)->WriteSentinel(2243365460);
    WriteIPDLParam(aMsg, aActor, (aVar).launchServiceWorkerStart());
    // Sentinel = 'launchServiceWorkerStart'
    (aMsg)->WriteSentinel(2052262357);
    WriteIPDLParam(aMsg, aActor, (aVar).launchServiceWorkerEnd());
    // Sentinel = 'launchServiceWorkerEnd'
    (aMsg)->WriteSentinel(1726613726);
    WriteIPDLParam(aMsg, aActor, (aVar).dispatchFetchEventStart());
    // Sentinel = 'dispatchFetchEventStart'
    (aMsg)->WriteSentinel(1861880139);
    WriteIPDLParam(aMsg, aActor, (aVar).dispatchFetchEventEnd());
    // Sentinel = 'dispatchFetchEventEnd'
    (aMsg)->WriteSentinel(1554319444);
    WriteIPDLParam(aMsg, aActor, (aVar).handleFetchEventStart());
    // Sentinel = 'handleFetchEventStart'
    (aMsg)->WriteSentinel(1529022567);
    WriteIPDLParam(aMsg, aActor, (aVar).handleFetchEventEnd());
    // Sentinel = 'handleFetchEventEnd'
    (aMsg)->WriteSentinel(1251346288);
    WriteIPDLParam(aMsg, aActor, (aVar).forceMainDocumentChannel());
    // Sentinel = 'forceMainDocumentChannel'
    (aMsg)->WriteSentinel(1994656141);
    WriteIPDLParam(aMsg, aActor, (aVar).navigationStartTimeStamp());
    // Sentinel = 'navigationStartTimeStamp'
    (aMsg)->WriteSentinel(2071661011);
    WriteIPDLParam(aMsg, aActor, (aVar).hasNonEmptySandboxingFlag());
    // Sentinel = 'hasNonEmptySandboxingFlag'
    (aMsg)->WriteSentinel(2181433854);
    (aMsg)->WriteBytes((&((aVar).startPos())), 40);
    // Sentinel = 'startPos | requestContextID | channelId | contentWindowId | topLevelOuterContentWindowId'
    (aMsg)->WriteSentinel(3581092300);
    (aMsg)->WriteBytes((&((aVar).loadFlags())), 32);
    // Sentinel = 'loadFlags | classOfService | thirdPartyFlags | tlsFlags | cacheKey | initialRwin | corsMode | redirectMode'
    (aMsg)->WriteSentinel(991504224);
    (aMsg)->WriteBytes((&((aVar).priority())), 2);
    // Sentinel = 'priority'
    (aMsg)->WriteSentinel(262865795);
    (aMsg)->WriteBytes((&((aVar).redirectionLimit())), 1);
    // Sentinel = 'redirectionLimit'
    (aMsg)->WriteSentinel(941295256);
}

auto IPDLParamTraits<mozilla::net::HttpChannelOpenArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uri())))))) {
        aActor->FatalError("Error deserializing 'uri' (URIParams) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'uri'
    if ((!((aMsg)->ReadSentinel(aIter, 45023569)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uri' (URIParams) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->original())))))) {
        aActor->FatalError("Error deserializing 'original' (URIParams?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'original'
    if ((!((aMsg)->ReadSentinel(aIter, 255001430)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'original' (URIParams?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->doc())))))) {
        aActor->FatalError("Error deserializing 'doc' (URIParams?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'doc'
    if ((!((aMsg)->ReadSentinel(aIter, 40894775)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'doc' (URIParams?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrerInfo())))))) {
        aActor->FatalError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'referrerInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 540214506)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->apiRedirectTo())))))) {
        aActor->FatalError("Error deserializing 'apiRedirectTo' (URIParams?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'apiRedirectTo'
    if ((!((aMsg)->ReadSentinel(aIter, 606143792)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'apiRedirectTo' (URIParams?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->topWindowURI())))))) {
        aActor->FatalError("Error deserializing 'topWindowURI' (URIParams?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'topWindowURI'
    if ((!((aMsg)->ReadSentinel(aIter, 541394108)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'topWindowURI' (URIParams?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestHeaders())))))) {
        aActor->FatalError("Error deserializing 'requestHeaders' (RequestHeaderTuples) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'requestHeaders'
    if ((!((aMsg)->ReadSentinel(aIter, 732693958)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestHeaders' (RequestHeaderTuples) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestMethod())))))) {
        aActor->FatalError("Error deserializing 'requestMethod' (nsCString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'requestMethod'
    if ((!((aMsg)->ReadSentinel(aIter, 643958123)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestMethod' (nsCString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uploadStream())))))) {
        aActor->FatalError("Error deserializing 'uploadStream' (IPCStream?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'uploadStream'
    if ((!((aMsg)->ReadSentinel(aIter, 546768114)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uploadStream' (IPCStream?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uploadStreamHasHeaders())))))) {
        aActor->FatalError("Error deserializing 'uploadStreamHasHeaders' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'uploadStreamHasHeaders'
    if ((!((aMsg)->ReadSentinel(aIter, 1714227402)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uploadStreamHasHeaders' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowSTS())))))) {
        aActor->FatalError("Error deserializing 'allowSTS' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'allowSTS'
    if ((!((aMsg)->ReadSentinel(aIter, 243729178)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowSTS' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->resumeAt())))))) {
        aActor->FatalError("Error deserializing 'resumeAt' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'resumeAt'
    if ((!((aMsg)->ReadSentinel(aIter, 254739271)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'resumeAt' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->entityID())))))) {
        aActor->FatalError("Error deserializing 'entityID' (nsCString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'entityID'
    if ((!((aMsg)->ReadSentinel(aIter, 252183339)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'entityID' (nsCString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->chooseApplicationCache())))))) {
        aActor->FatalError("Error deserializing 'chooseApplicationCache' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'chooseApplicationCache'
    if ((!((aMsg)->ReadSentinel(aIter, 1714489546)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'chooseApplicationCache' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->appCacheClientID())))))) {
        aActor->FatalError("Error deserializing 'appCacheClientID' (nsCString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'appCacheClientID'
    if ((!((aMsg)->ReadSentinel(aIter, 872809986)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'appCacheClientID' (nsCString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowSpdy())))))) {
        aActor->FatalError("Error deserializing 'allowSpdy' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'allowSpdy'
    if ((!((aMsg)->ReadSentinel(aIter, 311428032)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowSpdy' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowHttp3())))))) {
        aActor->FatalError("Error deserializing 'allowHttp3' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'allowHttp3'
    if ((!((aMsg)->ReadSentinel(aIter, 377095155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowHttp3' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowAltSvc())))))) {
        aActor->FatalError("Error deserializing 'allowAltSvc' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'allowAltSvc'
    if ((!((aMsg)->ReadSentinel(aIter, 447546477)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowAltSvc' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->beConservative())))))) {
        aActor->FatalError("Error deserializing 'beConservative' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'beConservative'
    if ((!((aMsg)->ReadSentinel(aIter, 706086337)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'beConservative' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadInfo())))))) {
        aActor->FatalError("Error deserializing 'loadInfo' (LoadInfoArgs?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'loadInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 240386861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadInfo' (LoadInfoArgs?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preflightArgs())))))) {
        aActor->FatalError("Error deserializing 'preflightArgs' (CorsPreflightArgs?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'preflightArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 630981971)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preflightArgs' (CorsPreflightArgs?) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blockAuthPrompt())))))) {
        aActor->FatalError("Error deserializing 'blockAuthPrompt' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'blockAuthPrompt'
    if ((!((aMsg)->ReadSentinel(aIter, 807732768)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blockAuthPrompt' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allowStaleCacheContent())))))) {
        aActor->FatalError("Error deserializing 'allowStaleCacheContent' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'allowStaleCacheContent'
    if ((!((aMsg)->ReadSentinel(aIter, 1689192648)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allowStaleCacheContent' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preferCacheLoadOverBypass())))))) {
        aActor->FatalError("Error deserializing 'preferCacheLoadOverBypass' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'preferCacheLoadOverBypass'
    if ((!((aMsg)->ReadSentinel(aIter, 2144602599)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preferCacheLoadOverBypass' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentTypeHint())))))) {
        aActor->FatalError("Error deserializing 'contentTypeHint' (nsCString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'contentTypeHint'
    if ((!((aMsg)->ReadSentinel(aIter, 836634161)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentTypeHint' (nsCString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->integrityMetadata())))))) {
        aActor->FatalError("Error deserializing 'integrityMetadata' (nsString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'integrityMetadata'
    if ((!((aMsg)->ReadSentinel(aIter, 1071580929)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'integrityMetadata' (nsString) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preferredAlternativeTypes())))))) {
        aActor->FatalError("Error deserializing 'preferredAlternativeTypes' (PreferredAlternativeDataTypeParams[]) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'preferredAlternativeTypes'
    if ((!((aMsg)->ReadSentinel(aIter, 2243365460)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preferredAlternativeTypes' (PreferredAlternativeDataTypeParams[]) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->launchServiceWorkerStart())))))) {
        aActor->FatalError("Error deserializing 'launchServiceWorkerStart' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'launchServiceWorkerStart'
    if ((!((aMsg)->ReadSentinel(aIter, 2052262357)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'launchServiceWorkerStart' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->launchServiceWorkerEnd())))))) {
        aActor->FatalError("Error deserializing 'launchServiceWorkerEnd' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'launchServiceWorkerEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 1726613726)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'launchServiceWorkerEnd' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dispatchFetchEventStart())))))) {
        aActor->FatalError("Error deserializing 'dispatchFetchEventStart' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'dispatchFetchEventStart'
    if ((!((aMsg)->ReadSentinel(aIter, 1861880139)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dispatchFetchEventStart' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dispatchFetchEventEnd())))))) {
        aActor->FatalError("Error deserializing 'dispatchFetchEventEnd' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'dispatchFetchEventEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 1554319444)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dispatchFetchEventEnd' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handleFetchEventStart())))))) {
        aActor->FatalError("Error deserializing 'handleFetchEventStart' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'handleFetchEventStart'
    if ((!((aMsg)->ReadSentinel(aIter, 1529022567)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handleFetchEventStart' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handleFetchEventEnd())))))) {
        aActor->FatalError("Error deserializing 'handleFetchEventEnd' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'handleFetchEventEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 1251346288)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handleFetchEventEnd' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->forceMainDocumentChannel())))))) {
        aActor->FatalError("Error deserializing 'forceMainDocumentChannel' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'forceMainDocumentChannel'
    if ((!((aMsg)->ReadSentinel(aIter, 1994656141)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'forceMainDocumentChannel' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->navigationStartTimeStamp())))))) {
        aActor->FatalError("Error deserializing 'navigationStartTimeStamp' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'navigationStartTimeStamp'
    if ((!((aMsg)->ReadSentinel(aIter, 2071661011)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'navigationStartTimeStamp' (TimeStamp) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasNonEmptySandboxingFlag())))))) {
        aActor->FatalError("Error deserializing 'hasNonEmptySandboxingFlag' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'hasNonEmptySandboxingFlag'
    if ((!((aMsg)->ReadSentinel(aIter, 2181433854)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasNonEmptySandboxingFlag' (bool) member of 'HttpChannelOpenArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->startPos())), 40)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'startPos | requestContextID | channelId | contentWindowId | topLevelOuterContentWindowId'
    if ((!((aMsg)->ReadSentinel(aIter, 3581092300)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->loadFlags())), 32)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'loadFlags | classOfService | thirdPartyFlags | tlsFlags | cacheKey | initialRwin | corsMode | redirectMode'
    if ((!((aMsg)->ReadSentinel(aIter, 991504224)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->priority())), 2)))) {
        aActor->FatalError("Error bulk reading fields from int16_t");
        return false;
    }
    // Sentinel = 'priority'
    if ((!((aMsg)->ReadSentinel(aIter, 262865795)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int16_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->redirectionLimit())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'redirectionLimit'
    if ((!((aMsg)->ReadSentinel(aIter, 941295256)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HttpChannelConnectArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::HttpChannelConnectArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).registrarId())), 4);
    // Sentinel = 'registrarId'
    (aMsg)->WriteSentinel(464585857);
}

auto IPDLParamTraits<mozilla::net::HttpChannelConnectArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->registrarId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'registrarId'
    if ((!((aMsg)->ReadSentinel(aIter, 464585857)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union HttpChannelCreationArgs|
//
namespace mozilla {
namespace net {
auto HttpChannelCreationArgs::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case THttpChannelOpenArgs:
        {
            (ptr_HttpChannelOpenArgs())->~HttpChannelOpenArgs__tdef();
            break;
        }
    case THttpChannelConnectArgs:
        {
            (ptr_HttpChannelConnectArgs())->~HttpChannelConnectArgs__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT HttpChannelCreationArgs::HttpChannelCreationArgs(const HttpChannelOpenArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_HttpChannelOpenArgs()) HttpChannelOpenArgs(aOther);
    mType = THttpChannelOpenArgs;
}

MOZ_IMPLICIT HttpChannelCreationArgs::HttpChannelCreationArgs(HttpChannelOpenArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_HttpChannelOpenArgs()) HttpChannelOpenArgs(std::move(aOther));
    mType = THttpChannelOpenArgs;
}

MOZ_IMPLICIT HttpChannelCreationArgs::HttpChannelCreationArgs(const HttpChannelConnectArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_HttpChannelConnectArgs()) HttpChannelConnectArgs(aOther);
    mType = THttpChannelConnectArgs;
}

MOZ_IMPLICIT HttpChannelCreationArgs::HttpChannelCreationArgs(HttpChannelConnectArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_HttpChannelConnectArgs()) HttpChannelConnectArgs(std::move(aOther));
    mType = THttpChannelConnectArgs;
}

MOZ_IMPLICIT HttpChannelCreationArgs::HttpChannelCreationArgs(const HttpChannelCreationArgs& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case THttpChannelOpenArgs:
        {
            new (mozilla::KnownNotNull, ptr_HttpChannelOpenArgs()) HttpChannelOpenArgs((aOther).get_HttpChannelOpenArgs());
            break;
        }
    case THttpChannelConnectArgs:
        {
            new (mozilla::KnownNotNull, ptr_HttpChannelConnectArgs()) HttpChannelConnectArgs((aOther).get_HttpChannelConnectArgs());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT HttpChannelCreationArgs::HttpChannelCreationArgs(HttpChannelCreationArgs&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case THttpChannelOpenArgs:
        {
            new (mozilla::KnownNotNull, ptr_HttpChannelOpenArgs()) HttpChannelOpenArgs(std::move((aOther).get_HttpChannelOpenArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case THttpChannelConnectArgs:
        {
            new (mozilla::KnownNotNull, ptr_HttpChannelConnectArgs()) HttpChannelConnectArgs(std::move((aOther).get_HttpChannelConnectArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

HttpChannelCreationArgs::~HttpChannelCreationArgs()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto HttpChannelCreationArgs::operator=(const HttpChannelOpenArgs& aRhs) -> HttpChannelCreationArgs&
{
    if (MaybeDestroy(THttpChannelOpenArgs)) {
        new (mozilla::KnownNotNull, ptr_HttpChannelOpenArgs()) HttpChannelOpenArgs;
    }
    (*(ptr_HttpChannelOpenArgs())) = aRhs;
    mType = THttpChannelOpenArgs;
    return (*(this));
}

auto HttpChannelCreationArgs::operator=(HttpChannelOpenArgs&& aRhs) -> HttpChannelCreationArgs&
{
    if (MaybeDestroy(THttpChannelOpenArgs)) {
        new (mozilla::KnownNotNull, ptr_HttpChannelOpenArgs()) HttpChannelOpenArgs;
    }
    (*(ptr_HttpChannelOpenArgs())) = std::move(aRhs);
    mType = THttpChannelOpenArgs;
    return (*(this));
}

auto HttpChannelCreationArgs::operator=(const HttpChannelConnectArgs& aRhs) -> HttpChannelCreationArgs&
{
    if (MaybeDestroy(THttpChannelConnectArgs)) {
        new (mozilla::KnownNotNull, ptr_HttpChannelConnectArgs()) HttpChannelConnectArgs;
    }
    (*(ptr_HttpChannelConnectArgs())) = aRhs;
    mType = THttpChannelConnectArgs;
    return (*(this));
}

auto HttpChannelCreationArgs::operator=(HttpChannelConnectArgs&& aRhs) -> HttpChannelCreationArgs&
{
    if (MaybeDestroy(THttpChannelConnectArgs)) {
        new (mozilla::KnownNotNull, ptr_HttpChannelConnectArgs()) HttpChannelConnectArgs;
    }
    (*(ptr_HttpChannelConnectArgs())) = std::move(aRhs);
    mType = THttpChannelConnectArgs;
    return (*(this));
}

auto HttpChannelCreationArgs::operator=(const HttpChannelCreationArgs& aRhs) -> HttpChannelCreationArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case THttpChannelOpenArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HttpChannelOpenArgs()) HttpChannelOpenArgs;
            }
            (*(ptr_HttpChannelOpenArgs())) = (aRhs).get_HttpChannelOpenArgs();
            break;
        }
    case THttpChannelConnectArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HttpChannelConnectArgs()) HttpChannelConnectArgs;
            }
            (*(ptr_HttpChannelConnectArgs())) = (aRhs).get_HttpChannelConnectArgs();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto HttpChannelCreationArgs::operator=(HttpChannelCreationArgs&& aRhs) -> HttpChannelCreationArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case THttpChannelOpenArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HttpChannelOpenArgs()) HttpChannelOpenArgs;
            }
            (*(ptr_HttpChannelOpenArgs())) = std::move((aRhs).get_HttpChannelOpenArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case THttpChannelConnectArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HttpChannelConnectArgs()) HttpChannelConnectArgs;
            }
            (*(ptr_HttpChannelConnectArgs())) = std::move((aRhs).get_HttpChannelConnectArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::HttpChannelCreationArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::net::HttpChannelCreationArgs union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'HttpChannelCreationArgs'
    (aMsg)->WriteSentinel(1813514524);

    switch (type) {
    case union__::THttpChannelOpenArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_HttpChannelOpenArgs());
            // Sentinel = 'THttpChannelOpenArgs'
            (aMsg)->WriteSentinel(1353254861);
            return;
        }
    case union__::THttpChannelConnectArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_HttpChannelConnectArgs());
            // Sentinel = 'THttpChannelConnectArgs'
            (aMsg)->WriteSentinel(1787103493);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::net::HttpChannelCreationArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::net::HttpChannelCreationArgs union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union HttpChannelCreationArgs");
        return false;
    }
    // Sentinel = 'HttpChannelCreationArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 1813514524)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union HttpChannelCreationArgs");
        return false;
    }

    switch (type) {
    case union__::THttpChannelOpenArgs:
        {
            mozilla::net::HttpChannelOpenArgs tmp = mozilla::net::HttpChannelOpenArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_HttpChannelOpenArgs())))))) {
                aActor->FatalError("Error deserializing variant THttpChannelOpenArgs of union HttpChannelCreationArgs");
                return false;
            }
            // Sentinel = 'THttpChannelOpenArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1353254861)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant THttpChannelOpenArgs of union HttpChannelCreationArgs");
                return false;
            }
            return true;
        }
    case union__::THttpChannelConnectArgs:
        {
            mozilla::net::HttpChannelConnectArgs tmp = mozilla::net::HttpChannelConnectArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_HttpChannelConnectArgs())))))) {
                aActor->FatalError("Error deserializing variant THttpChannelConnectArgs of union HttpChannelCreationArgs");
                return false;
            }
            // Sentinel = 'THttpChannelConnectArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1787103493)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant THttpChannelConnectArgs of union HttpChannelCreationArgs");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ProxyInfoCloneArgs|
//
namespace mozilla {
namespace net {
auto ProxyInfoCloneArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ProxyInfoCloneArgs, resolveFlags_) - offsetof(ProxyInfoCloneArgs, port_)) == 12,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::ProxyInfoCloneArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).host());
    // Sentinel = 'host'
    (aMsg)->WriteSentinel(72024511);
    WriteIPDLParam(aMsg, aActor, (aVar).username());
    // Sentinel = 'username'
    (aMsg)->WriteSentinel(260506465);
    WriteIPDLParam(aMsg, aActor, (aVar).password());
    // Sentinel = 'password'
    (aMsg)->WriteSentinel(261161844);
    WriteIPDLParam(aMsg, aActor, (aVar).proxyAuthorizationHeader());
    // Sentinel = 'proxyAuthorizationHeader'
    (aMsg)->WriteSentinel(2133461501);
    WriteIPDLParam(aMsg, aActor, (aVar).connectionIsolationKey());
    // Sentinel = 'connectionIsolationKey'
    (aMsg)->WriteSentinel(1751189772);
    (aMsg)->WriteBytes((&((aVar).port())), 16);
    // Sentinel = 'port | flags | timeout | resolveFlags'
    (aMsg)->WriteSentinel(94768635);
}

auto IPDLParamTraits<mozilla::net::ProxyInfoCloneArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->host())))))) {
        aActor->FatalError("Error deserializing 'host' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'host'
    if ((!((aMsg)->ReadSentinel(aIter, 72024511)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'host' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->username())))))) {
        aActor->FatalError("Error deserializing 'username' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'username'
    if ((!((aMsg)->ReadSentinel(aIter, 260506465)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'username' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->password())))))) {
        aActor->FatalError("Error deserializing 'password' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'password'
    if ((!((aMsg)->ReadSentinel(aIter, 261161844)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'password' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->proxyAuthorizationHeader())))))) {
        aActor->FatalError("Error deserializing 'proxyAuthorizationHeader' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'proxyAuthorizationHeader'
    if ((!((aMsg)->ReadSentinel(aIter, 2133461501)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'proxyAuthorizationHeader' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->connectionIsolationKey())))))) {
        aActor->FatalError("Error deserializing 'connectionIsolationKey' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'connectionIsolationKey'
    if ((!((aMsg)->ReadSentinel(aIter, 1751189772)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'connectionIsolationKey' (nsCString) member of 'ProxyInfoCloneArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->port())), 16)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'port | flags | timeout | resolveFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 94768635)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HttpConnectionInfoCloneArgs|
//
namespace mozilla {
namespace net {
auto HttpConnectionInfoCloneArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(HttpConnectionInfoCloneArgs, tlsFlags_) - offsetof(HttpConnectionInfoCloneArgs, port_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::HttpConnectionInfoCloneArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).host());
    // Sentinel = 'host'
    (aMsg)->WriteSentinel(72024511);
    WriteIPDLParam(aMsg, aActor, (aVar).npnToken());
    // Sentinel = 'npnToken'
    (aMsg)->WriteSentinel(250938190);
    WriteIPDLParam(aMsg, aActor, (aVar).username());
    // Sentinel = 'username'
    (aMsg)->WriteSentinel(260506465);
    WriteIPDLParam(aMsg, aActor, (aVar).originAttributes());
    // Sentinel = 'originAttributes'
    (aMsg)->WriteSentinel(947259056);
    WriteIPDLParam(aMsg, aActor, (aVar).endToEndSSL());
    // Sentinel = 'endToEndSSL'
    (aMsg)->WriteSentinel(421135364);
    WriteIPDLParam(aMsg, aActor, (aVar).routedHost());
    // Sentinel = 'routedHost'
    (aMsg)->WriteSentinel(391250994);
    WriteIPDLParam(aMsg, aActor, (aVar).anonymous());
    // Sentinel = 'anonymous'
    (aMsg)->WriteSentinel(322569194);
    WriteIPDLParam(aMsg, aActor, (aVar).aPrivate());
    // Sentinel = 'aPrivate'
    (aMsg)->WriteSentinel(239141693);
    WriteIPDLParam(aMsg, aActor, (aVar).insecureScheme());
    // Sentinel = 'insecureScheme'
    (aMsg)->WriteSentinel(727319988);
    WriteIPDLParam(aMsg, aActor, (aVar).noSpdy());
    // Sentinel = 'noSpdy'
    (aMsg)->WriteSentinel(144835198);
    WriteIPDLParam(aMsg, aActor, (aVar).beConservative());
    // Sentinel = 'beConservative'
    (aMsg)->WriteSentinel(706086337);
    WriteIPDLParam(aMsg, aActor, (aVar).anonymousAllowClientCert());
    // Sentinel = 'anonymousAllowClientCert'
    (aMsg)->WriteSentinel(2085882326);
    WriteIPDLParam(aMsg, aActor, (aVar).isolated());
    // Sentinel = 'isolated'
    (aMsg)->WriteSentinel(255394646);
    WriteIPDLParam(aMsg, aActor, (aVar).isTrrServiceChannel());
    // Sentinel = 'isTrrServiceChannel'
    (aMsg)->WriteSentinel(1284114335);
    WriteIPDLParam(aMsg, aActor, (aVar).isIPv4Disabled());
    // Sentinel = 'isIPv4Disabled'
    (aMsg)->WriteSentinel(645858616);
    WriteIPDLParam(aMsg, aActor, (aVar).isIPv6Disabled());
    // Sentinel = 'isIPv6Disabled'
    (aMsg)->WriteSentinel(647038266);
    WriteIPDLParam(aMsg, aActor, (aVar).topWindowOrigin());
    // Sentinel = 'topWindowOrigin'
    (aMsg)->WriteSentinel(837420596);
    WriteIPDLParam(aMsg, aActor, (aVar).isHttp3());
    // Sentinel = 'isHttp3'
    (aMsg)->WriteSentinel(188678832);
    WriteIPDLParam(aMsg, aActor, (aVar).hasIPHintAddress());
    // Sentinel = 'hasIPHintAddress'
    (aMsg)->WriteSentinel(856753711);
    WriteIPDLParam(aMsg, aActor, (aVar).echConfig());
    // Sentinel = 'echConfig'
    (aMsg)->WriteSentinel(291898247);
    WriteIPDLParam(aMsg, aActor, (aVar).proxyInfo());
    // Sentinel = 'proxyInfo'
    (aMsg)->WriteSentinel(325583823);
    (aMsg)->WriteBytes((&((aVar).port())), 12);
    // Sentinel = 'port | routedPort | tlsFlags'
    (aMsg)->WriteSentinel(2612726454);
    (aMsg)->WriteBytes((&((aVar).trrMode())), 1);
    // Sentinel = 'trrMode'
    (aMsg)->WriteSentinel(197591774);
}

auto IPDLParamTraits<mozilla::net::HttpConnectionInfoCloneArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->host())))))) {
        aActor->FatalError("Error deserializing 'host' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'host'
    if ((!((aMsg)->ReadSentinel(aIter, 72024511)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'host' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->npnToken())))))) {
        aActor->FatalError("Error deserializing 'npnToken' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'npnToken'
    if ((!((aMsg)->ReadSentinel(aIter, 250938190)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'npnToken' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->username())))))) {
        aActor->FatalError("Error deserializing 'username' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'username'
    if ((!((aMsg)->ReadSentinel(aIter, 260506465)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'username' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originAttributes())))))) {
        aActor->FatalError("Error deserializing 'originAttributes' (OriginAttributes) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'originAttributes'
    if ((!((aMsg)->ReadSentinel(aIter, 947259056)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originAttributes' (OriginAttributes) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->endToEndSSL())))))) {
        aActor->FatalError("Error deserializing 'endToEndSSL' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'endToEndSSL'
    if ((!((aMsg)->ReadSentinel(aIter, 421135364)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'endToEndSSL' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->routedHost())))))) {
        aActor->FatalError("Error deserializing 'routedHost' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'routedHost'
    if ((!((aMsg)->ReadSentinel(aIter, 391250994)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'routedHost' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->anonymous())))))) {
        aActor->FatalError("Error deserializing 'anonymous' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'anonymous'
    if ((!((aMsg)->ReadSentinel(aIter, 322569194)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'anonymous' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->aPrivate())))))) {
        aActor->FatalError("Error deserializing 'aPrivate' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'aPrivate'
    if ((!((aMsg)->ReadSentinel(aIter, 239141693)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'aPrivate' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->insecureScheme())))))) {
        aActor->FatalError("Error deserializing 'insecureScheme' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'insecureScheme'
    if ((!((aMsg)->ReadSentinel(aIter, 727319988)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'insecureScheme' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->noSpdy())))))) {
        aActor->FatalError("Error deserializing 'noSpdy' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'noSpdy'
    if ((!((aMsg)->ReadSentinel(aIter, 144835198)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'noSpdy' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->beConservative())))))) {
        aActor->FatalError("Error deserializing 'beConservative' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'beConservative'
    if ((!((aMsg)->ReadSentinel(aIter, 706086337)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'beConservative' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->anonymousAllowClientCert())))))) {
        aActor->FatalError("Error deserializing 'anonymousAllowClientCert' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'anonymousAllowClientCert'
    if ((!((aMsg)->ReadSentinel(aIter, 2085882326)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'anonymousAllowClientCert' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isolated())))))) {
        aActor->FatalError("Error deserializing 'isolated' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'isolated'
    if ((!((aMsg)->ReadSentinel(aIter, 255394646)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isolated' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isTrrServiceChannel())))))) {
        aActor->FatalError("Error deserializing 'isTrrServiceChannel' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'isTrrServiceChannel'
    if ((!((aMsg)->ReadSentinel(aIter, 1284114335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isTrrServiceChannel' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isIPv4Disabled())))))) {
        aActor->FatalError("Error deserializing 'isIPv4Disabled' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'isIPv4Disabled'
    if ((!((aMsg)->ReadSentinel(aIter, 645858616)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isIPv4Disabled' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isIPv6Disabled())))))) {
        aActor->FatalError("Error deserializing 'isIPv6Disabled' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'isIPv6Disabled'
    if ((!((aMsg)->ReadSentinel(aIter, 647038266)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isIPv6Disabled' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->topWindowOrigin())))))) {
        aActor->FatalError("Error deserializing 'topWindowOrigin' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'topWindowOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 837420596)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'topWindowOrigin' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isHttp3())))))) {
        aActor->FatalError("Error deserializing 'isHttp3' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'isHttp3'
    if ((!((aMsg)->ReadSentinel(aIter, 188678832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isHttp3' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasIPHintAddress())))))) {
        aActor->FatalError("Error deserializing 'hasIPHintAddress' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'hasIPHintAddress'
    if ((!((aMsg)->ReadSentinel(aIter, 856753711)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasIPHintAddress' (bool) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->echConfig())))))) {
        aActor->FatalError("Error deserializing 'echConfig' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'echConfig'
    if ((!((aMsg)->ReadSentinel(aIter, 291898247)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'echConfig' (nsCString) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->proxyInfo())))))) {
        aActor->FatalError("Error deserializing 'proxyInfo' (ProxyInfoCloneArgs[]) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    // Sentinel = 'proxyInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 325583823)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'proxyInfo' (ProxyInfoCloneArgs[]) member of 'HttpConnectionInfoCloneArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->port())), 12)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'port | routedPort | tlsFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 2612726454)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->trrMode())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'trrMode'
    if ((!((aMsg)->ReadSentinel(aIter, 197591774)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ConsoleReportCollected|
//
namespace mozilla {
namespace net {
auto ConsoleReportCollected::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ConsoleReportCollected, columnNumber_) - offsetof(ConsoleReportCollected, errorFlags_)) == 12,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::ConsoleReportCollected>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).category());
    // Sentinel = 'category'
    (aMsg)->WriteSentinel(247333727);
    WriteIPDLParam(aMsg, aActor, (aVar).sourceFileURI());
    // Sentinel = 'sourceFileURI'
    (aMsg)->WriteSentinel(624035074);
    WriteIPDLParam(aMsg, aActor, (aVar).messageName());
    // Sentinel = 'messageName'
    (aMsg)->WriteSentinel(452133991);
    WriteIPDLParam(aMsg, aActor, (aVar).stringParams());
    // Sentinel = 'stringParams'
    (aMsg)->WriteSentinel(550438140);
    (aMsg)->WriteBytes((&((aVar).errorFlags())), 16);
    // Sentinel = 'errorFlags | propertiesFile | lineNumber | columnNumber'
    (aMsg)->WriteSentinel(1343886625);
}

auto IPDLParamTraits<mozilla::net::ConsoleReportCollected>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->category())))))) {
        aActor->FatalError("Error deserializing 'category' (nsCString) member of 'ConsoleReportCollected'");
        return false;
    }
    // Sentinel = 'category'
    if ((!((aMsg)->ReadSentinel(aIter, 247333727)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'category' (nsCString) member of 'ConsoleReportCollected'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sourceFileURI())))))) {
        aActor->FatalError("Error deserializing 'sourceFileURI' (nsCString) member of 'ConsoleReportCollected'");
        return false;
    }
    // Sentinel = 'sourceFileURI'
    if ((!((aMsg)->ReadSentinel(aIter, 624035074)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sourceFileURI' (nsCString) member of 'ConsoleReportCollected'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->messageName())))))) {
        aActor->FatalError("Error deserializing 'messageName' (nsCString) member of 'ConsoleReportCollected'");
        return false;
    }
    // Sentinel = 'messageName'
    if ((!((aMsg)->ReadSentinel(aIter, 452133991)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'messageName' (nsCString) member of 'ConsoleReportCollected'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stringParams())))))) {
        aActor->FatalError("Error deserializing 'stringParams' (nsString[]) member of 'ConsoleReportCollected'");
        return false;
    }
    // Sentinel = 'stringParams'
    if ((!((aMsg)->ReadSentinel(aIter, 550438140)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stringParams' (nsString[]) member of 'ConsoleReportCollected'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->errorFlags())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'errorFlags | propertiesFile | lineNumber | columnNumber'
    if ((!((aMsg)->ReadSentinel(aIter, 1343886625)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FTPChannelOpenArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::FTPChannelOpenArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uri());
    // Sentinel = 'uri'
    (aMsg)->WriteSentinel(45023569);
    WriteIPDLParam(aMsg, aActor, (aVar).entityID());
    // Sentinel = 'entityID'
    (aMsg)->WriteSentinel(252183339);
    WriteIPDLParam(aMsg, aActor, (aVar).uploadStream());
    // Sentinel = 'uploadStream'
    (aMsg)->WriteSentinel(546768114);
    WriteIPDLParam(aMsg, aActor, (aVar).loadInfo());
    // Sentinel = 'loadInfo'
    (aMsg)->WriteSentinel(240386861);
    (aMsg)->WriteBytes((&((aVar).startPos())), 8);
    // Sentinel = 'startPos'
    (aMsg)->WriteSentinel(257753953);
    (aMsg)->WriteBytes((&((aVar).loadFlags())), 4);
    // Sentinel = 'loadFlags'
    (aMsg)->WriteSentinel(297665422);
}

auto IPDLParamTraits<mozilla::net::FTPChannelOpenArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uri())))))) {
        aActor->FatalError("Error deserializing 'uri' (URIParams) member of 'FTPChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'uri'
    if ((!((aMsg)->ReadSentinel(aIter, 45023569)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uri' (URIParams) member of 'FTPChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->entityID())))))) {
        aActor->FatalError("Error deserializing 'entityID' (nsCString) member of 'FTPChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'entityID'
    if ((!((aMsg)->ReadSentinel(aIter, 252183339)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'entityID' (nsCString) member of 'FTPChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uploadStream())))))) {
        aActor->FatalError("Error deserializing 'uploadStream' (IPCStream?) member of 'FTPChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'uploadStream'
    if ((!((aMsg)->ReadSentinel(aIter, 546768114)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uploadStream' (IPCStream?) member of 'FTPChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadInfo())))))) {
        aActor->FatalError("Error deserializing 'loadInfo' (LoadInfoArgs?) member of 'FTPChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'loadInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 240386861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadInfo' (LoadInfoArgs?) member of 'FTPChannelOpenArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->startPos())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'startPos'
    if ((!((aMsg)->ReadSentinel(aIter, 257753953)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->loadFlags())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'loadFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 297665422)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FTPChannelConnectArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::FTPChannelConnectArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).channelId())), 4);
    // Sentinel = 'channelId'
    (aMsg)->WriteSentinel(301138823);
}

auto IPDLParamTraits<mozilla::net::FTPChannelConnectArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->channelId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'channelId'
    if ((!((aMsg)->ReadSentinel(aIter, 301138823)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union FTPChannelCreationArgs|
//
namespace mozilla {
namespace net {
auto FTPChannelCreationArgs::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TFTPChannelOpenArgs:
        {
            (ptr_FTPChannelOpenArgs())->~FTPChannelOpenArgs__tdef();
            break;
        }
    case TFTPChannelConnectArgs:
        {
            (ptr_FTPChannelConnectArgs())->~FTPChannelConnectArgs__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT FTPChannelCreationArgs::FTPChannelCreationArgs(const FTPChannelOpenArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_FTPChannelOpenArgs()) FTPChannelOpenArgs(aOther);
    mType = TFTPChannelOpenArgs;
}

MOZ_IMPLICIT FTPChannelCreationArgs::FTPChannelCreationArgs(FTPChannelOpenArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FTPChannelOpenArgs()) FTPChannelOpenArgs(std::move(aOther));
    mType = TFTPChannelOpenArgs;
}

MOZ_IMPLICIT FTPChannelCreationArgs::FTPChannelCreationArgs(const FTPChannelConnectArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_FTPChannelConnectArgs()) FTPChannelConnectArgs(aOther);
    mType = TFTPChannelConnectArgs;
}

MOZ_IMPLICIT FTPChannelCreationArgs::FTPChannelCreationArgs(FTPChannelConnectArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_FTPChannelConnectArgs()) FTPChannelConnectArgs(std::move(aOther));
    mType = TFTPChannelConnectArgs;
}

MOZ_IMPLICIT FTPChannelCreationArgs::FTPChannelCreationArgs(const FTPChannelCreationArgs& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TFTPChannelOpenArgs:
        {
            new (mozilla::KnownNotNull, ptr_FTPChannelOpenArgs()) FTPChannelOpenArgs((aOther).get_FTPChannelOpenArgs());
            break;
        }
    case TFTPChannelConnectArgs:
        {
            new (mozilla::KnownNotNull, ptr_FTPChannelConnectArgs()) FTPChannelConnectArgs((aOther).get_FTPChannelConnectArgs());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT FTPChannelCreationArgs::FTPChannelCreationArgs(FTPChannelCreationArgs&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TFTPChannelOpenArgs:
        {
            new (mozilla::KnownNotNull, ptr_FTPChannelOpenArgs()) FTPChannelOpenArgs(std::move((aOther).get_FTPChannelOpenArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TFTPChannelConnectArgs:
        {
            new (mozilla::KnownNotNull, ptr_FTPChannelConnectArgs()) FTPChannelConnectArgs(std::move((aOther).get_FTPChannelConnectArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

FTPChannelCreationArgs::~FTPChannelCreationArgs()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto FTPChannelCreationArgs::operator=(const FTPChannelOpenArgs& aRhs) -> FTPChannelCreationArgs&
{
    if (MaybeDestroy(TFTPChannelOpenArgs)) {
        new (mozilla::KnownNotNull, ptr_FTPChannelOpenArgs()) FTPChannelOpenArgs;
    }
    (*(ptr_FTPChannelOpenArgs())) = aRhs;
    mType = TFTPChannelOpenArgs;
    return (*(this));
}

auto FTPChannelCreationArgs::operator=(FTPChannelOpenArgs&& aRhs) -> FTPChannelCreationArgs&
{
    if (MaybeDestroy(TFTPChannelOpenArgs)) {
        new (mozilla::KnownNotNull, ptr_FTPChannelOpenArgs()) FTPChannelOpenArgs;
    }
    (*(ptr_FTPChannelOpenArgs())) = std::move(aRhs);
    mType = TFTPChannelOpenArgs;
    return (*(this));
}

auto FTPChannelCreationArgs::operator=(const FTPChannelConnectArgs& aRhs) -> FTPChannelCreationArgs&
{
    if (MaybeDestroy(TFTPChannelConnectArgs)) {
        new (mozilla::KnownNotNull, ptr_FTPChannelConnectArgs()) FTPChannelConnectArgs;
    }
    (*(ptr_FTPChannelConnectArgs())) = aRhs;
    mType = TFTPChannelConnectArgs;
    return (*(this));
}

auto FTPChannelCreationArgs::operator=(FTPChannelConnectArgs&& aRhs) -> FTPChannelCreationArgs&
{
    if (MaybeDestroy(TFTPChannelConnectArgs)) {
        new (mozilla::KnownNotNull, ptr_FTPChannelConnectArgs()) FTPChannelConnectArgs;
    }
    (*(ptr_FTPChannelConnectArgs())) = std::move(aRhs);
    mType = TFTPChannelConnectArgs;
    return (*(this));
}

auto FTPChannelCreationArgs::operator=(const FTPChannelCreationArgs& aRhs) -> FTPChannelCreationArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFTPChannelOpenArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FTPChannelOpenArgs()) FTPChannelOpenArgs;
            }
            (*(ptr_FTPChannelOpenArgs())) = (aRhs).get_FTPChannelOpenArgs();
            break;
        }
    case TFTPChannelConnectArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FTPChannelConnectArgs()) FTPChannelConnectArgs;
            }
            (*(ptr_FTPChannelConnectArgs())) = (aRhs).get_FTPChannelConnectArgs();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto FTPChannelCreationArgs::operator=(FTPChannelCreationArgs&& aRhs) -> FTPChannelCreationArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TFTPChannelOpenArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FTPChannelOpenArgs()) FTPChannelOpenArgs;
            }
            (*(ptr_FTPChannelOpenArgs())) = std::move((aRhs).get_FTPChannelOpenArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TFTPChannelConnectArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_FTPChannelConnectArgs()) FTPChannelConnectArgs;
            }
            (*(ptr_FTPChannelConnectArgs())) = std::move((aRhs).get_FTPChannelConnectArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::FTPChannelCreationArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::net::FTPChannelCreationArgs union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'FTPChannelCreationArgs'
    (aMsg)->WriteSentinel(1552615526);

    switch (type) {
    case union__::TFTPChannelOpenArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FTPChannelOpenArgs());
            // Sentinel = 'TFTPChannelOpenArgs'
            (aMsg)->WriteSentinel(1134561047);
            return;
        }
    case union__::TFTPChannelConnectArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_FTPChannelConnectArgs());
            // Sentinel = 'TFTPChannelConnectArgs'
            (aMsg)->WriteSentinel(1532627023);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::net::FTPChannelCreationArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::net::FTPChannelCreationArgs union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union FTPChannelCreationArgs");
        return false;
    }
    // Sentinel = 'FTPChannelCreationArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 1552615526)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union FTPChannelCreationArgs");
        return false;
    }

    switch (type) {
    case union__::TFTPChannelOpenArgs:
        {
            mozilla::net::FTPChannelOpenArgs tmp = mozilla::net::FTPChannelOpenArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FTPChannelOpenArgs())))))) {
                aActor->FatalError("Error deserializing variant TFTPChannelOpenArgs of union FTPChannelCreationArgs");
                return false;
            }
            // Sentinel = 'TFTPChannelOpenArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1134561047)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFTPChannelOpenArgs of union FTPChannelCreationArgs");
                return false;
            }
            return true;
        }
    case union__::TFTPChannelConnectArgs:
        {
            mozilla::net::FTPChannelConnectArgs tmp = mozilla::net::FTPChannelConnectArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_FTPChannelConnectArgs())))))) {
                aActor->FatalError("Error deserializing variant TFTPChannelConnectArgs of union FTPChannelCreationArgs");
                return false;
            }
            // Sentinel = 'TFTPChannelConnectArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1532627023)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TFTPChannelConnectArgs of union FTPChannelCreationArgs");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CookieStruct|
//
namespace mozilla {
namespace net {
auto CookieStruct::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(CookieStruct, creationTime_) - offsetof(CookieStruct, expiry_)) == 16,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(CookieStruct, rawSameSite_) - offsetof(CookieStruct, sameSite_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::CookieStruct>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
    WriteIPDLParam(aMsg, aActor, (aVar).host());
    // Sentinel = 'host'
    (aMsg)->WriteSentinel(72024511);
    WriteIPDLParam(aMsg, aActor, (aVar).path());
    // Sentinel = 'path'
    (aMsg)->WriteSentinel(70713774);
    WriteIPDLParam(aMsg, aActor, (aVar).isHttpOnly());
    // Sentinel = 'isHttpOnly'
    (aMsg)->WriteSentinel(374998047);
    WriteIPDLParam(aMsg, aActor, (aVar).isSession());
    // Sentinel = 'isSession'
    (aMsg)->WriteSentinel(310838209);
    WriteIPDLParam(aMsg, aActor, (aVar).isSecure());
    // Sentinel = 'isSecure'
    (aMsg)->WriteSentinel(244581188);
    (aMsg)->WriteBytes((&((aVar).expiry())), 24);
    // Sentinel = 'expiry | lastAccessed | creationTime'
    (aMsg)->WriteSentinel(4275768781);
    (aMsg)->WriteBytes((&((aVar).sameSite())), 8);
    // Sentinel = 'sameSite | rawSameSite'
    (aMsg)->WriteSentinel(1609500765);
    (aMsg)->WriteBytes((&((aVar).schemeMap())), 1);
    // Sentinel = 'schemeMap'
    (aMsg)->WriteSentinel(305136532);
}

auto IPDLParamTraits<mozilla::net::CookieStruct>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'CookieStruct'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'CookieStruct'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (nsCString) member of 'CookieStruct'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (nsCString) member of 'CookieStruct'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->host())))))) {
        aActor->FatalError("Error deserializing 'host' (nsCString) member of 'CookieStruct'");
        return false;
    }
    // Sentinel = 'host'
    if ((!((aMsg)->ReadSentinel(aIter, 72024511)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'host' (nsCString) member of 'CookieStruct'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->path())))))) {
        aActor->FatalError("Error deserializing 'path' (nsCString) member of 'CookieStruct'");
        return false;
    }
    // Sentinel = 'path'
    if ((!((aMsg)->ReadSentinel(aIter, 70713774)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'path' (nsCString) member of 'CookieStruct'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isHttpOnly())))))) {
        aActor->FatalError("Error deserializing 'isHttpOnly' (bool) member of 'CookieStruct'");
        return false;
    }
    // Sentinel = 'isHttpOnly'
    if ((!((aMsg)->ReadSentinel(aIter, 374998047)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isHttpOnly' (bool) member of 'CookieStruct'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isSession())))))) {
        aActor->FatalError("Error deserializing 'isSession' (bool) member of 'CookieStruct'");
        return false;
    }
    // Sentinel = 'isSession'
    if ((!((aMsg)->ReadSentinel(aIter, 310838209)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isSession' (bool) member of 'CookieStruct'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isSecure())))))) {
        aActor->FatalError("Error deserializing 'isSecure' (bool) member of 'CookieStruct'");
        return false;
    }
    // Sentinel = 'isSecure'
    if ((!((aMsg)->ReadSentinel(aIter, 244581188)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isSecure' (bool) member of 'CookieStruct'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->expiry())), 24)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'expiry | lastAccessed | creationTime'
    if ((!((aMsg)->ReadSentinel(aIter, 4275768781)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->sameSite())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'sameSite | rawSameSite'
    if ((!((aMsg)->ReadSentinel(aIter, 1609500765)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->schemeMap())), 1)))) {
        aActor->FatalError("Error bulk reading fields from uint8_t");
        return false;
    }
    // Sentinel = 'schemeMap'
    if ((!((aMsg)->ReadSentinel(aIter, 305136532)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DocumentCreationArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::DocumentCreationArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uriModified());
    // Sentinel = 'uriModified'
    (aMsg)->WriteSentinel(453903474);
    WriteIPDLParam(aMsg, aActor, (aVar).isXFOError());
    // Sentinel = 'isXFOError'
    (aMsg)->WriteSentinel(343540692);
}

auto IPDLParamTraits<mozilla::net::DocumentCreationArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uriModified())))))) {
        aActor->FatalError("Error deserializing 'uriModified' (bool) member of 'DocumentCreationArgs'");
        return false;
    }
    // Sentinel = 'uriModified'
    if ((!((aMsg)->ReadSentinel(aIter, 453903474)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uriModified' (bool) member of 'DocumentCreationArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isXFOError())))))) {
        aActor->FatalError("Error deserializing 'isXFOError' (bool) member of 'DocumentCreationArgs'");
        return false;
    }
    // Sentinel = 'isXFOError'
    if ((!((aMsg)->ReadSentinel(aIter, 343540692)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isXFOError' (bool) member of 'DocumentCreationArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectCreationArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::ObjectCreationArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).contentPolicyType());
    // Sentinel = 'contentPolicyType'
    (aMsg)->WriteSentinel(1066927886);
    WriteIPDLParam(aMsg, aActor, (aVar).isUrgentStart());
    // Sentinel = 'isUrgentStart'
    (aMsg)->WriteSentinel(625739104);
    (aMsg)->WriteBytes((&((aVar).embedderInnerWindowId())), 8);
    // Sentinel = 'embedderInnerWindowId'
    (aMsg)->WriteSentinel(1544423514);
    (aMsg)->WriteBytes((&((aVar).loadFlags())), 4);
    // Sentinel = 'loadFlags'
    (aMsg)->WriteSentinel(297665422);
}

auto IPDLParamTraits<mozilla::net::ObjectCreationArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentPolicyType())))))) {
        aActor->FatalError("Error deserializing 'contentPolicyType' (nsContentPolicyType) member of 'ObjectCreationArgs'");
        return false;
    }
    // Sentinel = 'contentPolicyType'
    if ((!((aMsg)->ReadSentinel(aIter, 1066927886)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentPolicyType' (nsContentPolicyType) member of 'ObjectCreationArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isUrgentStart())))))) {
        aActor->FatalError("Error deserializing 'isUrgentStart' (bool) member of 'ObjectCreationArgs'");
        return false;
    }
    // Sentinel = 'isUrgentStart'
    if ((!((aMsg)->ReadSentinel(aIter, 625739104)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isUrgentStart' (bool) member of 'ObjectCreationArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->embedderInnerWindowId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'embedderInnerWindowId'
    if ((!((aMsg)->ReadSentinel(aIter, 1544423514)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->loadFlags())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'loadFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 297665422)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union DocumentChannelElementCreationArgs|
//
namespace mozilla {
namespace net {
auto DocumentChannelElementCreationArgs::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TDocumentCreationArgs:
        {
            (ptr_DocumentCreationArgs())->~DocumentCreationArgs__tdef();
            break;
        }
    case TObjectCreationArgs:
        {
            (ptr_ObjectCreationArgs())->~ObjectCreationArgs__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT DocumentChannelElementCreationArgs::DocumentChannelElementCreationArgs(const DocumentCreationArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_DocumentCreationArgs()) DocumentCreationArgs(aOther);
    mType = TDocumentCreationArgs;
}

MOZ_IMPLICIT DocumentChannelElementCreationArgs::DocumentChannelElementCreationArgs(DocumentCreationArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_DocumentCreationArgs()) DocumentCreationArgs(std::move(aOther));
    mType = TDocumentCreationArgs;
}

MOZ_IMPLICIT DocumentChannelElementCreationArgs::DocumentChannelElementCreationArgs(const ObjectCreationArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectCreationArgs()) ObjectCreationArgs(aOther);
    mType = TObjectCreationArgs;
}

MOZ_IMPLICIT DocumentChannelElementCreationArgs::DocumentChannelElementCreationArgs(ObjectCreationArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectCreationArgs()) ObjectCreationArgs(std::move(aOther));
    mType = TObjectCreationArgs;
}

MOZ_IMPLICIT DocumentChannelElementCreationArgs::DocumentChannelElementCreationArgs(const DocumentChannelElementCreationArgs& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TDocumentCreationArgs:
        {
            new (mozilla::KnownNotNull, ptr_DocumentCreationArgs()) DocumentCreationArgs((aOther).get_DocumentCreationArgs());
            break;
        }
    case TObjectCreationArgs:
        {
            new (mozilla::KnownNotNull, ptr_ObjectCreationArgs()) ObjectCreationArgs((aOther).get_ObjectCreationArgs());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT DocumentChannelElementCreationArgs::DocumentChannelElementCreationArgs(DocumentChannelElementCreationArgs&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TDocumentCreationArgs:
        {
            new (mozilla::KnownNotNull, ptr_DocumentCreationArgs()) DocumentCreationArgs(std::move((aOther).get_DocumentCreationArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectCreationArgs:
        {
            new (mozilla::KnownNotNull, ptr_ObjectCreationArgs()) ObjectCreationArgs(std::move((aOther).get_ObjectCreationArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

DocumentChannelElementCreationArgs::~DocumentChannelElementCreationArgs()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto DocumentChannelElementCreationArgs::operator=(const DocumentCreationArgs& aRhs) -> DocumentChannelElementCreationArgs&
{
    if (MaybeDestroy(TDocumentCreationArgs)) {
        new (mozilla::KnownNotNull, ptr_DocumentCreationArgs()) DocumentCreationArgs;
    }
    (*(ptr_DocumentCreationArgs())) = aRhs;
    mType = TDocumentCreationArgs;
    return (*(this));
}

auto DocumentChannelElementCreationArgs::operator=(DocumentCreationArgs&& aRhs) -> DocumentChannelElementCreationArgs&
{
    if (MaybeDestroy(TDocumentCreationArgs)) {
        new (mozilla::KnownNotNull, ptr_DocumentCreationArgs()) DocumentCreationArgs;
    }
    (*(ptr_DocumentCreationArgs())) = std::move(aRhs);
    mType = TDocumentCreationArgs;
    return (*(this));
}

auto DocumentChannelElementCreationArgs::operator=(const ObjectCreationArgs& aRhs) -> DocumentChannelElementCreationArgs&
{
    if (MaybeDestroy(TObjectCreationArgs)) {
        new (mozilla::KnownNotNull, ptr_ObjectCreationArgs()) ObjectCreationArgs;
    }
    (*(ptr_ObjectCreationArgs())) = aRhs;
    mType = TObjectCreationArgs;
    return (*(this));
}

auto DocumentChannelElementCreationArgs::operator=(ObjectCreationArgs&& aRhs) -> DocumentChannelElementCreationArgs&
{
    if (MaybeDestroy(TObjectCreationArgs)) {
        new (mozilla::KnownNotNull, ptr_ObjectCreationArgs()) ObjectCreationArgs;
    }
    (*(ptr_ObjectCreationArgs())) = std::move(aRhs);
    mType = TObjectCreationArgs;
    return (*(this));
}

auto DocumentChannelElementCreationArgs::operator=(const DocumentChannelElementCreationArgs& aRhs) -> DocumentChannelElementCreationArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TDocumentCreationArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_DocumentCreationArgs()) DocumentCreationArgs;
            }
            (*(ptr_DocumentCreationArgs())) = (aRhs).get_DocumentCreationArgs();
            break;
        }
    case TObjectCreationArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectCreationArgs()) ObjectCreationArgs;
            }
            (*(ptr_ObjectCreationArgs())) = (aRhs).get_ObjectCreationArgs();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto DocumentChannelElementCreationArgs::operator=(DocumentChannelElementCreationArgs&& aRhs) -> DocumentChannelElementCreationArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TDocumentCreationArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_DocumentCreationArgs()) DocumentCreationArgs;
            }
            (*(ptr_DocumentCreationArgs())) = std::move((aRhs).get_DocumentCreationArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectCreationArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectCreationArgs()) ObjectCreationArgs;
            }
            (*(ptr_ObjectCreationArgs())) = std::move((aRhs).get_ObjectCreationArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::DocumentChannelElementCreationArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::net::DocumentChannelElementCreationArgs union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'DocumentChannelElementCreationArgs'
    (aMsg)->WriteSentinel(3941207429);

    switch (type) {
    case union__::TDocumentCreationArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_DocumentCreationArgs());
            // Sentinel = 'TDocumentCreationArgs'
            (aMsg)->WriteSentinel(1512245334);
            return;
        }
    case union__::TObjectCreationArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectCreationArgs());
            // Sentinel = 'TObjectCreationArgs'
            (aMsg)->WriteSentinel(1215760238);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::net::DocumentChannelElementCreationArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::net::DocumentChannelElementCreationArgs union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union DocumentChannelElementCreationArgs");
        return false;
    }
    // Sentinel = 'DocumentChannelElementCreationArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 3941207429)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union DocumentChannelElementCreationArgs");
        return false;
    }

    switch (type) {
    case union__::TDocumentCreationArgs:
        {
            mozilla::net::DocumentCreationArgs tmp = mozilla::net::DocumentCreationArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_DocumentCreationArgs())))))) {
                aActor->FatalError("Error deserializing variant TDocumentCreationArgs of union DocumentChannelElementCreationArgs");
                return false;
            }
            // Sentinel = 'TDocumentCreationArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1512245334)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TDocumentCreationArgs of union DocumentChannelElementCreationArgs");
                return false;
            }
            return true;
        }
    case union__::TObjectCreationArgs:
        {
            mozilla::net::ObjectCreationArgs tmp = mozilla::net::ObjectCreationArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectCreationArgs())))))) {
                aActor->FatalError("Error deserializing variant TObjectCreationArgs of union DocumentChannelElementCreationArgs");
                return false;
            }
            // Sentinel = 'TObjectCreationArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1215760238)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectCreationArgs of union DocumentChannelElementCreationArgs");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DocumentChannelCreationArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::DocumentChannelCreationArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).loadState());
    // Sentinel = 'loadState'
    (aMsg)->WriteSentinel(304808866);
    WriteIPDLParam(aMsg, aActor, (aVar).asyncOpenTime());
    // Sentinel = 'asyncOpenTime'
    (aMsg)->WriteSentinel(623772992);
    WriteIPDLParam(aMsg, aActor, (aVar).timing());
    // Sentinel = 'timing'
    (aMsg)->WriteSentinel(150798985);
    WriteIPDLParam(aMsg, aActor, (aVar).initialClientInfo());
    // Sentinel = 'initialClientInfo'
    (aMsg)->WriteSentinel(1038354134);
    WriteIPDLParam(aMsg, aActor, (aVar).elementCreationArgs());
    // Sentinel = 'elementCreationArgs'
    (aMsg)->WriteSentinel(1287718829);
    (aMsg)->WriteBytes((&((aVar).channelId())), 8);
    // Sentinel = 'channelId'
    (aMsg)->WriteSentinel(301138823);
    (aMsg)->WriteBytes((&((aVar).cacheKey())), 4);
    // Sentinel = 'cacheKey'
    (aMsg)->WriteSentinel(232325918);
}

auto IPDLParamTraits<mozilla::net::DocumentChannelCreationArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadState())))))) {
        aActor->FatalError("Error deserializing 'loadState' (DocShellLoadStateInit) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    // Sentinel = 'loadState'
    if ((!((aMsg)->ReadSentinel(aIter, 304808866)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadState' (DocShellLoadStateInit) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->asyncOpenTime())))))) {
        aActor->FatalError("Error deserializing 'asyncOpenTime' (TimeStamp) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    // Sentinel = 'asyncOpenTime'
    if ((!((aMsg)->ReadSentinel(aIter, 623772992)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'asyncOpenTime' (TimeStamp) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->timing())))))) {
        aActor->FatalError("Error deserializing 'timing' (nsDOMNavigationTiming?) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    // Sentinel = 'timing'
    if ((!((aMsg)->ReadSentinel(aIter, 150798985)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'timing' (nsDOMNavigationTiming?) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->initialClientInfo())))))) {
        aActor->FatalError("Error deserializing 'initialClientInfo' (IPCClientInfo?) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    // Sentinel = 'initialClientInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1038354134)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'initialClientInfo' (IPCClientInfo?) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->elementCreationArgs())))))) {
        aActor->FatalError("Error deserializing 'elementCreationArgs' (DocumentChannelElementCreationArgs) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    // Sentinel = 'elementCreationArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 1287718829)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'elementCreationArgs' (DocumentChannelElementCreationArgs) member of 'DocumentChannelCreationArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->channelId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'channelId'
    if ((!((aMsg)->ReadSentinel(aIter, 301138823)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->cacheKey())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'cacheKey'
    if ((!((aMsg)->ReadSentinel(aIter, 232325918)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RedirectToRealChannelArgs|
//
namespace mozilla {
namespace net {
auto RedirectToRealChannelArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(RedirectToRealChannelArgs, loadIdentifier_) - offsetof(RedirectToRealChannelArgs, channelId_)) == 8,
        "Bad assumptions about field layout!");
    static_assert(
        (offsetof(RedirectToRealChannelArgs, loadStateLoadType_) - offsetof(RedirectToRealChannelArgs, registrarId_)) == 24,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::RedirectToRealChannelArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uri());
    // Sentinel = 'uri'
    (aMsg)->WriteSentinel(45023569);
    WriteIPDLParam(aMsg, aActor, (aVar).init());
    // Sentinel = 'init'
    (aMsg)->WriteSentinel(70779317);
    WriteIPDLParam(aMsg, aActor, (aVar).loadInfo());
    // Sentinel = 'loadInfo'
    (aMsg)->WriteSentinel(240386861);
    WriteIPDLParam(aMsg, aActor, (aVar).originalURI());
    // Sentinel = 'originalURI'
    (aMsg)->WriteSentinel(455148614);
    WriteIPDLParam(aMsg, aActor, (aVar).contentDisposition());
    // Sentinel = 'contentDisposition'
    (aMsg)->WriteSentinel(1196361617);
    WriteIPDLParam(aMsg, aActor, (aVar).contentDispositionFilename());
    // Sentinel = 'contentDispositionFilename'
    (aMsg)->WriteSentinel(2441153202);
    WriteIPDLParam(aMsg, aActor, (aVar).properties());
    // Sentinel = 'properties'
    (aMsg)->WriteSentinel(399770702);
    WriteIPDLParam(aMsg, aActor, (aVar).timing());
    // Sentinel = 'timing'
    (aMsg)->WriteSentinel(150798985);
    WriteIPDLParam(aMsg, aActor, (aVar).srcdocData());
    // Sentinel = 'srcdocData'
    (aMsg)->WriteSentinel(375587833);
    WriteIPDLParam(aMsg, aActor, (aVar).baseUri());
    // Sentinel = 'baseUri'
    (aMsg)->WriteSentinel(186254028);
    WriteIPDLParam(aMsg, aActor, (aVar).loadingSessionHistoryInfo());
    // Sentinel = 'loadingSessionHistoryInfo'
    (aMsg)->WriteSentinel(2228161089);
    WriteIPDLParam(aMsg, aActor, (aVar).originalUriString());
    // Sentinel = 'originalUriString'
    (aMsg)->WriteSentinel(1059129085);
    (aMsg)->WriteBytes((&((aVar).channelId())), 16);
    // Sentinel = 'channelId | loadIdentifier'
    (aMsg)->WriteSentinel(2204699110);
    (aMsg)->WriteBytes((&((aVar).registrarId())), 28);
    // Sentinel = 'registrarId | newLoadFlags | redirectMode | redirectFlags | loadStateExternalLoadFlags | loadStateInternalLoadFlags | loadStateLoadType'
    (aMsg)->WriteSentinel(2220045077);
}

auto IPDLParamTraits<mozilla::net::RedirectToRealChannelArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uri())))))) {
        aActor->FatalError("Error deserializing 'uri' (nsIURI) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'uri'
    if ((!((aMsg)->ReadSentinel(aIter, 45023569)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uri' (nsIURI) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->init())))))) {
        aActor->FatalError("Error deserializing 'init' (ReplacementChannelConfigInit?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'init'
    if ((!((aMsg)->ReadSentinel(aIter, 70779317)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'init' (ReplacementChannelConfigInit?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadInfo())))))) {
        aActor->FatalError("Error deserializing 'loadInfo' (LoadInfoArgs?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'loadInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 240386861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadInfo' (LoadInfoArgs?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originalURI())))))) {
        aActor->FatalError("Error deserializing 'originalURI' (nsIURI) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'originalURI'
    if ((!((aMsg)->ReadSentinel(aIter, 455148614)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originalURI' (nsIURI) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentDisposition())))))) {
        aActor->FatalError("Error deserializing 'contentDisposition' (uint32_t?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'contentDisposition'
    if ((!((aMsg)->ReadSentinel(aIter, 1196361617)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentDisposition' (uint32_t?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentDispositionFilename())))))) {
        aActor->FatalError("Error deserializing 'contentDispositionFilename' (nsString?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'contentDispositionFilename'
    if ((!((aMsg)->ReadSentinel(aIter, 2441153202)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentDispositionFilename' (nsString?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->properties())))))) {
        aActor->FatalError("Error deserializing 'properties' (nsIPropertyBag2) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'properties'
    if ((!((aMsg)->ReadSentinel(aIter, 399770702)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'properties' (nsIPropertyBag2) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->timing())))))) {
        aActor->FatalError("Error deserializing 'timing' (nsDOMNavigationTiming?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'timing'
    if ((!((aMsg)->ReadSentinel(aIter, 150798985)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'timing' (nsDOMNavigationTiming?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->srcdocData())))))) {
        aActor->FatalError("Error deserializing 'srcdocData' (nsString) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'srcdocData'
    if ((!((aMsg)->ReadSentinel(aIter, 375587833)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'srcdocData' (nsString) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseUri())))))) {
        aActor->FatalError("Error deserializing 'baseUri' (nsIURI) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'baseUri'
    if ((!((aMsg)->ReadSentinel(aIter, 186254028)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseUri' (nsIURI) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadingSessionHistoryInfo())))))) {
        aActor->FatalError("Error deserializing 'loadingSessionHistoryInfo' (LoadingSessionHistoryInfo?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'loadingSessionHistoryInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 2228161089)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadingSessionHistoryInfo' (LoadingSessionHistoryInfo?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originalUriString())))))) {
        aActor->FatalError("Error deserializing 'originalUriString' (nsCString?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    // Sentinel = 'originalUriString'
    if ((!((aMsg)->ReadSentinel(aIter, 1059129085)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originalUriString' (nsCString?) member of 'RedirectToRealChannelArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->channelId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'channelId | loadIdentifier'
    if ((!((aMsg)->ReadSentinel(aIter, 2204699110)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->registrarId())), 28)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'registrarId | newLoadFlags | redirectMode | redirectFlags | loadStateExternalLoadFlags | loadStateInternalLoadFlags | loadStateLoadType'
    if ((!((aMsg)->ReadSentinel(aIter, 2220045077)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TimingStructArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::TimingStructArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).domainLookupStart());
    // Sentinel = 'domainLookupStart'
    (aMsg)->WriteSentinel(1047070465);
    WriteIPDLParam(aMsg, aActor, (aVar).domainLookupEnd());
    // Sentinel = 'domainLookupEnd'
    (aMsg)->WriteSentinel(816317962);
    WriteIPDLParam(aMsg, aActor, (aVar).connectStart());
    // Sentinel = 'connectStart'
    (aMsg)->WriteSentinel(538838265);
    WriteIPDLParam(aMsg, aActor, (aVar).tcpConnectEnd());
    // Sentinel = 'tcpConnectEnd'
    (aMsg)->WriteSentinel(612893993);
    WriteIPDLParam(aMsg, aActor, (aVar).secureConnectionStart());
    // Sentinel = 'secureConnectionStart'
    (aMsg)->WriteSentinel(1588725926);
    WriteIPDLParam(aMsg, aActor, (aVar).connectEnd());
    // Sentinel = 'connectEnd'
    (aMsg)->WriteSentinel(376243202);
    WriteIPDLParam(aMsg, aActor, (aVar).requestStart());
    // Sentinel = 'requestStart'
    (aMsg)->WriteSentinel(556860696);
    WriteIPDLParam(aMsg, aActor, (aVar).responseStart());
    // Sentinel = 'responseStart'
    (aMsg)->WriteSentinel(648545662);
    WriteIPDLParam(aMsg, aActor, (aVar).responseEnd());
    // Sentinel = 'responseEnd'
    (aMsg)->WriteSentinel(468518023);
}

auto IPDLParamTraits<mozilla::net::TimingStructArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domainLookupStart())))))) {
        aActor->FatalError("Error deserializing 'domainLookupStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'domainLookupStart'
    if ((!((aMsg)->ReadSentinel(aIter, 1047070465)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domainLookupStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domainLookupEnd())))))) {
        aActor->FatalError("Error deserializing 'domainLookupEnd' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'domainLookupEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 816317962)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domainLookupEnd' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->connectStart())))))) {
        aActor->FatalError("Error deserializing 'connectStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'connectStart'
    if ((!((aMsg)->ReadSentinel(aIter, 538838265)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'connectStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tcpConnectEnd())))))) {
        aActor->FatalError("Error deserializing 'tcpConnectEnd' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'tcpConnectEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 612893993)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tcpConnectEnd' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->secureConnectionStart())))))) {
        aActor->FatalError("Error deserializing 'secureConnectionStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'secureConnectionStart'
    if ((!((aMsg)->ReadSentinel(aIter, 1588725926)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'secureConnectionStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->connectEnd())))))) {
        aActor->FatalError("Error deserializing 'connectEnd' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'connectEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 376243202)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'connectEnd' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestStart())))))) {
        aActor->FatalError("Error deserializing 'requestStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'requestStart'
    if ((!((aMsg)->ReadSentinel(aIter, 556860696)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->responseStart())))))) {
        aActor->FatalError("Error deserializing 'responseStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'responseStart'
    if ((!((aMsg)->ReadSentinel(aIter, 648545662)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'responseStart' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->responseEnd())))))) {
        aActor->FatalError("Error deserializing 'responseEnd' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    // Sentinel = 'responseEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 468518023)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'responseEnd' (TimeStamp) member of 'TimingStructArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ResourceTimingStructArgs|
//
namespace mozilla {
namespace net {
auto ResourceTimingStructArgs::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ResourceTimingStructArgs, encodedBodySize_) - offsetof(ResourceTimingStructArgs, transferSize_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::ResourceTimingStructArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).domainLookupStart());
    // Sentinel = 'domainLookupStart'
    (aMsg)->WriteSentinel(1047070465);
    WriteIPDLParam(aMsg, aActor, (aVar).domainLookupEnd());
    // Sentinel = 'domainLookupEnd'
    (aMsg)->WriteSentinel(816317962);
    WriteIPDLParam(aMsg, aActor, (aVar).connectStart());
    // Sentinel = 'connectStart'
    (aMsg)->WriteSentinel(538838265);
    WriteIPDLParam(aMsg, aActor, (aVar).tcpConnectEnd());
    // Sentinel = 'tcpConnectEnd'
    (aMsg)->WriteSentinel(612893993);
    WriteIPDLParam(aMsg, aActor, (aVar).secureConnectionStart());
    // Sentinel = 'secureConnectionStart'
    (aMsg)->WriteSentinel(1588725926);
    WriteIPDLParam(aMsg, aActor, (aVar).connectEnd());
    // Sentinel = 'connectEnd'
    (aMsg)->WriteSentinel(376243202);
    WriteIPDLParam(aMsg, aActor, (aVar).requestStart());
    // Sentinel = 'requestStart'
    (aMsg)->WriteSentinel(556860696);
    WriteIPDLParam(aMsg, aActor, (aVar).responseStart());
    // Sentinel = 'responseStart'
    (aMsg)->WriteSentinel(648545662);
    WriteIPDLParam(aMsg, aActor, (aVar).responseEnd());
    // Sentinel = 'responseEnd'
    (aMsg)->WriteSentinel(468518023);
    WriteIPDLParam(aMsg, aActor, (aVar).fetchStart());
    // Sentinel = 'fetchStart'
    (aMsg)->WriteSentinel(373425177);
    WriteIPDLParam(aMsg, aActor, (aVar).redirectStart());
    // Sentinel = 'redirectStart'
    (aMsg)->WriteSentinel(628753761);
    WriteIPDLParam(aMsg, aActor, (aVar).redirectEnd());
    // Sentinel = 'redirectEnd'
    (aMsg)->WriteSentinel(452527210);
    WriteIPDLParam(aMsg, aActor, (aVar).protocolVersion());
    // Sentinel = 'protocolVersion'
    (aMsg)->WriteSentinel(857540185);
    WriteIPDLParam(aMsg, aActor, (aVar).cacheReadStart());
    // Sentinel = 'cacheReadStart'
    (aMsg)->WriteSentinel(677774719);
    WriteIPDLParam(aMsg, aActor, (aVar).cacheReadEnd());
    // Sentinel = 'cacheReadEnd'
    (aMsg)->WriteSentinel(497616008);
    (aMsg)->WriteBytes((&((aVar).transferSize())), 16);
    // Sentinel = 'transferSize | encodedBodySize'
    (aMsg)->WriteSentinel(3071019960);
}

auto IPDLParamTraits<mozilla::net::ResourceTimingStructArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domainLookupStart())))))) {
        aActor->FatalError("Error deserializing 'domainLookupStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'domainLookupStart'
    if ((!((aMsg)->ReadSentinel(aIter, 1047070465)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domainLookupStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domainLookupEnd())))))) {
        aActor->FatalError("Error deserializing 'domainLookupEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'domainLookupEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 816317962)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domainLookupEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->connectStart())))))) {
        aActor->FatalError("Error deserializing 'connectStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'connectStart'
    if ((!((aMsg)->ReadSentinel(aIter, 538838265)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'connectStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tcpConnectEnd())))))) {
        aActor->FatalError("Error deserializing 'tcpConnectEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'tcpConnectEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 612893993)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tcpConnectEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->secureConnectionStart())))))) {
        aActor->FatalError("Error deserializing 'secureConnectionStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'secureConnectionStart'
    if ((!((aMsg)->ReadSentinel(aIter, 1588725926)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'secureConnectionStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->connectEnd())))))) {
        aActor->FatalError("Error deserializing 'connectEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'connectEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 376243202)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'connectEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestStart())))))) {
        aActor->FatalError("Error deserializing 'requestStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'requestStart'
    if ((!((aMsg)->ReadSentinel(aIter, 556860696)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->responseStart())))))) {
        aActor->FatalError("Error deserializing 'responseStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'responseStart'
    if ((!((aMsg)->ReadSentinel(aIter, 648545662)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'responseStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->responseEnd())))))) {
        aActor->FatalError("Error deserializing 'responseEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'responseEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 468518023)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'responseEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fetchStart())))))) {
        aActor->FatalError("Error deserializing 'fetchStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'fetchStart'
    if ((!((aMsg)->ReadSentinel(aIter, 373425177)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fetchStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->redirectStart())))))) {
        aActor->FatalError("Error deserializing 'redirectStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'redirectStart'
    if ((!((aMsg)->ReadSentinel(aIter, 628753761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'redirectStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->redirectEnd())))))) {
        aActor->FatalError("Error deserializing 'redirectEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'redirectEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 452527210)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'redirectEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->protocolVersion())))))) {
        aActor->FatalError("Error deserializing 'protocolVersion' (nsCString) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'protocolVersion'
    if ((!((aMsg)->ReadSentinel(aIter, 857540185)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'protocolVersion' (nsCString) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cacheReadStart())))))) {
        aActor->FatalError("Error deserializing 'cacheReadStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'cacheReadStart'
    if ((!((aMsg)->ReadSentinel(aIter, 677774719)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cacheReadStart' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cacheReadEnd())))))) {
        aActor->FatalError("Error deserializing 'cacheReadEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    // Sentinel = 'cacheReadEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 497616008)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cacheReadEnd' (TimeStamp) member of 'ResourceTimingStructArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->transferSize())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'transferSize | encodedBodySize'
    if ((!((aMsg)->ReadSentinel(aIter, 3071019960)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HttpActivity|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::HttpActivity>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).host());
    // Sentinel = 'host'
    (aMsg)->WriteSentinel(72024511);
    WriteIPDLParam(aMsg, aActor, (aVar).endToEndSSL());
    // Sentinel = 'endToEndSSL'
    (aMsg)->WriteSentinel(421135364);
    (aMsg)->WriteBytes((&((aVar).port())), 4);
    // Sentinel = 'port'
    (aMsg)->WriteSentinel(73990598);
}

auto IPDLParamTraits<mozilla::net::HttpActivity>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->host())))))) {
        aActor->FatalError("Error deserializing 'host' (nsCString) member of 'HttpActivity'");
        return false;
    }
    // Sentinel = 'host'
    if ((!((aMsg)->ReadSentinel(aIter, 72024511)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'host' (nsCString) member of 'HttpActivity'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->endToEndSSL())))))) {
        aActor->FatalError("Error deserializing 'endToEndSSL' (bool) member of 'HttpActivity'");
        return false;
    }
    // Sentinel = 'endToEndSSL'
    if ((!((aMsg)->ReadSentinel(aIter, 421135364)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'endToEndSSL' (bool) member of 'HttpActivity'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->port())), 4)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'port'
    if ((!((aMsg)->ReadSentinel(aIter, 73990598)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union HttpActivityArgs|
//
namespace mozilla {
namespace net {
auto HttpActivityArgs::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tuint64_t:
        {
            (ptr_uint64_t())->~uint64_t__tdef();
            break;
        }
    case THttpActivity:
        {
            (ptr_HttpActivity())->~HttpActivity__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT HttpActivityArgs::HttpActivityArgs(const uint64_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_uint64_t()) uint64_t(aOther);
    mType = Tuint64_t;
}

MOZ_IMPLICIT HttpActivityArgs::HttpActivityArgs(uint64_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_uint64_t()) uint64_t(std::move(aOther));
    mType = Tuint64_t;
}

MOZ_IMPLICIT HttpActivityArgs::HttpActivityArgs(const HttpActivity& aOther)
{
    new (mozilla::KnownNotNull, ptr_HttpActivity()) HttpActivity(aOther);
    mType = THttpActivity;
}

MOZ_IMPLICIT HttpActivityArgs::HttpActivityArgs(HttpActivity&& aOther)
{
    new (mozilla::KnownNotNull, ptr_HttpActivity()) HttpActivity(std::move(aOther));
    mType = THttpActivity;
}

MOZ_IMPLICIT HttpActivityArgs::HttpActivityArgs(const HttpActivityArgs& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tuint64_t:
        {
            new (mozilla::KnownNotNull, ptr_uint64_t()) uint64_t((aOther).get_uint64_t());
            break;
        }
    case THttpActivity:
        {
            new (mozilla::KnownNotNull, ptr_HttpActivity()) HttpActivity((aOther).get_HttpActivity());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT HttpActivityArgs::HttpActivityArgs(HttpActivityArgs&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tuint64_t:
        {
            new (mozilla::KnownNotNull, ptr_uint64_t()) uint64_t(std::move((aOther).get_uint64_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case THttpActivity:
        {
            new (mozilla::KnownNotNull, ptr_HttpActivity()) HttpActivity(std::move((aOther).get_HttpActivity()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

HttpActivityArgs::~HttpActivityArgs()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto HttpActivityArgs::operator=(const uint64_t& aRhs) -> HttpActivityArgs&
{
    if (MaybeDestroy(Tuint64_t)) {
        new (mozilla::KnownNotNull, ptr_uint64_t()) uint64_t;
    }
    (*(ptr_uint64_t())) = aRhs;
    mType = Tuint64_t;
    return (*(this));
}

auto HttpActivityArgs::operator=(uint64_t&& aRhs) -> HttpActivityArgs&
{
    if (MaybeDestroy(Tuint64_t)) {
        new (mozilla::KnownNotNull, ptr_uint64_t()) uint64_t;
    }
    (*(ptr_uint64_t())) = std::move(aRhs);
    mType = Tuint64_t;
    return (*(this));
}

auto HttpActivityArgs::operator=(const HttpActivity& aRhs) -> HttpActivityArgs&
{
    if (MaybeDestroy(THttpActivity)) {
        new (mozilla::KnownNotNull, ptr_HttpActivity()) HttpActivity;
    }
    (*(ptr_HttpActivity())) = aRhs;
    mType = THttpActivity;
    return (*(this));
}

auto HttpActivityArgs::operator=(HttpActivity&& aRhs) -> HttpActivityArgs&
{
    if (MaybeDestroy(THttpActivity)) {
        new (mozilla::KnownNotNull, ptr_HttpActivity()) HttpActivity;
    }
    (*(ptr_HttpActivity())) = std::move(aRhs);
    mType = THttpActivity;
    return (*(this));
}

auto HttpActivityArgs::operator=(const HttpActivityArgs& aRhs) -> HttpActivityArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tuint64_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uint64_t()) uint64_t;
            }
            (*(ptr_uint64_t())) = (aRhs).get_uint64_t();
            break;
        }
    case THttpActivity:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HttpActivity()) HttpActivity;
            }
            (*(ptr_HttpActivity())) = (aRhs).get_HttpActivity();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto HttpActivityArgs::operator=(HttpActivityArgs&& aRhs) -> HttpActivityArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tuint64_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uint64_t()) uint64_t;
            }
            (*(ptr_uint64_t())) = std::move((aRhs).get_uint64_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case THttpActivity:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HttpActivity()) HttpActivity;
            }
            (*(ptr_HttpActivity())) = std::move((aRhs).get_HttpActivity());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::HttpActivityArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::net::HttpActivityArgs union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'HttpActivityArgs'
    (aMsg)->WriteSentinel(908658299);

    switch (type) {
    case union__::Tuint64_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_uint64_t());
            // Sentinel = 'Tuint64_t'
            (aMsg)->WriteSentinel(285344594);
            return;
        }
    case union__::THttpActivity:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_HttpActivity());
            // Sentinel = 'THttpActivity'
            (aMsg)->WriteSentinel(588973378);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::net::HttpActivityArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::net::HttpActivityArgs union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union HttpActivityArgs");
        return false;
    }
    // Sentinel = 'HttpActivityArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 908658299)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union HttpActivityArgs");
        return false;
    }

    switch (type) {
    case union__::Tuint64_t:
        {
            uint64_t tmp = uint64_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_uint64_t())))))) {
                aActor->FatalError("Error deserializing variant Tuint64_t of union HttpActivityArgs");
                return false;
            }
            // Sentinel = 'Tuint64_t'
            if ((!((aMsg)->ReadSentinel(aIter, 285344594)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tuint64_t of union HttpActivityArgs");
                return false;
            }
            return true;
        }
    case union__::THttpActivity:
        {
            mozilla::net::HttpActivity tmp = mozilla::net::HttpActivity();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_HttpActivity())))))) {
                aActor->FatalError("Error deserializing variant THttpActivity of union HttpActivityArgs");
                return false;
            }
            // Sentinel = 'THttpActivity'
            if ((!((aMsg)->ReadSentinel(aIter, 588973378)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant THttpActivity of union HttpActivityArgs");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TransactionObserverResult|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::TransactionObserverResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).versionOk());
    // Sentinel = 'versionOk'
    (aMsg)->WriteSentinel(323158977);
    WriteIPDLParam(aMsg, aActor, (aVar).authOk());
    // Sentinel = 'authOk'
    (aMsg)->WriteSentinel(145097325);
    WriteIPDLParam(aMsg, aActor, (aVar).closeReason());
    // Sentinel = 'closeReason'
    (aMsg)->WriteSentinel(450102399);
}

auto IPDLParamTraits<mozilla::net::TransactionObserverResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->versionOk())))))) {
        aActor->FatalError("Error deserializing 'versionOk' (bool) member of 'TransactionObserverResult'");
        return false;
    }
    // Sentinel = 'versionOk'
    if ((!((aMsg)->ReadSentinel(aIter, 323158977)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'versionOk' (bool) member of 'TransactionObserverResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->authOk())))))) {
        aActor->FatalError("Error deserializing 'authOk' (bool) member of 'TransactionObserverResult'");
        return false;
    }
    // Sentinel = 'authOk'
    if ((!((aMsg)->ReadSentinel(aIter, 145097325)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'authOk' (bool) member of 'TransactionObserverResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->closeReason())))))) {
        aActor->FatalError("Error deserializing 'closeReason' (nsresult) member of 'TransactionObserverResult'");
        return false;
    }
    // Sentinel = 'closeReason'
    if ((!((aMsg)->ReadSentinel(aIter, 450102399)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'closeReason' (nsresult) member of 'TransactionObserverResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SpeculativeConnectionOverriderArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::SpeculativeConnectionOverriderArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).ignoreIdle());
    // Sentinel = 'ignoreIdle'
    (aMsg)->WriteSentinel(376308739);
    WriteIPDLParam(aMsg, aActor, (aVar).isFromPredictor());
    // Sentinel = 'isFromPredictor'
    (aMsg)->WriteSentinel(808257053);
    WriteIPDLParam(aMsg, aActor, (aVar).allow1918());
    // Sentinel = 'allow1918'
    (aMsg)->WriteSentinel(280756979);
    (aMsg)->WriteBytes((&((aVar).parallelSpeculativeConnectLimit())), 4);
    // Sentinel = 'parallelSpeculativeConnectLimit'
    (aMsg)->WriteSentinel(3389983900);
}

auto IPDLParamTraits<mozilla::net::SpeculativeConnectionOverriderArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ignoreIdle())))))) {
        aActor->FatalError("Error deserializing 'ignoreIdle' (bool) member of 'SpeculativeConnectionOverriderArgs'");
        return false;
    }
    // Sentinel = 'ignoreIdle'
    if ((!((aMsg)->ReadSentinel(aIter, 376308739)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ignoreIdle' (bool) member of 'SpeculativeConnectionOverriderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFromPredictor())))))) {
        aActor->FatalError("Error deserializing 'isFromPredictor' (bool) member of 'SpeculativeConnectionOverriderArgs'");
        return false;
    }
    // Sentinel = 'isFromPredictor'
    if ((!((aMsg)->ReadSentinel(aIter, 808257053)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFromPredictor' (bool) member of 'SpeculativeConnectionOverriderArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allow1918())))))) {
        aActor->FatalError("Error deserializing 'allow1918' (bool) member of 'SpeculativeConnectionOverriderArgs'");
        return false;
    }
    // Sentinel = 'allow1918'
    if ((!((aMsg)->ReadSentinel(aIter, 280756979)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allow1918' (bool) member of 'SpeculativeConnectionOverriderArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->parallelSpeculativeConnectLimit())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'parallelSpeculativeConnectLimit'
    if ((!((aMsg)->ReadSentinel(aIter, 3389983900)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GIOChannelOpenArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::GIOChannelOpenArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uri());
    // Sentinel = 'uri'
    (aMsg)->WriteSentinel(45023569);
    WriteIPDLParam(aMsg, aActor, (aVar).entityID());
    // Sentinel = 'entityID'
    (aMsg)->WriteSentinel(252183339);
    WriteIPDLParam(aMsg, aActor, (aVar).uploadStream());
    // Sentinel = 'uploadStream'
    (aMsg)->WriteSentinel(546768114);
    WriteIPDLParam(aMsg, aActor, (aVar).loadInfo());
    // Sentinel = 'loadInfo'
    (aMsg)->WriteSentinel(240386861);
    (aMsg)->WriteBytes((&((aVar).startPos())), 8);
    // Sentinel = 'startPos'
    (aMsg)->WriteSentinel(257753953);
    (aMsg)->WriteBytes((&((aVar).loadFlags())), 4);
    // Sentinel = 'loadFlags'
    (aMsg)->WriteSentinel(297665422);
}

auto IPDLParamTraits<mozilla::net::GIOChannelOpenArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uri())))))) {
        aActor->FatalError("Error deserializing 'uri' (URIParams) member of 'GIOChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'uri'
    if ((!((aMsg)->ReadSentinel(aIter, 45023569)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uri' (URIParams) member of 'GIOChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->entityID())))))) {
        aActor->FatalError("Error deserializing 'entityID' (nsCString) member of 'GIOChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'entityID'
    if ((!((aMsg)->ReadSentinel(aIter, 252183339)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'entityID' (nsCString) member of 'GIOChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uploadStream())))))) {
        aActor->FatalError("Error deserializing 'uploadStream' (IPCStream?) member of 'GIOChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'uploadStream'
    if ((!((aMsg)->ReadSentinel(aIter, 546768114)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uploadStream' (IPCStream?) member of 'GIOChannelOpenArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadInfo())))))) {
        aActor->FatalError("Error deserializing 'loadInfo' (LoadInfoArgs?) member of 'GIOChannelOpenArgs'");
        return false;
    }
    // Sentinel = 'loadInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 240386861)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadInfo' (LoadInfoArgs?) member of 'GIOChannelOpenArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->startPos())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'startPos'
    if ((!((aMsg)->ReadSentinel(aIter, 257753953)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->loadFlags())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'loadFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 297665422)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct GIOChannelConnectArgs|
//
namespace mozilla {
namespace net {
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::GIOChannelConnectArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).channelId())), 4);
    // Sentinel = 'channelId'
    (aMsg)->WriteSentinel(301138823);
}

auto IPDLParamTraits<mozilla::net::GIOChannelConnectArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->channelId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'channelId'
    if ((!((aMsg)->ReadSentinel(aIter, 301138823)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union GIOChannelCreationArgs|
//
namespace mozilla {
namespace net {
auto GIOChannelCreationArgs::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TGIOChannelOpenArgs:
        {
            (ptr_GIOChannelOpenArgs())->~GIOChannelOpenArgs__tdef();
            break;
        }
    case TGIOChannelConnectArgs:
        {
            (ptr_GIOChannelConnectArgs())->~GIOChannelConnectArgs__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT GIOChannelCreationArgs::GIOChannelCreationArgs(const GIOChannelOpenArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_GIOChannelOpenArgs()) GIOChannelOpenArgs(aOther);
    mType = TGIOChannelOpenArgs;
}

MOZ_IMPLICIT GIOChannelCreationArgs::GIOChannelCreationArgs(GIOChannelOpenArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_GIOChannelOpenArgs()) GIOChannelOpenArgs(std::move(aOther));
    mType = TGIOChannelOpenArgs;
}

MOZ_IMPLICIT GIOChannelCreationArgs::GIOChannelCreationArgs(const GIOChannelConnectArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_GIOChannelConnectArgs()) GIOChannelConnectArgs(aOther);
    mType = TGIOChannelConnectArgs;
}

MOZ_IMPLICIT GIOChannelCreationArgs::GIOChannelCreationArgs(GIOChannelConnectArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_GIOChannelConnectArgs()) GIOChannelConnectArgs(std::move(aOther));
    mType = TGIOChannelConnectArgs;
}

MOZ_IMPLICIT GIOChannelCreationArgs::GIOChannelCreationArgs(const GIOChannelCreationArgs& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TGIOChannelOpenArgs:
        {
            new (mozilla::KnownNotNull, ptr_GIOChannelOpenArgs()) GIOChannelOpenArgs((aOther).get_GIOChannelOpenArgs());
            break;
        }
    case TGIOChannelConnectArgs:
        {
            new (mozilla::KnownNotNull, ptr_GIOChannelConnectArgs()) GIOChannelConnectArgs((aOther).get_GIOChannelConnectArgs());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT GIOChannelCreationArgs::GIOChannelCreationArgs(GIOChannelCreationArgs&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TGIOChannelOpenArgs:
        {
            new (mozilla::KnownNotNull, ptr_GIOChannelOpenArgs()) GIOChannelOpenArgs(std::move((aOther).get_GIOChannelOpenArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TGIOChannelConnectArgs:
        {
            new (mozilla::KnownNotNull, ptr_GIOChannelConnectArgs()) GIOChannelConnectArgs(std::move((aOther).get_GIOChannelConnectArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

GIOChannelCreationArgs::~GIOChannelCreationArgs()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto GIOChannelCreationArgs::operator=(const GIOChannelOpenArgs& aRhs) -> GIOChannelCreationArgs&
{
    if (MaybeDestroy(TGIOChannelOpenArgs)) {
        new (mozilla::KnownNotNull, ptr_GIOChannelOpenArgs()) GIOChannelOpenArgs;
    }
    (*(ptr_GIOChannelOpenArgs())) = aRhs;
    mType = TGIOChannelOpenArgs;
    return (*(this));
}

auto GIOChannelCreationArgs::operator=(GIOChannelOpenArgs&& aRhs) -> GIOChannelCreationArgs&
{
    if (MaybeDestroy(TGIOChannelOpenArgs)) {
        new (mozilla::KnownNotNull, ptr_GIOChannelOpenArgs()) GIOChannelOpenArgs;
    }
    (*(ptr_GIOChannelOpenArgs())) = std::move(aRhs);
    mType = TGIOChannelOpenArgs;
    return (*(this));
}

auto GIOChannelCreationArgs::operator=(const GIOChannelConnectArgs& aRhs) -> GIOChannelCreationArgs&
{
    if (MaybeDestroy(TGIOChannelConnectArgs)) {
        new (mozilla::KnownNotNull, ptr_GIOChannelConnectArgs()) GIOChannelConnectArgs;
    }
    (*(ptr_GIOChannelConnectArgs())) = aRhs;
    mType = TGIOChannelConnectArgs;
    return (*(this));
}

auto GIOChannelCreationArgs::operator=(GIOChannelConnectArgs&& aRhs) -> GIOChannelCreationArgs&
{
    if (MaybeDestroy(TGIOChannelConnectArgs)) {
        new (mozilla::KnownNotNull, ptr_GIOChannelConnectArgs()) GIOChannelConnectArgs;
    }
    (*(ptr_GIOChannelConnectArgs())) = std::move(aRhs);
    mType = TGIOChannelConnectArgs;
    return (*(this));
}

auto GIOChannelCreationArgs::operator=(const GIOChannelCreationArgs& aRhs) -> GIOChannelCreationArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TGIOChannelOpenArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GIOChannelOpenArgs()) GIOChannelOpenArgs;
            }
            (*(ptr_GIOChannelOpenArgs())) = (aRhs).get_GIOChannelOpenArgs();
            break;
        }
    case TGIOChannelConnectArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GIOChannelConnectArgs()) GIOChannelConnectArgs;
            }
            (*(ptr_GIOChannelConnectArgs())) = (aRhs).get_GIOChannelConnectArgs();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto GIOChannelCreationArgs::operator=(GIOChannelCreationArgs&& aRhs) -> GIOChannelCreationArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TGIOChannelOpenArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GIOChannelOpenArgs()) GIOChannelOpenArgs;
            }
            (*(ptr_GIOChannelOpenArgs())) = std::move((aRhs).get_GIOChannelOpenArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TGIOChannelConnectArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_GIOChannelConnectArgs()) GIOChannelConnectArgs;
            }
            (*(ptr_GIOChannelConnectArgs())) = std::move((aRhs).get_GIOChannelConnectArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace net
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::GIOChannelCreationArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::net::GIOChannelCreationArgs union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'GIOChannelCreationArgs'
    (aMsg)->WriteSentinel(1537607771);

    switch (type) {
    case union__::TGIOChannelOpenArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_GIOChannelOpenArgs());
            // Sentinel = 'TGIOChannelOpenArgs'
            (aMsg)->WriteSentinel(1122436876);
            return;
        }
    case union__::TGIOChannelConnectArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_GIOChannelConnectArgs());
            // Sentinel = 'TGIOChannelConnectArgs'
            (aMsg)->WriteSentinel(1518340164);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::net::GIOChannelCreationArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::net::GIOChannelCreationArgs union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union GIOChannelCreationArgs");
        return false;
    }
    // Sentinel = 'GIOChannelCreationArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 1537607771)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union GIOChannelCreationArgs");
        return false;
    }

    switch (type) {
    case union__::TGIOChannelOpenArgs:
        {
            mozilla::net::GIOChannelOpenArgs tmp = mozilla::net::GIOChannelOpenArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_GIOChannelOpenArgs())))))) {
                aActor->FatalError("Error deserializing variant TGIOChannelOpenArgs of union GIOChannelCreationArgs");
                return false;
            }
            // Sentinel = 'TGIOChannelOpenArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1122436876)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TGIOChannelOpenArgs of union GIOChannelCreationArgs");
                return false;
            }
            return true;
        }
    case union__::TGIOChannelConnectArgs:
        {
            mozilla::net::GIOChannelConnectArgs tmp = mozilla::net::GIOChannelConnectArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_GIOChannelConnectArgs())))))) {
                aActor->FatalError("Error deserializing variant TGIOChannelConnectArgs of union GIOChannelCreationArgs");
                return false;
            }
            // Sentinel = 'TGIOChannelConnectArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1518340164)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TGIOChannelConnectArgs of union GIOChannelCreationArgs");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
