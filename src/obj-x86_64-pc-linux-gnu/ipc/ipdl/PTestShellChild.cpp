//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PTestShellChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/TestShellChild.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/ipc/PTestShellCommandChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace ipc {


auto PTestShellChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PTestShellChild::RecvPTestShellCommandConstructor(
        PTestShellCommandChild* actor,
        const nsString& aCommand) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PTestShellChild::PTestShellChild() :
    mozilla::ipc::IProtocol(PTestShellMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PTestShellChild);
}

PTestShellChild::~PTestShellChild()
{
    MOZ_COUNT_DTOR(PTestShellChild);
}

auto PTestShellChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PTestShellChild::ManagedPTestShellCommandChild(nsTArray<PTestShellCommandChild*>& aArr) const -> void
{
    mManagedPTestShellCommandChild.ToArray(aArr);
}

auto PTestShellChild::ManagedPTestShellCommandChild() const -> const ManagedContainer<PTestShellCommandChild>&
{
    return mManagedPTestShellCommandChild;
}

auto PTestShellChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPTestShellCommandChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPTestShellCommandChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PTestShellChild::OpenPTestShellCommandEndpoint(PTestShellCommandChild* aActor) -> ManagedEndpoint<PTestShellCommandParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PTestShellCommandChild actor");
        return ManagedEndpoint<PTestShellCommandParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPTestShellCommandChild.PutEntry(aActor);

    return ManagedEndpoint<PTestShellCommandParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PTestShellChild::BindPTestShellCommandEndpoint(
        ManagedEndpoint<PTestShellCommandChild> aEndpoint,
        PTestShellCommandChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PTestShellCommandChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPTestShellCommandChild.PutEntry(aActor);

    return true;
}

auto PTestShellChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PTestShellCommandMsgStart:
{
            PTestShellCommandChild* actor = static_cast<PTestShellCommandChild*>(aListener);
            auto& container = mManagedPTestShellCommandChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PTestShellChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PTestShellCommandMsgStart:
        static_cast<TestShellChild*>(this)->DeallocPTestShellCommandChild(static_cast<PTestShellCommandChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PTestShellChild::OnMessageReceived(const Message& msg__) -> PTestShellChild::Result
{
    switch (msg__.type()) {
    case PTestShell::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTestShellChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTestShellChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTestShell::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PTestShellChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PTestShell'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PTestShell'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PTestShell'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<TestShellChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PTestShellMsgStart, actor);

            return MsgProcessed;
        }
    case PTestShell::Msg_ExecuteCommand__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTestShellChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTestShellChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTestShell::Msg_ExecuteCommand", OTHER);

            PickleIterator iter__{msg__};
            nsString aCommand{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCommand)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aCommand'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 230097697)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<TestShellChild*>(this))->RecvExecuteCommand(std::move(aCommand))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTestShell::Msg_PTestShellCommandConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTestShellChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTestShellChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTestShell::Msg_PTestShellCommandConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsString aCommand{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCommand)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aCommand'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 230097697)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PTestShellCommandChild* actor = (static_cast<TestShellChild*>(this))->AllocPTestShellCommandChild(aCommand);
            if (!actor) {
                NS_WARNING("Cannot bind null PTestShellCommandChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPTestShellCommandChild.PutEntry(actor);

            if ((!((static_cast<TestShellChild*>(this))->RecvPTestShellCommandConstructor(std::move(actor), std::move(aCommand))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PTestShellChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PTestShellChild::Result
{
    return MsgNotKnown;
}

auto PTestShellChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PTestShellChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTestShellChild::ClearSubtree() -> void
{
    for (auto it = mManagedPTestShellCommandChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPTestShellCommandChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPTestShellCommandChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPTestShellCommandChild.Clear();

}



} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::PTestShellChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::ipc::PTestShellChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PTestShell", PTestShellMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::ipc::PTestShellChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
