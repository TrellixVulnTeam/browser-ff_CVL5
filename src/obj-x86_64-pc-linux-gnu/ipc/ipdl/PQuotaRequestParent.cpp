//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/quota/PQuotaRequestParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/quota/PQuotaParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace quota {


MOZ_IMPLICIT PQuotaRequestParent::PQuotaRequestParent() :
    mozilla::ipc::IProtocol(PQuotaRequestMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PQuotaRequestParent);
}

PQuotaRequestParent::~PQuotaRequestParent()
{
    MOZ_COUNT_DTOR(PQuotaRequestParent);
}

auto PQuotaRequestParent::Manager() const -> PQuotaParent*
{
    return static_cast<PQuotaParent*>(IProtocol::Manager());
}

auto PQuotaRequestParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PQuotaRequestParent::Send__delete__(
        PQuotaRequestParent* actor,
        const RequestResponse& response) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PQuotaRequest::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, actor, response);
    // Sentinel = 'response'
    (msg__)->WriteSentinel(260965232);



    if (mozilla::ipc::LoggingEnabledFor("PQuotaRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PQuotaRequestParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PQuotaRequest::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PQuotaRequestMsgStart, actor);
    return sendok__;
}

auto PQuotaRequestParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PQuotaRequestParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PQuotaRequestParent::OnMessageReceived(const Message& msg__) -> PQuotaRequestParent::Result
{
    switch (msg__.type()) {
    case PQuotaRequest::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PQuotaRequestParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PQuotaRequestParent::Result
{
    return MsgNotKnown;
}

auto PQuotaRequestParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PQuotaRequestParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PQuotaRequestParent::ClearSubtree() -> void
{
}



} // namespace quota
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::PQuotaRequestParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::quota::PQuotaRequestParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PQuotaRequest", PQuotaRequestMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::quota::PQuotaRequestParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
