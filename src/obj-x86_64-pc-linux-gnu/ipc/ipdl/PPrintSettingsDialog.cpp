//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/embedding/PPrintingParent.h"
#include "mozilla/embedding/PPrintingChild.h"
#include "mozilla/layout/PRemotePrintJobParent.h"
#include "mozilla/layout/PRemotePrintJobChild.h"
#include "mozilla/embedding/PPrintSettingsDialog.h"
#include "mozilla/embedding/PPrintSettingsDialogParent.h"
#include "mozilla/embedding/PPrintSettingsDialogChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace embedding {
namespace PPrintSettingsDialog {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::embedding::PPrintSettingsDialogParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::embedding::PPrintSettingsDialogChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PPrintSettingsDialog
} // namespace embedding
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union PrintDataOrNSResult|
//
namespace mozilla {
namespace embedding {
auto PrintDataOrNSResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TPrintData:
        {
            (ptr_PrintData())->~PrintData__tdef();
            break;
        }
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT PrintDataOrNSResult::PrintDataOrNSResult(const PrintData& aOther)
{
    new (mozilla::KnownNotNull, ptr_PrintData()) PrintData(aOther);
    mType = TPrintData;
}

MOZ_IMPLICIT PrintDataOrNSResult::PrintDataOrNSResult(PrintData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_PrintData()) PrintData(std::move(aOther));
    mType = TPrintData;
}

MOZ_IMPLICIT PrintDataOrNSResult::PrintDataOrNSResult(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT PrintDataOrNSResult::PrintDataOrNSResult(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT PrintDataOrNSResult::PrintDataOrNSResult(const PrintDataOrNSResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TPrintData:
        {
            new (mozilla::KnownNotNull, ptr_PrintData()) PrintData((aOther).get_PrintData());
            break;
        }
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT PrintDataOrNSResult::PrintDataOrNSResult(PrintDataOrNSResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TPrintData:
        {
            new (mozilla::KnownNotNull, ptr_PrintData()) PrintData(std::move((aOther).get_PrintData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

PrintDataOrNSResult::~PrintDataOrNSResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto PrintDataOrNSResult::operator=(const PrintData& aRhs) -> PrintDataOrNSResult&
{
    if (MaybeDestroy(TPrintData)) {
        new (mozilla::KnownNotNull, ptr_PrintData()) PrintData;
    }
    (*(ptr_PrintData())) = aRhs;
    mType = TPrintData;
    return (*(this));
}

auto PrintDataOrNSResult::operator=(PrintData&& aRhs) -> PrintDataOrNSResult&
{
    if (MaybeDestroy(TPrintData)) {
        new (mozilla::KnownNotNull, ptr_PrintData()) PrintData;
    }
    (*(ptr_PrintData())) = std::move(aRhs);
    mType = TPrintData;
    return (*(this));
}

auto PrintDataOrNSResult::operator=(const nsresult& aRhs) -> PrintDataOrNSResult&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto PrintDataOrNSResult::operator=(nsresult&& aRhs) -> PrintDataOrNSResult&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto PrintDataOrNSResult::operator=(const PrintDataOrNSResult& aRhs) -> PrintDataOrNSResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPrintData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PrintData()) PrintData;
            }
            (*(ptr_PrintData())) = (aRhs).get_PrintData();
            break;
        }
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto PrintDataOrNSResult::operator=(PrintDataOrNSResult&& aRhs) -> PrintDataOrNSResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPrintData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PrintData()) PrintData;
            }
            (*(ptr_PrintData())) = std::move((aRhs).get_PrintData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace embedding
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::embedding::PrintDataOrNSResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::embedding::PrintDataOrNSResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'PrintDataOrNSResult'
    (aMsg)->WriteSentinel(1226114921);

    switch (type) {
    case union__::TPrintData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_PrintData());
            // Sentinel = 'TPrintData'
            (aMsg)->WriteSentinel(350553052);
            return;
        }
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::embedding::PrintDataOrNSResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::embedding::PrintDataOrNSResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union PrintDataOrNSResult");
        return false;
    }
    // Sentinel = 'PrintDataOrNSResult'
    if ((!((aMsg)->ReadSentinel(aIter, 1226114921)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union PrintDataOrNSResult");
        return false;
    }

    switch (type) {
    case union__::TPrintData:
        {
            mozilla::embedding::PrintData tmp = mozilla::embedding::PrintData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PrintData())))))) {
                aActor->FatalError("Error deserializing variant TPrintData of union PrintDataOrNSResult");
                return false;
            }
            // Sentinel = 'TPrintData'
            if ((!((aMsg)->ReadSentinel(aIter, 350553052)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPrintData of union PrintDataOrNSResult");
                return false;
            }
            return true;
        }
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union PrintDataOrNSResult");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union PrintDataOrNSResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
