//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PCompositorManagerChild.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/layers/CompositorManagerChild.h"
#include "mozilla/layers/WebRenderMessageUtils.h"

#include "mozilla/layers/PCompositorBridgeChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PCompositorManagerChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PCompositorManagerChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PCompositorManagerChild::EnteredCxxStack() -> void
{
}

auto PCompositorManagerChild::ExitedCxxStack() -> void
{
}

auto PCompositorManagerChild::EnteredCall() -> void
{
}

auto PCompositorManagerChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PCompositorManagerChild::PCompositorManagerChild() :
    mozilla::ipc::IToplevelProtocol("PCompositorManagerChild", PCompositorManagerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PCompositorManagerChild);
}

PCompositorManagerChild::~PCompositorManagerChild()
{
    MOZ_COUNT_DTOR(PCompositorManagerChild);
}

auto PCompositorManagerChild::ManagedPCompositorBridgeChild(nsTArray<PCompositorBridgeChild*>& aArr) const -> void
{
    mManagedPCompositorBridgeChild.ToArray(aArr);
}

auto PCompositorManagerChild::ManagedPCompositorBridgeChild() const -> const ManagedContainer<PCompositorBridgeChild>&
{
    return mManagedPCompositorBridgeChild;
}

auto PCompositorManagerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPCompositorBridgeChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPCompositorBridgeChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PCompositorManagerChild::OpenPCompositorBridgeEndpoint(PCompositorBridgeChild* aActor) -> ManagedEndpoint<PCompositorBridgeParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PCompositorBridgeChild actor");
        return ManagedEndpoint<PCompositorBridgeParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPCompositorBridgeChild.PutEntry(aActor);

    return ManagedEndpoint<PCompositorBridgeParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PCompositorManagerChild::BindPCompositorBridgeEndpoint(
        ManagedEndpoint<PCompositorBridgeChild> aEndpoint,
        PCompositorBridgeChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PCompositorBridgeChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPCompositorBridgeChild.PutEntry(aActor);

    return true;
}

auto PCompositorManagerChild::SendPCompositorBridgeConstructor(
        PCompositorBridgeChild* actor,
        const CompositorBridgeOptions& options) -> PCompositorBridgeChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PCompositorBridgeChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPCompositorBridgeChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PCompositorManager::Msg_PCompositorBridgeConstructor(MSG_ROUTING_CONTROL);

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, options);
    // Sentinel = 'options'
    (msg__)->WriteSentinel(204735245);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCompositorManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCompositorManager::Msg_PCompositorBridgeConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PCompositorBridgeChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PCompositorBridgeMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PCompositorManagerChild::SendAddSharedSurface(
        const ExternalImageId& aId,
        const SurfaceDescriptorShared& aDesc) -> bool
{
    IPC::Message* msg__ = PCompositorManager::Msg_AddSharedSurface(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);
    WriteIPDLParam(msg__, this, aDesc);
    // Sentinel = 'aDesc'
    (msg__)->WriteSentinel(91357665);




    if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCompositorManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCompositorManager::Msg_AddSharedSurface", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCompositorManagerChild::SendRemoveSharedSurface(const ExternalImageId& aId) -> bool
{
    IPC::Message* msg__ = PCompositorManager::Msg_RemoveSharedSurface(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);




    if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCompositorManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCompositorManager::Msg_RemoveSharedSurface", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCompositorManagerChild::SendReportSharedSurfacesMemory(
        mozilla::ipc::ResolveCallback<SharedSurfacesMemoryReport>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PCompositorManager::Msg_ReportSharedSurfacesMemory(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCompositorManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCompositorManager::Msg_ReportSharedSurfacesMemory", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PCompositorManagerChild::SendReportSharedSurfacesMemory() -> RefPtr<ReportSharedSurfacesMemoryPromise>
{
    RefPtr<MozPromise<SharedSurfacesMemoryReport, ResponseRejectReason, true>::Private> promise__ = new MozPromise<SharedSurfacesMemoryReport, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendReportSharedSurfacesMemory([promise__](SharedSurfacesMemoryReport&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PCompositorManagerChild::SendNotifyMemoryPressure() -> bool
{
    IPC::Message* msg__ = PCompositorManager::Msg_NotifyMemoryPressure(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCompositorManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCompositorManager::Msg_NotifyMemoryPressure", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PCompositorManagerChild::SendReportMemory(
        mozilla::ipc::ResolveCallback<MemoryReport>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PCompositorManager::Msg_ReportMemory(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PCompositorManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PCompositorManager::Msg_ReportMemory", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PCompositorManagerChild::SendReportMemory() -> RefPtr<ReportMemoryPromise>
{
    RefPtr<MozPromise<MemoryReport, ResponseRejectReason, true>::Private> promise__ = new MozPromise<MemoryReport, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendReportMemory([promise__](MemoryReport&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PCompositorManagerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PCompositorBridgeMsgStart:
{
            PCompositorBridgeChild* actor = static_cast<PCompositorBridgeChild*>(aListener);
            auto& container = mManagedPCompositorBridgeChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PCompositorManagerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    default:
        FatalError("unreached");
        return;
    }
}

auto PCompositorManagerChild::OnMessageReceived(const Message& msg__) -> PCompositorManagerChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PCompositorManager::Reply_PCompositorBridgeConstructor__ID:
        {
            return MsgProcessed;
        }
    case PCompositorManager::Reply_ReportSharedSurfacesMemory__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_ReportSharedSurfacesMemory", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<SharedSurfacesMemoryReport> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                SharedSurfacesMemoryReport aReport{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReport)))))) {
                    FatalError("Error deserializing 'SharedSurfacesMemoryReport'");
                    return MsgValueError;
                }
                // Sentinel = 'aReport'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184025822)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'SharedSurfacesMemoryReport'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aReport));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PCompositorManager::Reply_ReportMemory__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_ReportMemory", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<MemoryReport> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                MemoryReport aReport{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReport)))))) {
                    FatalError("Error deserializing 'MemoryReport'");
                    return MsgValueError;
                }
                // Sentinel = 'aReport'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184025822)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'MemoryReport'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aReport));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PCompositorManager::Msg_NotifyWebRenderError__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PCompositorManager::Msg_NotifyWebRenderError", OTHER);

            PickleIterator iter__{msg__};
            WebRenderError error{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(error)))))) {
                FatalError("Error deserializing 'WebRenderError'");
                return MsgValueError;
            }
            // Sentinel = 'error'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107741739)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebRenderError'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<CompositorManagerChild*>(this))->RecvNotifyWebRenderError(std::move(error))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PCompositorManagerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PCompositorManagerChild::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PCompositorManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PCompositorManagerChild",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PCompositorManagerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PCompositorManagerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PCompositorManagerChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PCompositorManagerChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PCompositorManagerChild::ClearSubtree() -> void
{
    for (auto it = mManagedPCompositorBridgeChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPCompositorBridgeChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPCompositorBridgeChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPCompositorBridgeChild.Clear();

}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PCompositorManagerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PCompositorManagerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PCompositorManager", PCompositorManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PCompositorManagerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
