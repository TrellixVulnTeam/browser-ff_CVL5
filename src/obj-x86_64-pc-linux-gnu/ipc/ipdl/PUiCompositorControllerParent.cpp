//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PUiCompositorControllerParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/UiCompositorControllerParent.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


auto PUiCompositorControllerParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PUiCompositorControllerParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PUiCompositorControllerParent::EnteredCxxStack() -> void
{
}

auto PUiCompositorControllerParent::ExitedCxxStack() -> void
{
}

auto PUiCompositorControllerParent::EnteredCall() -> void
{
}

auto PUiCompositorControllerParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PUiCompositorControllerParent::PUiCompositorControllerParent() :
    mozilla::ipc::IToplevelProtocol("PUiCompositorControllerParent", PUiCompositorControllerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PUiCompositorControllerParent);
}

PUiCompositorControllerParent::~PUiCompositorControllerParent()
{
    MOZ_COUNT_DTOR(PUiCompositorControllerParent);
}

auto PUiCompositorControllerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PUiCompositorControllerParent::SendToolbarAnimatorMessageFromCompositor(const int32_t& aMessage) -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_ToolbarAnimatorMessageFromCompositor(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);




    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_ToolbarAnimatorMessageFromCompositor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerParent::SendRootFrameMetrics(
        const ScreenPoint& aScrollOffset,
        const CSSToScreenScale& aZoom) -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_RootFrameMetrics(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aScrollOffset);
    // Sentinel = 'aScrollOffset'
    (msg__)->WriteSentinel(601163064);
    WriteIPDLParam(msg__, this, aZoom);
    // Sentinel = 'aZoom'
    (msg__)->WriteSentinel(99222023);




    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_RootFrameMetrics", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerParent::SendScreenPixels(
        Shmem&& aMem,
        const ScreenIntSize& aSize,
        const bool& aNeedsYFlip) -> bool
{
    IPC::Message* msg__ = PUiCompositorController::Msg_ScreenPixels(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(aMem));
    // Sentinel = 'aMem'
    (msg__)->WriteSentinel(61211009);
    WriteIPDLParam(msg__, this, aSize);
    // Sentinel = 'aSize'
    (msg__)->WriteSentinel(97124861);
    WriteIPDLParam(msg__, this, aNeedsYFlip);
    // Sentinel = 'aNeedsYFlip'
    (msg__)->WriteSentinel(415237173);




    if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUiCompositorControllerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUiCompositorController::Msg_ScreenPixels", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUiCompositorControllerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PUiCompositorControllerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PUiCompositorControllerParent::OnMessageReceived(const Message& msg__) -> PUiCompositorControllerParent::Result
{
    switch (msg__.type()) {
    case PUiCompositorController::Msg_InvalidateAndRender__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_InvalidateAndRender", OTHER);

            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvInvalidateAndRender()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUiCompositorController::Msg_MaxToolbarHeight__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_MaxToolbarHeight", OTHER);

            PickleIterator iter__{msg__};
            int32_t aHeight{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHeight)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aHeight'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175375035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvMaxToolbarHeight(std::move(aHeight))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUiCompositorController::Msg_FixedBottomOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_FixedBottomOffset", OTHER);

            PickleIterator iter__{msg__};
            int32_t aOffset{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvFixedBottomOffset(std::move(aOffset))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUiCompositorController::Msg_DefaultClearColor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_DefaultClearColor", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aColor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aColor)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aColor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132842081)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvDefaultClearColor(std::move(aColor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUiCompositorController::Msg_RequestScreenPixels__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_RequestScreenPixels", OTHER);

            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvRequestScreenPixels()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUiCompositorController::Msg_EnableLayerUpdateNotifications__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_EnableLayerUpdateNotifications", OTHER);

            PickleIterator iter__{msg__};
            bool aEnable{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnable)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 173605545)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvEnableLayerUpdateNotifications(std::move(aEnable))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PUiCompositorControllerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PUiCompositorControllerParent::Result
{
    switch (msg__.type()) {
    case PUiCompositorController::Msg_Pause__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_Pause", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvPause()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PUiCompositorController::Reply_Pause(id__);


            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PUiCompositorController::Msg_Resume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_Resume", OTHER);

            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvResume()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PUiCompositorController::Reply_Resume(id__);


            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PUiCompositorController::Msg_ResumeAndResize__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUiCompositorController::Msg_ResumeAndResize", OTHER);

            PickleIterator iter__{msg__};
            int32_t aX{};
            int32_t aY{};
            int32_t aWidth{};
            int32_t aHeight{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWidth)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWidth'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 136249954)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHeight)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aHeight'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175375035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            if ((!((static_cast<UiCompositorControllerParent*>(this))->RecvResumeAndResize(std::move(aX), std::move(aY), std::move(aWidth), std::move(aHeight))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PUiCompositorController::Reply_ResumeAndResize(id__);


            if (mozilla::ipc::LoggingEnabledFor("PUiCompositorControllerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUiCompositorControllerParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PUiCompositorControllerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PUiCompositorControllerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PUiCompositorControllerParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PUiCompositorControllerParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PUiCompositorControllerParent::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PUiCompositorControllerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PUiCompositorControllerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PUiCompositorController", PUiCompositorControllerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PUiCompositorControllerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
