//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentPermission.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PermissionRequest|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PermissionRequest>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).options());
    // Sentinel = 'options'
    (aMsg)->WriteSentinel(204735245);
}

auto IPDLParamTraits<mozilla::dom::PermissionRequest>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (nsCString) member of 'PermissionRequest'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (nsCString) member of 'PermissionRequest'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->options())))))) {
        aActor->FatalError("Error deserializing 'options' (nsString[]) member of 'PermissionRequest'");
        return false;
    }
    // Sentinel = 'options'
    if ((!((aMsg)->ReadSentinel(aIter, 204735245)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'options' (nsString[]) member of 'PermissionRequest'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PermissionChoice|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PermissionChoice>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).choice());
    // Sentinel = 'choice'
    (aMsg)->WriteSentinel(142738028);
}

auto IPDLParamTraits<mozilla::dom::PermissionChoice>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (nsCString) member of 'PermissionChoice'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (nsCString) member of 'PermissionChoice'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->choice())))))) {
        aActor->FatalError("Error deserializing 'choice' (nsString) member of 'PermissionChoice'");
        return false;
    }
    // Sentinel = 'choice'
    if ((!((aMsg)->ReadSentinel(aIter, 142738028)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'choice' (nsString) member of 'PermissionChoice'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
