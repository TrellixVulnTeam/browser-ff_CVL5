//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginInstanceParent.h"
#include "mozilla/plugins/PPluginInstanceChild.h"
#include "mozilla/plugins/PPluginScriptableObject.h"
#include "mozilla/plugins/PPluginScriptableObjectParent.h"
#include "mozilla/plugins/PPluginScriptableObjectChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {
namespace PPluginScriptableObject {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginScriptableObjectParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginScriptableObjectChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_Evaluate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_Evaluate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_Evaluate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_Evaluate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Invalidate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Invalidate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Invalidate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Invalidate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_HasMethod(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HasMethod__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_HasMethod(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_HasMethod__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Invoke(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Invoke__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Invoke(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Invoke__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InvokeDefault(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InvokeDefault__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_InvokeDefault(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_InvokeDefault__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_HasProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HasProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_HasProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_HasProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SetProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SetProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RemoveProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoveProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RemoveProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RemoveProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Enumerate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Enumerate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Enumerate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Enumerate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Construct(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Construct__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Construct(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Construct__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Protect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Protect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Unprotect(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Unprotect__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetParentProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetParentProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetParentProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetParentProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetChildProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetChildProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetChildProperty(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetChildProperty__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}

} // namespace PPluginScriptableObject
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union Variant|
//
namespace mozilla {
namespace plugins {
auto Variant::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tvoid_t:
        {
            (ptr_void_t())->~void_t__tdef();
            break;
        }
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    case Tbool:
        {
            (ptr_bool())->~bool__tdef();
            break;
        }
    case Tint:
        {
            (ptr_int())->~int__tdef();
            break;
        }
    case Tdouble:
        {
            (ptr_double())->~double__tdef();
            break;
        }
    case TnsCString:
        {
            (ptr_nsCString())->~nsCString__tdef();
            break;
        }
    case TPPluginScriptableObjectParent:
        {
            (ptr_PPluginScriptableObjectParent())->~PPluginScriptableObjectParent__tdef();
            break;
        }
    case TPPluginScriptableObjectChild:
        {
            (ptr_PPluginScriptableObjectChild())->~PPluginScriptableObjectChild__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT Variant::Variant(const void_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(aOther);
    mType = Tvoid_t;
}

MOZ_IMPLICIT Variant::Variant(void_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move(aOther));
    mType = Tvoid_t;
}

MOZ_IMPLICIT Variant::Variant(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT Variant::Variant(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT Variant::Variant(const bool& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(aOther);
    mType = Tbool;
}

MOZ_IMPLICIT Variant::Variant(bool&& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(std::move(aOther));
    mType = Tbool;
}

MOZ_IMPLICIT Variant::Variant(const int& aOther)
{
    new (mozilla::KnownNotNull, ptr_int()) int(aOther);
    mType = Tint;
}

MOZ_IMPLICIT Variant::Variant(int&& aOther)
{
    new (mozilla::KnownNotNull, ptr_int()) int(std::move(aOther));
    mType = Tint;
}

MOZ_IMPLICIT Variant::Variant(const double& aOther)
{
    new (mozilla::KnownNotNull, ptr_double()) double(aOther);
    mType = Tdouble;
}

MOZ_IMPLICIT Variant::Variant(double&& aOther)
{
    new (mozilla::KnownNotNull, ptr_double()) double(std::move(aOther));
    mType = Tdouble;
}

MOZ_IMPLICIT Variant::Variant(const nsCString& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(aOther);
    mType = TnsCString;
}

MOZ_IMPLICIT Variant::Variant(nsCString&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move(aOther));
    mType = TnsCString;
}

MOZ_IMPLICIT Variant::Variant(PPluginScriptableObjectParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*(const_cast<PPluginScriptableObjectParent*>(aOther));
    mType = TPPluginScriptableObjectParent;
}

MOZ_IMPLICIT Variant::Variant(PPluginScriptableObjectChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*(const_cast<PPluginScriptableObjectChild*>(aOther));
    mType = TPPluginScriptableObjectChild;
}

MOZ_IMPLICIT Variant::Variant(const Variant& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t((aOther).get_void_t());
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool((aOther).get_bool());
            break;
        }
    case Tint:
        {
            new (mozilla::KnownNotNull, ptr_int()) int((aOther).get_int());
            break;
        }
    case Tdouble:
        {
            new (mozilla::KnownNotNull, ptr_double()) double((aOther).get_double());
            break;
        }
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString((aOther).get_nsCString());
            break;
        }
    case TPPluginScriptableObjectParent:
        {
            new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*(const_cast<PPluginScriptableObjectParent*>((aOther).get_PPluginScriptableObjectParent()));
            break;
        }
    case TPPluginScriptableObjectChild:
        {
            new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*(const_cast<PPluginScriptableObjectChild*>((aOther).get_PPluginScriptableObjectChild()));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT Variant::Variant(Variant&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move((aOther).get_void_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool(std::move((aOther).get_bool()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tint:
        {
            new (mozilla::KnownNotNull, ptr_int()) int(std::move((aOther).get_int()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tdouble:
        {
            new (mozilla::KnownNotNull, ptr_double()) double(std::move((aOther).get_double()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move((aOther).get_nsCString()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPPluginScriptableObjectParent:
        {
            new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*(const_cast<PPluginScriptableObjectParent*>(std::move((aOther).get_PPluginScriptableObjectParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPPluginScriptableObjectChild:
        {
            new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*(const_cast<PPluginScriptableObjectChild*>(std::move((aOther).get_PPluginScriptableObjectChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

Variant::~Variant()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto Variant::operator=(const void_t& aRhs) -> Variant&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = aRhs;
    mType = Tvoid_t;
    return (*(this));
}

auto Variant::operator=(void_t&& aRhs) -> Variant&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = std::move(aRhs);
    mType = Tvoid_t;
    return (*(this));
}

auto Variant::operator=(const null_t& aRhs) -> Variant&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto Variant::operator=(null_t&& aRhs) -> Variant&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto Variant::operator=(const bool& aRhs) -> Variant&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = aRhs;
    mType = Tbool;
    return (*(this));
}

auto Variant::operator=(bool&& aRhs) -> Variant&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = std::move(aRhs);
    mType = Tbool;
    return (*(this));
}

auto Variant::operator=(const int& aRhs) -> Variant&
{
    if (MaybeDestroy(Tint)) {
        new (mozilla::KnownNotNull, ptr_int()) int;
    }
    (*(ptr_int())) = aRhs;
    mType = Tint;
    return (*(this));
}

auto Variant::operator=(int&& aRhs) -> Variant&
{
    if (MaybeDestroy(Tint)) {
        new (mozilla::KnownNotNull, ptr_int()) int;
    }
    (*(ptr_int())) = std::move(aRhs);
    mType = Tint;
    return (*(this));
}

auto Variant::operator=(const double& aRhs) -> Variant&
{
    if (MaybeDestroy(Tdouble)) {
        new (mozilla::KnownNotNull, ptr_double()) double;
    }
    (*(ptr_double())) = aRhs;
    mType = Tdouble;
    return (*(this));
}

auto Variant::operator=(double&& aRhs) -> Variant&
{
    if (MaybeDestroy(Tdouble)) {
        new (mozilla::KnownNotNull, ptr_double()) double;
    }
    (*(ptr_double())) = std::move(aRhs);
    mType = Tdouble;
    return (*(this));
}

auto Variant::operator=(const nsCString& aRhs) -> Variant&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = aRhs;
    mType = TnsCString;
    return (*(this));
}

auto Variant::operator=(nsCString&& aRhs) -> Variant&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = std::move(aRhs);
    mType = TnsCString;
    return (*(this));
}

auto Variant::operator=(PPluginScriptableObjectParent* aRhs) -> Variant&
{
    if (MaybeDestroy(TPPluginScriptableObjectParent)) {
        new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*;
    }
    (*(ptr_PPluginScriptableObjectParent())) = const_cast<PPluginScriptableObjectParent*>(aRhs);
    mType = TPPluginScriptableObjectParent;
    return (*(this));
}

auto Variant::operator=(PPluginScriptableObjectChild* aRhs) -> Variant&
{
    if (MaybeDestroy(TPPluginScriptableObjectChild)) {
        new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*;
    }
    (*(ptr_PPluginScriptableObjectChild())) = const_cast<PPluginScriptableObjectChild*>(aRhs);
    mType = TPPluginScriptableObjectChild;
    return (*(this));
}

auto Variant::operator=(const Variant& aRhs) -> Variant&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = (aRhs).get_void_t();
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = (aRhs).get_bool();
            break;
        }
    case Tint:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int()) int;
            }
            (*(ptr_int())) = (aRhs).get_int();
            break;
        }
    case Tdouble:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_double()) double;
            }
            (*(ptr_double())) = (aRhs).get_double();
            break;
        }
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = (aRhs).get_nsCString();
            break;
        }
    case TPPluginScriptableObjectParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*;
            }
            (*(ptr_PPluginScriptableObjectParent())) = const_cast<PPluginScriptableObjectParent*>((aRhs).get_PPluginScriptableObjectParent());
            break;
        }
    case TPPluginScriptableObjectChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*;
            }
            (*(ptr_PPluginScriptableObjectChild())) = const_cast<PPluginScriptableObjectChild*>((aRhs).get_PPluginScriptableObjectChild());
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto Variant::operator=(Variant&& aRhs) -> Variant&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = std::move((aRhs).get_void_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = std::move((aRhs).get_bool());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tint:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int()) int;
            }
            (*(ptr_int())) = std::move((aRhs).get_int());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tdouble:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_double()) double;
            }
            (*(ptr_double())) = std::move((aRhs).get_double());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = std::move((aRhs).get_nsCString());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPPluginScriptableObjectParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectParent()) PPluginScriptableObjectParent*;
            }
            (*(ptr_PPluginScriptableObjectParent())) = const_cast<PPluginScriptableObjectParent*>(std::move((aRhs).get_PPluginScriptableObjectParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPPluginScriptableObjectChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PPluginScriptableObjectChild()) PPluginScriptableObjectChild*;
            }
            (*(ptr_PPluginScriptableObjectChild())) = const_cast<PPluginScriptableObjectChild*>(std::move((aRhs).get_PPluginScriptableObjectChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::Variant>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::plugins::Variant union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'Variant'
    (aMsg)->WriteSentinel(184025814);

    switch (type) {
    case union__::Tvoid_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_void_t());
            // Sentinel = 'Tvoid_t'
            (aMsg)->WriteSentinel(189006554);
            return;
        }
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    case union__::Tbool:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_bool());
            // Sentinel = 'Tbool'
            (aMsg)->WriteSentinel(96993793);
            return;
        }
    case union__::Tint:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_int());
            // Sentinel = 'Tint'
            (aMsg)->WriteSentinel(64946592);
            return;
        }
    case union__::Tdouble:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_double());
            // Sentinel = 'Tdouble'
            (aMsg)->WriteSentinel(185402064);
            return;
        }
    case union__::TnsCString:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsCString());
            // Sentinel = 'TnsCString'
            (aMsg)->WriteSentinel(353960944);
            return;
        }
    case union__::TPPluginScriptableObjectParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                WriteIPDLParam(aMsg, aActor, (aVar).get_PPluginScriptableObjectParent());
                // Sentinel = 'TPPluginScriptableObjectParent'
                (aMsg)->WriteSentinel(3038710750);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPPluginScriptableObjectChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                WriteIPDLParam(aMsg, aActor, (aVar).get_PPluginScriptableObjectChild());
                // Sentinel = 'TPPluginScriptableObjectChild'
                (aMsg)->WriteSentinel(2835680088);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::plugins::Variant>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::plugins::Variant union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union Variant");
        return false;
    }
    // Sentinel = 'Variant'
    if ((!((aMsg)->ReadSentinel(aIter, 184025814)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union Variant");
        return false;
    }

    switch (type) {
    case union__::Tvoid_t:
        {
            mozilla::void_t tmp = mozilla::void_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_void_t())))))) {
                aActor->FatalError("Error deserializing variant Tvoid_t of union Variant");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((aMsg)->ReadSentinel(aIter, 189006554)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tvoid_t of union Variant");
                return false;
            }
            return true;
        }
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union Variant");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union Variant");
                return false;
            }
            return true;
        }
    case union__::Tbool:
        {
            bool tmp = bool();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_bool())))))) {
                aActor->FatalError("Error deserializing variant Tbool of union Variant");
                return false;
            }
            // Sentinel = 'Tbool'
            if ((!((aMsg)->ReadSentinel(aIter, 96993793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tbool of union Variant");
                return false;
            }
            return true;
        }
    case union__::Tint:
        {
            int tmp = int();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_int())))))) {
                aActor->FatalError("Error deserializing variant Tint of union Variant");
                return false;
            }
            // Sentinel = 'Tint'
            if ((!((aMsg)->ReadSentinel(aIter, 64946592)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tint of union Variant");
                return false;
            }
            return true;
        }
    case union__::Tdouble:
        {
            double tmp = double();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_double())))))) {
                aActor->FatalError("Error deserializing variant Tdouble of union Variant");
                return false;
            }
            // Sentinel = 'Tdouble'
            if ((!((aMsg)->ReadSentinel(aIter, 185402064)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tdouble of union Variant");
                return false;
            }
            return true;
        }
    case union__::TnsCString:
        {
            nsCString tmp = nsCString();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsCString())))))) {
                aActor->FatalError("Error deserializing variant TnsCString of union Variant");
                return false;
            }
            // Sentinel = 'TnsCString'
            if ((!((aMsg)->ReadSentinel(aIter, 353960944)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsCString of union Variant");
                return false;
            }
            return true;
        }
    case union__::TPPluginScriptableObjectParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::plugins::PPluginScriptableObjectChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PPluginScriptableObjectChild())))))) {
                aActor->FatalError("Error deserializing variant TPPluginScriptableObjectParent of union Variant");
                return false;
            }
            // Sentinel = 'TPPluginScriptableObjectParent'
            if ((!((aMsg)->ReadSentinel(aIter, 3038710750)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPPluginScriptableObjectParent of union Variant");
                return false;
            }
            return true;
        }
    case union__::TPPluginScriptableObjectChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::plugins::PPluginScriptableObjectParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PPluginScriptableObjectParent())))))) {
                aActor->FatalError("Error deserializing variant TPPluginScriptableObjectChild of union Variant");
                return false;
            }
            // Sentinel = 'TPPluginScriptableObjectChild'
            if ((!((aMsg)->ReadSentinel(aIter, 2835680088)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPPluginScriptableObjectChild of union Variant");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
