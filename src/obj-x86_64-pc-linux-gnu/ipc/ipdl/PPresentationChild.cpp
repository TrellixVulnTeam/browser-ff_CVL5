//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PPresentationChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/PresentationChild.h"
#include "nsIPrincipal.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/PPresentationRequestChild.h"
#include "mozilla/dom/PPresentationBuilderChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PPresentationChild::RecvPPresentationBuilderConstructor(
        PPresentationBuilderChild* actor,
        const nsString& aSessionId,
        const uint8_t& aRole) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PPresentationChild::PPresentationChild() :
    mozilla::ipc::IProtocol(PPresentationMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PPresentationChild);
}

PPresentationChild::~PPresentationChild()
{
    MOZ_COUNT_DTOR(PPresentationChild);
}

auto PPresentationChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PPresentationChild::ManagedPPresentationBuilderChild(nsTArray<PPresentationBuilderChild*>& aArr) const -> void
{
    mManagedPPresentationBuilderChild.ToArray(aArr);
}

auto PPresentationChild::ManagedPPresentationBuilderChild() const -> const ManagedContainer<PPresentationBuilderChild>&
{
    return mManagedPPresentationBuilderChild;
}

auto PPresentationChild::ManagedPPresentationRequestChild(nsTArray<PPresentationRequestChild*>& aArr) const -> void
{
    mManagedPPresentationRequestChild.ToArray(aArr);
}

auto PPresentationChild::ManagedPPresentationRequestChild() const -> const ManagedContainer<PPresentationRequestChild>&
{
    return mManagedPPresentationRequestChild;
}

auto PPresentationChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPPresentationBuilderChild.Count();
    total += mManagedPPresentationRequestChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPPresentationBuilderChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPresentationRequestChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PPresentationChild::OpenPPresentationBuilderEndpoint(PPresentationBuilderChild* aActor) -> ManagedEndpoint<PPresentationBuilderParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationBuilderChild actor");
        return ManagedEndpoint<PPresentationBuilderParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPresentationBuilderChild.PutEntry(aActor);

    return ManagedEndpoint<PPresentationBuilderParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPresentationChild::BindPPresentationBuilderEndpoint(
        ManagedEndpoint<PPresentationBuilderChild> aEndpoint,
        PPresentationBuilderChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationBuilderChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPresentationBuilderChild.PutEntry(aActor);

    return true;
}

auto PPresentationChild::OpenPPresentationRequestEndpoint(PPresentationRequestChild* aActor) -> ManagedEndpoint<PPresentationRequestParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationRequestChild actor");
        return ManagedEndpoint<PPresentationRequestParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPresentationRequestChild.PutEntry(aActor);

    return ManagedEndpoint<PPresentationRequestParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PPresentationChild::BindPPresentationRequestEndpoint(
        ManagedEndpoint<PPresentationRequestChild> aEndpoint,
        PPresentationRequestChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPresentationRequestChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPresentationRequestChild.PutEntry(aActor);

    return true;
}

auto PPresentationChild::Send__delete__(PPresentationChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PPresentation::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PPresentationMsgStart, actor);
    return sendok__;
}

auto PPresentationChild::SendRegisterAvailabilityHandler(const nsTArray<nsString>& aAvailabilityUrls) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_RegisterAvailabilityHandler(Id());

    WriteIPDLParam(msg__, this, aAvailabilityUrls);
    // Sentinel = 'aAvailabilityUrls'
    (msg__)->WriteSentinel(1009256163);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_RegisterAvailabilityHandler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationChild::SendUnregisterAvailabilityHandler(const nsTArray<nsString>& aAvailabilityUrls) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_UnregisterAvailabilityHandler(Id());

    WriteIPDLParam(msg__, this, aAvailabilityUrls);
    // Sentinel = 'aAvailabilityUrls'
    (msg__)->WriteSentinel(1009256163);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_UnregisterAvailabilityHandler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationChild::SendRegisterSessionHandler(
        const nsString& aSessionId,
        const uint8_t& aRole) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_RegisterSessionHandler(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aRole);
    // Sentinel = 'aRole'
    (msg__)->WriteSentinel(96207348);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_RegisterSessionHandler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationChild::SendUnregisterSessionHandler(
        const nsString& aSessionId,
        const uint8_t& aRole) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_UnregisterSessionHandler(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aRole);
    // Sentinel = 'aRole'
    (msg__)->WriteSentinel(96207348);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_UnregisterSessionHandler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationChild::SendRegisterRespondingHandler(const uint64_t& aWindowId) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_RegisterRespondingHandler(Id());

    WriteIPDLParam(msg__, this, aWindowId);
    // Sentinel = 'aWindowId'
    (msg__)->WriteSentinel(296223623);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_RegisterRespondingHandler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationChild::SendUnregisterRespondingHandler(const uint64_t& aWindowId) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_UnregisterRespondingHandler(Id());

    WriteIPDLParam(msg__, this, aWindowId);
    // Sentinel = 'aWindowId'
    (msg__)->WriteSentinel(296223623);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_UnregisterRespondingHandler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationChild::SendPPresentationRequestConstructor(const PresentationIPCRequest& aRequest) -> PPresentationRequestChild*
{
    PPresentationRequestChild* actor = (static_cast<PresentationChild*>(this))->AllocPPresentationRequestChild(aRequest);
    return SendPPresentationRequestConstructor(actor, aRequest);
}

auto PPresentationChild::SendPPresentationRequestConstructor(
        PPresentationRequestChild* actor,
        const PresentationIPCRequest& aRequest) -> PPresentationRequestChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPresentationRequestChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPresentationRequestChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PPresentation::Msg_PPresentationRequestConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aRequest);
    // Sentinel = 'aRequest'
    (msg__)->WriteSentinel(238945099);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_PPresentationRequestConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPresentationRequestChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPresentationRequestMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PPresentationChild::SendNotifyReceiverReady(
        const nsString& aSessionId,
        const uint64_t& aWindowId,
        const bool& aIsLoading) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_NotifyReceiverReady(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aWindowId);
    // Sentinel = 'aWindowId'
    (msg__)->WriteSentinel(296223623);
    WriteIPDLParam(msg__, this, aIsLoading);
    // Sentinel = 'aIsLoading'
    (msg__)->WriteSentinel(345899996);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyReceiverReady", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationChild::SendNotifyTransportClosed(
        const nsString& aSessionId,
        const uint8_t& aRole,
        const nsresult& aReason) -> bool
{
    IPC::Message* msg__ = PPresentation::Msg_NotifyTransportClosed(Id());

    WriteIPDLParam(msg__, this, aSessionId);
    // Sentinel = 'aSessionId'
    (msg__)->WriteSentinel(365364211);
    WriteIPDLParam(msg__, this, aRole);
    // Sentinel = 'aRole'
    (msg__)->WriteSentinel(96207348);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPresentationChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyTransportClosed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPresentationChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPresentationBuilderMsgStart:
{
            PPresentationBuilderChild* actor = static_cast<PPresentationBuilderChild*>(aListener);
            auto& container = mManagedPPresentationBuilderChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPresentationRequestMsgStart:
{
            PPresentationRequestChild* actor = static_cast<PPresentationRequestChild*>(aListener);
            auto& container = mManagedPPresentationRequestChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PPresentationChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PPresentationBuilderMsgStart:
        static_cast<PresentationChild*>(this)->DeallocPPresentationBuilderChild(static_cast<PPresentationBuilderChild*>(aListener));
        return;
    case PPresentationRequestMsgStart:
        static_cast<PresentationChild*>(this)->DeallocPPresentationRequestChild(static_cast<PPresentationRequestChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PPresentationChild::OnMessageReceived(const Message& msg__) -> PPresentationChild::Result
{
    switch (msg__.type()) {
    case PPresentation::Msg_NotifyAvailableChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyAvailableChange", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsString> aAvailabilityUrls{};
            bool aAvailable{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAvailabilityUrls)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aAvailabilityUrls'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1009256163)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAvailable)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aAvailable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 351077347)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationChild*>(this))->RecvNotifyAvailableChange(std::move(aAvailabilityUrls), std::move(aAvailable))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_NotifySessionStateChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_NotifySessionStateChange", OTHER);

            PickleIterator iter__{msg__};
            nsString aSessionId{};
            uint16_t aState{};
            nsresult aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationChild*>(this))->RecvNotifySessionStateChange(std::move(aSessionId), std::move(aState), std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_NotifyMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString aSessionId{};
            nsCString aData{};
            bool aIsBinary{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsBinary)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsBinary'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 279970691)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationChild*>(this))->RecvNotifyMessage(std::move(aSessionId), std::move(aData), std::move(aIsBinary))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_NotifySessionConnect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_NotifySessionConnect", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aWindowId{};
            nsString aSessionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWindowId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWindowId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 296223623)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationChild*>(this))->RecvNotifySessionConnect(std::move(aWindowId), std::move(aSessionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_NotifyCloseSessionTransport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_NotifyCloseSessionTransport", OTHER);

            PickleIterator iter__{msg__};
            nsString aSessionId{};
            uint8_t aRole{};
            nsresult aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRole)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRole'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 96207348)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PresentationChild*>(this))->RecvNotifyCloseSessionTransport(std::move(aSessionId), std::move(aRole), std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Msg_PPresentationBuilderConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPresentationChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPresentationChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPresentation::Msg_PPresentationBuilderConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsString aSessionId{};
            uint8_t aRole{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSessionId)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aSessionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 365364211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRole)))))) {
                FatalError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRole'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 96207348)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PPresentationBuilderChild* actor = (static_cast<PresentationChild*>(this))->AllocPPresentationBuilderChild(aSessionId, aRole);
            if (!actor) {
                NS_WARNING("Cannot bind null PPresentationBuilderChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPPresentationBuilderChild.PutEntry(actor);

            if ((!((static_cast<PresentationChild*>(this))->RecvPPresentationBuilderConstructor(std::move(actor), std::move(aSessionId), std::move(aRole))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPresentation::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PPresentation::Reply_PPresentationRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPresentationChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPresentationChild::Result
{
    return MsgNotKnown;
}

auto PPresentationChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPresentationChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PPresentationChild::ClearSubtree() -> void
{
    for (auto it = mManagedPPresentationBuilderChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPresentationBuilderChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPresentationBuilderChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPresentationBuilderChild.Clear();

    for (auto it = mManagedPPresentationRequestChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPresentationRequestChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPresentationRequestChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPresentationRequestChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PPresentationChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PPresentationChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPresentation", PPresentationMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PPresentationChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
