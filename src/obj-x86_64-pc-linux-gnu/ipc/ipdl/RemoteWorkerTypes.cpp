//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/ClientIPCUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/dom/RemoteWorkerTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).descriptor());
    // Sentinel = 'descriptor'
    (aMsg)->WriteSentinel(384894016);
    WriteIPDLParam(aMsg, aActor, (aVar).registrationDescriptor());
    // Sentinel = 'registrationDescriptor'
    (aMsg)->WriteSentinel(1776093499);
    WriteIPDLParam(aMsg, aActor, (aVar).cacheName());
    // Sentinel = 'cacheName'
    (aMsg)->WriteSentinel(289670006);
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    (aMsg)->WriteBytes((&((aVar).loadFlags())), 4);
    // Sentinel = 'loadFlags'
    (aMsg)->WriteSentinel(297665422);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->descriptor())))))) {
        aActor->FatalError("Error deserializing 'descriptor' (IPCServiceWorkerDescriptor) member of 'ServiceWorkerData'");
        return false;
    }
    // Sentinel = 'descriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 384894016)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'descriptor' (IPCServiceWorkerDescriptor) member of 'ServiceWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->registrationDescriptor())))))) {
        aActor->FatalError("Error deserializing 'registrationDescriptor' (IPCServiceWorkerRegistrationDescriptor) member of 'ServiceWorkerData'");
        return false;
    }
    // Sentinel = 'registrationDescriptor'
    if ((!((aMsg)->ReadSentinel(aIter, 1776093499)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'registrationDescriptor' (IPCServiceWorkerRegistrationDescriptor) member of 'ServiceWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cacheName())))))) {
        aActor->FatalError("Error deserializing 'cacheName' (nsString) member of 'ServiceWorkerData'");
        return false;
    }
    // Sentinel = 'cacheName'
    if ((!((aMsg)->ReadSentinel(aIter, 289670006)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cacheName' (nsString) member of 'ServiceWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsString) member of 'ServiceWorkerData'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsString) member of 'ServiceWorkerData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->loadFlags())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'loadFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 297665422)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OptionalServiceWorkerData|
//
namespace mozilla {
namespace dom {
auto OptionalServiceWorkerData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tvoid_t:
        {
            (ptr_void_t())->~void_t__tdef();
            break;
        }
    case TServiceWorkerData:
        {
            (ptr_ServiceWorkerData())->~ServiceWorkerData__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OptionalServiceWorkerData::OptionalServiceWorkerData(const void_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(aOther);
    mType = Tvoid_t;
}

MOZ_IMPLICIT OptionalServiceWorkerData::OptionalServiceWorkerData(void_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move(aOther));
    mType = Tvoid_t;
}

MOZ_IMPLICIT OptionalServiceWorkerData::OptionalServiceWorkerData(const ServiceWorkerData& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerData()) ServiceWorkerData(aOther);
    mType = TServiceWorkerData;
}

MOZ_IMPLICIT OptionalServiceWorkerData::OptionalServiceWorkerData(ServiceWorkerData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerData()) ServiceWorkerData(std::move(aOther));
    mType = TServiceWorkerData;
}

MOZ_IMPLICIT OptionalServiceWorkerData::OptionalServiceWorkerData(const OptionalServiceWorkerData& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t((aOther).get_void_t());
            break;
        }
    case TServiceWorkerData:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerData()) ServiceWorkerData((aOther).get_ServiceWorkerData());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT OptionalServiceWorkerData::OptionalServiceWorkerData(OptionalServiceWorkerData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move((aOther).get_void_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerData:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerData()) ServiceWorkerData(std::move((aOther).get_ServiceWorkerData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

OptionalServiceWorkerData::~OptionalServiceWorkerData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OptionalServiceWorkerData::operator=(const void_t& aRhs) -> OptionalServiceWorkerData&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = aRhs;
    mType = Tvoid_t;
    return (*(this));
}

auto OptionalServiceWorkerData::operator=(void_t&& aRhs) -> OptionalServiceWorkerData&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = std::move(aRhs);
    mType = Tvoid_t;
    return (*(this));
}

auto OptionalServiceWorkerData::operator=(const ServiceWorkerData& aRhs) -> OptionalServiceWorkerData&
{
    if (MaybeDestroy(TServiceWorkerData)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerData()) ServiceWorkerData;
    }
    (*(ptr_ServiceWorkerData())) = aRhs;
    mType = TServiceWorkerData;
    return (*(this));
}

auto OptionalServiceWorkerData::operator=(ServiceWorkerData&& aRhs) -> OptionalServiceWorkerData&
{
    if (MaybeDestroy(TServiceWorkerData)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerData()) ServiceWorkerData;
    }
    (*(ptr_ServiceWorkerData())) = std::move(aRhs);
    mType = TServiceWorkerData;
    return (*(this));
}

auto OptionalServiceWorkerData::operator=(const OptionalServiceWorkerData& aRhs) -> OptionalServiceWorkerData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = (aRhs).get_void_t();
            break;
        }
    case TServiceWorkerData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerData()) ServiceWorkerData;
            }
            (*(ptr_ServiceWorkerData())) = (aRhs).get_ServiceWorkerData();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OptionalServiceWorkerData::operator=(OptionalServiceWorkerData&& aRhs) -> OptionalServiceWorkerData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = std::move((aRhs).get_void_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerData()) ServiceWorkerData;
            }
            (*(ptr_ServiceWorkerData())) = std::move((aRhs).get_ServiceWorkerData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::OptionalServiceWorkerData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::OptionalServiceWorkerData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'OptionalServiceWorkerData'
    (aMsg)->WriteSentinel(2204305932);

    switch (type) {
    case union__::Tvoid_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_void_t());
            // Sentinel = 'Tvoid_t'
            (aMsg)->WriteSentinel(189006554);
            return;
        }
    case union__::TServiceWorkerData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerData());
            // Sentinel = 'TServiceWorkerData'
            (aMsg)->WriteSentinel(1125975834);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::OptionalServiceWorkerData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::OptionalServiceWorkerData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union OptionalServiceWorkerData");
        return false;
    }
    // Sentinel = 'OptionalServiceWorkerData'
    if ((!((aMsg)->ReadSentinel(aIter, 2204305932)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union OptionalServiceWorkerData");
        return false;
    }

    switch (type) {
    case union__::Tvoid_t:
        {
            mozilla::void_t tmp = mozilla::void_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_void_t())))))) {
                aActor->FatalError("Error deserializing variant Tvoid_t of union OptionalServiceWorkerData");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((aMsg)->ReadSentinel(aIter, 189006554)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tvoid_t of union OptionalServiceWorkerData");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerData:
        {
            mozilla::dom::ServiceWorkerData tmp = mozilla::dom::ServiceWorkerData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerData())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerData of union OptionalServiceWorkerData");
                return false;
            }
            // Sentinel = 'TServiceWorkerData'
            if ((!((aMsg)->ReadSentinel(aIter, 1125975834)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerData of union OptionalServiceWorkerData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RemoteWorkerData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RemoteWorkerData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).originalScriptURL());
    // Sentinel = 'originalScriptURL'
    (aMsg)->WriteSentinel(1052706494);
    WriteIPDLParam(aMsg, aActor, (aVar).baseScriptURL());
    // Sentinel = 'baseScriptURL'
    (aMsg)->WriteSentinel(603718916);
    WriteIPDLParam(aMsg, aActor, (aVar).resolvedScriptURL());
    // Sentinel = 'resolvedScriptURL'
    (aMsg)->WriteSentinel(1066075853);
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).loadingPrincipalInfo());
    // Sentinel = 'loadingPrincipalInfo'
    (aMsg)->WriteSentinel(1425016845);
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).partitionedPrincipalInfo());
    // Sentinel = 'partitionedPrincipalInfo'
    (aMsg)->WriteSentinel(2089290194);
    WriteIPDLParam(aMsg, aActor, (aVar).useRegularPrincipal());
    // Sentinel = 'useRegularPrincipal'
    (aMsg)->WriteSentinel(1304299458);
    WriteIPDLParam(aMsg, aActor, (aVar).hasStorageAccessPermissionGranted());
    // Sentinel = 'hasStorageAccessPermissionGranted'
    (aMsg)->WriteSentinel(3776777554);
    WriteIPDLParam(aMsg, aActor, (aVar).cookieJarSettings());
    // Sentinel = 'cookieJarSettings'
    (aMsg)->WriteSentinel(1031800553);
    WriteIPDLParam(aMsg, aActor, (aVar).domain());
    // Sentinel = 'domain'
    (aMsg)->WriteSentinel(144704121);
    WriteIPDLParam(aMsg, aActor, (aVar).isSecureContext());
    // Sentinel = 'isSecureContext'
    (aMsg)->WriteSentinel(812123689);
    WriteIPDLParam(aMsg, aActor, (aVar).clientInfo());
    // Sentinel = 'clientInfo'
    (aMsg)->WriteSentinel(373294092);
    WriteIPDLParam(aMsg, aActor, (aVar).referrerInfo());
    // Sentinel = 'referrerInfo'
    (aMsg)->WriteSentinel(540214506);
    WriteIPDLParam(aMsg, aActor, (aVar).storageAccess());
    // Sentinel = 'storageAccess'
    (aMsg)->WriteSentinel(628753736);
    WriteIPDLParam(aMsg, aActor, (aVar).serviceWorkerData());
    // Sentinel = 'serviceWorkerData'
    (aMsg)->WriteSentinel(1062471398);
    WriteIPDLParam(aMsg, aActor, (aVar).agentClusterId());
    // Sentinel = 'agentClusterId'
    (aMsg)->WriteSentinel(710477215);
    WriteIPDLParam(aMsg, aActor, (aVar).remoteType());
    // Sentinel = 'remoteType'
    (aMsg)->WriteSentinel(388826159);
}

auto IPDLParamTraits<mozilla::dom::RemoteWorkerData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originalScriptURL())))))) {
        aActor->FatalError("Error deserializing 'originalScriptURL' (nsString) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'originalScriptURL'
    if ((!((aMsg)->ReadSentinel(aIter, 1052706494)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originalScriptURL' (nsString) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseScriptURL())))))) {
        aActor->FatalError("Error deserializing 'baseScriptURL' (URIParams) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'baseScriptURL'
    if ((!((aMsg)->ReadSentinel(aIter, 603718916)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseScriptURL' (URIParams) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->resolvedScriptURL())))))) {
        aActor->FatalError("Error deserializing 'resolvedScriptURL' (URIParams) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'resolvedScriptURL'
    if ((!((aMsg)->ReadSentinel(aIter, 1066075853)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'resolvedScriptURL' (URIParams) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadingPrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'loadingPrincipalInfo' (PrincipalInfo) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'loadingPrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1425016845)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadingPrincipalInfo' (PrincipalInfo) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->partitionedPrincipalInfo())))))) {
        aActor->FatalError("Error deserializing 'partitionedPrincipalInfo' (PrincipalInfo) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'partitionedPrincipalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 2089290194)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'partitionedPrincipalInfo' (PrincipalInfo) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->useRegularPrincipal())))))) {
        aActor->FatalError("Error deserializing 'useRegularPrincipal' (bool) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'useRegularPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 1304299458)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'useRegularPrincipal' (bool) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasStorageAccessPermissionGranted())))))) {
        aActor->FatalError("Error deserializing 'hasStorageAccessPermissionGranted' (bool) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'hasStorageAccessPermissionGranted'
    if ((!((aMsg)->ReadSentinel(aIter, 3776777554)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasStorageAccessPermissionGranted' (bool) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cookieJarSettings())))))) {
        aActor->FatalError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'cookieJarSettings'
    if ((!((aMsg)->ReadSentinel(aIter, 1031800553)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cookieJarSettings' (CookieJarSettingsArgs) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->domain())))))) {
        aActor->FatalError("Error deserializing 'domain' (nsCString) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'domain'
    if ((!((aMsg)->ReadSentinel(aIter, 144704121)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'domain' (nsCString) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isSecureContext())))))) {
        aActor->FatalError("Error deserializing 'isSecureContext' (bool) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'isSecureContext'
    if ((!((aMsg)->ReadSentinel(aIter, 812123689)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isSecureContext' (bool) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientInfo())))))) {
        aActor->FatalError("Error deserializing 'clientInfo' (IPCClientInfo?) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'clientInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 373294092)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientInfo' (IPCClientInfo?) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrerInfo())))))) {
        aActor->FatalError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'referrerInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 540214506)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->storageAccess())))))) {
        aActor->FatalError("Error deserializing 'storageAccess' (StorageAccess) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'storageAccess'
    if ((!((aMsg)->ReadSentinel(aIter, 628753736)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'storageAccess' (StorageAccess) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->serviceWorkerData())))))) {
        aActor->FatalError("Error deserializing 'serviceWorkerData' (OptionalServiceWorkerData) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'serviceWorkerData'
    if ((!((aMsg)->ReadSentinel(aIter, 1062471398)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'serviceWorkerData' (OptionalServiceWorkerData) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->agentClusterId())))))) {
        aActor->FatalError("Error deserializing 'agentClusterId' (nsID) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'agentClusterId'
    if ((!((aMsg)->ReadSentinel(aIter, 710477215)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'agentClusterId' (nsID) member of 'RemoteWorkerData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->remoteType())))))) {
        aActor->FatalError("Error deserializing 'remoteType' (nsCString) member of 'RemoteWorkerData'");
        return false;
    }
    // Sentinel = 'remoteType'
    if ((!((aMsg)->ReadSentinel(aIter, 388826159)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'remoteType' (nsCString) member of 'RemoteWorkerData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ErrorDataNote|
//
namespace mozilla {
namespace dom {
auto ErrorDataNote::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ErrorDataNote, columnNumber_) - offsetof(ErrorDataNote, lineNumber_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ErrorDataNote>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).message());
    // Sentinel = 'message'
    (aMsg)->WriteSentinel(197198566);
    WriteIPDLParam(aMsg, aActor, (aVar).filename());
    // Sentinel = 'filename'
    (aMsg)->WriteSentinel(246547266);
    (aMsg)->WriteBytes((&((aVar).lineNumber())), 8);
    // Sentinel = 'lineNumber | columnNumber'
    (aMsg)->WriteSentinel(2114587077);
}

auto IPDLParamTraits<mozilla::dom::ErrorDataNote>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->message())))))) {
        aActor->FatalError("Error deserializing 'message' (nsString) member of 'ErrorDataNote'");
        return false;
    }
    // Sentinel = 'message'
    if ((!((aMsg)->ReadSentinel(aIter, 197198566)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'message' (nsString) member of 'ErrorDataNote'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filename())))))) {
        aActor->FatalError("Error deserializing 'filename' (nsString) member of 'ErrorDataNote'");
        return false;
    }
    // Sentinel = 'filename'
    if ((!((aMsg)->ReadSentinel(aIter, 246547266)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filename' (nsString) member of 'ErrorDataNote'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->lineNumber())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'lineNumber | columnNumber'
    if ((!((aMsg)->ReadSentinel(aIter, 2114587077)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ErrorData|
//
namespace mozilla {
namespace dom {
auto ErrorData::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ErrorData, columnNumber_) - offsetof(ErrorData, lineNumber_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ErrorData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isWarning());
    // Sentinel = 'isWarning'
    (aMsg)->WriteSentinel(308872115);
    WriteIPDLParam(aMsg, aActor, (aVar).message());
    // Sentinel = 'message'
    (aMsg)->WriteSentinel(197198566);
    WriteIPDLParam(aMsg, aActor, (aVar).filename());
    // Sentinel = 'filename'
    (aMsg)->WriteSentinel(246547266);
    WriteIPDLParam(aMsg, aActor, (aVar).line());
    // Sentinel = 'line'
    (aMsg)->WriteSentinel(70255017);
    WriteIPDLParam(aMsg, aActor, (aVar).notes());
    // Sentinel = 'notes'
    (aMsg)->WriteSentinel(109052458);
    (aMsg)->WriteBytes((&((aVar).lineNumber())), 8);
    // Sentinel = 'lineNumber | columnNumber'
    (aMsg)->WriteSentinel(2114587077);
}

auto IPDLParamTraits<mozilla::dom::ErrorData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isWarning())))))) {
        aActor->FatalError("Error deserializing 'isWarning' (bool) member of 'ErrorData'");
        return false;
    }
    // Sentinel = 'isWarning'
    if ((!((aMsg)->ReadSentinel(aIter, 308872115)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isWarning' (bool) member of 'ErrorData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->message())))))) {
        aActor->FatalError("Error deserializing 'message' (nsString) member of 'ErrorData'");
        return false;
    }
    // Sentinel = 'message'
    if ((!((aMsg)->ReadSentinel(aIter, 197198566)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'message' (nsString) member of 'ErrorData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filename())))))) {
        aActor->FatalError("Error deserializing 'filename' (nsString) member of 'ErrorData'");
        return false;
    }
    // Sentinel = 'filename'
    if ((!((aMsg)->ReadSentinel(aIter, 246547266)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filename' (nsString) member of 'ErrorData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->line())))))) {
        aActor->FatalError("Error deserializing 'line' (nsString) member of 'ErrorData'");
        return false;
    }
    // Sentinel = 'line'
    if ((!((aMsg)->ReadSentinel(aIter, 70255017)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'line' (nsString) member of 'ErrorData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->notes())))))) {
        aActor->FatalError("Error deserializing 'notes' (ErrorDataNote[]) member of 'ErrorData'");
        return false;
    }
    // Sentinel = 'notes'
    if ((!((aMsg)->ReadSentinel(aIter, 109052458)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'notes' (ErrorDataNote[]) member of 'ErrorData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->lineNumber())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'lineNumber | columnNumber'
    if ((!((aMsg)->ReadSentinel(aIter, 2114587077)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ErrorValue|
//
namespace mozilla {
namespace dom {
auto ErrorValue::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TErrorData:
        {
            (ptr_ErrorData())->~ErrorData__tdef();
            break;
        }
    case Tvoid_t:
        {
            (ptr_void_t())->~void_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT ErrorValue::ErrorValue(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT ErrorValue::ErrorValue(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT ErrorValue::ErrorValue(const ErrorData& aOther)
{
    new (mozilla::KnownNotNull, ptr_ErrorData()) ErrorData(aOther);
    mType = TErrorData;
}

MOZ_IMPLICIT ErrorValue::ErrorValue(ErrorData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ErrorData()) ErrorData(std::move(aOther));
    mType = TErrorData;
}

MOZ_IMPLICIT ErrorValue::ErrorValue(const void_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(aOther);
    mType = Tvoid_t;
}

MOZ_IMPLICIT ErrorValue::ErrorValue(void_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move(aOther));
    mType = Tvoid_t;
}

MOZ_IMPLICIT ErrorValue::ErrorValue(const ErrorValue& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TErrorData:
        {
            new (mozilla::KnownNotNull, ptr_ErrorData()) ErrorData((aOther).get_ErrorData());
            break;
        }
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t((aOther).get_void_t());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT ErrorValue::ErrorValue(ErrorValue&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TErrorData:
        {
            new (mozilla::KnownNotNull, ptr_ErrorData()) ErrorData(std::move((aOther).get_ErrorData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move((aOther).get_void_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

ErrorValue::~ErrorValue()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto ErrorValue::operator=(const nsresult& aRhs) -> ErrorValue&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto ErrorValue::operator=(nsresult&& aRhs) -> ErrorValue&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto ErrorValue::operator=(const ErrorData& aRhs) -> ErrorValue&
{
    if (MaybeDestroy(TErrorData)) {
        new (mozilla::KnownNotNull, ptr_ErrorData()) ErrorData;
    }
    (*(ptr_ErrorData())) = aRhs;
    mType = TErrorData;
    return (*(this));
}

auto ErrorValue::operator=(ErrorData&& aRhs) -> ErrorValue&
{
    if (MaybeDestroy(TErrorData)) {
        new (mozilla::KnownNotNull, ptr_ErrorData()) ErrorData;
    }
    (*(ptr_ErrorData())) = std::move(aRhs);
    mType = TErrorData;
    return (*(this));
}

auto ErrorValue::operator=(const void_t& aRhs) -> ErrorValue&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = aRhs;
    mType = Tvoid_t;
    return (*(this));
}

auto ErrorValue::operator=(void_t&& aRhs) -> ErrorValue&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = std::move(aRhs);
    mType = Tvoid_t;
    return (*(this));
}

auto ErrorValue::operator=(const ErrorValue& aRhs) -> ErrorValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TErrorData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ErrorData()) ErrorData;
            }
            (*(ptr_ErrorData())) = (aRhs).get_ErrorData();
            break;
        }
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = (aRhs).get_void_t();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto ErrorValue::operator=(ErrorValue&& aRhs) -> ErrorValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TErrorData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ErrorData()) ErrorData;
            }
            (*(ptr_ErrorData())) = std::move((aRhs).get_ErrorData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = std::move((aRhs).get_void_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ErrorValue>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::ErrorValue union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'ErrorValue'
    (aMsg)->WriteSentinel(365429768);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TErrorData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ErrorData());
            // Sentinel = 'TErrorData'
            (aMsg)->WriteSentinel(347931609);
            return;
        }
    case union__::Tvoid_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_void_t());
            // Sentinel = 'Tvoid_t'
            (aMsg)->WriteSentinel(189006554);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::ErrorValue>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::ErrorValue union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union ErrorValue");
        return false;
    }
    // Sentinel = 'ErrorValue'
    if ((!((aMsg)->ReadSentinel(aIter, 365429768)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union ErrorValue");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union ErrorValue");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union ErrorValue");
                return false;
            }
            return true;
        }
    case union__::TErrorData:
        {
            mozilla::dom::ErrorData tmp = mozilla::dom::ErrorData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ErrorData())))))) {
                aActor->FatalError("Error deserializing variant TErrorData of union ErrorValue");
                return false;
            }
            // Sentinel = 'TErrorData'
            if ((!((aMsg)->ReadSentinel(aIter, 347931609)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TErrorData of union ErrorValue");
                return false;
            }
            return true;
        }
    case union__::Tvoid_t:
        {
            mozilla::void_t tmp = mozilla::void_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_void_t())))))) {
                aActor->FatalError("Error deserializing variant Tvoid_t of union ErrorValue");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((aMsg)->ReadSentinel(aIter, 189006554)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tvoid_t of union ErrorValue");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
