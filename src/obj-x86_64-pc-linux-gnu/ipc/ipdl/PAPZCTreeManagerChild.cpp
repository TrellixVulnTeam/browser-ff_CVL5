//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PAPZCTreeManagerChild.h"
#include "ipc/nsGUIEventIPC.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/APZCTreeManagerChild.h"
#include "mozilla/layers/KeyboardMap.h"
#include "mozilla/layers/LayersMessageUtils.h"

#include "mozilla/layers/PCompositorBridgeChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


MOZ_IMPLICIT PAPZCTreeManagerChild::PAPZCTreeManagerChild() :
    mozilla::ipc::IProtocol(PAPZCTreeManagerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PAPZCTreeManagerChild);
}

PAPZCTreeManagerChild::~PAPZCTreeManagerChild()
{
    MOZ_COUNT_DTOR(PAPZCTreeManagerChild);
}

auto PAPZCTreeManagerChild::Manager() const -> PCompositorBridgeChild*
{
    return static_cast<PCompositorBridgeChild*>(IProtocol::Manager());
}

auto PAPZCTreeManagerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PAPZCTreeManagerChild::SendZoomToRect(
        const ScrollableLayerGuid& aGuid,
        const CSSRect& aRect,
        const uint32_t& Flags) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_ZoomToRect(Id());

    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aRect);
    // Sentinel = 'aRect'
    (msg__)->WriteSentinel(94044656);
    WriteIPDLParam(msg__, this, Flags);
    // Sentinel = 'Flags'
    (msg__)->WriteSentinel(91685358);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_ZoomToRect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendContentReceivedInputBlock(
        const uint64_t& aInputBlockId,
        const bool& PreventDefault) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_ContentReceivedInputBlock(Id());

    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, PreventDefault);
    // Sentinel = 'PreventDefault'
    (msg__)->WriteSentinel(702350762);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_ContentReceivedInputBlock", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendSetTargetAPZC(
        const uint64_t& aInputBlockId,
        const nsTArray<ScrollableLayerGuid>& Targets) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_SetTargetAPZC(Id());

    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, Targets);
    // Sentinel = 'Targets'
    (msg__)->WriteSentinel(184091355);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetTargetAPZC", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendUpdateZoomConstraints(
        const ScrollableLayerGuid& aGuid,
        const MaybeZoomConstraints& aConstraints) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_UpdateZoomConstraints(Id());

    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aConstraints);
    // Sentinel = 'aConstraints'
    (msg__)->WriteSentinel(525010170);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_UpdateZoomConstraints", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendSetKeyboardMap(const KeyboardMap& aKeyboardMap) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_SetKeyboardMap(Id());

    WriteIPDLParam(msg__, this, aKeyboardMap);
    // Sentinel = 'aKeyboardMap'
    (msg__)->WriteSentinel(507905201);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetKeyboardMap", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendSetDPI(const float& aDpiValue) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_SetDPI(Id());

    WriteIPDLParam(msg__, this, aDpiValue);
    // Sentinel = 'aDpiValue'
    (msg__)->WriteSentinel(282919804);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetDPI", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendSetAllowedTouchBehavior(
        const uint64_t& aInputBlockId,
        const nsTArray<TouchBehaviorFlags>& aValues) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_SetAllowedTouchBehavior(Id());

    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aValues);
    // Sentinel = 'aValues'
    (msg__)->WriteSentinel(182649554);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetAllowedTouchBehavior", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendStartScrollbarDrag(
        const ScrollableLayerGuid& aGuid,
        const AsyncDragMetrics& aDragMetrics) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_StartScrollbarDrag(Id());

    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aDragMetrics);
    // Sentinel = 'aDragMetrics'
    (msg__)->WriteSentinel(496108727);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_StartScrollbarDrag", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendStartAutoscroll(
        const ScrollableLayerGuid& aGuid,
        const ScreenPoint& aAnchorLocation) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_StartAutoscroll(Id());

    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);
    WriteIPDLParam(msg__, this, aAnchorLocation);
    // Sentinel = 'aAnchorLocation'
    (msg__)->WriteSentinel(776799734);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_StartAutoscroll", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendStopAutoscroll(const ScrollableLayerGuid& aGuid) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_StopAutoscroll(Id());

    WriteIPDLParam(msg__, this, aGuid);
    // Sentinel = 'aGuid'
    (msg__)->WriteSentinel(94044651);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_StopAutoscroll", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::SendSetLongTapEnabled(const bool& aTapGestureEnabled) -> bool
{
    IPC::Message* msg__ = PAPZCTreeManager::Msg_SetLongTapEnabled(Id());

    WriteIPDLParam(msg__, this, aTapGestureEnabled);
    // Sentinel = 'aTapGestureEnabled'
    (msg__)->WriteSentinel(1116538641);




    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_SetLongTapEnabled", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PAPZCTreeManagerChild::Send__delete__(PAPZCTreeManagerChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PAPZCTreeManager::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PAPZCTreeManagerChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PAPZCTreeManagerMsgStart, actor);
    return sendok__;
}

auto PAPZCTreeManagerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZCTreeManagerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAPZCTreeManagerChild::OnMessageReceived(const Message& msg__) -> PAPZCTreeManagerChild::Result
{
    switch (msg__.type()) {
    case PAPZCTreeManager::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_HandleTap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_HandleTap", OTHER);

            PickleIterator iter__{msg__};
            GeckoContentController_TapType aType{};
            LayoutDevicePoint point{};
            Modifiers aModifiers{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'GeckoContentController_TapType'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GeckoContentController_TapType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(point)))))) {
                FatalError("Error deserializing 'LayoutDevicePoint'");
                return MsgValueError;
            }
            // Sentinel = 'point'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 108790315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDevicePoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifiers)))))) {
                FatalError("Error deserializing 'Modifiers'");
                return MsgValueError;
            }
            // Sentinel = 'aModifiers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358286340)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Modifiers'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerChild*>(this))->RecvHandleTap(std::move(aType), std::move(point), std::move(aModifiers), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_NotifyPinchGesture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_NotifyPinchGesture", OTHER);

            PickleIterator iter__{msg__};
            PinchGestureType aType{};
            ScrollableLayerGuid aGuid{};
            LayoutDevicePoint aFocusPoint{};
            LayoutDeviceCoord aSpanChange{};
            Modifiers aModifiers{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'PinchGestureType'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PinchGestureType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFocusPoint)))))) {
                FatalError("Error deserializing 'LayoutDevicePoint'");
                return MsgValueError;
            }
            // Sentinel = 'aFocusPoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430769260)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDevicePoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSpanChange)))))) {
                FatalError("Error deserializing 'LayoutDeviceCoord'");
                return MsgValueError;
            }
            // Sentinel = 'aSpanChange'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 420021306)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDeviceCoord'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifiers)))))) {
                FatalError("Error deserializing 'Modifiers'");
                return MsgValueError;
            }
            // Sentinel = 'aModifiers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358286340)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Modifiers'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerChild*>(this))->RecvNotifyPinchGesture(std::move(aType), std::move(aGuid), std::move(aFocusPoint), std::move(aSpanChange), std::move(aModifiers))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAPZCTreeManager::Msg_CancelAutoscroll__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAPZCTreeManagerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PAPZCTreeManagerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PAPZCTreeManager::Msg_CancelAutoscroll", OTHER);

            PickleIterator iter__{msg__};
            ViewID aScrollId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollId)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 293602174)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<APZCTreeManagerChild*>(this))->RecvCancelAutoscroll(std::move(aScrollId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PAPZCTreeManagerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZCTreeManagerChild::Result
{
    return MsgNotKnown;
}

auto PAPZCTreeManagerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAPZCTreeManagerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAPZCTreeManagerChild::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PAPZCTreeManagerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PAPZCTreeManagerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PAPZCTreeManager", PAPZCTreeManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PAPZCTreeManagerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
