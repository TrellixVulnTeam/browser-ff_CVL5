//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PWindowGlobalChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/FeaturePolicyUtils.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/WindowGlobalChild.h"
#include "mozilla/ipc/TransportSecurityInfoUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "nsDocShellLoadState.h"
#include "nsITransportSecurityInfo.h"

#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/dom/PInProcessChild.h"
#include "mozilla/dom/PBrowserBridgeChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PWindowGlobalChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PWindowGlobalChild::PWindowGlobalChild() :
    mozilla::ipc::IProtocol(PWindowGlobalMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PWindowGlobalChild);
}

PWindowGlobalChild::~PWindowGlobalChild()
{
    MOZ_COUNT_DTOR(PWindowGlobalChild);
}

auto PWindowGlobalChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWindowGlobalChild::SendRawMessage(
        const JSActorMessageMeta& aMetadata,
        const mozilla::Maybe<ClonedMessageData>& aData,
        const mozilla::Maybe<ClonedMessageData>& aStack) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_RawMessage(Id());

    WriteIPDLParam(msg__, this, aMetadata);
    // Sentinel = 'aMetadata'
    (msg__)->WriteSentinel(288752515);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);
    WriteIPDLParam(msg__, this, aStack);
    // Sentinel = 'aStack'
    (msg__)->WriteSentinel(135201368);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_RawMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendLoadURI(
        const MaybeDiscardedBrowsingContext& aTargetBC,
        nsDocShellLoadState* aLoadState,
        const bool& aSetNavigating) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_LoadURI(Id());

    WriteIPDLParam(msg__, this, aTargetBC);
    // Sentinel = 'aTargetBC'
    (msg__)->WriteSentinel(287245134);
    WriteIPDLParam(msg__, this, aLoadState);
    // Sentinel = 'aLoadState'
    (msg__)->WriteSentinel(349570019);
    WriteIPDLParam(msg__, this, aSetNavigating);
    // Sentinel = 'aSetNavigating'
    (msg__)->WriteSentinel(686556566);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_LoadURI", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendInternalLoad(nsDocShellLoadState* aLoadState) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_InternalLoad(Id());

    WriteIPDLParam(msg__, this, aLoadState);
    // Sentinel = 'aLoadState'
    (msg__)->WriteSentinel(349570019);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_InternalLoad", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateDocumentURI(nsIURI* aUri) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateDocumentURI(Id());

    WriteIPDLParam(msg__, this, aUri);
    // Sentinel = 'aUri'
    (msg__)->WriteSentinel(64225682);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentURI", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateDocumentPrincipal(nsIPrincipal* aPrincipal) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateDocumentPrincipal(Id());

    WriteIPDLParam(msg__, this, aPrincipal);
    // Sentinel = 'aPrincipal'
    (msg__)->WriteSentinel(364381188);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentPrincipal", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateDocumentHasLoaded(const bool& aDocumentHasLoaded) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateDocumentHasLoaded(Id());

    WriteIPDLParam(msg__, this, aDocumentHasLoaded);
    // Sentinel = 'aDocumentHasLoaded'
    (msg__)->WriteSentinel(1117259526);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentHasLoaded", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateDocumentHasUserInteracted(const bool& aDocumentHasUserInteracted) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateDocumentHasUserInteracted(Id());

    WriteIPDLParam(msg__, this, aDocumentHasUserInteracted);
    // Sentinel = 'aDocumentHasUserInteracted'
    (msg__)->WriteSentinel(2324695647);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentHasUserInteracted", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateSandboxFlags(const uint32_t& aSandboxFlags) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateSandboxFlags(Id());

    WriteIPDLParam(msg__, this, aSandboxFlags);
    // Sentinel = 'aSandboxFlags'
    (msg__)->WriteSentinel(590611742);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateSandboxFlags", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateDocumentCspSettings(
        const bool& aBlockAllMixedContent,
        const bool& aUpgradeInsecureRequests) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateDocumentCspSettings(Id());

    WriteIPDLParam(msg__, this, aBlockAllMixedContent);
    // Sentinel = 'aBlockAllMixedContent'
    (msg__)->WriteSentinel(1473906744);
    WriteIPDLParam(msg__, this, aUpgradeInsecureRequests);
    // Sentinel = 'aUpgradeInsecureRequests'
    (msg__)->WriteSentinel(2002848196);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentCspSettings", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateCookieJarSettings(const CookieJarSettingsArgs& cookieJarSettings) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateCookieJarSettings(Id());

    WriteIPDLParam(msg__, this, cookieJarSettings);
    // Sentinel = 'cookieJarSettings'
    (msg__)->WriteSentinel(1031800553);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateCookieJarSettings", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateDocumentTitle(const nsString& aTitle) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateDocumentTitle(Id());

    WriteIPDLParam(msg__, this, aTitle);
    // Sentinel = 'aTitle'
    (msg__)->WriteSentinel(137167460);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentTitle", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateDocumentSecurityInfo(nsITransportSecurityInfo* aSecurityInfo) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateDocumentSecurityInfo(Id());

    WriteIPDLParam(msg__, this, aSecurityInfo);
    // Sentinel = 'aSecurityInfo'
    (msg__)->WriteSentinel(610075974);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateDocumentSecurityInfo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendUpdateHttpsOnlyStatus(const uint32_t& aHttpsOnlyStatus) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_UpdateHttpsOnlyStatus(Id());

    WriteIPDLParam(msg__, this, aHttpsOnlyStatus);
    // Sentinel = 'aHttpsOnlyStatus'
    (msg__)->WriteSentinel(920323739);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_UpdateHttpsOnlyStatus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendSetIsInitialDocument(const bool& aIsInitialDocument) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_SetIsInitialDocument(Id());

    WriteIPDLParam(msg__, this, aIsInitialDocument);
    // Sentinel = 'aIsInitialDocument'
    (msg__)->WriteSentinel(1108150055);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_SetIsInitialDocument", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendShare(
        const IPCWebShareData& aData,
        mozilla::ipc::ResolveCallback<nsresult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWindowGlobal::Msg_Share(Id());

    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_Share", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWindowGlobalChild::SendShare(const IPCWebShareData& aData) -> RefPtr<SharePromise>
{
    RefPtr<MozPromise<nsresult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsresult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendShare(std::move(aData), [promise__](nsresult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWindowGlobalChild::SendGetContentBlockingEvents(
        mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWindowGlobal::Msg_GetContentBlockingEvents(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_GetContentBlockingEvents", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWindowGlobalChild::SendGetContentBlockingEvents() -> RefPtr<GetContentBlockingEventsPromise>
{
    RefPtr<MozPromise<uint32_t, ResponseRejectReason, true>::Private> promise__ = new MozPromise<uint32_t, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetContentBlockingEvents([promise__](uint32_t&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWindowGlobalChild::SendSetClientInfo(const IPCClientInfo& aClientInfo) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_SetClientInfo(Id());

    WriteIPDLParam(msg__, this, aClientInfo);
    // Sentinel = 'aClientInfo'
    (msg__)->WriteSentinel(422315085);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_SetClientInfo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendCheckPermitUnload(
        const bool& aHasInProcessBlocker,
        const XPCOMPermitUnloadAction& aAction,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PWindowGlobal::Msg_CheckPermitUnload(Id());

    WriteIPDLParam(msg__, this, aHasInProcessBlocker);
    // Sentinel = 'aHasInProcessBlocker'
    (msg__)->WriteSentinel(1345652694);
    WriteIPDLParam(msg__, this, aAction);
    // Sentinel = 'aAction'
    (msg__)->WriteSentinel(175768256);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_CheckPermitUnload", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PWindowGlobalChild::SendCheckPermitUnload(
        const bool& aHasInProcessBlocker,
        const XPCOMPermitUnloadAction& aAction) -> RefPtr<CheckPermitUnloadPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendCheckPermitUnload(std::move(aHasInProcessBlocker), std::move(aAction), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PWindowGlobalChild::SendExpectPageUseCounters(const MaybeDiscardedWindowContext& aTop) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_ExpectPageUseCounters(Id());

    WriteIPDLParam(msg__, this, aTop);
    // Sentinel = 'aTop'
    (msg__)->WriteSentinel(64094613);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_ExpectPageUseCounters", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendAccumulatePageUseCounters(const UseCounters& aUseCounters) -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_AccumulatePageUseCounters(Id());

    WriteIPDLParam(msg__, this, aUseCounters);
    // Sentinel = 'aUseCounters'
    (msg__)->WriteSentinel(514131170);




    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_AccumulatePageUseCounters", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::SendDestroy() -> bool
{
    IPC::Message* msg__ = PWindowGlobal::Msg_Destroy(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWindowGlobalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWindowGlobal::Msg_Destroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWindowGlobalChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWindowGlobalChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWindowGlobalChild::OnMessageReceived(const Message& msg__) -> PWindowGlobalChild::Result
{
    switch (msg__.type()) {
    case PWindowGlobal::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWindowGlobalChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWindowGlobal'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWindowGlobal'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWindowGlobal'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWindowGlobalMsgStart, actor);

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_MakeFrameLocal__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_MakeFrameLocal", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aFrameContext{};
            uint64_t aSwitchId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrameContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aFrameContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 585565490)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSwitchId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSwitchId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 297730945)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalChild*>(this))->RecvMakeFrameLocal(std::move(aFrameContext), std::move(aSwitchId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_MakeFrameRemote__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_MakeFrameRemote", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aFrameContext{};
            ManagedEndpoint<mozilla::dom::PBrowserBridgeChild> aEndpoint{};
            TabId aTabId{};
            LayersId aLayersId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrameContext)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aFrameContext'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 585565490)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                FatalError("Error deserializing 'ManagedEndpoint<mozilla::dom::PBrowserBridgeChild>'");
                return MsgValueError;
            }
            // Sentinel = 'aEndpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ManagedEndpoint<mozilla::dom::PBrowserBridgeChild>'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTabId)))))) {
                FatalError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            // Sentinel = 'aTabId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 126878246)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TabId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLayersId)))))) {
                FatalError("Error deserializing 'LayersId'");
                return MsgValueError;
            }
            // Sentinel = 'aLayersId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 291439487)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            MakeFrameRemoteResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWindowGlobalChild* self__ = static_cast<PWindowGlobalChild*>(proxy__->Get());

                IPC::Message* reply__ = PWindowGlobal::Reply_MakeFrameRemote(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'success'
                (reply__)->WriteSentinel(200082170);

                if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWindowGlobalChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<WindowGlobalChild*>(this))->RecvMakeFrameRemote(std::move(aFrameContext), std::move(aEndpoint), std::move(aTabId), std::move(aLayersId), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_DrawSnapshot__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_DrawSnapshot", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<IntRect> aRect{};
            float aScale{};
            nscolor aBackgroundColor{};
            uint32_t aFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRect)))))) {
                FatalError("Error deserializing 'IntRect?'");
                return MsgValueError;
            }
            // Sentinel = 'aRect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044656)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IntRect?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScale)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aScale'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 131531338)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBackgroundColor)))))) {
                FatalError("Error deserializing 'nscolor'");
                return MsgValueError;
            }
            // Sentinel = 'aBackgroundColor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 884999777)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nscolor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 129892943)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            DrawSnapshotResolver resolver = [proxy__, seqno__, id__](PaintFragment&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWindowGlobalChild* self__ = static_cast<PWindowGlobalChild*>(proxy__->Get());

                IPC::Message* reply__ = PWindowGlobal::Reply_DrawSnapshot(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, std::move(aParam));
                // Sentinel = 'retval'
                (reply__)->WriteSentinel(151716495);

                if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWindowGlobalChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<WindowGlobalChild*>(this))->RecvDrawSnapshot(std::move(aRect), std::move(aScale), std::move(aBackgroundColor), std::move(aFlags), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_GetSecurityInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_GetSecurityInfo", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetSecurityInfoResolver resolver = [proxy__, seqno__, id__](const mozilla::Maybe<nsCString>& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWindowGlobalChild* self__ = static_cast<PWindowGlobalChild*>(proxy__->Get());

                IPC::Message* reply__ = PWindowGlobal::Reply_GetSecurityInfo(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'serializedSecInfo'
                (reply__)->WriteSentinel(1050412756);

                if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWindowGlobalChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<WindowGlobalChild*>(this))->RecvGetSecurityInfo(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_DispatchSecurityPolicyViolation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_DispatchSecurityPolicyViolation", OTHER);

            PickleIterator iter__{msg__};
            nsString aViolationEventJSON{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aViolationEventJSON)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aViolationEventJSON'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1266878291)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalChild*>(this))->RecvDispatchSecurityPolicyViolation(std::move(aViolationEventJSON))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_SaveStorageAccessPermissionGranted__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_SaveStorageAccessPermissionGranted", OTHER);

            if ((!((static_cast<WindowGlobalChild*>(this))->RecvSaveStorageAccessPermissionGranted()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_AddBlockedFrameNodeByClassifier__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_AddBlockedFrameNodeByClassifier", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aNode{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNode)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aNode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94110184)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalChild*>(this))->RecvAddBlockedFrameNodeByClassifier(std::move(aNode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_ResetScalingZoom__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_ResetScalingZoom", OTHER);

            if ((!((static_cast<WindowGlobalChild*>(this))->RecvResetScalingZoom()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_SetContainerFeaturePolicy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_SetContainerFeaturePolicy", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<FeaturePolicy> aContainerFeaturePolicy{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContainerFeaturePolicy)))))) {
                FatalError("Error deserializing 'FeaturePolicy'");
                return MsgValueError;
            }
            // Sentinel = 'aContainerFeaturePolicy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1834158401)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FeaturePolicy'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalChild*>(this))->RecvSetContainerFeaturePolicy(aContainerFeaturePolicy)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Msg_RawMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_RawMessage", OTHER);

            PickleIterator iter__{msg__};
            JSActorMessageMeta aMetadata{};
            mozilla::Maybe<ClonedMessageData> aData{};
            mozilla::Maybe<ClonedMessageData> aStack{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMetadata)))))) {
                FatalError("Error deserializing 'JSActorMessageMeta'");
                return MsgValueError;
            }
            // Sentinel = 'aMetadata'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 288752515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'JSActorMessageMeta'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStack)))))) {
                FatalError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            // Sentinel = 'aStack'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135201368)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WindowGlobalChild*>(this))->RecvRawMessage(std::move(aMetadata), std::move(aData), std::move(aStack))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWindowGlobal::Reply_Share__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_Share", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsresult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsresult rv{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rv)))))) {
                    FatalError("Error deserializing 'nsresult'");
                    return MsgValueError;
                }
                // Sentinel = 'rv'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 22806761)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(rv));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PWindowGlobal::Reply_GetContentBlockingEvents__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_GetContentBlockingEvents", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<uint32_t> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                uint32_t events{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(events)))))) {
                    FatalError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'events'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 149619350)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(events));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PWindowGlobal::Reply_CheckPermitUnload__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWindowGlobalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWindowGlobalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWindowGlobal::Msg_CheckPermitUnload", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool permitUnload{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(permitUnload)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'permitUnload'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 547816693)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(permitUnload));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWindowGlobalChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWindowGlobalChild::Result
{
    return MsgNotKnown;
}

auto PWindowGlobalChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWindowGlobalChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWindowGlobalChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PWindowGlobalChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PWindowGlobalChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWindowGlobal", PWindowGlobalMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PWindowGlobalChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
