//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PSocketProcessBridgeParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/SocketProcessBridgeParent.h"

#include "mozilla/ipc/PBackgroundParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PSocketProcessBridgeParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PSocketProcessBridgeParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PSocketProcessBridgeParent::EnteredCxxStack() -> void
{
}

auto PSocketProcessBridgeParent::ExitedCxxStack() -> void
{
}

auto PSocketProcessBridgeParent::EnteredCall() -> void
{
}

auto PSocketProcessBridgeParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PSocketProcessBridgeParent::PSocketProcessBridgeParent() :
    mozilla::ipc::IToplevelProtocol("PSocketProcessBridgeParent", PSocketProcessBridgeMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PSocketProcessBridgeParent);
}

PSocketProcessBridgeParent::~PSocketProcessBridgeParent()
{
    MOZ_COUNT_DTOR(PSocketProcessBridgeParent);
}

auto PSocketProcessBridgeParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PSocketProcessBridgeParent::SendTest() -> bool
{
    IPC::Message* msg__ = PSocketProcessBridge::Msg_Test(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PSocketProcessBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSocketProcessBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSocketProcessBridge::Msg_Test", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSocketProcessBridgeParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PSocketProcessBridgeParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PSocketProcessBridgeParent::OnMessageReceived(const Message& msg__) -> PSocketProcessBridgeParent::Result
{
    switch (msg__.type()) {
    case PSocketProcessBridge::Msg_InitBackground__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSocketProcessBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSocketProcessBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSocketProcessBridge::Msg_InitBackground", OTHER);

            PickleIterator iter__{msg__};
            Endpoint<mozilla::ipc::PBackgroundParent> aEndpoint{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndpoint)))))) {
                FatalError("Error deserializing 'Endpoint<mozilla::ipc::PBackgroundParent>'");
                return MsgValueError;
            }
            // Sentinel = 'aEndpoint'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292225955)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Endpoint<mozilla::ipc::PBackgroundParent>'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<SocketProcessBridgeParent*>(this))->RecvInitBackground(std::move(aEndpoint))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSocketProcessBridge::Msg_Test__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSocketProcessBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSocketProcessBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSocketProcessBridge::Msg_Test", OTHER);

            if ((!((static_cast<SocketProcessBridgeParent*>(this))->RecvTest()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PSocketProcessBridgeParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PSocketProcessBridgeParent::Result
{
    return MsgNotKnown;
}

auto PSocketProcessBridgeParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PSocketProcessBridgeParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PSocketProcessBridgeParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PSocketProcessBridgeParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PSocketProcessBridgeParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PSocketProcessBridgeParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PSocketProcessBridgeParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PSocketProcessBridge", PSocketProcessBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PSocketProcessBridgeParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
