//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundSessionStorageManagerParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/dom/PBackgroundSessionStorageCacheParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBackgroundSessionStorageManagerParent::RecvPBackgroundSessionStorageCacheConstructor(
        PBackgroundSessionStorageCacheParent* actor,
        const nsCString& aOriginAttrs,
        const nsCString& aOriginKey) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundSessionStorageManagerParent::PBackgroundSessionStorageManagerParent() :
    mozilla::ipc::IProtocol(PBackgroundSessionStorageManagerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PBackgroundSessionStorageManagerParent);
}

PBackgroundSessionStorageManagerParent::~PBackgroundSessionStorageManagerParent()
{
    MOZ_COUNT_DTOR(PBackgroundSessionStorageManagerParent);
}

auto PBackgroundSessionStorageManagerParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PBackgroundSessionStorageManagerParent::ManagedPBackgroundSessionStorageCacheParent(nsTArray<PBackgroundSessionStorageCacheParent*>& aArr) const -> void
{
    mManagedPBackgroundSessionStorageCacheParent.ToArray(aArr);
}

auto PBackgroundSessionStorageManagerParent::ManagedPBackgroundSessionStorageCacheParent() const -> const ManagedContainer<PBackgroundSessionStorageCacheParent>&
{
    return mManagedPBackgroundSessionStorageCacheParent;
}

auto PBackgroundSessionStorageManagerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundSessionStorageCacheParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundSessionStorageCacheParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundSessionStorageManagerParent::OpenPBackgroundSessionStorageCacheEndpoint(PBackgroundSessionStorageCacheParent* aActor) -> ManagedEndpoint<PBackgroundSessionStorageCacheChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundSessionStorageCacheParent actor");
        return ManagedEndpoint<PBackgroundSessionStorageCacheChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundSessionStorageCacheParent.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundSessionStorageCacheChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundSessionStorageManagerParent::BindPBackgroundSessionStorageCacheEndpoint(
        ManagedEndpoint<PBackgroundSessionStorageCacheParent> aEndpoint,
        PBackgroundSessionStorageCacheParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundSessionStorageCacheParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundSessionStorageCacheParent.PutEntry(aActor);

    return true;
}

auto PBackgroundSessionStorageManagerParent::Send__delete__(PBackgroundSessionStorageManagerParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PBackgroundSessionStorageManager::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundSessionStorageManagerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundSessionStorageManagerParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundSessionStorageManager::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PBackgroundSessionStorageManagerMsgStart, actor);
    return sendok__;
}

auto PBackgroundSessionStorageManagerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundSessionStorageCacheMsgStart:
{
            PBackgroundSessionStorageCacheParent* actor = static_cast<PBackgroundSessionStorageCacheParent*>(aListener);
            auto& container = mManagedPBackgroundSessionStorageCacheParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundSessionStorageManagerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundSessionStorageManagerParent::OnMessageReceived(const Message& msg__) -> PBackgroundSessionStorageManagerParent::Result
{
    switch (msg__.type()) {
    case PBackgroundSessionStorageManager::Msg_PBackgroundSessionStorageCacheConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundSessionStorageManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundSessionStorageManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundSessionStorageManager::Msg_PBackgroundSessionStorageCacheConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsCString aOriginAttrs{};
            nsCString aOriginKey{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOriginAttrs)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aOriginAttrs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 513082584)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOriginKey)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aOriginKey'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358417395)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PBackgroundSessionStorageCacheParent> actor = (this)->AllocPBackgroundSessionStorageCacheParent(aOriginAttrs, aOriginKey);
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundSessionStorageCacheParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundSessionStorageCacheParent.PutEntry(actor);

            if ((!((this)->RecvPBackgroundSessionStorageCacheConstructor(actor, std::move(aOriginAttrs), std::move(aOriginKey))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundSessionStorageManager::Msg_DeleteMe__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundSessionStorageManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundSessionStorageManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundSessionStorageManager::Msg_DeleteMe", OTHER);

            if ((!((this)->RecvDeleteMe()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundSessionStorageManager::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundSessionStorageManagerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundSessionStorageManagerParent::Result
{
    return MsgNotKnown;
}

auto PBackgroundSessionStorageManagerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundSessionStorageManagerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundSessionStorageManagerParent::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundSessionStorageCacheParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundSessionStorageCacheParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundSessionStorageCacheParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundSessionStorageCacheParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundSessionStorageManagerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundSessionStorageManagerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundSessionStorageManager", PBackgroundSessionStorageManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundSessionStorageManagerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
