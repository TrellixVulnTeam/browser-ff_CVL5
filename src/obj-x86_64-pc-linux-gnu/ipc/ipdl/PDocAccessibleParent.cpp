//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/a11y/PDocAccessibleParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"

#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/a11y/PDocAccessiblePlatformExtParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace a11y {


auto PDocAccessibleParent::RecvPDocAccessiblePlatformExtConstructor(PDocAccessiblePlatformExtParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PDocAccessibleParent::PDocAccessibleParent() :
    mozilla::ipc::IProtocol(PDocAccessibleMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PDocAccessibleParent);
}

PDocAccessibleParent::~PDocAccessibleParent()
{
    MOZ_COUNT_DTOR(PDocAccessibleParent);
}

auto PDocAccessibleParent::Manager() const -> PBrowserParent*
{
    return static_cast<PBrowserParent*>(IProtocol::Manager());
}

auto PDocAccessibleParent::ManagedPDocAccessiblePlatformExtParent(nsTArray<PDocAccessiblePlatformExtParent*>& aArr) const -> void
{
    mManagedPDocAccessiblePlatformExtParent.ToArray(aArr);
}

auto PDocAccessibleParent::ManagedPDocAccessiblePlatformExtParent() const -> const ManagedContainer<PDocAccessiblePlatformExtParent>&
{
    return mManagedPDocAccessiblePlatformExtParent;
}

auto PDocAccessibleParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPDocAccessiblePlatformExtParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPDocAccessiblePlatformExtParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PDocAccessibleParent::OpenPDocAccessiblePlatformExtEndpoint(PDocAccessiblePlatformExtParent* aActor) -> ManagedEndpoint<PDocAccessiblePlatformExtChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PDocAccessiblePlatformExtParent actor");
        return ManagedEndpoint<PDocAccessiblePlatformExtChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPDocAccessiblePlatformExtParent.PutEntry(aActor);

    return ManagedEndpoint<PDocAccessiblePlatformExtChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PDocAccessibleParent::BindPDocAccessiblePlatformExtEndpoint(
        ManagedEndpoint<PDocAccessiblePlatformExtParent> aEndpoint,
        PDocAccessiblePlatformExtParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PDocAccessiblePlatformExtParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPDocAccessiblePlatformExtParent.PutEntry(aActor);

    return true;
}

auto PDocAccessibleParent::SendConstructedInParentProcess() -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ConstructedInParentProcess(Id());





    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ConstructedInParentProcess", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::Send__delete__(PDocAccessibleParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PDocAccessible::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PDocAccessibleMsgStart, actor);
    return sendok__;
}

auto PDocAccessibleParent::SendRestoreFocus() -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_RestoreFocus(Id());





    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_RestoreFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendState(
        const uint64_t& aID,
        uint64_t* states) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_State(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_State", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_State", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, states)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'states'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 152634005)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendNativeState(
        const uint64_t& aID,
        uint64_t* states) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_NativeState(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_NativeState", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_NativeState", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, states)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'states'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 152634005)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendName(
        const uint64_t& aID,
        nsString* name,
        uint32_t* flag) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Name(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Name", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Name", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, name)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'name'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, flag)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'flag'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 67699099)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendValue(
        const uint64_t& aID,
        nsString* value) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Value(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Value", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Value", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, value)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'value'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendHelp(
        const uint64_t& aID,
        nsString* help) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Help(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Help", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Help", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, help)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'help'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 68878762)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendDescription(
        const uint64_t& aID,
        nsString* desc) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Description(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Description", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Description", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, desc)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'desc'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 67895712)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAttributes(
        const uint64_t& aID,
        nsTArray<Attribute>* attributes) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Attributes(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Attributes", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Attributes", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, attributes)))) {
        FatalError("Error deserializing 'Attribute[]'");
        return false;
    }
    // Sentinel = 'attributes'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 393413704)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Attribute[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendRelationByType(
        const uint64_t& aID,
        const uint32_t& aRelationType,
        nsTArray<uint64_t>* targets) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_RelationByType(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRelationType);
    // Sentinel = 'aRelationType'
    (msg__)->WriteSentinel(604570946);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_RelationByType", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_RelationByType", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, targets)))) {
        FatalError("Error deserializing 'uint64_t[]'");
        return false;
    }
    // Sentinel = 'targets'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 198771451)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendRelations(
        const uint64_t& aID,
        nsTArray<RelationTargets>* relations) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Relations(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Relations", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Relations", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, relations)))) {
        FatalError("Error deserializing 'RelationTargets[]'");
        return false;
    }
    // Sentinel = 'relations'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 317785042)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'RelationTargets[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendIsSearchbox(
        const uint64_t& aID,
        bool* retval) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_IsSearchbox(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_IsSearchbox", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_IsSearchbox", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, retval)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'retval'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 151716495)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendLandmarkRole(
        const uint64_t& aID,
        nsString* landmark) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_LandmarkRole(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_LandmarkRole", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_LandmarkRole", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, landmark)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'landmark'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 247268171)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendARIARoleAtom(
        const uint64_t& aID,
        nsString* ariaRole) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ARIARoleAtom(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ARIARoleAtom", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ARIARoleAtom", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, ariaRole)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'ariaRole'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 240845616)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendGroupPosition(
        const uint64_t& aID,
        int32_t* groupLevel,
        int32_t* similarItemsInGroup,
        int32_t* positionInGroup) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_GroupPosition(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_GroupPosition", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_GroupPosition", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, groupLevel)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'groupLevel'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 386204710)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, similarItemsInGroup)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'similarItemsInGroup'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 1298335672)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, positionInGroup)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'positionInGroup'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 843449914)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendScrollTo(
        const uint64_t& aID,
        const uint32_t& aScrollType) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ScrollTo(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aScrollType);
    // Sentinel = 'aScrollType'
    (msg__)->WriteSentinel(439092339);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollTo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendScrollToPoint(
        const uint64_t& aID,
        const uint32_t& aScrollType,
        const int32_t& aX,
        const int32_t& aY) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ScrollToPoint(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aScrollType);
    // Sentinel = 'aScrollType'
    (msg__)->WriteSentinel(439092339);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollToPoint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendAnnounce(
        const uint64_t& aID,
        const nsString& aAnnouncement,
        const uint16_t& aPriority) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Announce(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aAnnouncement);
    // Sentinel = 'aAnnouncement'
    (msg__)->WriteSentinel(605750605);
    WriteIPDLParam(msg__, this, aPriority);
    // Sentinel = 'aPriority'
    (msg__)->WriteSentinel(303367108);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Announce", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendCaretLineNumber(
        const uint64_t& aID,
        int32_t* aLineNumber) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CaretLineNumber(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CaretLineNumber", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_CaretLineNumber", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aLineNumber)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aLineNumber'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 423953491)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendCaretOffset(
        const uint64_t& aID,
        int32_t* aOffset) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CaretOffset(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CaretOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_CaretOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 179634889)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendSetCaretOffset(
        const uint64_t& aID,
        const int32_t& aOffset) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SetCaretOffset(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SetCaretOffset", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendCharacterCount(
        const uint64_t& aID,
        int32_t* aCount) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CharacterCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CharacterCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_CharacterCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCount)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aCount'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 134611563)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendSelectionCount(
        const uint64_t& aID,
        int32_t* aCount) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SelectionCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectionCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_SelectionCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCount)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aCount'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 134611563)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTextSubstring(
        const uint64_t& aID,
        const int32_t& aStartOffset,
        const int32_t& aEndOffset,
        nsString* aText,
        bool* aValid) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TextSubstring(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStartOffset);
    // Sentinel = 'aStartOffset'
    (msg__)->WriteSentinel(517801175);
    WriteIPDLParam(msg__, this, aEndOffset);
    // Sentinel = 'aEndOffset'
    (msg__)->WriteSentinel(343147488);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextSubstring", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TextSubstring", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aText)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aText'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 97321479)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValid)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aValid'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 133694034)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendGetTextAfterOffset(
        const uint64_t& aID,
        const int32_t& aOffset,
        const int32_t& aBoundaryType,
        nsString* aText,
        int32_t* aStartOffset,
        int32_t* aEndOffset) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_GetTextAfterOffset(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);
    WriteIPDLParam(msg__, this, aBoundaryType);
    // Sentinel = 'aBoundaryType'
    (msg__)->WriteSentinel(605488456);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetTextAfterOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_GetTextAfterOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aText)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aText'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 97321479)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aStartOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aStartOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 517801175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aEndOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aEndOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 343147488)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendGetTextAtOffset(
        const uint64_t& aID,
        const int32_t& aOffset,
        const int32_t& aBoundaryType,
        nsString* aText,
        int32_t* aStartOffset,
        int32_t* aEndOffset) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_GetTextAtOffset(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);
    WriteIPDLParam(msg__, this, aBoundaryType);
    // Sentinel = 'aBoundaryType'
    (msg__)->WriteSentinel(605488456);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetTextAtOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_GetTextAtOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aText)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aText'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 97321479)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aStartOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aStartOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 517801175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aEndOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aEndOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 343147488)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendGetTextBeforeOffset(
        const uint64_t& aID,
        const int32_t& aOffset,
        const int32_t& aBoundaryType,
        nsString* aText,
        int32_t* aStartOffset,
        int32_t* aEndOffset) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_GetTextBeforeOffset(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);
    WriteIPDLParam(msg__, this, aBoundaryType);
    // Sentinel = 'aBoundaryType'
    (msg__)->WriteSentinel(605488456);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetTextBeforeOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_GetTextBeforeOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aText)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aText'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 97321479)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aStartOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aStartOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 517801175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aEndOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aEndOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 343147488)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendCharAt(
        const uint64_t& aID,
        const int32_t& aOffset,
        uint16_t* aChar) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CharAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CharAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_CharAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aChar)))) {
        FatalError("Error deserializing 'uint16_t'");
        return false;
    }
    // Sentinel = 'aChar'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 90309088)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTextAttributes(
        const uint64_t& aID,
        const bool& aIncludeDefAttrs,
        const int32_t& aOffset,
        nsTArray<Attribute>* aAttributes,
        int32_t* aStartOffset,
        int32_t* aEndOffset) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TextAttributes(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIncludeDefAttrs);
    // Sentinel = 'aIncludeDefAttrs'
    (msg__)->WriteSentinel(873268803);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextAttributes", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TextAttributes", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aAttributes)))) {
        FatalError("Error deserializing 'Attribute[]'");
        return false;
    }
    // Sentinel = 'aAttributes'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 442434697)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Attribute[]'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aStartOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aStartOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 517801175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aEndOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aEndOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 343147488)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendDefaultTextAttributes(
        const uint64_t& aID,
        nsTArray<Attribute>* aAttributes) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_DefaultTextAttributes(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_DefaultTextAttributes", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_DefaultTextAttributes", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aAttributes)))) {
        FatalError("Error deserializing 'Attribute[]'");
        return false;
    }
    // Sentinel = 'aAttributes'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 442434697)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Attribute[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTextBounds(
        const uint64_t& aID,
        const int32_t& aStartOffset,
        const int32_t& aEndOffset,
        const uint32_t& aCoordType,
        nsIntRect* aRetVal) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TextBounds(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStartOffset);
    // Sentinel = 'aStartOffset'
    (msg__)->WriteSentinel(517801175);
    WriteIPDLParam(msg__, this, aEndOffset);
    // Sentinel = 'aEndOffset'
    (msg__)->WriteSentinel(343147488);
    WriteIPDLParam(msg__, this, aCoordType);
    // Sentinel = 'aCoordType'
    (msg__)->WriteSentinel(357565435);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextBounds", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TextBounds", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'nsIntRect'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsIntRect'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendCharBounds(
        const uint64_t& aID,
        const int32_t& aOffset,
        const uint32_t& aCoordType,
        nsIntRect* aRetVal) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CharBounds(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);
    WriteIPDLParam(msg__, this, aCoordType);
    // Sentinel = 'aCoordType'
    (msg__)->WriteSentinel(357565435);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CharBounds", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_CharBounds", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'nsIntRect'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsIntRect'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendOffsetAtPoint(
        const uint64_t& aID,
        const int32_t& aX,
        const int32_t& aY,
        const uint32_t& aCoordType,
        int32_t* aRetVal) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_OffsetAtPoint(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);
    WriteIPDLParam(msg__, this, aCoordType);
    // Sentinel = 'aCoordType'
    (msg__)->WriteSentinel(357565435);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_OffsetAtPoint", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_OffsetAtPoint", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendSelectionBoundsAt(
        const uint64_t& aID,
        const int32_t& aSelectionNum,
        bool* aSucceeded,
        nsString* aData,
        int32_t* aStartOffset,
        int32_t* aEndOffset) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SelectionBoundsAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aSelectionNum);
    // Sentinel = 'aSelectionNum'
    (msg__)->WriteSentinel(601359672);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectionBoundsAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_SelectionBoundsAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSucceeded)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSucceeded'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 357893095)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aData)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aData'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 90571228)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aStartOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aStartOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 517801175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aEndOffset)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aEndOffset'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 343147488)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendSetSelectionBoundsAt(
        const uint64_t& aID,
        const int32_t& aSelectionNum,
        const int32_t& aStartOffset,
        const int32_t& aEndOffset,
        bool* aSucceeded) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SetSelectionBoundsAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aSelectionNum);
    // Sentinel = 'aSelectionNum'
    (msg__)->WriteSentinel(601359672);
    WriteIPDLParam(msg__, this, aStartOffset);
    // Sentinel = 'aStartOffset'
    (msg__)->WriteSentinel(517801175);
    WriteIPDLParam(msg__, this, aEndOffset);
    // Sentinel = 'aEndOffset'
    (msg__)->WriteSentinel(343147488);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SetSelectionBoundsAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_SetSelectionBoundsAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSucceeded)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSucceeded'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 357893095)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAddToSelection(
        const uint64_t& aID,
        const int32_t& aStartOffset,
        const int32_t& aEndOffset,
        bool* aSucceeded) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AddToSelection(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStartOffset);
    // Sentinel = 'aStartOffset'
    (msg__)->WriteSentinel(517801175);
    WriteIPDLParam(msg__, this, aEndOffset);
    // Sentinel = 'aEndOffset'
    (msg__)->WriteSentinel(343147488);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AddToSelection", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AddToSelection", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSucceeded)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSucceeded'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 357893095)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendRemoveFromSelection(
        const uint64_t& aID,
        const int32_t& aSelectionNum,
        bool* aSucceeded) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_RemoveFromSelection(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aSelectionNum);
    // Sentinel = 'aSelectionNum'
    (msg__)->WriteSentinel(601359672);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_RemoveFromSelection", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_RemoveFromSelection", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSucceeded)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSucceeded'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 357893095)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendScrollSubstringTo(
        const uint64_t& aID,
        const int32_t& aStartOffset,
        const int32_t& aEndOffset,
        const uint32_t& aScrollType) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ScrollSubstringTo(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStartOffset);
    // Sentinel = 'aStartOffset'
    (msg__)->WriteSentinel(517801175);
    WriteIPDLParam(msg__, this, aEndOffset);
    // Sentinel = 'aEndOffset'
    (msg__)->WriteSentinel(343147488);
    WriteIPDLParam(msg__, this, aScrollType);
    // Sentinel = 'aScrollType'
    (msg__)->WriteSentinel(439092339);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollSubstringTo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendScrollSubstringToPoint(
        const uint64_t& aID,
        const int32_t& aStartOffset,
        const int32_t& aEndOffset,
        const uint32_t& aCoordinateType,
        const int32_t& aX,
        const int32_t& aY) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ScrollSubstringToPoint(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStartOffset);
    // Sentinel = 'aStartOffset'
    (msg__)->WriteSentinel(517801175);
    WriteIPDLParam(msg__, this, aEndOffset);
    // Sentinel = 'aEndOffset'
    (msg__)->WriteSentinel(343147488);
    WriteIPDLParam(msg__, this, aCoordinateType);
    // Sentinel = 'aCoordinateType'
    (msg__)->WriteSentinel(797312524);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollSubstringToPoint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendText(
        const uint64_t& aID,
        nsString* aText) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Text(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Text", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Text", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aText)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aText'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 97321479)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendReplaceText(
        const uint64_t& aID,
        const nsString& aText) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ReplaceText(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aText);
    // Sentinel = 'aText'
    (msg__)->WriteSentinel(97321479);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ReplaceText", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ReplaceText", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PDocAccessibleParent::SendInsertText(
        const uint64_t& aID,
        const nsString& aText,
        const int32_t& aPosition,
        bool* aValid) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_InsertText(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aText);
    // Sentinel = 'aText'
    (msg__)->WriteSentinel(97321479);
    WriteIPDLParam(msg__, this, aPosition);
    // Sentinel = 'aPosition'
    (msg__)->WriteSentinel(303104951);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_InsertText", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_InsertText", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValid)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aValid'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 133694034)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendCopyText(
        const uint64_t& aID,
        const int32_t& aStartPos,
        const int32_t& aEndPos,
        bool* aValid) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CopyText(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStartPos);
    // Sentinel = 'aStartPos'
    (msg__)->WriteSentinel(298255266);
    WriteIPDLParam(msg__, this, aEndPos);
    // Sentinel = 'aEndPos'
    (msg__)->WriteSentinel(172163755);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CopyText", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_CopyText", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValid)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aValid'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 133694034)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendCutText(
        const uint64_t& aID,
        const int32_t& aStartPos,
        const int32_t& aEndPos,
        bool* aValid) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CutText(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStartPos);
    // Sentinel = 'aStartPos'
    (msg__)->WriteSentinel(298255266);
    WriteIPDLParam(msg__, this, aEndPos);
    // Sentinel = 'aEndPos'
    (msg__)->WriteSentinel(172163755);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CutText", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_CutText", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValid)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aValid'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 133694034)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendDeleteText(
        const uint64_t& aID,
        const int32_t& aStartPos,
        const int32_t& aEndPos,
        bool* aValid) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_DeleteText(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aStartPos);
    // Sentinel = 'aStartPos'
    (msg__)->WriteSentinel(298255266);
    WriteIPDLParam(msg__, this, aEndPos);
    // Sentinel = 'aEndPos'
    (msg__)->WriteSentinel(172163755);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_DeleteText", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_DeleteText", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValid)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aValid'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 133694034)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendPasteText(
        const uint64_t& aID,
        const int32_t& aPosition,
        bool* aValid) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_PasteText(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aPosition);
    // Sentinel = 'aPosition'
    (msg__)->WriteSentinel(303104951);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_PasteText", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_PasteText", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValid)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aValid'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 133694034)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendImagePosition(
        const uint64_t& aID,
        const uint32_t& aCoordType,
        IntPoint* aRetVal) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ImagePosition(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCoordType);
    // Sentinel = 'aCoordType'
    (msg__)->WriteSentinel(357565435);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ImagePosition", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ImagePosition", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'IntPoint'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'IntPoint'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendImageSize(
        const uint64_t& aID,
        IntSize* aRetVal) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ImageSize(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ImageSize", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ImageSize", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'IntSize'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'IntSize'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendStartOffset(
        const uint64_t& aID,
        uint32_t* aRetVal,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_StartOffset(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_StartOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_StartOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendEndOffset(
        const uint64_t& aID,
        uint32_t* aRetVal,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_EndOffset(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_EndOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_EndOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendIsLinkValid(
        const uint64_t& aID,
        bool* aRetVal) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_IsLinkValid(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_IsLinkValid", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_IsLinkValid", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAnchorCount(
        const uint64_t& aID,
        uint32_t* aRetVal,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AnchorCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AnchorCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AnchorCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAnchorURIAt(
        const uint64_t& aID,
        const uint32_t& aIndex,
        nsCString* aURI,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AnchorURIAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AnchorURIAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AnchorURIAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aURI)))) {
        FatalError("Error deserializing 'nsCString'");
        return false;
    }
    // Sentinel = 'aURI'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 57934162)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAnchorAt(
        const uint64_t& aID,
        const uint32_t& aIndex,
        uint64_t* aIDOfAnchor,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AnchorAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AnchorAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AnchorAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIDOfAnchor)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aIDOfAnchor'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 376833023)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendLinkCount(
        const uint64_t& aID,
        uint32_t* aCount) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_LinkCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_LinkCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_LinkCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCount)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aCount'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 134611563)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendLinkAt(
        const uint64_t& aID,
        const uint32_t& aIndex,
        uint64_t* aIDOfLink,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_LinkAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_LinkAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_LinkAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIDOfLink)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aIDOfLink'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 253756210)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendLinkIndexOf(
        const uint64_t& aID,
        const uint64_t& aLinkID,
        int32_t* aIndex) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_LinkIndexOf(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aLinkID);
    // Sentinel = 'aLinkID'
    (msg__)->WriteSentinel(173146749);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_LinkIndexOf", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_LinkIndexOf", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIndex)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aIndex'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 132055642)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendLinkIndexAtOffset(
        const uint64_t& aID,
        const uint32_t& aOffset,
        int32_t* aIndex) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_LinkIndexAtOffset(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aOffset);
    // Sentinel = 'aOffset'
    (msg__)->WriteSentinel(179634889);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_LinkIndexAtOffset", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_LinkIndexAtOffset", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIndex)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aIndex'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 132055642)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableOfACell(
        const uint64_t& aID,
        uint64_t* aTableID,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableOfACell(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableOfACell", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableOfACell", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aTableID)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aTableID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 222364375)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendColIdx(
        const uint64_t& aID,
        uint32_t* aIndex) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ColIdx(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ColIdx", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ColIdx", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIndex)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aIndex'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 132055642)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendRowIdx(
        const uint64_t& aID,
        uint32_t* aIndex) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_RowIdx(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_RowIdx", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_RowIdx", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIndex)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aIndex'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 132055642)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendGetPosition(
        const uint64_t& aID,
        uint32_t* aRow,
        uint32_t* aCol) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_GetPosition(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetPosition", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_GetPosition", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRow)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aRow'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 64160154)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCol)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aCol'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 60490112)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendColExtent(
        const uint64_t& aID,
        uint32_t* aExtent) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ColExtent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ColExtent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ColExtent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aExtent)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aExtent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 183698138)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendRowExtent(
        const uint64_t& aID,
        uint32_t* aExtent) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_RowExtent(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_RowExtent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_RowExtent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aExtent)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aExtent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 183698138)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendGetColRowExtents(
        const uint64_t& aID,
        uint32_t* aCol,
        uint32_t* aRow,
        uint32_t* aColExtent,
        uint32_t* aRowExtent) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_GetColRowExtents(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetColRowExtents", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_GetColRowExtents", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCol)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aCol'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 60490112)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRow)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aRow'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 64160154)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aColExtent)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aColExtent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 350225400)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRowExtent)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aRowExtent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 364119058)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendColHeaderCells(
        const uint64_t& aID,
        nsTArray<uint64_t>* aCells) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ColHeaderCells(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ColHeaderCells", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ColHeaderCells", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCells)))) {
        FatalError("Error deserializing 'uint64_t[]'");
        return false;
    }
    // Sentinel = 'aCells'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 129892949)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendRowHeaderCells(
        const uint64_t& aID,
        nsTArray<uint64_t>* aCells) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_RowHeaderCells(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_RowHeaderCells", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_RowHeaderCells", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCells)))) {
        FatalError("Error deserializing 'uint64_t[]'");
        return false;
    }
    // Sentinel = 'aCells'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 129892949)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendIsCellSelected(
        const uint64_t& aID,
        bool* aSelected) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_IsCellSelected(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_IsCellSelected", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_IsCellSelected", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelected)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSelected'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 291767179)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableCaption(
        const uint64_t& aID,
        uint64_t* aCaptionID,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableCaption(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableCaption", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableCaption", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCaptionID)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aCaptionID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 350749629)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSummary(
        const uint64_t& aID,
        nsString* aSummary) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSummary(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSummary", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSummary", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSummary)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aSummary'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 241697616)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableColumnCount(
        const uint64_t& aID,
        uint32_t* aColCount) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableColumnCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableColumnCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aColCount)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aColCount'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 282395529)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableRowCount(
        const uint64_t& aID,
        uint32_t* aRowCount) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableRowCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableRowCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRowCount)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aRowCount'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 294585251)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableCellAt(
        const uint64_t& aID,
        const uint32_t& aRow,
        const uint32_t& aCol,
        uint64_t* aCellID,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableCellAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableCellAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableCellAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCellID)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aCellID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 167969391)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableCellIndexAt(
        const uint64_t& aID,
        const uint32_t& aRow,
        const uint32_t& aCol,
        int32_t* aIndex) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableCellIndexAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableCellIndexAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableCellIndexAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aIndex)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aIndex'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 132055642)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableColumnIndexAt(
        const uint64_t& aID,
        const uint32_t& aCellIndex,
        int32_t* aCol) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableColumnIndexAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCellIndex);
    // Sentinel = 'aCellIndex'
    (msg__)->WriteSentinel(342229978);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnIndexAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableColumnIndexAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCol)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aCol'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 60490112)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableRowIndexAt(
        const uint64_t& aID,
        const uint32_t& aCellIndex,
        int32_t* aRow) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableRowIndexAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCellIndex);
    // Sentinel = 'aCellIndex'
    (msg__)->WriteSentinel(342229978);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowIndexAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableRowIndexAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRow)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aRow'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 64160154)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableRowAndColumnIndicesAt(
        const uint64_t& aID,
        const uint32_t& aCellIndex,
        int32_t* aRow,
        int32_t* aCol) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableRowAndColumnIndicesAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCellIndex);
    // Sentinel = 'aCellIndex'
    (msg__)->WriteSentinel(342229978);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowAndColumnIndicesAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableRowAndColumnIndicesAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRow)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aRow'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 64160154)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCol)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aCol'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 60490112)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableColumnExtentAt(
        const uint64_t& aID,
        const uint32_t& aRow,
        const uint32_t& aCol,
        uint32_t* aExtent) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableColumnExtentAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnExtentAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableColumnExtentAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aExtent)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aExtent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 183698138)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableRowExtentAt(
        const uint64_t& aID,
        const uint32_t& aRow,
        const uint32_t& aCol,
        uint32_t* aExtent) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableRowExtentAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowExtentAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableRowExtentAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aExtent)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aExtent'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 183698138)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableColumnDescription(
        const uint64_t& aID,
        const uint32_t& aCol,
        nsString* aDescription) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableColumnDescription(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnDescription", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableColumnDescription", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aDescription)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aDescription'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 515114214)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableRowDescription(
        const uint64_t& aID,
        const uint32_t& aRow,
        nsString* aDescription) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableRowDescription(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowDescription", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableRowDescription", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aDescription)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aDescription'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 515114214)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableColumnSelected(
        const uint64_t& aID,
        const uint32_t& aCol,
        bool* aSelected) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableColumnSelected(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableColumnSelected", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableColumnSelected", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelected)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSelected'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 291767179)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableRowSelected(
        const uint64_t& aID,
        const uint32_t& aRow,
        bool* aSelected) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableRowSelected(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableRowSelected", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableRowSelected", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelected)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSelected'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 291767179)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableCellSelected(
        const uint64_t& aID,
        const uint32_t& aRow,
        const uint32_t& aCol,
        bool* aSelected) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableCellSelected(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableCellSelected", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableCellSelected", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelected)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSelected'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 291767179)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSelectedCellCount(
        const uint64_t& aID,
        uint32_t* aSelectedCells) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectedCellCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedCellCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectedCellCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelectedCells)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aSelectedCells'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 680330622)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSelectedColumnCount(
        const uint64_t& aID,
        uint32_t* aSelectedColumns) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectedColumnCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedColumnCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectedColumnCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelectedColumns)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aSelectedColumns'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 891684460)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSelectedRowCount(
        const uint64_t& aID,
        uint32_t* aSelectedRows) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectedRowCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedRowCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectedRowCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelectedRows)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aSelectedRows'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 595985718)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSelectedCells(
        const uint64_t& aID,
        nsTArray<uint64_t>* aCellIDs) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectedCells(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedCells", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectedCells", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCellIDs)))) {
        FatalError("Error deserializing 'uint64_t[]'");
        return false;
    }
    // Sentinel = 'aCellIDs'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 216335074)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSelectedCellIndices(
        const uint64_t& aID,
        nsTArray<uint32_t>* aCellIndeces) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectedCellIndices(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedCellIndices", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectedCellIndices", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCellIndeces)))) {
        FatalError("Error deserializing 'uint32_t[]'");
        return false;
    }
    // Sentinel = 'aCellIndeces'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 488113309)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSelectedColumnIndices(
        const uint64_t& aID,
        nsTArray<uint32_t>* aColumnIndeces) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectedColumnIndices(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedColumnIndices", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectedColumnIndices", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aColumnIndeces)))) {
        FatalError("Error deserializing 'uint32_t[]'");
        return false;
    }
    // Sentinel = 'aColumnIndeces'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 687015307)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSelectedRowIndices(
        const uint64_t& aID,
        nsTArray<uint32_t>* aRowIndeces) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectedRowIndices(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectedRowIndices", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectedRowIndices", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRowIndeces)))) {
        FatalError("Error deserializing 'uint32_t[]'");
        return false;
    }
    // Sentinel = 'aRowIndeces'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 428475477)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTableSelectColumn(
        const uint64_t& aID,
        const uint32_t& aCol) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectColumn(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectColumn", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectColumn", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PDocAccessibleParent::SendTableSelectRow(
        const uint64_t& aID,
        const uint32_t& aRow) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableSelectRow(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableSelectRow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableSelectRow", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PDocAccessibleParent::SendTableUnselectColumn(
        const uint64_t& aID,
        const uint32_t& aCol) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableUnselectColumn(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableUnselectColumn", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableUnselectColumn", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PDocAccessibleParent::SendTableUnselectRow(
        const uint64_t& aID,
        const uint32_t& aRow) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableUnselectRow(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableUnselectRow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableUnselectRow", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PDocAccessibleParent::SendTableIsProbablyForLayout(
        const uint64_t& aID,
        bool* aForLayout) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TableIsProbablyForLayout(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TableIsProbablyForLayout", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_TableIsProbablyForLayout", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aForLayout)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aForLayout'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 354157575)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAtkTableColumnHeader(
        const uint64_t& aID,
        const int32_t& aCol,
        uint64_t* aHeaderID,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AtkTableColumnHeader(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aCol);
    // Sentinel = 'aCol'
    (msg__)->WriteSentinel(60490112);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AtkTableColumnHeader", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AtkTableColumnHeader", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aHeaderID)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aHeaderID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 275710776)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAtkTableRowHeader(
        const uint64_t& aID,
        const int32_t& aRow,
        uint64_t* aHeaderID,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AtkTableRowHeader(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aRow);
    // Sentinel = 'aRow'
    (msg__)->WriteSentinel(64160154);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AtkTableRowHeader", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AtkTableRowHeader", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aHeaderID)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aHeaderID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 275710776)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendSelectedItems(
        const uint64_t& aID,
        nsTArray<uint64_t>* aSelectedItemIDs) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SelectedItems(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectedItems", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_SelectedItems", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelectedItemIDs)))) {
        FatalError("Error deserializing 'uint64_t[]'");
        return false;
    }
    // Sentinel = 'aSelectedItemIDs'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 879429146)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendSelectedItemCount(
        const uint64_t& aID,
        uint32_t* aCount) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SelectedItemCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectedItemCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_SelectedItemCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCount)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aCount'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 134611563)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendGetSelectedItem(
        const uint64_t& aID,
        const uint32_t& aIndex,
        uint64_t* aSelected,
        bool* aOk) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_GetSelectedItem(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_GetSelectedItem", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_GetSelectedItem", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelected)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aSelected'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 291767179)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aOk)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aOk'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 36634908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendIsItemSelected(
        const uint64_t& aID,
        const uint32_t& aIndex,
        bool* aSelected) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_IsItemSelected(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_IsItemSelected", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_IsItemSelected", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSelected)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSelected'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 291767179)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAddItemToSelection(
        const uint64_t& aID,
        const uint32_t& aIndex,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AddItemToSelection(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AddItemToSelection", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AddItemToSelection", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendRemoveItemFromSelection(
        const uint64_t& aID,
        const uint32_t& aIndex,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_RemoveItemFromSelection(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_RemoveItemFromSelection", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_RemoveItemFromSelection", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendSelectAll(
        const uint64_t& aID,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SelectAll(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectAll", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_SelectAll", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendUnselectAll(
        const uint64_t& aID,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_UnselectAll(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_UnselectAll", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_UnselectAll", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTakeSelection(const uint64_t& aID) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TakeSelection(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TakeSelection", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendSetSelected(
        const uint64_t& aID,
        const bool& aSelected) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SetSelected(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aSelected);
    // Sentinel = 'aSelected'
    (msg__)->WriteSentinel(291767179);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SetSelected", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendDoAction(
        const uint64_t& aID,
        const uint8_t& aIndex,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_DoAction(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_DoAction", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_DoAction", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendActionCount(
        const uint64_t& aID,
        uint8_t* aCount) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ActionCount(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ActionCount", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ActionCount", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aCount)))) {
        FatalError("Error deserializing 'uint8_t'");
        return false;
    }
    // Sentinel = 'aCount'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 134611563)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendActionDescriptionAt(
        const uint64_t& aID,
        const uint8_t& aIndex,
        nsString* aDescription) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ActionDescriptionAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ActionDescriptionAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ActionDescriptionAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aDescription)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aDescription'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 515114214)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendActionNameAt(
        const uint64_t& aID,
        const uint8_t& aIndex,
        nsString* aName) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ActionNameAt(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aIndex);
    // Sentinel = 'aIndex'
    (msg__)->WriteSentinel(132055642);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ActionNameAt", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ActionNameAt", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aName)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aName'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 92537315)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAccessKey(
        const uint64_t& aID,
        uint32_t* aKey,
        uint32_t* aModifierMask) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AccessKey(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AccessKey", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AccessKey", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aKey)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aKey'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 61604235)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aModifierMask)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aModifierMask'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 591594781)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendKeyboardShortcut(
        const uint64_t& aID,
        uint32_t* aKey,
        uint32_t* aModifierMask) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_KeyboardShortcut(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_KeyboardShortcut", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_KeyboardShortcut", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aKey)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aKey'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 61604235)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aModifierMask)))) {
        FatalError("Error deserializing 'uint32_t'");
        return false;
    }
    // Sentinel = 'aModifierMask'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 591594781)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendAtkKeyBinding(
        const uint64_t& aID,
        nsString* aResult) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_AtkKeyBinding(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_AtkKeyBinding", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_AtkKeyBinding", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendCurValue(
        const uint64_t& aID,
        double* aValue) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_CurValue(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_CurValue", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_CurValue", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValue)))) {
        FatalError("Error deserializing 'double'");
        return false;
    }
    // Sentinel = 'aValue'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 135332447)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendSetCurValue(
        const uint64_t& aID,
        const double& aValue,
        bool* aRetVal) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_SetCurValue(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aValue);
    // Sentinel = 'aValue'
    (msg__)->WriteSentinel(135332447);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_SetCurValue", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_SetCurValue", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aRetVal)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aRetVal'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177406640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendMinValue(
        const uint64_t& aID,
        double* aValue) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_MinValue(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_MinValue", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_MinValue", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValue)))) {
        FatalError("Error deserializing 'double'");
        return false;
    }
    // Sentinel = 'aValue'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 135332447)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendMaxValue(
        const uint64_t& aID,
        double* aValue) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_MaxValue(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_MaxValue", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_MaxValue", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aValue)))) {
        FatalError("Error deserializing 'double'");
        return false;
    }
    // Sentinel = 'aValue'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 135332447)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendStep(
        const uint64_t& aID,
        double* aStep) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Step(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Step", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Step", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aStep)))) {
        FatalError("Error deserializing 'double'");
        return false;
    }
    // Sentinel = 'aStep'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 97255934)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'double'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTakeFocus(const uint64_t& aID) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_TakeFocus(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);




    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_TakeFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PDocAccessibleParent::SendFocusedChild(
        const uint64_t& aID,
        PDocAccessibleParent** aResultDoc,
        uint64_t* aResultID) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_FocusedChild(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_FocusedChild", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_FocusedChild", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResultDoc)))) {
        FatalError("Error deserializing 'PDocAccessible'");
        return false;
    }
    // Sentinel = 'aResultDoc'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 364512247)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PDocAccessible'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResultID)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aResultID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 295830382)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendLanguage(
        const uint64_t& aID,
        nsString* aLocale) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Language(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Language", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Language", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aLocale)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aLocale'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 177013426)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendDocType(
        const uint64_t& aID,
        nsString* aType) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_DocType(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_DocType", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_DocType", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aType)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aType'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 99222020)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendTitle(
        const uint64_t& aID,
        nsString* aTitle) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Title(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Title", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Title", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aTitle)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aTitle'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 137167460)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendURL(
        const uint64_t& aID,
        nsString* aURL) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_URL(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_URL", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_URL", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aURL)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aURL'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 58130773)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendMimeType(
        const uint64_t& aID,
        nsString* aMime) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_MimeType(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_MimeType", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_MimeType", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aMime)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aMime'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 93848042)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendURLDocTypeMimeType(
        const uint64_t& aID,
        nsString* aURL,
        nsString* aDocType,
        nsString* aMimeType) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_URLDocTypeMimeType(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_URLDocTypeMimeType", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_URLDocTypeMimeType", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aURL)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aURL'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 58130773)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aDocType)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aDocType'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 225772314)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aMimeType)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aMimeType'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 289407884)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendChildAtPoint(
        const uint64_t& aID,
        const int32_t& aX,
        const int32_t& aY,
        const uint32_t& aWhich,
        PDocAccessibleParent** aResultDoc,
        uint64_t* aResultID) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ChildAtPoint(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);
    WriteIPDLParam(msg__, this, aWhich);
    // Sentinel = 'aWhich'
    (msg__)->WriteSentinel(134742613);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ChildAtPoint", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ChildAtPoint", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResultDoc)))) {
        FatalError("Error deserializing 'PDocAccessible'");
        return false;
    }
    // Sentinel = 'aResultDoc'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 364512247)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PDocAccessible'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResultID)))) {
        FatalError("Error deserializing 'uint64_t'");
        return false;
    }
    // Sentinel = 'aResultID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 295830382)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendExtents(
        const uint64_t& aID,
        const bool& aNeedsScreenCoords,
        int32_t* aX,
        int32_t* aY,
        int32_t* aWidth,
        int32_t* aHeight) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_Extents(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);
    WriteIPDLParam(msg__, this, aNeedsScreenCoords);
    // Sentinel = 'aNeedsScreenCoords'
    (msg__)->WriteSentinel(1106642715);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_Extents", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_Extents", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aX)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aX'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 18612410)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aY)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aY'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 18677947)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aWidth)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aWidth'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 136249954)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aHeight)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aHeight'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 175375035)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendExtentsInCSSPixels(
        const uint64_t& aID,
        int32_t* aX,
        int32_t* aY,
        int32_t* aWidth,
        int32_t* aHeight) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_ExtentsInCSSPixels(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_ExtentsInCSSPixels", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_ExtentsInCSSPixels", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aX)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aX'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 18612410)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aY)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aY'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 18677947)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aWidth)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aWidth'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 136249954)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aHeight)))) {
        FatalError("Error deserializing 'int32_t'");
        return false;
    }
    // Sentinel = 'aHeight'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 175375035)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::SendDOMNodeID(
        const uint64_t& aID,
        nsString* aDOMNodeID) -> bool
{
    IPC::Message* msg__ = PDocAccessible::Msg_DOMNodeID(Id());

    WriteIPDLParam(msg__, this, aID);
    // Sentinel = 'aID'
    (msg__)->WriteSentinel(33292527);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PDocAccessible::Msg_DOMNodeID", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PDocAccessible::Msg_DOMNodeID", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PDocAccessibleParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aDOMNodeID)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'aDOMNodeID'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 308216661)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PDocAccessibleParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PDocAccessiblePlatformExtMsgStart:
{
            PDocAccessiblePlatformExtParent* actor = static_cast<PDocAccessiblePlatformExtParent*>(aListener);
            auto& container = mManagedPDocAccessiblePlatformExtParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PDocAccessibleParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PDocAccessiblePlatformExtMsgStart:
        this->DeallocPDocAccessiblePlatformExtParent(static_cast<PDocAccessiblePlatformExtParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PDocAccessibleParent::OnMessageReceived(const Message& msg__) -> PDocAccessibleParent::Result
{
    switch (msg__.type()) {
    case PDocAccessible::Msg_PDocAccessiblePlatformExtConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_PDocAccessiblePlatformExtConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PDocAccessiblePlatformExtParent* actor = (this)->AllocPDocAccessiblePlatformExtParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PDocAccessiblePlatformExtParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPDocAccessiblePlatformExtParent.PutEntry(actor);

            if ((!((this)->RecvPDocAccessiblePlatformExtConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Shutdown", OTHER);

            if ((!((this)->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_Event__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Event", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint32_t type{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(type)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'type'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760067)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvEvent(std::move(aID), std::move(type))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_ShowEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ShowEvent", OTHER);

            PickleIterator iter__{msg__};
            ShowEventData data{};
            bool aFromuser{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'ShowEventData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ShowEventData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFromuser)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aFromuser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 300155829)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvShowEvent(std::move(data), std::move(aFromuser))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_HideEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_HideEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aRootID{};
            bool aFromUser{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRootID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRootID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179503763)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFromUser)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aFromUser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 291767189)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvHideEvent(std::move(aRootID), std::move(aFromUser))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_StateChangeEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_StateChangeEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint64_t aState{};
            bool aEnabled{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aState)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137036387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 224789261)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvStateChangeEvent(std::move(aID), std::move(aState), std::move(aEnabled))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_CaretMoveEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_CaretMoveEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            int32_t aOffset{};
            bool aIsSelectionCollapsed{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179634889)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsSelectionCollapsed)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsSelectionCollapsed'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1514342491)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvCaretMoveEvent(std::move(aID), std::move(aOffset), std::move(aIsSelectionCollapsed))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_TextChangeEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextChangeEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            nsString aStr{};
            int32_t aStart{};
            uint32_t aLen{};
            bool aIsInsert{};
            bool aFromUser{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStr)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aStr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64684443)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStart)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStart'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 137757296)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLen)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aLen'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61079937)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsInsert)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsInsert'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 286131091)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFromUser)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aFromUser'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 291767189)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvTextChangeEvent(std::move(aID), std::move(aStr), std::move(aStart), std::move(aLen), std::move(aIsInsert), std::move(aFromUser))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_SelectionEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_SelectionEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint64_t aWidgetID{};
            uint32_t aType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWidgetID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWidgetID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 287966035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSelectionEvent(std::move(aID), std::move(aWidgetID), std::move(aType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_RoleChangedEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_RoleChangedEvent", OTHER);

            PickleIterator iter__{msg__};
            role aRole{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRole)))))) {
                FatalError("Error deserializing 'role'");
                return MsgValueError;
            }
            // Sentinel = 'aRole'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 96207348)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'role'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvRoleChangedEvent(std::move(aRole))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_VirtualCursorChangeEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_VirtualCursorChangeEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint64_t aOldPosition{};
            int32_t aOldStartOffset{};
            int32_t aOldEndOffset{};
            uint64_t aPosition{};
            int32_t aStartOffset{};
            int32_t aEndOffset{};
            int16_t aReason{};
            int16_t aBoundaryType{};
            bool aFromUservcEvent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOldPosition)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOldPosition'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 509084886)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOldStartOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOldStartOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 780207606)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOldEndOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOldEndOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 567936255)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPosition)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPosition'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303104951)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStartOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aStartOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 517801175)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEndOffset)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEndOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 343147488)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBoundaryType)))))) {
                FatalError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            // Sentinel = 'aBoundaryType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 605488456)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFromUservcEvent)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aFromUservcEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 900925040)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvVirtualCursorChangeEvent(std::move(aID), std::move(aOldPosition), std::move(aOldStartOffset), std::move(aOldEndOffset), std::move(aPosition), std::move(aStartOffset), std::move(aEndOffset), std::move(aReason), std::move(aBoundaryType), std::move(aFromUservcEvent))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_ScrollingEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_ScrollingEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            uint64_t aType{};
            uint32_t aScrollX{};
            uint32_t aScrollY{};
            uint32_t aMaxScrollX{};
            uint32_t aMaxScrollY{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollX)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235995945)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScrollY)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aScrollY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236061482)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMaxScrollX)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMaxScrollX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 425854031)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMaxScrollY)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMaxScrollY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 425919568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvScrollingEvent(std::move(aID), std::move(aType), std::move(aScrollX), std::move(aScrollY), std::move(aMaxScrollX), std::move(aMaxScrollY))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_AnnouncementEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_AnnouncementEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            nsString aAnnouncement{};
            uint16_t aPriority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAnnouncement)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aAnnouncement'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 605750605)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPriority)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPriority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303367108)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAnnouncementEvent(std::move(aID), std::move(aAnnouncement), std::move(aPriority))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_TextSelectionChangeEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_TextSelectionChangeEvent", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aID{};
            nsTArray<TextRangeData> aSelection{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSelection)))))) {
                FatalError("Error deserializing 'TextRangeData[]'");
                return MsgValueError;
            }
            // Sentinel = 'aSelection'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 360645640)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextRangeData[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvTextSelectionChangeEvent(std::move(aID), std::move(aSelection))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_BindChildDoc__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_BindChildDoc", OTHER);

            PickleIterator iter__{msg__};
            PDocAccessibleParent* aChildDoc{};
            uint64_t aID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChildDoc)))))) {
                FatalError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            if ((!((*((&(aChildDoc))))))) {
                FatalError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            // Sentinel = 'aChildDoc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 277939036)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PDocAccessible'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 33292527)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvBindChildDoc(std::move(aChildDoc), std::move(aID))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Msg_Batch__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PDocAccessibleParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PDocAccessibleParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PDocAccessible::Msg_Batch", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aBatchType{};
            nsTArray<BatchData> aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBatchType)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aBatchType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 347341798)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'BatchData[]'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BatchData[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvBatch(std::move(aBatchType), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PDocAccessible::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PDocAccessibleParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PDocAccessibleParent::Result
{
    return MsgNotKnown;
}

auto PDocAccessibleParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PDocAccessibleParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PDocAccessibleParent::ClearSubtree() -> void
{
    for (auto it = mManagedPDocAccessiblePlatformExtParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPDocAccessiblePlatformExtParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPDocAccessiblePlatformExtParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPDocAccessiblePlatformExtParent.Clear();

}



} // namespace a11y
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::a11y::PDocAccessibleParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::a11y::PDocAccessibleParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PDocAccessible", PDocAccessibleMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::a11y::PDocAccessibleParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
