//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PWebRenderBridgeParent.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/WebRenderMessageUtils.h"

#include "mozilla/layers/PCompositorBridgeParent.h"
#include "mozilla/layers/PTextureParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace layers {


MOZ_IMPLICIT PWebRenderBridgeParent::PWebRenderBridgeParent() :
    mozilla::ipc::IProtocol(PWebRenderBridgeMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWebRenderBridgeParent);
}

PWebRenderBridgeParent::~PWebRenderBridgeParent()
{
    MOZ_COUNT_DTOR(PWebRenderBridgeParent);
}

auto PWebRenderBridgeParent::Manager() const -> PCompositorBridgeParent*
{
    return static_cast<PCompositorBridgeParent*>(IProtocol::Manager());
}

auto PWebRenderBridgeParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebRenderBridgeParent::SendWrUpdated(
        const IdNamespace& aNewIdNamespace,
        const TextureFactoryIdentifier& textureFactoryIdentifier) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_WrUpdated(Id());

    WriteIPDLParam(msg__, this, aNewIdNamespace);
    // Sentinel = 'aNewIdNamespace'
    (msg__)->WriteSentinel(757990854);
    WriteIPDLParam(msg__, this, textureFactoryIdentifier);
    // Sentinel = 'textureFactoryIdentifier'
    (msg__)->WriteSentinel(2096630253);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_WrUpdated", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeParent::SendWrReleasedImages(const nsTArray<ExternalImageKeyPair>& pairs) -> bool
{
    IPC::Message* msg__ = PWebRenderBridge::Msg_WrReleasedImages(Id());

    WriteIPDLParam(msg__, this, pairs);
    // Sentinel = 'pairs'
    (msg__)->WriteSentinel(105579040);




    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_WrReleasedImages", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebRenderBridgeParent::Send__delete__(PWebRenderBridgeParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PWebRenderBridge::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebRenderBridgeParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebRenderBridge::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PWebRenderBridgeMsgStart, actor);
    return sendok__;
}

auto PWebRenderBridgeParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebRenderBridgeParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebRenderBridgeParent::OnMessageReceived(const Message& msg__) -> PWebRenderBridgeParent::Result
{
    switch (msg__.type()) {
    case PWebRenderBridge::Msg_NewCompositable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_NewCompositable", OTHER);

            PickleIterator iter__{msg__};
            CompositableHandle handle{};
            TextureInfo info{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle)))))) {
                FatalError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            // Sentinel = 'handle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 142344813)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'TextureInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextureInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvNewCompositable(std::move(handle), std::move(info))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_ReleaseCompositable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ReleaseCompositable", OTHER);

            PickleIterator iter__{msg__};
            CompositableHandle compositable{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(compositable)))))) {
                FatalError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            // Sentinel = 'compositable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 551879939)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositableHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReleaseCompositable(std::move(compositable))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_DeleteCompositorAnimations__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_DeleteCompositorAnimations", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<uint64_t> aIds{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIds)))))) {
                FatalError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aIds'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60686722)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvDeleteCompositorAnimations(std::move(aIds))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_SetDisplayList__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetDisplayList", OTHER);

            PickleIterator iter__{msg__};
            DisplayListData displayList{};
            nsTArray<OpDestroy> toDestroy{};
            uint64_t fwdTransactionId{};
            TransactionId transactionId{};
            bool containsSVGGroup{};
            VsyncId vsyncId{};
            TimeStamp vsyncStartTime{};
            TimeStamp refreshStartTime{};
            TimeStamp txnStartTime{};
            nsCString txnURL{};
            TimeStamp fwdTime{};
            nsTArray<CompositionPayload> payloads{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(displayList)))))) {
                FatalError("Error deserializing 'DisplayListData'");
                return MsgValueError;
            }
            // Sentinel = 'displayList'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 458753171)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DisplayListData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(toDestroy)))))) {
                FatalError("Error deserializing 'OpDestroy[]'");
                return MsgValueError;
            }
            // Sentinel = 'toDestroy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 311100366)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OpDestroy[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fwdTransactionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'fwdTransactionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 930940533)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transactionId)))))) {
                FatalError("Error deserializing 'TransactionId'");
                return MsgValueError;
            }
            // Sentinel = 'transactionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 642319700)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TransactionId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(containsSVGGroup)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'containsSVGGroup'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 914163293)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vsyncId)))))) {
                FatalError("Error deserializing 'VsyncId'");
                return MsgValueError;
            }
            // Sentinel = 'vsyncId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 203883233)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VsyncId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vsyncStartTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'vsyncStartTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 747177425)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(refreshStartTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'refreshStartTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 941753997)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(txnStartTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'txnStartTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 551290104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(txnURL)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'txnURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146604622)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fwdTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'fwdTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 190382801)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(payloads)))))) {
                FatalError("Error deserializing 'CompositionPayload[]'");
                return MsgValueError;
            }
            // Sentinel = 'payloads'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 255525726)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositionPayload[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetDisplayList(std::move(displayList), std::move(toDestroy), std::move(fwdTransactionId), std::move(transactionId), std::move(containsSVGGroup), std::move(vsyncId), std::move(vsyncStartTime), std::move(refreshStartTime), std::move(txnStartTime), std::move(txnURL), std::move(fwdTime), std::move(payloads))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_EmptyTransaction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_EmptyTransaction", OTHER);

            PickleIterator iter__{msg__};
            FocusTarget focusTarget{};
            MaybeTransactionData transationData{};
            nsTArray<OpDestroy> toDestroy{};
            uint64_t fwdTransactionId{};
            TransactionId transactionId{};
            VsyncId vsyncId{};
            TimeStamp vsyncStartTime{};
            TimeStamp refreshStartTime{};
            TimeStamp txnStartTime{};
            nsCString txnURL{};
            TimeStamp fwdTime{};
            nsTArray<CompositionPayload> payloads{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(focusTarget)))))) {
                FatalError("Error deserializing 'FocusTarget'");
                return MsgValueError;
            }
            // Sentinel = 'focusTarget'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 455279752)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FocusTarget'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transationData)))))) {
                FatalError("Error deserializing 'MaybeTransactionData'");
                return MsgValueError;
            }
            // Sentinel = 'transationData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 739771838)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeTransactionData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(toDestroy)))))) {
                FatalError("Error deserializing 'OpDestroy[]'");
                return MsgValueError;
            }
            // Sentinel = 'toDestroy'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 311100366)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OpDestroy[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fwdTransactionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'fwdTransactionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 930940533)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transactionId)))))) {
                FatalError("Error deserializing 'TransactionId'");
                return MsgValueError;
            }
            // Sentinel = 'transactionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 642319700)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TransactionId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vsyncId)))))) {
                FatalError("Error deserializing 'VsyncId'");
                return MsgValueError;
            }
            // Sentinel = 'vsyncId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 203883233)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'VsyncId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(vsyncStartTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'vsyncStartTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 747177425)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(refreshStartTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'refreshStartTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 941753997)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(txnStartTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'txnStartTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 551290104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(txnURL)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'txnURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146604622)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(fwdTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'fwdTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 190382801)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(payloads)))))) {
                FatalError("Error deserializing 'CompositionPayload[]'");
                return MsgValueError;
            }
            // Sentinel = 'payloads'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 255525726)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositionPayload[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvEmptyTransaction(std::move(focusTarget), std::move(transationData), std::move(toDestroy), std::move(fwdTransactionId), std::move(transactionId), std::move(vsyncId), std::move(vsyncStartTime), std::move(refreshStartTime), std::move(txnStartTime), std::move(txnURL), std::move(fwdTime), std::move(payloads))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_SetFocusTarget__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetFocusTarget", OTHER);

            PickleIterator iter__{msg__};
            FocusTarget focusTarget{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(focusTarget)))))) {
                FatalError("Error deserializing 'FocusTarget'");
                return MsgValueError;
            }
            // Sentinel = 'focusTarget'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 455279752)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'FocusTarget'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetFocusTarget(std::move(focusTarget))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_UpdateResources__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_UpdateResources", OTHER);

            PickleIterator iter__{msg__};
            IdNamespace aIdNamespace{};
            nsTArray<OpUpdateResource> aResourceUpdates{};
            nsTArray<RefCountedShmem> aSmallShmems{};
            nsTArray<Shmem> aLargeShmems{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIdNamespace)))))) {
                FatalError("Error deserializing 'IdNamespace'");
                return MsgValueError;
            }
            // Sentinel = 'aIdNamespace'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 487523484)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IdNamespace'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResourceUpdates)))))) {
                FatalError("Error deserializing 'OpUpdateResource[]'");
                return MsgValueError;
            }
            // Sentinel = 'aResourceUpdates'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 916522624)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OpUpdateResource[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSmallShmems)))))) {
                FatalError("Error deserializing 'RefCountedShmem[]'");
                return MsgValueError;
            }
            // Sentinel = 'aSmallShmems'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 508691656)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RefCountedShmem[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLargeShmems)))))) {
                FatalError("Error deserializing 'Shmem[]'");
                return MsgValueError;
            }
            // Sentinel = 'aLargeShmems'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 499975354)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvUpdateResources(std::move(aIdNamespace), std::move(aResourceUpdates), std::move(aSmallShmems), std::move(aLargeShmems))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_ParentCommands__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ParentCommands", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<WebRenderParentCommand> commands{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(commands)))))) {
                FatalError("Error deserializing 'WebRenderParentCommand[]'");
                return MsgValueError;
            }
            // Sentinel = 'commands'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 249627475)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebRenderParentCommand[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvParentCommands(std::move(commands))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_SetLayersObserverEpoch__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetLayersObserverEpoch", OTHER);

            PickleIterator iter__{msg__};
            LayersObserverEpoch childEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(childEpoch)))))) {
                FatalError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            // Sentinel = 'childEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364381172)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetLayersObserverEpoch(std::move(childEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_ClearCachedResources__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ClearCachedResources", OTHER);

            if ((!((this)->RecvClearCachedResources()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_InvalidateRenderedFrame__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_InvalidateRenderedFrame", OTHER);

            if ((!((this)->RecvInvalidateRenderedFrame()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_ScheduleComposite__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ScheduleComposite", OTHER);

            if ((!((this)->RecvScheduleComposite()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_Capture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_Capture", OTHER);

            if ((!((this)->RecvCapture()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_ToggleCaptureSequence__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ToggleCaptureSequence", OTHER);

            if ((!((this)->RecvToggleCaptureSequence()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_SetConfirmedTargetAPZC__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetConfirmedTargetAPZC", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aInputBlockId{};
            nsTArray<ScrollableLayerGuid> aTargets{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTargets)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid[]'");
                return MsgValueError;
            }
            // Sentinel = 'aTargets'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 235012924)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetConfirmedTargetAPZC(std::move(aInputBlockId), std::move(aTargets))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_FlushApzRepaints__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_FlushApzRepaints", OTHER);

            if ((!((this)->RecvFlushApzRepaints()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_Shutdown", OTHER);

            if ((!((this)->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebRenderBridge::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebRenderBridgeParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebRenderBridgeParent::Result
{
    switch (msg__.type()) {
    case PWebRenderBridge::Msg_EnsureConnected__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_EnsureConnected", OTHER);

            int32_t id__ = Id();
            TextureFactoryIdentifier textureFactoryIdentifier{};
            MaybeIdNamespace maybeIdNamespace{};
            nsCString error{};
            if ((!((this)->RecvEnsureConnected((&(textureFactoryIdentifier)), (&(maybeIdNamespace)), (&(error)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_EnsureConnected(id__);

            WriteIPDLParam(reply__, this, textureFactoryIdentifier);
            // Sentinel = 'textureFactoryIdentifier'
            (reply__)->WriteSentinel(2096630253);
            WriteIPDLParam(reply__, this, maybeIdNamespace);
            // Sentinel = 'maybeIdNamespace'
            (reply__)->WriteSentinel(895092297);
            WriteIPDLParam(reply__, this, error);
            // Sentinel = 'error'
            (reply__)->WriteSentinel(107741739);

            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_GetSnapshot__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_GetSnapshot", OTHER);

            PickleIterator iter__{msg__};
            PTextureParent* texture{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(texture)))))) {
                FatalError("Error deserializing 'PTexture'");
                return MsgValueError;
            }
            if ((!((*((&(texture))))))) {
                FatalError("Error deserializing 'PTexture'");
                return MsgValueError;
            }
            // Sentinel = 'texture'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 207684370)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PTexture'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aNeedsYFlip{};
            if ((!((this)->RecvGetSnapshot(std::move(texture), (&(aNeedsYFlip)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_GetSnapshot(id__);

            WriteIPDLParam(reply__, this, aNeedsYFlip);
            // Sentinel = 'aNeedsYFlip'
            (reply__)->WriteSentinel(415237173);

            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_SyncWithCompositor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SyncWithCompositor", OTHER);

            int32_t id__ = Id();
            if ((!((this)->RecvSyncWithCompositor()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_SyncWithCompositor(id__);


            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_SetTestSampleTime__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetTestSampleTime", OTHER);

            PickleIterator iter__{msg__};
            TimeStamp sampleTime{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sampleTime)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'sampleTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 380896274)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((this)->RecvSetTestSampleTime(std::move(sampleTime))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_SetTestSampleTime(id__);


            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_LeaveTestMode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_LeaveTestMode", OTHER);

            int32_t id__ = Id();
            if ((!((this)->RecvLeaveTestMode()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_LeaveTestMode(id__);


            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_GetAnimationValue__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_GetAnimationValue", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aCompositorAnimationsId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCompositorAnimationsId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCompositorAnimationsId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1874397521)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            OMTAValue value{};
            if ((!((this)->RecvGetAnimationValue(std::move(aCompositorAnimationsId), (&(value)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_GetAnimationValue(id__);

            WriteIPDLParam(reply__, this, value);
            // Sentinel = 'value'
            (reply__)->WriteSentinel(107610654);

            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_SetAsyncScrollOffset__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetAsyncScrollOffset", OTHER);

            PickleIterator iter__{msg__};
            ViewID scrollId{};
            float x{};
            float y{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scrollId)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'scrollId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 253100861)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(x)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'x'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 7929977)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(y)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'y'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 7995514)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((this)->RecvSetAsyncScrollOffset(std::move(scrollId), std::move(x), std::move(y))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_SetAsyncScrollOffset(id__);


            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_SetAsyncZoom__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_SetAsyncZoom", OTHER);

            PickleIterator iter__{msg__};
            ViewID scrollId{};
            float zoom{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scrollId)))))) {
                FatalError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            // Sentinel = 'scrollId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 253100861)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ViewID'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(zoom)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'zoom'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760070)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            if ((!((this)->RecvSetAsyncZoom(std::move(scrollId), std::move(zoom))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_SetAsyncZoom(id__);


            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_GetAPZTestData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_GetAPZTestData", OTHER);

            int32_t id__ = Id();
            APZTestData data{};
            if ((!((this)->RecvGetAPZTestData((&(data)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_GetAPZTestData(id__);

            WriteIPDLParam(reply__, this, data);
            // Sentinel = 'data'
            (reply__)->WriteSentinel(67109275);

            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_GetFrameUniformity__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_GetFrameUniformity", OTHER);

            int32_t id__ = Id();
            FrameUniformityData data{};
            if ((!((this)->RecvGetFrameUniformity((&(data)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_GetFrameUniformity(id__);

            WriteIPDLParam(reply__, this, data);
            // Sentinel = 'data'
            (reply__)->WriteSentinel(67109275);

            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PWebRenderBridge::Msg_ShutdownSync__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebRenderBridge::Msg_ShutdownSync", OTHER);

            int32_t id__ = Id();
            if ((!((this)->RecvShutdownSync()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PWebRenderBridge::Reply_ShutdownSync(id__);


            if (mozilla::ipc::LoggingEnabledFor("PWebRenderBridgeParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebRenderBridgeParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebRenderBridgeParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebRenderBridgeParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebRenderBridgeParent::ClearSubtree() -> void
{
}



} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::layers::PWebRenderBridgeParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::layers::PWebRenderBridgeParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebRenderBridge", PWebRenderBridgeMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::layers::PWebRenderBridgeParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
