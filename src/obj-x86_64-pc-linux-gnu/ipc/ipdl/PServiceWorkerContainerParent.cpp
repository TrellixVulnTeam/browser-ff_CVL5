//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PServiceWorkerContainerParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/ServiceWorkerIPCUtils.h"

#include "mozilla/ipc/PBackgroundParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PServiceWorkerContainerParent::PServiceWorkerContainerParent() :
    mozilla::ipc::IProtocol(PServiceWorkerContainerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PServiceWorkerContainerParent);
}

PServiceWorkerContainerParent::~PServiceWorkerContainerParent()
{
    MOZ_COUNT_DTOR(PServiceWorkerContainerParent);
}

auto PServiceWorkerContainerParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PServiceWorkerContainerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PServiceWorkerContainerParent::Send__delete__(PServiceWorkerContainerParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PServiceWorkerContainer::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PServiceWorkerContainerParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PServiceWorkerContainerMsgStart, actor);
    return sendok__;
}

auto PServiceWorkerContainerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PServiceWorkerContainerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PServiceWorkerContainerParent::OnMessageReceived(const Message& msg__) -> PServiceWorkerContainerParent::Result
{
    switch (msg__.type()) {
    case PServiceWorkerContainer::Msg_Teardown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_Teardown", OTHER);

            if ((!((this)->RecvTeardown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerContainer::Msg_Register__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_Register", OTHER);

            PickleIterator iter__{msg__};
            IPCClientInfo aClientInfo{};
            nsCString aScopeURL{};
            nsCString aScriptURL{};
            ServiceWorkerUpdateViaCache aUpdateViaCache{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClientInfo)))))) {
                FatalError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aClientInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422315085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScopeURL)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aScopeURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 285999951)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScriptURL)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aScriptURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358220746)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUpdateViaCache)))))) {
                FatalError("Error deserializing 'ServiceWorkerUpdateViaCache'");
                return MsgValueError;
            }
            // Sentinel = 'aUpdateViaCache'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 772408761)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ServiceWorkerUpdateViaCache'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            RegisterResolver resolver = [proxy__, seqno__, id__](const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PServiceWorkerContainerParent* self__ = static_cast<PServiceWorkerContainerParent*>(proxy__->Get());

                IPC::Message* reply__ = PServiceWorkerContainer::Reply_Register(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aResult'
                (reply__)->WriteSentinel(185205473);

                if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PServiceWorkerContainerParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvRegister(std::move(aClientInfo), std::move(aScopeURL), std::move(aScriptURL), std::move(aUpdateViaCache), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerContainer::Msg_GetRegistration__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetRegistration", OTHER);

            PickleIterator iter__{msg__};
            IPCClientInfo aClientInfo{};
            nsCString aURL{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClientInfo)))))) {
                FatalError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aClientInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422315085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURL)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 58130773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetRegistrationResolver resolver = [proxy__, seqno__, id__](const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PServiceWorkerContainerParent* self__ = static_cast<PServiceWorkerContainerParent*>(proxy__->Get());

                IPC::Message* reply__ = PServiceWorkerContainer::Reply_GetRegistration(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aResult'
                (reply__)->WriteSentinel(185205473);

                if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PServiceWorkerContainerParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvGetRegistration(std::move(aClientInfo), std::move(aURL), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerContainer::Msg_GetRegistrations__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetRegistrations", OTHER);

            PickleIterator iter__{msg__};
            IPCClientInfo aClientInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClientInfo)))))) {
                FatalError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aClientInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422315085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetRegistrationsResolver resolver = [proxy__, seqno__, id__](const IPCServiceWorkerRegistrationDescriptorListOrCopyableErrorResult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PServiceWorkerContainerParent* self__ = static_cast<PServiceWorkerContainerParent*>(proxy__->Get());

                IPC::Message* reply__ = PServiceWorkerContainer::Reply_GetRegistrations(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aResult'
                (reply__)->WriteSentinel(185205473);

                if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PServiceWorkerContainerParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvGetRegistrations(std::move(aClientInfo), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerContainer::Msg_GetReady__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PServiceWorkerContainerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PServiceWorkerContainer::Msg_GetReady", OTHER);

            PickleIterator iter__{msg__};
            IPCClientInfo aClientInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClientInfo)))))) {
                FatalError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aClientInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 422315085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCClientInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            GetReadyResolver resolver = [proxy__, seqno__, id__](const IPCServiceWorkerRegistrationDescriptorOrCopyableErrorResult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PServiceWorkerContainerParent* self__ = static_cast<PServiceWorkerContainerParent*>(proxy__->Get());

                IPC::Message* reply__ = PServiceWorkerContainer::Reply_GetReady(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aResult'
                (reply__)->WriteSentinel(185205473);

                if (mozilla::ipc::LoggingEnabledFor("PServiceWorkerContainerParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PServiceWorkerContainerParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((this)->RecvGetReady(std::move(aClientInfo), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PServiceWorkerContainer::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PServiceWorkerContainerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PServiceWorkerContainerParent::Result
{
    return MsgNotKnown;
}

auto PServiceWorkerContainerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PServiceWorkerContainerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PServiceWorkerContainerParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PServiceWorkerContainerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PServiceWorkerContainerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PServiceWorkerContainer", PServiceWorkerContainerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PServiceWorkerContainerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
