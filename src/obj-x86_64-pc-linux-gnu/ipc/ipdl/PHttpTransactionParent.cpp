//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PHttpTransactionParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/HttpTransactionParent.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "nsHttpHeaderArray.h"
#include "nsHttpRequestHead.h"

#include "mozilla/net/PSocketProcessParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/net/PInputChannelThrottleQueueParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PHttpTransactionParent::PHttpTransactionParent() :
    mozilla::ipc::IProtocol(PHttpTransactionMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PHttpTransactionParent);
}

PHttpTransactionParent::~PHttpTransactionParent()
{
    MOZ_COUNT_DTOR(PHttpTransactionParent);
}

auto PHttpTransactionParent::Manager() const -> PSocketProcessParent*
{
    return static_cast<PSocketProcessParent*>(IProtocol::Manager());
}

auto PHttpTransactionParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHttpTransactionParent::Send__delete__(PHttpTransactionParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PHttpTransaction::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PHttpTransactionMsgStart, actor);
    return sendok__;
}

auto PHttpTransactionParent::SendInit(
        const uint32_t& caps,
        const HttpConnectionInfoCloneArgs& aArgs,
        const nsHttpRequestHead& reqHeaders,
        const mozilla::Maybe<IPCStream>& requestBody,
        const uint64_t& reqContentLength,
        const bool& reqBodyIncludesHeaders,
        const uint64_t& topLevelOuterContentWindowId,
        const uint8_t& httpTrafficCategory,
        const uint64_t& requestContextID,
        const uint32_t& classOfService,
        const uint32_t& initialRwin,
        const bool& responseTimeoutEnabled,
        const uint64_t& channelId,
        const bool& hasTransactionObserver,
        const mozilla::Maybe<H2PushedStreamArg>& pushedStreamArg,
        const mozilla::Maybe<PInputChannelThrottleQueueParent*>& throttleQueue,
        const bool& aIsDocumentLoad,
        const TimeStamp& aRedirectStart,
        const TimeStamp& aRedirectEnd) -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_Init(Id());

    WriteIPDLParam(msg__, this, caps);
    // Sentinel = 'caps'
    (msg__)->WriteSentinel(67502504);
    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);
    WriteIPDLParam(msg__, this, reqHeaders);
    // Sentinel = 'reqHeaders'
    (msg__)->WriteSentinel(367264773);
    WriteIPDLParam(msg__, this, requestBody);
    // Sentinel = 'requestBody'
    (msg__)->WriteSentinel(466814104);
    WriteIPDLParam(msg__, this, reqContentLength);
    // Sentinel = 'reqContentLength'
    (msg__)->WriteSentinel(927794822);
    WriteIPDLParam(msg__, this, reqBodyIncludesHeaders);
    // Sentinel = 'reqBodyIncludesHeaders'
    (msg__)->WriteSentinel(1689127114);
    WriteIPDLParam(msg__, this, topLevelOuterContentWindowId);
    // Sentinel = 'topLevelOuterContentWindowId'
    (msg__)->WriteSentinel(2779974491);
    WriteIPDLParam(msg__, this, httpTrafficCategory);
    // Sentinel = 'httpTrafficCategory'
    (msg__)->WriteSentinel(1295058878);
    WriteIPDLParam(msg__, this, requestContextID);
    // Sentinel = 'requestContextID'
    (msg__)->WriteSentinel(956761724);
    WriteIPDLParam(msg__, this, classOfService);
    // Sentinel = 'classOfService'
    (msg__)->WriteSentinel(704710045);
    WriteIPDLParam(msg__, this, initialRwin);
    // Sentinel = 'initialRwin'
    (msg__)->WriteSentinel(458818699);
    WriteIPDLParam(msg__, this, responseTimeoutEnabled);
    // Sentinel = 'responseTimeoutEnabled'
    (msg__)->WriteSentinel(1769408770);
    WriteIPDLParam(msg__, this, channelId);
    // Sentinel = 'channelId'
    (msg__)->WriteSentinel(301138823);
    WriteIPDLParam(msg__, this, hasTransactionObserver);
    // Sentinel = 'hasTransactionObserver'
    (msg__)->WriteSentinel(1727531275);
    WriteIPDLParam(msg__, this, pushedStreamArg);
    // Sentinel = 'pushedStreamArg'
    (msg__)->WriteSentinel(833160720);
    WriteIPDLParam(msg__, this, throttleQueue);
    // Sentinel = 'throttleQueue'
    (msg__)->WriteSentinel(653919612);
    WriteIPDLParam(msg__, this, aIsDocumentLoad);
    // Sentinel = 'aIsDocumentLoad'
    (msg__)->WriteSentinel(774440413);
    WriteIPDLParam(msg__, this, aRedirectStart);
    // Sentinel = 'aRedirectStart'
    (msg__)->WriteSentinel(690554274);
    WriteIPDLParam(msg__, this, aRedirectEnd);
    // Sentinel = 'aRedirectEnd'
    (msg__)->WriteSentinel(505808043);




    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_Init", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionParent::SendCancelPump(const nsresult& status) -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_CancelPump(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_CancelPump", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionParent::SendSuspendPump() -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_SuspendPump(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_SuspendPump", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionParent::SendResumePump() -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_ResumePump(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_ResumePump", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionParent::SendSetDNSWasRefreshed() -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_SetDNSWasRefreshed(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_SetDNSWasRefreshed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionParent::SendDontReuseConnection() -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_DontReuseConnection(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_DontReuseConnection", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionParent::SendSetH2WSConnRefTaken() -> bool
{
    IPC::Message* msg__ = PHttpTransaction::Msg_SetH2WSConnRefTaken(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpTransactionParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpTransaction::Msg_SetH2WSConnRefTaken", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpTransactionParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpTransactionParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpTransactionParent::OnMessageReceived(const Message& msg__) -> PHttpTransactionParent::Result
{
    switch (msg__.type()) {
    case PHttpTransaction::Msg_OnStartRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnStartRequest", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};
            mozilla::Maybe<nsHttpResponseHead> responseHead{};
            nsCString securityInfoSerialization{};
            bool proxyConnectFailed{};
            TimingStructArgs timings{};
            int32_t proxyConnectResponseCode{};
            nsTArray<uint8_t> dataForSniffer{};
            mozilla::Maybe<nsCString> altSvcUsed{};
            bool dataToChildProcess{};
            bool restarted{};
            uint32_t HTTPSSVCReceivedStage{};
            bool supportsHttp3{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(responseHead)))))) {
                FatalError("Error deserializing 'nsHttpResponseHead?'");
                return MsgValueError;
            }
            // Sentinel = 'responseHead'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 549651682)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsHttpResponseHead?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(securityInfoSerialization)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'securityInfoSerialization'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2263026275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(proxyConnectFailed)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'proxyConnectFailed'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1194002258)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(timings)))))) {
                FatalError("Error deserializing 'TimingStructArgs'");
                return MsgValueError;
            }
            // Sentinel = 'timings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200868604)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimingStructArgs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(proxyConnectResponseCode)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'proxyConnectResponseCode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2099382743)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dataForSniffer)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'dataForSniffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 690816399)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(altSvcUsed)))))) {
                FatalError("Error deserializing 'nsCString?'");
                return MsgValueError;
            }
            // Sentinel = 'altSvcUsed'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 370344959)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dataToChildProcess)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'dataToChildProcess'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1114769185)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(restarted)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'restarted'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 323421135)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(HTTPSSVCReceivedStage)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'HTTPSSVCReceivedStage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1328154523)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(supportsHttp3)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'supportsHttp3'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 663487844)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionParent*>(this))->RecvOnStartRequest(std::move(status), std::move(responseHead), std::move(securityInfoSerialization), std::move(proxyConnectFailed), std::move(timings), std::move(proxyConnectResponseCode), std::move(dataForSniffer), std::move(altSvcUsed), std::move(dataToChildProcess), std::move(restarted), std::move(HTTPSSVCReceivedStage), std::move(supportsHttp3))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_OnTransportStatus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnTransportStatus", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};
            int64_t progress{};
            int64_t progressMax{};
            mozilla::Maybe<NetworkAddressArg> networkAddressArg{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(progress)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'progress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 261292918)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(progressMax)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'progressMax'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 471205020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(networkAddressArg)))))) {
                FatalError("Error deserializing 'NetworkAddressArg?'");
                return MsgValueError;
            }
            // Sentinel = 'networkAddressArg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1062471403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NetworkAddressArg?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionParent*>(this))->RecvOnTransportStatus(std::move(status), std::move(progress), std::move(progressMax), std::move(networkAddressArg))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_OnDataAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnDataAvailable", OTHER);

            PickleIterator iter__{msg__};
            nsCString data{};
            uint64_t offset{};
            uint32_t count{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(offset)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'offset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 147653256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(count)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'count'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106889770)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionParent*>(this))->RecvOnDataAvailable(std::move(data), std::move(offset), std::move(count))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_OnStopRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnStopRequest", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};
            bool responseIsComplete{};
            int64_t transferSize{};
            TimingStructArgs timings{};
            mozilla::Maybe<nsHttpHeaderArray> responseTrailers{};
            mozilla::Maybe<TransactionObserverResult> transactionObserverResult{};
            TimeStamp lastActiveTabOptimization{};
            uint32_t caps{};
            HttpConnectionInfoCloneArgs connInfoArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(responseIsComplete)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'responseIsComplete'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1188956005)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transferSize)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'transferSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 551814401)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(timings)))))) {
                FatalError("Error deserializing 'TimingStructArgs'");
                return MsgValueError;
            }
            // Sentinel = 'timings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200868604)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimingStructArgs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(responseTrailers)))))) {
                FatalError("Error deserializing 'nsHttpHeaderArray?'");
                return MsgValueError;
            }
            // Sentinel = 'responseTrailers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 961873590)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsHttpHeaderArray?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(transactionObserverResult)))))) {
                FatalError("Error deserializing 'TransactionObserverResult?'");
                return MsgValueError;
            }
            // Sentinel = 'transactionObserverResult'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2271873646)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TransactionObserverResult?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(lastActiveTabOptimization)))))) {
                FatalError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            // Sentinel = 'lastActiveTabOptimization'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2190412335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeStamp'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(caps)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'caps'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67502504)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(connInfoArgs)))))) {
                FatalError("Error deserializing 'HttpConnectionInfoCloneArgs'");
                return MsgValueError;
            }
            // Sentinel = 'connInfoArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 521340104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HttpConnectionInfoCloneArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionParent*>(this))->RecvOnStopRequest(std::move(status), std::move(responseIsComplete), std::move(transferSize), std::move(timings), std::move(responseTrailers), std::move(transactionObserverResult), std::move(lastActiveTabOptimization), std::move(caps), std::move(connInfoArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_OnInitFailed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnInitFailed", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionParent*>(this))->RecvOnInitFailed(std::move(status))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Msg_OnH2PushStream__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpTransactionParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpTransactionParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpTransaction::Msg_OnH2PushStream", OTHER);

            PickleIterator iter__{msg__};
            uint32_t pushedStreamId{};
            nsCString resourceUrl{};
            nsCString requestString{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pushedStreamId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'pushedStreamId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 731579811)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resourceUrl)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'resourceUrl'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 471270556)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestString)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'requestString'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 650970497)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<HttpTransactionParent*>(this))->RecvOnH2PushStream(std::move(pushedStreamId), std::move(resourceUrl), std::move(requestString))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpTransaction::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHttpTransactionParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpTransactionParent::Result
{
    return MsgNotKnown;
}

auto PHttpTransactionParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpTransactionParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHttpTransactionParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PHttpTransactionParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PHttpTransactionParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHttpTransaction", PHttpTransactionMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PHttpTransactionParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
