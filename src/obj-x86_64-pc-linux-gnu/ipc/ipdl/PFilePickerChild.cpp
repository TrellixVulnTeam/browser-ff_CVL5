//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PFilePickerChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/IPCCore.h"

#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PFilePickerChild::PFilePickerChild() :
    mozilla::ipc::IProtocol(PFilePickerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PFilePickerChild);
}

PFilePickerChild::~PFilePickerChild()
{
    MOZ_COUNT_DTOR(PFilePickerChild);
}

auto PFilePickerChild::Manager() const -> PBrowserChild*
{
    return static_cast<PBrowserChild*>(IProtocol::Manager());
}

auto PFilePickerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PFilePickerChild::SendOpen(
        const int16_t& selectedType,
        const bool& addToRecentDocs,
        const nsString& defaultFile,
        const nsString& defaultExtension,
        const nsTArray<nsString>& filters,
        const nsTArray<nsString>& filterNames,
        const nsTArray<nsString>& rawFilters,
        const nsString& displayDirectory,
        const nsString& displaySpecialDirectory,
        const nsString& okButtonLabel,
        const int16_t& capture) -> bool
{
    IPC::Message* msg__ = PFilePicker::Msg_Open(Id());

    WriteIPDLParam(msg__, this, selectedType);
    // Sentinel = 'selectedType'
    (msg__)->WriteSentinel(539100396);
    WriteIPDLParam(msg__, this, addToRecentDocs);
    // Sentinel = 'addToRecentDocs'
    (msg__)->WriteSentinel(772343255);
    WriteIPDLParam(msg__, this, defaultFile);
    // Sentinel = 'defaultFile'
    (msg__)->WriteSentinel(443941990);
    WriteIPDLParam(msg__, this, defaultExtension);
    // Sentinel = 'defaultExtension'
    (msg__)->WriteSentinel(932447907);
    WriteIPDLParam(msg__, this, filters);
    // Sentinel = 'filters'
    (msg__)->WriteSentinel(196674298);
    WriteIPDLParam(msg__, this, filterNames);
    // Sentinel = 'filterNames'
    (msg__)->WriteSentinel(451937403);
    WriteIPDLParam(msg__, this, rawFilters);
    // Sentinel = 'rawFilters'
    (msg__)->WriteSentinel(376505380);
    WriteIPDLParam(msg__, this, displayDirectory);
    // Sentinel = 'displayDirectory'
    (msg__)->WriteSentinel(938935980);
    WriteIPDLParam(msg__, this, displaySpecialDirectory);
    // Sentinel = 'displaySpecialDirectory'
    (msg__)->WriteSentinel(1884555629);
    WriteIPDLParam(msg__, this, okButtonLabel);
    // Sentinel = 'okButtonLabel'
    (msg__)->WriteSentinel(617153847);
    WriteIPDLParam(msg__, this, capture);
    // Sentinel = 'capture'
    (msg__)->WriteSentinel(195691253);




    if (mozilla::ipc::LoggingEnabledFor("PFilePickerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PFilePickerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PFilePicker::Msg_Open", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PFilePickerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PFilePickerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PFilePickerChild::OnMessageReceived(const Message& msg__) -> PFilePickerChild::Result
{
    switch (msg__.type()) {
    case PFilePicker::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PFilePickerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PFilePickerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PFilePicker::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PFilePickerChild* actor{};
            MaybeInputData data{};
            int16_t result{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PFilePicker'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PFilePicker'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PFilePicker'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'MaybeInputData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeInputData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(result)))))) {
                FatalError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            // Sentinel = 'result'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223840)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__(std::move(data), std::move(result))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PFilePickerMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PFilePickerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PFilePickerChild::Result
{
    return MsgNotKnown;
}

auto PFilePickerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PFilePickerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PFilePickerChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PFilePickerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PFilePickerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PFilePicker", PFilePickerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PFilePickerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
