//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/media/PMediaChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/media/MediaChild.h"

#include "mozilla/dom/PContentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace media {


auto PMediaChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PMediaChild::PMediaChild() :
    mozilla::ipc::IProtocol(PMediaMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PMediaChild);
}

PMediaChild::~PMediaChild()
{
    MOZ_COUNT_DTOR(PMediaChild);
}

auto PMediaChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PMediaChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PMediaChild::SendGetPrincipalKey(
        const PrincipalInfo& aPrincipal,
        const bool& aPersist,
        mozilla::ipc::ResolveCallback<nsCString>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PMedia::Msg_GetPrincipalKey(Id());

    WriteIPDLParam(msg__, this, aPrincipal);
    // Sentinel = 'aPrincipal'
    (msg__)->WriteSentinel(364381188);
    WriteIPDLParam(msg__, this, aPersist);
    // Sentinel = 'aPersist'
    (msg__)->WriteSentinel(238617420);




    if (mozilla::ipc::LoggingEnabledFor("PMediaChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMedia::Msg_GetPrincipalKey", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PMediaChild::SendGetPrincipalKey(
        const PrincipalInfo& aPrincipal,
        const bool& aPersist) -> RefPtr<GetPrincipalKeyPromise>
{
    RefPtr<MozPromise<nsCString, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsCString, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendGetPrincipalKey(std::move(aPrincipal), std::move(aPersist), [promise__](nsCString&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PMediaChild::SendSanitizeOriginKeys(
        const uint64_t& aSinceWhen,
        const bool& aOnlyPrivateBrowsing) -> bool
{
    IPC::Message* msg__ = PMedia::Msg_SanitizeOriginKeys(Id());

    WriteIPDLParam(msg__, this, aSinceWhen);
    // Sentinel = 'aSinceWhen'
    (msg__)->WriteSentinel(354419686);
    WriteIPDLParam(msg__, this, aOnlyPrivateBrowsing);
    // Sentinel = 'aOnlyPrivateBrowsing'
    (msg__)->WriteSentinel(1416300586);




    if (mozilla::ipc::LoggingEnabledFor("PMediaChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMediaChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMedia::Msg_SanitizeOriginKeys", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMediaChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PMediaChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PMediaChild::OnMessageReceived(const Message& msg__) -> PMediaChild::Result
{
    switch (msg__.type()) {
    case PMedia::Reply_GetPrincipalKey__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMedia::Msg_GetPrincipalKey", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsCString> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsCString aKey{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aKey)))))) {
                    FatalError("Error deserializing 'nsCString'");
                    return MsgValueError;
                }
                // Sentinel = 'aKey'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 61604235)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aKey));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PMedia::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMediaChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMediaChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMedia::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PMediaChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PMedia'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PMedia'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PMedia'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<Child*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PMediaMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PMediaChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PMediaChild::Result
{
    return MsgNotKnown;
}

auto PMediaChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PMediaChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PMediaChild::ClearSubtree() -> void
{
}



} // namespace media
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::media::PMediaChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::media::PMediaChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PMedia", PMediaMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::media::PMediaChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
