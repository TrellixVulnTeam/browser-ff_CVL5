//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PTCPSocketChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/network/TCPSocketChild.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/net/NeckoMessageUtils.h"

#include "mozilla/net/PNeckoChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PTCPSocketChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PTCPSocketChild::PTCPSocketChild() :
    mozilla::ipc::IProtocol(PTCPSocketMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PTCPSocketChild);
}

PTCPSocketChild::~PTCPSocketChild()
{
    MOZ_COUNT_DTOR(PTCPSocketChild);
}

auto PTCPSocketChild::Manager() const -> PNeckoChild*
{
    return static_cast<PNeckoChild*>(IProtocol::Manager());
}

auto PTCPSocketChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PTCPSocketChild::SendOpen(
        const nsString& host,
        const uint16_t& port,
        const bool& useSSL,
        const bool& useArrayBuffers) -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_Open(Id());

    WriteIPDLParam(msg__, this, host);
    // Sentinel = 'host'
    (msg__)->WriteSentinel(72024511);
    WriteIPDLParam(msg__, this, port);
    // Sentinel = 'port'
    (msg__)->WriteSentinel(73990598);
    WriteIPDLParam(msg__, this, useSSL);
    // Sentinel = 'useSSL'
    (msg__)->WriteSentinel(142737984);
    WriteIPDLParam(msg__, this, useArrayBuffers);
    // Sentinel = 'useArrayBuffers'
    (msg__)->WriteSentinel(815007258);




    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_Open", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketChild::SendData(const SendableData& data) -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_Data(Id());

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_Data", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketChild::SendStartTLS() -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_StartTLS(Id());





    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_StartTLS", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketChild::SendSuspend() -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_Suspend(Id());





    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_Suspend", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketChild::SendResume() -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_Resume(Id());





    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_Resume", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketChild::SendClose() -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_Close(Id());





    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_Close", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketChild::SendRequestDelete() -> bool
{
    IPC::Message* msg__ = PTCPSocket::Msg_RequestDelete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg_RequestDelete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PTCPSocketChild::Send__delete__(PTCPSocketChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PTCPSocket::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PTCPSocketChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PTCPSocket::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PTCPSocketMsgStart, actor);
    return sendok__;
}

auto PTCPSocketChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTCPSocketChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTCPSocketChild::OnMessageReceived(const Message& msg__) -> PTCPSocketChild::Result
{
    switch (msg__.type()) {
    case PTCPSocket::Msg_Callback__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_Callback", OTHER);

            PickleIterator iter__{msg__};
            nsString type{};
            CallbackData data{};
            uint32_t readyState{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(type)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'type'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 75760067)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'CallbackData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CallbackData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(readyState)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'readyState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 377750551)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::TCPSocketChild*>(this))->RecvCallback(std::move(type), std::move(data), std::move(readyState))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_UpdateBufferedAmount__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_UpdateBufferedAmount", OTHER);

            PickleIterator iter__{msg__};
            uint32_t bufferedAmount{};
            uint32_t trackingNumber{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(bufferedAmount)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'bufferedAmount'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 711919032)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(trackingNumber)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'trackingNumber'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 726664637)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::TCPSocketChild*>(this))->RecvUpdateBufferedAmount(std::move(bufferedAmount), std::move(trackingNumber))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Msg_RequestDelete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg_RequestDelete", OTHER);

            if ((!((static_cast<mozilla::dom::TCPSocketChild*>(this))->RecvRequestDelete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPSocket::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PTCPSocket::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPSocketChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTCPSocketChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTCPSocket::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PTCPSocketChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PTCPSocket'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PTCPSocket'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PTCPSocket'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::TCPSocketChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PTCPSocketMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PTCPSocketChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PTCPSocketChild::Result
{
    return MsgNotKnown;
}

auto PTCPSocketChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PTCPSocketChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTCPSocketChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PTCPSocketChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PTCPSocketChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PTCPSocket", PTCPSocketMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PTCPSocketChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
