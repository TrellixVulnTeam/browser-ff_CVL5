//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginInstanceParent.h"
#include "mozilla/plugins/PPluginInstanceChild.h"
#include "mozilla/plugins/PPluginScriptableObjectParent.h"
#include "mozilla/plugins/PPluginScriptableObjectChild.h"
#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/PProfilerParent.h"
#include "mozilla/PProfilerChild.h"
#include "mozilla/plugins/PFunctionBrokerParent.h"
#include "mozilla/plugins/PFunctionBrokerChild.h"
#include "mozilla/plugins/PPluginModule.h"
#include "mozilla/plugins/PPluginModuleParent.h"
#include "mozilla/plugins/PPluginModuleChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {
namespace PPluginModule {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginModuleParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::plugins::PPluginModuleChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_ProcessNativeEventsInInterruptCall(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ProcessNativeEventsInInterruptCall__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitProfiler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitProfiler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DisableFlashProtectedMode(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DisableFlashProtectedMode__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ModuleSupportsAsyncRender(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ModuleSupportsAsyncRender__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ModuleSupportsAsyncRender(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ModuleSupportsAsyncRender__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NP_GetEntryPoints(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NP_GetEntryPoints__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NP_GetEntryPoints(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NP_GetEntryPoints__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NP_Initialize(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NP_Initialize__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NP_Initialize(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NP_Initialize__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PPluginInstanceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPluginInstanceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPluginInstanceConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPluginInstanceConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SyncNPP_New(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SyncNPP_New__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SyncNPP_New(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SyncNPP_New__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NP_Shutdown(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NP_Shutdown__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NP_Shutdown(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NP_Shutdown__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_OptionalFunctionsSupported(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OptionalFunctionsSupported__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_OptionalFunctionsSupported(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_OptionalFunctionsSupported__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPP_ClearSiteData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_ClearSiteData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NPP_GetSitesWithData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_GetSitesWithData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetAudioSessionData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetAudioSessionData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetParentHangTimeout(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetParentHangTimeout__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitCrashReporter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitCrashReporter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_InitCrashReporter(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_InitCrashReporter__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SettingChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SettingChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NPP_SetValue_NPNVaudioDeviceChangeDetails(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_SetValue_NPNVaudioDeviceChangeDetails__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NPP_SetValue_NPNVaudioDeviceStateChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPP_SetValue_NPNVaudioDeviceStateChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitPluginModuleChild(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitPluginModuleChild__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitPluginFunctionBroker(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitPluginFunctionBroker__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_BackUpXResources(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_BackUpXResources__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ProcessSomeEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ProcessSomeEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ProcessSomeEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ProcessSomeEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PluginShowWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PluginShowWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PluginHideWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PluginHideWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetCursor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetCursor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ShowCursor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShowCursor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PushCursor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PushCursor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PopCursor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PopCursor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NPN_SetException(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetException__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetException(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetException__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NPN_ReloadPlugins(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_ReloadPlugins__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyContentModuleDestroyed(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyContentModuleDestroyed__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReturnClearSiteData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReturnClearSiteData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReturnSitesWithData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReturnSitesWithData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NPN_SetValue_NPPVpluginRequiresAudioDeviceChanges__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::INTERRUPT, IPC::Message::REPLY));
}

} // namespace PPluginModule
} // namespace plugins
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PluginSettings|
//
namespace mozilla {
namespace plugins {
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PluginSettings>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).javascriptEnabled());
    // Sentinel = 'javascriptEnabled'
    (aMsg)->WriteSentinel(1053034211);
    WriteIPDLParam(aMsg, aActor, (aVar).asdEnabled());
    // Sentinel = 'asdEnabled'
    (aMsg)->WriteSentinel(357893092);
    WriteIPDLParam(aMsg, aActor, (aVar).isOffline());
    // Sentinel = 'isOffline'
    (aMsg)->WriteSentinel(302580640);
    WriteIPDLParam(aMsg, aActor, (aVar).supportsXembed());
    // Sentinel = 'supportsXembed'
    (aMsg)->WriteSentinel(763823590);
    WriteIPDLParam(aMsg, aActor, (aVar).supportsWindowless());
    // Sentinel = 'supportsWindowless'
    (aMsg)->WriteSentinel(1243744192);
    WriteIPDLParam(aMsg, aActor, (aVar).userAgent());
    // Sentinel = 'userAgent'
    (aMsg)->WriteSentinel(311231407);
    WriteIPDLParam(aMsg, aActor, (aVar).nativeCursorsSupported());
    // Sentinel = 'nativeCursorsSupported'
    (aMsg)->WriteSentinel(1775307071);
}

auto IPDLParamTraits<mozilla::plugins::PluginSettings>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->javascriptEnabled())))))) {
        aActor->FatalError("Error deserializing 'javascriptEnabled' (bool) member of 'PluginSettings'");
        return false;
    }
    // Sentinel = 'javascriptEnabled'
    if ((!((aMsg)->ReadSentinel(aIter, 1053034211)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'javascriptEnabled' (bool) member of 'PluginSettings'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->asdEnabled())))))) {
        aActor->FatalError("Error deserializing 'asdEnabled' (bool) member of 'PluginSettings'");
        return false;
    }
    // Sentinel = 'asdEnabled'
    if ((!((aMsg)->ReadSentinel(aIter, 357893092)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'asdEnabled' (bool) member of 'PluginSettings'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isOffline())))))) {
        aActor->FatalError("Error deserializing 'isOffline' (bool) member of 'PluginSettings'");
        return false;
    }
    // Sentinel = 'isOffline'
    if ((!((aMsg)->ReadSentinel(aIter, 302580640)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isOffline' (bool) member of 'PluginSettings'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->supportsXembed())))))) {
        aActor->FatalError("Error deserializing 'supportsXembed' (bool) member of 'PluginSettings'");
        return false;
    }
    // Sentinel = 'supportsXembed'
    if ((!((aMsg)->ReadSentinel(aIter, 763823590)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'supportsXembed' (bool) member of 'PluginSettings'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->supportsWindowless())))))) {
        aActor->FatalError("Error deserializing 'supportsWindowless' (bool) member of 'PluginSettings'");
        return false;
    }
    // Sentinel = 'supportsWindowless'
    if ((!((aMsg)->ReadSentinel(aIter, 1243744192)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'supportsWindowless' (bool) member of 'PluginSettings'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->userAgent())))))) {
        aActor->FatalError("Error deserializing 'userAgent' (nsCString) member of 'PluginSettings'");
        return false;
    }
    // Sentinel = 'userAgent'
    if ((!((aMsg)->ReadSentinel(aIter, 311231407)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'userAgent' (nsCString) member of 'PluginSettings'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->nativeCursorsSupported())))))) {
        aActor->FatalError("Error deserializing 'nativeCursorsSupported' (bool) member of 'PluginSettings'");
        return false;
    }
    // Sentinel = 'nativeCursorsSupported'
    if ((!((aMsg)->ReadSentinel(aIter, 1775307071)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nativeCursorsSupported' (bool) member of 'PluginSettings'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
