//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PClientSourceChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"

#include "mozilla/dom/PClientManagerChild.h"
#include "mozilla/dom/PClientSourceOpChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PClientSourceChild::RecvPClientSourceOpConstructor(
        PClientSourceOpChild* actor,
        const ClientOpConstructorArgs& aArgs) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PClientSourceChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PClientSourceChild::PClientSourceChild() :
    mozilla::ipc::IProtocol(PClientSourceMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PClientSourceChild);
}

PClientSourceChild::~PClientSourceChild()
{
    MOZ_COUNT_DTOR(PClientSourceChild);
}

auto PClientSourceChild::Manager() const -> PClientManagerChild*
{
    return static_cast<PClientManagerChild*>(IProtocol::Manager());
}

auto PClientSourceChild::ManagedPClientSourceOpChild(nsTArray<PClientSourceOpChild*>& aArr) const -> void
{
    mManagedPClientSourceOpChild.ToArray(aArr);
}

auto PClientSourceChild::ManagedPClientSourceOpChild() const -> const ManagedContainer<PClientSourceOpChild>&
{
    return mManagedPClientSourceOpChild;
}

auto PClientSourceChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPClientSourceOpChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPClientSourceOpChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PClientSourceChild::OpenPClientSourceOpEndpoint(PClientSourceOpChild* aActor) -> ManagedEndpoint<PClientSourceOpParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientSourceOpChild actor");
        return ManagedEndpoint<PClientSourceOpParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPClientSourceOpChild.PutEntry(aActor);

    return ManagedEndpoint<PClientSourceOpParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PClientSourceChild::BindPClientSourceOpEndpoint(
        ManagedEndpoint<PClientSourceOpChild> aEndpoint,
        PClientSourceOpChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PClientSourceOpChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPClientSourceOpChild.PutEntry(aActor);

    return true;
}

auto PClientSourceChild::SendWorkerSyncPing() -> bool
{
    IPC::Message* msg__ = PClientSource::Msg_WorkerSyncPing(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg_WorkerSyncPing", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PClientSource::Msg_WorkerSyncPing", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PClientSourceChild::SendTeardown() -> bool
{
    IPC::Message* msg__ = PClientSource::Msg_Teardown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg_Teardown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PClientSourceChild::SendExecutionReady(const ClientSourceExecutionReadyArgs& aArgs) -> bool
{
    IPC::Message* msg__ = PClientSource::Msg_ExecutionReady(Id());

    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg_ExecutionReady", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PClientSourceChild::SendFreeze() -> bool
{
    IPC::Message* msg__ = PClientSource::Msg_Freeze(Id());





    if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg_Freeze", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PClientSourceChild::SendThaw() -> bool
{
    IPC::Message* msg__ = PClientSource::Msg_Thaw(Id());





    if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg_Thaw", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PClientSourceChild::SendInheritController(const ClientControlledArgs& aArgs) -> bool
{
    IPC::Message* msg__ = PClientSource::Msg_InheritController(Id());

    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);




    if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg_InheritController", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PClientSourceChild::SendNoteDOMContentLoaded() -> bool
{
    IPC::Message* msg__ = PClientSource::Msg_NoteDOMContentLoaded(Id());





    if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PClientSourceChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PClientSource::Msg_NoteDOMContentLoaded", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PClientSourceChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientSourceOpMsgStart:
{
            PClientSourceOpChild* actor = static_cast<PClientSourceOpChild*>(aListener);
            auto& container = mManagedPClientSourceOpChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PClientSourceChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PClientSourceOpMsgStart:
        this->DeallocPClientSourceOpChild(static_cast<PClientSourceOpChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PClientSourceChild::OnMessageReceived(const Message& msg__) -> PClientSourceChild::Result
{
    switch (msg__.type()) {
    case PClientSource::Msg_PClientSourceOpConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg_PClientSourceOpConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            ClientOpConstructorArgs aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'ClientOpConstructorArgs'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClientOpConstructorArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PClientSourceOpChild* actor = (this)->AllocPClientSourceOpChild(aArgs);
            if (!actor) {
                NS_WARNING("Cannot bind null PClientSourceOpChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPClientSourceOpChild.PutEntry(actor);

            if ((!((this)->RecvPClientSourceOpConstructor(std::move(actor), std::move(aArgs))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PClientSource::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PClientSourceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PClientSourceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PClientSource::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PClientSourceChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PClientSource'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PClientSource'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PClientSource'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PClientSourceMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PClientSourceChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PClientSourceChild::Result
{
    return MsgNotKnown;
}

auto PClientSourceChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PClientSourceChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PClientSourceChild::ClearSubtree() -> void
{
    for (auto it = mManagedPClientSourceOpChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPClientSourceOpChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPClientSourceOpChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPClientSourceOpChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PClientSourceChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PClientSourceChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PClientSource", PClientSourceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PClientSourceChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
