//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/PHandlerService.h"
#include "mozilla/dom/PHandlerServiceParent.h"
#include "mozilla/dom/PHandlerServiceChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PHandlerService {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PHandlerServiceParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PHandlerServiceChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_FillHandlerInfo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FillHandlerInfo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_FillHandlerInfo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_FillHandlerInfo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ExistsForProtocolOS(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ExistsForProtocolOS__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ExistsForProtocolOS(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ExistsForProtocolOS__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ExistsForProtocol(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ExistsForProtocol__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_ExistsForProtocol(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_ExistsForProtocol__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_Exists(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Exists__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_Exists(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_Exists__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetTypeFromExtension(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetTypeFromExtension__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetTypeFromExtension(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetTypeFromExtension__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetMIMEInfoFromOS(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetMIMEInfoFromOS__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetMIMEInfoFromOS(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetMIMEInfoFromOS__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetApplicationDescription(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetApplicationDescription__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetApplicationDescription(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetApplicationDescription__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PHandlerService
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HandlerApp|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::HandlerApp>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).detailedDescription());
    // Sentinel = 'detailedDescription'
    (aMsg)->WriteSentinel(1280903105);
}

auto IPDLParamTraits<mozilla::dom::HandlerApp>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'HandlerApp'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'HandlerApp'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->detailedDescription())))))) {
        aActor->FatalError("Error deserializing 'detailedDescription' (nsString) member of 'HandlerApp'");
        return false;
    }
    // Sentinel = 'detailedDescription'
    if ((!((aMsg)->ReadSentinel(aIter, 1280903105)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'detailedDescription' (nsString) member of 'HandlerApp'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HandlerInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::HandlerInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
    WriteIPDLParam(aMsg, aActor, (aVar).isMIMEInfo());
    // Sentinel = 'isMIMEInfo'
    (aMsg)->WriteSentinel(325452689);
    WriteIPDLParam(aMsg, aActor, (aVar).description());
    // Sentinel = 'description'
    (aMsg)->WriteSentinel(461833381);
    WriteIPDLParam(aMsg, aActor, (aVar).alwaysAskBeforeHandling());
    // Sentinel = 'alwaysAskBeforeHandling'
    (aMsg)->WriteSentinel(1848379689);
    WriteIPDLParam(aMsg, aActor, (aVar).extensions());
    // Sentinel = 'extensions'
    (aMsg)->WriteSentinel(397018193);
    WriteIPDLParam(aMsg, aActor, (aVar).preferredApplicationHandler());
    // Sentinel = 'preferredApplicationHandler'
    (aMsg)->WriteSentinel(2583497458);
    WriteIPDLParam(aMsg, aActor, (aVar).possibleApplicationHandlers());
    // Sentinel = 'possibleApplicationHandlers'
    (aMsg)->WriteSentinel(2600209159);
    WriteIPDLParam(aMsg, aActor, (aVar).preferredAction());
    // Sentinel = 'preferredAction'
    (aMsg)->WriteSentinel(826344990);
}

auto IPDLParamTraits<mozilla::dom::HandlerInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (nsCString) member of 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (nsCString) member of 'HandlerInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isMIMEInfo())))))) {
        aActor->FatalError("Error deserializing 'isMIMEInfo' (bool) member of 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'isMIMEInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 325452689)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isMIMEInfo' (bool) member of 'HandlerInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->description())))))) {
        aActor->FatalError("Error deserializing 'description' (nsString) member of 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'description'
    if ((!((aMsg)->ReadSentinel(aIter, 461833381)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'description' (nsString) member of 'HandlerInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->alwaysAskBeforeHandling())))))) {
        aActor->FatalError("Error deserializing 'alwaysAskBeforeHandling' (bool) member of 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'alwaysAskBeforeHandling'
    if ((!((aMsg)->ReadSentinel(aIter, 1848379689)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'alwaysAskBeforeHandling' (bool) member of 'HandlerInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->extensions())))))) {
        aActor->FatalError("Error deserializing 'extensions' (nsCString[]) member of 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'extensions'
    if ((!((aMsg)->ReadSentinel(aIter, 397018193)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'extensions' (nsCString[]) member of 'HandlerInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preferredApplicationHandler())))))) {
        aActor->FatalError("Error deserializing 'preferredApplicationHandler' (HandlerApp) member of 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'preferredApplicationHandler'
    if ((!((aMsg)->ReadSentinel(aIter, 2583497458)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preferredApplicationHandler' (HandlerApp) member of 'HandlerInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->possibleApplicationHandlers())))))) {
        aActor->FatalError("Error deserializing 'possibleApplicationHandlers' (HandlerApp[]) member of 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'possibleApplicationHandlers'
    if ((!((aMsg)->ReadSentinel(aIter, 2600209159)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'possibleApplicationHandlers' (HandlerApp[]) member of 'HandlerInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->preferredAction())))))) {
        aActor->FatalError("Error deserializing 'preferredAction' (long) member of 'HandlerInfo'");
        return false;
    }
    // Sentinel = 'preferredAction'
    if ((!((aMsg)->ReadSentinel(aIter, 826344990)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'preferredAction' (long) member of 'HandlerInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
