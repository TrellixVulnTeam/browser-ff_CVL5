//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PRemoteDecoderChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/RemoteDecoderChild.h"
#include "mozilla/RemoteMediaData.h"
#include "mozilla/dom/MediaIPCUtils.h"

#include "mozilla/PRemoteDecoderManagerChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


MOZ_IMPLICIT PRemoteDecoderChild::PRemoteDecoderChild() :
    mozilla::ipc::IProtocol(PRemoteDecoderMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PRemoteDecoderChild);
}

PRemoteDecoderChild::~PRemoteDecoderChild()
{
    MOZ_COUNT_DTOR(PRemoteDecoderChild);
}

auto PRemoteDecoderChild::Manager() const -> PRemoteDecoderManagerChild*
{
    return static_cast<PRemoteDecoderManagerChild*>(IProtocol::Manager());
}

auto PRemoteDecoderChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PRemoteDecoderChild::SendConstruct(
        mozilla::ipc::ResolveCallback<MediaResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteDecoder::Msg_Construct(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Construct", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteDecoderChild::SendConstruct() -> RefPtr<ConstructPromise>
{
    RefPtr<MozPromise<MediaResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<MediaResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendConstruct([promise__](MediaResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteDecoderChild::SendInit(
        mozilla::ipc::ResolveCallback<InitResultIPDL>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteDecoder::Msg_Init(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Init", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteDecoderChild::SendInit() -> RefPtr<InitPromise>
{
    RefPtr<MozPromise<InitResultIPDL, ResponseRejectReason, true>::Private> promise__ = new MozPromise<InitResultIPDL, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendInit([promise__](InitResultIPDL&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteDecoderChild::SendDecode(
        ArrayOfRemoteMediaRawData* data,
        mozilla::ipc::ResolveCallback<DecodeResultIPDL>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteDecoder::Msg_Decode(Id());

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Decode", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteDecoderChild::SendDecode(ArrayOfRemoteMediaRawData* data) -> RefPtr<DecodePromise>
{
    RefPtr<MozPromise<DecodeResultIPDL, ResponseRejectReason, true>::Private> promise__ = new MozPromise<DecodeResultIPDL, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendDecode(std::move(data), [promise__](DecodeResultIPDL&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteDecoderChild::SendFlush(
        mozilla::ipc::ResolveCallback<MediaResult>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteDecoder::Msg_Flush(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Flush", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteDecoderChild::SendFlush() -> RefPtr<FlushPromise>
{
    RefPtr<MozPromise<MediaResult, ResponseRejectReason, true>::Private> promise__ = new MozPromise<MediaResult, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendFlush([promise__](MediaResult&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteDecoderChild::SendDrain(
        mozilla::ipc::ResolveCallback<DecodeResultIPDL>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteDecoder::Msg_Drain(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Drain", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteDecoderChild::SendDrain() -> RefPtr<DrainPromise>
{
    RefPtr<MozPromise<DecodeResultIPDL, ResponseRejectReason, true>::Private> promise__ = new MozPromise<DecodeResultIPDL, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendDrain([promise__](DecodeResultIPDL&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteDecoderChild::SendShutdown(
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PRemoteDecoder::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Shutdown", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PRemoteDecoderChild::SendShutdown() -> RefPtr<ShutdownPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendShutdown([promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PRemoteDecoderChild::SendSetSeekThreshold(const TimeUnit& time) -> bool
{
    IPC::Message* msg__ = PRemoteDecoder::Msg_SetSeekThreshold(Id());

    WriteIPDLParam(msg__, this, time);
    // Sentinel = 'time'
    (msg__)->WriteSentinel(72221104);




    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_SetSeekThreshold", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PRemoteDecoderChild::Send__delete__(PRemoteDecoderChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PRemoteDecoder::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PRemoteDecoderChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PRemoteDecoder::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PRemoteDecoderMsgStart, actor);
    return sendok__;
}

auto PRemoteDecoderChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteDecoderChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteDecoderChild::OnMessageReceived(const Message& msg__) -> PRemoteDecoderChild::Result
{
    switch (msg__.type()) {
    case PRemoteDecoder::Reply_Construct__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Construct", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<MediaResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                MediaResult result{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(result)))))) {
                    FatalError("Error deserializing 'MediaResult'");
                    return MsgValueError;
                }
                // Sentinel = 'result'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223840)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'MediaResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(result));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRemoteDecoder::Reply_Init__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Init", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<InitResultIPDL> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                InitResultIPDL result{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(result)))))) {
                    FatalError("Error deserializing 'InitResultIPDL'");
                    return MsgValueError;
                }
                // Sentinel = 'result'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223840)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'InitResultIPDL'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(result));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRemoteDecoder::Reply_Decode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Decode", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<DecodeResultIPDL> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                DecodeResultIPDL result{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(result)))))) {
                    FatalError("Error deserializing 'DecodeResultIPDL'");
                    return MsgValueError;
                }
                // Sentinel = 'result'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223840)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'DecodeResultIPDL'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(result));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRemoteDecoder::Reply_Flush__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Flush", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<MediaResult> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                MediaResult error{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(error)))))) {
                    FatalError("Error deserializing 'MediaResult'");
                    return MsgValueError;
                }
                // Sentinel = 'error'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107741739)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'MediaResult'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(error));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRemoteDecoder::Reply_Drain__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Drain", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<DecodeResultIPDL> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                DecodeResultIPDL result{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(result)))))) {
                    FatalError("Error deserializing 'DecodeResultIPDL'");
                    return MsgValueError;
                }
                // Sentinel = 'result'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223840)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'DecodeResultIPDL'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(result));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRemoteDecoder::Reply_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Shutdown", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool unused{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(unused)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'unused'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 155517589)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(unused));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PRemoteDecoder::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemoteDecoderChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteDecoderChild::Result
{
    return MsgNotKnown;
}

auto PRemoteDecoderChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteDecoderChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemoteDecoderChild::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PRemoteDecoderChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PRemoteDecoderChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemoteDecoder", PRemoteDecoderMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PRemoteDecoderChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
