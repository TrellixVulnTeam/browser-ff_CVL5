//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gfx/PVRGPUChild.h"
#include "VRGPUChild.h"
#include "mozilla/ProfilerLabels.h"


#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gfx {


auto PVRGPUChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PVRGPUChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PVRGPUChild::EnteredCxxStack() -> void
{
}

auto PVRGPUChild::ExitedCxxStack() -> void
{
}

auto PVRGPUChild::EnteredCall() -> void
{
}

auto PVRGPUChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PVRGPUChild::PVRGPUChild() :
    mozilla::ipc::IToplevelProtocol("PVRGPUChild", PVRGPUMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PVRGPUChild);
}

PVRGPUChild::~PVRGPUChild()
{
    MOZ_COUNT_DTOR(PVRGPUChild);
}

auto PVRGPUChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PVRGPUChild::SendStartVRService() -> bool
{
    IPC::Message* msg__ = PVRGPU::Msg_StartVRService(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRGPU::Msg_StartVRService", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRGPUChild::SendStopVRService() -> bool
{
    IPC::Message* msg__ = PVRGPU::Msg_StopVRService(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRGPU::Msg_StopVRService", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRGPUChild::SendPuppetSubmit(const nsTArray<uint64_t>& aBuffer) -> bool
{
    IPC::Message* msg__ = PVRGPU::Msg_PuppetSubmit(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, aBuffer);
    // Sentinel = 'aBuffer'
    (msg__)->WriteSentinel(176751292);




    if (mozilla::ipc::LoggingEnabledFor("PVRGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRGPU::Msg_PuppetSubmit", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRGPUChild::SendPuppetReset() -> bool
{
    IPC::Message* msg__ = PVRGPU::Msg_PuppetReset(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRGPU::Msg_PuppetReset", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRGPUChild::SendPuppetCheckForCompletion() -> bool
{
    IPC::Message* msg__ = PVRGPU::Msg_PuppetCheckForCompletion(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PVRGPUChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PVRGPUChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PVRGPU::Msg_PuppetCheckForCompletion", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PVRGPUChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PVRGPUChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PVRGPUChild::OnMessageReceived(const Message& msg__) -> PVRGPUChild::Result
{
    switch (msg__.type()) {
    case PVRGPU::Msg_NotifyPuppetComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PVRGPUChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PVRGPUChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PVRGPU::Msg_NotifyPuppetComplete", OTHER);

            if ((!((static_cast<VRGPUChild*>(this))->RecvNotifyPuppetComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PVRGPUChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PVRGPUChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVRGPUChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PVRGPUChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PVRGPUChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRGPUChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PVRGPUChild::ClearSubtree() -> void
{
}



} // namespace gfx
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gfx::PVRGPUChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gfx::PVRGPUChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PVRGPU", PVRGPUMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gfx::PVRGPUChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
