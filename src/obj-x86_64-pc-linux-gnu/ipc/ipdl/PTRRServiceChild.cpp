//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PTRRServiceChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/TRRServiceChild.h"

#include "mozilla/net/PSocketProcessChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PTRRServiceChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PTRRServiceChild::PTRRServiceChild() :
    mozilla::ipc::IProtocol(PTRRServiceMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PTRRServiceChild);
}

PTRRServiceChild::~PTRRServiceChild()
{
    MOZ_COUNT_DTOR(PTRRServiceChild);
}

auto PTRRServiceChild::Manager() const -> PSocketProcessChild*
{
    return static_cast<PSocketProcessChild*>(IProtocol::Manager());
}

auto PTRRServiceChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PTRRServiceChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTRRServiceChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTRRServiceChild::OnMessageReceived(const Message& msg__) -> PTRRServiceChild::Result
{
    switch (msg__.type()) {
    case PTRRService::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTRRServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTRRServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTRRService::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PTRRServiceChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PTRRService'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PTRRService'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PTRRService'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<TRRServiceChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PTRRServiceMsgStart, actor);

            return MsgProcessed;
        }
    case PTRRService::Msg_UpdatePlatformDNSInformation__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTRRServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTRRServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTRRService::Msg_UpdatePlatformDNSInformation", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> aSuffixList{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSuffixList)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aSuffixList'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 438174835)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<TRRServiceChild*>(this))->RecvUpdatePlatformDNSInformation(std::move(aSuffixList))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTRRService::Msg_UpdateParentalControlEnabled__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTRRServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTRRServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTRRService::Msg_UpdateParentalControlEnabled", OTHER);

            PickleIterator iter__{msg__};
            bool aEnabled{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 224789261)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<TRRServiceChild*>(this))->RecvUpdateParentalControlEnabled(std::move(aEnabled))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTRRService::Msg_ClearDNSCache__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTRRServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTRRServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTRRService::Msg_ClearDNSCache", OTHER);

            PickleIterator iter__{msg__};
            bool aTrrToo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aTrrToo)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aTrrToo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 183567052)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<TRRServiceChild*>(this))->RecvClearDNSCache(std::move(aTrrToo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTRRService::Msg_SetDetectedTrrURI__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTRRServiceChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PTRRServiceChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PTRRService::Msg_SetDetectedTrrURI", OTHER);

            PickleIterator iter__{msg__};
            nsCString aURI{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<TRRServiceChild*>(this))->RecvSetDetectedTrrURI(std::move(aURI))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PTRRServiceChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PTRRServiceChild::Result
{
    return MsgNotKnown;
}

auto PTRRServiceChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PTRRServiceChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTRRServiceChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PTRRServiceChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PTRRServiceChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PTRRService", PTRRServiceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PTRRServiceChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
