//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/hal_sandbox/PHalChild.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/dom/ReferrerInfoUtils.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/dom/PBrowserChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace hal_sandbox {


MOZ_IMPLICIT PHalChild::PHalChild() :
    mozilla::ipc::IProtocol(PHalMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PHalChild);
}

PHalChild::~PHalChild()
{
    MOZ_COUNT_DTOR(PHalChild);
}

auto PHalChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PHalChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHalChild::SendVibrate(
        const nsTArray<uint32_t>& pattern,
        const nsTArray<uint64_t>& id,
        PBrowserChild* browser) -> bool
{
    IPC::Message* msg__ = PHal::Msg_Vibrate(Id());

    WriteIPDLParam(msg__, this, pattern);
    // Sentinel = 'pattern'
    (msg__)->WriteSentinel(200409855);
    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    MOZ_RELEASE_ASSERT(browser, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, browser);
    // Sentinel = 'browser'
    (msg__)->WriteSentinel(201130757);




    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_Vibrate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendCancelVibrate(
        const nsTArray<uint64_t>& id,
        PBrowserChild* browser) -> bool
{
    IPC::Message* msg__ = PHal::Msg_CancelVibrate(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);
    MOZ_RELEASE_ASSERT(browser, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, browser);
    // Sentinel = 'browser'
    (msg__)->WriteSentinel(201130757);




    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_CancelVibrate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendEnableBatteryNotifications() -> bool
{
    IPC::Message* msg__ = PHal::Msg_EnableBatteryNotifications(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_EnableBatteryNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendDisableBatteryNotifications() -> bool
{
    IPC::Message* msg__ = PHal::Msg_DisableBatteryNotifications(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_DisableBatteryNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendGetCurrentBatteryInformation(BatteryInformation* aBatteryInfo) -> bool
{
    IPC::Message* msg__ = PHal::Msg_GetCurrentBatteryInformation(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_GetCurrentBatteryInformation", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHal::Msg_GetCurrentBatteryInformation", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aBatteryInfo)))) {
        FatalError("Error deserializing 'BatteryInformation'");
        return false;
    }
    // Sentinel = 'aBatteryInfo'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 509674697)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'BatteryInformation'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHalChild::SendEnableNetworkNotifications() -> bool
{
    IPC::Message* msg__ = PHal::Msg_EnableNetworkNotifications(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_EnableNetworkNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendDisableNetworkNotifications() -> bool
{
    IPC::Message* msg__ = PHal::Msg_DisableNetworkNotifications(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_DisableNetworkNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendGetCurrentNetworkInformation(NetworkInformation* aNetworkInfo) -> bool
{
    IPC::Message* msg__ = PHal::Msg_GetCurrentNetworkInformation(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_GetCurrentNetworkInformation", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHal::Msg_GetCurrentNetworkInformation", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aNetworkInfo)))) {
        FatalError("Error deserializing 'NetworkInformation'");
        return false;
    }
    // Sentinel = 'aNetworkInfo'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 522519768)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'NetworkInformation'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHalChild::SendModifyWakeLock(
        const nsString& aTopic,
        const WakeLockControl& aLockAdjust,
        const WakeLockControl& aHiddenAdjust,
        const uint64_t& aProcessID) -> bool
{
    IPC::Message* msg__ = PHal::Msg_ModifyWakeLock(Id());

    WriteIPDLParam(msg__, this, aTopic);
    // Sentinel = 'aTopic'
    (msg__)->WriteSentinel(137429601);
    WriteIPDLParam(msg__, this, aLockAdjust);
    // Sentinel = 'aLockAdjust'
    (msg__)->WriteSentinel(418710614);
    WriteIPDLParam(msg__, this, aHiddenAdjust);
    // Sentinel = 'aHiddenAdjust'
    (msg__)->WriteSentinel(575538457);
    WriteIPDLParam(msg__, this, aProcessID);
    // Sentinel = 'aProcessID'
    (msg__)->WriteSentinel(360907726);




    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_ModifyWakeLock", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendEnableWakeLockNotifications() -> bool
{
    IPC::Message* msg__ = PHal::Msg_EnableWakeLockNotifications(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_EnableWakeLockNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendDisableWakeLockNotifications() -> bool
{
    IPC::Message* msg__ = PHal::Msg_DisableWakeLockNotifications(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_DisableWakeLockNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendGetWakeLockInfo(
        const nsString& aTopic,
        WakeLockInformation* aWakeLockInfo) -> bool
{
    IPC::Message* msg__ = PHal::Msg_GetWakeLockInfo(Id());

    WriteIPDLParam(msg__, this, aTopic);
    // Sentinel = 'aTopic'
    (msg__)->WriteSentinel(137429601);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_GetWakeLockInfo", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHal::Msg_GetWakeLockInfo", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aWakeLockInfo)))) {
        FatalError("Error deserializing 'WakeLockInformation'");
        return false;
    }
    // Sentinel = 'aWakeLockInfo'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 577701119)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'WakeLockInformation'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHalChild::SendEnableScreenConfigurationNotifications() -> bool
{
    IPC::Message* msg__ = PHal::Msg_EnableScreenConfigurationNotifications(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_EnableScreenConfigurationNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendDisableScreenConfigurationNotifications() -> bool
{
    IPC::Message* msg__ = PHal::Msg_DisableScreenConfigurationNotifications(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_DisableScreenConfigurationNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendLockScreenOrientation(
        const ScreenOrientation& aOrientation,
        bool* allowed) -> bool
{
    IPC::Message* msg__ = PHal::Msg_LockScreenOrientation(Id());

    WriteIPDLParam(msg__, this, aOrientation);
    // Sentinel = 'aOrientation'
    (msg__)->WriteSentinel(524289262);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_LockScreenOrientation", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PHal::Msg_LockScreenOrientation", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, allowed)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'allowed'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 195101417)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PHalChild::SendUnlockScreenOrientation() -> bool
{
    IPC::Message* msg__ = PHal::Msg_UnlockScreenOrientation(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_UnlockScreenOrientation", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendEnableSensorNotifications(const SensorType& aSensor) -> bool
{
    IPC::Message* msg__ = PHal::Msg_EnableSensorNotifications(Id());

    WriteIPDLParam(msg__, this, aSensor);
    // Sentinel = 'aSensor'
    (msg__)->WriteSentinel(184156892);




    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_EnableSensorNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::SendDisableSensorNotifications(const SensorType& aSensor) -> bool
{
    IPC::Message* msg__ = PHal::Msg_DisableSensorNotifications(Id());

    WriteIPDLParam(msg__, this, aSensor);
    // Sentinel = 'aSensor'
    (msg__)->WriteSentinel(184156892);




    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg_DisableSensorNotifications", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHalChild::Send__delete__(PHalChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PHal::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHalChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHal::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PHalMsgStart, actor);
    return sendok__;
}

auto PHalChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHalChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHalChild::OnMessageReceived(const Message& msg__) -> PHalChild::Result
{
    switch (msg__.type()) {
    case PHal::Msg_NotifyBatteryChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_NotifyBatteryChange", OTHER);

            PickleIterator iter__{msg__};
            BatteryInformation aBatteryInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBatteryInfo)))))) {
                FatalError("Error deserializing 'BatteryInformation'");
                return MsgValueError;
            }
            // Sentinel = 'aBatteryInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 509674697)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BatteryInformation'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvNotifyBatteryChange(std::move(aBatteryInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_NotifyNetworkChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_NotifyNetworkChange", OTHER);

            PickleIterator iter__{msg__};
            NetworkInformation aNetworkInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNetworkInfo)))))) {
                FatalError("Error deserializing 'NetworkInformation'");
                return MsgValueError;
            }
            // Sentinel = 'aNetworkInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 522519768)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NetworkInformation'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvNotifyNetworkChange(std::move(aNetworkInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_NotifyWakeLockChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_NotifyWakeLockChange", OTHER);

            PickleIterator iter__{msg__};
            WakeLockInformation aWakeLockInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWakeLockInfo)))))) {
                FatalError("Error deserializing 'WakeLockInformation'");
                return MsgValueError;
            }
            // Sentinel = 'aWakeLockInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 577701119)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WakeLockInformation'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvNotifyWakeLockChange(std::move(aWakeLockInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_NotifyScreenConfigurationChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_NotifyScreenConfigurationChange", OTHER);

            PickleIterator iter__{msg__};
            ScreenConfiguration aScreenOrientation{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScreenOrientation)))))) {
                FatalError("Error deserializing 'ScreenConfiguration'");
                return MsgValueError;
            }
            // Sentinel = 'aScreenOrientation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1136396110)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenConfiguration'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvNotifyScreenConfigurationChange(std::move(aScreenOrientation))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Msg_NotifySensorChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHalChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHalChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHal::Msg_NotifySensorChange", OTHER);

            PickleIterator iter__{msg__};
            SensorData aSensorData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSensorData)))))) {
                FatalError("Error deserializing 'SensorData'");
                return MsgValueError;
            }
            // Sentinel = 'aSensorData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 434504790)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SensorData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvNotifySensorChange(std::move(aSensorData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHal::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHalChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHalChild::Result
{
    return MsgNotKnown;
}

auto PHalChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHalChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHalChild::ClearSubtree() -> void
{
}



} // namespace hal_sandbox
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::hal_sandbox::PHalChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::hal_sandbox::PHalChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHal", PHalMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::hal_sandbox::PHalChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
