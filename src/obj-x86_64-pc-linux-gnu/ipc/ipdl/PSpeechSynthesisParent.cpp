//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PSpeechSynthesisParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/SpeechSynthesisParent.h"

#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PSpeechSynthesisRequestParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PSpeechSynthesisParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PSpeechSynthesisParent::RecvPSpeechSynthesisRequestConstructor(
        PSpeechSynthesisRequestParent* actor,
        const nsString& aText,
        const nsString& aUri,
        const nsString& aLang,
        const float& aVolume,
        const float& aRate,
        const float& aPitch,
        const bool& aIsChrome) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PSpeechSynthesisParent::PSpeechSynthesisParent() :
    mozilla::ipc::IProtocol(PSpeechSynthesisMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PSpeechSynthesisParent);
}

PSpeechSynthesisParent::~PSpeechSynthesisParent()
{
    MOZ_COUNT_DTOR(PSpeechSynthesisParent);
}

auto PSpeechSynthesisParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PSpeechSynthesisParent::ManagedPSpeechSynthesisRequestParent(nsTArray<PSpeechSynthesisRequestParent*>& aArr) const -> void
{
    mManagedPSpeechSynthesisRequestParent.ToArray(aArr);
}

auto PSpeechSynthesisParent::ManagedPSpeechSynthesisRequestParent() const -> const ManagedContainer<PSpeechSynthesisRequestParent>&
{
    return mManagedPSpeechSynthesisRequestParent;
}

auto PSpeechSynthesisParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPSpeechSynthesisRequestParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPSpeechSynthesisRequestParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PSpeechSynthesisParent::OpenPSpeechSynthesisRequestEndpoint(PSpeechSynthesisRequestParent* aActor) -> ManagedEndpoint<PSpeechSynthesisRequestChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisRequestParent actor");
        return ManagedEndpoint<PSpeechSynthesisRequestChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPSpeechSynthesisRequestParent.PutEntry(aActor);

    return ManagedEndpoint<PSpeechSynthesisRequestChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PSpeechSynthesisParent::BindPSpeechSynthesisRequestEndpoint(
        ManagedEndpoint<PSpeechSynthesisRequestParent> aEndpoint,
        PSpeechSynthesisRequestParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PSpeechSynthesisRequestParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPSpeechSynthesisRequestParent.PutEntry(aActor);

    return true;
}

auto PSpeechSynthesisParent::SendVoiceAdded(const RemoteVoice& aVoice) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesis::Msg_VoiceAdded(Id());

    WriteIPDLParam(msg__, this, aVoice);
    // Sentinel = 'aVoice'
    (msg__)->WriteSentinel(136053336);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_VoiceAdded", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisParent::SendVoiceRemoved(const nsString& aUri) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesis::Msg_VoiceRemoved(Id());

    WriteIPDLParam(msg__, this, aUri);
    // Sentinel = 'aUri'
    (msg__)->WriteSentinel(64225682);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_VoiceRemoved", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisParent::SendSetDefaultVoice(
        const nsString& aUri,
        const bool& aIsDefault) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesis::Msg_SetDefaultVoice(Id());

    WriteIPDLParam(msg__, this, aUri);
    // Sentinel = 'aUri'
    (msg__)->WriteSentinel(64225682);
    WriteIPDLParam(msg__, this, aIsDefault);
    // Sentinel = 'aIsDefault'
    (msg__)->WriteSentinel(342098915);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_SetDefaultVoice", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisParent::SendIsSpeakingChanged(const bool& aIsSpeaking) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesis::Msg_IsSpeakingChanged(Id());

    WriteIPDLParam(msg__, this, aIsSpeaking);
    // Sentinel = 'aIsSpeaking'
    (msg__)->WriteSentinel(422577232);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_IsSpeakingChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisParent::SendNotifyVoicesChanged() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesis::Msg_NotifyVoicesChanged(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_NotifyVoicesChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisParent::SendInitialVoicesAndState(
        const nsTArray<RemoteVoice>& aVoices,
        const nsTArray<nsString>& aDefaults,
        const bool& aIsSpeaking) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesis::Msg_InitialVoicesAndState(Id());

    WriteIPDLParam(msg__, this, aVoices);
    // Sentinel = 'aVoices'
    (msg__)->WriteSentinel(182911691);
    WriteIPDLParam(msg__, this, aDefaults);
    // Sentinel = 'aDefaults'
    (msg__)->WriteSentinel(286327706);
    WriteIPDLParam(msg__, this, aIsSpeaking);
    // Sentinel = 'aIsSpeaking'
    (msg__)->WriteSentinel(422577232);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PSpeechSynthesisParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_InitialVoicesAndState", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PSpeechSynthesisParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PSpeechSynthesisRequestMsgStart:
{
            PSpeechSynthesisRequestParent* actor = static_cast<PSpeechSynthesisRequestParent*>(aListener);
            auto& container = mManagedPSpeechSynthesisRequestParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PSpeechSynthesisParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PSpeechSynthesisRequestMsgStart:
        static_cast<SpeechSynthesisParent*>(this)->DeallocPSpeechSynthesisRequestParent(static_cast<PSpeechSynthesisRequestParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PSpeechSynthesisParent::OnMessageReceived(const Message& msg__) -> PSpeechSynthesisParent::Result
{
    switch (msg__.type()) {
    case PSpeechSynthesis::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PSpeechSynthesisParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PSpeechSynthesis'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PSpeechSynthesis'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PSpeechSynthesis'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<SpeechSynthesisParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PSpeechSynthesisMsgStart, actor);

            return MsgProcessed;
        }
    case PSpeechSynthesis::Msg_PSpeechSynthesisRequestConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PSpeechSynthesisParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PSpeechSynthesis::Msg_PSpeechSynthesisRequestConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsString aText{};
            nsString aUri{};
            nsString aLang{};
            float aVolume{};
            float aRate{};
            float aPitch{};
            bool aIsChrome{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aText)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aText'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 97321479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aUri)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aUri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 64225682)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLang)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aLang'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92275172)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aVolume)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aVolume'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 187368154)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRate)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aRate'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94503406)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPitch)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aPitch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 134873690)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsChrome)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsChrome'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 281871228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PSpeechSynthesisRequestParent* actor = (static_cast<SpeechSynthesisParent*>(this))->AllocPSpeechSynthesisRequestParent(aText, aUri, aLang, aVolume, aRate, aPitch, aIsChrome);
            if (!actor) {
                NS_WARNING("Cannot bind null PSpeechSynthesisRequestParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPSpeechSynthesisRequestParent.PutEntry(actor);

            if ((!((static_cast<SpeechSynthesisParent*>(this))->RecvPSpeechSynthesisRequestConstructor(std::move(actor), std::move(aText), std::move(aUri), std::move(aLang), std::move(aVolume), std::move(aRate), std::move(aPitch), std::move(aIsChrome))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PSpeechSynthesisParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisParent::Result
{
    return MsgNotKnown;
}

auto PSpeechSynthesisParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PSpeechSynthesisParent::ClearSubtree() -> void
{
    for (auto it = mManagedPSpeechSynthesisRequestParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPSpeechSynthesisRequestParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPSpeechSynthesisRequestParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPSpeechSynthesisRequestParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PSpeechSynthesisParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PSpeechSynthesisParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PSpeechSynthesis", PSpeechSynthesisMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PSpeechSynthesisParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
