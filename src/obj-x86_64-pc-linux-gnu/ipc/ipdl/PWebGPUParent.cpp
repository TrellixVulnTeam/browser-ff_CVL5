//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/webgpu/PWebGPUParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/ByteBufUtils.h"
#include "mozilla/layers/WebRenderMessageUtils.h"
#include "mozilla/webgpu/WebGPUParent.h"
#include "mozilla/webgpu/WebGPUSerialize.h"

#include "mozilla/layers/PCompositorBridgeParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace webgpu {


MOZ_IMPLICIT PWebGPUParent::PWebGPUParent() :
    mozilla::ipc::IProtocol(PWebGPUMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWebGPUParent);
}

PWebGPUParent::~PWebGPUParent()
{
    MOZ_COUNT_DTOR(PWebGPUParent);
}

auto PWebGPUParent::Manager() const -> PCompositorBridgeParent*
{
    return static_cast<PCompositorBridgeParent*>(IProtocol::Manager());
}

auto PWebGPUParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebGPUParent::SendError(
        const RawId& aDeviceId,
        const nsCString& message) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_Error(Id());

    WriteIPDLParam(msg__, this, aDeviceId);
    // Sentinel = 'aDeviceId'
    (msg__)->WriteSentinel(282526559);
    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_Error", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendDropAction(ByteBuf&& buf) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_DropAction(Id());

    WriteIPDLParam(msg__, this, std::move(buf));
    // Sentinel = 'buf'
    (msg__)->WriteSentinel(41484606);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_DropAction", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeAdapter(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeAdapter(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeAdapter", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeDevice(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeDevice(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeDevice", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreePipelineLayout(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreePipelineLayout(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreePipelineLayout", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeShaderModule(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeShaderModule(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeShaderModule", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeBindGroupLayout(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeBindGroupLayout(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeBindGroupLayout", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeBindGroup(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeBindGroup(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeBindGroup", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeCommandBuffer(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeCommandBuffer(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeCommandBuffer", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeRenderPipeline(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeRenderPipeline(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeRenderPipeline", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeComputePipeline(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeComputePipeline(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeComputePipeline", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeBuffer(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeBuffer(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeBuffer", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeTexture(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeTexture(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeTexture", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeTextureView(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeTextureView(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeTextureView", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::SendFreeSampler(const RawId& id) -> bool
{
    IPC::Message* msg__ = PWebGPU::Msg_FreeSampler(Id());

    WriteIPDLParam(msg__, this, id);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(20447438);




    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg_FreeSampler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebGPUParent::Send__delete__(PWebGPUParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PWebGPU::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebGPUParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebGPU::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PWebGPUMsgStart, actor);
    return sendok__;
}

auto PWebGPUParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebGPUParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebGPUParent::OnMessageReceived(const Message& msg__) -> PWebGPUParent::Result
{
    switch (msg__.type()) {
    case PWebGPU::Msg_DeviceAction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_DeviceAction", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            ByteBuf buf{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buf)))))) {
                FatalError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            // Sentinel = 'buf'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41484606)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvDeviceAction(std::move(selfId), std::move(buf))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_TextureAction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_TextureAction", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            RawId aDeviceId{};
            ByteBuf buf{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDeviceId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'aDeviceId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 282526559)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buf)))))) {
                FatalError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            // Sentinel = 'buf'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41484606)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvTextureAction(std::move(selfId), std::move(aDeviceId), std::move(buf))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_CommandEncoderAction__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_CommandEncoderAction", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            RawId aDeviceId{};
            ByteBuf buf{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDeviceId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'aDeviceId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 282526559)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(buf)))))) {
                FatalError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            // Sentinel = 'buf'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41484606)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ByteBuf'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvCommandEncoderAction(std::move(selfId), std::move(aDeviceId), std::move(buf))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_BumpImplicitBindGroupLayout__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_BumpImplicitBindGroupLayout", OTHER);

            PickleIterator iter__{msg__};
            RawId pipelineId{};
            bool isCompute{};
            uint32_t index{};
            RawId assignId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pipelineId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'pipelineId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 382731268)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isCompute)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'isCompute'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 307102650)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(index)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'index'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 104333849)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(assignId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'assignId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 248513331)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvBumpImplicitBindGroupLayout(std::move(pipelineId), std::move(isCompute), std::move(index), std::move(assignId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_InstanceRequestAdapter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_InstanceRequestAdapter", OTHER);

            PickleIterator iter__{msg__};
            GPURequestAdapterOptions options{};
            nsTArray<RawId> ids{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(options)))))) {
                FatalError("Error deserializing 'GPURequestAdapterOptions'");
                return MsgValueError;
            }
            // Sentinel = 'options'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 204735245)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GPURequestAdapterOptions'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(ids)))))) {
                FatalError("Error deserializing 'RawId[]'");
                return MsgValueError;
            }
            // Sentinel = 'ids'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41484609)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            InstanceRequestAdapterResolver resolver = [proxy__, seqno__, id__](const RawId& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWebGPUParent* self__ = static_cast<PWebGPUParent*>(proxy__->Get());

                IPC::Message* reply__ = PWebGPU::Reply_InstanceRequestAdapter(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'adapterId'
                (reply__)->WriteSentinel(301794191);

                if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWebGPUParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<WebGPUParent*>(this))->RecvInstanceRequestAdapter(std::move(options), std::move(ids), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_AdapterRequestDevice__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_AdapterRequestDevice", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            GPUDeviceDescriptor desc{};
            RawId newId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(desc)))))) {
                FatalError("Error deserializing 'GPUDeviceDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'desc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67895712)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GPUDeviceDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(newId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'newId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102367736)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvAdapterRequestDevice(std::move(selfId), std::move(desc), std::move(newId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_AdapterDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_AdapterDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvAdapterDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_BufferReturnShmem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferReturnShmem", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            Shmem shmem{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(shmem)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'shmem'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvBufferReturnShmem(std::move(selfId), std::move(shmem))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_BufferMap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferMap", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            WGPUHostMap hostMap{};
            uint64_t offset{};
            uint64_t size{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(hostMap)))))) {
                FatalError("Error deserializing 'WGPUHostMap'");
                return MsgValueError;
            }
            // Sentinel = 'hostMap'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 195101405)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WGPUHostMap'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(offset)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'offset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 147653256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(size)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'size'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 73662908)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            BufferMapResolver resolver = [proxy__, seqno__, id__](Shmem&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PWebGPUParent* self__ = static_cast<PWebGPUParent*>(proxy__->Get());

                IPC::Message* reply__ = PWebGPU::Reply_BufferMap(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, std::move(aParam));
                // Sentinel = 'sm'
                (reply__)->WriteSentinel(22348001);

                if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PWebGPUParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<WebGPUParent*>(this))->RecvBufferMap(std::move(selfId), std::move(hostMap), std::move(offset), std::move(size), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_BufferUnmap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferUnmap", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            Shmem shmem{};
            bool flush{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(shmem)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'shmem'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(flush)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'flush'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106955299)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvBufferUnmap(std::move(selfId), std::move(shmem), std::move(flush))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_BufferDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_BufferDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvBufferDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_TextureDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_TextureDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvTextureDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_TextureViewDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_TextureViewDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvTextureViewDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_SamplerDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_SamplerDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvSamplerDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_DeviceDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_DeviceDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvDeviceDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_CommandEncoderFinish__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_CommandEncoderFinish", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            RawId deviceId{};
            GPUCommandBufferDescriptor desc{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(deviceId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'deviceId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 242025246)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(desc)))))) {
                FatalError("Error deserializing 'GPUCommandBufferDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'desc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67895712)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GPUCommandBufferDescriptor'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvCommandEncoderFinish(std::move(selfId), std::move(deviceId), std::move(desc))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_CommandEncoderDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_CommandEncoderDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvCommandEncoderDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_CommandBufferDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_CommandBufferDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvCommandBufferDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_QueueSubmit__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_QueueSubmit", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            nsTArray<RawId> commandBuffers{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(commandBuffers)))))) {
                FatalError("Error deserializing 'RawId[]'");
                return MsgValueError;
            }
            // Sentinel = 'commandBuffers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 710280621)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvQueueSubmit(std::move(selfId), std::move(commandBuffers))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_QueueWriteBuffer__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_QueueWriteBuffer", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            RawId bufferId{};
            BufferAddress bufferOffset{};
            Shmem shmem{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(bufferId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'bufferId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 244122408)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(bufferOffset)))))) {
                FatalError("Error deserializing 'BufferAddress'");
                return MsgValueError;
            }
            // Sentinel = 'bufferOffset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 529138914)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'BufferAddress'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(shmem)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'shmem'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvQueueWriteBuffer(std::move(selfId), std::move(bufferId), std::move(bufferOffset), std::move(shmem))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_QueueWriteTexture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_QueueWriteTexture", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            WGPUTextureCopyView destination{};
            Shmem shmem{};
            WGPUTextureDataLayout layout{};
            WGPUExtent3d extent{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(destination)))))) {
                FatalError("Error deserializing 'WGPUTextureCopyView'");
                return MsgValueError;
            }
            // Sentinel = 'destination'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 463668387)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WGPUTextureCopyView'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(shmem)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'shmem'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(layout)))))) {
                FatalError("Error deserializing 'WGPUTextureDataLayout'");
                return MsgValueError;
            }
            // Sentinel = 'layout'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151126687)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WGPUTextureDataLayout'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(extent)))))) {
                FatalError("Error deserializing 'WGPUExtent3d'");
                return MsgValueError;
            }
            // Sentinel = 'extent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 151716505)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WGPUExtent3d'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvQueueWriteTexture(std::move(selfId), std::move(destination), std::move(shmem), std::move(layout), std::move(extent))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_BindGroupLayoutDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_BindGroupLayoutDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvBindGroupLayoutDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_PipelineLayoutDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_PipelineLayoutDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvPipelineLayoutDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_BindGroupDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_BindGroupDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvBindGroupDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_ShaderModuleDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_ShaderModuleDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvShaderModuleDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_ComputePipelineDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_ComputePipelineDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvComputePipelineDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_RenderPipelineDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_RenderPipelineDestroy", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvRenderPipelineDestroy(std::move(selfId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_DeviceCreateSwapChain__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_DeviceCreateSwapChain", OTHER);

            PickleIterator iter__{msg__};
            RawId selfId{};
            RawId queueId{};
            RGBDescriptor desc{};
            nsTArray<RawId> bufferIds{};
            ExternalImageId externalId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(selfId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'selfId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143196760)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(queueId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'queueId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 198050515)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(desc)))))) {
                FatalError("Error deserializing 'RGBDescriptor'");
                return MsgValueError;
            }
            // Sentinel = 'desc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67895712)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RGBDescriptor'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(bufferIds)))))) {
                FatalError("Error deserializing 'RawId[]'");
                return MsgValueError;
            }
            // Sentinel = 'bufferIds'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 304612251)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(externalId)))))) {
                FatalError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            // Sentinel = 'externalId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 388432913)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvDeviceCreateSwapChain(std::move(selfId), std::move(queueId), std::move(desc), std::move(bufferIds), std::move(externalId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_SwapChainPresent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_SwapChainPresent", OTHER);

            PickleIterator iter__{msg__};
            ExternalImageId externalId{};
            RawId textureId{};
            RawId commandEncoderId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(externalId)))))) {
                FatalError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            // Sentinel = 'externalId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 388432913)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(textureId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'textureId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 326828991)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(commandEncoderId)))))) {
                FatalError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            // Sentinel = 'commandEncoderId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 913180237)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RawId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvSwapChainPresent(std::move(externalId), std::move(textureId), std::move(commandEncoderId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_SwapChainDestroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_SwapChainDestroy", OTHER);

            PickleIterator iter__{msg__};
            ExternalImageId externalId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(externalId)))))) {
                FatalError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            // Sentinel = 'externalId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 388432913)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ExternalImageId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebGPUParent*>(this))->RecvSwapChainDestroy(std::move(externalId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebGPUParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebGPUParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebGPU::Msg_Shutdown", OTHER);

            if ((!((static_cast<WebGPUParent*>(this))->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebGPU::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebGPUParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebGPUParent::Result
{
    return MsgNotKnown;
}

auto PWebGPUParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebGPUParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebGPUParent::ClearSubtree() -> void
{
}



} // namespace webgpu
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::webgpu::PWebGPUParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::webgpu::PWebGPUParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebGPU", PWebGPUMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::webgpu::PWebGPUParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
