//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPVideoEncoderChild.h"
#include "GMPMessageUtils.h"
#include "GMPVideoEncoderChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"

#include "mozilla/gmp/PGMPContentChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


MOZ_IMPLICIT PGMPVideoEncoderChild::PGMPVideoEncoderChild() :
    mozilla::ipc::IProtocol(PGMPVideoEncoderMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PGMPVideoEncoderChild);
}

PGMPVideoEncoderChild::~PGMPVideoEncoderChild()
{
    MOZ_COUNT_DTOR(PGMPVideoEncoderChild);
}

auto PGMPVideoEncoderChild::Manager() const -> PGMPContentChild*
{
    return static_cast<PGMPContentChild*>(IProtocol::Manager());
}

auto PGMPVideoEncoderChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PGMPVideoEncoderChild::Send__delete__(PGMPVideoEncoderChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PGMPVideoEncoder::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PGMPVideoEncoderMsgStart, actor);
    return sendok__;
}

auto PGMPVideoEncoderChild::SendEncoded(
        const GMPVideoEncodedFrameData& aEncodedFrame,
        const nsTArray<uint8_t>& aCodecSpecificInfo) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_Encoded(Id());

    WriteIPDLParam(msg__, this, aEncodedFrame);
    // Sentinel = 'aEncodedFrame'
    (msg__)->WriteSentinel(578290943);
    WriteIPDLParam(msg__, this, aCodecSpecificInfo);
    // Sentinel = 'aCodecSpecificInfo'
    (msg__)->WriteSentinel(1089537778);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_Encoded", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderChild::SendError(const GMPErr& aErr) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_Error(Id());

    WriteIPDLParam(msg__, this, aErr);
    // Sentinel = 'aErr'
    (msg__)->WriteSentinel(61669771);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_Error", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderChild::SendShutdown() -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_Shutdown", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderChild::SendParentShmemForPool(Shmem&& aFrameBuffer) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_ParentShmemForPool(Id());

    WriteIPDLParam(msg__, this, std::move(aFrameBuffer));
    // Sentinel = 'aFrameBuffer'
    (msg__)->WriteSentinel(494732455);




    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_ParentShmemForPool", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPVideoEncoderChild::CallNeedShmem(
        const uint32_t& aEncodedBufferSize,
        Shmem* aMem) -> bool
{
    IPC::Message* msg__ = PGMPVideoEncoder::Msg_NeedShmem(Id());

    WriteIPDLParam(msg__, this, aEncodedBufferSize);
    // Sentinel = 'aEncodedBufferSize'
    (msg__)->WriteSentinel(1098319625);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_NeedShmem", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PGMPVideoEncoder::Msg_NeedShmem", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPVideoEncoderChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aMem)))) {
        FatalError("Error deserializing 'Shmem'");
        return false;
    }
    // Sentinel = 'aMem'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 61211009)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PGMPVideoEncoderChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPVideoEncoderChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPVideoEncoderChild::OnMessageReceived(const Message& msg__) -> PGMPVideoEncoderChild::Result
{
    switch (msg__.type()) {
    case PGMPVideoEncoder::Msg_InitEncode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_InitEncode", OTHER);

            PickleIterator iter__{msg__};
            GMPVideoCodec aCodecSettings{};
            nsTArray<uint8_t> aCodecSpecific{};
            int32_t aNumberOfCores{};
            uint32_t aMaxPayloadSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCodecSettings)))))) {
                FatalError("Error deserializing 'GMPVideoCodec'");
                return MsgValueError;
            }
            // Sentinel = 'aCodecSettings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 674629009)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPVideoCodec'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCodecSpecific)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aCodecSpecific'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 665847142)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNumberOfCores)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNumberOfCores'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681117052)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMaxPayloadSize)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMaxPayloadSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 780076525)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPVideoEncoderChild*>(this))->RecvInitEncode(std::move(aCodecSettings), std::move(aCodecSpecific), std::move(aNumberOfCores), std::move(aMaxPayloadSize))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_Encode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_Encode", OTHER);

            PickleIterator iter__{msg__};
            GMPVideoi420FrameData aInputFrame{};
            nsTArray<uint8_t> aCodecSpecificInfo{};
            nsTArray<GMPVideoFrameType> aFrameTypes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputFrame)))))) {
                FatalError("Error deserializing 'GMPVideoi420FrameData'");
                return MsgValueError;
            }
            // Sentinel = 'aInputFrame'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 434177117)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPVideoi420FrameData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCodecSpecificInfo)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'aCodecSpecificInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1089537778)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrameTypes)))))) {
                FatalError("Error deserializing 'GMPVideoFrameType[]'");
                return MsgValueError;
            }
            // Sentinel = 'aFrameTypes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 426378338)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GMPVideoFrameType[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPVideoEncoderChild*>(this))->RecvEncode(std::move(aInputFrame), std::move(aCodecSpecificInfo), std::move(aFrameTypes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_SetChannelParameters__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_SetChannelParameters", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aPacketLoss{};
            uint32_t aRTT{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPacketLoss)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPacketLoss'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 423363675)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRTT)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aRTT'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 58327388)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPVideoEncoderChild*>(this))->RecvSetChannelParameters(std::move(aPacketLoss), std::move(aRTT))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_SetRates__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_SetRates", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aNewBitRate{};
            uint32_t aFrameRate{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNewBitRate)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNewBitRate'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 415695927)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrameRate)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFrameRate'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 348128217)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPVideoEncoderChild*>(this))->RecvSetRates(std::move(aNewBitRate), std::move(aFrameRate))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_SetPeriodicKeyFrames__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_SetPeriodicKeyFrames", OTHER);

            PickleIterator iter__{msg__};
            bool aEnable{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnable)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnable'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 173605545)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPVideoEncoderChild*>(this))->RecvSetPeriodicKeyFrames(std::move(aEnable))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_EncodingComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_EncodingComplete", OTHER);

            if ((!((static_cast<GMPVideoEncoderChild*>(this))->RecvEncodingComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Msg_ChildShmemForPool__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPVideoEncoderChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPVideoEncoderChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMPVideoEncoder::Msg_ChildShmemForPool", OTHER);

            PickleIterator iter__{msg__};
            Shmem aEncodedBuffer{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEncodedBuffer)))))) {
                FatalError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            // Sentinel = 'aEncodedBuffer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 668927342)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Shmem'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPVideoEncoderChild*>(this))->RecvChildShmemForPool(std::move(aEncodedBuffer))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPVideoEncoder::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGMPVideoEncoderChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPVideoEncoderChild::Result
{
    return MsgNotKnown;
}

auto PGMPVideoEncoderChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPVideoEncoderChild::Result
{
    return MsgNotKnown;
}

auto PGMPVideoEncoderChild::ClearSubtree() -> void
{
}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPVideoEncoderChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPVideoEncoderChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMPVideoEncoder", PGMPVideoEncoderMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPVideoEncoderChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
