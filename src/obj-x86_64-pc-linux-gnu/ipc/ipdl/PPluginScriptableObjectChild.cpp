//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PPluginScriptableObjectChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/plugins/PluginScriptableObjectChild.h"

#include "mozilla/plugins/PPluginInstanceChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace plugins {


auto PPluginScriptableObjectChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PPluginScriptableObjectChild::PPluginScriptableObjectChild() :
    mozilla::ipc::IProtocol(PPluginScriptableObjectMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PPluginScriptableObjectChild);
}

PPluginScriptableObjectChild::~PPluginScriptableObjectChild()
{
    MOZ_COUNT_DTOR(PPluginScriptableObjectChild);
}

auto PPluginScriptableObjectChild::Manager() const -> PPluginInstanceChild*
{
    return static_cast<PPluginInstanceChild*>(IProtocol::Manager());
}

auto PPluginScriptableObjectChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PPluginScriptableObjectChild::Send__delete__(PPluginScriptableObjectChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PPluginScriptableObject::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PPluginScriptableObjectMsgStart, actor);
    return sendok__;
}

auto PPluginScriptableObjectChild::CallNPN_Evaluate(
        const nsCString& aScript,
        Variant* aResult,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_NPN_Evaluate(Id());

    WriteIPDLParam(msg__, this, aScript);
    // Sentinel = 'aScript'
    (msg__)->WriteSentinel(182846167);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_NPN_Evaluate", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_NPN_Evaluate", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'Variant'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Variant'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::CallHasMethod(
        const PluginIdentifier& aId,
        bool* aHasMethod) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_HasMethod(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_HasMethod", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_HasMethod", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aHasMethod)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aHasMethod'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 345637855)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::CallInvoke(
        const PluginIdentifier& aId,
        const nsTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_Invoke(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);
    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Invoke", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_Invoke", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'Variant'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Variant'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::CallInvokeDefault(
        const nsTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_InvokeDefault(Id());

    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_InvokeDefault", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_InvokeDefault", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'Variant'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Variant'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::CallHasProperty(
        const PluginIdentifier& aId,
        bool* aHasProperty) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_HasProperty(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_HasProperty", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_HasProperty", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aHasProperty)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aHasProperty'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 506987747)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::CallSetProperty(
        const PluginIdentifier& aId,
        const Variant& aValue,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_SetProperty(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);
    WriteIPDLParam(msg__, this, aValue);
    // Sentinel = 'aValue'
    (msg__)->WriteSentinel(135332447);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_SetProperty", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_SetProperty", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::CallRemoveProperty(
        const PluginIdentifier& aId,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_RemoveProperty(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_RemoveProperty", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_RemoveProperty", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::CallEnumerate(
        nsTArray<PluginIdentifier>* aProperties,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_Enumerate(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Enumerate", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_Enumerate", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aProperties)))) {
        FatalError("Error deserializing 'PluginIdentifier[]'");
        return false;
    }
    // Sentinel = 'aProperties'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 448791695)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PluginIdentifier[]'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::CallConstruct(
        const nsTArray<Variant>& aArgs,
        Variant* aResult,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_Construct(Id());

    WriteIPDLParam(msg__, this, aArgs);
    // Sentinel = 'aArgs'
    (msg__)->WriteSentinel(92602863);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Construct", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_Construct", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'Variant'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Variant'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::SendProtect() -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_Protect(Id());





    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Protect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginScriptableObjectChild::SendUnprotect() -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_Unprotect(Id());





    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Unprotect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPluginScriptableObjectChild::CallGetParentProperty(
        const PluginIdentifier& aId,
        Variant* aResult,
        bool* aSuccess) -> bool
{
    IPC::Message* msg__ = PPluginScriptableObject::Msg_GetParentProperty(Id());

    WriteIPDLParam(msg__, this, aId);
    // Sentinel = 'aId'
    (msg__)->WriteSentinel(35389711);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_GetParentProperty", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PPluginScriptableObject::Msg_GetParentProperty", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPluginScriptableObjectChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aResult)))) {
        FatalError("Error deserializing 'Variant'");
        return false;
    }
    // Sentinel = 'aResult'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 185205473)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Variant'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, aSuccess)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'aSuccess'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 236323643)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PPluginScriptableObjectChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PPluginScriptableObjectChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PPluginScriptableObjectChild::OnMessageReceived(const Message& msg__) -> PPluginScriptableObjectChild::Result
{
    switch (msg__.type()) {
    case PPluginScriptableObject::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PPluginScriptableObjectChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PPluginScriptableObject'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PPluginScriptableObject'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PPluginScriptableObject'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PPluginScriptableObjectMsgStart, actor);

            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Protect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Protect", OTHER);

            if ((!((static_cast<PluginScriptableObjectChild*>(this))->RecvProtect()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Unprotect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Unprotect", OTHER);

            if ((!((static_cast<PluginScriptableObjectChild*>(this))->RecvUnprotect()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginScriptableObjectChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginScriptableObjectChild::Result
{
    return MsgNotKnown;
}

auto PPluginScriptableObjectChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPluginScriptableObjectChild::Result
{
    switch (msg__.type()) {
    case PPluginScriptableObject::Msg_Invalidate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Invalidate", OTHER);

            int32_t id__ = Id();
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerInvalidate()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_Invalidate(id__);


            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_HasMethod__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_HasMethod", OTHER);

            PickleIterator iter__{msg__};
            PluginIdentifier aId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aHasMethod{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerHasMethod(std::move(aId), (&(aHasMethod)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_HasMethod(id__);

            WriteIPDLParam(reply__, this, aHasMethod);
            // Sentinel = 'aHasMethod'
            (reply__)->WriteSentinel(345637855);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Invoke__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Invoke", OTHER);

            PickleIterator iter__{msg__};
            PluginIdentifier aId{};
            nsTArray<Variant> aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'Variant[]'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Variant[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            Variant aResult{};
            bool aSuccess{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerInvoke(std::move(aId), std::move(aArgs), (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_Invoke(id__);

            WriteIPDLParam(reply__, this, aResult);
            // Sentinel = 'aResult'
            (reply__)->WriteSentinel(185205473);
            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_InvokeDefault__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_InvokeDefault", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<Variant> aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'Variant[]'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Variant[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            Variant aResult{};
            bool aSuccess{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerInvokeDefault(std::move(aArgs), (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_InvokeDefault(id__);

            WriteIPDLParam(reply__, this, aResult);
            // Sentinel = 'aResult'
            (reply__)->WriteSentinel(185205473);
            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_HasProperty__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_HasProperty", OTHER);

            PickleIterator iter__{msg__};
            PluginIdentifier aId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aHasProperty{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerHasProperty(std::move(aId), (&(aHasProperty)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_HasProperty(id__);

            WriteIPDLParam(reply__, this, aHasProperty);
            // Sentinel = 'aHasProperty'
            (reply__)->WriteSentinel(506987747);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_SetProperty__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_SetProperty", OTHER);

            PickleIterator iter__{msg__};
            PluginIdentifier aId{};
            Variant aValue{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aValue)))))) {
                FatalError("Error deserializing 'Variant'");
                return MsgValueError;
            }
            // Sentinel = 'aValue'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 135332447)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Variant'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSuccess{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerSetProperty(std::move(aId), std::move(aValue), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_SetProperty(id__);

            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_RemoveProperty__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_RemoveProperty", OTHER);

            PickleIterator iter__{msg__};
            PluginIdentifier aId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aSuccess{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerRemoveProperty(std::move(aId), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_RemoveProperty(id__);

            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Enumerate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Enumerate", OTHER);

            int32_t id__ = Id();
            nsTArray<PluginIdentifier> aProperties{};
            bool aSuccess{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerEnumerate((&(aProperties)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_Enumerate(id__);

            WriteIPDLParam(reply__, this, aProperties);
            // Sentinel = 'aProperties'
            (reply__)->WriteSentinel(448791695);
            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_Construct__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_Construct", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<Variant> aArgs{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aArgs)))))) {
                FatalError("Error deserializing 'Variant[]'");
                return MsgValueError;
            }
            // Sentinel = 'aArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 92602863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Variant[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            Variant aResult{};
            bool aSuccess{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerConstruct(std::move(aArgs), (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_Construct(id__);

            WriteIPDLParam(reply__, this, aResult);
            // Sentinel = 'aResult'
            (reply__)->WriteSentinel(185205473);
            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PPluginScriptableObject::Msg_GetChildProperty__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPluginScriptableObject::Msg_GetChildProperty", OTHER);

            PickleIterator iter__{msg__};
            PluginIdentifier aId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aId)))))) {
                FatalError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            // Sentinel = 'aId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 35389711)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PluginIdentifier'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aHasProperty{};
            bool aHasMethod{};
            Variant aResult{};
            bool aSuccess{};
            if ((!((static_cast<PluginScriptableObjectChild*>(this))->AnswerGetChildProperty(std::move(aId), (&(aHasProperty)), (&(aHasMethod)), (&(aResult)), (&(aSuccess)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PPluginScriptableObject::Reply_GetChildProperty(id__);

            WriteIPDLParam(reply__, this, aHasProperty);
            // Sentinel = 'aHasProperty'
            (reply__)->WriteSentinel(506987747);
            WriteIPDLParam(reply__, this, aHasMethod);
            // Sentinel = 'aHasMethod'
            (reply__)->WriteSentinel(345637855);
            WriteIPDLParam(reply__, this, aResult);
            // Sentinel = 'aResult'
            (reply__)->WriteSentinel(185205473);
            WriteIPDLParam(reply__, this, aSuccess);
            // Sentinel = 'aSuccess'
            (reply__)->WriteSentinel(236323643);

            if (mozilla::ipc::LoggingEnabledFor("PPluginScriptableObjectChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPluginScriptableObjectChild",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPluginScriptableObjectChild::ClearSubtree() -> void
{
}



} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PPluginScriptableObjectChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::plugins::PPluginScriptableObjectChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPluginScriptableObject", PPluginScriptableObjectMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::plugins::PPluginScriptableObjectChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
