//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundLSDatabaseParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/localstorage/SerializationHelpers.h"

#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/dom/PBackgroundLSSnapshotParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBackgroundLSDatabaseParent::RecvPBackgroundLSSnapshotConstructor(
        PBackgroundLSSnapshotParent* actor,
        const nsString& documentURI,
        const nsString& key,
        const bool& increasePeakUsage,
        const int64_t& requestedSize,
        const int64_t& minSize,
        LSSnapshotInitInfo* initInfo) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundLSDatabaseParent::PBackgroundLSDatabaseParent() :
    mozilla::ipc::IProtocol(PBackgroundLSDatabaseMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PBackgroundLSDatabaseParent);
}

PBackgroundLSDatabaseParent::~PBackgroundLSDatabaseParent()
{
    MOZ_COUNT_DTOR(PBackgroundLSDatabaseParent);
}

auto PBackgroundLSDatabaseParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PBackgroundLSDatabaseParent::ManagedPBackgroundLSSnapshotParent(nsTArray<PBackgroundLSSnapshotParent*>& aArr) const -> void
{
    mManagedPBackgroundLSSnapshotParent.ToArray(aArr);
}

auto PBackgroundLSDatabaseParent::ManagedPBackgroundLSSnapshotParent() const -> const ManagedContainer<PBackgroundLSSnapshotParent>&
{
    return mManagedPBackgroundLSSnapshotParent;
}

auto PBackgroundLSDatabaseParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundLSSnapshotParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundLSSnapshotParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundLSDatabaseParent::OpenPBackgroundLSSnapshotEndpoint(PBackgroundLSSnapshotParent* aActor) -> ManagedEndpoint<PBackgroundLSSnapshotChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundLSSnapshotParent actor");
        return ManagedEndpoint<PBackgroundLSSnapshotChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundLSSnapshotParent.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundLSSnapshotChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundLSDatabaseParent::BindPBackgroundLSSnapshotEndpoint(
        ManagedEndpoint<PBackgroundLSSnapshotParent> aEndpoint,
        PBackgroundLSSnapshotParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundLSSnapshotParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundLSSnapshotParent.PutEntry(aActor);

    return true;
}

auto PBackgroundLSDatabaseParent::Send__delete__(PBackgroundLSDatabaseParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PBackgroundLSDatabase::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSDatabaseParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PBackgroundLSDatabaseMsgStart, actor);
    return sendok__;
}

auto PBackgroundLSDatabaseParent::SendRequestAllowToClose() -> bool
{
    IPC::Message* msg__ = PBackgroundLSDatabase::Msg_RequestAllowToClose(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundLSDatabaseParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg_RequestAllowToClose", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundLSDatabaseParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundLSSnapshotMsgStart:
{
            PBackgroundLSSnapshotParent* actor = static_cast<PBackgroundLSSnapshotParent*>(aListener);
            auto& container = mManagedPBackgroundLSSnapshotParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundLSDatabaseParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundLSSnapshotMsgStart:
        this->DeallocPBackgroundLSSnapshotParent(static_cast<PBackgroundLSSnapshotParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundLSDatabaseParent::OnMessageReceived(const Message& msg__) -> PBackgroundLSDatabaseParent::Result
{
    switch (msg__.type()) {
    case PBackgroundLSDatabase::Msg_DeleteMe__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundLSDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg_DeleteMe", OTHER);

            if ((!((this)->RecvDeleteMe()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundLSDatabase::Msg_AllowToClose__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundLSDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg_AllowToClose", OTHER);

            if ((!((this)->RecvAllowToClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundLSDatabase::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundLSDatabaseParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundLSDatabaseParent::Result
{
    switch (msg__.type()) {
    case PBackgroundLSDatabase::Msg_PBackgroundLSSnapshotConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundLSDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundLSDatabase::Msg_PBackgroundLSSnapshotConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsString documentURI{};
            nsString key{};
            bool increasePeakUsage{};
            int64_t requestedSize{};
            int64_t minSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(documentURI)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'documentURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 453706832)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(key)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'key'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 42402122)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(increasePeakUsage)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'increasePeakUsage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1030686401)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requestedSize)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'requestedSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 646120814)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(minSize)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'minSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 192807648)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            LSSnapshotInitInfo initInfo{};
            PBackgroundLSSnapshotParent* actor = (this)->AllocPBackgroundLSSnapshotParent(documentURI, key, increasePeakUsage, requestedSize, minSize, (&(initInfo)));
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundLSSnapshotParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundLSSnapshotParent.PutEntry(actor);

            int32_t id__ = Id();
            if ((!((this)->RecvPBackgroundLSSnapshotConstructor(std::move(actor), std::move(documentURI), std::move(key), std::move(increasePeakUsage), std::move(requestedSize), std::move(minSize), (&(initInfo)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }
            reply__ = PBackgroundLSDatabase::Reply_PBackgroundLSSnapshotConstructor(id__);

            WriteIPDLParam(reply__, this, initInfo);
            // Sentinel = 'initInfo'
            (reply__)->WriteSentinel(246743873);

            if (mozilla::ipc::LoggingEnabledFor("PBackgroundLSDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundLSDatabaseParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundLSDatabaseParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundLSDatabaseParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundLSDatabaseParent::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundLSSnapshotParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundLSSnapshotParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundLSSnapshotParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundLSSnapshotParent.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundLSDatabaseParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundLSDatabaseParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundLSDatabase", PBackgroundLSDatabaseMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundLSDatabaseParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
