//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/ServiceWorkerIPCUtils.h"
#include "mozilla/dom/ServiceWorkerOpArgs.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerCheckScriptEvaluationOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerCheckScriptEvaluationOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerCheckScriptEvaluationOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerUpdateStateOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerUpdateStateOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).state());
    // Sentinel = 'state'
    (aMsg)->WriteSentinel(109314594);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerUpdateStateOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->state())))))) {
        aActor->FatalError("Error deserializing 'state' (ServiceWorkerState) member of 'ServiceWorkerUpdateStateOpArgs'");
        return false;
    }
    // Sentinel = 'state'
    if ((!((aMsg)->ReadSentinel(aIter, 109314594)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'state' (ServiceWorkerState) member of 'ServiceWorkerUpdateStateOpArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerTerminateWorkerOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerTerminateWorkerOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).shutdownStateId())), 4);
    // Sentinel = 'shutdownStateId'
    (aMsg)->WriteSentinel(854918699);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerTerminateWorkerOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->shutdownStateId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'shutdownStateId'
    if ((!((aMsg)->ReadSentinel(aIter, 854918699)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerLifeCycleEventOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerLifeCycleEventOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).eventName());
    // Sentinel = 'eventName'
    (aMsg)->WriteSentinel(310051748);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerLifeCycleEventOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->eventName())))))) {
        aActor->FatalError("Error deserializing 'eventName' (nsString) member of 'ServiceWorkerLifeCycleEventOpArgs'");
        return false;
    }
    // Sentinel = 'eventName'
    if ((!((aMsg)->ReadSentinel(aIter, 310051748)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'eventName' (nsString) member of 'ServiceWorkerLifeCycleEventOpArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OptionalPushData|
//
namespace mozilla {
namespace dom {
auto OptionalPushData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tvoid_t:
        {
            (ptr_void_t())->~void_t__tdef();
            break;
        }
    case TArrayOfuint8_t:
        {
            (ptr_ArrayOfuint8_t())->~ArrayOfuint8_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OptionalPushData::OptionalPushData(const void_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(aOther);
    mType = Tvoid_t;
}

MOZ_IMPLICIT OptionalPushData::OptionalPushData(void_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move(aOther));
    mType = Tvoid_t;
}

MOZ_IMPLICIT OptionalPushData::OptionalPushData(const nsTArray<uint8_t>& aOther)
{
    new (mozilla::KnownNotNull, ptr_ArrayOfuint8_t()) nsTArray<uint8_t>((aOther).Clone());
    mType = TArrayOfuint8_t;
}

MOZ_IMPLICIT OptionalPushData::OptionalPushData(nsTArray<uint8_t>&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ArrayOfuint8_t()) nsTArray<uint8_t>(std::move(aOther));
    mType = TArrayOfuint8_t;
}

MOZ_IMPLICIT OptionalPushData::OptionalPushData(const OptionalPushData& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t((aOther).get_void_t());
            break;
        }
    case TArrayOfuint8_t:
        {
            new (mozilla::KnownNotNull, ptr_ArrayOfuint8_t()) nsTArray<uint8_t>(((aOther).get_ArrayOfuint8_t()).Clone());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT OptionalPushData::OptionalPushData(OptionalPushData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t(std::move((aOther).get_void_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TArrayOfuint8_t:
        {
            new (mozilla::KnownNotNull, ptr_ArrayOfuint8_t()) nsTArray<uint8_t>(std::move((aOther).get_ArrayOfuint8_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

OptionalPushData::~OptionalPushData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OptionalPushData::operator=(const void_t& aRhs) -> OptionalPushData&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = aRhs;
    mType = Tvoid_t;
    return (*(this));
}

auto OptionalPushData::operator=(void_t&& aRhs) -> OptionalPushData&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = std::move(aRhs);
    mType = Tvoid_t;
    return (*(this));
}

auto OptionalPushData::operator=(const nsTArray<uint8_t>& aRhs) -> OptionalPushData&
{
    if (MaybeDestroy(TArrayOfuint8_t)) {
        new (mozilla::KnownNotNull, ptr_ArrayOfuint8_t()) nsTArray<uint8_t>;
    }
    (*(ptr_ArrayOfuint8_t())) = (aRhs).Clone();
    mType = TArrayOfuint8_t;
    return (*(this));
}

auto OptionalPushData::operator=(nsTArray<uint8_t>&& aRhs) -> OptionalPushData&
{
    if (MaybeDestroy(TArrayOfuint8_t)) {
        new (mozilla::KnownNotNull, ptr_ArrayOfuint8_t()) nsTArray<uint8_t>;
    }
    (*(ptr_ArrayOfuint8_t())) = std::move(aRhs);
    mType = TArrayOfuint8_t;
    return (*(this));
}

auto OptionalPushData::operator=(const OptionalPushData& aRhs) -> OptionalPushData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = (aRhs).get_void_t();
            break;
        }
    case TArrayOfuint8_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ArrayOfuint8_t()) nsTArray<uint8_t>;
            }
            (*(ptr_ArrayOfuint8_t())) = ((aRhs).get_ArrayOfuint8_t()).Clone();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OptionalPushData::operator=(OptionalPushData&& aRhs) -> OptionalPushData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = std::move((aRhs).get_void_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TArrayOfuint8_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ArrayOfuint8_t()) nsTArray<uint8_t>;
            }
            (*(ptr_ArrayOfuint8_t())) = std::move((aRhs).get_ArrayOfuint8_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::OptionalPushData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::OptionalPushData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'OptionalPushData'
    (aMsg)->WriteSentinel(917112417);

    switch (type) {
    case union__::Tvoid_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_void_t());
            // Sentinel = 'Tvoid_t'
            (aMsg)->WriteSentinel(189006554);
            return;
        }
    case union__::TArrayOfuint8_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ArrayOfuint8_t());
            // Sentinel = 'TArrayOfuint8_t'
            (aMsg)->WriteSentinel(771753428);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::OptionalPushData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::OptionalPushData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union OptionalPushData");
        return false;
    }
    // Sentinel = 'OptionalPushData'
    if ((!((aMsg)->ReadSentinel(aIter, 917112417)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union OptionalPushData");
        return false;
    }

    switch (type) {
    case union__::Tvoid_t:
        {
            mozilla::void_t tmp = mozilla::void_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_void_t())))))) {
                aActor->FatalError("Error deserializing variant Tvoid_t of union OptionalPushData");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((aMsg)->ReadSentinel(aIter, 189006554)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tvoid_t of union OptionalPushData");
                return false;
            }
            return true;
        }
    case union__::TArrayOfuint8_t:
        {
            nsTArray<uint8_t> tmp;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ArrayOfuint8_t())))))) {
                aActor->FatalError("Error deserializing variant TArrayOfuint8_t of union OptionalPushData");
                return false;
            }
            // Sentinel = 'TArrayOfuint8_t'
            if ((!((aMsg)->ReadSentinel(aIter, 771753428)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TArrayOfuint8_t of union OptionalPushData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerPushEventOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerPushEventOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).messageId());
    // Sentinel = 'messageId'
    (aMsg)->WriteSentinel(310576019);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerPushEventOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->messageId())))))) {
        aActor->FatalError("Error deserializing 'messageId' (nsString) member of 'ServiceWorkerPushEventOpArgs'");
        return false;
    }
    // Sentinel = 'messageId'
    if ((!((aMsg)->ReadSentinel(aIter, 310576019)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'messageId' (nsString) member of 'ServiceWorkerPushEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (OptionalPushData) member of 'ServiceWorkerPushEventOpArgs'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (OptionalPushData) member of 'ServiceWorkerPushEventOpArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerPushSubscriptionChangeEventOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerPushSubscriptionChangeEventOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerPushSubscriptionChangeEventOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerNotificationEventOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerNotificationEventOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).eventName());
    // Sentinel = 'eventName'
    (aMsg)->WriteSentinel(310051748);
    WriteIPDLParam(aMsg, aActor, (aVar).id());
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
    WriteIPDLParam(aMsg, aActor, (aVar).title());
    // Sentinel = 'title'
    (aMsg)->WriteSentinel(109445667);
    WriteIPDLParam(aMsg, aActor, (aVar).dir());
    // Sentinel = 'dir'
    (aMsg)->WriteSentinel(41091392);
    WriteIPDLParam(aMsg, aActor, (aVar).lang());
    // Sentinel = 'lang'
    (aMsg)->WriteSentinel(68813219);
    WriteIPDLParam(aMsg, aActor, (aVar).body());
    // Sentinel = 'body'
    (aMsg)->WriteSentinel(68813231);
    WriteIPDLParam(aMsg, aActor, (aVar).tag());
    // Sentinel = 'tag'
    (aMsg)->WriteSentinel(42467645);
    WriteIPDLParam(aMsg, aActor, (aVar).icon());
    // Sentinel = 'icon'
    (aMsg)->WriteSentinel(69009834);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    WriteIPDLParam(aMsg, aActor, (aVar).behavior());
    // Sentinel = 'behavior'
    (aMsg)->WriteSentinel(244515665);
    WriteIPDLParam(aMsg, aActor, (aVar).scope());
    // Sentinel = 'scope'
    (aMsg)->WriteSentinel(107086363);
    (aMsg)->WriteBytes((&((aVar).disableOpenClickDelay())), 4);
    // Sentinel = 'disableOpenClickDelay'
    (aMsg)->WriteSentinel(1523386428);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerNotificationEventOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->eventName())))))) {
        aActor->FatalError("Error deserializing 'eventName' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'eventName'
    if ((!((aMsg)->ReadSentinel(aIter, 310051748)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'eventName' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->id())))))) {
        aActor->FatalError("Error deserializing 'id' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'id' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->title())))))) {
        aActor->FatalError("Error deserializing 'title' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'title'
    if ((!((aMsg)->ReadSentinel(aIter, 109445667)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'title' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dir())))))) {
        aActor->FatalError("Error deserializing 'dir' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'dir'
    if ((!((aMsg)->ReadSentinel(aIter, 41091392)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dir' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->lang())))))) {
        aActor->FatalError("Error deserializing 'lang' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'lang'
    if ((!((aMsg)->ReadSentinel(aIter, 68813219)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'lang' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->body())))))) {
        aActor->FatalError("Error deserializing 'body' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'body'
    if ((!((aMsg)->ReadSentinel(aIter, 68813231)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'body' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->tag())))))) {
        aActor->FatalError("Error deserializing 'tag' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'tag'
    if ((!((aMsg)->ReadSentinel(aIter, 42467645)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'tag' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->icon())))))) {
        aActor->FatalError("Error deserializing 'icon' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'icon'
    if ((!((aMsg)->ReadSentinel(aIter, 69009834)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'icon' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->behavior())))))) {
        aActor->FatalError("Error deserializing 'behavior' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'behavior'
    if ((!((aMsg)->ReadSentinel(aIter, 244515665)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'behavior' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scope())))))) {
        aActor->FatalError("Error deserializing 'scope' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    // Sentinel = 'scope'
    if ((!((aMsg)->ReadSentinel(aIter, 107086363)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scope' (nsString) member of 'ServiceWorkerNotificationEventOpArgs'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->disableOpenClickDelay())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'disableOpenClickDelay'
    if ((!((aMsg)->ReadSentinel(aIter, 1523386428)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerMessageEventOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerMessageEventOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).clientInfoAndState());
    // Sentinel = 'clientInfoAndState'
    (aMsg)->WriteSentinel(1138820896);
    WriteIPDLParam(aMsg, aActor, (aVar).clonedData());
    // Sentinel = 'clonedData'
    (aMsg)->WriteSentinel(368837616);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerMessageEventOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientInfoAndState())))))) {
        aActor->FatalError("Error deserializing 'clientInfoAndState' (ClientInfoAndState) member of 'ServiceWorkerMessageEventOpArgs'");
        return false;
    }
    // Sentinel = 'clientInfoAndState'
    if ((!((aMsg)->ReadSentinel(aIter, 1138820896)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientInfoAndState' (ClientInfoAndState) member of 'ServiceWorkerMessageEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clonedData())))))) {
        aActor->FatalError("Error deserializing 'clonedData' (ClonedOrErrorMessageData) member of 'ServiceWorkerMessageEventOpArgs'");
        return false;
    }
    // Sentinel = 'clonedData'
    if ((!((aMsg)->ReadSentinel(aIter, 368837616)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clonedData' (ClonedOrErrorMessageData) member of 'ServiceWorkerMessageEventOpArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerFetchEventOpArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerFetchEventOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).workerScriptSpec());
    // Sentinel = 'workerScriptSpec'
    (aMsg)->WriteSentinel(958596763);
    WriteIPDLParam(aMsg, aActor, (aVar).internalRequest());
    // Sentinel = 'internalRequest'
    (aMsg)->WriteSentinel(839059015);
    WriteIPDLParam(aMsg, aActor, (aVar).clientId());
    // Sentinel = 'clientId'
    (aMsg)->WriteSentinel(244122413);
    WriteIPDLParam(aMsg, aActor, (aVar).resultingClientId());
    // Sentinel = 'resultingClientId'
    (aMsg)->WriteSentinel(1073022698);
    WriteIPDLParam(aMsg, aActor, (aVar).isNonSubresourceRequest());
    // Sentinel = 'isNonSubresourceRequest'
    (aMsg)->WriteSentinel(1894386051);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerFetchEventOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->workerScriptSpec())))))) {
        aActor->FatalError("Error deserializing 'workerScriptSpec' (nsCString) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    // Sentinel = 'workerScriptSpec'
    if ((!((aMsg)->ReadSentinel(aIter, 958596763)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'workerScriptSpec' (nsCString) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->internalRequest())))))) {
        aActor->FatalError("Error deserializing 'internalRequest' (IPCInternalRequest) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    // Sentinel = 'internalRequest'
    if ((!((aMsg)->ReadSentinel(aIter, 839059015)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'internalRequest' (IPCInternalRequest) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientId())))))) {
        aActor->FatalError("Error deserializing 'clientId' (nsString) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    // Sentinel = 'clientId'
    if ((!((aMsg)->ReadSentinel(aIter, 244122413)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientId' (nsString) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->resultingClientId())))))) {
        aActor->FatalError("Error deserializing 'resultingClientId' (nsString) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    // Sentinel = 'resultingClientId'
    if ((!((aMsg)->ReadSentinel(aIter, 1073022698)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'resultingClientId' (nsString) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isNonSubresourceRequest())))))) {
        aActor->FatalError("Error deserializing 'isNonSubresourceRequest' (bool) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    // Sentinel = 'isNonSubresourceRequest'
    if ((!((aMsg)->ReadSentinel(aIter, 1894386051)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isNonSubresourceRequest' (bool) member of 'ServiceWorkerFetchEventOpArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ServiceWorkerOpArgs|
//
namespace mozilla {
namespace dom {
auto ServiceWorkerOpArgs::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TServiceWorkerCheckScriptEvaluationOpArgs:
        {
            (ptr_ServiceWorkerCheckScriptEvaluationOpArgs())->~ServiceWorkerCheckScriptEvaluationOpArgs__tdef();
            break;
        }
    case TServiceWorkerUpdateStateOpArgs:
        {
            (ptr_ServiceWorkerUpdateStateOpArgs())->~ServiceWorkerUpdateStateOpArgs__tdef();
            break;
        }
    case TServiceWorkerTerminateWorkerOpArgs:
        {
            (ptr_ServiceWorkerTerminateWorkerOpArgs())->~ServiceWorkerTerminateWorkerOpArgs__tdef();
            break;
        }
    case TServiceWorkerLifeCycleEventOpArgs:
        {
            (ptr_ServiceWorkerLifeCycleEventOpArgs())->~ServiceWorkerLifeCycleEventOpArgs__tdef();
            break;
        }
    case TServiceWorkerPushEventOpArgs:
        {
            (ptr_ServiceWorkerPushEventOpArgs())->~ServiceWorkerPushEventOpArgs__tdef();
            break;
        }
    case TServiceWorkerPushSubscriptionChangeEventOpArgs:
        {
            (ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs())->~ServiceWorkerPushSubscriptionChangeEventOpArgs__tdef();
            break;
        }
    case TServiceWorkerNotificationEventOpArgs:
        {
            (ptr_ServiceWorkerNotificationEventOpArgs())->~ServiceWorkerNotificationEventOpArgs__tdef();
            break;
        }
    case TServiceWorkerMessageEventOpArgs:
        {
            (ptr_ServiceWorkerMessageEventOpArgs())->~ServiceWorkerMessageEventOpArgs__tdef();
            break;
        }
    case TServiceWorkerFetchEventOpArgs:
        {
            (ptr_ServiceWorkerFetchEventOpArgs())->~ServiceWorkerFetchEventOpArgs__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(const ServiceWorkerCheckScriptEvaluationOpArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpArgs()) ServiceWorkerCheckScriptEvaluationOpArgs(aOther);
    mType = TServiceWorkerCheckScriptEvaluationOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerCheckScriptEvaluationOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpArgs()) ServiceWorkerCheckScriptEvaluationOpArgs(std::move(aOther));
    mType = TServiceWorkerCheckScriptEvaluationOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(const ServiceWorkerUpdateStateOpArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerUpdateStateOpArgs()) ServiceWorkerUpdateStateOpArgs(aOther);
    mType = TServiceWorkerUpdateStateOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerUpdateStateOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerUpdateStateOpArgs()) ServiceWorkerUpdateStateOpArgs(std::move(aOther));
    mType = TServiceWorkerUpdateStateOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(const ServiceWorkerTerminateWorkerOpArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerTerminateWorkerOpArgs()) ServiceWorkerTerminateWorkerOpArgs(aOther);
    mType = TServiceWorkerTerminateWorkerOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerTerminateWorkerOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerTerminateWorkerOpArgs()) ServiceWorkerTerminateWorkerOpArgs(std::move(aOther));
    mType = TServiceWorkerTerminateWorkerOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(const ServiceWorkerLifeCycleEventOpArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerLifeCycleEventOpArgs()) ServiceWorkerLifeCycleEventOpArgs(aOther);
    mType = TServiceWorkerLifeCycleEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerLifeCycleEventOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerLifeCycleEventOpArgs()) ServiceWorkerLifeCycleEventOpArgs(std::move(aOther));
    mType = TServiceWorkerLifeCycleEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(const ServiceWorkerPushEventOpArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerPushEventOpArgs()) ServiceWorkerPushEventOpArgs(aOther);
    mType = TServiceWorkerPushEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerPushEventOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerPushEventOpArgs()) ServiceWorkerPushEventOpArgs(std::move(aOther));
    mType = TServiceWorkerPushEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(const ServiceWorkerPushSubscriptionChangeEventOpArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs()) ServiceWorkerPushSubscriptionChangeEventOpArgs(aOther);
    mType = TServiceWorkerPushSubscriptionChangeEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerPushSubscriptionChangeEventOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs()) ServiceWorkerPushSubscriptionChangeEventOpArgs(std::move(aOther));
    mType = TServiceWorkerPushSubscriptionChangeEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(const ServiceWorkerNotificationEventOpArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerNotificationEventOpArgs()) ServiceWorkerNotificationEventOpArgs(aOther);
    mType = TServiceWorkerNotificationEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerNotificationEventOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerNotificationEventOpArgs()) ServiceWorkerNotificationEventOpArgs(std::move(aOther));
    mType = TServiceWorkerNotificationEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerMessageEventOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerMessageEventOpArgs()) ServiceWorkerMessageEventOpArgs(std::move(aOther));
    mType = TServiceWorkerMessageEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(const ServiceWorkerFetchEventOpArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpArgs()) ServiceWorkerFetchEventOpArgs(aOther);
    mType = TServiceWorkerFetchEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerFetchEventOpArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpArgs()) ServiceWorkerFetchEventOpArgs(std::move(aOther));
    mType = TServiceWorkerFetchEventOpArgs;
}

MOZ_IMPLICIT ServiceWorkerOpArgs::ServiceWorkerOpArgs(ServiceWorkerOpArgs&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TServiceWorkerCheckScriptEvaluationOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpArgs()) ServiceWorkerCheckScriptEvaluationOpArgs(std::move((aOther).get_ServiceWorkerCheckScriptEvaluationOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerUpdateStateOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerUpdateStateOpArgs()) ServiceWorkerUpdateStateOpArgs(std::move((aOther).get_ServiceWorkerUpdateStateOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerTerminateWorkerOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerTerminateWorkerOpArgs()) ServiceWorkerTerminateWorkerOpArgs(std::move((aOther).get_ServiceWorkerTerminateWorkerOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerLifeCycleEventOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerLifeCycleEventOpArgs()) ServiceWorkerLifeCycleEventOpArgs(std::move((aOther).get_ServiceWorkerLifeCycleEventOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerPushEventOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerPushEventOpArgs()) ServiceWorkerPushEventOpArgs(std::move((aOther).get_ServiceWorkerPushEventOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerPushSubscriptionChangeEventOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs()) ServiceWorkerPushSubscriptionChangeEventOpArgs(std::move((aOther).get_ServiceWorkerPushSubscriptionChangeEventOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerNotificationEventOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerNotificationEventOpArgs()) ServiceWorkerNotificationEventOpArgs(std::move((aOther).get_ServiceWorkerNotificationEventOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerMessageEventOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerMessageEventOpArgs()) ServiceWorkerMessageEventOpArgs(std::move((aOther).get_ServiceWorkerMessageEventOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerFetchEventOpArgs:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpArgs()) ServiceWorkerFetchEventOpArgs(std::move((aOther).get_ServiceWorkerFetchEventOpArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

ServiceWorkerOpArgs::~ServiceWorkerOpArgs()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto ServiceWorkerOpArgs::operator=(const ServiceWorkerCheckScriptEvaluationOpArgs& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerCheckScriptEvaluationOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpArgs()) ServiceWorkerCheckScriptEvaluationOpArgs;
    }
    (*(ptr_ServiceWorkerCheckScriptEvaluationOpArgs())) = aRhs;
    mType = TServiceWorkerCheckScriptEvaluationOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerCheckScriptEvaluationOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerCheckScriptEvaluationOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpArgs()) ServiceWorkerCheckScriptEvaluationOpArgs;
    }
    (*(ptr_ServiceWorkerCheckScriptEvaluationOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerCheckScriptEvaluationOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(const ServiceWorkerUpdateStateOpArgs& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerUpdateStateOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerUpdateStateOpArgs()) ServiceWorkerUpdateStateOpArgs;
    }
    (*(ptr_ServiceWorkerUpdateStateOpArgs())) = aRhs;
    mType = TServiceWorkerUpdateStateOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerUpdateStateOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerUpdateStateOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerUpdateStateOpArgs()) ServiceWorkerUpdateStateOpArgs;
    }
    (*(ptr_ServiceWorkerUpdateStateOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerUpdateStateOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(const ServiceWorkerTerminateWorkerOpArgs& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerTerminateWorkerOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerTerminateWorkerOpArgs()) ServiceWorkerTerminateWorkerOpArgs;
    }
    (*(ptr_ServiceWorkerTerminateWorkerOpArgs())) = aRhs;
    mType = TServiceWorkerTerminateWorkerOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerTerminateWorkerOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerTerminateWorkerOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerTerminateWorkerOpArgs()) ServiceWorkerTerminateWorkerOpArgs;
    }
    (*(ptr_ServiceWorkerTerminateWorkerOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerTerminateWorkerOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(const ServiceWorkerLifeCycleEventOpArgs& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerLifeCycleEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerLifeCycleEventOpArgs()) ServiceWorkerLifeCycleEventOpArgs;
    }
    (*(ptr_ServiceWorkerLifeCycleEventOpArgs())) = aRhs;
    mType = TServiceWorkerLifeCycleEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerLifeCycleEventOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerLifeCycleEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerLifeCycleEventOpArgs()) ServiceWorkerLifeCycleEventOpArgs;
    }
    (*(ptr_ServiceWorkerLifeCycleEventOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerLifeCycleEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(const ServiceWorkerPushEventOpArgs& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerPushEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerPushEventOpArgs()) ServiceWorkerPushEventOpArgs;
    }
    (*(ptr_ServiceWorkerPushEventOpArgs())) = aRhs;
    mType = TServiceWorkerPushEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerPushEventOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerPushEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerPushEventOpArgs()) ServiceWorkerPushEventOpArgs;
    }
    (*(ptr_ServiceWorkerPushEventOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerPushEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(const ServiceWorkerPushSubscriptionChangeEventOpArgs& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerPushSubscriptionChangeEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs()) ServiceWorkerPushSubscriptionChangeEventOpArgs;
    }
    (*(ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs())) = aRhs;
    mType = TServiceWorkerPushSubscriptionChangeEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerPushSubscriptionChangeEventOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerPushSubscriptionChangeEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs()) ServiceWorkerPushSubscriptionChangeEventOpArgs;
    }
    (*(ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerPushSubscriptionChangeEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(const ServiceWorkerNotificationEventOpArgs& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerNotificationEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerNotificationEventOpArgs()) ServiceWorkerNotificationEventOpArgs;
    }
    (*(ptr_ServiceWorkerNotificationEventOpArgs())) = aRhs;
    mType = TServiceWorkerNotificationEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerNotificationEventOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerNotificationEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerNotificationEventOpArgs()) ServiceWorkerNotificationEventOpArgs;
    }
    (*(ptr_ServiceWorkerNotificationEventOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerNotificationEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerMessageEventOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerMessageEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerMessageEventOpArgs()) ServiceWorkerMessageEventOpArgs;
    }
    (*(ptr_ServiceWorkerMessageEventOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerMessageEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(const ServiceWorkerFetchEventOpArgs& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerFetchEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpArgs()) ServiceWorkerFetchEventOpArgs;
    }
    (*(ptr_ServiceWorkerFetchEventOpArgs())) = aRhs;
    mType = TServiceWorkerFetchEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerFetchEventOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    if (MaybeDestroy(TServiceWorkerFetchEventOpArgs)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpArgs()) ServiceWorkerFetchEventOpArgs;
    }
    (*(ptr_ServiceWorkerFetchEventOpArgs())) = std::move(aRhs);
    mType = TServiceWorkerFetchEventOpArgs;
    return (*(this));
}

auto ServiceWorkerOpArgs::operator=(ServiceWorkerOpArgs&& aRhs) -> ServiceWorkerOpArgs&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TServiceWorkerCheckScriptEvaluationOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpArgs()) ServiceWorkerCheckScriptEvaluationOpArgs;
            }
            (*(ptr_ServiceWorkerCheckScriptEvaluationOpArgs())) = std::move((aRhs).get_ServiceWorkerCheckScriptEvaluationOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerUpdateStateOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerUpdateStateOpArgs()) ServiceWorkerUpdateStateOpArgs;
            }
            (*(ptr_ServiceWorkerUpdateStateOpArgs())) = std::move((aRhs).get_ServiceWorkerUpdateStateOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerTerminateWorkerOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerTerminateWorkerOpArgs()) ServiceWorkerTerminateWorkerOpArgs;
            }
            (*(ptr_ServiceWorkerTerminateWorkerOpArgs())) = std::move((aRhs).get_ServiceWorkerTerminateWorkerOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerLifeCycleEventOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerLifeCycleEventOpArgs()) ServiceWorkerLifeCycleEventOpArgs;
            }
            (*(ptr_ServiceWorkerLifeCycleEventOpArgs())) = std::move((aRhs).get_ServiceWorkerLifeCycleEventOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerPushEventOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerPushEventOpArgs()) ServiceWorkerPushEventOpArgs;
            }
            (*(ptr_ServiceWorkerPushEventOpArgs())) = std::move((aRhs).get_ServiceWorkerPushEventOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerPushSubscriptionChangeEventOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs()) ServiceWorkerPushSubscriptionChangeEventOpArgs;
            }
            (*(ptr_ServiceWorkerPushSubscriptionChangeEventOpArgs())) = std::move((aRhs).get_ServiceWorkerPushSubscriptionChangeEventOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerNotificationEventOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerNotificationEventOpArgs()) ServiceWorkerNotificationEventOpArgs;
            }
            (*(ptr_ServiceWorkerNotificationEventOpArgs())) = std::move((aRhs).get_ServiceWorkerNotificationEventOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerMessageEventOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerMessageEventOpArgs()) ServiceWorkerMessageEventOpArgs;
            }
            (*(ptr_ServiceWorkerMessageEventOpArgs())) = std::move((aRhs).get_ServiceWorkerMessageEventOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerFetchEventOpArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpArgs()) ServiceWorkerFetchEventOpArgs;
            }
            (*(ptr_ServiceWorkerFetchEventOpArgs())) = std::move((aRhs).get_ServiceWorkerFetchEventOpArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerOpArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::ServiceWorkerOpArgs union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'ServiceWorkerOpArgs'
    (aMsg)->WriteSentinel(1274349464);

    switch (type) {
    case union__::TServiceWorkerCheckScriptEvaluationOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerCheckScriptEvaluationOpArgs());
            // Sentinel = 'TServiceWorkerCheckScriptEvaluationOpArgs'
            (aMsg)->WriteSentinel(1425936471);
            return;
        }
    case union__::TServiceWorkerUpdateStateOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerUpdateStateOpArgs());
            // Sentinel = 'TServiceWorkerUpdateStateOpArgs'
            (aMsg)->WriteSentinel(3300527184);
            return;
        }
    case union__::TServiceWorkerTerminateWorkerOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerTerminateWorkerOpArgs());
            // Sentinel = 'TServiceWorkerTerminateWorkerOpArgs'
            (aMsg)->WriteSentinel(4230286863);
            return;
        }
    case union__::TServiceWorkerLifeCycleEventOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerLifeCycleEventOpArgs());
            // Sentinel = 'TServiceWorkerLifeCycleEventOpArgs'
            (aMsg)->WriteSentinel(3917942110);
            return;
        }
    case union__::TServiceWorkerPushEventOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerPushEventOpArgs());
            // Sentinel = 'TServiceWorkerPushEventOpArgs'
            (aMsg)->WriteSentinel(2897152910);
            return;
        }
    case union__::TServiceWorkerPushSubscriptionChangeEventOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerPushSubscriptionChangeEventOpArgs());
            // Sentinel = 'TServiceWorkerPushSubscriptionChangeEventOpArgs'
            (aMsg)->WriteSentinel(3308065497);
            return;
        }
    case union__::TServiceWorkerNotificationEventOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerNotificationEventOpArgs());
            // Sentinel = 'TServiceWorkerNotificationEventOpArgs'
            (aMsg)->WriteSentinel(421596885);
            return;
        }
    case union__::TServiceWorkerMessageEventOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerMessageEventOpArgs());
            // Sentinel = 'TServiceWorkerMessageEventOpArgs'
            (aMsg)->WriteSentinel(3507686579);
            return;
        }
    case union__::TServiceWorkerFetchEventOpArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerFetchEventOpArgs());
            // Sentinel = 'TServiceWorkerFetchEventOpArgs'
            (aMsg)->WriteSentinel(3071019992);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerOpArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::ServiceWorkerOpArgs union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union ServiceWorkerOpArgs");
        return false;
    }
    // Sentinel = 'ServiceWorkerOpArgs'
    if ((!((aMsg)->ReadSentinel(aIter, 1274349464)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union ServiceWorkerOpArgs");
        return false;
    }

    switch (type) {
    case union__::TServiceWorkerCheckScriptEvaluationOpArgs:
        {
            mozilla::dom::ServiceWorkerCheckScriptEvaluationOpArgs tmp = mozilla::dom::ServiceWorkerCheckScriptEvaluationOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerCheckScriptEvaluationOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerCheckScriptEvaluationOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerCheckScriptEvaluationOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1425936471)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerCheckScriptEvaluationOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerUpdateStateOpArgs:
        {
            mozilla::dom::ServiceWorkerUpdateStateOpArgs tmp = mozilla::dom::ServiceWorkerUpdateStateOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerUpdateStateOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerUpdateStateOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerUpdateStateOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 3300527184)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerUpdateStateOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerTerminateWorkerOpArgs:
        {
            mozilla::dom::ServiceWorkerTerminateWorkerOpArgs tmp = mozilla::dom::ServiceWorkerTerminateWorkerOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerTerminateWorkerOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerTerminateWorkerOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerTerminateWorkerOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 4230286863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerTerminateWorkerOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerLifeCycleEventOpArgs:
        {
            mozilla::dom::ServiceWorkerLifeCycleEventOpArgs tmp = mozilla::dom::ServiceWorkerLifeCycleEventOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerLifeCycleEventOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerLifeCycleEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerLifeCycleEventOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 3917942110)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerLifeCycleEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerPushEventOpArgs:
        {
            mozilla::dom::ServiceWorkerPushEventOpArgs tmp = mozilla::dom::ServiceWorkerPushEventOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerPushEventOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerPushEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerPushEventOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 2897152910)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerPushEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerPushSubscriptionChangeEventOpArgs:
        {
            mozilla::dom::ServiceWorkerPushSubscriptionChangeEventOpArgs tmp = mozilla::dom::ServiceWorkerPushSubscriptionChangeEventOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerPushSubscriptionChangeEventOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerPushSubscriptionChangeEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerPushSubscriptionChangeEventOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 3308065497)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerPushSubscriptionChangeEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerNotificationEventOpArgs:
        {
            mozilla::dom::ServiceWorkerNotificationEventOpArgs tmp = mozilla::dom::ServiceWorkerNotificationEventOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerNotificationEventOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerNotificationEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerNotificationEventOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 421596885)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerNotificationEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerMessageEventOpArgs:
        {
            mozilla::dom::ServiceWorkerMessageEventOpArgs tmp = mozilla::dom::ServiceWorkerMessageEventOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerMessageEventOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerMessageEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerMessageEventOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 3507686579)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerMessageEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerFetchEventOpArgs:
        {
            mozilla::dom::ServiceWorkerFetchEventOpArgs tmp = mozilla::dom::ServiceWorkerFetchEventOpArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerFetchEventOpArgs())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerFetchEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            // Sentinel = 'TServiceWorkerFetchEventOpArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 3071019992)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerFetchEventOpArgs of union ServiceWorkerOpArgs");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FetchEventRespondWithClosure|
//
namespace mozilla {
namespace dom {
auto FetchEventRespondWithClosure::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(FetchEventRespondWithClosure, respondWithColumnNumber_) - offsetof(FetchEventRespondWithClosure, respondWithLineNumber_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FetchEventRespondWithClosure>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).respondWithScriptSpec());
    // Sentinel = 'respondWithScriptSpec'
    (aMsg)->WriteSentinel(1605044376);
    (aMsg)->WriteBytes((&((aVar).respondWithLineNumber())), 8);
    // Sentinel = 'respondWithLineNumber | respondWithColumnNumber'
    (aMsg)->WriteSentinel(3238269619);
}

auto IPDLParamTraits<mozilla::dom::FetchEventRespondWithClosure>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->respondWithScriptSpec())))))) {
        aActor->FatalError("Error deserializing 'respondWithScriptSpec' (nsCString) member of 'FetchEventRespondWithClosure'");
        return false;
    }
    // Sentinel = 'respondWithScriptSpec'
    if ((!((aMsg)->ReadSentinel(aIter, 1605044376)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'respondWithScriptSpec' (nsCString) member of 'FetchEventRespondWithClosure'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->respondWithLineNumber())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'respondWithLineNumber | respondWithColumnNumber'
    if ((!((aMsg)->ReadSentinel(aIter, 3238269619)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCSynthesizeResponseArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCSynthesizeResponseArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).internalResponse());
    // Sentinel = 'internalResponse'
    (aMsg)->WriteSentinel(951649965);
    WriteIPDLParam(aMsg, aActor, (aVar).closure());
    // Sentinel = 'closure'
    (aMsg)->WriteSentinel(199426814);
}

auto IPDLParamTraits<mozilla::dom::IPCSynthesizeResponseArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->internalResponse())))))) {
        aActor->FatalError("Error deserializing 'internalResponse' (IPCInternalResponse) member of 'IPCSynthesizeResponseArgs'");
        return false;
    }
    // Sentinel = 'internalResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 951649965)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'internalResponse' (IPCInternalResponse) member of 'IPCSynthesizeResponseArgs'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->closure())))))) {
        aActor->FatalError("Error deserializing 'closure' (FetchEventRespondWithClosure) member of 'IPCSynthesizeResponseArgs'");
        return false;
    }
    // Sentinel = 'closure'
    if ((!((aMsg)->ReadSentinel(aIter, 199426814)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'closure' (FetchEventRespondWithClosure) member of 'IPCSynthesizeResponseArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ResetInterceptionArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ResetInterceptionArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::ResetInterceptionArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CancelInterceptionArgs|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::CancelInterceptionArgs>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).status());
    // Sentinel = 'status'
    (aMsg)->WriteSentinel(154731173);
}

auto IPDLParamTraits<mozilla::dom::CancelInterceptionArgs>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->status())))))) {
        aActor->FatalError("Error deserializing 'status' (nsresult) member of 'CancelInterceptionArgs'");
        return false;
    }
    // Sentinel = 'status'
    if ((!((aMsg)->ReadSentinel(aIter, 154731173)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'status' (nsresult) member of 'CancelInterceptionArgs'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCFetchEventRespondWithResult|
//
namespace mozilla {
namespace dom {
auto IPCFetchEventRespondWithResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TIPCSynthesizeResponseArgs:
        {
            (ptr_IPCSynthesizeResponseArgs())->~IPCSynthesizeResponseArgs__tdef();
            break;
        }
    case TResetInterceptionArgs:
        {
            (ptr_ResetInterceptionArgs())->~ResetInterceptionArgs__tdef();
            break;
        }
    case TCancelInterceptionArgs:
        {
            (ptr_CancelInterceptionArgs())->~CancelInterceptionArgs__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCFetchEventRespondWithResult::IPCFetchEventRespondWithResult(const IPCSynthesizeResponseArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCSynthesizeResponseArgs()) IPCSynthesizeResponseArgs(aOther);
    mType = TIPCSynthesizeResponseArgs;
}

MOZ_IMPLICIT IPCFetchEventRespondWithResult::IPCFetchEventRespondWithResult(IPCSynthesizeResponseArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCSynthesizeResponseArgs()) IPCSynthesizeResponseArgs(std::move(aOther));
    mType = TIPCSynthesizeResponseArgs;
}

MOZ_IMPLICIT IPCFetchEventRespondWithResult::IPCFetchEventRespondWithResult(const ResetInterceptionArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetInterceptionArgs()) ResetInterceptionArgs(aOther);
    mType = TResetInterceptionArgs;
}

MOZ_IMPLICIT IPCFetchEventRespondWithResult::IPCFetchEventRespondWithResult(ResetInterceptionArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetInterceptionArgs()) ResetInterceptionArgs(std::move(aOther));
    mType = TResetInterceptionArgs;
}

MOZ_IMPLICIT IPCFetchEventRespondWithResult::IPCFetchEventRespondWithResult(const CancelInterceptionArgs& aOther)
{
    new (mozilla::KnownNotNull, ptr_CancelInterceptionArgs()) CancelInterceptionArgs(aOther);
    mType = TCancelInterceptionArgs;
}

MOZ_IMPLICIT IPCFetchEventRespondWithResult::IPCFetchEventRespondWithResult(CancelInterceptionArgs&& aOther)
{
    new (mozilla::KnownNotNull, ptr_CancelInterceptionArgs()) CancelInterceptionArgs(std::move(aOther));
    mType = TCancelInterceptionArgs;
}

MOZ_IMPLICIT IPCFetchEventRespondWithResult::IPCFetchEventRespondWithResult(const IPCFetchEventRespondWithResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TIPCSynthesizeResponseArgs:
        {
            new (mozilla::KnownNotNull, ptr_IPCSynthesizeResponseArgs()) IPCSynthesizeResponseArgs((aOther).get_IPCSynthesizeResponseArgs());
            break;
        }
    case TResetInterceptionArgs:
        {
            new (mozilla::KnownNotNull, ptr_ResetInterceptionArgs()) ResetInterceptionArgs((aOther).get_ResetInterceptionArgs());
            break;
        }
    case TCancelInterceptionArgs:
        {
            new (mozilla::KnownNotNull, ptr_CancelInterceptionArgs()) CancelInterceptionArgs((aOther).get_CancelInterceptionArgs());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCFetchEventRespondWithResult::IPCFetchEventRespondWithResult(IPCFetchEventRespondWithResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TIPCSynthesizeResponseArgs:
        {
            new (mozilla::KnownNotNull, ptr_IPCSynthesizeResponseArgs()) IPCSynthesizeResponseArgs(std::move((aOther).get_IPCSynthesizeResponseArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TResetInterceptionArgs:
        {
            new (mozilla::KnownNotNull, ptr_ResetInterceptionArgs()) ResetInterceptionArgs(std::move((aOther).get_ResetInterceptionArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TCancelInterceptionArgs:
        {
            new (mozilla::KnownNotNull, ptr_CancelInterceptionArgs()) CancelInterceptionArgs(std::move((aOther).get_CancelInterceptionArgs()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCFetchEventRespondWithResult::~IPCFetchEventRespondWithResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCFetchEventRespondWithResult::operator=(const IPCSynthesizeResponseArgs& aRhs) -> IPCFetchEventRespondWithResult&
{
    if (MaybeDestroy(TIPCSynthesizeResponseArgs)) {
        new (mozilla::KnownNotNull, ptr_IPCSynthesizeResponseArgs()) IPCSynthesizeResponseArgs;
    }
    (*(ptr_IPCSynthesizeResponseArgs())) = aRhs;
    mType = TIPCSynthesizeResponseArgs;
    return (*(this));
}

auto IPCFetchEventRespondWithResult::operator=(IPCSynthesizeResponseArgs&& aRhs) -> IPCFetchEventRespondWithResult&
{
    if (MaybeDestroy(TIPCSynthesizeResponseArgs)) {
        new (mozilla::KnownNotNull, ptr_IPCSynthesizeResponseArgs()) IPCSynthesizeResponseArgs;
    }
    (*(ptr_IPCSynthesizeResponseArgs())) = std::move(aRhs);
    mType = TIPCSynthesizeResponseArgs;
    return (*(this));
}

auto IPCFetchEventRespondWithResult::operator=(const ResetInterceptionArgs& aRhs) -> IPCFetchEventRespondWithResult&
{
    if (MaybeDestroy(TResetInterceptionArgs)) {
        new (mozilla::KnownNotNull, ptr_ResetInterceptionArgs()) ResetInterceptionArgs;
    }
    (*(ptr_ResetInterceptionArgs())) = aRhs;
    mType = TResetInterceptionArgs;
    return (*(this));
}

auto IPCFetchEventRespondWithResult::operator=(ResetInterceptionArgs&& aRhs) -> IPCFetchEventRespondWithResult&
{
    if (MaybeDestroy(TResetInterceptionArgs)) {
        new (mozilla::KnownNotNull, ptr_ResetInterceptionArgs()) ResetInterceptionArgs;
    }
    (*(ptr_ResetInterceptionArgs())) = std::move(aRhs);
    mType = TResetInterceptionArgs;
    return (*(this));
}

auto IPCFetchEventRespondWithResult::operator=(const CancelInterceptionArgs& aRhs) -> IPCFetchEventRespondWithResult&
{
    if (MaybeDestroy(TCancelInterceptionArgs)) {
        new (mozilla::KnownNotNull, ptr_CancelInterceptionArgs()) CancelInterceptionArgs;
    }
    (*(ptr_CancelInterceptionArgs())) = aRhs;
    mType = TCancelInterceptionArgs;
    return (*(this));
}

auto IPCFetchEventRespondWithResult::operator=(CancelInterceptionArgs&& aRhs) -> IPCFetchEventRespondWithResult&
{
    if (MaybeDestroy(TCancelInterceptionArgs)) {
        new (mozilla::KnownNotNull, ptr_CancelInterceptionArgs()) CancelInterceptionArgs;
    }
    (*(ptr_CancelInterceptionArgs())) = std::move(aRhs);
    mType = TCancelInterceptionArgs;
    return (*(this));
}

auto IPCFetchEventRespondWithResult::operator=(const IPCFetchEventRespondWithResult& aRhs) -> IPCFetchEventRespondWithResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCSynthesizeResponseArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCSynthesizeResponseArgs()) IPCSynthesizeResponseArgs;
            }
            (*(ptr_IPCSynthesizeResponseArgs())) = (aRhs).get_IPCSynthesizeResponseArgs();
            break;
        }
    case TResetInterceptionArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetInterceptionArgs()) ResetInterceptionArgs;
            }
            (*(ptr_ResetInterceptionArgs())) = (aRhs).get_ResetInterceptionArgs();
            break;
        }
    case TCancelInterceptionArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CancelInterceptionArgs()) CancelInterceptionArgs;
            }
            (*(ptr_CancelInterceptionArgs())) = (aRhs).get_CancelInterceptionArgs();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCFetchEventRespondWithResult::operator=(IPCFetchEventRespondWithResult&& aRhs) -> IPCFetchEventRespondWithResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TIPCSynthesizeResponseArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCSynthesizeResponseArgs()) IPCSynthesizeResponseArgs;
            }
            (*(ptr_IPCSynthesizeResponseArgs())) = std::move((aRhs).get_IPCSynthesizeResponseArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TResetInterceptionArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetInterceptionArgs()) ResetInterceptionArgs;
            }
            (*(ptr_ResetInterceptionArgs())) = std::move((aRhs).get_ResetInterceptionArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TCancelInterceptionArgs:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_CancelInterceptionArgs()) CancelInterceptionArgs;
            }
            (*(ptr_CancelInterceptionArgs())) = std::move((aRhs).get_CancelInterceptionArgs());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCFetchEventRespondWithResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPCFetchEventRespondWithResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCFetchEventRespondWithResult'
    (aMsg)->WriteSentinel(2921008063);

    switch (type) {
    case union__::TIPCSynthesizeResponseArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCSynthesizeResponseArgs());
            // Sentinel = 'TIPCSynthesizeResponseArgs'
            (aMsg)->WriteSentinel(2249263683);
            return;
        }
    case union__::TResetInterceptionArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ResetInterceptionArgs());
            // Sentinel = 'TResetInterceptionArgs'
            (aMsg)->WriteSentinel(1678969049);
            return;
        }
    case union__::TCancelInterceptionArgs:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_CancelInterceptionArgs());
            // Sentinel = 'TCancelInterceptionArgs'
            (aMsg)->WriteSentinel(1784744220);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPCFetchEventRespondWithResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPCFetchEventRespondWithResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCFetchEventRespondWithResult");
        return false;
    }
    // Sentinel = 'IPCFetchEventRespondWithResult'
    if ((!((aMsg)->ReadSentinel(aIter, 2921008063)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCFetchEventRespondWithResult");
        return false;
    }

    switch (type) {
    case union__::TIPCSynthesizeResponseArgs:
        {
            mozilla::dom::IPCSynthesizeResponseArgs tmp = mozilla::dom::IPCSynthesizeResponseArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCSynthesizeResponseArgs())))))) {
                aActor->FatalError("Error deserializing variant TIPCSynthesizeResponseArgs of union IPCFetchEventRespondWithResult");
                return false;
            }
            // Sentinel = 'TIPCSynthesizeResponseArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 2249263683)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCSynthesizeResponseArgs of union IPCFetchEventRespondWithResult");
                return false;
            }
            return true;
        }
    case union__::TResetInterceptionArgs:
        {
            mozilla::dom::ResetInterceptionArgs tmp = mozilla::dom::ResetInterceptionArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ResetInterceptionArgs())))))) {
                aActor->FatalError("Error deserializing variant TResetInterceptionArgs of union IPCFetchEventRespondWithResult");
                return false;
            }
            // Sentinel = 'TResetInterceptionArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1678969049)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TResetInterceptionArgs of union IPCFetchEventRespondWithResult");
                return false;
            }
            return true;
        }
    case union__::TCancelInterceptionArgs:
        {
            mozilla::dom::CancelInterceptionArgs tmp = mozilla::dom::CancelInterceptionArgs();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_CancelInterceptionArgs())))))) {
                aActor->FatalError("Error deserializing variant TCancelInterceptionArgs of union IPCFetchEventRespondWithResult");
                return false;
            }
            // Sentinel = 'TCancelInterceptionArgs'
            if ((!((aMsg)->ReadSentinel(aIter, 1784744220)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TCancelInterceptionArgs of union IPCFetchEventRespondWithResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerCheckScriptEvaluationOpResult|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerCheckScriptEvaluationOpResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).workerScriptExecutedSuccessfully());
    // Sentinel = 'workerScriptExecutedSuccessfully'
    (aMsg)->WriteSentinel(3669167436);
    WriteIPDLParam(aMsg, aActor, (aVar).fetchHandlerWasAdded());
    // Sentinel = 'fetchHandlerWasAdded'
    (aMsg)->WriteSentinel(1382680518);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerCheckScriptEvaluationOpResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->workerScriptExecutedSuccessfully())))))) {
        aActor->FatalError("Error deserializing 'workerScriptExecutedSuccessfully' (bool) member of 'ServiceWorkerCheckScriptEvaluationOpResult'");
        return false;
    }
    // Sentinel = 'workerScriptExecutedSuccessfully'
    if ((!((aMsg)->ReadSentinel(aIter, 3669167436)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'workerScriptExecutedSuccessfully' (bool) member of 'ServiceWorkerCheckScriptEvaluationOpResult'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fetchHandlerWasAdded())))))) {
        aActor->FatalError("Error deserializing 'fetchHandlerWasAdded' (bool) member of 'ServiceWorkerCheckScriptEvaluationOpResult'");
        return false;
    }
    // Sentinel = 'fetchHandlerWasAdded'
    if ((!((aMsg)->ReadSentinel(aIter, 1382680518)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fetchHandlerWasAdded' (bool) member of 'ServiceWorkerCheckScriptEvaluationOpResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ServiceWorkerFetchEventOpResult|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerFetchEventOpResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).rv());
    // Sentinel = 'rv'
    (aMsg)->WriteSentinel(22806761);
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerFetchEventOpResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rv())))))) {
        aActor->FatalError("Error deserializing 'rv' (nsresult) member of 'ServiceWorkerFetchEventOpResult'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!((aMsg)->ReadSentinel(aIter, 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rv' (nsresult) member of 'ServiceWorkerFetchEventOpResult'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ServiceWorkerOpResult|
//
namespace mozilla {
namespace dom {
auto ServiceWorkerOpResult::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TServiceWorkerCheckScriptEvaluationOpResult:
        {
            (ptr_ServiceWorkerCheckScriptEvaluationOpResult())->~ServiceWorkerCheckScriptEvaluationOpResult__tdef();
            break;
        }
    case TServiceWorkerFetchEventOpResult:
        {
            (ptr_ServiceWorkerFetchEventOpResult())->~ServiceWorkerFetchEventOpResult__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT ServiceWorkerOpResult::ServiceWorkerOpResult(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT ServiceWorkerOpResult::ServiceWorkerOpResult(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT ServiceWorkerOpResult::ServiceWorkerOpResult(const ServiceWorkerCheckScriptEvaluationOpResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpResult()) ServiceWorkerCheckScriptEvaluationOpResult(aOther);
    mType = TServiceWorkerCheckScriptEvaluationOpResult;
}

MOZ_IMPLICIT ServiceWorkerOpResult::ServiceWorkerOpResult(ServiceWorkerCheckScriptEvaluationOpResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpResult()) ServiceWorkerCheckScriptEvaluationOpResult(std::move(aOther));
    mType = TServiceWorkerCheckScriptEvaluationOpResult;
}

MOZ_IMPLICIT ServiceWorkerOpResult::ServiceWorkerOpResult(const ServiceWorkerFetchEventOpResult& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpResult()) ServiceWorkerFetchEventOpResult(aOther);
    mType = TServiceWorkerFetchEventOpResult;
}

MOZ_IMPLICIT ServiceWorkerOpResult::ServiceWorkerOpResult(ServiceWorkerFetchEventOpResult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpResult()) ServiceWorkerFetchEventOpResult(std::move(aOther));
    mType = TServiceWorkerFetchEventOpResult;
}

MOZ_IMPLICIT ServiceWorkerOpResult::ServiceWorkerOpResult(const ServiceWorkerOpResult& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TServiceWorkerCheckScriptEvaluationOpResult:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpResult()) ServiceWorkerCheckScriptEvaluationOpResult((aOther).get_ServiceWorkerCheckScriptEvaluationOpResult());
            break;
        }
    case TServiceWorkerFetchEventOpResult:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpResult()) ServiceWorkerFetchEventOpResult((aOther).get_ServiceWorkerFetchEventOpResult());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT ServiceWorkerOpResult::ServiceWorkerOpResult(ServiceWorkerOpResult&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerCheckScriptEvaluationOpResult:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpResult()) ServiceWorkerCheckScriptEvaluationOpResult(std::move((aOther).get_ServiceWorkerCheckScriptEvaluationOpResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerFetchEventOpResult:
        {
            new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpResult()) ServiceWorkerFetchEventOpResult(std::move((aOther).get_ServiceWorkerFetchEventOpResult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

ServiceWorkerOpResult::~ServiceWorkerOpResult()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto ServiceWorkerOpResult::operator=(const nsresult& aRhs) -> ServiceWorkerOpResult&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto ServiceWorkerOpResult::operator=(nsresult&& aRhs) -> ServiceWorkerOpResult&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto ServiceWorkerOpResult::operator=(const ServiceWorkerCheckScriptEvaluationOpResult& aRhs) -> ServiceWorkerOpResult&
{
    if (MaybeDestroy(TServiceWorkerCheckScriptEvaluationOpResult)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpResult()) ServiceWorkerCheckScriptEvaluationOpResult;
    }
    (*(ptr_ServiceWorkerCheckScriptEvaluationOpResult())) = aRhs;
    mType = TServiceWorkerCheckScriptEvaluationOpResult;
    return (*(this));
}

auto ServiceWorkerOpResult::operator=(ServiceWorkerCheckScriptEvaluationOpResult&& aRhs) -> ServiceWorkerOpResult&
{
    if (MaybeDestroy(TServiceWorkerCheckScriptEvaluationOpResult)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpResult()) ServiceWorkerCheckScriptEvaluationOpResult;
    }
    (*(ptr_ServiceWorkerCheckScriptEvaluationOpResult())) = std::move(aRhs);
    mType = TServiceWorkerCheckScriptEvaluationOpResult;
    return (*(this));
}

auto ServiceWorkerOpResult::operator=(const ServiceWorkerFetchEventOpResult& aRhs) -> ServiceWorkerOpResult&
{
    if (MaybeDestroy(TServiceWorkerFetchEventOpResult)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpResult()) ServiceWorkerFetchEventOpResult;
    }
    (*(ptr_ServiceWorkerFetchEventOpResult())) = aRhs;
    mType = TServiceWorkerFetchEventOpResult;
    return (*(this));
}

auto ServiceWorkerOpResult::operator=(ServiceWorkerFetchEventOpResult&& aRhs) -> ServiceWorkerOpResult&
{
    if (MaybeDestroy(TServiceWorkerFetchEventOpResult)) {
        new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpResult()) ServiceWorkerFetchEventOpResult;
    }
    (*(ptr_ServiceWorkerFetchEventOpResult())) = std::move(aRhs);
    mType = TServiceWorkerFetchEventOpResult;
    return (*(this));
}

auto ServiceWorkerOpResult::operator=(const ServiceWorkerOpResult& aRhs) -> ServiceWorkerOpResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TServiceWorkerCheckScriptEvaluationOpResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpResult()) ServiceWorkerCheckScriptEvaluationOpResult;
            }
            (*(ptr_ServiceWorkerCheckScriptEvaluationOpResult())) = (aRhs).get_ServiceWorkerCheckScriptEvaluationOpResult();
            break;
        }
    case TServiceWorkerFetchEventOpResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpResult()) ServiceWorkerFetchEventOpResult;
            }
            (*(ptr_ServiceWorkerFetchEventOpResult())) = (aRhs).get_ServiceWorkerFetchEventOpResult();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto ServiceWorkerOpResult::operator=(ServiceWorkerOpResult&& aRhs) -> ServiceWorkerOpResult&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerCheckScriptEvaluationOpResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerCheckScriptEvaluationOpResult()) ServiceWorkerCheckScriptEvaluationOpResult;
            }
            (*(ptr_ServiceWorkerCheckScriptEvaluationOpResult())) = std::move((aRhs).get_ServiceWorkerCheckScriptEvaluationOpResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TServiceWorkerFetchEventOpResult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ServiceWorkerFetchEventOpResult()) ServiceWorkerFetchEventOpResult;
            }
            (*(ptr_ServiceWorkerFetchEventOpResult())) = std::move((aRhs).get_ServiceWorkerFetchEventOpResult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ServiceWorkerOpResult>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::ServiceWorkerOpResult union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'ServiceWorkerOpResult'
    (aMsg)->WriteSentinel(1556875402);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TServiceWorkerCheckScriptEvaluationOpResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerCheckScriptEvaluationOpResult());
            // Sentinel = 'TServiceWorkerCheckScriptEvaluationOpResult'
            (aMsg)->WriteSentinel(2001932617);
            return;
        }
    case union__::TServiceWorkerFetchEventOpResult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ServiceWorkerFetchEventOpResult());
            // Sentinel = 'TServiceWorkerFetchEventOpResult'
            (aMsg)->WriteSentinel(3496152266);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::ServiceWorkerOpResult>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::ServiceWorkerOpResult union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union ServiceWorkerOpResult");
        return false;
    }
    // Sentinel = 'ServiceWorkerOpResult'
    if ((!((aMsg)->ReadSentinel(aIter, 1556875402)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union ServiceWorkerOpResult");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union ServiceWorkerOpResult");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union ServiceWorkerOpResult");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerCheckScriptEvaluationOpResult:
        {
            mozilla::dom::ServiceWorkerCheckScriptEvaluationOpResult tmp = mozilla::dom::ServiceWorkerCheckScriptEvaluationOpResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerCheckScriptEvaluationOpResult())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerCheckScriptEvaluationOpResult of union ServiceWorkerOpResult");
                return false;
            }
            // Sentinel = 'TServiceWorkerCheckScriptEvaluationOpResult'
            if ((!((aMsg)->ReadSentinel(aIter, 2001932617)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerCheckScriptEvaluationOpResult of union ServiceWorkerOpResult");
                return false;
            }
            return true;
        }
    case union__::TServiceWorkerFetchEventOpResult:
        {
            mozilla::dom::ServiceWorkerFetchEventOpResult tmp = mozilla::dom::ServiceWorkerFetchEventOpResult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ServiceWorkerFetchEventOpResult())))))) {
                aActor->FatalError("Error deserializing variant TServiceWorkerFetchEventOpResult of union ServiceWorkerOpResult");
                return false;
            }
            // Sentinel = 'TServiceWorkerFetchEventOpResult'
            if ((!((aMsg)->ReadSentinel(aIter, 3496152266)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TServiceWorkerFetchEventOpResult of union ServiceWorkerOpResult");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
