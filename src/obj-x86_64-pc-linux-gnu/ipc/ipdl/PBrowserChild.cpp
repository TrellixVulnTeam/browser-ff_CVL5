//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBrowserChild.h"
#include "ipc/nsGUIEventIPC.h"
#include "mozilla/AntiTrackingIPCUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/LayoutMessageUtils.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/BrowserChild.h"
#include "mozilla/dom/CSPMessageUtils.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/MessagePort.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/dom/SessionStoreMessageUtils.h"
#include "mozilla/dom/TabMessageTypes.h"
#include "mozilla/dom/TabMessageUtils.h"
#include "mozilla/dom/ipc/StructuredCloneData.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/ipc/TransportSecurityInfoUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/layers/ScrollableLayerGuid.h"
#include "mozilla/layers/ZoomConstraints.h"
#include "mozilla/widget/IMEData.h"
#include "mozilla/widget/WidgetMessageUtils.h"
#include "nsDocShellLoadState.h"
#include "nsRect.h"

#include "mozilla/dom/PColorPickerChild.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/a11y/PDocAccessibleChild.h"
#include "mozilla/dom/PFilePickerChild.h"
#include "mozilla/plugins/PPluginWidgetChild.h"
#include "mozilla/layout/PRemotePrintJobChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/PPaymentRequestChild.h"
#include "mozilla/dom/PWindowGlobalChild.h"
#include "mozilla/dom/PBrowserBridgeChild.h"
#include "mozilla/dom/PVsyncChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PBrowserChild::PBrowserChild() :
    mozilla::ipc::IProtocol(PBrowserMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBrowserChild);
}

PBrowserChild::~PBrowserChild()
{
    MOZ_COUNT_DTOR(PBrowserChild);
}

auto PBrowserChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PBrowserChild::ManagedPColorPickerChild(nsTArray<PColorPickerChild*>& aArr) const -> void
{
    mManagedPColorPickerChild.ToArray(aArr);
}

auto PBrowserChild::ManagedPColorPickerChild() const -> const ManagedContainer<PColorPickerChild>&
{
    return mManagedPColorPickerChild;
}

auto PBrowserChild::ManagedPDocAccessibleChild(nsTArray<PDocAccessibleChild*>& aArr) const -> void
{
    mManagedPDocAccessibleChild.ToArray(aArr);
}

auto PBrowserChild::ManagedPDocAccessibleChild() const -> const ManagedContainer<PDocAccessibleChild>&
{
    return mManagedPDocAccessibleChild;
}

auto PBrowserChild::ManagedPFilePickerChild(nsTArray<PFilePickerChild*>& aArr) const -> void
{
    mManagedPFilePickerChild.ToArray(aArr);
}

auto PBrowserChild::ManagedPFilePickerChild() const -> const ManagedContainer<PFilePickerChild>&
{
    return mManagedPFilePickerChild;
}

auto PBrowserChild::ManagedPPluginWidgetChild(nsTArray<PPluginWidgetChild*>& aArr) const -> void
{
    mManagedPPluginWidgetChild.ToArray(aArr);
}

auto PBrowserChild::ManagedPPluginWidgetChild() const -> const ManagedContainer<PPluginWidgetChild>&
{
    return mManagedPPluginWidgetChild;
}

auto PBrowserChild::ManagedPPaymentRequestChild(nsTArray<PPaymentRequestChild*>& aArr) const -> void
{
    mManagedPPaymentRequestChild.ToArray(aArr);
}

auto PBrowserChild::ManagedPPaymentRequestChild() const -> const ManagedContainer<PPaymentRequestChild>&
{
    return mManagedPPaymentRequestChild;
}

auto PBrowserChild::ManagedPWindowGlobalChild(nsTArray<PWindowGlobalChild*>& aArr) const -> void
{
    mManagedPWindowGlobalChild.ToArray(aArr);
}

auto PBrowserChild::ManagedPWindowGlobalChild() const -> const ManagedContainer<PWindowGlobalChild>&
{
    return mManagedPWindowGlobalChild;
}

auto PBrowserChild::ManagedPBrowserBridgeChild(nsTArray<PBrowserBridgeChild*>& aArr) const -> void
{
    mManagedPBrowserBridgeChild.ToArray(aArr);
}

auto PBrowserChild::ManagedPBrowserBridgeChild() const -> const ManagedContainer<PBrowserBridgeChild>&
{
    return mManagedPBrowserBridgeChild;
}

auto PBrowserChild::ManagedPVsyncChild(nsTArray<PVsyncChild*>& aArr) const -> void
{
    mManagedPVsyncChild.ToArray(aArr);
}

auto PBrowserChild::ManagedPVsyncChild() const -> const ManagedContainer<PVsyncChild>&
{
    return mManagedPVsyncChild;
}

auto PBrowserChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPColorPickerChild.Count();
    total += mManagedPDocAccessibleChild.Count();
    total += mManagedPFilePickerChild.Count();
    total += mManagedPPluginWidgetChild.Count();
    total += mManagedPPaymentRequestChild.Count();
    total += mManagedPWindowGlobalChild.Count();
    total += mManagedPBrowserBridgeChild.Count();
    total += mManagedPVsyncChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPColorPickerChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPDocAccessibleChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPFilePickerChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPluginWidgetChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPPaymentRequestChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPWindowGlobalChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBrowserBridgeChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPVsyncChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBrowserChild::OpenPColorPickerEndpoint(PColorPickerChild* aActor) -> ManagedEndpoint<PColorPickerParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PColorPickerChild actor");
        return ManagedEndpoint<PColorPickerParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPColorPickerChild.PutEntry(aActor);

    return ManagedEndpoint<PColorPickerParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserChild::BindPColorPickerEndpoint(
        ManagedEndpoint<PColorPickerChild> aEndpoint,
        PColorPickerChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PColorPickerChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPColorPickerChild.PutEntry(aActor);

    return true;
}

auto PBrowserChild::OpenPDocAccessibleEndpoint(PDocAccessibleChild* aActor) -> ManagedEndpoint<PDocAccessibleParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PDocAccessibleChild actor");
        return ManagedEndpoint<PDocAccessibleParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPDocAccessibleChild.PutEntry(aActor);

    return ManagedEndpoint<PDocAccessibleParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserChild::BindPDocAccessibleEndpoint(
        ManagedEndpoint<PDocAccessibleChild> aEndpoint,
        PDocAccessibleChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PDocAccessibleChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPDocAccessibleChild.PutEntry(aActor);

    return true;
}

auto PBrowserChild::OpenPFilePickerEndpoint(PFilePickerChild* aActor) -> ManagedEndpoint<PFilePickerParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PFilePickerChild actor");
        return ManagedEndpoint<PFilePickerParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPFilePickerChild.PutEntry(aActor);

    return ManagedEndpoint<PFilePickerParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserChild::BindPFilePickerEndpoint(
        ManagedEndpoint<PFilePickerChild> aEndpoint,
        PFilePickerChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PFilePickerChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPFilePickerChild.PutEntry(aActor);

    return true;
}

auto PBrowserChild::OpenPPluginWidgetEndpoint(PPluginWidgetChild* aActor) -> ManagedEndpoint<PPluginWidgetParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginWidgetChild actor");
        return ManagedEndpoint<PPluginWidgetParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPluginWidgetChild.PutEntry(aActor);

    return ManagedEndpoint<PPluginWidgetParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserChild::BindPPluginWidgetEndpoint(
        ManagedEndpoint<PPluginWidgetChild> aEndpoint,
        PPluginWidgetChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPluginWidgetChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPluginWidgetChild.PutEntry(aActor);

    return true;
}

auto PBrowserChild::OpenPPaymentRequestEndpoint(PPaymentRequestChild* aActor) -> ManagedEndpoint<PPaymentRequestParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PPaymentRequestChild actor");
        return ManagedEndpoint<PPaymentRequestParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPPaymentRequestChild.PutEntry(aActor);

    return ManagedEndpoint<PPaymentRequestParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserChild::BindPPaymentRequestEndpoint(
        ManagedEndpoint<PPaymentRequestChild> aEndpoint,
        PPaymentRequestChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PPaymentRequestChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPPaymentRequestChild.PutEntry(aActor);

    return true;
}

auto PBrowserChild::OpenPWindowGlobalEndpoint(PWindowGlobalChild* aActor) -> ManagedEndpoint<PWindowGlobalParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWindowGlobalChild actor");
        return ManagedEndpoint<PWindowGlobalParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWindowGlobalChild.PutEntry(aActor);

    return ManagedEndpoint<PWindowGlobalParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserChild::BindPWindowGlobalEndpoint(
        ManagedEndpoint<PWindowGlobalChild> aEndpoint,
        PWindowGlobalChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWindowGlobalChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWindowGlobalChild.PutEntry(aActor);

    return true;
}

auto PBrowserChild::OpenPBrowserBridgeEndpoint(PBrowserBridgeChild* aActor) -> ManagedEndpoint<PBrowserBridgeParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserBridgeChild actor");
        return ManagedEndpoint<PBrowserBridgeParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBrowserBridgeChild.PutEntry(aActor);

    return ManagedEndpoint<PBrowserBridgeParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserChild::BindPBrowserBridgeEndpoint(
        ManagedEndpoint<PBrowserBridgeChild> aEndpoint,
        PBrowserBridgeChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBrowserBridgeChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBrowserBridgeChild.PutEntry(aActor);

    return true;
}

auto PBrowserChild::OpenPVsyncEndpoint(PVsyncChild* aActor) -> ManagedEndpoint<PVsyncParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PVsyncChild actor");
        return ManagedEndpoint<PVsyncParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPVsyncChild.PutEntry(aActor);

    return ManagedEndpoint<PVsyncParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBrowserChild::BindPVsyncEndpoint(
        ManagedEndpoint<PVsyncChild> aEndpoint,
        PVsyncChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PVsyncChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPVsyncChild.PutEntry(aActor);

    return true;
}

auto PBrowserChild::SendAsyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_AsyncMessage(Id());

    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_AsyncMessage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendPDocAccessibleConstructor(
        PDocAccessibleChild* aParentDoc,
        const uint64_t& aParentAcc,
        const uint32_t& aMsaaID,
        const IAccessibleHolder& aDocCOMProxy) -> PDocAccessibleChild*
{
    PDocAccessibleChild* actor = (static_cast<BrowserChild*>(this))->AllocPDocAccessibleChild(aParentDoc, aParentAcc, aMsaaID, aDocCOMProxy);
    return SendPDocAccessibleConstructor(actor, aParentDoc, aParentAcc, aMsaaID, aDocCOMProxy);
}

auto PBrowserChild::SendPDocAccessibleConstructor(
        PDocAccessibleChild* actor,
        PDocAccessibleChild* aParentDoc,
        const uint64_t& aParentAcc,
        const uint32_t& aMsaaID,
        const IAccessibleHolder& aDocCOMProxy) -> PDocAccessibleChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PDocAccessibleChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPDocAccessibleChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBrowser::Msg_PDocAccessibleConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aParentDoc);
    // Sentinel = 'aParentDoc'
    (msg__)->WriteSentinel(355140578);
    WriteIPDLParam(msg__, this, aParentAcc);
    // Sentinel = 'aParentAcc'
    (msg__)->WriteSentinel(352977875);
    WriteIPDLParam(msg__, this, aMsaaID);
    // Sentinel = 'aMsaaID'
    (msg__)->WriteSentinel(171442801);
    WriteIPDLParam(msg__, this, aDocCOMProxy);
    // Sentinel = 'aDocCOMProxy'
    (msg__)->WriteSentinel(460457081);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PDocAccessibleConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PDocAccessibleChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PDocAccessibleMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBrowserChild::SendPPluginWidgetConstructor() -> PPluginWidgetChild*
{
    PPluginWidgetChild* actor = (static_cast<BrowserChild*>(this))->AllocPPluginWidgetChild();
    return SendPPluginWidgetConstructor(actor);
}

auto PBrowserChild::SendPPluginWidgetConstructor(PPluginWidgetChild* actor) -> PPluginWidgetChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPluginWidgetChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPluginWidgetChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBrowser::Msg_PPluginWidgetConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Synchronously send the constructor message to the other side. If
    // the send fails, e.g. due to the remote side shutting down, the
    // actor will be destroyed and potentially freed.
    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PPluginWidgetConstructor", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_PPluginWidgetConstructor", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }


    if (!(sendok__)) {
        // Warn, destroy the actor and return null if the message
        // failed to send.
        NS_WARNING("Error sending constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPluginWidgetMsgStart, actor);

        return nullptr;
    }


    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return actor;
}

auto PBrowserChild::SendPPaymentRequestConstructor() -> PPaymentRequestChild*
{
    PPaymentRequestChild* actor = (static_cast<BrowserChild*>(this))->AllocPPaymentRequestChild();
    return SendPPaymentRequestConstructor(actor);
}

auto PBrowserChild::SendPPaymentRequestConstructor(PPaymentRequestChild* actor) -> PPaymentRequestChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PPaymentRequestChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPPaymentRequestChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBrowser::Msg_PPaymentRequestConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PPaymentRequestConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PPaymentRequestChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PPaymentRequestMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBrowserChild::SendPVsyncConstructor() -> PVsyncChild*
{
    PVsyncChild* actor = (static_cast<BrowserChild*>(this))->AllocPVsyncChild();
    return SendPVsyncConstructor(actor);
}

auto PBrowserChild::SendPVsyncConstructor(PVsyncChild* actor) -> PVsyncChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PVsyncChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPVsyncChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBrowser::Msg_PVsyncConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PVsyncConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PVsyncChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PVsyncMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBrowserChild::SendSetNativeChildOfShareableWindow(const uintptr_t& childWindow) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetNativeChildOfShareableWindow(Id());

    WriteIPDLParam(msg__, this, childWindow);
    // Sentinel = 'childWindow'
    (msg__)->WriteSentinel(444138621);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetNativeChildOfShareableWindow", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendDispatchFocusToTopLevelWindow() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_DispatchFocusToTopLevelWindow(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_DispatchFocusToTopLevelWindow", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_DispatchFocusToTopLevelWindow", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PBrowserChild::SendMoveFocus(
        const bool& forward,
        const bool& forDocumentNavigation) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_MoveFocus(Id());

    WriteIPDLParam(msg__, this, forward);
    // Sentinel = 'forward'
    (msg__)->WriteSentinel(200016630);
    WriteIPDLParam(msg__, this, forDocumentNavigation);
    // Sentinel = 'forDocumentNavigation'
    (msg__)->WriteSentinel(1571555479);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_MoveFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSizeShellTo(
        const uint32_t& aFlag,
        const int32_t& aWidth,
        const int32_t& aHeight,
        const int32_t& aShellItemWidth,
        const int32_t& aShellItemHeight) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SizeShellTo(Id());

    WriteIPDLParam(msg__, this, aFlag);
    // Sentinel = 'aFlag'
    (msg__)->WriteSentinel(91161052);
    WriteIPDLParam(msg__, this, aWidth);
    // Sentinel = 'aWidth'
    (msg__)->WriteSentinel(136249954);
    WriteIPDLParam(msg__, this, aHeight);
    // Sentinel = 'aHeight'
    (msg__)->WriteSentinel(175375035);
    WriteIPDLParam(msg__, this, aShellItemWidth);
    // Sentinel = 'aShellItemWidth'
    (msg__)->WriteSentinel(779945449);
    WriteIPDLParam(msg__, this, aShellItemHeight);
    // Sentinel = 'aShellItemHeight'
    (msg__)->WriteSentinel(878249538);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SizeShellTo", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendDropLinks(const nsTArray<nsString>& aLinks) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_DropLinks(Id());

    WriteIPDLParam(msg__, this, aLinks);
    // Sentinel = 'aLinks'
    (msg__)->WriteSentinel(134152803);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_DropLinks", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendEvent(const RemoteDOMEvent& aEvent) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_Event(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_Event", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSyncMessage(
        const nsString& aMessage,
        const ClonedMessageData& aData,
        nsTArray<StructuredCloneData>* retval) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SyncMessage(Id());

    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SyncMessage", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_SyncMessage", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, retval)))) {
        FatalError("Error deserializing 'StructuredCloneData[]'");
        return false;
    }
    // Sentinel = 'retval'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 151716495)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'StructuredCloneData[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBrowserChild::SendNotifyIMEFocus(
        const ContentCache& contentCache,
        const IMENotification& notification,
        mozilla::ipc::ResolveCallback<IMENotificationRequests>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBrowser::Msg_NotifyIMEFocus(Id());

    WriteIPDLParam(msg__, this, contentCache);
    // Sentinel = 'contentCache'
    (msg__)->WriteSentinel(535299280);
    WriteIPDLParam(msg__, this, notification);
    // Sentinel = 'notification'
    (msg__)->WriteSentinel(550438152);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMEFocus", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBrowserChild::SendNotifyIMEFocus(
        const ContentCache& contentCache,
        const IMENotification& notification) -> RefPtr<NotifyIMEFocusPromise>
{
    RefPtr<MozPromise<IMENotificationRequests, ResponseRejectReason, true>::Private> promise__ = new MozPromise<IMENotificationRequests, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendNotifyIMEFocus(std::move(contentCache), std::move(notification), [promise__](IMENotificationRequests&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBrowserChild::SendNotifyIMETextChange(
        const ContentCache& contentCache,
        const IMENotification& notification) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NotifyIMETextChange(Id());

    WriteIPDLParam(msg__, this, contentCache);
    // Sentinel = 'contentCache'
    (msg__)->WriteSentinel(535299280);
    WriteIPDLParam(msg__, this, notification);
    // Sentinel = 'notification'
    (msg__)->WriteSentinel(550438152);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMETextChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendNotifyIMECompositionUpdate(
        const ContentCache& contentCache,
        const IMENotification& notification) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NotifyIMECompositionUpdate(Id());

    WriteIPDLParam(msg__, this, contentCache);
    // Sentinel = 'contentCache'
    (msg__)->WriteSentinel(535299280);
    WriteIPDLParam(msg__, this, notification);
    // Sentinel = 'notification'
    (msg__)->WriteSentinel(550438152);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMECompositionUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendNotifyIMESelection(
        const ContentCache& contentCache,
        const IMENotification& notification) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NotifyIMESelection(Id());

    WriteIPDLParam(msg__, this, contentCache);
    // Sentinel = 'contentCache'
    (msg__)->WriteSentinel(535299280);
    WriteIPDLParam(msg__, this, notification);
    // Sentinel = 'notification'
    (msg__)->WriteSentinel(550438152);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMESelection", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendUpdateContentCache(const ContentCache& contentCache) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_UpdateContentCache(Id());

    WriteIPDLParam(msg__, this, contentCache);
    // Sentinel = 'contentCache'
    (msg__)->WriteSentinel(535299280);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateContentCache", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendNotifyIMEMouseButtonEvent(
        const IMENotification& notification,
        bool* consumedByIME) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NotifyIMEMouseButtonEvent(Id());

    WriteIPDLParam(msg__, this, notification);
    // Sentinel = 'notification'
    (msg__)->WriteSentinel(550438152);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMEMouseButtonEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_NotifyIMEMouseButtonEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, consumedByIME)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'consumedByIME'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 621282549)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBrowserChild::SendNotifyIMEPositionChange(
        const ContentCache& contentCache,
        const IMENotification& notification) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NotifyIMEPositionChange(Id());

    WriteIPDLParam(msg__, this, contentCache);
    // Sentinel = 'contentCache'
    (msg__)->WriteSentinel(535299280);
    WriteIPDLParam(msg__, this, notification);
    // Sentinel = 'notification'
    (msg__)->WriteSentinel(550438152);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMEPositionChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendRequestIMEToCommitComposition(
        const bool& cancel,
        bool* isCommitted,
        nsString* committedString) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RequestIMEToCommitComposition(Id());

    WriteIPDLParam(msg__, this, cancel);
    // Sentinel = 'cancel'
    (msg__)->WriteSentinel(139723367);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RequestIMEToCommitComposition", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_RequestIMEToCommitComposition", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, isCommitted)))) {
        FatalError("Error deserializing 'bool'");
        return false;
    }
    // Sentinel = 'isCommitted'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 449774723)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, committedString)))) {
        FatalError("Error deserializing 'nsString'");
        return false;
    }
    // Sentinel = 'committedString'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 840042046)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBrowserChild::SendOnEventNeedingAckHandled(const EventMessage& message) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_OnEventNeedingAckHandled(Id());

    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_OnEventNeedingAckHandled", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendRequestFocus(
        const bool& canRaise,
        const CallerType& aCallerType) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RequestFocus(Id());

    WriteIPDLParam(msg__, this, canRaise);
    // Sentinel = 'canRaise'
    (msg__)->WriteSentinel(234816295);
    WriteIPDLParam(msg__, this, aCallerType);
    // Sentinel = 'aCallerType'
    (msg__)->WriteSentinel(422118487);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RequestFocus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendWheelZoomChange(const bool& increase) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_WheelZoomChange(Id());

    WriteIPDLParam(msg__, this, increase);
    // Sentinel = 'increase'
    (msg__)->WriteSentinel(249561931);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_WheelZoomChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendEnableDisableCommands(
        const MaybeDiscardedBrowsingContext& bc,
        const nsString& action,
        const nsTArray<nsCString>& enabledCommands,
        const nsTArray<nsCString>& disabledCommands) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_EnableDisableCommands(Id());

    WriteIPDLParam(msg__, this, bc);
    // Sentinel = 'bc'
    (msg__)->WriteSentinel(19464390);
    WriteIPDLParam(msg__, this, action);
    // Sentinel = 'action'
    (msg__)->WriteSentinel(143786623);
    WriteIPDLParam(msg__, this, enabledCommands);
    // Sentinel = 'enabledCommands'
    (msg__)->WriteSentinel(796263934);
    WriteIPDLParam(msg__, this, disabledCommands);
    // Sentinel = 'disabledCommands'
    (msg__)->WriteSentinel(909706859);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_EnableDisableCommands", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendGetInputContext(IMEState* state) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_GetInputContext(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_GetInputContext", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_GetInputContext", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, state)))) {
        FatalError("Error deserializing 'IMEState'");
        return false;
    }
    // Sentinel = 'state'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 109314594)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'IMEState'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBrowserChild::SendSetInputContext(
        const InputContext& context,
        const InputContextAction& action) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetInputContext(Id());

    WriteIPDLParam(msg__, this, context);
    // Sentinel = 'context'
    (msg__)->WriteSentinel(199164678);
    WriteIPDLParam(msg__, this, action);
    // Sentinel = 'action'
    (msg__)->WriteSentinel(143786623);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetInputContext", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSetCursor(
        const nsCursor& value,
        const bool& hasCustomCursor,
        const nsCString& customCursorData,
        const uint32_t& width,
        const uint32_t& height,
        const uint32_t& stride,
        const SurfaceFormat& format,
        const uint32_t& hotspotX,
        const uint32_t& hotspotY,
        const bool& force) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetCursor(Id());

    WriteIPDLParam(msg__, this, value);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(107610654);
    WriteIPDLParam(msg__, this, hasCustomCursor);
    // Sentinel = 'hasCustomCursor'
    (msg__)->WriteSentinel(818415158);
    WriteIPDLParam(msg__, this, customCursorData);
    // Sentinel = 'customCursorData'
    (msg__)->WriteSentinel(954992276);
    WriteIPDLParam(msg__, this, width);
    // Sentinel = 'width'
    (msg__)->WriteSentinel(108528161);
    WriteIPDLParam(msg__, this, height);
    // Sentinel = 'height'
    (msg__)->WriteSentinel(143393402);
    WriteIPDLParam(msg__, this, stride);
    // Sentinel = 'stride'
    (msg__)->WriteSentinel(153879180);
    WriteIPDLParam(msg__, this, format);
    // Sentinel = 'format'
    (msg__)->WriteSentinel(148505226);
    WriteIPDLParam(msg__, this, hotspotX);
    // Sentinel = 'hotspotX'
    (msg__)->WriteSentinel(261423978);
    WriteIPDLParam(msg__, this, hotspotY);
    // Sentinel = 'hotspotY'
    (msg__)->WriteSentinel(261489515);
    WriteIPDLParam(msg__, this, force);
    // Sentinel = 'force'
    (msg__)->WriteSentinel(104858128);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetCursor", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSetLinkStatus(const nsString& status) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetLinkStatus(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetLinkStatus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendShowTooltip(
        const uint32_t& x,
        const uint32_t& y,
        const nsString& tooltip,
        const nsString& direction) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ShowTooltip(Id());

    WriteIPDLParam(msg__, this, x);
    // Sentinel = 'x'
    (msg__)->WriteSentinel(7929977);
    WriteIPDLParam(msg__, this, y);
    // Sentinel = 'y'
    (msg__)->WriteSentinel(7995514);
    WriteIPDLParam(msg__, this, tooltip);
    // Sentinel = 'tooltip'
    (msg__)->WriteSentinel(205914892);
    WriteIPDLParam(msg__, this, direction);
    // Sentinel = 'direction'
    (msg__)->WriteSentinel(311886786);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ShowTooltip", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendHideTooltip() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_HideTooltip(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_HideTooltip", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendPColorPickerConstructor(
        const nsString& title,
        const nsString& initialColor) -> PColorPickerChild*
{
    PColorPickerChild* actor = (static_cast<BrowserChild*>(this))->AllocPColorPickerChild(title, initialColor);
    return SendPColorPickerConstructor(actor, title, initialColor);
}

auto PBrowserChild::SendPColorPickerConstructor(
        PColorPickerChild* actor,
        const nsString& title,
        const nsString& initialColor) -> PColorPickerChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PColorPickerChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPColorPickerChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBrowser::Msg_PColorPickerConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, title);
    // Sentinel = 'title'
    (msg__)->WriteSentinel(109445667);
    WriteIPDLParam(msg__, this, initialColor);
    // Sentinel = 'initialColor'
    (msg__)->WriteSentinel(536216810);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PColorPickerConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PColorPickerChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PColorPickerMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBrowserChild::SendPFilePickerConstructor(
        const nsString& aTitle,
        const int16_t& aMode) -> PFilePickerChild*
{
    PFilePickerChild* actor = (static_cast<BrowserChild*>(this))->AllocPFilePickerChild(aTitle, aMode);
    return SendPFilePickerConstructor(actor, aTitle, aMode);
}

auto PBrowserChild::SendPFilePickerConstructor(
        PFilePickerChild* actor,
        const nsString& aTitle,
        const int16_t& aMode) -> PFilePickerChild*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PFilePickerChild actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPFilePickerChild.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBrowser::Msg_PFilePickerConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, aTitle);
    // Sentinel = 'aTitle'
    (msg__)->WriteSentinel(137167460);
    WriteIPDLParam(msg__, this, aMode);
    // Sentinel = 'aMode'
    (msg__)->WriteSentinel(93848039);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PFilePickerConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PFilePickerChild constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PFilePickerMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBrowserChild::SendIndexedDBPermissionRequest(
        nsIPrincipal* aPrincipal,
        mozilla::ipc::ResolveCallback<uint32_t>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBrowser::Msg_IndexedDBPermissionRequest(Id());

    WriteIPDLParam(msg__, this, aPrincipal);
    // Sentinel = 'aPrincipal'
    (msg__)->WriteSentinel(364381188);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_IndexedDBPermissionRequest", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBrowserChild::SendIndexedDBPermissionRequest(nsIPrincipal* aPrincipal) -> RefPtr<IndexedDBPermissionRequestPromise>
{
    RefPtr<MozPromise<uint32_t, ResponseRejectReason, true>::Private> promise__ = new MozPromise<uint32_t, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendIndexedDBPermissionRequest(std::move(aPrincipal), [promise__](uint32_t&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBrowserChild::SendRespondStartSwipeEvent(
        const uint64_t& aInputBlockId,
        const bool& aStartSwipe) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RespondStartSwipeEvent(Id());

    WriteIPDLParam(msg__, this, aInputBlockId);
    // Sentinel = 'aInputBlockId'
    (msg__)->WriteSentinel(595657994);
    WriteIPDLParam(msg__, this, aStartSwipe);
    // Sentinel = 'aStartSwipe'
    (msg__)->WriteSentinel(442565752);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RespondStartSwipeEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendAsyncAuthPrompt(
        const nsCString& uri,
        const nsString& realm,
        const uint64_t& aCallbackId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_AsyncAuthPrompt(Id());

    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);
    WriteIPDLParam(msg__, this, realm);
    // Sentinel = 'realm'
    (msg__)->WriteSentinel(104530450);
    WriteIPDLParam(msg__, this, aCallbackId);
    // Sentinel = 'aCallbackId'
    (msg__)->WriteSentinel(411370524);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_AsyncAuthPrompt", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendLookUpDictionary(
        const nsString& aText,
        const nsTArray<FontRange>& aFontRangeArray,
        const bool& aIsVertical,
        const LayoutDeviceIntPoint& aPoint) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_LookUpDictionary(Id());

    WriteIPDLParam(msg__, this, aText);
    // Sentinel = 'aText'
    (msg__)->WriteSentinel(97321479);
    WriteIPDLParam(msg__, this, aFontRangeArray);
    // Sentinel = 'aFontRangeArray'
    (msg__)->WriteSentinel(775095781);
    WriteIPDLParam(msg__, this, aIsVertical);
    // Sentinel = 'aIsVertical'
    (msg__)->WriteSentinel(427361368);
    WriteIPDLParam(msg__, this, aPoint);
    // Sentinel = 'aPoint'
    (msg__)->WriteSentinel(136512108);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_LookUpDictionary", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::Send__delete__(PBrowserChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PBrowser::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PBrowserMsgStart, actor);
    return sendok__;
}

auto PBrowserChild::SendReplyKeyEvent(const WidgetKeyboardEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ReplyKeyEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ReplyKeyEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendRequestNativeKeyBindings(
        const uint32_t& aType,
        const WidgetKeyboardEvent& aEvent,
        nsTArray<CommandInt>* commands) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RequestNativeKeyBindings(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);
    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RequestNativeKeyBindings", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_RequestNativeKeyBindings", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, commands)))) {
        FatalError("Error deserializing 'CommandInt[]'");
        return false;
    }
    // Sentinel = 'commands'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 249627475)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'CommandInt[]'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBrowserChild::SendSynthesizeNativeKeyEvent(
        const int32_t& aNativeKeyboardLayout,
        const int32_t& aNativeKeyCode,
        const uint32_t& aModifierFlags,
        const nsString& aCharacters,
        const nsString& aUnmodifiedCharacters,
        const uint64_t& aObserverId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SynthesizeNativeKeyEvent(Id());

    WriteIPDLParam(msg__, this, aNativeKeyboardLayout);
    // Sentinel = 'aNativeKeyboardLayout'
    (msg__)->WriteSentinel(1529153656);
    WriteIPDLParam(msg__, this, aNativeKeyCode);
    // Sentinel = 'aNativeKeyCode'
    (msg__)->WriteSentinel(680527213);
    WriteIPDLParam(msg__, this, aModifierFlags);
    // Sentinel = 'aModifierFlags'
    (msg__)->WriteSentinel(681444734);
    WriteIPDLParam(msg__, this, aCharacters);
    // Sentinel = 'aCharacters'
    (msg__)->WriteSentinel(422380642);
    WriteIPDLParam(msg__, this, aUnmodifiedCharacters);
    // Sentinel = 'aUnmodifiedCharacters'
    (msg__)->WriteSentinel(1529874534);
    WriteIPDLParam(msg__, this, aObserverId);
    // Sentinel = 'aObserverId'
    (msg__)->WriteSentinel(435356759);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeKeyEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSynthesizeNativeMouseEvent(
        const LayoutDeviceIntPoint& aPoint,
        const uint32_t& aNativeMessage,
        const uint32_t& aModifierFlags,
        const uint64_t& aObserverId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SynthesizeNativeMouseEvent(Id());

    WriteIPDLParam(msg__, this, aPoint);
    // Sentinel = 'aPoint'
    (msg__)->WriteSentinel(136512108);
    WriteIPDLParam(msg__, this, aNativeMessage);
    // Sentinel = 'aNativeMessage'
    (msg__)->WriteSentinel(689702286);
    WriteIPDLParam(msg__, this, aModifierFlags);
    // Sentinel = 'aModifierFlags'
    (msg__)->WriteSentinel(681444734);
    WriteIPDLParam(msg__, this, aObserverId);
    // Sentinel = 'aObserverId'
    (msg__)->WriteSentinel(435356759);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeMouseEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSynthesizeNativeMouseMove(
        const LayoutDeviceIntPoint& aPoint,
        const uint64_t& aObserverId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SynthesizeNativeMouseMove(Id());

    WriteIPDLParam(msg__, this, aPoint);
    // Sentinel = 'aPoint'
    (msg__)->WriteSentinel(136512108);
    WriteIPDLParam(msg__, this, aObserverId);
    // Sentinel = 'aObserverId'
    (msg__)->WriteSentinel(435356759);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeMouseMove", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSynthesizeNativeMouseScrollEvent(
        const LayoutDeviceIntPoint& aPoint,
        const uint32_t& aNativeMessage,
        const double& aDeltaX,
        const double& aDeltaY,
        const double& aDeltaZ,
        const uint32_t& aModifierFlags,
        const uint32_t& aAdditionalFlags,
        const uint64_t& aObserverId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SynthesizeNativeMouseScrollEvent(Id());

    WriteIPDLParam(msg__, this, aPoint);
    // Sentinel = 'aPoint'
    (msg__)->WriteSentinel(136512108);
    WriteIPDLParam(msg__, this, aNativeMessage);
    // Sentinel = 'aNativeMessage'
    (msg__)->WriteSentinel(689702286);
    WriteIPDLParam(msg__, this, aDeltaX);
    // Sentinel = 'aDeltaX'
    (msg__)->WriteSentinel(174391972);
    WriteIPDLParam(msg__, this, aDeltaY);
    // Sentinel = 'aDeltaY'
    (msg__)->WriteSentinel(174457509);
    WriteIPDLParam(msg__, this, aDeltaZ);
    // Sentinel = 'aDeltaZ'
    (msg__)->WriteSentinel(174523046);
    WriteIPDLParam(msg__, this, aModifierFlags);
    // Sentinel = 'aModifierFlags'
    (msg__)->WriteSentinel(681444734);
    WriteIPDLParam(msg__, this, aAdditionalFlags);
    // Sentinel = 'aAdditionalFlags'
    (msg__)->WriteSentinel(880084552);
    WriteIPDLParam(msg__, this, aObserverId);
    // Sentinel = 'aObserverId'
    (msg__)->WriteSentinel(435356759);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeMouseScrollEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSynthesizeNativeTouchPoint(
        const uint32_t& aPointerId,
        const TouchPointerState& aPointerState,
        const LayoutDeviceIntPoint& aPoint,
        const double& aPointerPressure,
        const uint32_t& aPointerOrientation,
        const uint64_t& aObserverId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SynthesizeNativeTouchPoint(Id());

    WriteIPDLParam(msg__, this, aPointerId);
    // Sentinel = 'aPointerId'
    (msg__)->WriteSentinel(364053488);
    WriteIPDLParam(msg__, this, aPointerState);
    // Sentinel = 'aPointerState'
    (msg__)->WriteSentinel(610600260);
    WriteIPDLParam(msg__, this, aPoint);
    // Sentinel = 'aPoint'
    (msg__)->WriteSentinel(136512108);
    WriteIPDLParam(msg__, this, aPointerPressure);
    // Sentinel = 'aPointerPressure'
    (msg__)->WriteSentinel(922617500);
    WriteIPDLParam(msg__, this, aPointerOrientation);
    // Sentinel = 'aPointerOrientation'
    (msg__)->WriteSentinel(1287653327);
    WriteIPDLParam(msg__, this, aObserverId);
    // Sentinel = 'aObserverId'
    (msg__)->WriteSentinel(435356759);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeTouchPoint", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSynthesizeNativeTouchPadPinch(
        const TouchpadPinchPhase& aEventPhase,
        const float& aScale,
        const LayoutDeviceIntPoint& aPoint,
        const int32_t& aModifierFlags) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SynthesizeNativeTouchPadPinch(Id());

    WriteIPDLParam(msg__, this, aEventPhase);
    // Sentinel = 'aEventPhase'
    (msg__)->WriteSentinel(428737621);
    WriteIPDLParam(msg__, this, aScale);
    // Sentinel = 'aScale'
    (msg__)->WriteSentinel(131531338);
    WriteIPDLParam(msg__, this, aPoint);
    // Sentinel = 'aPoint'
    (msg__)->WriteSentinel(136512108);
    WriteIPDLParam(msg__, this, aModifierFlags);
    // Sentinel = 'aModifierFlags'
    (msg__)->WriteSentinel(681444734);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeTouchPadPinch", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSynthesizeNativeTouchTap(
        const LayoutDeviceIntPoint& aPoint,
        const bool& aLongTap,
        const uint64_t& aObserverId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SynthesizeNativeTouchTap(Id());

    WriteIPDLParam(msg__, this, aPoint);
    // Sentinel = 'aPoint'
    (msg__)->WriteSentinel(136512108);
    WriteIPDLParam(msg__, this, aLongTap);
    // Sentinel = 'aLongTap'
    (msg__)->WriteSentinel(229507863);
    WriteIPDLParam(msg__, this, aObserverId);
    // Sentinel = 'aObserverId'
    (msg__)->WriteSentinel(435356759);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SynthesizeNativeTouchTap", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendClearNativeTouchSequence(const uint64_t& aObserverId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ClearNativeTouchSequence(Id());

    WriteIPDLParam(msg__, this, aObserverId);
    // Sentinel = 'aObserverId'
    (msg__)->WriteSentinel(435356759);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ClearNativeTouchSequence", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendAccessKeyNotHandled(const WidgetKeyboardEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_AccessKeyNotHandled(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_AccessKeyNotHandled", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendRegisterProtocolHandler(
        const nsString& scheme,
        nsIURI* handlerURI,
        const nsString& title,
        nsIURI* documentURI) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RegisterProtocolHandler(Id());

    WriteIPDLParam(msg__, this, scheme);
    // Sentinel = 'scheme'
    (msg__)->WriteSentinel(146080374);
    WriteIPDLParam(msg__, this, handlerURI);
    // Sentinel = 'handlerURI'
    (msg__)->WriteSentinel(367264719);
    WriteIPDLParam(msg__, this, title);
    // Sentinel = 'title'
    (msg__)->WriteSentinel(109445667);
    WriteIPDLParam(msg__, this, documentURI);
    // Sentinel = 'documentURI'
    (msg__)->WriteSentinel(453706832);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RegisterProtocolHandler", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendOnStateChange(
        const mozilla::Maybe<WebProgressData>& aWebProgressData,
        const RequestData& aRequestData,
        const uint32_t& aStateFlags,
        const nsresult& aStatus,
        const mozilla::Maybe<WebProgressStateChangeData>& aStateChangeData) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_OnStateChange(Id());

    WriteIPDLParam(msg__, this, aWebProgressData);
    // Sentinel = 'aWebProgressData'
    (msg__)->WriteSentinel(890504783);
    WriteIPDLParam(msg__, this, aRequestData);
    // Sentinel = 'aRequestData'
    (msg__)->WriteSentinel(518390981);
    WriteIPDLParam(msg__, this, aStateFlags);
    // Sentinel = 'aStateFlags'
    (msg__)->WriteSentinel(428606544);
    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);
    WriteIPDLParam(msg__, this, aStateChangeData);
    // Sentinel = 'aStateChangeData'
    (msg__)->WriteSentinel(876086819);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_OnStateChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendOnProgressChange(
        const mozilla::Maybe<WebProgressData>& aWebProgressData,
        const RequestData& aRequestData,
        const int32_t& aCurSelfProgress,
        const int32_t& aMaxSelfProgress,
        const int32_t& aCurTotalProgress,
        const int32_t& aMaxTotalProgress) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_OnProgressChange(Id());

    WriteIPDLParam(msg__, this, aWebProgressData);
    // Sentinel = 'aWebProgressData'
    (msg__)->WriteSentinel(890504783);
    WriteIPDLParam(msg__, this, aRequestData);
    // Sentinel = 'aRequestData'
    (msg__)->WriteSentinel(518390981);
    WriteIPDLParam(msg__, this, aCurSelfProgress);
    // Sentinel = 'aCurSelfProgress'
    (msg__)->WriteSentinel(886113899);
    WriteIPDLParam(msg__, this, aMaxSelfProgress);
    // Sentinel = 'aMaxSelfProgress'
    (msg__)->WriteSentinel(882706023);
    WriteIPDLParam(msg__, this, aCurTotalProgress);
    // Sentinel = 'aCurTotalProgress'
    (msg__)->WriteSentinel(1012795109);
    WriteIPDLParam(msg__, this, aMaxTotalProgress);
    // Sentinel = 'aMaxTotalProgress'
    (msg__)->WriteSentinel(1009125089);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_OnProgressChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendOnLocationChange(
        const mozilla::Maybe<WebProgressData>& aWebProgressData,
        const RequestData& aRequestData,
        nsIURI* aLocation,
        const uint32_t& aFlags,
        const bool& aCanGoBack,
        const bool& aCanGoForward,
        const mozilla::Maybe<WebProgressLocationChangeData>& aLocationChangeData) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_OnLocationChange(Id());

    WriteIPDLParam(msg__, this, aWebProgressData);
    // Sentinel = 'aWebProgressData'
    (msg__)->WriteSentinel(890504783);
    WriteIPDLParam(msg__, this, aRequestData);
    // Sentinel = 'aRequestData'
    (msg__)->WriteSentinel(518390981);
    WriteIPDLParam(msg__, this, aLocation);
    // Sentinel = 'aLocation'
    (msg__)->WriteSentinel(292094875);
    WriteIPDLParam(msg__, this, aFlags);
    // Sentinel = 'aFlags'
    (msg__)->WriteSentinel(129892943);
    WriteIPDLParam(msg__, this, aCanGoBack);
    // Sentinel = 'aCanGoBack'
    (msg__)->WriteSentinel(325714843);
    WriteIPDLParam(msg__, this, aCanGoForward);
    // Sentinel = 'aCanGoForward'
    (msg__)->WriteSentinel(563152127);
    WriteIPDLParam(msg__, this, aLocationChangeData);
    // Sentinel = 'aLocationChangeData'
    (msg__)->WriteSentinel(1235617627);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_OnLocationChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendOnStatusChange(
        const mozilla::Maybe<WebProgressData>& aWebProgressData,
        const RequestData& aRequestData,
        const nsresult& aStatus,
        const nsString& aMessage) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_OnStatusChange(Id());

    WriteIPDLParam(msg__, this, aWebProgressData);
    // Sentinel = 'aWebProgressData'
    (msg__)->WriteSentinel(890504783);
    WriteIPDLParam(msg__, this, aRequestData);
    // Sentinel = 'aRequestData'
    (msg__)->WriteSentinel(518390981);
    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);
    WriteIPDLParam(msg__, this, aMessage);
    // Sentinel = 'aMessage'
    (msg__)->WriteSentinel(233440039);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_OnStatusChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendNotifyContentBlockingEvent(
        const uint32_t& aEvent,
        const RequestData& aRequestData,
        const bool& aBlocked,
        const nsCString& aTrackingOrigin,
        const nsTArray<nsCString>& aTrackingFullHashes,
        const mozilla::Maybe<StorageAccessPermissionGrantedReason>& aReason) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NotifyContentBlockingEvent(Id());

    WriteIPDLParam(msg__, this, aEvent);
    // Sentinel = 'aEvent'
    (msg__)->WriteSentinel(133956196);
    WriteIPDLParam(msg__, this, aRequestData);
    // Sentinel = 'aRequestData'
    (msg__)->WriteSentinel(518390981);
    WriteIPDLParam(msg__, this, aBlocked);
    // Sentinel = 'aBlocked'
    (msg__)->WriteSentinel(227279638);
    WriteIPDLParam(msg__, this, aTrackingOrigin);
    // Sentinel = 'aTrackingOrigin'
    (msg__)->WriteSentinel(792331773);
    WriteIPDLParam(msg__, this, aTrackingFullHashes);
    // Sentinel = 'aTrackingFullHashes'
    (msg__)->WriteSentinel(1248069508);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyContentBlockingEvent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendNavigationFinished() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NavigationFinished(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NavigationFinished", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSessionStoreUpdate(
        const mozilla::Maybe<nsCString>& aDocShellCaps,
        const mozilla::Maybe<bool>& aPrivatedMode,
        const nsTArray<nsCString>& aPositions,
        const nsTArray<int32_t>& aPositionDescendants,
        const nsTArray<InputFormData>& aInputs,
        const nsTArray<CollectedInputDataValue>& aIdVals,
        const nsTArray<CollectedInputDataValue>& aXPathVals,
        const nsTArray<nsCString>& aOrigins,
        const nsTArray<nsString>& aKeys,
        const nsTArray<nsString>& aValues,
        const bool& aIsFullStorage,
        const bool& aNeedCollectSHistory,
        const uint32_t& aFlushId,
        const bool& aIsFinal,
        const uint32_t& aEpoch) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SessionStoreUpdate(Id());

    WriteIPDLParam(msg__, this, aDocShellCaps);
    // Sentinel = 'aDocShellCaps'
    (msg__)->WriteSentinel(568394999);
    WriteIPDLParam(msg__, this, aPrivatedMode);
    // Sentinel = 'aPrivatedMode'
    (msg__)->WriteSentinel(605291814);
    WriteIPDLParam(msg__, this, aPositions);
    // Sentinel = 'aPositions'
    (msg__)->WriteSentinel(372966442);
    WriteIPDLParam(msg__, this, aPositionDescendants);
    // Sentinel = 'aPositionDescendants'
    (msg__)->WriteSentinel(1415776291);
    WriteIPDLParam(msg__, this, aInputs);
    // Sentinel = 'aInputs'
    (msg__)->WriteSentinel(184812261);
    WriteIPDLParam(msg__, this, aIdVals);
    // Sentinel = 'aIdVals'
    (msg__)->WriteSentinel(169738917);
    WriteIPDLParam(msg__, this, aXPathVals);
    // Sentinel = 'aXPathVals'
    (msg__)->WriteSentinel(345572317);
    WriteIPDLParam(msg__, this, aOrigins);
    // Sentinel = 'aOrigins'
    (msg__)->WriteSentinel(236454717);
    WriteIPDLParam(msg__, this, aKeys);
    // Sentinel = 'aKeys'
    (msg__)->WriteSentinel(95027710);
    WriteIPDLParam(msg__, this, aValues);
    // Sentinel = 'aValues'
    (msg__)->WriteSentinel(182649554);
    WriteIPDLParam(msg__, this, aIsFullStorage);
    // Sentinel = 'aIsFullStorage'
    (msg__)->WriteSentinel(679150982);
    WriteIPDLParam(msg__, this, aNeedCollectSHistory);
    // Sentinel = 'aNeedCollectSHistory'
    (msg__)->WriteSentinel(1343490025);
    WriteIPDLParam(msg__, this, aFlushId);
    // Sentinel = 'aFlushId'
    (msg__)->WriteSentinel(231015185);
    WriteIPDLParam(msg__, this, aIsFinal);
    // Sentinel = 'aIsFinal'
    (msg__)->WriteSentinel(221971208);
    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SessionStoreUpdate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendIntrinsicSizeOrRatioChanged(
        const mozilla::Maybe<IntrinsicSize>& aIntrinsicSize,
        const mozilla::Maybe<AspectRatio>& aIntrinsicRatio) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_IntrinsicSizeOrRatioChanged(Id());

    WriteIPDLParam(msg__, this, aIntrinsicSize);
    // Sentinel = 'aIntrinsicSize'
    (msg__)->WriteSentinel(708052400);
    WriteIPDLParam(msg__, this, aIntrinsicRatio);
    // Sentinel = 'aIntrinsicRatio'
    (msg__)->WriteSentinel(807667220);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_IntrinsicSizeOrRatioChanged", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendRequestPointerLock(
        mozilla::ipc::ResolveCallback<nsCString>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBrowser::Msg_RequestPointerLock(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RequestPointerLock", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBrowserChild::SendRequestPointerLock() -> RefPtr<RequestPointerLockPromise>
{
    RefPtr<MozPromise<nsCString, ResponseRejectReason, true>::Private> promise__ = new MozPromise<nsCString, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendRequestPointerLock([promise__](nsCString&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBrowserChild::SendReleasePointerLock() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ReleasePointerLock(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ReleasePointerLock", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendRequestPointerCapture(
        const uint32_t& aPointerId,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBrowser::Msg_RequestPointerCapture(Id());

    WriteIPDLParam(msg__, this, aPointerId);
    // Sentinel = 'aPointerId'
    (msg__)->WriteSentinel(364053488);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RequestPointerCapture", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBrowserChild::SendRequestPointerCapture(const uint32_t& aPointerId) -> RefPtr<RequestPointerCapturePromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendRequestPointerCapture(std::move(aPointerId), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBrowserChild::SendReleasePointerCapture(const uint32_t& aPointerId) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ReleasePointerCapture(Id());

    WriteIPDLParam(msg__, this, aPointerId);
    // Sentinel = 'aPointerId'
    (msg__)->WriteSentinel(364053488);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ReleasePointerCapture", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendRemotePaintIsReady() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RemotePaintIsReady(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RemotePaintIsReady", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendRemoteIsReadyToHandleInputEvents() -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_RemoteIsReadyToHandleInputEvents(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_RemoteIsReadyToHandleInputEvents", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendPaintWhileInterruptingJSNoOp(const LayersObserverEpoch& aEpoch) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_PaintWhileInterruptingJSNoOp(Id());

    WriteIPDLParam(msg__, this, aEpoch);
    // Sentinel = 'aEpoch'
    (msg__)->WriteSentinel(132121169);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_PaintWhileInterruptingJSNoOp", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSetDimensions(
        const uint32_t& aFlags,
        const int32_t& aX,
        const int32_t& aY,
        const int32_t& aCx,
        const int32_t& aCy,
        const double& aScale) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetDimensions(Id());

    WriteIPDLParam(msg__, this, aFlags);
    // Sentinel = 'aFlags'
    (msg__)->WriteSentinel(129892943);
    WriteIPDLParam(msg__, this, aX);
    // Sentinel = 'aX'
    (msg__)->WriteSentinel(18612410);
    WriteIPDLParam(msg__, this, aY);
    // Sentinel = 'aY'
    (msg__)->WriteSentinel(18677947);
    WriteIPDLParam(msg__, this, aCx);
    // Sentinel = 'aCx'
    (msg__)->WriteSentinel(35914013);
    WriteIPDLParam(msg__, this, aCy);
    // Sentinel = 'aCy'
    (msg__)->WriteSentinel(35979550);
    WriteIPDLParam(msg__, this, aScale);
    // Sentinel = 'aScale'
    (msg__)->WriteSentinel(131531338);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetDimensions", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendDispatchWheelEvent(const WidgetWheelEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_DispatchWheelEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_DispatchWheelEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_DispatchWheelEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PBrowserChild::SendDispatchMouseEvent(const WidgetMouseEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_DispatchMouseEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_DispatchMouseEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_DispatchMouseEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PBrowserChild::SendDispatchKeyboardEvent(const WidgetKeyboardEvent& event) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_DispatchKeyboardEvent(Id());

    WriteIPDLParam(msg__, this, event);
    // Sentinel = 'event'
    (msg__)->WriteSentinel(106234403);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_DispatchKeyboardEvent", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_DispatchKeyboardEvent", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PBrowserChild::SendInvokeDragSession(
        const nsTArray<IPCDataTransfer>& transfers,
        const uint32_t& action,
        mozilla::Maybe<Shmem>&& visualData,
        const uint32_t& stride,
        const SurfaceFormat& format,
        const LayoutDeviceIntRect& dragRect,
        nsIPrincipal* principal,
        nsIContentSecurityPolicy* csp,
        const CookieJarSettingsArgs& cookieJarSettings) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_InvokeDragSession(Id());

    WriteIPDLParam(msg__, this, transfers);
    // Sentinel = 'transfers'
    (msg__)->WriteSentinel(323290073);
    WriteIPDLParam(msg__, this, action);
    // Sentinel = 'action'
    (msg__)->WriteSentinel(143786623);
    WriteIPDLParam(msg__, this, std::move(visualData));
    // Sentinel = 'visualData'
    (msg__)->WriteSentinel(385877007);
    WriteIPDLParam(msg__, this, stride);
    // Sentinel = 'stride'
    (msg__)->WriteSentinel(153879180);
    WriteIPDLParam(msg__, this, format);
    // Sentinel = 'format'
    (msg__)->WriteSentinel(148505226);
    WriteIPDLParam(msg__, this, dragRect);
    // Sentinel = 'dragRect'
    (msg__)->WriteSentinel(239076141);
    WriteIPDLParam(msg__, this, principal);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(319620035);
    WriteIPDLParam(msg__, this, csp);
    // Sentinel = 'csp'
    (msg__)->WriteSentinel(42074439);
    WriteIPDLParam(msg__, this, cookieJarSettings);
    // Sentinel = 'cookieJarSettings'
    (msg__)->WriteSentinel(1031800553);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_InvokeDragSession", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendEnsureLayersConnected(CompositorOptions* compositorOptions) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_EnsureLayersConnected(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_EnsureLayersConnected", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_EnsureLayersConnected", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, compositorOptions)))) {
        FatalError("Error deserializing 'CompositorOptions'");
        return false;
    }
    // Sentinel = 'compositorOptions'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 1089275708)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'CompositorOptions'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBrowserChild::SendShowCanvasPermissionPrompt(
        const nsCString& aOrigin,
        const bool& aHideDoorHanger) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ShowCanvasPermissionPrompt(Id());

    WriteIPDLParam(msg__, this, aOrigin);
    // Sentinel = 'aOrigin'
    (msg__)->WriteSentinel(182125258);
    WriteIPDLParam(msg__, this, aHideDoorHanger);
    // Sentinel = 'aHideDoorHanger'
    (msg__)->WriteSentinel(753731013);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ShowCanvasPermissionPrompt", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSetSystemFont(const nsCString& aFontName) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetSystemFont(Id());

    WriteIPDLParam(msg__, this, aFontName);
    // Sentinel = 'aFontName'
    (msg__)->WriteSentinel(287114106);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetSystemFont", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_SetSystemFont", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PBrowserChild::SendGetSystemFont(nsCString* retval) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_GetSystemFont(Id());




    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_GetSystemFont", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBrowser::Msg_GetSystemFont", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, retval)))) {
        FatalError("Error deserializing 'nsCString'");
        return false;
    }
    // Sentinel = 'retval'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 151716495)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBrowserChild::SendMaybeFireEmbedderLoadEvents(const EmbedderElementEventType& aFireEventAtEmbeddingElement) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_MaybeFireEmbedderLoadEvents(Id());

    WriteIPDLParam(msg__, this, aFireEventAtEmbeddingElement);
    // Sentinel = 'aFireEventAtEmbeddingElement'
    (msg__)->WriteSentinel(2607483624);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_MaybeFireEmbedderLoadEvents", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendScrollRectIntoView(
        const nsRect& aRect,
        const ScrollAxis& aVertical,
        const ScrollAxis& aHorizontal,
        const ScrollFlags& aScrollFlags,
        const int32_t& aAppUnitsPerDevPixel) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_ScrollRectIntoView(Id());

    WriteIPDLParam(msg__, this, aRect);
    // Sentinel = 'aRect'
    (msg__)->WriteSentinel(94044656);
    WriteIPDLParam(msg__, this, aVertical);
    // Sentinel = 'aVertical'
    (msg__)->WriteSentinel(298845084);
    WriteIPDLParam(msg__, this, aHorizontal);
    // Sentinel = 'aHorizontal'
    (msg__)->WriteSentinel(447022220);
    WriteIPDLParam(msg__, this, aScrollFlags);
    // Sentinel = 'aScrollFlags'
    (msg__)->WriteSentinel(510592190);
    WriteIPDLParam(msg__, this, aAppUnitsPerDevPixel);
    // Sentinel = 'aAppUnitsPerDevPixel'
    (msg__)->WriteSentinel(1366296542);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_ScrollRectIntoView", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendSetAllowDeprecatedTls(const bool& value) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_SetAllowDeprecatedTls(Id());

    WriteIPDLParam(msg__, this, value);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(107610654);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_SetAllowDeprecatedTls", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendIsWindowSupportingProtectedMedia(
        const uint64_t& aOuterWindowID,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBrowser::Msg_IsWindowSupportingProtectedMedia(Id());

    WriteIPDLParam(msg__, this, aOuterWindowID);
    // Sentinel = 'aOuterWindowID'
    (msg__)->WriteSentinel(702612854);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_IsWindowSupportingProtectedMedia", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBrowserChild::SendIsWindowSupportingProtectedMedia(const uint64_t& aOuterWindowID) -> RefPtr<IsWindowSupportingProtectedMediaPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendIsWindowSupportingProtectedMedia(std::move(aOuterWindowID), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBrowserChild::SendIsWindowSupportingWebVR(
        const uint64_t& aOuterWindowID,
        mozilla::ipc::ResolveCallback<bool>&& aResolve,
        mozilla::ipc::RejectCallback&& aReject) -> void
{
    IPC::Message* msg__ = PBrowser::Msg_IsWindowSupportingWebVR(Id());

    WriteIPDLParam(msg__, this, aOuterWindowID);
    // Sentinel = 'aOuterWindowID'
    (msg__)->WriteSentinel(702612854);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_IsWindowSupportingWebVR", OTHER);

    ChannelSend(msg__, std::move(aResolve), std::move(aReject));
    return;
}

auto PBrowserChild::SendIsWindowSupportingWebVR(const uint64_t& aOuterWindowID) -> RefPtr<IsWindowSupportingWebVRPromise>
{
    RefPtr<MozPromise<bool, ResponseRejectReason, true>::Private> promise__ = new MozPromise<bool, ResponseRejectReason, true>::Private(__func__);
    promise__->UseDirectTaskDispatch(__func__);
    SendIsWindowSupportingWebVR(std::move(aOuterWindowID), [promise__](bool&& aValue) {
        promise__->Resolve(std::move(aValue), __func__);
    }, [promise__](ResponseRejectReason&& aReason) {
        promise__->Reject(std::move(aReason), __func__);
    });
    return promise__;
}

auto PBrowserChild::SendVisitURI(
        nsIURI* aURI,
        nsIURI* aLastVisitedURI,
        const uint32_t& aFlags) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_VisitURI(Id());

    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);
    WriteIPDLParam(msg__, this, aLastVisitedURI);
    // Sentinel = 'aLastVisitedURI'
    (msg__)->WriteSentinel(786695614);
    WriteIPDLParam(msg__, this, aFlags);
    // Sentinel = 'aFlags'
    (msg__)->WriteSentinel(129892943);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_VisitURI", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendQueryVisitedState(const nsTArray<RefPtr<nsIURI>>& aURIs) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_QueryVisitedState(Id());

    WriteIPDLParam(msg__, this, aURIs);
    // Sentinel = 'aURIs'
    (msg__)->WriteSentinel(87622085);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_QueryVisitedState", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::SendNewWindowGlobal(
        ManagedEndpoint<mozilla::dom::PWindowGlobalParent>&& aEndpoint,
        const WindowGlobalInit& aInit) -> bool
{
    IPC::Message* msg__ = PBrowser::Msg_NewWindowGlobal(Id());

    WriteIPDLParam(msg__, this, std::move(aEndpoint));
    // Sentinel = 'aEndpoint'
    (msg__)->WriteSentinel(292225955);
    WriteIPDLParam(msg__, this, aInit);
    // Sentinel = 'aInit'
    (msg__)->WriteSentinel(94241270);




    if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBrowserChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBrowser::Msg_NewWindowGlobal", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBrowserChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PColorPickerMsgStart:
{
            PColorPickerChild* actor = static_cast<PColorPickerChild*>(aListener);
            auto& container = mManagedPColorPickerChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PDocAccessibleMsgStart:
{
            PDocAccessibleChild* actor = static_cast<PDocAccessibleChild*>(aListener);
            auto& container = mManagedPDocAccessibleChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PFilePickerMsgStart:
{
            PFilePickerChild* actor = static_cast<PFilePickerChild*>(aListener);
            auto& container = mManagedPFilePickerChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPluginWidgetMsgStart:
{
            PPluginWidgetChild* actor = static_cast<PPluginWidgetChild*>(aListener);
            auto& container = mManagedPPluginWidgetChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PPaymentRequestMsgStart:
{
            PPaymentRequestChild* actor = static_cast<PPaymentRequestChild*>(aListener);
            auto& container = mManagedPPaymentRequestChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PWindowGlobalMsgStart:
{
            PWindowGlobalChild* actor = static_cast<PWindowGlobalChild*>(aListener);
            auto& container = mManagedPWindowGlobalChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBrowserBridgeMsgStart:
{
            PBrowserBridgeChild* actor = static_cast<PBrowserBridgeChild*>(aListener);
            auto& container = mManagedPBrowserBridgeChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PVsyncMsgStart:
{
            PVsyncChild* actor = static_cast<PVsyncChild*>(aListener);
            auto& container = mManagedPVsyncChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBrowserChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PColorPickerMsgStart:
        static_cast<BrowserChild*>(this)->DeallocPColorPickerChild(static_cast<PColorPickerChild*>(aListener));
        return;
    case PDocAccessibleMsgStart:
        static_cast<BrowserChild*>(this)->DeallocPDocAccessibleChild(static_cast<PDocAccessibleChild*>(aListener));
        return;
    case PFilePickerMsgStart:
        static_cast<BrowserChild*>(this)->DeallocPFilePickerChild(static_cast<PFilePickerChild*>(aListener));
        return;
    case PPluginWidgetMsgStart:
        static_cast<BrowserChild*>(this)->DeallocPPluginWidgetChild(static_cast<PPluginWidgetChild*>(aListener));
        return;
    case PPaymentRequestMsgStart:
        static_cast<BrowserChild*>(this)->DeallocPPaymentRequestChild(static_cast<PPaymentRequestChild*>(aListener));
        return;
    case PVsyncMsgStart:
        static_cast<BrowserChild*>(this)->DeallocPVsyncChild(static_cast<PVsyncChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBrowserChild::OnMessageReceived(const Message& msg__) -> PBrowserChild::Result
{
    switch (msg__.type()) {
    case PBrowser::Msg_AsyncMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_AsyncMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString aMessage{};
            ClonedMessageData aData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessage)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aMessage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 233440039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ClonedMessageData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvAsyncMessage(std::move(aMessage), std::move(aData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Reply_PDocAccessibleConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBrowser::Reply_PPaymentRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBrowser::Reply_PVsyncConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBrowser::Reply_NotifyIMEFocus__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NotifyIMEFocus", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<IMENotificationRequests> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                IMENotificationRequests requests{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(requests)))))) {
                    FatalError("Error deserializing 'IMENotificationRequests'");
                    return MsgValueError;
                }
                // Sentinel = 'requests'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 261227389)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'IMENotificationRequests'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(requests));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PBrowser::Reply_PColorPickerConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBrowser::Reply_PFilePickerConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBrowser::Reply_IndexedDBPermissionRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_IndexedDBPermissionRequest", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<uint32_t> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                uint32_t permission{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(permission)))))) {
                    FatalError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                // Sentinel = 'permission'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 394921034)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(permission));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PBrowser::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PBrowser::Reply_RequestPointerLock__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RequestPointerLock", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<nsCString> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                nsCString error{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(error)))))) {
                    FatalError("Error deserializing 'nsCString'");
                    return MsgValueError;
                }
                // Sentinel = 'error'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107741739)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(error));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PBrowser::Reply_RequestPointerCapture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RequestPointerCapture", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool aSuccess{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSuccess)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'aSuccess'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236323643)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(aSuccess));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PBrowser::Msg_NativeSynthesisResponse__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NativeSynthesisResponse", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aObserverId{};
            nsCString aResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aObserverId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aObserverId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 435356759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aResponse)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301466545)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNativeSynthesisResponse(std::move(aObserverId), std::move(aResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_FlushTabState__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_FlushTabState", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aFlushId{};
            bool aIsFinal{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFlushId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aFlushId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 231015185)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsFinal)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsFinal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 221971208)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvFlushTabState(std::move(aFlushId), std::move(aIsFinal))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_UpdateEpoch__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateEpoch", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvUpdateEpoch(std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_UpdateSHistory__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateSHistory", OTHER);

            PickleIterator iter__{msg__};
            bool aImmediately{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aImmediately)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aImmediately'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 509674710)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvUpdateSHistory(std::move(aImmediately))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_CloneDocumentTreeIntoSelf__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_CloneDocumentTreeIntoSelf", OTHER);

            PickleIterator iter__{msg__};
            MaybeDiscardedBrowsingContext aBc{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aBc)))))) {
                FatalError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            // Sentinel = 'aBc'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 34406663)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeDiscardedBrowsingContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvCloneDocumentTreeIntoSelf(std::move(aBc))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ReleaseAllPointerCapture__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ReleaseAllPointerCapture", OTHER);

            if ((!((static_cast<BrowserChild*>(this))->RecvReleaseAllPointerCapture()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_UpdateEffects__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateEffects", OTHER);

            PickleIterator iter__{msg__};
            EffectsInfo aEffects{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEffects)))))) {
                FatalError("Error deserializing 'EffectsInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aEffects'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 225248034)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'EffectsInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvUpdateEffects(std::move(aEffects))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_Show__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_Show", OTHER);

            PickleIterator iter__{msg__};
            ParentShowInfo parentInfo{};
            OwnerShowInfo childInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(parentInfo)))))) {
                FatalError("Error deserializing 'ParentShowInfo'");
                return MsgValueError;
            }
            // Sentinel = 'parentInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 380044311)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ParentShowInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(childInfo)))))) {
                FatalError("Error deserializing 'OwnerShowInfo'");
                return MsgValueError;
            }
            // Sentinel = 'childInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 298320785)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OwnerShowInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvShow(std::move(parentInfo), std::move(childInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_Activate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_Activate", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvActivate(std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_Deactivate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_Deactivate", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aActionId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aActionId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aActionId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 284164973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvDeactivate(std::move(aActionId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ScrollbarPreferenceChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ScrollbarPreferenceChanged", OTHER);

            PickleIterator iter__{msg__};
            ScrollbarPreference pref{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pref)))))) {
                FatalError("Error deserializing 'ScrollbarPreference'");
                return MsgValueError;
            }
            // Sentinel = 'pref'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 71958958)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollbarPreference'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvScrollbarPreferenceChanged(std::move(pref))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_InitRendering__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_InitRendering", OTHER);

            PickleIterator iter__{msg__};
            TextureFactoryIdentifier textureFactoryIdentifier{};
            LayersId layersId{};
            CompositorOptions compositorOptions{};
            bool layersConnected{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(textureFactoryIdentifier)))))) {
                FatalError("Error deserializing 'TextureFactoryIdentifier'");
                return MsgValueError;
            }
            // Sentinel = 'textureFactoryIdentifier'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2096630253)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextureFactoryIdentifier'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(layersId)))))) {
                FatalError("Error deserializing 'LayersId'");
                return MsgValueError;
            }
            // Sentinel = 'layersId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 250938174)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersId'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(compositorOptions)))))) {
                FatalError("Error deserializing 'CompositorOptions'");
                return MsgValueError;
            }
            // Sentinel = 'compositorOptions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1089275708)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositorOptions'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(layersConnected)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'layersConnected'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 829294116)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvInitRendering(std::move(textureFactoryIdentifier), std::move(layersId), std::move(compositorOptions), std::move(layersConnected))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_CompositorOptionsChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_CompositorOptionsChanged", OTHER);

            PickleIterator iter__{msg__};
            CompositorOptions newOptions{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(newOptions)))))) {
                FatalError("Error deserializing 'CompositorOptions'");
                return MsgValueError;
            }
            // Sentinel = 'newOptions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 384304183)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'CompositorOptions'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvCompositorOptionsChanged(std::move(newOptions))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_LoadURL__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_LoadURL", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsDocShellLoadState> loadState{};
            ParentShowInfo info{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loadState)))))) {
                FatalError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            // Sentinel = 'loadState'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 304808866)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsDocShellLoadState'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'ParentShowInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ParentShowInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvLoadURL(loadState, std::move(info))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ResumeLoad__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ResumeLoad", OTHER);

            PickleIterator iter__{msg__};
            uint64_t pendingSwitchID{};
            ParentShowInfo info{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(pendingSwitchID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'pendingSwitchID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 822478309)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'ParentShowInfo'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ParentShowInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvResumeLoad(std::move(pendingSwitchID), std::move(info))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_UpdateDimensions__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateDimensions", OTHER);

            PickleIterator iter__{msg__};
            DimensionInfo dimensions{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dimensions)))))) {
                FatalError("Error deserializing 'DimensionInfo'");
                return MsgValueError;
            }
            // Sentinel = 'dimensions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 383845434)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DimensionInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvUpdateDimensions(std::move(dimensions))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SizeModeChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SizeModeChanged", OTHER);

            PickleIterator iter__{msg__};
            nsSizeMode sizeMode{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sizeMode)))))) {
                FatalError("Error deserializing 'nsSizeMode'");
                return MsgValueError;
            }
            // Sentinel = 'sizeMode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251790145)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsSizeMode'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSizeModeChanged(std::move(sizeMode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ChildToParentMatrix__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ChildToParentMatrix", OTHER);

            PickleIterator iter__{msg__};
            MaybeMatrix4x4 aMatrix{};
            ScreenRect aRemoteDocumentRect{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMatrix)))))) {
                FatalError("Error deserializing 'MaybeMatrix4x4'");
                return MsgValueError;
            }
            // Sentinel = 'aMatrix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 181469911)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MaybeMatrix4x4'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRemoteDocumentRect)))))) {
                FatalError("Error deserializing 'ScreenRect'");
                return MsgValueError;
            }
            // Sentinel = 'aRemoteDocumentRect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1261242267)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenRect'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvChildToParentMatrix(std::move(aMatrix), std::move(aRemoteDocumentRect))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetIsUnderHiddenEmbedderElement__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetIsUnderHiddenEmbedderElement", OTHER);

            PickleIterator iter__{msg__};
            bool aIsUnderHiddenEmbedderElement{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsUnderHiddenEmbedderElement)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsUnderHiddenEmbedderElement'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2795113290)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSetIsUnderHiddenEmbedderElement(std::move(aIsUnderHiddenEmbedderElement))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_DynamicToolbarMaxHeightChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_DynamicToolbarMaxHeightChanged", OTHER);

            PickleIterator iter__{msg__};
            ScreenIntCoord height{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(height)))))) {
                FatalError("Error deserializing 'ScreenIntCoord'");
                return MsgValueError;
            }
            // Sentinel = 'height'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143393402)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenIntCoord'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvDynamicToolbarMaxHeightChanged(std::move(height))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_DynamicToolbarOffsetChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_DynamicToolbarOffsetChanged", OTHER);

            PickleIterator iter__{msg__};
            ScreenIntCoord height{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(height)))))) {
                FatalError("Error deserializing 'ScreenIntCoord'");
                return MsgValueError;
            }
            // Sentinel = 'height'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 143393402)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenIntCoord'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvDynamicToolbarOffsetChanged(std::move(height))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetKeyboardIndicators__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetKeyboardIndicators", OTHER);

            PickleIterator iter__{msg__};
            UIStateChangeType showFocusRings{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(showFocusRings)))))) {
                FatalError("Error deserializing 'UIStateChangeType'");
                return MsgValueError;
            }
            // Sentinel = 'showFocusRings'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 727320005)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UIStateChangeType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSetKeyboardIndicators(std::move(showFocusRings))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_StopIMEStateManagement__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_StopIMEStateManagement", OTHER);

            if ((!((static_cast<BrowserChild*>(this))->RecvStopIMEStateManagement()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_MouseEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_MouseEvent", OTHER);

            PickleIterator iter__{msg__};
            nsString aType{};
            float aX{};
            float aY{};
            int32_t aButton{};
            int32_t aClickCount{};
            int32_t aModifiers{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aX)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aX'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18612410)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aY)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aY'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 18677947)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aButton)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aButton'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 184222430)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClickCount)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aClickCount'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 416875601)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifiers)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aModifiers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358286340)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvMouseEvent(std::move(aType), std::move(aX), std::move(aY), std::move(aButton), std::move(aClickCount), std::move(aModifiers))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RealMouseMoveEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RealMouseMoveEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRealMouseMoveEvent(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityRealMouseMoveEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealMouseMoveEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityRealMouseMoveEvent(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RealMouseMoveEventForTests__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RealMouseMoveEventForTests", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRealMouseMoveEventForTests(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityRealMouseMoveEventForTests__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealMouseMoveEventForTests", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityRealMouseMoveEventForTests(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SynthMouseMoveEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SynthMouseMoveEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSynthMouseMoveEvent(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPrioritySynthMouseMoveEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPrioritySynthMouseMoveEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPrioritySynthMouseMoveEvent(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RealMouseButtonEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RealMouseButtonEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRealMouseButtonEvent(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityRealMouseButtonEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealMouseButtonEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetMouseEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetMouseEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityRealMouseButtonEvent(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RealKeyEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RealKeyEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetKeyboardEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRealKeyEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityRealKeyEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealKeyEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetKeyboardEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityRealKeyEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_MouseWheelEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_MouseWheelEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetWheelEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetWheelEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetWheelEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvMouseWheelEvent(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityMouseWheelEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityMouseWheelEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetWheelEvent event{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetWheelEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetWheelEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityMouseWheelEvent(std::move(event), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RealTouchEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RealTouchEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetTouchEvent aEvent{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};
            nsEventStatus aApzResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aApzResponse)))))) {
                FatalError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            // Sentinel = 'aApzResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 512951516)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRealTouchEvent(std::move(aEvent), std::move(aGuid), std::move(aInputBlockId), std::move(aApzResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityRealTouchEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealTouchEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetTouchEvent aEvent{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};
            nsEventStatus aApzResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aApzResponse)))))) {
                FatalError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            // Sentinel = 'aApzResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 512951516)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityRealTouchEvent(std::move(aEvent), std::move(aGuid), std::move(aInputBlockId), std::move(aApzResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_HandleTap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_HandleTap", OTHER);

            PickleIterator iter__{msg__};
            GeckoContentController_TapType aType{};
            LayoutDevicePoint point{};
            Modifiers aModifiers{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'GeckoContentController_TapType'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GeckoContentController_TapType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(point)))))) {
                FatalError("Error deserializing 'LayoutDevicePoint'");
                return MsgValueError;
            }
            // Sentinel = 'point'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 108790315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDevicePoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifiers)))))) {
                FatalError("Error deserializing 'Modifiers'");
                return MsgValueError;
            }
            // Sentinel = 'aModifiers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358286340)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Modifiers'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvHandleTap(std::move(aType), std::move(point), std::move(aModifiers), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityHandleTap__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityHandleTap", OTHER);

            PickleIterator iter__{msg__};
            GeckoContentController_TapType aType{};
            LayoutDevicePoint point{};
            Modifiers aModifiers{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'GeckoContentController_TapType'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'GeckoContentController_TapType'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(point)))))) {
                FatalError("Error deserializing 'LayoutDevicePoint'");
                return MsgValueError;
            }
            // Sentinel = 'point'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 108790315)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayoutDevicePoint'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aModifiers)))))) {
                FatalError("Error deserializing 'Modifiers'");
                return MsgValueError;
            }
            // Sentinel = 'aModifiers'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 358286340)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Modifiers'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityHandleTap(std::move(aType), std::move(point), std::move(aModifiers), std::move(aGuid), std::move(aInputBlockId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RealTouchMoveEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RealTouchMoveEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetTouchEvent aEvent{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};
            nsEventStatus aApzResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aApzResponse)))))) {
                FatalError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            // Sentinel = 'aApzResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 512951516)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRealTouchMoveEvent(std::move(aEvent), std::move(aGuid), std::move(aInputBlockId), std::move(aApzResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityRealTouchMoveEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealTouchMoveEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetTouchEvent aEvent{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};
            nsEventStatus aApzResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aApzResponse)))))) {
                FatalError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            // Sentinel = 'aApzResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 512951516)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityRealTouchMoveEvent(std::move(aEvent), std::move(aGuid), std::move(aInputBlockId), std::move(aApzResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RealTouchMoveEvent2__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RealTouchMoveEvent2", OTHER);

            PickleIterator iter__{msg__};
            WidgetTouchEvent aEvent{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};
            nsEventStatus aApzResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aApzResponse)))))) {
                FatalError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            // Sentinel = 'aApzResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 512951516)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRealTouchMoveEvent2(std::move(aEvent), std::move(aGuid), std::move(aInputBlockId), std::move(aApzResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityRealTouchMoveEvent2__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityRealTouchMoveEvent2", OTHER);

            PickleIterator iter__{msg__};
            WidgetTouchEvent aEvent{};
            ScrollableLayerGuid aGuid{};
            uint64_t aInputBlockId{};
            nsEventStatus aApzResponse{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetTouchEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aGuid)))))) {
                FatalError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            // Sentinel = 'aGuid'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 94044651)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScrollableLayerGuid'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInputBlockId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInputBlockId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595657994)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aApzResponse)))))) {
                FatalError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            // Sentinel = 'aApzResponse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 512951516)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsEventStatus'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityRealTouchMoveEvent2(std::move(aEvent), std::move(aGuid), std::move(aInputBlockId), std::move(aApzResponse))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RealDragEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RealDragEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetDragEvent aEvent{};
            uint32_t aDragAction{};
            uint32_t aDropEffect{};
            RefPtr<nsIPrincipal> aPrincipal{};
            RefPtr<nsIContentSecurityPolicy> csp{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEvent)))))) {
                FatalError("Error deserializing 'WidgetDragEvent'");
                return MsgValueError;
            }
            // Sentinel = 'aEvent'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 133956196)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetDragEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDragAction)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDragAction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 411370558)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDropEffect)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aDropEffect'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 419759172)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'aPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 364381188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(csp)))))) {
                FatalError("Error deserializing 'nsIContentSecurityPolicy'");
                return MsgValueError;
            }
            // Sentinel = 'csp'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 42074439)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIContentSecurityPolicy'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRealDragEvent(std::move(aEvent), std::move(aDragAction), std::move(aDropEffect), aPrincipal, csp)))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_CompositionEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_CompositionEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetCompositionEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetCompositionEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetCompositionEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvCompositionEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPriorityCompositionEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPriorityCompositionEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetCompositionEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetCompositionEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetCompositionEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPriorityCompositionEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SelectionEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SelectionEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetSelectionEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetSelectionEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetSelectionEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSelectionEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NormalPrioritySelectionEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NormalPrioritySelectionEvent", OTHER);

            PickleIterator iter__{msg__};
            WidgetSelectionEvent event{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetSelectionEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetSelectionEvent'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNormalPrioritySelectionEvent(std::move(event))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_PasteTransferable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PasteTransferable", OTHER);

            PickleIterator iter__{msg__};
            IPCDataTransfer aDataTransfer{};
            bool aIsPrivateData{};
            RefPtr<nsIPrincipal> aRequestingPrincipal{};
            nsContentPolicyType aContentPolicyType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDataTransfer)))))) {
                FatalError("Error deserializing 'IPCDataTransfer'");
                return MsgValueError;
            }
            // Sentinel = 'aDataTransfer'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 581567777)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCDataTransfer'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aIsPrivateData)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsPrivateData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 680396147)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestingPrincipal)))))) {
                FatalError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestingPrincipal'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1431439403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIPrincipal'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentPolicyType)))))) {
                FatalError("Error deserializing 'nsContentPolicyType'");
                return MsgValueError;
            }
            // Sentinel = 'aContentPolicyType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1145767759)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsContentPolicyType'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvPasteTransferable(std::move(aDataTransfer), std::move(aIsPrivateData), aRequestingPrincipal, std::move(aContentPolicyType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ActivateFrameEvent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ActivateFrameEvent", OTHER);

            PickleIterator iter__{msg__};
            nsString aType{};
            bool capture{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aType)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 99222020)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(capture)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'capture'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 195691253)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvActivateFrameEvent(std::move(aType), std::move(capture))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_LoadRemoteScript__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_LoadRemoteScript", OTHER);

            PickleIterator iter__{msg__};
            nsString aURL{};
            bool aRunInGlobalScope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURL)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 58130773)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRunInGlobalScope)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aRunInGlobalScope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 981862041)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvLoadRemoteScript(std::move(aURL), std::move(aRunInGlobalScope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_Destroy__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_Destroy", OTHER);

            if ((!((static_cast<BrowserChild*>(this))->RecvDestroy()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RenderLayers__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RenderLayers", OTHER);

            PickleIterator iter__{msg__};
            bool aEnabled{};
            LayersObserverEpoch aEpoch{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 224789261)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEpoch)))))) {
                FatalError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            // Sentinel = 'aEpoch'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 132121169)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LayersObserverEpoch'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvRenderLayers(std::move(aEnabled), std::move(aEpoch))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SuppressDisplayport__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SuppressDisplayport", OTHER);

            PickleIterator iter__{msg__};
            bool aEnabled{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEnabled)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEnabled'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 224789261)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSuppressDisplayport(std::move(aEnabled))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_NavigateByKey__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_NavigateByKey", OTHER);

            PickleIterator iter__{msg__};
            bool aForward{};
            bool aForDocumentNavigation{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForward)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aForward'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236258103)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aForDocumentNavigation)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aForDocumentNavigation'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1667434712)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvNavigateByKey(std::move(aForward), std::move(aForDocumentNavigation))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_RequestNotifyAfterRemotePaint__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_RequestNotifyAfterRemotePaint", OTHER);

            if ((!((static_cast<BrowserChild*>(this))->RecvRequestNotifyAfterRemotePaint()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_UIResolutionChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_UIResolutionChanged", OTHER);

            PickleIterator iter__{msg__};
            float dpi{};
            int32_t rounding{};
            double scale{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(dpi)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'dpi'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 41419070)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rounding)))))) {
                FatalError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            // Sentinel = 'rounding'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 261292903)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scale)))))) {
                FatalError("Error deserializing 'double'");
                return MsgValueError;
            }
            // Sentinel = 'scale'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 103809545)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'double'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvUIResolutionChanged(std::move(dpi), std::move(rounding), std::move(scale))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SafeAreaInsetsChanged__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SafeAreaInsetsChanged", OTHER);

            PickleIterator iter__{msg__};
            ScreenIntMargin aSafeAreaInsets{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSafeAreaInsets)))))) {
                FatalError("Error deserializing 'ScreenIntMargin'");
                return MsgValueError;
            }
            // Sentinel = 'aSafeAreaInsets'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 752944592)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ScreenIntMargin'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSafeAreaInsetsChanged(std::move(aSafeAreaInsets))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SwappedWithOtherRemoteLoader__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SwappedWithOtherRemoteLoader", OTHER);

            PickleIterator iter__{msg__};
            IPCTabContext context{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(context)))))) {
                FatalError("Error deserializing 'IPCTabContext'");
                return MsgValueError;
            }
            // Sentinel = 'context'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 199164678)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCTabContext'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSwappedWithOtherRemoteLoader(std::move(context))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_HandleAccessKey__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_HandleAccessKey", OTHER);

            PickleIterator iter__{msg__};
            WidgetKeyboardEvent event{};
            nsTArray<uint32_t> charCodes{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(event)))))) {
                FatalError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            // Sentinel = 'event'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106234403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WidgetKeyboardEvent'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(charCodes)))))) {
                FatalError("Error deserializing 'uint32_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'charCodes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 294323085)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvHandleAccessKey(std::move(event), std::move(charCodes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_PrintPreview__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_PrintPreview", OTHER);

            PickleIterator iter__{msg__};
            PrintData aPrintData{};
            mozilla::Maybe<uint64_t> aSourceOuterWindowID{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrintData)))))) {
                FatalError("Error deserializing 'PrintData'");
                return MsgValueError;
            }
            // Sentinel = 'aPrintData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 359072745)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrintData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSourceOuterWindowID)))))) {
                FatalError("Error deserializing 'uint64_t?'");
                return MsgValueError;
            }
            // Sentinel = 'aSourceOuterWindowID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1415317479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            PrintPreviewResolver resolver = [proxy__, seqno__, id__](const PrintPreviewResultInfo& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBrowserChild* self__ = static_cast<PBrowserChild*>(proxy__->Get());

                IPC::Message* reply__ = PBrowser::Reply_PrintPreview(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aInfo'
                (reply__)->WriteSentinel(93520366);

                if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBrowserChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BrowserChild*>(this))->RecvPrintPreview(std::move(aPrintData), std::move(aSourceOuterWindowID), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_ExitPrintPreview__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_ExitPrintPreview", OTHER);

            if ((!((static_cast<BrowserChild*>(this))->RecvExitPrintPreview()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_Print__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_Print", OTHER);

            PickleIterator iter__{msg__};
            uint64_t aOuterWindowID{};
            PrintData aPrintData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOuterWindowID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aOuterWindowID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 702612854)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPrintData)))))) {
                FatalError("Error deserializing 'PrintData'");
                return MsgValueError;
            }
            // Sentinel = 'aPrintData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 359072745)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PrintData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvPrint(std::move(aOuterWindowID), std::move(aPrintData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_UpdateNativeWindowHandle__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_UpdateNativeWindowHandle", OTHER);

            PickleIterator iter__{msg__};
            uintptr_t aNewHandle{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNewHandle)))))) {
                FatalError("Error deserializing 'uintptr_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNewHandle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 347145176)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uintptr_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvUpdateNativeWindowHandle(std::move(aNewHandle))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_AllowScriptsToClose__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_AllowScriptsToClose", OTHER);

            if ((!((static_cast<BrowserChild*>(this))->RecvAllowScriptsToClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_SetWidgetNativeData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_SetWidgetNativeData", OTHER);

            PickleIterator iter__{msg__};
            WindowsHandle aHandle{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHandle)))))) {
                FatalError("Error deserializing 'WindowsHandle'");
                return MsgValueError;
            }
            // Sentinel = 'aHandle'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 174326446)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WindowsHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<BrowserChild*>(this))->RecvSetWidgetNativeData(std::move(aHandle))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Msg_WillChangeProcess__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_WillChangeProcess", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            WillChangeProcessResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PBrowserChild* self__ = static_cast<PBrowserChild*>(proxy__->Get());

                IPC::Message* reply__ = PBrowser::Reply_WillChangeProcess(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'success'
                (reply__)->WriteSentinel(200082170);

                if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PBrowserChild",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<BrowserChild*>(this))->RecvWillChangeProcess(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBrowser::Reply_IsWindowSupportingProtectedMedia__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_IsWindowSupportingProtectedMedia", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool isSupported{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isSupported)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'isSupported'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 466355363)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(isSupported));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    case PBrowser::Reply_IsWindowSupportingWebVR__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBrowserChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBrowserChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBrowser::Msg_IsWindowSupportingWebVR", OTHER);

            PickleIterator iter__{msg__};
            bool resolve__ = false;
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(resolve__)))))) {
                FatalError("Error deserializing 'resolve__'");
                return MsgValueError;
            }
            // Sentinel = 'resolve__'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 322044863)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'resolve__'");
                return MsgValueError;
            }


            UniquePtr<MessageChannel::UntypedCallbackHolder> untypedCallback =
                GetIPCChannel()->PopCallback(msg__);

            typedef MessageChannel::CallbackHolder<bool> CallbackHolder;
            auto* callback = static_cast<CallbackHolder*>(untypedCallback.get());
            if (!callback) {
                FatalError("Error unknown callback");
                return MsgProcessingError;
            }

            if (resolve__) {
                bool isSupported{};

                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(isSupported)))))) {
                    FatalError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                // Sentinel = 'isSupported'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 466355363)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Resolve(std::move(isSupported));
            } else {
                ResponseRejectReason reason__{};
                if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason__)))))) {
                    FatalError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                // Sentinel = 'reason__'
                if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251855687)))) {
                    mozilla::ipc::SentinelReadError("Error deserializing 'reason__'");
                    return MsgValueError;
                }
                msg__.EndRead(iter__, msg__.type());

                callback->Reject(std::move(reason__));
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBrowserChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBrowserChild::Result
{
    return MsgNotKnown;
}

auto PBrowserChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBrowserChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBrowserChild::ClearSubtree() -> void
{
    for (auto it = mManagedPColorPickerChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPColorPickerChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPColorPickerChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPColorPickerChild.Clear();

    for (auto it = mManagedPDocAccessibleChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPDocAccessibleChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPDocAccessibleChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPDocAccessibleChild.Clear();

    for (auto it = mManagedPFilePickerChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPFilePickerChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPFilePickerChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPFilePickerChild.Clear();

    for (auto it = mManagedPPluginWidgetChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPluginWidgetChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPluginWidgetChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPluginWidgetChild.Clear();

    for (auto it = mManagedPPaymentRequestChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPPaymentRequestChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPPaymentRequestChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPPaymentRequestChild.Clear();

    for (auto it = mManagedPWindowGlobalChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWindowGlobalChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWindowGlobalChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWindowGlobalChild.Clear();

    for (auto it = mManagedPBrowserBridgeChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBrowserBridgeChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBrowserBridgeChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBrowserBridgeChild.Clear();

    for (auto it = mManagedPVsyncChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPVsyncChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPVsyncChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPVsyncChild.Clear();

}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBrowserChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBrowserChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBrowser", PBrowserMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBrowserChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
