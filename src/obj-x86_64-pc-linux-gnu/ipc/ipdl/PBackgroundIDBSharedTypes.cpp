//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/SerializationHelpers.h"
#include "mozilla/dom/quota/SerializationHelpers.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileChild.h"
#include "mozilla/dom/PBackgroundMutableFileParent.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBSharedTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SerializedKeyRange|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::SerializedKeyRange>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).lower());
    // Sentinel = 'lower'
    (aMsg)->WriteSentinel(108921386);
    WriteIPDLParam(aMsg, aActor, (aVar).upper());
    // Sentinel = 'upper'
    (aMsg)->WriteSentinel(110756397);
    WriteIPDLParam(aMsg, aActor, (aVar).lowerOpen());
    // Sentinel = 'lowerOpen'
    (aMsg)->WriteSentinel(317326268);
    WriteIPDLParam(aMsg, aActor, (aVar).upperOpen());
    // Sentinel = 'upperOpen'
    (aMsg)->WriteSentinel(319947711);
    WriteIPDLParam(aMsg, aActor, (aVar).isOnly());
    // Sentinel = 'isOnly'
    (aMsg)->WriteSentinel(143786623);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::SerializedKeyRange>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->lower())))))) {
        aActor->FatalError("Error deserializing 'lower' (Key) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'lower'
    if ((!((aMsg)->ReadSentinel(aIter, 108921386)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'lower' (Key) member of 'SerializedKeyRange'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->upper())))))) {
        aActor->FatalError("Error deserializing 'upper' (Key) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'upper'
    if ((!((aMsg)->ReadSentinel(aIter, 110756397)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'upper' (Key) member of 'SerializedKeyRange'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->lowerOpen())))))) {
        aActor->FatalError("Error deserializing 'lowerOpen' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'lowerOpen'
    if ((!((aMsg)->ReadSentinel(aIter, 317326268)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'lowerOpen' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->upperOpen())))))) {
        aActor->FatalError("Error deserializing 'upperOpen' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'upperOpen'
    if ((!((aMsg)->ReadSentinel(aIter, 319947711)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'upperOpen' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isOnly())))))) {
        aActor->FatalError("Error deserializing 'isOnly' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'isOnly'
    if ((!((aMsg)->ReadSentinel(aIter, 143786623)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isOnly' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union BlobOrMutableFile|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto BlobOrMutableFile::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnull_t:
        {
            (ptr_null_t())->~null_t__tdef();
            break;
        }
    case TIPCBlob:
        {
            (ptr_IPCBlob())->~IPCBlob__tdef();
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            (ptr_PBackgroundMutableFileParent())->~PBackgroundMutableFileParent__tdef();
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            (ptr_PBackgroundMutableFileChild())->~PBackgroundMutableFileChild__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT BlobOrMutableFile::BlobOrMutableFile(const null_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(aOther);
    mType = Tnull_t;
}

MOZ_IMPLICIT BlobOrMutableFile::BlobOrMutableFile(null_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move(aOther));
    mType = Tnull_t;
}

MOZ_IMPLICIT BlobOrMutableFile::BlobOrMutableFile(const IPCBlob& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(aOther);
    mType = TIPCBlob;
}

MOZ_IMPLICIT BlobOrMutableFile::BlobOrMutableFile(IPCBlob&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(std::move(aOther));
    mType = TIPCBlob;
}

MOZ_IMPLICIT BlobOrMutableFile::BlobOrMutableFile(PBackgroundMutableFileParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*(const_cast<PBackgroundMutableFileParent*>(aOther));
    mType = TPBackgroundMutableFileParent;
}

MOZ_IMPLICIT BlobOrMutableFile::BlobOrMutableFile(PBackgroundMutableFileChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*(const_cast<PBackgroundMutableFileChild*>(aOther));
    mType = TPBackgroundMutableFileChild;
}

MOZ_IMPLICIT BlobOrMutableFile::BlobOrMutableFile(const BlobOrMutableFile& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t((aOther).get_null_t());
            break;
        }
    case TIPCBlob:
        {
            new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob((aOther).get_IPCBlob());
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*(const_cast<PBackgroundMutableFileParent*>((aOther).get_PBackgroundMutableFileParent()));
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*(const_cast<PBackgroundMutableFileChild*>((aOther).get_PBackgroundMutableFileChild()));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT BlobOrMutableFile::BlobOrMutableFile(BlobOrMutableFile&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnull_t:
        {
            new (mozilla::KnownNotNull, ptr_null_t()) null_t(std::move((aOther).get_null_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCBlob:
        {
            new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(std::move((aOther).get_IPCBlob()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*(const_cast<PBackgroundMutableFileParent*>(std::move((aOther).get_PBackgroundMutableFileParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*(const_cast<PBackgroundMutableFileChild*>(std::move((aOther).get_PBackgroundMutableFileChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

BlobOrMutableFile::~BlobOrMutableFile()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto BlobOrMutableFile::operator=(const null_t& aRhs) -> BlobOrMutableFile&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = aRhs;
    mType = Tnull_t;
    return (*(this));
}

auto BlobOrMutableFile::operator=(null_t&& aRhs) -> BlobOrMutableFile&
{
    if (MaybeDestroy(Tnull_t)) {
        new (mozilla::KnownNotNull, ptr_null_t()) null_t;
    }
    (*(ptr_null_t())) = std::move(aRhs);
    mType = Tnull_t;
    return (*(this));
}

auto BlobOrMutableFile::operator=(const IPCBlob& aRhs) -> BlobOrMutableFile&
{
    if (MaybeDestroy(TIPCBlob)) {
        new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
    }
    (*(ptr_IPCBlob())) = aRhs;
    mType = TIPCBlob;
    return (*(this));
}

auto BlobOrMutableFile::operator=(IPCBlob&& aRhs) -> BlobOrMutableFile&
{
    if (MaybeDestroy(TIPCBlob)) {
        new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
    }
    (*(ptr_IPCBlob())) = std::move(aRhs);
    mType = TIPCBlob;
    return (*(this));
}

auto BlobOrMutableFile::operator=(PBackgroundMutableFileParent* aRhs) -> BlobOrMutableFile&
{
    if (MaybeDestroy(TPBackgroundMutableFileParent)) {
        new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*;
    }
    (*(ptr_PBackgroundMutableFileParent())) = const_cast<PBackgroundMutableFileParent*>(aRhs);
    mType = TPBackgroundMutableFileParent;
    return (*(this));
}

auto BlobOrMutableFile::operator=(PBackgroundMutableFileChild* aRhs) -> BlobOrMutableFile&
{
    if (MaybeDestroy(TPBackgroundMutableFileChild)) {
        new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*;
    }
    (*(ptr_PBackgroundMutableFileChild())) = const_cast<PBackgroundMutableFileChild*>(aRhs);
    mType = TPBackgroundMutableFileChild;
    return (*(this));
}

auto BlobOrMutableFile::operator=(const BlobOrMutableFile& aRhs) -> BlobOrMutableFile&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = (aRhs).get_null_t();
            break;
        }
    case TIPCBlob:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
            }
            (*(ptr_IPCBlob())) = (aRhs).get_IPCBlob();
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*;
            }
            (*(ptr_PBackgroundMutableFileParent())) = const_cast<PBackgroundMutableFileParent*>((aRhs).get_PBackgroundMutableFileParent());
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*;
            }
            (*(ptr_PBackgroundMutableFileChild())) = const_cast<PBackgroundMutableFileChild*>((aRhs).get_PBackgroundMutableFileChild());
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto BlobOrMutableFile::operator=(BlobOrMutableFile&& aRhs) -> BlobOrMutableFile&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnull_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_null_t()) null_t;
            }
            (*(ptr_null_t())) = std::move((aRhs).get_null_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCBlob:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
            }
            (*(ptr_IPCBlob())) = std::move((aRhs).get_IPCBlob());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*;
            }
            (*(ptr_PBackgroundMutableFileParent())) = const_cast<PBackgroundMutableFileParent*>(std::move((aRhs).get_PBackgroundMutableFileParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*;
            }
            (*(ptr_PBackgroundMutableFileChild())) = const_cast<PBackgroundMutableFileChild*>(std::move((aRhs).get_PBackgroundMutableFileChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::BlobOrMutableFile>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::BlobOrMutableFile union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'BlobOrMutableFile'
    (aMsg)->WriteSentinel(975636107);

    switch (type) {
    case union__::Tnull_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_null_t());
            // Sentinel = 'Tnull_t'
            (aMsg)->WriteSentinel(190186211);
            return;
        }
    case union__::TIPCBlob:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCBlob());
            // Sentinel = 'TIPCBlob'
            (aMsg)->WriteSentinel(190972592);
            return;
        }
    case union__::TPBackgroundMutableFileParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PBackgroundMutableFileParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PBackgroundMutableFileParent());
                // Sentinel = 'TPBackgroundMutableFileParent'
                (aMsg)->WriteSentinel(2800094041);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPBackgroundMutableFileChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PBackgroundMutableFileChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PBackgroundMutableFileChild());
                // Sentinel = 'TPBackgroundMutableFileChild'
                (aMsg)->WriteSentinel(2605779667);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::BlobOrMutableFile>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::BlobOrMutableFile union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union BlobOrMutableFile");
        return false;
    }
    // Sentinel = 'BlobOrMutableFile'
    if ((!((aMsg)->ReadSentinel(aIter, 975636107)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union BlobOrMutableFile");
        return false;
    }

    switch (type) {
    case union__::Tnull_t:
        {
            mozilla::null_t tmp = mozilla::null_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_null_t())))))) {
                aActor->FatalError("Error deserializing variant Tnull_t of union BlobOrMutableFile");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((aMsg)->ReadSentinel(aIter, 190186211)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnull_t of union BlobOrMutableFile");
                return false;
            }
            return true;
        }
    case union__::TIPCBlob:
        {
            mozilla::dom::IPCBlob tmp = mozilla::dom::IPCBlob();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCBlob())))))) {
                aActor->FatalError("Error deserializing variant TIPCBlob of union BlobOrMutableFile");
                return false;
            }
            // Sentinel = 'TIPCBlob'
            if ((!((aMsg)->ReadSentinel(aIter, 190972592)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCBlob of union BlobOrMutableFile");
                return false;
            }
            return true;
        }
    case union__::TPBackgroundMutableFileParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::dom::PBackgroundMutableFileChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PBackgroundMutableFileChild())))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundMutableFileParent of union BlobOrMutableFile");
                return false;
            }
            if ((!((*((&((aVar)->get_PBackgroundMutableFileChild()))))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundMutableFileParent of union BlobOrMutableFile");
                return false;
            }
            // Sentinel = 'TPBackgroundMutableFileParent'
            if ((!((aMsg)->ReadSentinel(aIter, 2800094041)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPBackgroundMutableFileParent of union BlobOrMutableFile");
                return false;
            }
            return true;
        }
    case union__::TPBackgroundMutableFileChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::dom::PBackgroundMutableFileParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PBackgroundMutableFileParent())))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundMutableFileChild of union BlobOrMutableFile");
                return false;
            }
            if ((!((*((&((aVar)->get_PBackgroundMutableFileParent()))))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundMutableFileChild of union BlobOrMutableFile");
                return false;
            }
            // Sentinel = 'TPBackgroundMutableFileChild'
            if ((!((aMsg)->ReadSentinel(aIter, 2605779667)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPBackgroundMutableFileChild of union BlobOrMutableFile");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SerializedStructuredCloneFile|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::SerializedStructuredCloneFile>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).file());
    // Sentinel = 'file'
    (aMsg)->WriteSentinel(68420001);
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::SerializedStructuredCloneFile>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->file())))))) {
        aActor->FatalError("Error deserializing 'file' (BlobOrMutableFile) member of 'SerializedStructuredCloneFile'");
        return false;
    }
    // Sentinel = 'file'
    if ((!((aMsg)->ReadSentinel(aIter, 68420001)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'file' (BlobOrMutableFile) member of 'SerializedStructuredCloneFile'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (FileType) member of 'SerializedStructuredCloneFile'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (FileType) member of 'SerializedStructuredCloneFile'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SerializedStructuredCloneReadInfo|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, std::move((aVar).data()));
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    WriteIPDLParam(aMsg, aActor, (aVar).files());
    // Sentinel = 'files'
    (aMsg)->WriteSentinel(103285268);
    WriteIPDLParam(aMsg, aActor, (aVar).hasPreprocessInfo());
    // Sentinel = 'hasPreprocessInfo'
    (aMsg)->WriteSentinel(1045169903);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::SerializedStructuredCloneReadInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (SerializedStructuredCloneBuffer) member of 'SerializedStructuredCloneReadInfo'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (SerializedStructuredCloneBuffer) member of 'SerializedStructuredCloneReadInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->files())))))) {
        aActor->FatalError("Error deserializing 'files' (SerializedStructuredCloneFile[]) member of 'SerializedStructuredCloneReadInfo'");
        return false;
    }
    // Sentinel = 'files'
    if ((!((aMsg)->ReadSentinel(aIter, 103285268)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'files' (SerializedStructuredCloneFile[]) member of 'SerializedStructuredCloneReadInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasPreprocessInfo())))))) {
        aActor->FatalError("Error deserializing 'hasPreprocessInfo' (bool) member of 'SerializedStructuredCloneReadInfo'");
        return false;
    }
    // Sentinel = 'hasPreprocessInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 1045169903)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasPreprocessInfo' (bool) member of 'SerializedStructuredCloneReadInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SerializedStructuredCloneWriteInfo|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, std::move((aVar).data()));
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    (aMsg)->WriteBytes((&((aVar).offsetToKeyProp())), 8);
    // Sentinel = 'offsetToKeyProp'
    (aMsg)->WriteSentinel(816645653);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::SerializedStructuredCloneWriteInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (SerializedStructuredCloneBuffer) member of 'SerializedStructuredCloneWriteInfo'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (SerializedStructuredCloneBuffer) member of 'SerializedStructuredCloneWriteInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->offsetToKeyProp())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'offsetToKeyProp'
    if ((!((aMsg)->ReadSentinel(aIter, 816645653)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexUpdateInfo|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexUpdateInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
    WriteIPDLParam(aMsg, aActor, (aVar).localizedValue());
    // Sentinel = 'localizedValue'
    (aMsg)->WriteSentinel(721487285);
    (aMsg)->WriteBytes((&((aVar).indexId())), 8);
    // Sentinel = 'indexId'
    (aMsg)->WriteSentinel(190841542);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexUpdateInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (Key) member of 'IndexUpdateInfo'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (Key) member of 'IndexUpdateInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->localizedValue())))))) {
        aActor->FatalError("Error deserializing 'localizedValue' (Key) member of 'IndexUpdateInfo'");
        return false;
    }
    // Sentinel = 'localizedValue'
    if ((!((aMsg)->ReadSentinel(aIter, 721487285)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'localizedValue' (Key) member of 'IndexUpdateInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->indexId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((aMsg)->ReadSentinel(aIter, 190841542)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DatabaseMetadata|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseMetadata>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).persistenceType());
    // Sentinel = 'persistenceType'
    (aMsg)->WriteSentinel(853345864);
    (aMsg)->WriteBytes((&((aVar).version())), 8);
    // Sentinel = 'version'
    (aMsg)->WriteSentinel(204210951);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseMetadata>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'DatabaseMetadata'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'DatabaseMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->persistenceType())))))) {
        aActor->FatalError("Error deserializing 'persistenceType' (PersistenceType) member of 'DatabaseMetadata'");
        return false;
    }
    // Sentinel = 'persistenceType'
    if ((!((aMsg)->ReadSentinel(aIter, 853345864)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'persistenceType' (PersistenceType) member of 'DatabaseMetadata'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->version())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'version'
    if ((!((aMsg)->ReadSentinel(aIter, 204210951)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreMetadata|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreMetadata>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).keyPath());
    // Sentinel = 'keyPath'
    (aMsg)->WriteSentinel(190972631);
    WriteIPDLParam(aMsg, aActor, (aVar).autoIncrement());
    // Sentinel = 'autoIncrement'
    (aMsg)->WriteSentinel(626394463);
    (aMsg)->WriteBytes((&((aVar).id())), 8);
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreMetadata>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'ObjectStoreMetadata'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'ObjectStoreMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keyPath())))))) {
        aActor->FatalError("Error deserializing 'keyPath' (KeyPath) member of 'ObjectStoreMetadata'");
        return false;
    }
    // Sentinel = 'keyPath'
    if ((!((aMsg)->ReadSentinel(aIter, 190972631)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keyPath' (KeyPath) member of 'ObjectStoreMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->autoIncrement())))))) {
        aActor->FatalError("Error deserializing 'autoIncrement' (bool) member of 'ObjectStoreMetadata'");
        return false;
    }
    // Sentinel = 'autoIncrement'
    if ((!((aMsg)->ReadSentinel(aIter, 626394463)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'autoIncrement' (bool) member of 'ObjectStoreMetadata'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->id())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexMetadata|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexMetadata>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).keyPath());
    // Sentinel = 'keyPath'
    (aMsg)->WriteSentinel(190972631);
    WriteIPDLParam(aMsg, aActor, (aVar).locale());
    // Sentinel = 'locale'
    (aMsg)->WriteSentinel(145031793);
    WriteIPDLParam(aMsg, aActor, (aVar).unique());
    // Sentinel = 'unique'
    (aMsg)->WriteSentinel(154141336);
    WriteIPDLParam(aMsg, aActor, (aVar).multiEntry());
    // Sentinel = 'multiEntry'
    (aMsg)->WriteSentinel(389350462);
    WriteIPDLParam(aMsg, aActor, (aVar).autoLocale());
    // Sentinel = 'autoLocale'
    (aMsg)->WriteSentinel(377029642);
    (aMsg)->WriteBytes((&((aVar).id())), 8);
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexMetadata>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'IndexMetadata'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'IndexMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keyPath())))))) {
        aActor->FatalError("Error deserializing 'keyPath' (KeyPath) member of 'IndexMetadata'");
        return false;
    }
    // Sentinel = 'keyPath'
    if ((!((aMsg)->ReadSentinel(aIter, 190972631)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keyPath' (KeyPath) member of 'IndexMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->locale())))))) {
        aActor->FatalError("Error deserializing 'locale' (nsCString) member of 'IndexMetadata'");
        return false;
    }
    // Sentinel = 'locale'
    if ((!((aMsg)->ReadSentinel(aIter, 145031793)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'locale' (nsCString) member of 'IndexMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->unique())))))) {
        aActor->FatalError("Error deserializing 'unique' (bool) member of 'IndexMetadata'");
        return false;
    }
    // Sentinel = 'unique'
    if ((!((aMsg)->ReadSentinel(aIter, 154141336)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'unique' (bool) member of 'IndexMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->multiEntry())))))) {
        aActor->FatalError("Error deserializing 'multiEntry' (bool) member of 'IndexMetadata'");
        return false;
    }
    // Sentinel = 'multiEntry'
    if ((!((aMsg)->ReadSentinel(aIter, 389350462)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'multiEntry' (bool) member of 'IndexMetadata'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->autoLocale())))))) {
        aActor->FatalError("Error deserializing 'autoLocale' (bool) member of 'IndexMetadata'");
        return false;
    }
    // Sentinel = 'autoLocale'
    if ((!((aMsg)->ReadSentinel(aIter, 377029642)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'autoLocale' (bool) member of 'IndexMetadata'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->id())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DatabaseSpec|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseSpec>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).metadata());
    // Sentinel = 'metadata'
    (aMsg)->WriteSentinel(248251202);
    WriteIPDLParam(aMsg, aActor, (aVar).objectStores());
    // Sentinel = 'objectStores'
    (aMsg)->WriteSentinel(535823608);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseSpec>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->metadata())))))) {
        aActor->FatalError("Error deserializing 'metadata' (DatabaseMetadata) member of 'DatabaseSpec'");
        return false;
    }
    // Sentinel = 'metadata'
    if ((!((aMsg)->ReadSentinel(aIter, 248251202)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'metadata' (DatabaseMetadata) member of 'DatabaseSpec'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->objectStores())))))) {
        aActor->FatalError("Error deserializing 'objectStores' (ObjectStoreSpec[]) member of 'DatabaseSpec'");
        return false;
    }
    // Sentinel = 'objectStores'
    if ((!((aMsg)->ReadSentinel(aIter, 535823608)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'objectStores' (ObjectStoreSpec[]) member of 'DatabaseSpec'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreSpec|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreSpec>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).metadata());
    // Sentinel = 'metadata'
    (aMsg)->WriteSentinel(248251202);
    WriteIPDLParam(aMsg, aActor, (aVar).indexes());
    // Sentinel = 'indexes'
    (aMsg)->WriteSentinel(195494641);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreSpec>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->metadata())))))) {
        aActor->FatalError("Error deserializing 'metadata' (ObjectStoreMetadata) member of 'ObjectStoreSpec'");
        return false;
    }
    // Sentinel = 'metadata'
    if ((!((aMsg)->ReadSentinel(aIter, 248251202)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'metadata' (ObjectStoreMetadata) member of 'ObjectStoreSpec'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->indexes())))))) {
        aActor->FatalError("Error deserializing 'indexes' (IndexMetadata[]) member of 'ObjectStoreSpec'");
        return false;
    }
    // Sentinel = 'indexes'
    if ((!((aMsg)->ReadSentinel(aIter, 195494641)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'indexes' (IndexMetadata[]) member of 'ObjectStoreSpec'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CommonOpenCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::CommonOpenCursorParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalKeyRange());
    // Sentinel = 'optionalKeyRange'
    (aMsg)->WriteSentinel(944572029);
    WriteIPDLParam(aMsg, aActor, (aVar).direction());
    // Sentinel = 'direction'
    (aMsg)->WriteSentinel(311886786);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::CommonOpenCursorParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalKeyRange())))))) {
        aActor->FatalError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'CommonOpenCursorParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 944572029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'CommonOpenCursorParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->direction())))))) {
        aActor->FatalError("Error deserializing 'direction' (Direction) member of 'CommonOpenCursorParams'");
        return false;
    }
    // Sentinel = 'direction'
    if ((!((aMsg)->ReadSentinel(aIter, 311886786)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'direction' (Direction) member of 'CommonOpenCursorParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreOpenCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreOpenCursorParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreOpenCursorParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (CommonOpenCursorParams) member of 'ObjectStoreOpenCursorParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (CommonOpenCursorParams) member of 'ObjectStoreOpenCursorParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreOpenKeyCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreOpenKeyCursorParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreOpenKeyCursorParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (CommonOpenCursorParams) member of 'ObjectStoreOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (CommonOpenCursorParams) member of 'ObjectStoreOpenKeyCursorParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CommonIndexOpenCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::CommonIndexOpenCursorParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
    (aMsg)->WriteBytes((&((aVar).indexId())), 8);
    // Sentinel = 'indexId'
    (aMsg)->WriteSentinel(190841542);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::CommonIndexOpenCursorParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (CommonOpenCursorParams) member of 'CommonIndexOpenCursorParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (CommonOpenCursorParams) member of 'CommonIndexOpenCursorParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->indexId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((aMsg)->ReadSentinel(aIter, 190841542)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexOpenCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexOpenCursorParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonIndexParams());
    // Sentinel = 'commonIndexParams'
    (aMsg)->WriteSentinel(1041762022);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexOpenCursorParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonIndexParams())))))) {
        aActor->FatalError("Error deserializing 'commonIndexParams' (CommonIndexOpenCursorParams) member of 'IndexOpenCursorParams'");
        return false;
    }
    // Sentinel = 'commonIndexParams'
    if ((!((aMsg)->ReadSentinel(aIter, 1041762022)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonIndexParams' (CommonIndexOpenCursorParams) member of 'IndexOpenCursorParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexOpenKeyCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexOpenKeyCursorParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonIndexParams());
    // Sentinel = 'commonIndexParams'
    (aMsg)->WriteSentinel(1041762022);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexOpenKeyCursorParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonIndexParams())))))) {
        aActor->FatalError("Error deserializing 'commonIndexParams' (CommonIndexOpenCursorParams) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'commonIndexParams'
    if ((!((aMsg)->ReadSentinel(aIter, 1041762022)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonIndexParams' (CommonIndexOpenCursorParams) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OpenCursorParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto OpenCursorParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TObjectStoreOpenCursorParams:
        {
            (ptr_ObjectStoreOpenCursorParams())->~ObjectStoreOpenCursorParams__tdef();
            break;
        }
    case TObjectStoreOpenKeyCursorParams:
        {
            (ptr_ObjectStoreOpenKeyCursorParams())->~ObjectStoreOpenKeyCursorParams__tdef();
            break;
        }
    case TIndexOpenCursorParams:
        {
            (ptr_IndexOpenCursorParams())->~IndexOpenCursorParams__tdef();
            break;
        }
    case TIndexOpenKeyCursorParams:
        {
            (ptr_IndexOpenKeyCursorParams())->~IndexOpenKeyCursorParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(const ObjectStoreOpenCursorParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreOpenCursorParams()) ObjectStoreOpenCursorParams(aOther);
    mType = TObjectStoreOpenCursorParams;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(ObjectStoreOpenCursorParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreOpenCursorParams()) ObjectStoreOpenCursorParams(std::move(aOther));
    mType = TObjectStoreOpenCursorParams;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(const ObjectStoreOpenKeyCursorParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreOpenKeyCursorParams()) ObjectStoreOpenKeyCursorParams(aOther);
    mType = TObjectStoreOpenKeyCursorParams;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(ObjectStoreOpenKeyCursorParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreOpenKeyCursorParams()) ObjectStoreOpenKeyCursorParams(std::move(aOther));
    mType = TObjectStoreOpenKeyCursorParams;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(const IndexOpenCursorParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexOpenCursorParams()) IndexOpenCursorParams(aOther);
    mType = TIndexOpenCursorParams;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(IndexOpenCursorParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexOpenCursorParams()) IndexOpenCursorParams(std::move(aOther));
    mType = TIndexOpenCursorParams;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(const IndexOpenKeyCursorParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexOpenKeyCursorParams()) IndexOpenKeyCursorParams(aOther);
    mType = TIndexOpenKeyCursorParams;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(IndexOpenKeyCursorParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexOpenKeyCursorParams()) IndexOpenKeyCursorParams(std::move(aOther));
    mType = TIndexOpenKeyCursorParams;
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(const OpenCursorParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TObjectStoreOpenCursorParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreOpenCursorParams()) ObjectStoreOpenCursorParams((aOther).get_ObjectStoreOpenCursorParams());
            break;
        }
    case TObjectStoreOpenKeyCursorParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreOpenKeyCursorParams()) ObjectStoreOpenKeyCursorParams((aOther).get_ObjectStoreOpenKeyCursorParams());
            break;
        }
    case TIndexOpenCursorParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexOpenCursorParams()) IndexOpenCursorParams((aOther).get_IndexOpenCursorParams());
            break;
        }
    case TIndexOpenKeyCursorParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexOpenKeyCursorParams()) IndexOpenKeyCursorParams((aOther).get_IndexOpenKeyCursorParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT OpenCursorParams::OpenCursorParams(OpenCursorParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TObjectStoreOpenCursorParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreOpenCursorParams()) ObjectStoreOpenCursorParams(std::move((aOther).get_ObjectStoreOpenCursorParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreOpenKeyCursorParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreOpenKeyCursorParams()) ObjectStoreOpenKeyCursorParams(std::move((aOther).get_ObjectStoreOpenKeyCursorParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexOpenCursorParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexOpenCursorParams()) IndexOpenCursorParams(std::move((aOther).get_IndexOpenCursorParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexOpenKeyCursorParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexOpenKeyCursorParams()) IndexOpenKeyCursorParams(std::move((aOther).get_IndexOpenKeyCursorParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

OpenCursorParams::~OpenCursorParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OpenCursorParams::operator=(const ObjectStoreOpenCursorParams& aRhs) -> OpenCursorParams&
{
    if (MaybeDestroy(TObjectStoreOpenCursorParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreOpenCursorParams()) ObjectStoreOpenCursorParams;
    }
    (*(ptr_ObjectStoreOpenCursorParams())) = aRhs;
    mType = TObjectStoreOpenCursorParams;
    return (*(this));
}

auto OpenCursorParams::operator=(ObjectStoreOpenCursorParams&& aRhs) -> OpenCursorParams&
{
    if (MaybeDestroy(TObjectStoreOpenCursorParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreOpenCursorParams()) ObjectStoreOpenCursorParams;
    }
    (*(ptr_ObjectStoreOpenCursorParams())) = std::move(aRhs);
    mType = TObjectStoreOpenCursorParams;
    return (*(this));
}

auto OpenCursorParams::operator=(const ObjectStoreOpenKeyCursorParams& aRhs) -> OpenCursorParams&
{
    if (MaybeDestroy(TObjectStoreOpenKeyCursorParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreOpenKeyCursorParams()) ObjectStoreOpenKeyCursorParams;
    }
    (*(ptr_ObjectStoreOpenKeyCursorParams())) = aRhs;
    mType = TObjectStoreOpenKeyCursorParams;
    return (*(this));
}

auto OpenCursorParams::operator=(ObjectStoreOpenKeyCursorParams&& aRhs) -> OpenCursorParams&
{
    if (MaybeDestroy(TObjectStoreOpenKeyCursorParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreOpenKeyCursorParams()) ObjectStoreOpenKeyCursorParams;
    }
    (*(ptr_ObjectStoreOpenKeyCursorParams())) = std::move(aRhs);
    mType = TObjectStoreOpenKeyCursorParams;
    return (*(this));
}

auto OpenCursorParams::operator=(const IndexOpenCursorParams& aRhs) -> OpenCursorParams&
{
    if (MaybeDestroy(TIndexOpenCursorParams)) {
        new (mozilla::KnownNotNull, ptr_IndexOpenCursorParams()) IndexOpenCursorParams;
    }
    (*(ptr_IndexOpenCursorParams())) = aRhs;
    mType = TIndexOpenCursorParams;
    return (*(this));
}

auto OpenCursorParams::operator=(IndexOpenCursorParams&& aRhs) -> OpenCursorParams&
{
    if (MaybeDestroy(TIndexOpenCursorParams)) {
        new (mozilla::KnownNotNull, ptr_IndexOpenCursorParams()) IndexOpenCursorParams;
    }
    (*(ptr_IndexOpenCursorParams())) = std::move(aRhs);
    mType = TIndexOpenCursorParams;
    return (*(this));
}

auto OpenCursorParams::operator=(const IndexOpenKeyCursorParams& aRhs) -> OpenCursorParams&
{
    if (MaybeDestroy(TIndexOpenKeyCursorParams)) {
        new (mozilla::KnownNotNull, ptr_IndexOpenKeyCursorParams()) IndexOpenKeyCursorParams;
    }
    (*(ptr_IndexOpenKeyCursorParams())) = aRhs;
    mType = TIndexOpenKeyCursorParams;
    return (*(this));
}

auto OpenCursorParams::operator=(IndexOpenKeyCursorParams&& aRhs) -> OpenCursorParams&
{
    if (MaybeDestroy(TIndexOpenKeyCursorParams)) {
        new (mozilla::KnownNotNull, ptr_IndexOpenKeyCursorParams()) IndexOpenKeyCursorParams;
    }
    (*(ptr_IndexOpenKeyCursorParams())) = std::move(aRhs);
    mType = TIndexOpenKeyCursorParams;
    return (*(this));
}

auto OpenCursorParams::operator=(const OpenCursorParams& aRhs) -> OpenCursorParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TObjectStoreOpenCursorParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreOpenCursorParams()) ObjectStoreOpenCursorParams;
            }
            (*(ptr_ObjectStoreOpenCursorParams())) = (aRhs).get_ObjectStoreOpenCursorParams();
            break;
        }
    case TObjectStoreOpenKeyCursorParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreOpenKeyCursorParams()) ObjectStoreOpenKeyCursorParams;
            }
            (*(ptr_ObjectStoreOpenKeyCursorParams())) = (aRhs).get_ObjectStoreOpenKeyCursorParams();
            break;
        }
    case TIndexOpenCursorParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexOpenCursorParams()) IndexOpenCursorParams;
            }
            (*(ptr_IndexOpenCursorParams())) = (aRhs).get_IndexOpenCursorParams();
            break;
        }
    case TIndexOpenKeyCursorParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexOpenKeyCursorParams()) IndexOpenKeyCursorParams;
            }
            (*(ptr_IndexOpenKeyCursorParams())) = (aRhs).get_IndexOpenKeyCursorParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OpenCursorParams::operator=(OpenCursorParams&& aRhs) -> OpenCursorParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TObjectStoreOpenCursorParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreOpenCursorParams()) ObjectStoreOpenCursorParams;
            }
            (*(ptr_ObjectStoreOpenCursorParams())) = std::move((aRhs).get_ObjectStoreOpenCursorParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreOpenKeyCursorParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreOpenKeyCursorParams()) ObjectStoreOpenKeyCursorParams;
            }
            (*(ptr_ObjectStoreOpenKeyCursorParams())) = std::move((aRhs).get_ObjectStoreOpenKeyCursorParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexOpenCursorParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexOpenCursorParams()) IndexOpenCursorParams;
            }
            (*(ptr_IndexOpenCursorParams())) = std::move((aRhs).get_IndexOpenCursorParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexOpenKeyCursorParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexOpenKeyCursorParams()) IndexOpenKeyCursorParams;
            }
            (*(ptr_IndexOpenKeyCursorParams())) = std::move((aRhs).get_IndexOpenKeyCursorParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::OpenCursorParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::OpenCursorParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'OpenCursorParams'
    (aMsg)->WriteSentinel(904463989);

    switch (type) {
    case union__::TObjectStoreOpenCursorParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreOpenCursorParams());
            // Sentinel = 'TObjectStoreOpenCursorParams'
            (aMsg)->WriteSentinel(2666662701);
            return;
        }
    case union__::TObjectStoreOpenKeyCursorParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreOpenKeyCursorParams());
            // Sentinel = 'TObjectStoreOpenKeyCursorParams'
            (aMsg)->WriteSentinel(3252882518);
            return;
        }
    case union__::TIndexOpenCursorParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexOpenCursorParams());
            // Sentinel = 'TIndexOpenCursorParams'
            (aMsg)->WriteSentinel(1647970497);
            return;
        }
    case union__::TIndexOpenKeyCursorParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexOpenKeyCursorParams());
            // Sentinel = 'TIndexOpenKeyCursorParams'
            (aMsg)->WriteSentinel(2112293354);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::OpenCursorParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::OpenCursorParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union OpenCursorParams");
        return false;
    }
    // Sentinel = 'OpenCursorParams'
    if ((!((aMsg)->ReadSentinel(aIter, 904463989)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union OpenCursorParams");
        return false;
    }

    switch (type) {
    case union__::TObjectStoreOpenCursorParams:
        {
            mozilla::dom::indexedDB::ObjectStoreOpenCursorParams tmp = mozilla::dom::indexedDB::ObjectStoreOpenCursorParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreOpenCursorParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreOpenCursorParams of union OpenCursorParams");
                return false;
            }
            // Sentinel = 'TObjectStoreOpenCursorParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2666662701)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreOpenCursorParams of union OpenCursorParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreOpenKeyCursorParams:
        {
            mozilla::dom::indexedDB::ObjectStoreOpenKeyCursorParams tmp = mozilla::dom::indexedDB::ObjectStoreOpenKeyCursorParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreOpenKeyCursorParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreOpenKeyCursorParams of union OpenCursorParams");
                return false;
            }
            // Sentinel = 'TObjectStoreOpenKeyCursorParams'
            if ((!((aMsg)->ReadSentinel(aIter, 3252882518)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreOpenKeyCursorParams of union OpenCursorParams");
                return false;
            }
            return true;
        }
    case union__::TIndexOpenCursorParams:
        {
            mozilla::dom::indexedDB::IndexOpenCursorParams tmp = mozilla::dom::indexedDB::IndexOpenCursorParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexOpenCursorParams())))))) {
                aActor->FatalError("Error deserializing variant TIndexOpenCursorParams of union OpenCursorParams");
                return false;
            }
            // Sentinel = 'TIndexOpenCursorParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1647970497)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexOpenCursorParams of union OpenCursorParams");
                return false;
            }
            return true;
        }
    case union__::TIndexOpenKeyCursorParams:
        {
            mozilla::dom::indexedDB::IndexOpenKeyCursorParams tmp = mozilla::dom::indexedDB::IndexOpenKeyCursorParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexOpenKeyCursorParams())))))) {
                aActor->FatalError("Error deserializing variant TIndexOpenKeyCursorParams of union OpenCursorParams");
                return false;
            }
            // Sentinel = 'TIndexOpenKeyCursorParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2112293354)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexOpenKeyCursorParams of union OpenCursorParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union DatabaseOrMutableFile|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto DatabaseOrMutableFile::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TPBackgroundIDBDatabaseFileParent:
        {
            (ptr_PBackgroundIDBDatabaseFileParent())->~PBackgroundIDBDatabaseFileParent__tdef();
            break;
        }
    case TPBackgroundIDBDatabaseFileChild:
        {
            (ptr_PBackgroundIDBDatabaseFileChild())->~PBackgroundIDBDatabaseFileChild__tdef();
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            (ptr_PBackgroundMutableFileParent())->~PBackgroundMutableFileParent__tdef();
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            (ptr_PBackgroundMutableFileChild())->~PBackgroundMutableFileChild__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT DatabaseOrMutableFile::DatabaseOrMutableFile(PBackgroundIDBDatabaseFileParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileParent()) PBackgroundIDBDatabaseFileParent*(const_cast<PBackgroundIDBDatabaseFileParent*>(aOther));
    mType = TPBackgroundIDBDatabaseFileParent;
}

MOZ_IMPLICIT DatabaseOrMutableFile::DatabaseOrMutableFile(PBackgroundIDBDatabaseFileChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileChild()) PBackgroundIDBDatabaseFileChild*(const_cast<PBackgroundIDBDatabaseFileChild*>(aOther));
    mType = TPBackgroundIDBDatabaseFileChild;
}

MOZ_IMPLICIT DatabaseOrMutableFile::DatabaseOrMutableFile(PBackgroundMutableFileParent* aOther)
{
    new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*(const_cast<PBackgroundMutableFileParent*>(aOther));
    mType = TPBackgroundMutableFileParent;
}

MOZ_IMPLICIT DatabaseOrMutableFile::DatabaseOrMutableFile(PBackgroundMutableFileChild* aOther)
{
    new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*(const_cast<PBackgroundMutableFileChild*>(aOther));
    mType = TPBackgroundMutableFileChild;
}

MOZ_IMPLICIT DatabaseOrMutableFile::DatabaseOrMutableFile(const DatabaseOrMutableFile& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TPBackgroundIDBDatabaseFileParent:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileParent()) PBackgroundIDBDatabaseFileParent*(const_cast<PBackgroundIDBDatabaseFileParent*>((aOther).get_PBackgroundIDBDatabaseFileParent()));
            break;
        }
    case TPBackgroundIDBDatabaseFileChild:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileChild()) PBackgroundIDBDatabaseFileChild*(const_cast<PBackgroundIDBDatabaseFileChild*>((aOther).get_PBackgroundIDBDatabaseFileChild()));
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*(const_cast<PBackgroundMutableFileParent*>((aOther).get_PBackgroundMutableFileParent()));
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*(const_cast<PBackgroundMutableFileChild*>((aOther).get_PBackgroundMutableFileChild()));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT DatabaseOrMutableFile::DatabaseOrMutableFile(DatabaseOrMutableFile&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TPBackgroundIDBDatabaseFileParent:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileParent()) PBackgroundIDBDatabaseFileParent*(const_cast<PBackgroundIDBDatabaseFileParent*>(std::move((aOther).get_PBackgroundIDBDatabaseFileParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundIDBDatabaseFileChild:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileChild()) PBackgroundIDBDatabaseFileChild*(const_cast<PBackgroundIDBDatabaseFileChild*>(std::move((aOther).get_PBackgroundIDBDatabaseFileChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*(const_cast<PBackgroundMutableFileParent*>(std::move((aOther).get_PBackgroundMutableFileParent())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*(const_cast<PBackgroundMutableFileChild*>(std::move((aOther).get_PBackgroundMutableFileChild())));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

DatabaseOrMutableFile::~DatabaseOrMutableFile()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto DatabaseOrMutableFile::operator=(PBackgroundIDBDatabaseFileParent* aRhs) -> DatabaseOrMutableFile&
{
    if (MaybeDestroy(TPBackgroundIDBDatabaseFileParent)) {
        new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileParent()) PBackgroundIDBDatabaseFileParent*;
    }
    (*(ptr_PBackgroundIDBDatabaseFileParent())) = const_cast<PBackgroundIDBDatabaseFileParent*>(aRhs);
    mType = TPBackgroundIDBDatabaseFileParent;
    return (*(this));
}

auto DatabaseOrMutableFile::operator=(PBackgroundIDBDatabaseFileChild* aRhs) -> DatabaseOrMutableFile&
{
    if (MaybeDestroy(TPBackgroundIDBDatabaseFileChild)) {
        new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileChild()) PBackgroundIDBDatabaseFileChild*;
    }
    (*(ptr_PBackgroundIDBDatabaseFileChild())) = const_cast<PBackgroundIDBDatabaseFileChild*>(aRhs);
    mType = TPBackgroundIDBDatabaseFileChild;
    return (*(this));
}

auto DatabaseOrMutableFile::operator=(PBackgroundMutableFileParent* aRhs) -> DatabaseOrMutableFile&
{
    if (MaybeDestroy(TPBackgroundMutableFileParent)) {
        new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*;
    }
    (*(ptr_PBackgroundMutableFileParent())) = const_cast<PBackgroundMutableFileParent*>(aRhs);
    mType = TPBackgroundMutableFileParent;
    return (*(this));
}

auto DatabaseOrMutableFile::operator=(PBackgroundMutableFileChild* aRhs) -> DatabaseOrMutableFile&
{
    if (MaybeDestroy(TPBackgroundMutableFileChild)) {
        new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*;
    }
    (*(ptr_PBackgroundMutableFileChild())) = const_cast<PBackgroundMutableFileChild*>(aRhs);
    mType = TPBackgroundMutableFileChild;
    return (*(this));
}

auto DatabaseOrMutableFile::operator=(const DatabaseOrMutableFile& aRhs) -> DatabaseOrMutableFile&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPBackgroundIDBDatabaseFileParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileParent()) PBackgroundIDBDatabaseFileParent*;
            }
            (*(ptr_PBackgroundIDBDatabaseFileParent())) = const_cast<PBackgroundIDBDatabaseFileParent*>((aRhs).get_PBackgroundIDBDatabaseFileParent());
            break;
        }
    case TPBackgroundIDBDatabaseFileChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileChild()) PBackgroundIDBDatabaseFileChild*;
            }
            (*(ptr_PBackgroundIDBDatabaseFileChild())) = const_cast<PBackgroundIDBDatabaseFileChild*>((aRhs).get_PBackgroundIDBDatabaseFileChild());
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*;
            }
            (*(ptr_PBackgroundMutableFileParent())) = const_cast<PBackgroundMutableFileParent*>((aRhs).get_PBackgroundMutableFileParent());
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*;
            }
            (*(ptr_PBackgroundMutableFileChild())) = const_cast<PBackgroundMutableFileChild*>((aRhs).get_PBackgroundMutableFileChild());
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto DatabaseOrMutableFile::operator=(DatabaseOrMutableFile&& aRhs) -> DatabaseOrMutableFile&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TPBackgroundIDBDatabaseFileParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileParent()) PBackgroundIDBDatabaseFileParent*;
            }
            (*(ptr_PBackgroundIDBDatabaseFileParent())) = const_cast<PBackgroundIDBDatabaseFileParent*>(std::move((aRhs).get_PBackgroundIDBDatabaseFileParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundIDBDatabaseFileChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundIDBDatabaseFileChild()) PBackgroundIDBDatabaseFileChild*;
            }
            (*(ptr_PBackgroundIDBDatabaseFileChild())) = const_cast<PBackgroundIDBDatabaseFileChild*>(std::move((aRhs).get_PBackgroundIDBDatabaseFileChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundMutableFileParent:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileParent()) PBackgroundMutableFileParent*;
            }
            (*(ptr_PBackgroundMutableFileParent())) = const_cast<PBackgroundMutableFileParent*>(std::move((aRhs).get_PBackgroundMutableFileParent()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPBackgroundMutableFileChild:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PBackgroundMutableFileChild()) PBackgroundMutableFileChild*;
            }
            (*(ptr_PBackgroundMutableFileChild())) = const_cast<PBackgroundMutableFileChild*>(std::move((aRhs).get_PBackgroundMutableFileChild()));
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseOrMutableFile>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::DatabaseOrMutableFile union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'DatabaseOrMutableFile'
    (aMsg)->WriteSentinel(1486293025);

    switch (type) {
    case union__::TPBackgroundIDBDatabaseFileParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PBackgroundIDBDatabaseFileParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PBackgroundIDBDatabaseFileParent());
                // Sentinel = 'TPBackgroundIDBDatabaseFileParent'
                (aMsg)->WriteSentinel(3471903859);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPBackgroundIDBDatabaseFileChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PBackgroundIDBDatabaseFileChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PBackgroundIDBDatabaseFileChild());
                // Sentinel = 'TPBackgroundIDBDatabaseFileChild'
                (aMsg)->WriteSentinel(3259108333);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPBackgroundMutableFileParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PBackgroundMutableFileParent(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PBackgroundMutableFileParent());
                // Sentinel = 'TPBackgroundMutableFileParent'
                (aMsg)->WriteSentinel(2800094041);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    case union__::TPBackgroundMutableFileChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                MOZ_RELEASE_ASSERT((aVar).get_PBackgroundMutableFileChild(), "NULL actor value passed to non-nullable param");
                WriteIPDLParam(aMsg, aActor, (aVar).get_PBackgroundMutableFileChild());
                // Sentinel = 'TPBackgroundMutableFileChild'
                (aMsg)->WriteSentinel(2605779667);
            }
            else {
                aActor->FatalError("wrong side!");
            }
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::DatabaseOrMutableFile>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::DatabaseOrMutableFile union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union DatabaseOrMutableFile");
        return false;
    }
    // Sentinel = 'DatabaseOrMutableFile'
    if ((!((aMsg)->ReadSentinel(aIter, 1486293025)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union DatabaseOrMutableFile");
        return false;
    }

    switch (type) {
    case union__::TPBackgroundIDBDatabaseFileParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::dom::indexedDB::PBackgroundIDBDatabaseFileChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PBackgroundIDBDatabaseFileChild())))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundIDBDatabaseFileParent of union DatabaseOrMutableFile");
                return false;
            }
            if ((!((*((&((aVar)->get_PBackgroundIDBDatabaseFileChild()))))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundIDBDatabaseFileParent of union DatabaseOrMutableFile");
                return false;
            }
            // Sentinel = 'TPBackgroundIDBDatabaseFileParent'
            if ((!((aMsg)->ReadSentinel(aIter, 3471903859)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPBackgroundIDBDatabaseFileParent of union DatabaseOrMutableFile");
                return false;
            }
            return true;
        }
    case union__::TPBackgroundIDBDatabaseFileChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::dom::indexedDB::PBackgroundIDBDatabaseFileParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PBackgroundIDBDatabaseFileParent())))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundIDBDatabaseFileChild of union DatabaseOrMutableFile");
                return false;
            }
            if ((!((*((&((aVar)->get_PBackgroundIDBDatabaseFileParent()))))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundIDBDatabaseFileChild of union DatabaseOrMutableFile");
                return false;
            }
            // Sentinel = 'TPBackgroundIDBDatabaseFileChild'
            if ((!((aMsg)->ReadSentinel(aIter, 3259108333)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPBackgroundIDBDatabaseFileChild of union DatabaseOrMutableFile");
                return false;
            }
            return true;
        }
    case union__::TPBackgroundMutableFileParent:
        {
            if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::dom::PBackgroundMutableFileChild* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PBackgroundMutableFileChild())))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundMutableFileParent of union DatabaseOrMutableFile");
                return false;
            }
            if ((!((*((&((aVar)->get_PBackgroundMutableFileChild()))))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundMutableFileParent of union DatabaseOrMutableFile");
                return false;
            }
            // Sentinel = 'TPBackgroundMutableFileParent'
            if ((!((aMsg)->ReadSentinel(aIter, 2800094041)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPBackgroundMutableFileParent of union DatabaseOrMutableFile");
                return false;
            }
            return true;
        }
    case union__::TPBackgroundMutableFileChild:
        {
            if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
                {
                    aActor->FatalError("wrong side!");
                    return false;
                }
            }
            mozilla::dom::PBackgroundMutableFileParent* tmp = nullptr;
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PBackgroundMutableFileParent())))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundMutableFileChild of union DatabaseOrMutableFile");
                return false;
            }
            if ((!((*((&((aVar)->get_PBackgroundMutableFileParent()))))))) {
                aActor->FatalError("Error deserializing variant TPBackgroundMutableFileChild of union DatabaseOrMutableFile");
                return false;
            }
            // Sentinel = 'TPBackgroundMutableFileChild'
            if ((!((aMsg)->ReadSentinel(aIter, 2605779667)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPBackgroundMutableFileChild of union DatabaseOrMutableFile");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FileAddInfo|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::FileAddInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).file());
    // Sentinel = 'file'
    (aMsg)->WriteSentinel(68420001);
    WriteIPDLParam(aMsg, aActor, (aVar).type());
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::FileAddInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->file())))))) {
        aActor->FatalError("Error deserializing 'file' (DatabaseOrMutableFile) member of 'FileAddInfo'");
        return false;
    }
    // Sentinel = 'file'
    if ((!((aMsg)->ReadSentinel(aIter, 68420001)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'file' (DatabaseOrMutableFile) member of 'FileAddInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->type())))))) {
        aActor->FatalError("Error deserializing 'type' (FileType) member of 'FileAddInfo'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'type' (FileType) member of 'FileAddInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreAddPutParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreAddPutParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).cloneInfo());
    // Sentinel = 'cloneInfo'
    (aMsg)->WriteSentinel(304284574);
    WriteIPDLParam(aMsg, aActor, (aVar).key());
    // Sentinel = 'key'
    (aMsg)->WriteSentinel(42402122);
    WriteIPDLParam(aMsg, aActor, (aVar).indexUpdateInfos());
    // Sentinel = 'indexUpdateInfos'
    (aMsg)->WriteSentinel(923797115);
    WriteIPDLParam(aMsg, aActor, (aVar).fileAddInfos());
    // Sentinel = 'fileAddInfos'
    (aMsg)->WriteSentinel(501220521);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreAddPutParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->cloneInfo())))))) {
        aActor->FatalError("Error deserializing 'cloneInfo' (SerializedStructuredCloneWriteInfo) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'cloneInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 304284574)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'cloneInfo' (SerializedStructuredCloneWriteInfo) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->key())))))) {
        aActor->FatalError("Error deserializing 'key' (Key) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((aMsg)->ReadSentinel(aIter, 42402122)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'key' (Key) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->indexUpdateInfos())))))) {
        aActor->FatalError("Error deserializing 'indexUpdateInfos' (IndexUpdateInfo[]) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'indexUpdateInfos'
    if ((!((aMsg)->ReadSentinel(aIter, 923797115)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'indexUpdateInfos' (IndexUpdateInfo[]) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fileAddInfos())))))) {
        aActor->FatalError("Error deserializing 'fileAddInfos' (FileAddInfo[]) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'fileAddInfos'
    if ((!((aMsg)->ReadSentinel(aIter, 501220521)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fileAddInfos' (FileAddInfo[]) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreAddParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreAddParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreAddParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (ObjectStoreAddPutParams) member of 'ObjectStoreAddParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (ObjectStoreAddPutParams) member of 'ObjectStoreAddParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStorePutParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStorePutParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).commonParams());
    // Sentinel = 'commonParams'
    (aMsg)->WriteSentinel(537068782);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStorePutParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->commonParams())))))) {
        aActor->FatalError("Error deserializing 'commonParams' (ObjectStoreAddPutParams) member of 'ObjectStorePutParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((aMsg)->ReadSentinel(aIter, 537068782)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'commonParams' (ObjectStoreAddPutParams) member of 'ObjectStorePutParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).keyRange());
    // Sentinel = 'keyRange'
    (aMsg)->WriteSentinel(244581175);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keyRange())))))) {
        aActor->FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreGetParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 244581175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreGetParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetKeyParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetKeyParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).keyRange());
    // Sentinel = 'keyRange'
    (aMsg)->WriteSentinel(244581175);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetKeyParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keyRange())))))) {
        aActor->FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreGetKeyParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 244581175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreGetKeyParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetAllParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalKeyRange());
    // Sentinel = 'optionalKeyRange'
    (aMsg)->WriteSentinel(944572029);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
    (aMsg)->WriteBytes((&((aVar).limit())), 4);
    // Sentinel = 'limit'
    (aMsg)->WriteSentinel(106037792);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalKeyRange())))))) {
        aActor->FatalError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'ObjectStoreGetAllParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 944572029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'ObjectStoreGetAllParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->limit())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'limit'
    if ((!((aMsg)->ReadSentinel(aIter, 106037792)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreGetAllKeysParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllKeysParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalKeyRange());
    // Sentinel = 'optionalKeyRange'
    (aMsg)->WriteSentinel(944572029);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
    (aMsg)->WriteBytes((&((aVar).limit())), 4);
    // Sentinel = 'limit'
    (aMsg)->WriteSentinel(106037792);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreGetAllKeysParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalKeyRange())))))) {
        aActor->FatalError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'ObjectStoreGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 944572029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'ObjectStoreGetAllKeysParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->limit())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'limit'
    if ((!((aMsg)->ReadSentinel(aIter, 106037792)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreDeleteParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreDeleteParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).keyRange());
    // Sentinel = 'keyRange'
    (aMsg)->WriteSentinel(244581175);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreDeleteParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keyRange())))))) {
        aActor->FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreDeleteParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 244581175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreDeleteParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreClearParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreClearParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreClearParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ObjectStoreCountParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreCountParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalKeyRange());
    // Sentinel = 'optionalKeyRange'
    (aMsg)->WriteSentinel(944572029);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 8);
    // Sentinel = 'objectStoreId'
    (aMsg)->WriteSentinel(620234034);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::ObjectStoreCountParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalKeyRange())))))) {
        aActor->FatalError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'ObjectStoreCountParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 944572029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'ObjectStoreCountParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((aMsg)->ReadSentinel(aIter, 620234034)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexGetParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto IndexGetParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IndexGetParams, indexId_) - offsetof(IndexGetParams, objectStoreId_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).keyRange());
    // Sentinel = 'keyRange'
    (aMsg)->WriteSentinel(244581175);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 16);
    // Sentinel = 'objectStoreId | indexId'
    (aMsg)->WriteSentinel(1793132723);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keyRange())))))) {
        aActor->FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'IndexGetParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 244581175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'IndexGetParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId | indexId'
    if ((!((aMsg)->ReadSentinel(aIter, 1793132723)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexGetKeyParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto IndexGetKeyParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IndexGetKeyParams, indexId_) - offsetof(IndexGetKeyParams, objectStoreId_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetKeyParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).keyRange());
    // Sentinel = 'keyRange'
    (aMsg)->WriteSentinel(244581175);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 16);
    // Sentinel = 'objectStoreId | indexId'
    (aMsg)->WriteSentinel(1793132723);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetKeyParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->keyRange())))))) {
        aActor->FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'IndexGetKeyParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 244581175)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'IndexGetKeyParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId | indexId'
    if ((!((aMsg)->ReadSentinel(aIter, 1793132723)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexGetAllParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto IndexGetAllParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IndexGetAllParams, indexId_) - offsetof(IndexGetAllParams, objectStoreId_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetAllParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalKeyRange());
    // Sentinel = 'optionalKeyRange'
    (aMsg)->WriteSentinel(944572029);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 16);
    // Sentinel = 'objectStoreId | indexId'
    (aMsg)->WriteSentinel(1793132723);
    (aMsg)->WriteBytes((&((aVar).limit())), 4);
    // Sentinel = 'limit'
    (aMsg)->WriteSentinel(106037792);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetAllParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalKeyRange())))))) {
        aActor->FatalError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'IndexGetAllParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 944572029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'IndexGetAllParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId | indexId'
    if ((!((aMsg)->ReadSentinel(aIter, 1793132723)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->limit())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'limit'
    if ((!((aMsg)->ReadSentinel(aIter, 106037792)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexGetAllKeysParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto IndexGetAllKeysParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IndexGetAllKeysParams, indexId_) - offsetof(IndexGetAllKeysParams, objectStoreId_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetAllKeysParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalKeyRange());
    // Sentinel = 'optionalKeyRange'
    (aMsg)->WriteSentinel(944572029);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 16);
    // Sentinel = 'objectStoreId | indexId'
    (aMsg)->WriteSentinel(1793132723);
    (aMsg)->WriteBytes((&((aVar).limit())), 4);
    // Sentinel = 'limit'
    (aMsg)->WriteSentinel(106037792);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexGetAllKeysParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalKeyRange())))))) {
        aActor->FatalError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'IndexGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 944572029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'IndexGetAllKeysParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId | indexId'
    if ((!((aMsg)->ReadSentinel(aIter, 1793132723)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->limit())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'limit'
    if ((!((aMsg)->ReadSentinel(aIter, 106037792)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IndexCountParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto IndexCountParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IndexCountParams, indexId_) - offsetof(IndexCountParams, objectStoreId_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::IndexCountParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).optionalKeyRange());
    // Sentinel = 'optionalKeyRange'
    (aMsg)->WriteSentinel(944572029);
    (aMsg)->WriteBytes((&((aVar).objectStoreId())), 16);
    // Sentinel = 'objectStoreId | indexId'
    (aMsg)->WriteSentinel(1793132723);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::IndexCountParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->optionalKeyRange())))))) {
        aActor->FatalError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'IndexCountParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((aMsg)->ReadSentinel(aIter, 944572029)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'optionalKeyRange' (SerializedKeyRange?) member of 'IndexCountParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->objectStoreId())), 16)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'objectStoreId | indexId'
    if ((!((aMsg)->ReadSentinel(aIter, 1793132723)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union RequestParams|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto RequestParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TObjectStoreAddParams:
        {
            (ptr_ObjectStoreAddParams())->~ObjectStoreAddParams__tdef();
            break;
        }
    case TObjectStorePutParams:
        {
            (ptr_ObjectStorePutParams())->~ObjectStorePutParams__tdef();
            break;
        }
    case TObjectStoreGetParams:
        {
            (ptr_ObjectStoreGetParams())->~ObjectStoreGetParams__tdef();
            break;
        }
    case TObjectStoreGetKeyParams:
        {
            (ptr_ObjectStoreGetKeyParams())->~ObjectStoreGetKeyParams__tdef();
            break;
        }
    case TObjectStoreGetAllParams:
        {
            (ptr_ObjectStoreGetAllParams())->~ObjectStoreGetAllParams__tdef();
            break;
        }
    case TObjectStoreGetAllKeysParams:
        {
            (ptr_ObjectStoreGetAllKeysParams())->~ObjectStoreGetAllKeysParams__tdef();
            break;
        }
    case TObjectStoreDeleteParams:
        {
            (ptr_ObjectStoreDeleteParams())->~ObjectStoreDeleteParams__tdef();
            break;
        }
    case TObjectStoreClearParams:
        {
            (ptr_ObjectStoreClearParams())->~ObjectStoreClearParams__tdef();
            break;
        }
    case TObjectStoreCountParams:
        {
            (ptr_ObjectStoreCountParams())->~ObjectStoreCountParams__tdef();
            break;
        }
    case TIndexGetParams:
        {
            (ptr_IndexGetParams())->~IndexGetParams__tdef();
            break;
        }
    case TIndexGetKeyParams:
        {
            (ptr_IndexGetKeyParams())->~IndexGetKeyParams__tdef();
            break;
        }
    case TIndexGetAllParams:
        {
            (ptr_IndexGetAllParams())->~IndexGetAllParams__tdef();
            break;
        }
    case TIndexGetAllKeysParams:
        {
            (ptr_IndexGetAllKeysParams())->~IndexGetAllKeysParams__tdef();
            break;
        }
    case TIndexCountParams:
        {
            (ptr_IndexCountParams())->~IndexCountParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStoreAddParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreAddParams()) ObjectStoreAddParams(std::move(aOther));
    mType = TObjectStoreAddParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStorePutParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStorePutParams()) ObjectStorePutParams(std::move(aOther));
    mType = TObjectStorePutParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ObjectStoreGetParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetParams()) ObjectStoreGetParams(aOther);
    mType = TObjectStoreGetParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStoreGetParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetParams()) ObjectStoreGetParams(std::move(aOther));
    mType = TObjectStoreGetParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ObjectStoreGetKeyParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyParams()) ObjectStoreGetKeyParams(aOther);
    mType = TObjectStoreGetKeyParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStoreGetKeyParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyParams()) ObjectStoreGetKeyParams(std::move(aOther));
    mType = TObjectStoreGetKeyParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ObjectStoreGetAllParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllParams()) ObjectStoreGetAllParams(aOther);
    mType = TObjectStoreGetAllParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStoreGetAllParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllParams()) ObjectStoreGetAllParams(std::move(aOther));
    mType = TObjectStoreGetAllParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ObjectStoreGetAllKeysParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysParams()) ObjectStoreGetAllKeysParams(aOther);
    mType = TObjectStoreGetAllKeysParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStoreGetAllKeysParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysParams()) ObjectStoreGetAllKeysParams(std::move(aOther));
    mType = TObjectStoreGetAllKeysParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ObjectStoreDeleteParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteParams()) ObjectStoreDeleteParams(aOther);
    mType = TObjectStoreDeleteParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStoreDeleteParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteParams()) ObjectStoreDeleteParams(std::move(aOther));
    mType = TObjectStoreDeleteParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ObjectStoreClearParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreClearParams()) ObjectStoreClearParams(aOther);
    mType = TObjectStoreClearParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStoreClearParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreClearParams()) ObjectStoreClearParams(std::move(aOther));
    mType = TObjectStoreClearParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const ObjectStoreCountParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreCountParams()) ObjectStoreCountParams(aOther);
    mType = TObjectStoreCountParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(ObjectStoreCountParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ObjectStoreCountParams()) ObjectStoreCountParams(std::move(aOther));
    mType = TObjectStoreCountParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const IndexGetParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetParams()) IndexGetParams(aOther);
    mType = TIndexGetParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(IndexGetParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetParams()) IndexGetParams(std::move(aOther));
    mType = TIndexGetParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const IndexGetKeyParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetKeyParams()) IndexGetKeyParams(aOther);
    mType = TIndexGetKeyParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(IndexGetKeyParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetKeyParams()) IndexGetKeyParams(std::move(aOther));
    mType = TIndexGetKeyParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const IndexGetAllParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetAllParams()) IndexGetAllParams(aOther);
    mType = TIndexGetAllParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(IndexGetAllParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetAllParams()) IndexGetAllParams(std::move(aOther));
    mType = TIndexGetAllParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const IndexGetAllKeysParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetAllKeysParams()) IndexGetAllKeysParams(aOther);
    mType = TIndexGetAllKeysParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(IndexGetAllKeysParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexGetAllKeysParams()) IndexGetAllKeysParams(std::move(aOther));
    mType = TIndexGetAllKeysParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(const IndexCountParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexCountParams()) IndexCountParams(aOther);
    mType = TIndexCountParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(IndexCountParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IndexCountParams()) IndexCountParams(std::move(aOther));
    mType = TIndexCountParams;
}

MOZ_IMPLICIT RequestParams::RequestParams(RequestParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TObjectStoreAddParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreAddParams()) ObjectStoreAddParams(std::move((aOther).get_ObjectStoreAddParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStorePutParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStorePutParams()) ObjectStorePutParams(std::move((aOther).get_ObjectStorePutParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetParams()) ObjectStoreGetParams(std::move((aOther).get_ObjectStoreGetParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetKeyParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyParams()) ObjectStoreGetKeyParams(std::move((aOther).get_ObjectStoreGetKeyParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllParams()) ObjectStoreGetAllParams(std::move((aOther).get_ObjectStoreGetAllParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllKeysParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysParams()) ObjectStoreGetAllKeysParams(std::move((aOther).get_ObjectStoreGetAllKeysParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreDeleteParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteParams()) ObjectStoreDeleteParams(std::move((aOther).get_ObjectStoreDeleteParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreClearParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreClearParams()) ObjectStoreClearParams(std::move((aOther).get_ObjectStoreClearParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreCountParams:
        {
            new (mozilla::KnownNotNull, ptr_ObjectStoreCountParams()) ObjectStoreCountParams(std::move((aOther).get_ObjectStoreCountParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexGetParams()) IndexGetParams(std::move((aOther).get_IndexGetParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetKeyParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexGetKeyParams()) IndexGetKeyParams(std::move((aOther).get_IndexGetKeyParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetAllParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexGetAllParams()) IndexGetAllParams(std::move((aOther).get_IndexGetAllParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetAllKeysParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexGetAllKeysParams()) IndexGetAllKeysParams(std::move((aOther).get_IndexGetAllKeysParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIndexCountParams:
        {
            new (mozilla::KnownNotNull, ptr_IndexCountParams()) IndexCountParams(std::move((aOther).get_IndexCountParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

RequestParams::~RequestParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto RequestParams::operator=(ObjectStoreAddParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreAddParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreAddParams()) ObjectStoreAddParams;
    }
    (*(ptr_ObjectStoreAddParams())) = std::move(aRhs);
    mType = TObjectStoreAddParams;
    return (*(this));
}

auto RequestParams::operator=(ObjectStorePutParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStorePutParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStorePutParams()) ObjectStorePutParams;
    }
    (*(ptr_ObjectStorePutParams())) = std::move(aRhs);
    mType = TObjectStorePutParams;
    return (*(this));
}

auto RequestParams::operator=(const ObjectStoreGetParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreGetParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetParams()) ObjectStoreGetParams;
    }
    (*(ptr_ObjectStoreGetParams())) = aRhs;
    mType = TObjectStoreGetParams;
    return (*(this));
}

auto RequestParams::operator=(ObjectStoreGetParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreGetParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetParams()) ObjectStoreGetParams;
    }
    (*(ptr_ObjectStoreGetParams())) = std::move(aRhs);
    mType = TObjectStoreGetParams;
    return (*(this));
}

auto RequestParams::operator=(const ObjectStoreGetKeyParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreGetKeyParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyParams()) ObjectStoreGetKeyParams;
    }
    (*(ptr_ObjectStoreGetKeyParams())) = aRhs;
    mType = TObjectStoreGetKeyParams;
    return (*(this));
}

auto RequestParams::operator=(ObjectStoreGetKeyParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreGetKeyParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyParams()) ObjectStoreGetKeyParams;
    }
    (*(ptr_ObjectStoreGetKeyParams())) = std::move(aRhs);
    mType = TObjectStoreGetKeyParams;
    return (*(this));
}

auto RequestParams::operator=(const ObjectStoreGetAllParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreGetAllParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllParams()) ObjectStoreGetAllParams;
    }
    (*(ptr_ObjectStoreGetAllParams())) = aRhs;
    mType = TObjectStoreGetAllParams;
    return (*(this));
}

auto RequestParams::operator=(ObjectStoreGetAllParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreGetAllParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllParams()) ObjectStoreGetAllParams;
    }
    (*(ptr_ObjectStoreGetAllParams())) = std::move(aRhs);
    mType = TObjectStoreGetAllParams;
    return (*(this));
}

auto RequestParams::operator=(const ObjectStoreGetAllKeysParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreGetAllKeysParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysParams()) ObjectStoreGetAllKeysParams;
    }
    (*(ptr_ObjectStoreGetAllKeysParams())) = aRhs;
    mType = TObjectStoreGetAllKeysParams;
    return (*(this));
}

auto RequestParams::operator=(ObjectStoreGetAllKeysParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreGetAllKeysParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysParams()) ObjectStoreGetAllKeysParams;
    }
    (*(ptr_ObjectStoreGetAllKeysParams())) = std::move(aRhs);
    mType = TObjectStoreGetAllKeysParams;
    return (*(this));
}

auto RequestParams::operator=(const ObjectStoreDeleteParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreDeleteParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteParams()) ObjectStoreDeleteParams;
    }
    (*(ptr_ObjectStoreDeleteParams())) = aRhs;
    mType = TObjectStoreDeleteParams;
    return (*(this));
}

auto RequestParams::operator=(ObjectStoreDeleteParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreDeleteParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteParams()) ObjectStoreDeleteParams;
    }
    (*(ptr_ObjectStoreDeleteParams())) = std::move(aRhs);
    mType = TObjectStoreDeleteParams;
    return (*(this));
}

auto RequestParams::operator=(const ObjectStoreClearParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreClearParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreClearParams()) ObjectStoreClearParams;
    }
    (*(ptr_ObjectStoreClearParams())) = aRhs;
    mType = TObjectStoreClearParams;
    return (*(this));
}

auto RequestParams::operator=(ObjectStoreClearParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreClearParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreClearParams()) ObjectStoreClearParams;
    }
    (*(ptr_ObjectStoreClearParams())) = std::move(aRhs);
    mType = TObjectStoreClearParams;
    return (*(this));
}

auto RequestParams::operator=(const ObjectStoreCountParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreCountParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreCountParams()) ObjectStoreCountParams;
    }
    (*(ptr_ObjectStoreCountParams())) = aRhs;
    mType = TObjectStoreCountParams;
    return (*(this));
}

auto RequestParams::operator=(ObjectStoreCountParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TObjectStoreCountParams)) {
        new (mozilla::KnownNotNull, ptr_ObjectStoreCountParams()) ObjectStoreCountParams;
    }
    (*(ptr_ObjectStoreCountParams())) = std::move(aRhs);
    mType = TObjectStoreCountParams;
    return (*(this));
}

auto RequestParams::operator=(const IndexGetParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexGetParams)) {
        new (mozilla::KnownNotNull, ptr_IndexGetParams()) IndexGetParams;
    }
    (*(ptr_IndexGetParams())) = aRhs;
    mType = TIndexGetParams;
    return (*(this));
}

auto RequestParams::operator=(IndexGetParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexGetParams)) {
        new (mozilla::KnownNotNull, ptr_IndexGetParams()) IndexGetParams;
    }
    (*(ptr_IndexGetParams())) = std::move(aRhs);
    mType = TIndexGetParams;
    return (*(this));
}

auto RequestParams::operator=(const IndexGetKeyParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexGetKeyParams)) {
        new (mozilla::KnownNotNull, ptr_IndexGetKeyParams()) IndexGetKeyParams;
    }
    (*(ptr_IndexGetKeyParams())) = aRhs;
    mType = TIndexGetKeyParams;
    return (*(this));
}

auto RequestParams::operator=(IndexGetKeyParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexGetKeyParams)) {
        new (mozilla::KnownNotNull, ptr_IndexGetKeyParams()) IndexGetKeyParams;
    }
    (*(ptr_IndexGetKeyParams())) = std::move(aRhs);
    mType = TIndexGetKeyParams;
    return (*(this));
}

auto RequestParams::operator=(const IndexGetAllParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexGetAllParams)) {
        new (mozilla::KnownNotNull, ptr_IndexGetAllParams()) IndexGetAllParams;
    }
    (*(ptr_IndexGetAllParams())) = aRhs;
    mType = TIndexGetAllParams;
    return (*(this));
}

auto RequestParams::operator=(IndexGetAllParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexGetAllParams)) {
        new (mozilla::KnownNotNull, ptr_IndexGetAllParams()) IndexGetAllParams;
    }
    (*(ptr_IndexGetAllParams())) = std::move(aRhs);
    mType = TIndexGetAllParams;
    return (*(this));
}

auto RequestParams::operator=(const IndexGetAllKeysParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexGetAllKeysParams)) {
        new (mozilla::KnownNotNull, ptr_IndexGetAllKeysParams()) IndexGetAllKeysParams;
    }
    (*(ptr_IndexGetAllKeysParams())) = aRhs;
    mType = TIndexGetAllKeysParams;
    return (*(this));
}

auto RequestParams::operator=(IndexGetAllKeysParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexGetAllKeysParams)) {
        new (mozilla::KnownNotNull, ptr_IndexGetAllKeysParams()) IndexGetAllKeysParams;
    }
    (*(ptr_IndexGetAllKeysParams())) = std::move(aRhs);
    mType = TIndexGetAllKeysParams;
    return (*(this));
}

auto RequestParams::operator=(const IndexCountParams& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexCountParams)) {
        new (mozilla::KnownNotNull, ptr_IndexCountParams()) IndexCountParams;
    }
    (*(ptr_IndexCountParams())) = aRhs;
    mType = TIndexCountParams;
    return (*(this));
}

auto RequestParams::operator=(IndexCountParams&& aRhs) -> RequestParams&
{
    if (MaybeDestroy(TIndexCountParams)) {
        new (mozilla::KnownNotNull, ptr_IndexCountParams()) IndexCountParams;
    }
    (*(ptr_IndexCountParams())) = std::move(aRhs);
    mType = TIndexCountParams;
    return (*(this));
}

auto RequestParams::operator=(RequestParams&& aRhs) -> RequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TObjectStoreAddParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreAddParams()) ObjectStoreAddParams;
            }
            (*(ptr_ObjectStoreAddParams())) = std::move((aRhs).get_ObjectStoreAddParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStorePutParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStorePutParams()) ObjectStorePutParams;
            }
            (*(ptr_ObjectStorePutParams())) = std::move((aRhs).get_ObjectStorePutParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetParams()) ObjectStoreGetParams;
            }
            (*(ptr_ObjectStoreGetParams())) = std::move((aRhs).get_ObjectStoreGetParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetKeyParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetKeyParams()) ObjectStoreGetKeyParams;
            }
            (*(ptr_ObjectStoreGetKeyParams())) = std::move((aRhs).get_ObjectStoreGetKeyParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllParams()) ObjectStoreGetAllParams;
            }
            (*(ptr_ObjectStoreGetAllParams())) = std::move((aRhs).get_ObjectStoreGetAllParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreGetAllKeysParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreGetAllKeysParams()) ObjectStoreGetAllKeysParams;
            }
            (*(ptr_ObjectStoreGetAllKeysParams())) = std::move((aRhs).get_ObjectStoreGetAllKeysParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreDeleteParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreDeleteParams()) ObjectStoreDeleteParams;
            }
            (*(ptr_ObjectStoreDeleteParams())) = std::move((aRhs).get_ObjectStoreDeleteParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreClearParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreClearParams()) ObjectStoreClearParams;
            }
            (*(ptr_ObjectStoreClearParams())) = std::move((aRhs).get_ObjectStoreClearParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TObjectStoreCountParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ObjectStoreCountParams()) ObjectStoreCountParams;
            }
            (*(ptr_ObjectStoreCountParams())) = std::move((aRhs).get_ObjectStoreCountParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexGetParams()) IndexGetParams;
            }
            (*(ptr_IndexGetParams())) = std::move((aRhs).get_IndexGetParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetKeyParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexGetKeyParams()) IndexGetKeyParams;
            }
            (*(ptr_IndexGetKeyParams())) = std::move((aRhs).get_IndexGetKeyParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetAllParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexGetAllParams()) IndexGetAllParams;
            }
            (*(ptr_IndexGetAllParams())) = std::move((aRhs).get_IndexGetAllParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexGetAllKeysParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexGetAllKeysParams()) IndexGetAllKeysParams;
            }
            (*(ptr_IndexGetAllKeysParams())) = std::move((aRhs).get_IndexGetAllKeysParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIndexCountParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IndexCountParams()) IndexCountParams;
            }
            (*(ptr_IndexCountParams())) = std::move((aRhs).get_IndexCountParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::RequestParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::indexedDB::RequestParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'RequestParams'
    (aMsg)->WriteSentinel(615384398);

    switch (type) {
    case union__::TObjectStoreAddParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreAddParams());
            // Sentinel = 'TObjectStoreAddParams'
            (aMsg)->WriteSentinel(1479280678);
            return;
        }
    case union__::TObjectStorePutParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStorePutParams());
            // Sentinel = 'TObjectStorePutParams'
            (aMsg)->WriteSentinel(1504381014);
            return;
        }
    case union__::TObjectStoreGetParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetParams());
            // Sentinel = 'TObjectStoreGetParams'
            (aMsg)->WriteSentinel(1490683965);
            return;
        }
    case union__::TObjectStoreGetKeyParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetKeyParams());
            // Sentinel = 'TObjectStoreGetKeyParams'
            (aMsg)->WriteSentinel(1937705318);
            return;
        }
    case union__::TObjectStoreGetAllParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetAllParams());
            // Sentinel = 'TObjectStoreGetAllParams'
            (aMsg)->WriteSentinel(1929513302);
            return;
        }
    case union__::TObjectStoreGetAllKeysParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreGetAllKeysParams());
            // Sentinel = 'TObjectStoreGetAllKeysParams'
            (aMsg)->WriteSentinel(2620525298);
            return;
        }
    case union__::TObjectStoreDeleteParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreDeleteParams());
            // Sentinel = 'TObjectStoreDeleteParams'
            (aMsg)->WriteSentinel(1944127856);
            return;
        }
    case union__::TObjectStoreClearParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreClearParams());
            // Sentinel = 'TObjectStoreClearParams'
            (aMsg)->WriteSentinel(1782909188);
            return;
        }
    case union__::TObjectStoreCountParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ObjectStoreCountParams());
            // Sentinel = 'TObjectStoreCountParams'
            (aMsg)->WriteSentinel(1802045734);
            return;
        }
    case union__::TIndexGetParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexGetParams());
            // Sentinel = 'TIndexGetParams'
            (aMsg)->WriteSentinel(756418001);
            return;
        }
    case union__::TIndexGetKeyParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexGetKeyParams());
            // Sentinel = 'TIndexGetKeyParams'
            (aMsg)->WriteSentinel(1081542394);
            return;
        }
    case union__::TIndexGetAllParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexGetAllParams());
            // Sentinel = 'TIndexGetAllParams'
            (aMsg)->WriteSentinel(1073350378);
            return;
        }
    case union__::TIndexGetAllKeysParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexGetAllKeysParams());
            // Sentinel = 'TIndexGetAllKeysParams'
            (aMsg)->WriteSentinel(1601833094);
            return;
        }
    case union__::TIndexCountParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IndexCountParams());
            // Sentinel = 'TIndexCountParams'
            (aMsg)->WriteSentinel(986515130);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::indexedDB::RequestParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::indexedDB::RequestParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union RequestParams");
        return false;
    }
    // Sentinel = 'RequestParams'
    if ((!((aMsg)->ReadSentinel(aIter, 615384398)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union RequestParams");
        return false;
    }

    switch (type) {
    case union__::TObjectStoreAddParams:
        {
            mozilla::dom::indexedDB::ObjectStoreAddParams tmp = mozilla::dom::indexedDB::ObjectStoreAddParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreAddParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreAddParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStoreAddParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1479280678)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreAddParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStorePutParams:
        {
            mozilla::dom::indexedDB::ObjectStorePutParams tmp = mozilla::dom::indexedDB::ObjectStorePutParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStorePutParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStorePutParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStorePutParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1504381014)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStorePutParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetParams:
        {
            mozilla::dom::indexedDB::ObjectStoreGetParams tmp = mozilla::dom::indexedDB::ObjectStoreGetParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStoreGetParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1490683965)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetKeyParams:
        {
            mozilla::dom::indexedDB::ObjectStoreGetKeyParams tmp = mozilla::dom::indexedDB::ObjectStoreGetKeyParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetKeyParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetKeyParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStoreGetKeyParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1937705318)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetKeyParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetAllParams:
        {
            mozilla::dom::indexedDB::ObjectStoreGetAllParams tmp = mozilla::dom::indexedDB::ObjectStoreGetAllParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetAllParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetAllParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStoreGetAllParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1929513302)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetAllParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreGetAllKeysParams:
        {
            mozilla::dom::indexedDB::ObjectStoreGetAllKeysParams tmp = mozilla::dom::indexedDB::ObjectStoreGetAllKeysParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreGetAllKeysParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreGetAllKeysParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStoreGetAllKeysParams'
            if ((!((aMsg)->ReadSentinel(aIter, 2620525298)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreGetAllKeysParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreDeleteParams:
        {
            mozilla::dom::indexedDB::ObjectStoreDeleteParams tmp = mozilla::dom::indexedDB::ObjectStoreDeleteParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreDeleteParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreDeleteParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStoreDeleteParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1944127856)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreDeleteParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreClearParams:
        {
            mozilla::dom::indexedDB::ObjectStoreClearParams tmp = mozilla::dom::indexedDB::ObjectStoreClearParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreClearParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreClearParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStoreClearParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1782909188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreClearParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TObjectStoreCountParams:
        {
            mozilla::dom::indexedDB::ObjectStoreCountParams tmp = mozilla::dom::indexedDB::ObjectStoreCountParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ObjectStoreCountParams())))))) {
                aActor->FatalError("Error deserializing variant TObjectStoreCountParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TObjectStoreCountParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1802045734)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TObjectStoreCountParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TIndexGetParams:
        {
            mozilla::dom::indexedDB::IndexGetParams tmp = mozilla::dom::indexedDB::IndexGetParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexGetParams())))))) {
                aActor->FatalError("Error deserializing variant TIndexGetParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TIndexGetParams'
            if ((!((aMsg)->ReadSentinel(aIter, 756418001)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexGetParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TIndexGetKeyParams:
        {
            mozilla::dom::indexedDB::IndexGetKeyParams tmp = mozilla::dom::indexedDB::IndexGetKeyParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexGetKeyParams())))))) {
                aActor->FatalError("Error deserializing variant TIndexGetKeyParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TIndexGetKeyParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1081542394)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexGetKeyParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TIndexGetAllParams:
        {
            mozilla::dom::indexedDB::IndexGetAllParams tmp = mozilla::dom::indexedDB::IndexGetAllParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexGetAllParams())))))) {
                aActor->FatalError("Error deserializing variant TIndexGetAllParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TIndexGetAllParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1073350378)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexGetAllParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TIndexGetAllKeysParams:
        {
            mozilla::dom::indexedDB::IndexGetAllKeysParams tmp = mozilla::dom::indexedDB::IndexGetAllKeysParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexGetAllKeysParams())))))) {
                aActor->FatalError("Error deserializing variant TIndexGetAllKeysParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TIndexGetAllKeysParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1601833094)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexGetAllKeysParams of union RequestParams");
                return false;
            }
            return true;
        }
    case union__::TIndexCountParams:
        {
            mozilla::dom::indexedDB::IndexCountParams tmp = mozilla::dom::indexedDB::IndexCountParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IndexCountParams())))))) {
                aActor->FatalError("Error deserializing variant TIndexCountParams of union RequestParams");
                return false;
            }
            // Sentinel = 'TIndexCountParams'
            if ((!((aMsg)->ReadSentinel(aIter, 986515130)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIndexCountParams of union RequestParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct LoggingInfo|
//
namespace mozilla {
namespace dom {
namespace indexedDB {
auto LoggingInfo::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(LoggingInfo, nextRequestSerialNumber_) - offsetof(LoggingInfo, nextTransactionSerialNumber_)) == 16,
        "Bad assumptions about field layout!");
}

} // namespace indexedDB
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::LoggingInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).backgroundChildLoggingId());
    // Sentinel = 'backgroundChildLoggingId'
    (aMsg)->WriteSentinel(2010253689);
    (aMsg)->WriteBytes((&((aVar).nextTransactionSerialNumber())), 24);
    // Sentinel = 'nextTransactionSerialNumber | nextVersionChangeTransactionSerialNumber | nextRequestSerialNumber'
    (aMsg)->WriteSentinel(1100293682);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::LoggingInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->backgroundChildLoggingId())))))) {
        aActor->FatalError("Error deserializing 'backgroundChildLoggingId' (nsID) member of 'LoggingInfo'");
        return false;
    }
    // Sentinel = 'backgroundChildLoggingId'
    if ((!((aMsg)->ReadSentinel(aIter, 2010253689)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'backgroundChildLoggingId' (nsID) member of 'LoggingInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->nextTransactionSerialNumber())), 24)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'nextTransactionSerialNumber | nextVersionChangeTransactionSerialNumber | nextRequestSerialNumber'
    if ((!((aMsg)->ReadSentinel(aIter, 1100293682)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
