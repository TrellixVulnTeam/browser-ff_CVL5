//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/extensions/PStreamFilterChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/extensions/StreamFilterChild.h"

#include "mozilla/ipc/PBackgroundChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace extensions {


auto PStreamFilterChild::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PStreamFilterChild::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PStreamFilterChild::EnteredCxxStack() -> void
{
}

auto PStreamFilterChild::ExitedCxxStack() -> void
{
}

auto PStreamFilterChild::EnteredCall() -> void
{
}

auto PStreamFilterChild::ExitedCall() -> void
{
}

MOZ_IMPLICIT PStreamFilterChild::PStreamFilterChild() :
    mozilla::ipc::IToplevelProtocol("PStreamFilterChild", PStreamFilterMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PStreamFilterChild);
}

PStreamFilterChild::~PStreamFilterChild()
{
    MOZ_COUNT_DTOR(PStreamFilterChild);
}

auto PStreamFilterChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PStreamFilterChild::SendWrite(const nsTArray<uint8_t>& data) -> bool
{
    IPC::Message* msg__ = PStreamFilter::Msg_Write(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PStreamFilterChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PStreamFilter::Msg_Write", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PStreamFilterChild::SendFlushedData() -> bool
{
    IPC::Message* msg__ = PStreamFilter::Msg_FlushedData(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PStreamFilterChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PStreamFilter::Msg_FlushedData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PStreamFilterChild::SendSuspend() -> bool
{
    IPC::Message* msg__ = PStreamFilter::Msg_Suspend(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PStreamFilterChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PStreamFilter::Msg_Suspend", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PStreamFilterChild::SendResume() -> bool
{
    IPC::Message* msg__ = PStreamFilter::Msg_Resume(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PStreamFilterChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PStreamFilter::Msg_Resume", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PStreamFilterChild::SendClose() -> bool
{
    IPC::Message* msg__ = PStreamFilter::Msg_Close(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PStreamFilterChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PStreamFilter::Msg_Close", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PStreamFilterChild::SendDisconnect() -> bool
{
    IPC::Message* msg__ = PStreamFilter::Msg_Disconnect(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PStreamFilterChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PStreamFilter::Msg_Disconnect", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PStreamFilterChild::SendDestroy() -> bool
{
    IPC::Message* msg__ = PStreamFilter::Msg_Destroy(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PStreamFilterChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PStreamFilter::Msg_Destroy", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PStreamFilterChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PStreamFilterChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PStreamFilterChild::OnMessageReceived(const Message& msg__) -> PStreamFilterChild::Result
{
    switch (msg__.type()) {
    case PStreamFilter::Msg_Resumed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PStreamFilterChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PStreamFilter::Msg_Resumed", OTHER);

            if ((!((static_cast<StreamFilterChild*>(this))->RecvResumed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStreamFilter::Msg_Suspended__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PStreamFilterChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PStreamFilter::Msg_Suspended", OTHER);

            if ((!((static_cast<StreamFilterChild*>(this))->RecvSuspended()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStreamFilter::Msg_Closed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PStreamFilterChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PStreamFilter::Msg_Closed", OTHER);

            if ((!((static_cast<StreamFilterChild*>(this))->RecvClosed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStreamFilter::Msg_Error__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PStreamFilterChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PStreamFilter::Msg_Error", OTHER);

            PickleIterator iter__{msg__};
            nsCString error{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(error)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'error'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107741739)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<StreamFilterChild*>(this))->RecvError(std::move(error))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStreamFilter::Msg_FlushData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PStreamFilterChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PStreamFilter::Msg_FlushData", OTHER);

            if ((!((static_cast<StreamFilterChild*>(this))->RecvFlushData()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStreamFilter::Msg_StartRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PStreamFilterChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PStreamFilter::Msg_StartRequest", OTHER);

            if ((!((static_cast<StreamFilterChild*>(this))->RecvStartRequest()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStreamFilter::Msg_Data__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PStreamFilterChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PStreamFilter::Msg_Data", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<uint8_t> data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint8_t[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<StreamFilterChild*>(this))->RecvData(std::move(data))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStreamFilter::Msg_StopRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamFilterChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PStreamFilterChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PStreamFilter::Msg_StopRequest", OTHER);

            PickleIterator iter__{msg__};
            nsresult aStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 186712806)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<StreamFilterChild*>(this))->RecvStopRequest(std::move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PStreamFilterChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PStreamFilterChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PStreamFilterChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PStreamFilterChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PStreamFilterChild::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PStreamFilterChild::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PStreamFilterChild::ClearSubtree() -> void
{
}



} // namespace extensions
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::extensions::PStreamFilterChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::extensions::PStreamFilterChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PStreamFilter", PStreamFilterMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::extensions::PStreamFilterChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
