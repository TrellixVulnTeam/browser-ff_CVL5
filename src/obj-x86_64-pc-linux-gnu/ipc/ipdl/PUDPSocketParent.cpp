//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PUDPSocketParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/network/UDPSocketParent.h"
#include "mozilla/ipc/IPCCore.h"
#include "mozilla/net/DNS.h"
#include "mozilla/net/NeckoMessageUtils.h"
#include "prio.h"

#include "mozilla/net/PNeckoParent.h"
#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PUDPSocketParent::PUDPSocketParent() :
    mozilla::ipc::IProtocol(PUDPSocketMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PUDPSocketParent);
}

PUDPSocketParent::~PUDPSocketParent()
{
    MOZ_COUNT_DTOR(PUDPSocketParent);
}

auto PUDPSocketParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PUDPSocketParent::SendCallbackOpened(const UDPAddressInfo& addressInfo) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_CallbackOpened(Id());

    WriteIPDLParam(msg__, this, addressInfo);
    // Sentinel = 'addressInfo'
    (msg__)->WriteSentinel(445580403);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackOpened", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketParent::SendCallbackConnected(const UDPAddressInfo& addressInfo) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_CallbackConnected(Id());

    WriteIPDLParam(msg__, this, addressInfo);
    // Sentinel = 'addressInfo'
    (msg__)->WriteSentinel(445580403);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackConnected", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketParent::SendCallbackClosed() -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_CallbackClosed(Id());





    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackClosed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketParent::SendCallbackReceivedData(
        const UDPAddressInfo& addressInfo,
        const nsTArray<uint8_t>& data) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_CallbackReceivedData(Id());

    WriteIPDLParam(msg__, this, addressInfo);
    // Sentinel = 'addressInfo'
    (msg__)->WriteSentinel(445580403);
    WriteIPDLParam(msg__, this, data);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(67109275);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackReceivedData", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketParent::SendCallbackError(
        const nsCString& message,
        const nsCString& filename,
        const uint32_t& lineNumber) -> bool
{
    IPC::Message* msg__ = PUDPSocket::Msg_CallbackError(Id());

    WriteIPDLParam(msg__, this, message);
    // Sentinel = 'message'
    (msg__)->WriteSentinel(197198566);
    WriteIPDLParam(msg__, this, filename);
    // Sentinel = 'filename'
    (msg__)->WriteSentinel(246547266);
    WriteIPDLParam(msg__, this, lineNumber);
    // Sentinel = 'lineNumber'
    (msg__)->WriteSentinel(374932498);




    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg_CallbackError", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PUDPSocketParent::Send__delete__(PUDPSocketParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PUDPSocket::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PUDPSocketParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PUDPSocket::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PUDPSocketMsgStart, actor);
    return sendok__;
}

auto PUDPSocketParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PUDPSocketParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PUDPSocketParent::OnMessageReceived(const Message& msg__) -> PUDPSocketParent::Result
{
    switch (msg__.type()) {
    case PUDPSocket::Msg_Bind__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_Bind", OTHER);

            PickleIterator iter__{msg__};
            UDPAddressInfo addressInfo{};
            bool addressReuse{};
            bool loopback{};
            uint32_t recvBufferSize{};
            uint32_t sendBufferSize{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addressInfo)))))) {
                FatalError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            // Sentinel = 'addressInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 445580403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addressReuse)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'addressReuse'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 530908395)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loopback)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'loopback'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 253166412)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(recvBufferSize)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'recvBufferSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 709100966)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sendBufferSize)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'sendBufferSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 705693088)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketParent*>(this))->RecvBind(std::move(addressInfo), std::move(addressReuse), std::move(loopback), std::move(recvBufferSize), std::move(sendBufferSize))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_Connect__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_Connect", OTHER);

            PickleIterator iter__{msg__};
            UDPAddressInfo addressInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addressInfo)))))) {
                FatalError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            // Sentinel = 'addressInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 445580403)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UDPAddressInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketParent*>(this))->RecvConnect(std::move(addressInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_OutgoingData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_OutgoingData", OTHER);

            PickleIterator iter__{msg__};
            UDPData data{};
            UDPSocketAddr addr{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'UDPData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UDPData'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(addr)))))) {
                FatalError("Error deserializing 'UDPSocketAddr'");
                return MsgValueError;
            }
            // Sentinel = 'addr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 65929628)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'UDPSocketAddr'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketParent*>(this))->RecvOutgoingData(std::move(data), std::move(addr))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_JoinMulticast__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_JoinMulticast", OTHER);

            PickleIterator iter__{msg__};
            nsCString multicastAddress{};
            nsCString iface{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(multicastAddress)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'multicastAddress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 948700829)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(iface)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'iface'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 100139513)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketParent*>(this))->RecvJoinMulticast(std::move(multicastAddress), std::move(iface))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_LeaveMulticast__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_LeaveMulticast", OTHER);

            PickleIterator iter__{msg__};
            nsCString multicastAddress{};
            nsCString iface{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(multicastAddress)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'multicastAddress'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 948700829)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(iface)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'iface'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 100139513)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<mozilla::dom::UDPSocketParent*>(this))->RecvLeaveMulticast(std::move(multicastAddress), std::move(iface))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_Close", OTHER);

            if ((!((static_cast<mozilla::dom::UDPSocketParent*>(this))->RecvClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Msg_RequestDelete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PUDPSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PUDPSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PUDPSocket::Msg_RequestDelete", OTHER);

            if ((!((static_cast<mozilla::dom::UDPSocketParent*>(this))->RecvRequestDelete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PUDPSocket::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PUDPSocketParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PUDPSocketParent::Result
{
    return MsgNotKnown;
}

auto PUDPSocketParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PUDPSocketParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PUDPSocketParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PUDPSocketParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PUDPSocketParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PUDPSocket", PUDPSocketMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PUDPSocketParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
