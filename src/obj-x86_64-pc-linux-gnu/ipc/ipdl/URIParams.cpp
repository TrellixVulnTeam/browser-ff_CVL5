//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/URIParams.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SimpleURIParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::SimpleURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).scheme());
    // Sentinel = 'scheme'
    (aMsg)->WriteSentinel(146080374);
    WriteIPDLParam(aMsg, aActor, (aVar).path());
    // Sentinel = 'path'
    (aMsg)->WriteSentinel(70713774);
    WriteIPDLParam(aMsg, aActor, (aVar).ref());
    // Sentinel = 'ref'
    (aMsg)->WriteSentinel(42533182);
    WriteIPDLParam(aMsg, aActor, (aVar).query());
    // Sentinel = 'query'
    (aMsg)->WriteSentinel(110756407);
}

auto IPDLParamTraits<mozilla::ipc::SimpleURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scheme())))))) {
        aActor->FatalError("Error deserializing 'scheme' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'scheme'
    if ((!((aMsg)->ReadSentinel(aIter, 146080374)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scheme' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->path())))))) {
        aActor->FatalError("Error deserializing 'path' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'path'
    if ((!((aMsg)->ReadSentinel(aIter, 70713774)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'path' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ref())))))) {
        aActor->FatalError("Error deserializing 'ref' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'ref'
    if ((!((aMsg)->ReadSentinel(aIter, 42533182)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ref' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->query())))))) {
        aActor->FatalError("Error deserializing 'query' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'query'
    if ((!((aMsg)->ReadSentinel(aIter, 110756407)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'query' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DefaultURIParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::DefaultURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).spec());
    // Sentinel = 'spec'
    (aMsg)->WriteSentinel(72155564);
}

auto IPDLParamTraits<mozilla::ipc::DefaultURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->spec())))))) {
        aActor->FatalError("Error deserializing 'spec' (nsCString) member of 'DefaultURIParams'");
        return false;
    }
    // Sentinel = 'spec'
    if ((!((aMsg)->ReadSentinel(aIter, 72155564)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'spec' (nsCString) member of 'DefaultURIParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StandardURLSegment|
//
namespace mozilla {
namespace ipc {
auto StandardURLSegment::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(StandardURLSegment, length_) - offsetof(StandardURLSegment, position_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::StandardURLSegment>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).position())), 8);
    // Sentinel = 'position | length'
    (aMsg)->WriteSentinel(1030424244);
}

auto IPDLParamTraits<mozilla::ipc::StandardURLSegment>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->position())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'position | length'
    if ((!((aMsg)->ReadSentinel(aIter, 1030424244)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StandardURLParams|
//
namespace mozilla {
namespace ipc {
auto StandardURLParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(StandardURLParams, defaultPort_) - offsetof(StandardURLParams, urlType_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::StandardURLParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).spec());
    // Sentinel = 'spec'
    (aMsg)->WriteSentinel(72155564);
    WriteIPDLParam(aMsg, aActor, (aVar).scheme());
    // Sentinel = 'scheme'
    (aMsg)->WriteSentinel(146080374);
    WriteIPDLParam(aMsg, aActor, (aVar).authority());
    // Sentinel = 'authority'
    (aMsg)->WriteSentinel(323290090);
    WriteIPDLParam(aMsg, aActor, (aVar).username());
    // Sentinel = 'username'
    (aMsg)->WriteSentinel(260506465);
    WriteIPDLParam(aMsg, aActor, (aVar).password());
    // Sentinel = 'password'
    (aMsg)->WriteSentinel(261161844);
    WriteIPDLParam(aMsg, aActor, (aVar).host());
    // Sentinel = 'host'
    (aMsg)->WriteSentinel(72024511);
    WriteIPDLParam(aMsg, aActor, (aVar).path());
    // Sentinel = 'path'
    (aMsg)->WriteSentinel(70713774);
    WriteIPDLParam(aMsg, aActor, (aVar).filePath());
    // Sentinel = 'filePath'
    (aMsg)->WriteSentinel(239797038);
    WriteIPDLParam(aMsg, aActor, (aVar).directory());
    // Sentinel = 'directory'
    (aMsg)->WriteSentinel(314180566);
    WriteIPDLParam(aMsg, aActor, (aVar).baseName());
    // Sentinel = 'baseName'
    (aMsg)->WriteSentinel(235143965);
    WriteIPDLParam(aMsg, aActor, (aVar).extension());
    // Sentinel = 'extension'
    (aMsg)->WriteSentinel(324600798);
    WriteIPDLParam(aMsg, aActor, (aVar).query());
    // Sentinel = 'query'
    (aMsg)->WriteSentinel(110756407);
    WriteIPDLParam(aMsg, aActor, (aVar).ref());
    // Sentinel = 'ref'
    (aMsg)->WriteSentinel(42533182);
    WriteIPDLParam(aMsg, aActor, (aVar).supportsFileURL());
    // Sentinel = 'supportsFileURL'
    (aMsg)->WriteSentinel(856032772);
    WriteIPDLParam(aMsg, aActor, (aVar).isSubstituting());
    // Sentinel = 'isSubstituting'
    (aMsg)->WriteSentinel(742065650);
    (aMsg)->WriteBytes((&((aVar).urlType())), 12);
    // Sentinel = 'urlType | port | defaultPort'
    (aMsg)->WriteSentinel(2589395645);
}

auto IPDLParamTraits<mozilla::ipc::StandardURLParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->spec())))))) {
        aActor->FatalError("Error deserializing 'spec' (nsCString) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'spec'
    if ((!((aMsg)->ReadSentinel(aIter, 72155564)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'spec' (nsCString) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scheme())))))) {
        aActor->FatalError("Error deserializing 'scheme' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'scheme'
    if ((!((aMsg)->ReadSentinel(aIter, 146080374)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scheme' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->authority())))))) {
        aActor->FatalError("Error deserializing 'authority' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'authority'
    if ((!((aMsg)->ReadSentinel(aIter, 323290090)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'authority' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->username())))))) {
        aActor->FatalError("Error deserializing 'username' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'username'
    if ((!((aMsg)->ReadSentinel(aIter, 260506465)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'username' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->password())))))) {
        aActor->FatalError("Error deserializing 'password' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'password'
    if ((!((aMsg)->ReadSentinel(aIter, 261161844)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'password' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->host())))))) {
        aActor->FatalError("Error deserializing 'host' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'host'
    if ((!((aMsg)->ReadSentinel(aIter, 72024511)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'host' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->path())))))) {
        aActor->FatalError("Error deserializing 'path' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'path'
    if ((!((aMsg)->ReadSentinel(aIter, 70713774)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'path' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filePath())))))) {
        aActor->FatalError("Error deserializing 'filePath' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'filePath'
    if ((!((aMsg)->ReadSentinel(aIter, 239797038)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filePath' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->directory())))))) {
        aActor->FatalError("Error deserializing 'directory' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'directory'
    if ((!((aMsg)->ReadSentinel(aIter, 314180566)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'directory' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseName())))))) {
        aActor->FatalError("Error deserializing 'baseName' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'baseName'
    if ((!((aMsg)->ReadSentinel(aIter, 235143965)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseName' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->extension())))))) {
        aActor->FatalError("Error deserializing 'extension' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'extension'
    if ((!((aMsg)->ReadSentinel(aIter, 324600798)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'extension' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->query())))))) {
        aActor->FatalError("Error deserializing 'query' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'query'
    if ((!((aMsg)->ReadSentinel(aIter, 110756407)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'query' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ref())))))) {
        aActor->FatalError("Error deserializing 'ref' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'ref'
    if ((!((aMsg)->ReadSentinel(aIter, 42533182)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ref' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->supportsFileURL())))))) {
        aActor->FatalError("Error deserializing 'supportsFileURL' (bool) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'supportsFileURL'
    if ((!((aMsg)->ReadSentinel(aIter, 856032772)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'supportsFileURL' (bool) member of 'StandardURLParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isSubstituting())))))) {
        aActor->FatalError("Error deserializing 'isSubstituting' (bool) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'isSubstituting'
    if ((!((aMsg)->ReadSentinel(aIter, 742065650)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isSubstituting' (bool) member of 'StandardURLParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->urlType())), 12)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'urlType | port | defaultPort'
    if ((!((aMsg)->ReadSentinel(aIter, 2589395645)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct JARURIParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::JARURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).jarFile());
    // Sentinel = 'jarFile'
    (aMsg)->WriteSentinel(184353470);
    WriteIPDLParam(aMsg, aActor, (aVar).jarEntry());
    // Sentinel = 'jarEntry'
    (aMsg)->WriteSentinel(242549584);
    WriteIPDLParam(aMsg, aActor, (aVar).charset());
    // Sentinel = 'charset'
    (aMsg)->WriteSentinel(191890155);
}

auto IPDLParamTraits<mozilla::ipc::JARURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->jarFile())))))) {
        aActor->FatalError("Error deserializing 'jarFile' (URIParams) member of 'JARURIParams'");
        return false;
    }
    // Sentinel = 'jarFile'
    if ((!((aMsg)->ReadSentinel(aIter, 184353470)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'jarFile' (URIParams) member of 'JARURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->jarEntry())))))) {
        aActor->FatalError("Error deserializing 'jarEntry' (URIParams) member of 'JARURIParams'");
        return false;
    }
    // Sentinel = 'jarEntry'
    if ((!((aMsg)->ReadSentinel(aIter, 242549584)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'jarEntry' (URIParams) member of 'JARURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->charset())))))) {
        aActor->FatalError("Error deserializing 'charset' (nsCString) member of 'JARURIParams'");
        return false;
    }
    // Sentinel = 'charset'
    if ((!((aMsg)->ReadSentinel(aIter, 191890155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'charset' (nsCString) member of 'JARURIParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IconURIParams|
//
namespace mozilla {
namespace ipc {
auto IconURIParams::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IconURIParams, iconState_) - offsetof(IconURIParams, size_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::IconURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uri());
    // Sentinel = 'uri'
    (aMsg)->WriteSentinel(45023569);
    WriteIPDLParam(aMsg, aActor, (aVar).contentType());
    // Sentinel = 'contentType'
    (aMsg)->WriteSentinel(465241246);
    WriteIPDLParam(aMsg, aActor, (aVar).fileName());
    // Sentinel = 'fileName'
    (aMsg)->WriteSentinel(238158626);
    WriteIPDLParam(aMsg, aActor, (aVar).stockIcon());
    // Sentinel = 'stockIcon'
    (aMsg)->WriteSentinel(314508206);
    (aMsg)->WriteBytes((&((aVar).size())), 12);
    // Sentinel = 'size | iconSize | iconState'
    (aMsg)->WriteSentinel(2358643234);
}

auto IPDLParamTraits<mozilla::ipc::IconURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uri())))))) {
        aActor->FatalError("Error deserializing 'uri' (URIParams?) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'uri'
    if ((!((aMsg)->ReadSentinel(aIter, 45023569)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uri' (URIParams?) member of 'IconURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentType())))))) {
        aActor->FatalError("Error deserializing 'contentType' (nsCString) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'contentType'
    if ((!((aMsg)->ReadSentinel(aIter, 465241246)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentType' (nsCString) member of 'IconURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fileName())))))) {
        aActor->FatalError("Error deserializing 'fileName' (nsCString) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'fileName'
    if ((!((aMsg)->ReadSentinel(aIter, 238158626)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fileName' (nsCString) member of 'IconURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->stockIcon())))))) {
        aActor->FatalError("Error deserializing 'stockIcon' (nsCString) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'stockIcon'
    if ((!((aMsg)->ReadSentinel(aIter, 314508206)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'stockIcon' (nsCString) member of 'IconURIParams'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->size())), 12)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'size | iconSize | iconState'
    if ((!((aMsg)->ReadSentinel(aIter, 2358643234)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct NullPrincipalURIParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::NullPrincipalURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::ipc::NullPrincipalURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct HostObjectURIParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::HostObjectURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).simpleParams());
    // Sentinel = 'simpleParams'
    (aMsg)->WriteSentinel(541394159);
    WriteIPDLParam(aMsg, aActor, (aVar).revoked());
    // Sentinel = 'revoked'
    (aMsg)->WriteSentinel(201065201);
}

auto IPDLParamTraits<mozilla::ipc::HostObjectURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->simpleParams())))))) {
        aActor->FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'HostObjectURIParams'");
        return false;
    }
    // Sentinel = 'simpleParams'
    if ((!((aMsg)->ReadSentinel(aIter, 541394159)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'HostObjectURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->revoked())))))) {
        aActor->FatalError("Error deserializing 'revoked' (bool) member of 'HostObjectURIParams'");
        return false;
    }
    // Sentinel = 'revoked'
    if ((!((aMsg)->ReadSentinel(aIter, 201065201)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'revoked' (bool) member of 'HostObjectURIParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union URIParams|
//
namespace mozilla {
namespace ipc {
auto URIParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TSimpleURIParams:
        {
            (ptr_SimpleURIParams())->~SimpleURIParams__tdef();
            break;
        }
    case TStandardURLParams:
        {
            (ptr_StandardURLParams())->~StandardURLParams__tdef();
            break;
        }
    case TJARURIParams:
        {
            delete ptr_JARURIParams();
            break;
        }
    case TIconURIParams:
        {
            delete ptr_IconURIParams();
            break;
        }
    case TNullPrincipalURIParams:
        {
            (ptr_NullPrincipalURIParams())->~NullPrincipalURIParams__tdef();
            break;
        }
    case TJSURIParams:
        {
            delete ptr_JSURIParams();
            break;
        }
    case TSimpleNestedURIParams:
        {
            delete ptr_SimpleNestedURIParams();
            break;
        }
    case THostObjectURIParams:
        {
            (ptr_HostObjectURIParams())->~HostObjectURIParams__tdef();
            break;
        }
    case TDefaultURIParams:
        {
            (ptr_DefaultURIParams())->~DefaultURIParams__tdef();
            break;
        }
    case TNestedAboutURIParams:
        {
            delete ptr_NestedAboutURIParams();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT URIParams::URIParams(const SimpleURIParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_SimpleURIParams()) SimpleURIParams(aOther);
    mType = TSimpleURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(SimpleURIParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SimpleURIParams()) SimpleURIParams(std::move(aOther));
    mType = TSimpleURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const StandardURLParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_StandardURLParams()) StandardURLParams(aOther);
    mType = TStandardURLParams;
}

MOZ_IMPLICIT URIParams::URIParams(StandardURLParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StandardURLParams()) StandardURLParams(std::move(aOther));
    mType = TStandardURLParams;
}

MOZ_IMPLICIT URIParams::URIParams(const JARURIParams& aOther)
{
    ptr_JARURIParams() = new JARURIParams(aOther);
    mType = TJARURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(JARURIParams&& aOther)
{
    ptr_JARURIParams() = new JARURIParams(std::move(aOther));
    mType = TJARURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const IconURIParams& aOther)
{
    ptr_IconURIParams() = new IconURIParams(aOther);
    mType = TIconURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(IconURIParams&& aOther)
{
    ptr_IconURIParams() = new IconURIParams(std::move(aOther));
    mType = TIconURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const NullPrincipalURIParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_NullPrincipalURIParams()) NullPrincipalURIParams(aOther);
    mType = TNullPrincipalURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(NullPrincipalURIParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_NullPrincipalURIParams()) NullPrincipalURIParams(std::move(aOther));
    mType = TNullPrincipalURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const JSURIParams& aOther)
{
    ptr_JSURIParams() = new JSURIParams(aOther);
    mType = TJSURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(JSURIParams&& aOther)
{
    ptr_JSURIParams() = new JSURIParams(std::move(aOther));
    mType = TJSURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const SimpleNestedURIParams& aOther)
{
    ptr_SimpleNestedURIParams() = new SimpleNestedURIParams(aOther);
    mType = TSimpleNestedURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(SimpleNestedURIParams&& aOther)
{
    ptr_SimpleNestedURIParams() = new SimpleNestedURIParams(std::move(aOther));
    mType = TSimpleNestedURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const HostObjectURIParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_HostObjectURIParams()) HostObjectURIParams(aOther);
    mType = THostObjectURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(HostObjectURIParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_HostObjectURIParams()) HostObjectURIParams(std::move(aOther));
    mType = THostObjectURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const DefaultURIParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_DefaultURIParams()) DefaultURIParams(aOther);
    mType = TDefaultURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(DefaultURIParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_DefaultURIParams()) DefaultURIParams(std::move(aOther));
    mType = TDefaultURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const NestedAboutURIParams& aOther)
{
    ptr_NestedAboutURIParams() = new NestedAboutURIParams(aOther);
    mType = TNestedAboutURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(NestedAboutURIParams&& aOther)
{
    ptr_NestedAboutURIParams() = new NestedAboutURIParams(std::move(aOther));
    mType = TNestedAboutURIParams;
}

MOZ_IMPLICIT URIParams::URIParams(const URIParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TSimpleURIParams:
        {
            new (mozilla::KnownNotNull, ptr_SimpleURIParams()) SimpleURIParams((aOther).get_SimpleURIParams());
            break;
        }
    case TStandardURLParams:
        {
            new (mozilla::KnownNotNull, ptr_StandardURLParams()) StandardURLParams((aOther).get_StandardURLParams());
            break;
        }
    case TJARURIParams:
        {
            ptr_JARURIParams() = new JARURIParams((aOther).get_JARURIParams());
            break;
        }
    case TIconURIParams:
        {
            ptr_IconURIParams() = new IconURIParams((aOther).get_IconURIParams());
            break;
        }
    case TNullPrincipalURIParams:
        {
            new (mozilla::KnownNotNull, ptr_NullPrincipalURIParams()) NullPrincipalURIParams((aOther).get_NullPrincipalURIParams());
            break;
        }
    case TJSURIParams:
        {
            ptr_JSURIParams() = new JSURIParams((aOther).get_JSURIParams());
            break;
        }
    case TSimpleNestedURIParams:
        {
            ptr_SimpleNestedURIParams() = new SimpleNestedURIParams((aOther).get_SimpleNestedURIParams());
            break;
        }
    case THostObjectURIParams:
        {
            new (mozilla::KnownNotNull, ptr_HostObjectURIParams()) HostObjectURIParams((aOther).get_HostObjectURIParams());
            break;
        }
    case TDefaultURIParams:
        {
            new (mozilla::KnownNotNull, ptr_DefaultURIParams()) DefaultURIParams((aOther).get_DefaultURIParams());
            break;
        }
    case TNestedAboutURIParams:
        {
            ptr_NestedAboutURIParams() = new NestedAboutURIParams((aOther).get_NestedAboutURIParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT URIParams::URIParams(URIParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TSimpleURIParams:
        {
            new (mozilla::KnownNotNull, ptr_SimpleURIParams()) SimpleURIParams(std::move((aOther).get_SimpleURIParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStandardURLParams:
        {
            new (mozilla::KnownNotNull, ptr_StandardURLParams()) StandardURLParams(std::move((aOther).get_StandardURLParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TJARURIParams:
        {
            ptr_JARURIParams() = (aOther).ptr_JARURIParams();
            break;
        }
    case TIconURIParams:
        {
            ptr_IconURIParams() = (aOther).ptr_IconURIParams();
            break;
        }
    case TNullPrincipalURIParams:
        {
            new (mozilla::KnownNotNull, ptr_NullPrincipalURIParams()) NullPrincipalURIParams(std::move((aOther).get_NullPrincipalURIParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TJSURIParams:
        {
            ptr_JSURIParams() = (aOther).ptr_JSURIParams();
            break;
        }
    case TSimpleNestedURIParams:
        {
            ptr_SimpleNestedURIParams() = (aOther).ptr_SimpleNestedURIParams();
            break;
        }
    case THostObjectURIParams:
        {
            new (mozilla::KnownNotNull, ptr_HostObjectURIParams()) HostObjectURIParams(std::move((aOther).get_HostObjectURIParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TDefaultURIParams:
        {
            new (mozilla::KnownNotNull, ptr_DefaultURIParams()) DefaultURIParams(std::move((aOther).get_DefaultURIParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TNestedAboutURIParams:
        {
            ptr_NestedAboutURIParams() = (aOther).ptr_NestedAboutURIParams();
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

URIParams::~URIParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto URIParams::operator=(const SimpleURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TSimpleURIParams)) {
        new (mozilla::KnownNotNull, ptr_SimpleURIParams()) SimpleURIParams;
    }
    (*(ptr_SimpleURIParams())) = aRhs;
    mType = TSimpleURIParams;
    return (*(this));
}

auto URIParams::operator=(SimpleURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TSimpleURIParams)) {
        new (mozilla::KnownNotNull, ptr_SimpleURIParams()) SimpleURIParams;
    }
    (*(ptr_SimpleURIParams())) = std::move(aRhs);
    mType = TSimpleURIParams;
    return (*(this));
}

auto URIParams::operator=(const StandardURLParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TStandardURLParams)) {
        new (mozilla::KnownNotNull, ptr_StandardURLParams()) StandardURLParams;
    }
    (*(ptr_StandardURLParams())) = aRhs;
    mType = TStandardURLParams;
    return (*(this));
}

auto URIParams::operator=(StandardURLParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TStandardURLParams)) {
        new (mozilla::KnownNotNull, ptr_StandardURLParams()) StandardURLParams;
    }
    (*(ptr_StandardURLParams())) = std::move(aRhs);
    mType = TStandardURLParams;
    return (*(this));
}

auto URIParams::operator=(const JARURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TJARURIParams)) {
        ptr_JARURIParams() = new JARURIParams;
    }
    (*(ptr_JARURIParams())) = aRhs;
    mType = TJARURIParams;
    return (*(this));
}

auto URIParams::operator=(JARURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TJARURIParams)) {
        ptr_JARURIParams() = new JARURIParams;
    }
    (*(ptr_JARURIParams())) = std::move(aRhs);
    mType = TJARURIParams;
    return (*(this));
}

auto URIParams::operator=(const IconURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TIconURIParams)) {
        ptr_IconURIParams() = new IconURIParams;
    }
    (*(ptr_IconURIParams())) = aRhs;
    mType = TIconURIParams;
    return (*(this));
}

auto URIParams::operator=(IconURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TIconURIParams)) {
        ptr_IconURIParams() = new IconURIParams;
    }
    (*(ptr_IconURIParams())) = std::move(aRhs);
    mType = TIconURIParams;
    return (*(this));
}

auto URIParams::operator=(const NullPrincipalURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TNullPrincipalURIParams)) {
        new (mozilla::KnownNotNull, ptr_NullPrincipalURIParams()) NullPrincipalURIParams;
    }
    (*(ptr_NullPrincipalURIParams())) = aRhs;
    mType = TNullPrincipalURIParams;
    return (*(this));
}

auto URIParams::operator=(NullPrincipalURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TNullPrincipalURIParams)) {
        new (mozilla::KnownNotNull, ptr_NullPrincipalURIParams()) NullPrincipalURIParams;
    }
    (*(ptr_NullPrincipalURIParams())) = std::move(aRhs);
    mType = TNullPrincipalURIParams;
    return (*(this));
}

auto URIParams::operator=(const JSURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TJSURIParams)) {
        ptr_JSURIParams() = new JSURIParams;
    }
    (*(ptr_JSURIParams())) = aRhs;
    mType = TJSURIParams;
    return (*(this));
}

auto URIParams::operator=(JSURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TJSURIParams)) {
        ptr_JSURIParams() = new JSURIParams;
    }
    (*(ptr_JSURIParams())) = std::move(aRhs);
    mType = TJSURIParams;
    return (*(this));
}

auto URIParams::operator=(const SimpleNestedURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TSimpleNestedURIParams)) {
        ptr_SimpleNestedURIParams() = new SimpleNestedURIParams;
    }
    (*(ptr_SimpleNestedURIParams())) = aRhs;
    mType = TSimpleNestedURIParams;
    return (*(this));
}

auto URIParams::operator=(SimpleNestedURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TSimpleNestedURIParams)) {
        ptr_SimpleNestedURIParams() = new SimpleNestedURIParams;
    }
    (*(ptr_SimpleNestedURIParams())) = std::move(aRhs);
    mType = TSimpleNestedURIParams;
    return (*(this));
}

auto URIParams::operator=(const HostObjectURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(THostObjectURIParams)) {
        new (mozilla::KnownNotNull, ptr_HostObjectURIParams()) HostObjectURIParams;
    }
    (*(ptr_HostObjectURIParams())) = aRhs;
    mType = THostObjectURIParams;
    return (*(this));
}

auto URIParams::operator=(HostObjectURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(THostObjectURIParams)) {
        new (mozilla::KnownNotNull, ptr_HostObjectURIParams()) HostObjectURIParams;
    }
    (*(ptr_HostObjectURIParams())) = std::move(aRhs);
    mType = THostObjectURIParams;
    return (*(this));
}

auto URIParams::operator=(const DefaultURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TDefaultURIParams)) {
        new (mozilla::KnownNotNull, ptr_DefaultURIParams()) DefaultURIParams;
    }
    (*(ptr_DefaultURIParams())) = aRhs;
    mType = TDefaultURIParams;
    return (*(this));
}

auto URIParams::operator=(DefaultURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TDefaultURIParams)) {
        new (mozilla::KnownNotNull, ptr_DefaultURIParams()) DefaultURIParams;
    }
    (*(ptr_DefaultURIParams())) = std::move(aRhs);
    mType = TDefaultURIParams;
    return (*(this));
}

auto URIParams::operator=(const NestedAboutURIParams& aRhs) -> URIParams&
{
    if (MaybeDestroy(TNestedAboutURIParams)) {
        ptr_NestedAboutURIParams() = new NestedAboutURIParams;
    }
    (*(ptr_NestedAboutURIParams())) = aRhs;
    mType = TNestedAboutURIParams;
    return (*(this));
}

auto URIParams::operator=(NestedAboutURIParams&& aRhs) -> URIParams&
{
    if (MaybeDestroy(TNestedAboutURIParams)) {
        ptr_NestedAboutURIParams() = new NestedAboutURIParams;
    }
    (*(ptr_NestedAboutURIParams())) = std::move(aRhs);
    mType = TNestedAboutURIParams;
    return (*(this));
}

auto URIParams::operator=(const URIParams& aRhs) -> URIParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSimpleURIParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SimpleURIParams()) SimpleURIParams;
            }
            (*(ptr_SimpleURIParams())) = (aRhs).get_SimpleURIParams();
            break;
        }
    case TStandardURLParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StandardURLParams()) StandardURLParams;
            }
            (*(ptr_StandardURLParams())) = (aRhs).get_StandardURLParams();
            break;
        }
    case TJARURIParams:
        {
            if (MaybeDestroy(t)) {
                ptr_JARURIParams() = new JARURIParams;
            }
            (*(ptr_JARURIParams())) = (aRhs).get_JARURIParams();
            break;
        }
    case TIconURIParams:
        {
            if (MaybeDestroy(t)) {
                ptr_IconURIParams() = new IconURIParams;
            }
            (*(ptr_IconURIParams())) = (aRhs).get_IconURIParams();
            break;
        }
    case TNullPrincipalURIParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_NullPrincipalURIParams()) NullPrincipalURIParams;
            }
            (*(ptr_NullPrincipalURIParams())) = (aRhs).get_NullPrincipalURIParams();
            break;
        }
    case TJSURIParams:
        {
            if (MaybeDestroy(t)) {
                ptr_JSURIParams() = new JSURIParams;
            }
            (*(ptr_JSURIParams())) = (aRhs).get_JSURIParams();
            break;
        }
    case TSimpleNestedURIParams:
        {
            if (MaybeDestroy(t)) {
                ptr_SimpleNestedURIParams() = new SimpleNestedURIParams;
            }
            (*(ptr_SimpleNestedURIParams())) = (aRhs).get_SimpleNestedURIParams();
            break;
        }
    case THostObjectURIParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HostObjectURIParams()) HostObjectURIParams;
            }
            (*(ptr_HostObjectURIParams())) = (aRhs).get_HostObjectURIParams();
            break;
        }
    case TDefaultURIParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_DefaultURIParams()) DefaultURIParams;
            }
            (*(ptr_DefaultURIParams())) = (aRhs).get_DefaultURIParams();
            break;
        }
    case TNestedAboutURIParams:
        {
            if (MaybeDestroy(t)) {
                ptr_NestedAboutURIParams() = new NestedAboutURIParams;
            }
            (*(ptr_NestedAboutURIParams())) = (aRhs).get_NestedAboutURIParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto URIParams::operator=(URIParams&& aRhs) -> URIParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSimpleURIParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SimpleURIParams()) SimpleURIParams;
            }
            (*(ptr_SimpleURIParams())) = std::move((aRhs).get_SimpleURIParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStandardURLParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StandardURLParams()) StandardURLParams;
            }
            (*(ptr_StandardURLParams())) = std::move((aRhs).get_StandardURLParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TJARURIParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_JARURIParams() = (aRhs).ptr_JARURIParams();
            break;
        }
    case TIconURIParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_IconURIParams() = (aRhs).ptr_IconURIParams();
            break;
        }
    case TNullPrincipalURIParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_NullPrincipalURIParams()) NullPrincipalURIParams;
            }
            (*(ptr_NullPrincipalURIParams())) = std::move((aRhs).get_NullPrincipalURIParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TJSURIParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_JSURIParams() = (aRhs).ptr_JSURIParams();
            break;
        }
    case TSimpleNestedURIParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_SimpleNestedURIParams() = (aRhs).ptr_SimpleNestedURIParams();
            break;
        }
    case THostObjectURIParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_HostObjectURIParams()) HostObjectURIParams;
            }
            (*(ptr_HostObjectURIParams())) = std::move((aRhs).get_HostObjectURIParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TDefaultURIParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_DefaultURIParams()) DefaultURIParams;
            }
            (*(ptr_DefaultURIParams())) = std::move((aRhs).get_DefaultURIParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TNestedAboutURIParams:
        {
            static_cast<void>(MaybeDestroy(T__None));
            ptr_NestedAboutURIParams() = (aRhs).ptr_NestedAboutURIParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::URIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::ipc::URIParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'URIParams'
    (aMsg)->WriteSentinel(261227349);

    switch (type) {
    case union__::TSimpleURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SimpleURIParams());
            // Sentinel = 'TSimpleURIParams'
            (aMsg)->WriteSentinel(852690451);
            return;
        }
    case union__::TStandardURLParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StandardURLParams());
            // Sentinel = 'TStandardURLParams'
            (aMsg)->WriteSentinel(1081870045);
            return;
        }
    case union__::TJARURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_JARURIParams());
            // Sentinel = 'TJARURIParams'
            (aMsg)->WriteSentinel(491848838);
            return;
        }
    case union__::TIconURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IconURIParams());
            // Sentinel = 'TIconURIParams'
            (aMsg)->WriteSentinel(630785330);
            return;
        }
    case union__::TNullPrincipalURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_NullPrincipalURIParams());
            // Sentinel = 'TNullPrincipalURIParams'
            (aMsg)->WriteSentinel(1786972390);
            return;
        }
    case union__::TJSURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_JSURIParams());
            // Sentinel = 'TJSURIParams'
            (aMsg)->WriteSentinel(435225670);
            return;
        }
    case union__::TSimpleNestedURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SimpleNestedURIParams());
            // Sentinel = 'TSimpleNestedURIParams'
            (aMsg)->WriteSentinel(1626015862);
            return;
        }
    case union__::THostObjectURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_HostObjectURIParams());
            // Sentinel = 'THostObjectURIParams'
            (aMsg)->WriteSentinel(1327105950);
            return;
        }
    case union__::TDefaultURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_DefaultURIParams());
            // Sentinel = 'TDefaultURIParams'
            (aMsg)->WriteSentinel(948045422);
            return;
        }
    case union__::TNestedAboutURIParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_NestedAboutURIParams());
            // Sentinel = 'TNestedAboutURIParams'
            (aMsg)->WriteSentinel(1465518087);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::ipc::URIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::ipc::URIParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union URIParams");
        return false;
    }
    // Sentinel = 'URIParams'
    if ((!((aMsg)->ReadSentinel(aIter, 261227349)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union URIParams");
        return false;
    }

    switch (type) {
    case union__::TSimpleURIParams:
        {
            mozilla::ipc::SimpleURIParams tmp = mozilla::ipc::SimpleURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SimpleURIParams())))))) {
                aActor->FatalError("Error deserializing variant TSimpleURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'TSimpleURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 852690451)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSimpleURIParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::TStandardURLParams:
        {
            mozilla::ipc::StandardURLParams tmp = mozilla::ipc::StandardURLParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StandardURLParams())))))) {
                aActor->FatalError("Error deserializing variant TStandardURLParams of union URIParams");
                return false;
            }
            // Sentinel = 'TStandardURLParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1081870045)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStandardURLParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::TJARURIParams:
        {
            mozilla::ipc::JARURIParams tmp = mozilla::ipc::JARURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_JARURIParams())))))) {
                aActor->FatalError("Error deserializing variant TJARURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'TJARURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 491848838)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TJARURIParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::TIconURIParams:
        {
            mozilla::ipc::IconURIParams tmp = mozilla::ipc::IconURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IconURIParams())))))) {
                aActor->FatalError("Error deserializing variant TIconURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'TIconURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 630785330)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIconURIParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::TNullPrincipalURIParams:
        {
            mozilla::ipc::NullPrincipalURIParams tmp = mozilla::ipc::NullPrincipalURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_NullPrincipalURIParams())))))) {
                aActor->FatalError("Error deserializing variant TNullPrincipalURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'TNullPrincipalURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1786972390)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TNullPrincipalURIParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::TJSURIParams:
        {
            mozilla::ipc::JSURIParams tmp = mozilla::ipc::JSURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_JSURIParams())))))) {
                aActor->FatalError("Error deserializing variant TJSURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'TJSURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 435225670)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TJSURIParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::TSimpleNestedURIParams:
        {
            mozilla::ipc::SimpleNestedURIParams tmp = mozilla::ipc::SimpleNestedURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SimpleNestedURIParams())))))) {
                aActor->FatalError("Error deserializing variant TSimpleNestedURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'TSimpleNestedURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1626015862)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSimpleNestedURIParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::THostObjectURIParams:
        {
            mozilla::ipc::HostObjectURIParams tmp = mozilla::ipc::HostObjectURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_HostObjectURIParams())))))) {
                aActor->FatalError("Error deserializing variant THostObjectURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'THostObjectURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1327105950)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant THostObjectURIParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::TDefaultURIParams:
        {
            mozilla::ipc::DefaultURIParams tmp = mozilla::ipc::DefaultURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_DefaultURIParams())))))) {
                aActor->FatalError("Error deserializing variant TDefaultURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'TDefaultURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 948045422)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TDefaultURIParams of union URIParams");
                return false;
            }
            return true;
        }
    case union__::TNestedAboutURIParams:
        {
            mozilla::ipc::NestedAboutURIParams tmp = mozilla::ipc::NestedAboutURIParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_NestedAboutURIParams())))))) {
                aActor->FatalError("Error deserializing variant TNestedAboutURIParams of union URIParams");
                return false;
            }
            // Sentinel = 'TNestedAboutURIParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1465518087)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TNestedAboutURIParams of union URIParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct JSURIParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::JSURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).simpleParams());
    // Sentinel = 'simpleParams'
    (aMsg)->WriteSentinel(541394159);
    WriteIPDLParam(aMsg, aActor, (aVar).baseURI());
    // Sentinel = 'baseURI'
    (aMsg)->WriteSentinel(179962508);
}

auto IPDLParamTraits<mozilla::ipc::JSURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->simpleParams())))))) {
        aActor->FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'JSURIParams'");
        return false;
    }
    // Sentinel = 'simpleParams'
    if ((!((aMsg)->ReadSentinel(aIter, 541394159)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'JSURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseURI())))))) {
        aActor->FatalError("Error deserializing 'baseURI' (URIParams?) member of 'JSURIParams'");
        return false;
    }
    // Sentinel = 'baseURI'
    if ((!((aMsg)->ReadSentinel(aIter, 179962508)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseURI' (URIParams?) member of 'JSURIParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SimpleNestedURIParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::SimpleNestedURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).simpleParams());
    // Sentinel = 'simpleParams'
    (aMsg)->WriteSentinel(541394159);
    WriteIPDLParam(aMsg, aActor, (aVar).innerURI());
    // Sentinel = 'innerURI'
    (aMsg)->WriteSentinel(244515597);
}

auto IPDLParamTraits<mozilla::ipc::SimpleNestedURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->simpleParams())))))) {
        aActor->FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'SimpleNestedURIParams'");
        return false;
    }
    // Sentinel = 'simpleParams'
    if ((!((aMsg)->ReadSentinel(aIter, 541394159)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'SimpleNestedURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->innerURI())))))) {
        aActor->FatalError("Error deserializing 'innerURI' (URIParams) member of 'SimpleNestedURIParams'");
        return false;
    }
    // Sentinel = 'innerURI'
    if ((!((aMsg)->ReadSentinel(aIter, 244515597)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'innerURI' (URIParams) member of 'SimpleNestedURIParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct NestedAboutURIParams|
//
namespace mozilla {
namespace ipc {
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::ipc::NestedAboutURIParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).nestedParams());
    // Sentinel = 'nestedParams'
    (aMsg)->WriteSentinel(536741096);
    WriteIPDLParam(aMsg, aActor, (aVar).baseURI());
    // Sentinel = 'baseURI'
    (aMsg)->WriteSentinel(179962508);
}

auto IPDLParamTraits<mozilla::ipc::NestedAboutURIParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->nestedParams())))))) {
        aActor->FatalError("Error deserializing 'nestedParams' (SimpleNestedURIParams) member of 'NestedAboutURIParams'");
        return false;
    }
    // Sentinel = 'nestedParams'
    if ((!((aMsg)->ReadSentinel(aIter, 536741096)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nestedParams' (SimpleNestedURIParams) member of 'NestedAboutURIParams'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->baseURI())))))) {
        aActor->FatalError("Error deserializing 'baseURI' (URIParams?) member of 'NestedAboutURIParams'");
        return false;
    }
    // Sentinel = 'baseURI'
    if ((!((aMsg)->ReadSentinel(aIter, 179962508)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'baseURI' (URIParams?) member of 'NestedAboutURIParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
