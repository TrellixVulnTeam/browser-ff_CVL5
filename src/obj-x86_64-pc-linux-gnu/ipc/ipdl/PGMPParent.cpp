//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPParent.h"
#include "GMPParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"

#include "mozilla/gmp/PGMPContentParent.h"
#include "mozilla/gmp/PGMPTimerParent.h"
#include "mozilla/gmp/PGMPStorageParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace gmp {


auto PGMPParent::RecvPGMPTimerConstructor(PGMPTimerParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PGMPParent::RecvPGMPStorageConstructor(PGMPStorageParent* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PGMPParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PGMPParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PGMPParent::EnteredCxxStack() -> void
{
}

auto PGMPParent::ExitedCxxStack() -> void
{
}

auto PGMPParent::EnteredCall() -> void
{
}

auto PGMPParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PGMPParent::PGMPParent() :
    mozilla::ipc::IToplevelProtocol("PGMPParent", PGMPMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PGMPParent);
}

PGMPParent::~PGMPParent()
{
    MOZ_COUNT_DTOR(PGMPParent);
}

auto PGMPParent::ManagedPGMPTimerParent(nsTArray<PGMPTimerParent*>& aArr) const -> void
{
    mManagedPGMPTimerParent.ToArray(aArr);
}

auto PGMPParent::ManagedPGMPTimerParent() const -> const ManagedContainer<PGMPTimerParent>&
{
    return mManagedPGMPTimerParent;
}

auto PGMPParent::ManagedPGMPStorageParent(nsTArray<PGMPStorageParent*>& aArr) const -> void
{
    mManagedPGMPStorageParent.ToArray(aArr);
}

auto PGMPParent::ManagedPGMPStorageParent() const -> const ManagedContainer<PGMPStorageParent>&
{
    return mManagedPGMPStorageParent;
}

auto PGMPParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPGMPTimerParent.Count();
    total += mManagedPGMPStorageParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPGMPTimerParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPGMPStorageParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PGMPParent::OpenPGMPTimerEndpoint(PGMPTimerParent* aActor) -> ManagedEndpoint<PGMPTimerChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPTimerParent actor");
        return ManagedEndpoint<PGMPTimerChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPGMPTimerParent.PutEntry(aActor);

    return ManagedEndpoint<PGMPTimerChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPParent::BindPGMPTimerEndpoint(
        ManagedEndpoint<PGMPTimerParent> aEndpoint,
        PGMPTimerParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPTimerParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPGMPTimerParent.PutEntry(aActor);

    return true;
}

auto PGMPParent::OpenPGMPStorageEndpoint(PGMPStorageParent* aActor) -> ManagedEndpoint<PGMPStorageChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPStorageParent actor");
        return ManagedEndpoint<PGMPStorageChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPGMPStorageParent.PutEntry(aActor);

    return ManagedEndpoint<PGMPStorageChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PGMPParent::BindPGMPStorageEndpoint(
        ManagedEndpoint<PGMPStorageParent> aEndpoint,
        PGMPStorageParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PGMPStorageParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPGMPStorageParent.PutEntry(aActor);

    return true;
}

auto PGMPParent::SendCrashPluginNow() -> bool
{
    IPC::Message* msg__ = PGMP::Msg_CrashPluginNow(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_CrashPluginNow", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPParent::CallStartPlugin(const nsString& adapter) -> bool
{
    IPC::Message* msg__ = PGMP::Msg_StartPlugin(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, adapter);
    // Sentinel = 'adapter'
    (msg__)->WriteSentinel(188941026);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_StartPlugin", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PGMP::Msg_StartPlugin", IPC);
        sendok__ = ChannelCall(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPParent",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    return true;
}

auto PGMPParent::SendProvideStorageId(const nsCString& storageId) -> bool
{
    IPC::Message* msg__ = PGMP::Msg_ProvideStorageId(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, storageId);
    // Sentinel = 'storageId'
    (msg__)->WriteSentinel(319751075);




    if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_ProvideStorageId", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPParent::SendPreloadLibs(const nsCString& libs) -> bool
{
    IPC::Message* msg__ = PGMP::Msg_PreloadLibs(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, libs);
    // Sentinel = 'libs'
    (msg__)->WriteSentinel(69599659);




    if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_PreloadLibs", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPParent::SendCloseActive() -> bool
{
    IPC::Message* msg__ = PGMP::Msg_CloseActive(MSG_ROUTING_CONTROL);





    if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_CloseActive", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPParent::SendInitGMPContentChild(Endpoint<mozilla::gmp::PGMPContentChild>&& endpoint) -> bool
{
    IPC::Message* msg__ = PGMP::Msg_InitGMPContentChild(MSG_ROUTING_CONTROL);

    WriteIPDLParam(msg__, this, std::move(endpoint));
    // Sentinel = 'endpoint'
    (msg__)->WriteSentinel(251724642);




    if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGMPParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGMP::Msg_InitGMPContentChild", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGMPParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PGMPTimerMsgStart:
{
            PGMPTimerParent* actor = static_cast<PGMPTimerParent*>(aListener);
            auto& container = mManagedPGMPTimerParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PGMPStorageMsgStart:
{
            PGMPStorageParent* actor = static_cast<PGMPStorageParent*>(aListener);
            auto& container = mManagedPGMPStorageParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PGMPParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PGMPTimerMsgStart:
        static_cast<GMPParent*>(this)->DeallocPGMPTimerParent(static_cast<PGMPTimerParent*>(aListener));
        return;
    case PGMPStorageMsgStart:
        static_cast<GMPParent*>(this)->DeallocPGMPStorageParent(static_cast<PGMPStorageParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PGMPParent::OnMessageReceived(const Message& msg__) -> PGMPParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PGMP::Msg_InitCrashReporter__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_InitCrashReporter", OTHER);

            PickleIterator iter__{msg__};
            NativeThreadId threadId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(threadId)))))) {
                FatalError("Error deserializing 'NativeThreadId'");
                return MsgValueError;
            }
            // Sentinel = 'threadId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 248185638)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NativeThreadId'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<GMPParent*>(this))->RecvInitCrashReporter(std::move(threadId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMP::Msg_PGMPTimerConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_PGMPTimerConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PGMPTimerParent* actor = (static_cast<GMPParent*>(this))->AllocPGMPTimerParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PGMPTimerParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPGMPTimerParent.PutEntry(actor);

            if ((!((static_cast<GMPParent*>(this))->RecvPGMPTimerConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMP::Msg_PGMPStorageConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_PGMPStorageConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PGMPStorageParent* actor = (static_cast<GMPParent*>(this))->AllocPGMPStorageParent();
            if (!actor) {
                NS_WARNING("Cannot bind null PGMPStorageParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPGMPStorageParent.PutEntry(actor);

            if ((!((static_cast<GMPParent*>(this))->RecvPGMPStorageConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMP::Msg_PGMPContentChildDestroyed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGMP::Msg_PGMPContentChildDestroyed", OTHER);

            if ((!((static_cast<GMPParent*>(this))->RecvPGMPContentChildDestroyed()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            FatalError("this protocol tree does not use shmem");
            return MsgNotKnown;
        }
    }
}

auto PGMPParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PGMPParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PGMPParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGMPParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnCallReceived(msg__, reply__);
    }

    return MsgNotKnown;
}

auto PGMPParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PGMPParent::ProcessNativeEventsInInterruptCall() -> void
{
#ifdef OS_WIN
    GetIPCChannel()->ProcessNativeEventsInInterruptCall();
#else
    FatalError("This method is Windows-only");
#endif
}

auto PGMPParent::ClearSubtree() -> void
{
    for (auto it = mManagedPGMPTimerParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPGMPTimerParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPGMPTimerParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPGMPTimerParent.Clear();

    for (auto it = mManagedPGMPStorageParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPGMPStorageParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPGMPStorageParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPGMPStorageParent.Clear();

}



} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::gmp::PGMPParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::gmp::PGMPParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGMP", PGMPMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::gmp::PGMPParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
