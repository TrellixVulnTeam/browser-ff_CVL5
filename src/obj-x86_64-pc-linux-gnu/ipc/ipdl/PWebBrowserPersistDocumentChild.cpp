//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PWebBrowserPersistDocumentChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/WebBrowserPersistDocumentChild.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "nsIReferrerInfo.h"

#include "mozilla/dom/PContentChild.h"
#include "mozilla/PWebBrowserPersistResourcesChild.h"
#include "mozilla/PWebBrowserPersistSerializeChild.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PWebBrowserPersistDocumentChild::RecvPWebBrowserPersistResourcesConstructor(PWebBrowserPersistResourcesChild* actor) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PWebBrowserPersistDocumentChild::RecvPWebBrowserPersistSerializeConstructor(
        PWebBrowserPersistSerializeChild* actor,
        const WebBrowserPersistURIMap& aMap,
        const nsCString& aRequestedContentType,
        const uint32_t& aEncoderFlags,
        const uint32_t& aWrapColumn) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PWebBrowserPersistDocumentChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PWebBrowserPersistDocumentChild::PWebBrowserPersistDocumentChild() :
    mozilla::ipc::IProtocol(PWebBrowserPersistDocumentMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PWebBrowserPersistDocumentChild);
}

PWebBrowserPersistDocumentChild::~PWebBrowserPersistDocumentChild()
{
    MOZ_COUNT_DTOR(PWebBrowserPersistDocumentChild);
}

auto PWebBrowserPersistDocumentChild::Manager() const -> PContentChild*
{
    return static_cast<PContentChild*>(IProtocol::Manager());
}

auto PWebBrowserPersistDocumentChild::ManagedPWebBrowserPersistResourcesChild(nsTArray<PWebBrowserPersistResourcesChild*>& aArr) const -> void
{
    mManagedPWebBrowserPersistResourcesChild.ToArray(aArr);
}

auto PWebBrowserPersistDocumentChild::ManagedPWebBrowserPersistResourcesChild() const -> const ManagedContainer<PWebBrowserPersistResourcesChild>&
{
    return mManagedPWebBrowserPersistResourcesChild;
}

auto PWebBrowserPersistDocumentChild::ManagedPWebBrowserPersistSerializeChild(nsTArray<PWebBrowserPersistSerializeChild*>& aArr) const -> void
{
    mManagedPWebBrowserPersistSerializeChild.ToArray(aArr);
}

auto PWebBrowserPersistDocumentChild::ManagedPWebBrowserPersistSerializeChild() const -> const ManagedContainer<PWebBrowserPersistSerializeChild>&
{
    return mManagedPWebBrowserPersistSerializeChild;
}

auto PWebBrowserPersistDocumentChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPWebBrowserPersistResourcesChild.Count();
    total += mManagedPWebBrowserPersistSerializeChild.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPWebBrowserPersistResourcesChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPWebBrowserPersistSerializeChild.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PWebBrowserPersistDocumentChild::OpenPWebBrowserPersistResourcesEndpoint(PWebBrowserPersistResourcesChild* aActor) -> ManagedEndpoint<PWebBrowserPersistResourcesParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistResourcesChild actor");
        return ManagedEndpoint<PWebBrowserPersistResourcesParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistResourcesChild.PutEntry(aActor);

    return ManagedEndpoint<PWebBrowserPersistResourcesParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PWebBrowserPersistDocumentChild::BindPWebBrowserPersistResourcesEndpoint(
        ManagedEndpoint<PWebBrowserPersistResourcesChild> aEndpoint,
        PWebBrowserPersistResourcesChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistResourcesChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWebBrowserPersistResourcesChild.PutEntry(aActor);

    return true;
}

auto PWebBrowserPersistDocumentChild::OpenPWebBrowserPersistSerializeEndpoint(PWebBrowserPersistSerializeChild* aActor) -> ManagedEndpoint<PWebBrowserPersistSerializeParent>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistSerializeChild actor");
        return ManagedEndpoint<PWebBrowserPersistSerializeParent>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPWebBrowserPersistSerializeChild.PutEntry(aActor);

    return ManagedEndpoint<PWebBrowserPersistSerializeParent>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PWebBrowserPersistDocumentChild::BindPWebBrowserPersistSerializeEndpoint(
        ManagedEndpoint<PWebBrowserPersistSerializeChild> aEndpoint,
        PWebBrowserPersistSerializeChild* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PWebBrowserPersistSerializeChild actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPWebBrowserPersistSerializeChild.PutEntry(aActor);

    return true;
}

auto PWebBrowserPersistDocumentChild::SendAttributes(
        const WebBrowserPersistDocumentAttrs& aAttrs,
        const mozilla::Maybe<IPCStream>& stream) -> bool
{
    IPC::Message* msg__ = PWebBrowserPersistDocument::Msg_Attributes(Id());

    WriteIPDLParam(msg__, this, aAttrs);
    // Sentinel = 'aAttrs'
    (msg__)->WriteSentinel(135529072);
    WriteIPDLParam(msg__, this, stream);
    // Sentinel = 'stream'
    (msg__)->WriteSentinel(153223821);




    if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebBrowserPersistDocumentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_Attributes", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebBrowserPersistDocumentChild::SendInitFailure(const nsresult& aStatus) -> bool
{
    IPC::Message* msg__ = PWebBrowserPersistDocument::Msg_InitFailure(Id());

    WriteIPDLParam(msg__, this, aStatus);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(186712806);




    if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebBrowserPersistDocumentChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_InitFailure", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebBrowserPersistDocumentChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PWebBrowserPersistResourcesMsgStart:
{
            PWebBrowserPersistResourcesChild* actor = static_cast<PWebBrowserPersistResourcesChild*>(aListener);
            auto& container = mManagedPWebBrowserPersistResourcesChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PWebBrowserPersistSerializeMsgStart:
{
            PWebBrowserPersistSerializeChild* actor = static_cast<PWebBrowserPersistSerializeChild*>(aListener);
            auto& container = mManagedPWebBrowserPersistSerializeChild;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PWebBrowserPersistDocumentChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PWebBrowserPersistResourcesMsgStart:
        static_cast<WebBrowserPersistDocumentChild*>(this)->DeallocPWebBrowserPersistResourcesChild(static_cast<PWebBrowserPersistResourcesChild*>(aListener));
        return;
    case PWebBrowserPersistSerializeMsgStart:
        static_cast<WebBrowserPersistDocumentChild*>(this)->DeallocPWebBrowserPersistSerializeChild(static_cast<PWebBrowserPersistSerializeChild*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PWebBrowserPersistDocumentChild::OnMessageReceived(const Message& msg__) -> PWebBrowserPersistDocumentChild::Result
{
    switch (msg__.type()) {
    case PWebBrowserPersistDocument::Msg_SetPersistFlags__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistDocumentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_SetPersistFlags", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aNewFlags{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNewFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aNewFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 283181945)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebBrowserPersistDocumentChild*>(this))->RecvSetPersistFlags(std::move(aNewFlags))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebBrowserPersistDocument::Msg_PWebBrowserPersistResourcesConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistDocumentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_PWebBrowserPersistResourcesConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PWebBrowserPersistResourcesChild* actor = (static_cast<WebBrowserPersistDocumentChild*>(this))->AllocPWebBrowserPersistResourcesChild();
            if (!actor) {
                NS_WARNING("Cannot bind null PWebBrowserPersistResourcesChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPWebBrowserPersistResourcesChild.PutEntry(actor);

            if ((!((static_cast<WebBrowserPersistDocumentChild*>(this))->RecvPWebBrowserPersistResourcesConstructor(std::move(actor))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebBrowserPersistDocument::Msg_PWebBrowserPersistSerializeConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistDocumentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg_PWebBrowserPersistSerializeConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            WebBrowserPersistURIMap aMap{};
            nsCString aRequestedContentType{};
            uint32_t aEncoderFlags{};
            uint32_t aWrapColumn{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMap)))))) {
                FatalError("Error deserializing 'WebBrowserPersistURIMap'");
                return MsgValueError;
            }
            // Sentinel = 'aMap'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 60883328)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebBrowserPersistURIMap'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aRequestedContentType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRequestedContentType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1563297937)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEncoderFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aEncoderFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 582354191)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWrapColumn)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWrapColumn'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 432669802)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PWebBrowserPersistSerializeChild* actor = (static_cast<WebBrowserPersistDocumentChild*>(this))->AllocPWebBrowserPersistSerializeChild(aMap, aRequestedContentType, aEncoderFlags, aWrapColumn);
            if (!actor) {
                NS_WARNING("Cannot bind null PWebBrowserPersistSerializeChild actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPWebBrowserPersistSerializeChild.PutEntry(actor);

            if ((!((static_cast<WebBrowserPersistDocumentChild*>(this))->RecvPWebBrowserPersistSerializeConstructor(std::move(actor), std::move(aMap), std::move(aRequestedContentType), std::move(aEncoderFlags), std::move(aWrapColumn))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebBrowserPersistDocument::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebBrowserPersistDocumentChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebBrowserPersistDocumentChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebBrowserPersistDocument::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWebBrowserPersistDocumentChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWebBrowserPersistDocument'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWebBrowserPersistDocument'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebBrowserPersistDocument'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebBrowserPersistDocumentChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWebBrowserPersistDocumentMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebBrowserPersistDocumentChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebBrowserPersistDocumentChild::Result
{
    return MsgNotKnown;
}

auto PWebBrowserPersistDocumentChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebBrowserPersistDocumentChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebBrowserPersistDocumentChild::ClearSubtree() -> void
{
    for (auto it = mManagedPWebBrowserPersistResourcesChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWebBrowserPersistResourcesChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWebBrowserPersistResourcesChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWebBrowserPersistResourcesChild.Clear();

    for (auto it = mManagedPWebBrowserPersistSerializeChild.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPWebBrowserPersistSerializeChild.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPWebBrowserPersistSerializeChild kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPWebBrowserPersistSerializeChild.Clear();

}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PWebBrowserPersistDocumentChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PWebBrowserPersistDocumentChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebBrowserPersistDocument", PWebBrowserPersistDocumentMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PWebBrowserPersistDocumentChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
