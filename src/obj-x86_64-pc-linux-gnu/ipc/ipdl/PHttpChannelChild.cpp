//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PHttpChannelChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/net/NeckoMessageUtils.h"

#include "mozilla/net/PNeckoChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PHttpChannelChild::PHttpChannelChild() :
    mozilla::ipc::IProtocol(PHttpChannelMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PHttpChannelChild);
}

PHttpChannelChild::~PHttpChannelChild()
{
    MOZ_COUNT_DTOR(PHttpChannelChild);
}

auto PHttpChannelChild::Manager() const -> PNeckoChild*
{
    return static_cast<PNeckoChild*>(IProtocol::Manager());
}

auto PHttpChannelChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHttpChannelChild::SendSetClassOfService(const uint32_t& cos) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_SetClassOfService(Id());

    WriteIPDLParam(msg__, this, cos);
    // Sentinel = 'cos'
    (msg__)->WriteSentinel(41746758);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_SetClassOfService", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendSuspend() -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_Suspend(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_Suspend", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendResume() -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_Resume(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_Resume", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendCancel(
        const nsresult& status,
        const uint32_t& requestBlockingReason) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_Cancel(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);
    WriteIPDLParam(msg__, this, requestBlockingReason);
    // Sentinel = 'requestBlockingReason'
    (msg__)->WriteSentinel(1599867035);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_Cancel", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendRedirect2Verify(
        const nsresult& result,
        const RequestHeaderTuples& changedHeaders,
        const uint32_t& sourceRequestBlockingReason,
        const mozilla::Maybe<ChildLoadInfoForwarderArgs>& targetLoadInfoForwarder,
        const uint32_t& loadFlags,
        nsIReferrerInfo* referrerInfo,
        const mozilla::Maybe<URIParams>& apiRedirectTo,
        const mozilla::Maybe<CorsPreflightArgs>& corsPreflightArgs,
        const bool& chooseAppcache) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_Redirect2Verify(Id());

    WriteIPDLParam(msg__, this, result);
    // Sentinel = 'result'
    (msg__)->WriteSentinel(153223840);
    WriteIPDLParam(msg__, this, changedHeaders);
    // Sentinel = 'changedHeaders'
    (msg__)->WriteSentinel(688522631);
    WriteIPDLParam(msg__, this, sourceRequestBlockingReason);
    // Sentinel = 'sourceRequestBlockingReason'
    (msg__)->WriteSentinel(2614692620);
    WriteIPDLParam(msg__, this, targetLoadInfoForwarder);
    // Sentinel = 'targetLoadInfoForwarder'
    (msg__)->WriteSentinel(1854474560);
    WriteIPDLParam(msg__, this, loadFlags);
    // Sentinel = 'loadFlags'
    (msg__)->WriteSentinel(297665422);
    WriteIPDLParam(msg__, this, referrerInfo);
    // Sentinel = 'referrerInfo'
    (msg__)->WriteSentinel(540214506);
    WriteIPDLParam(msg__, this, apiRedirectTo);
    // Sentinel = 'apiRedirectTo'
    (msg__)->WriteSentinel(606143792);
    WriteIPDLParam(msg__, this, corsPreflightArgs);
    // Sentinel = 'corsPreflightArgs'
    (msg__)->WriteSentinel(1048250090);
    WriteIPDLParam(msg__, this, chooseAppcache);
    // Sentinel = 'chooseAppcache'
    (msg__)->WriteSentinel(709690775);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_Redirect2Verify", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendDocumentChannelCleanup(const bool& clearCacheEntry) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_DocumentChannelCleanup(Id());

    WriteIPDLParam(msg__, this, clearCacheEntry);
    // Sentinel = 'clearCacheEntry'
    (msg__)->WriteSentinel(779486702);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_DocumentChannelCleanup", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendMarkOfflineCacheEntryAsForeign() -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_MarkOfflineCacheEntryAsForeign(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_MarkOfflineCacheEntryAsForeign", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendRemoveCorsPreflightCacheEntry(
        const URIParams& uri,
        const PrincipalInfo& requestingPrincipal,
        const OriginAttributes& originAttributes) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_RemoveCorsPreflightCacheEntry(Id());

    WriteIPDLParam(msg__, this, uri);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(45023569);
    WriteIPDLParam(msg__, this, requestingPrincipal);
    // Sentinel = 'requestingPrincipal'
    (msg__)->WriteSentinel(1344079850);
    WriteIPDLParam(msg__, this, originAttributes);
    // Sentinel = 'originAttributes'
    (msg__)->WriteSentinel(947259056);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_RemoveCorsPreflightCacheEntry", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendDeletingChannel() -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_DeletingChannel(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_DeletingChannel", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendOpenOriginalCacheInputStream() -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_OpenOriginalCacheInputStream(Id());





    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_OpenOriginalCacheInputStream", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendOpenAltDataCacheInputStream(const nsCString& aType) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_OpenAltDataCacheInputStream(Id());

    WriteIPDLParam(msg__, this, aType);
    // Sentinel = 'aType'
    (msg__)->WriteSentinel(99222020);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_OpenAltDataCacheInputStream", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::SendBytesRead(const int32_t& count) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_BytesRead(Id());

    WriteIPDLParam(msg__, this, count);
    // Sentinel = 'count'
    (msg__)->WriteSentinel(106889770);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_BytesRead", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::Send__delete__(PHttpChannelChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PHttpChannel::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PHttpChannelMsgStart, actor);
    return sendok__;
}

auto PHttpChannelChild::SendSetPriority(const int16_t& priority) -> bool
{
    IPC::Message* msg__ = PHttpChannel::Msg_SetPriority(Id());

    WriteIPDLParam(msg__, this, priority);
    // Sentinel = 'priority'
    (msg__)->WriteSentinel(262865795);




    if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PHttpChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PHttpChannel::Msg_SetPriority", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PHttpChannelChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpChannelChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHttpChannelChild::OnMessageReceived(const Message& msg__) -> PHttpChannelChild::Result
{
    switch (msg__.type()) {
    case PHttpChannel::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PHttpChannel::Msg_FailedAsyncOpen__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_FailedAsyncOpen", OTHER);

            PickleIterator iter__{msg__};
            nsresult status{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(status)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'status'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 154731173)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvFailedAsyncOpen(std::move(status))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_OnStartRequestSent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_OnStartRequestSent", OTHER);

            if ((!((this)->RecvOnStartRequestSent()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_Redirect1Begin__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_Redirect1Begin", OTHER);

            PickleIterator iter__{msg__};
            uint32_t registrarId{};
            URIParams newOriginalUri{};
            uint32_t newLoadFlags{};
            uint32_t redirectFlags{};
            ParentLoadInfoForwarderArgs loadInfoForwarder{};
            nsHttpResponseHead responseHead{};
            nsCString securityInfoSerialization{};
            uint64_t channelId{};
            NetAddr oldPeerAddr{};
            ResourceTimingStructArgs timing{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(registrarId)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'registrarId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 464585857)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(newOriginalUri)))))) {
                FatalError("Error deserializing 'URIParams'");
                return MsgValueError;
            }
            // Sentinel = 'newOriginalUri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 719127984)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'URIParams'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(newLoadFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'newLoadFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 516293816)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(redirectFlags)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'redirectFlags'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 620889408)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(loadInfoForwarder)))))) {
                FatalError("Error deserializing 'ParentLoadInfoForwarderArgs'");
                return MsgValueError;
            }
            // Sentinel = 'loadInfoForwarder'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1020528345)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ParentLoadInfoForwarderArgs'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(responseHead)))))) {
                FatalError("Error deserializing 'nsHttpResponseHead'");
                return MsgValueError;
            }
            // Sentinel = 'responseHead'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 549651682)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsHttpResponseHead'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(securityInfoSerialization)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'securityInfoSerialization'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2263026275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(channelId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'channelId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 301138823)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(oldPeerAddr)))))) {
                FatalError("Error deserializing 'NetAddr'");
                return MsgValueError;
            }
            // Sentinel = 'oldPeerAddr'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 433128519)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'NetAddr'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(timing)))))) {
                FatalError("Error deserializing 'ResourceTimingStructArgs'");
                return MsgValueError;
            }
            // Sentinel = 'timing'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 150798985)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ResourceTimingStructArgs'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvRedirect1Begin(std::move(registrarId), std::move(newOriginalUri), std::move(newLoadFlags), std::move(redirectFlags), std::move(loadInfoForwarder), std::move(responseHead), std::move(securityInfoSerialization), std::move(channelId), std::move(oldPeerAddr), std::move(timing))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_Redirect3Complete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_Redirect3Complete", OTHER);

            if ((!((this)->RecvRedirect3Complete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_ReportSecurityMessage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_ReportSecurityMessage", OTHER);

            PickleIterator iter__{msg__};
            nsString messageTag{};
            nsString messageCategory{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(messageTag)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'messageTag'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 379061250)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(messageCategory)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'messageCategory'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 816252452)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvReportSecurityMessage(std::move(messageTag), std::move(messageCategory))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_DeleteSelf__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_DeleteSelf", OTHER);

            if ((!((this)->RecvDeleteSelf()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_IssueDeprecationWarning__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_IssueDeprecationWarning", OTHER);

            PickleIterator iter__{msg__};
            uint32_t warning{};
            bool asError{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(warning)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'warning'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201196279)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(asError)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'asError'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 187106015)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvIssueDeprecationWarning(std::move(warning), std::move(asError))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_LogBlockedCORSRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_LogBlockedCORSRequest", OTHER);

            PickleIterator iter__{msg__};
            nsString message{};
            nsCString category{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(message)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'message'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 197198566)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(category)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'category'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 247333727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvLogBlockedCORSRequest(std::move(message), std::move(category))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_LogMimeTypeMismatch__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_LogMimeTypeMismatch", OTHER);

            PickleIterator iter__{msg__};
            nsCString messageName{};
            bool warning{};
            nsString url{};
            nsString contentType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(messageName)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'messageName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 452133991)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(warning)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'warning'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 201196279)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(url)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'url'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45220180)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(contentType)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'contentType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 465241246)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvLogMimeTypeMismatch(std::move(messageName), std::move(warning), std::move(url), std::move(contentType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_OriginalCacheInputStreamAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_OriginalCacheInputStreamAvailable", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<IPCStream> stream{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stream)))))) {
                FatalError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            // Sentinel = 'stream'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223821)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOriginalCacheInputStreamAvailable(std::move(stream))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_AltDataCacheInputStreamAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_AltDataCacheInputStreamAvailable", OTHER);

            PickleIterator iter__{msg__};
            mozilla::Maybe<IPCStream> stream{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(stream)))))) {
                FatalError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            // Sentinel = 'stream'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 153223821)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCStream?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvAltDataCacheInputStreamAvailable(std::move(stream))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PHttpChannel::Msg_SetPriority__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHttpChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHttpChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHttpChannel::Msg_SetPriority", OTHER);

            PickleIterator iter__{msg__};
            int16_t priority{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(priority)))))) {
                FatalError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            // Sentinel = 'priority'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 262865795)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvSetPriority(std::move(priority))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHttpChannelChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpChannelChild::Result
{
    return MsgNotKnown;
}

auto PHttpChannelChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHttpChannelChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHttpChannelChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PHttpChannelChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PHttpChannelChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHttpChannel", PHttpChannelMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PHttpChannelChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
