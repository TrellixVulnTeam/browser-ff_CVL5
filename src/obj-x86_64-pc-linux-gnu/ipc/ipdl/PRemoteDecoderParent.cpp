//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PRemoteDecoderParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/RemoteDecoderParent.h"
#include "mozilla/RemoteMediaData.h"
#include "mozilla/dom/MediaIPCUtils.h"

#include "mozilla/PRemoteDecoderManagerParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PRemoteDecoderParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PRemoteDecoderParent::PRemoteDecoderParent() :
    mozilla::ipc::IProtocol(PRemoteDecoderMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PRemoteDecoderParent);
}

PRemoteDecoderParent::~PRemoteDecoderParent()
{
    MOZ_COUNT_DTOR(PRemoteDecoderParent);
}

auto PRemoteDecoderParent::Manager() const -> PRemoteDecoderManagerParent*
{
    return static_cast<PRemoteDecoderManagerParent*>(IProtocol::Manager());
}

auto PRemoteDecoderParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PRemoteDecoderParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteDecoderParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteDecoderParent::OnMessageReceived(const Message& msg__) -> PRemoteDecoderParent::Result
{
    switch (msg__.type()) {
    case PRemoteDecoder::Msg_Construct__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Construct", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            ConstructResolver resolver = [proxy__, seqno__, id__](const MediaResult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteDecoderParent* self__ = static_cast<PRemoteDecoderParent*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteDecoder::Reply_Construct(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'result'
                (reply__)->WriteSentinel(153223840);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteDecoderParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteDecoderParent*>(this))->RecvConstruct(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteDecoder::Msg_Init__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Init", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            InitResolver resolver = [proxy__, seqno__, id__](const InitResultIPDL& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteDecoderParent* self__ = static_cast<PRemoteDecoderParent*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteDecoder::Reply_Init(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'result'
                (reply__)->WriteSentinel(153223840);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteDecoderParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteDecoderParent*>(this))->RecvInit(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteDecoder::Msg_Decode__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Decode", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<ArrayOfRemoteMediaRawData> data{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'ArrayOfRemoteMediaRawData'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ArrayOfRemoteMediaRawData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            DecodeResolver resolver = [proxy__, seqno__, id__](const DecodeResultIPDL& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteDecoderParent* self__ = static_cast<PRemoteDecoderParent*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteDecoder::Reply_Decode(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'result'
                (reply__)->WriteSentinel(153223840);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteDecoderParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteDecoderParent*>(this))->RecvDecode(data, std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteDecoder::Msg_Flush__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Flush", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            FlushResolver resolver = [proxy__, seqno__, id__](const MediaResult& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteDecoderParent* self__ = static_cast<PRemoteDecoderParent*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteDecoder::Reply_Flush(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'error'
                (reply__)->WriteSentinel(107741739);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteDecoderParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteDecoderParent*>(this))->RecvFlush(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteDecoder::Msg_Drain__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Drain", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            DrainResolver resolver = [proxy__, seqno__, id__](const DecodeResultIPDL& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteDecoderParent* self__ = static_cast<PRemoteDecoderParent*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteDecoder::Reply_Drain(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'result'
                (reply__)->WriteSentinel(153223840);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteDecoderParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteDecoderParent*>(this))->RecvDrain(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteDecoder::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_Shutdown", OTHER);

            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            ShutdownResolver resolver = [proxy__, seqno__, id__](const bool& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteDecoderParent* self__ = static_cast<PRemoteDecoderParent*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteDecoder::Reply_Shutdown(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'unused'
                (reply__)->WriteSentinel(155517589);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteDecoderParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteDecoderParent*>(this))->RecvShutdown(std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteDecoder::Msg_SetSeekThreshold__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg_SetSeekThreshold", OTHER);

            PickleIterator iter__{msg__};
            TimeUnit time{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(time)))))) {
                FatalError("Error deserializing 'TimeUnit'");
                return MsgValueError;
            }
            // Sentinel = 'time'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 72221104)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TimeUnit'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteDecoderParent*>(this))->RecvSetSeekThreshold(std::move(time))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteDecoder::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoder::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PRemoteDecoderParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PRemoteDecoder'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PRemoteDecoder'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PRemoteDecoder'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteDecoderParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PRemoteDecoderMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemoteDecoderParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteDecoderParent::Result
{
    return MsgNotKnown;
}

auto PRemoteDecoderParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteDecoderParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemoteDecoderParent::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PRemoteDecoderParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PRemoteDecoderParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemoteDecoder", PRemoteDecoderMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PRemoteDecoderParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
