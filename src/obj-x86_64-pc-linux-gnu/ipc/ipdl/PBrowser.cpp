//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/AntiTrackingIPCUtils.h"
#include "mozilla/dom/BindingIPCUtils.h"
#include "mozilla/dom/CSPMessageUtils.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/dom/TabMessageUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/LayoutMessageUtils.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/ipc/TransportSecurityInfoUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/dom/PColorPickerParent.h"
#include "mozilla/dom/PColorPickerChild.h"
#include "mozilla/dom/PContentParent.h"
#include "mozilla/dom/PContentChild.h"
#include "mozilla/a11y/PDocAccessibleParent.h"
#include "mozilla/a11y/PDocAccessibleChild.h"
#include "mozilla/dom/PFilePickerParent.h"
#include "mozilla/dom/PFilePickerChild.h"
#include "mozilla/plugins/PPluginWidgetParent.h"
#include "mozilla/plugins/PPluginWidgetChild.h"
#include "mozilla/layout/PRemotePrintJobParent.h"
#include "mozilla/layout/PRemotePrintJobChild.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PChildToParentStreamChild.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamChild.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PFileDescriptorSetChild.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/PPaymentRequestParent.h"
#include "mozilla/dom/PPaymentRequestChild.h"
#include "mozilla/dom/PWindowGlobalParent.h"
#include "mozilla/dom/PWindowGlobalChild.h"
#include "mozilla/dom/PBrowserBridgeParent.h"
#include "mozilla/dom/PBrowserBridgeChild.h"
#include "mozilla/dom/PVsyncParent.h"
#include "mozilla/dom/PVsyncChild.h"
#include "mozilla/dom/PBrowser.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/dom/PBrowserChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PBrowser {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBrowserParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBrowserChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_AsyncMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AsyncMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PDocAccessibleConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PDocAccessibleConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PDocAccessibleConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PDocAccessibleConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PPluginWidgetConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPluginWidgetConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPluginWidgetConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPluginWidgetConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PPaymentRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PPaymentRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PPaymentRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PPaymentRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PVsyncConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PVsyncConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PVsyncConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PVsyncConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetNativeChildOfShareableWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetNativeChildOfShareableWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DispatchFocusToTopLevelWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DispatchFocusToTopLevelWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DispatchFocusToTopLevelWindow(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DispatchFocusToTopLevelWindow__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_MoveFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MoveFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SizeShellTo(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SizeShellTo__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DropLinks(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DropLinks__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Event(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Event__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SyncMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SyncMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SyncMessage(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SyncMessage__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NotifyIMEFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyIMEFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NotifyIMEFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NotifyIMEFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NotifyIMETextChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyIMETextChange__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyIMECompositionUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyIMECompositionUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyIMESelection(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyIMESelection__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateContentCache(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateContentCache__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyIMEMouseButtonEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyIMEMouseButtonEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_NotifyIMEMouseButtonEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_NotifyIMEMouseButtonEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_NotifyIMEPositionChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyIMEPositionChange__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestIMEToCommitComposition(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestIMEToCommitComposition__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RequestIMEToCommitComposition(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RequestIMEToCommitComposition__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_OnEventNeedingAckHandled(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnEventNeedingAckHandled__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestFocus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestFocus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_WheelZoomChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WheelZoomChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_EnableDisableCommands(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EnableDisableCommands__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_GetInputContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetInputContext__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetInputContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetInputContext__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SetInputContext(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetInputContext__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetCursor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetCursor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetLinkStatus(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetLinkStatus__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ShowTooltip(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShowTooltip__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_HideTooltip(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HideTooltip__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PColorPickerConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PColorPickerConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PColorPickerConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PColorPickerConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_PFilePickerConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PFilePickerConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PFilePickerConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PFilePickerConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_IndexedDBPermissionRequest(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IndexedDBPermissionRequest__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_IndexedDBPermissionRequest(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_IndexedDBPermissionRequest__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_RespondStartSwipeEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RespondStartSwipeEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AsyncAuthPrompt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AsyncAuthPrompt__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LookUpDictionary(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LookUpDictionary__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ReplyKeyEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReplyKeyEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestNativeKeyBindings(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestNativeKeyBindings__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RequestNativeKeyBindings(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RequestNativeKeyBindings__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_SynthesizeNativeKeyEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynthesizeNativeKeyEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SynthesizeNativeMouseEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynthesizeNativeMouseEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SynthesizeNativeMouseMove(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynthesizeNativeMouseMove__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SynthesizeNativeMouseScrollEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynthesizeNativeMouseScrollEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SynthesizeNativeTouchPoint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynthesizeNativeTouchPoint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SynthesizeNativeTouchPadPinch(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynthesizeNativeTouchPadPinch__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SynthesizeNativeTouchTap(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynthesizeNativeTouchTap__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ClearNativeTouchSequence(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ClearNativeTouchSequence__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AccessKeyNotHandled(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AccessKeyNotHandled__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RegisterProtocolHandler(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RegisterProtocolHandler__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnStateChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnStateChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnProgressChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnProgressChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnLocationChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnLocationChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_OnStatusChange(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_OnStatusChange__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NotifyContentBlockingEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NotifyContentBlockingEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NavigationFinished(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NavigationFinished__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SessionStoreUpdate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SessionStoreUpdate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_IntrinsicSizeOrRatioChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IntrinsicSizeOrRatioChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestPointerLock(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestPointerLock__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RequestPointerLock(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RequestPointerLock__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ReleasePointerLock(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReleasePointerLock__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestPointerCapture(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestPointerCapture__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_RequestPointerCapture(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_RequestPointerCapture__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ReleasePointerCapture(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReleasePointerCapture__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NativeSynthesisResponse(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NativeSynthesisResponse__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_FlushTabState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_FlushTabState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateEpoch(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateEpoch__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateSHistory(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateSHistory__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CloneDocumentTreeIntoSelf(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CloneDocumentTreeIntoSelf__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ReleaseAllPointerCapture(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ReleaseAllPointerCapture__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemotePaintIsReady(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemotePaintIsReady__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RemoteIsReadyToHandleInputEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RemoteIsReadyToHandleInputEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PaintWhileInterruptingJSNoOp(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PaintWhileInterruptingJSNoOp__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateEffects(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateEffects__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetDimensions(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetDimensions__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DispatchWheelEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DispatchWheelEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DispatchWheelEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DispatchWheelEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DispatchMouseEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DispatchMouseEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DispatchMouseEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DispatchMouseEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_DispatchKeyboardEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DispatchKeyboardEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_DispatchKeyboardEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_DispatchKeyboardEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_InvokeDragSession(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InvokeDragSession__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_EnsureLayersConnected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_EnsureLayersConnected__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_EnsureLayersConnected(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_EnsureLayersConnected__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ShowCanvasPermissionPrompt(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ShowCanvasPermissionPrompt__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetSystemFont(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetSystemFont__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_SetSystemFont(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_SetSystemFont__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_GetSystemFont(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_GetSystemFont__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_GetSystemFont(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_GetSystemFont__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::SYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_MaybeFireEmbedderLoadEvents(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MaybeFireEmbedderLoadEvents__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ScrollRectIntoView(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScrollRectIntoView__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetAllowDeprecatedTls(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetAllowDeprecatedTls__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Show(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Show__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Activate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Activate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Deactivate(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Deactivate__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ScrollbarPreferenceChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ScrollbarPreferenceChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_InitRendering(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_InitRendering__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CompositorOptionsChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CompositorOptionsChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LoadURL(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LoadURL__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ResumeLoad(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ResumeLoad__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateDimensions(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateDimensions__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ALL, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SizeModeChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SizeModeChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ChildToParentMatrix(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ChildToParentMatrix__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetIsUnderHiddenEmbedderElement(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetIsUnderHiddenEmbedderElement__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DynamicToolbarMaxHeightChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DynamicToolbarMaxHeightChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_DynamicToolbarOffsetChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DynamicToolbarOffsetChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetKeyboardIndicators(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetKeyboardIndicators__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_StopIMEStateManagement(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_StopIMEStateManagement__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_MouseEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MouseEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RealMouseMoveEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RealMouseMoveEvent__ID, 192, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY), true);
}
IPC::Message*
Msg_NormalPriorityRealMouseMoveEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityRealMouseMoveEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RealMouseMoveEventForTests(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RealMouseMoveEventForTests__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityRealMouseMoveEventForTests(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityRealMouseMoveEventForTests__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SynthMouseMoveEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SynthMouseMoveEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPrioritySynthMouseMoveEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPrioritySynthMouseMoveEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RealMouseButtonEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RealMouseButtonEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityRealMouseButtonEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityRealMouseButtonEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RealKeyEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RealKeyEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityRealKeyEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityRealKeyEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_MouseWheelEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_MouseWheelEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityMouseWheelEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityMouseWheelEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RealTouchEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RealTouchEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityRealTouchEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityRealTouchEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_HandleTap(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HandleTap__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityHandleTap(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityHandleTap__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RealTouchMoveEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RealTouchMoveEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityRealTouchMoveEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityRealTouchMoveEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RealTouchMoveEvent2(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RealTouchMoveEvent2__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityRealTouchMoveEvent2(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityRealTouchMoveEvent2__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ENABLED, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RealDragEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RealDragEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_CompositionEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_CompositionEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPriorityCompositionEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPriorityCompositionEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SelectionEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SelectionEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::INPUT_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NormalPrioritySelectionEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NormalPrioritySelectionEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PasteTransferable(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PasteTransferable__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_ActivateFrameEvent(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ActivateFrameEvent__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_LoadRemoteScript(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_LoadRemoteScript__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Destroy(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Destroy__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RenderLayers(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RenderLayers__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SuppressDisplayport(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SuppressDisplayport__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NavigateByKey(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NavigateByKey__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_RequestNotifyAfterRemotePaint(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_RequestNotifyAfterRemotePaint__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UIResolutionChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UIResolutionChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SafeAreaInsetsChanged(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SafeAreaInsetsChanged__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SwappedWithOtherRemoteLoader(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SwappedWithOtherRemoteLoader__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_HandleAccessKey(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_HandleAccessKey__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PrintPreview(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PrintPreview__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PrintPreview(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PrintPreview__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_ExitPrintPreview(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_ExitPrintPreview__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Print(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Print__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_UpdateNativeWindowHandle(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_UpdateNativeWindowHandle__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_AllowScriptsToClose(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AllowScriptsToClose__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_SetWidgetNativeData(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_SetWidgetNativeData__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_WillChangeProcess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_WillChangeProcess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_WillChangeProcess(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_WillChangeProcess__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_IsWindowSupportingProtectedMedia(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IsWindowSupportingProtectedMedia__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_IsWindowSupportingProtectedMedia(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_IsWindowSupportingProtectedMedia__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_IsWindowSupportingWebVR(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_IsWindowSupportingWebVR__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_IsWindowSupportingWebVR(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_IsWindowSupportingWebVR__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_VisitURI(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_VisitURI__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_QueryVisitedState(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_QueryVisitedState__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_NewWindowGlobal(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_NewWindowGlobal__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PBrowser
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebProgressData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebProgressData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isTopLevel());
    // Sentinel = 'isTopLevel'
    (aMsg)->WriteSentinel(371196936);
    WriteIPDLParam(aMsg, aActor, (aVar).isLoadingDocument());
    // Sentinel = 'isLoadingDocument'
    (aMsg)->WriteSentinel(1019348698);
    (aMsg)->WriteBytes((&((aVar).loadType())), 4);
    // Sentinel = 'loadType'
    (aMsg)->WriteSentinel(246088515);
}

auto IPDLParamTraits<mozilla::dom::WebProgressData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isTopLevel())))))) {
        aActor->FatalError("Error deserializing 'isTopLevel' (bool) member of 'WebProgressData'");
        return false;
    }
    // Sentinel = 'isTopLevel'
    if ((!((aMsg)->ReadSentinel(aIter, 371196936)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isTopLevel' (bool) member of 'WebProgressData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isLoadingDocument())))))) {
        aActor->FatalError("Error deserializing 'isLoadingDocument' (bool) member of 'WebProgressData'");
        return false;
    }
    // Sentinel = 'isLoadingDocument'
    if ((!((aMsg)->ReadSentinel(aIter, 1019348698)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isLoadingDocument' (bool) member of 'WebProgressData'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->loadType())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'loadType'
    if ((!((aMsg)->ReadSentinel(aIter, 246088515)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RequestData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RequestData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).requestURI());
    // Sentinel = 'requestURI'
    (aMsg)->WriteSentinel(387908602);
    WriteIPDLParam(aMsg, aActor, (aVar).originalRequestURI());
    // Sentinel = 'originalRequestURI'
    (aMsg)->WriteSentinel(1180960559);
    WriteIPDLParam(aMsg, aActor, (aVar).matchedList());
    // Sentinel = 'matchedList'
    (aMsg)->WriteSentinel(446628979);
}

auto IPDLParamTraits<mozilla::dom::RequestData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestURI())))))) {
        aActor->FatalError("Error deserializing 'requestURI' (nsIURI) member of 'RequestData'");
        return false;
    }
    // Sentinel = 'requestURI'
    if ((!((aMsg)->ReadSentinel(aIter, 387908602)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestURI' (nsIURI) member of 'RequestData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->originalRequestURI())))))) {
        aActor->FatalError("Error deserializing 'originalRequestURI' (nsIURI) member of 'RequestData'");
        return false;
    }
    // Sentinel = 'originalRequestURI'
    if ((!((aMsg)->ReadSentinel(aIter, 1180960559)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'originalRequestURI' (nsIURI) member of 'RequestData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->matchedList())))))) {
        aActor->FatalError("Error deserializing 'matchedList' (nsCString) member of 'RequestData'");
        return false;
    }
    // Sentinel = 'matchedList'
    if ((!((aMsg)->ReadSentinel(aIter, 446628979)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'matchedList' (nsCString) member of 'RequestData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebProgressStateChangeData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebProgressStateChangeData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isNavigating());
    // Sentinel = 'isNavigating'
    (aMsg)->WriteSentinel(529138917);
    WriteIPDLParam(aMsg, aActor, (aVar).mayEnableCharacterEncodingMenu());
    // Sentinel = 'mayEnableCharacterEncodingMenu'
    (aMsg)->WriteSentinel(3056798680);
    WriteIPDLParam(aMsg, aActor, (aVar).charsetAutodetected());
    // Sentinel = 'charsetAutodetected'
    (aMsg)->WriteSentinel(1302333382);
    WriteIPDLParam(aMsg, aActor, (aVar).contentType());
    // Sentinel = 'contentType'
    (aMsg)->WriteSentinel(465241246);
    WriteIPDLParam(aMsg, aActor, (aVar).charset());
    // Sentinel = 'charset'
    (aMsg)->WriteSentinel(191890155);
    WriteIPDLParam(aMsg, aActor, (aVar).documentURI());
    // Sentinel = 'documentURI'
    (aMsg)->WriteSentinel(453706832);
}

auto IPDLParamTraits<mozilla::dom::WebProgressStateChangeData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isNavigating())))))) {
        aActor->FatalError("Error deserializing 'isNavigating' (bool) member of 'WebProgressStateChangeData'");
        return false;
    }
    // Sentinel = 'isNavigating'
    if ((!((aMsg)->ReadSentinel(aIter, 529138917)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isNavigating' (bool) member of 'WebProgressStateChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mayEnableCharacterEncodingMenu())))))) {
        aActor->FatalError("Error deserializing 'mayEnableCharacterEncodingMenu' (bool) member of 'WebProgressStateChangeData'");
        return false;
    }
    // Sentinel = 'mayEnableCharacterEncodingMenu'
    if ((!((aMsg)->ReadSentinel(aIter, 3056798680)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mayEnableCharacterEncodingMenu' (bool) member of 'WebProgressStateChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->charsetAutodetected())))))) {
        aActor->FatalError("Error deserializing 'charsetAutodetected' (bool) member of 'WebProgressStateChangeData'");
        return false;
    }
    // Sentinel = 'charsetAutodetected'
    if ((!((aMsg)->ReadSentinel(aIter, 1302333382)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'charsetAutodetected' (bool) member of 'WebProgressStateChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentType())))))) {
        aActor->FatalError("Error deserializing 'contentType' (nsString) member of 'WebProgressStateChangeData'");
        return false;
    }
    // Sentinel = 'contentType'
    if ((!((aMsg)->ReadSentinel(aIter, 465241246)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentType' (nsString) member of 'WebProgressStateChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->charset())))))) {
        aActor->FatalError("Error deserializing 'charset' (nsString) member of 'WebProgressStateChangeData'");
        return false;
    }
    // Sentinel = 'charset'
    if ((!((aMsg)->ReadSentinel(aIter, 191890155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'charset' (nsString) member of 'WebProgressStateChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->documentURI())))))) {
        aActor->FatalError("Error deserializing 'documentURI' (nsIURI) member of 'WebProgressStateChangeData'");
        return false;
    }
    // Sentinel = 'documentURI'
    if ((!((aMsg)->ReadSentinel(aIter, 453706832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'documentURI' (nsIURI) member of 'WebProgressStateChangeData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct WebProgressLocationChangeData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::WebProgressLocationChangeData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isNavigating());
    // Sentinel = 'isNavigating'
    (aMsg)->WriteSentinel(529138917);
    WriteIPDLParam(aMsg, aActor, (aVar).isSyntheticDocument());
    // Sentinel = 'isSyntheticDocument'
    (aMsg)->WriteSentinel(1314719703);
    WriteIPDLParam(aMsg, aActor, (aVar).mayEnableCharacterEncodingMenu());
    // Sentinel = 'mayEnableCharacterEncodingMenu'
    (aMsg)->WriteSentinel(3056798680);
    WriteIPDLParam(aMsg, aActor, (aVar).charsetAutodetected());
    // Sentinel = 'charsetAutodetected'
    (aMsg)->WriteSentinel(1302333382);
    WriteIPDLParam(aMsg, aActor, (aVar).contentType());
    // Sentinel = 'contentType'
    (aMsg)->WriteSentinel(465241246);
    WriteIPDLParam(aMsg, aActor, (aVar).title());
    // Sentinel = 'title'
    (aMsg)->WriteSentinel(109445667);
    WriteIPDLParam(aMsg, aActor, (aVar).charset());
    // Sentinel = 'charset'
    (aMsg)->WriteSentinel(191890155);
    WriteIPDLParam(aMsg, aActor, (aVar).documentURI());
    // Sentinel = 'documentURI'
    (aMsg)->WriteSentinel(453706832);
    WriteIPDLParam(aMsg, aActor, (aVar).contentPrincipal());
    // Sentinel = 'contentPrincipal'
    (aMsg)->WriteSentinel(948635294);
    WriteIPDLParam(aMsg, aActor, (aVar).contentPartitionedPrincipal());
    // Sentinel = 'contentPartitionedPrincipal'
    (aMsg)->WriteSentinel(2628651809);
    WriteIPDLParam(aMsg, aActor, (aVar).csp());
    // Sentinel = 'csp'
    (aMsg)->WriteSentinel(42074439);
    WriteIPDLParam(aMsg, aActor, (aVar).referrerInfo());
    // Sentinel = 'referrerInfo'
    (aMsg)->WriteSentinel(540214506);
    WriteIPDLParam(aMsg, aActor, (aVar).requestContextID());
    // Sentinel = 'requestContextID'
    (aMsg)->WriteSentinel(956761724);
}

auto IPDLParamTraits<mozilla::dom::WebProgressLocationChangeData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isNavigating())))))) {
        aActor->FatalError("Error deserializing 'isNavigating' (bool) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'isNavigating'
    if ((!((aMsg)->ReadSentinel(aIter, 529138917)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isNavigating' (bool) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isSyntheticDocument())))))) {
        aActor->FatalError("Error deserializing 'isSyntheticDocument' (bool) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'isSyntheticDocument'
    if ((!((aMsg)->ReadSentinel(aIter, 1314719703)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isSyntheticDocument' (bool) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mayEnableCharacterEncodingMenu())))))) {
        aActor->FatalError("Error deserializing 'mayEnableCharacterEncodingMenu' (bool) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'mayEnableCharacterEncodingMenu'
    if ((!((aMsg)->ReadSentinel(aIter, 3056798680)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mayEnableCharacterEncodingMenu' (bool) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->charsetAutodetected())))))) {
        aActor->FatalError("Error deserializing 'charsetAutodetected' (bool) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'charsetAutodetected'
    if ((!((aMsg)->ReadSentinel(aIter, 1302333382)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'charsetAutodetected' (bool) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentType())))))) {
        aActor->FatalError("Error deserializing 'contentType' (nsString) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'contentType'
    if ((!((aMsg)->ReadSentinel(aIter, 465241246)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentType' (nsString) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->title())))))) {
        aActor->FatalError("Error deserializing 'title' (nsString) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'title'
    if ((!((aMsg)->ReadSentinel(aIter, 109445667)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'title' (nsString) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->charset())))))) {
        aActor->FatalError("Error deserializing 'charset' (nsString) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'charset'
    if ((!((aMsg)->ReadSentinel(aIter, 191890155)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'charset' (nsString) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->documentURI())))))) {
        aActor->FatalError("Error deserializing 'documentURI' (nsIURI) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'documentURI'
    if ((!((aMsg)->ReadSentinel(aIter, 453706832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'documentURI' (nsIURI) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentPrincipal())))))) {
        aActor->FatalError("Error deserializing 'contentPrincipal' (nsIPrincipal) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'contentPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 948635294)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentPrincipal' (nsIPrincipal) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentPartitionedPrincipal())))))) {
        aActor->FatalError("Error deserializing 'contentPartitionedPrincipal' (nsIPrincipal) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'contentPartitionedPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 2628651809)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentPartitionedPrincipal' (nsIPrincipal) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->csp())))))) {
        aActor->FatalError("Error deserializing 'csp' (nsIContentSecurityPolicy) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'csp'
    if ((!((aMsg)->ReadSentinel(aIter, 42074439)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'csp' (nsIContentSecurityPolicy) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrerInfo())))))) {
        aActor->FatalError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'referrerInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 540214506)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'WebProgressLocationChangeData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->requestContextID())))))) {
        aActor->FatalError("Error deserializing 'requestContextID' (uint64_t?) member of 'WebProgressLocationChangeData'");
        return false;
    }
    // Sentinel = 'requestContextID'
    if ((!((aMsg)->ReadSentinel(aIter, 956761724)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'requestContextID' (uint64_t?) member of 'WebProgressLocationChangeData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PrintPreviewResultInfo|
//
namespace mozilla {
namespace dom {
auto PrintPreviewResultInfo::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(PrintPreviewResultInfo, totalPageCount_) - offsetof(PrintPreviewResultInfo, sheetCount_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PrintPreviewResultInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).isEmpty());
    // Sentinel = 'isEmpty'
    (aMsg)->WriteSentinel(190186220);
    WriteIPDLParam(aMsg, aActor, (aVar).hasSelection());
    // Sentinel = 'hasSelection'
    (aMsg)->WriteSentinel(524289251);
    WriteIPDLParam(aMsg, aActor, (aVar).hasSelfSelection());
    // Sentinel = 'hasSelfSelection'
    (aMsg)->WriteSentinel(902235757);
    (aMsg)->WriteBytes((&((aVar).sheetCount())), 8);
    // Sentinel = 'sheetCount | totalPageCount'
    (aMsg)->WriteSentinel(2469333641);
}

auto IPDLParamTraits<mozilla::dom::PrintPreviewResultInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isEmpty())))))) {
        aActor->FatalError("Error deserializing 'isEmpty' (bool) member of 'PrintPreviewResultInfo'");
        return false;
    }
    // Sentinel = 'isEmpty'
    if ((!((aMsg)->ReadSentinel(aIter, 190186220)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isEmpty' (bool) member of 'PrintPreviewResultInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasSelection())))))) {
        aActor->FatalError("Error deserializing 'hasSelection' (bool) member of 'PrintPreviewResultInfo'");
        return false;
    }
    // Sentinel = 'hasSelection'
    if ((!((aMsg)->ReadSentinel(aIter, 524289251)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasSelection' (bool) member of 'PrintPreviewResultInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasSelfSelection())))))) {
        aActor->FatalError("Error deserializing 'hasSelfSelection' (bool) member of 'PrintPreviewResultInfo'");
        return false;
    }
    // Sentinel = 'hasSelfSelection'
    if ((!((aMsg)->ReadSentinel(aIter, 902235757)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasSelfSelection' (bool) member of 'PrintPreviewResultInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->sheetCount())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'sheetCount | totalPageCount'
    if ((!((aMsg)->ReadSentinel(aIter, 2469333641)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
