//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PPaymentRequestParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/PaymentRequestParent.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "nsIPrincipal.h"

#include "mozilla/dom/PBrowserParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PPaymentRequestParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PPaymentRequestParent::PPaymentRequestParent() :
    mozilla::ipc::IProtocol(PPaymentRequestMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PPaymentRequestParent);
}

PPaymentRequestParent::~PPaymentRequestParent()
{
    MOZ_COUNT_DTOR(PPaymentRequestParent);
}

auto PPaymentRequestParent::Manager() const -> PBrowserParent*
{
    return static_cast<PBrowserParent*>(IProtocol::Manager());
}

auto PPaymentRequestParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PPaymentRequestParent::SendRespondPayment(const IPCPaymentActionResponse& aResponse) -> bool
{
    IPC::Message* msg__ = PPaymentRequest::Msg_RespondPayment(Id());

    WriteIPDLParam(msg__, this, aResponse);
    // Sentinel = 'aResponse'
    (msg__)->WriteSentinel(301466545);




    if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPaymentRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPaymentRequest::Msg_RespondPayment", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPaymentRequestParent::SendChangeShippingAddress(
        const nsString& aRequestId,
        const IPCPaymentAddress& aAddress) -> bool
{
    IPC::Message* msg__ = PPaymentRequest::Msg_ChangeShippingAddress(Id());

    WriteIPDLParam(msg__, this, aRequestId);
    // Sentinel = 'aRequestId'
    (msg__)->WriteSentinel(365560824);
    WriteIPDLParam(msg__, this, aAddress);
    // Sentinel = 'aAddress'
    (msg__)->WriteSentinel(225641256);




    if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPaymentRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPaymentRequest::Msg_ChangeShippingAddress", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPaymentRequestParent::SendChangeShippingOption(
        const nsString& aRequestId,
        const nsString& aOption) -> bool
{
    IPC::Message* msg__ = PPaymentRequest::Msg_ChangeShippingOption(Id());

    WriteIPDLParam(msg__, this, aRequestId);
    // Sentinel = 'aRequestId'
    (msg__)->WriteSentinel(365560824);
    WriteIPDLParam(msg__, this, aOption);
    // Sentinel = 'aOption'
    (msg__)->WriteSentinel(185533147);




    if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPaymentRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPaymentRequest::Msg_ChangeShippingOption", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPaymentRequestParent::SendChangePayerDetail(
        const nsString& aRequestId,
        const nsString& aPayerName,
        const nsString& aPayerEmail,
        const nsString& aPayerPhone) -> bool
{
    IPC::Message* msg__ = PPaymentRequest::Msg_ChangePayerDetail(Id());

    WriteIPDLParam(msg__, this, aRequestId);
    // Sentinel = 'aRequestId'
    (msg__)->WriteSentinel(365560824);
    WriteIPDLParam(msg__, this, aPayerName);
    // Sentinel = 'aPayerName'
    (msg__)->WriteSentinel(355271652);
    WriteIPDLParam(msg__, this, aPayerEmail);
    // Sentinel = 'aPayerEmail'
    (msg__)->WriteSentinel(425985099);
    WriteIPDLParam(msg__, this, aPayerPhone);
    // Sentinel = 'aPayerPhone'
    (msg__)->WriteSentinel(431227997);




    if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPaymentRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPaymentRequest::Msg_ChangePayerDetail", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPaymentRequestParent::SendChangePaymentMethod(
        const nsString& aRequestId,
        const nsString& aMethodName,
        const IPCMethodChangeDetails& aMethodDetails) -> bool
{
    IPC::Message* msg__ = PPaymentRequest::Msg_ChangePaymentMethod(Id());

    WriteIPDLParam(msg__, this, aRequestId);
    // Sentinel = 'aRequestId'
    (msg__)->WriteSentinel(365560824);
    WriteIPDLParam(msg__, this, aMethodName);
    // Sentinel = 'aMethodName'
    (msg__)->WriteSentinel(426050628);
    WriteIPDLParam(msg__, this, aMethodDetails);
    // Sentinel = 'aMethodDetails'
    (msg__)->WriteSentinel(681313673);




    if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PPaymentRequestParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PPaymentRequest::Msg_ChangePaymentMethod", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PPaymentRequestParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PPaymentRequestParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PPaymentRequestParent::OnMessageReceived(const Message& msg__) -> PPaymentRequestParent::Result
{
    switch (msg__.type()) {
    case PPaymentRequest::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPaymentRequestParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPaymentRequest::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PPaymentRequestParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PPaymentRequest'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PPaymentRequest'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PPaymentRequest'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PaymentRequestParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PPaymentRequestMsgStart, actor);

            return MsgProcessed;
        }
    case PPaymentRequest::Msg_RequestPayment__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PPaymentRequestParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PPaymentRequestParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PPaymentRequest::Msg_RequestPayment", OTHER);

            PickleIterator iter__{msg__};
            IPCPaymentActionRequest aAction{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aAction)))))) {
                FatalError("Error deserializing 'IPCPaymentActionRequest'");
                return MsgValueError;
            }
            // Sentinel = 'aAction'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 175768256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCPaymentActionRequest'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<PaymentRequestParent*>(this))->RecvRequestPayment(std::move(aAction))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PPaymentRequestParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PPaymentRequestParent::Result
{
    return MsgNotKnown;
}

auto PPaymentRequestParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PPaymentRequestParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PPaymentRequestParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PPaymentRequestParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PPaymentRequestParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PPaymentRequest", PPaymentRequestMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PPaymentRequestParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
