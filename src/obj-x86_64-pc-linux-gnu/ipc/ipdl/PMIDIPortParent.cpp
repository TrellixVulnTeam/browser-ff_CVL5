//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PMIDIPortParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/MIDIPortParent.h"

#include "mozilla/ipc/PBackgroundParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


MOZ_IMPLICIT PMIDIPortParent::PMIDIPortParent() :
    mozilla::ipc::IProtocol(PMIDIPortMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PMIDIPortParent);
}

PMIDIPortParent::~PMIDIPortParent()
{
    MOZ_COUNT_DTOR(PMIDIPortParent);
}

auto PMIDIPortParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PMIDIPortParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PMIDIPortParent::SendReceive(const nsTArray<MIDIMessage>& msg) -> bool
{
    IPC::Message* msg__ = PMIDIPort::Msg_Receive(Id());

    WriteIPDLParam(msg__, this, msg);
    // Sentinel = 'msg'
    (msg__)->WriteSentinel(43450696);




    if (mozilla::ipc::LoggingEnabledFor("PMIDIPortParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMIDIPortParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMIDIPort::Msg_Receive", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMIDIPortParent::SendUpdateStatus(
        const uint32_t& deviceState,
        const uint32_t& connectionState) -> bool
{
    IPC::Message* msg__ = PMIDIPort::Msg_UpdateStatus(Id());

    WriteIPDLParam(msg__, this, deviceState);
    // Sentinel = 'deviceState'
    (msg__)->WriteSentinel(447284338);
    WriteIPDLParam(msg__, this, connectionState);
    // Sentinel = 'connectionState'
    (msg__)->WriteSentinel(834209330);




    if (mozilla::ipc::LoggingEnabledFor("PMIDIPortParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMIDIPortParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMIDIPort::Msg_UpdateStatus", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PMIDIPortParent::Send__delete__(PMIDIPortParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PMIDIPort::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PMIDIPortParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PMIDIPortParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PMIDIPort::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PMIDIPortMsgStart, actor);
    return sendok__;
}

auto PMIDIPortParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PMIDIPortParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PMIDIPortParent::OnMessageReceived(const Message& msg__) -> PMIDIPortParent::Result
{
    switch (msg__.type()) {
    case PMIDIPort::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMIDIPortParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMIDIPortParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMIDIPort::Msg_Shutdown", OTHER);

            if ((!((static_cast<MIDIPortParent*>(this))->RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMIDIPort::Msg_Send__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMIDIPortParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMIDIPortParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMIDIPort::Msg_Send", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<MIDIMessage> msg{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(msg)))))) {
                FatalError("Error deserializing 'MIDIMessage[]'");
                return MsgValueError;
            }
            // Sentinel = 'msg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 43450696)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'MIDIMessage[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<MIDIPortParent*>(this))->RecvSend(std::move(msg))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMIDIPort::Msg_Open__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMIDIPortParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMIDIPortParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMIDIPort::Msg_Open", OTHER);

            if ((!((static_cast<MIDIPortParent*>(this))->RecvOpen()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMIDIPort::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMIDIPortParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMIDIPortParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMIDIPort::Msg_Close", OTHER);

            if ((!((static_cast<MIDIPortParent*>(this))->RecvClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMIDIPort::Msg_Clear__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PMIDIPortParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PMIDIPortParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PMIDIPort::Msg_Clear", OTHER);

            if ((!((static_cast<MIDIPortParent*>(this))->RecvClear()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PMIDIPort::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PMIDIPortParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PMIDIPortParent::Result
{
    return MsgNotKnown;
}

auto PMIDIPortParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PMIDIPortParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PMIDIPortParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PMIDIPortParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PMIDIPortParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PMIDIPort", PMIDIPortMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PMIDIPortParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
