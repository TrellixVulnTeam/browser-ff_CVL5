//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PWebSocketParent.h"
#include "SerializedLoadContext.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/net/WebSocketChannelParent.h"

#include "mozilla/net/PNeckoParent.h"
#include "mozilla/dom/PBrowserParent.h"
#include "mozilla/net/PTransportProviderParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PWebSocketParent::PWebSocketParent() :
    mozilla::ipc::IProtocol(PWebSocketMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWebSocketParent);
}

PWebSocketParent::~PWebSocketParent()
{
    MOZ_COUNT_DTOR(PWebSocketParent);
}

auto PWebSocketParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PWebSocketParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebSocketParent::SendOnStart(
        const nsCString& aProtocol,
        const nsCString& aExtensions,
        const nsString& aEffectiveURL,
        const bool& aEncrypted,
        const uint64_t& aHttpChannelId) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_OnStart(Id());

    WriteIPDLParam(msg__, this, aProtocol);
    // Sentinel = 'aProtocol'
    (msg__)->WriteSentinel(303891380);
    WriteIPDLParam(msg__, this, aExtensions);
    // Sentinel = 'aExtensions'
    (msg__)->WriteSentinel(446039186);
    WriteIPDLParam(msg__, this, aEffectiveURL);
    // Sentinel = 'aEffectiveURL'
    (msg__)->WriteSentinel(581698790);
    WriteIPDLParam(msg__, this, aEncrypted);
    // Sentinel = 'aEncrypted'
    (msg__)->WriteSentinel(364446736);
    WriteIPDLParam(msg__, this, aHttpChannelId);
    // Sentinel = 'aHttpChannelId'
    (msg__)->WriteSentinel(681182568);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_OnStart", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketParent::SendOnStop(const nsresult& aStatusCode) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_OnStop(Id());

    WriteIPDLParam(msg__, this, aStatusCode);
    // Sentinel = 'aStatusCode'
    (msg__)->WriteSentinel(440337505);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_OnStop", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketParent::SendOnMessageAvailable(
        const nsDependentCSubstring& aMsg,
        const bool& aMoreData) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_OnMessageAvailable(Id());

    WriteIPDLParam(msg__, this, aMsg);
    // Sentinel = 'aMsg'
    (msg__)->WriteSentinel(62652809);
    WriteIPDLParam(msg__, this, aMoreData);
    // Sentinel = 'aMoreData'
    (msg__)->WriteSentinel(285475695);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_OnMessageAvailable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketParent::SendOnBinaryMessageAvailable(
        const nsDependentCSubstring& aMsg,
        const bool& aMoreData) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_OnBinaryMessageAvailable(Id());

    WriteIPDLParam(msg__, this, aMsg);
    // Sentinel = 'aMsg'
    (msg__)->WriteSentinel(62652809);
    WriteIPDLParam(msg__, this, aMoreData);
    // Sentinel = 'aMoreData'
    (msg__)->WriteSentinel(285475695);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_OnBinaryMessageAvailable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketParent::SendOnAcknowledge(const uint32_t& aSize) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_OnAcknowledge(Id());

    WriteIPDLParam(msg__, this, aSize);
    // Sentinel = 'aSize'
    (msg__)->WriteSentinel(97124861);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_OnAcknowledge", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketParent::SendOnServerClose(
        const uint16_t& code,
        const nsCString& aReason) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_OnServerClose(Id());

    WriteIPDLParam(msg__, this, code);
    // Sentinel = 'code'
    (msg__)->WriteSentinel(67764636);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg_OnServerClose", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketParent::Send__delete__(PWebSocketParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PWebSocket::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocket::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PWebSocketMsgStart, actor);
    return sendok__;
}

auto PWebSocketParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketParent::OnMessageReceived(const Message& msg__) -> PWebSocketParent::Result
{
    switch (msg__.type()) {
    case PWebSocket::Msg_AsyncOpen__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_AsyncOpen", OTHER);

            PickleIterator iter__{msg__};
            RefPtr<nsIURI> aURI{};
            nsCString aOrigin{};
            uint64_t aInnerWindowID{};
            nsCString aProtocol{};
            bool aSecure{};
            uint32_t aPingInterval{};
            bool aClientSetPingInterval{};
            uint32_t aPingTimeout{};
            bool aClientSetPingTimeout{};
            mozilla::Maybe<LoadInfoArgs> aLoadInfoArgs{};
            mozilla::Maybe<PTransportProviderParent*> aProvider{};
            nsCString aNegotiatedExtensions{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsIURI'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOrigin)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aOrigin'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 182125258)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aInnerWindowID)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aInnerWindowID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 687670627)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProtocol)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aProtocol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 303891380)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aSecure)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aSecure'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 181207753)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPingInterval)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPingInterval'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 595264821)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClientSetPingInterval)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aClientSetPingInterval'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1653999808)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aPingTimeout)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aPingTimeout'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 509215959)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aClientSetPingTimeout)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aClientSetPingTimeout'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1508509794)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLoadInfoArgs)))))) {
                FatalError("Error deserializing 'LoadInfoArgs?'");
                return MsgValueError;
            }
            // Sentinel = 'aLoadInfoArgs'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 571540731)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'LoadInfoArgs?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProvider)))))) {
                FatalError("Error deserializing 'PTransportProvider?'");
                return MsgValueError;
            }
            // Sentinel = 'aProvider'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 302252973)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PTransportProvider?'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aNegotiatedExtensions)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aNegotiatedExtensions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1547634838)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelParent*>(this))->RecvAsyncOpen(aURI, std::move(aOrigin), std::move(aInnerWindowID), std::move(aProtocol), std::move(aSecure), std::move(aPingInterval), std::move(aClientSetPingInterval), std::move(aPingTimeout), std::move(aClientSetPingTimeout), std::move(aLoadInfoArgs), std::move(aProvider), std::move(aNegotiatedExtensions))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_Close", OTHER);

            PickleIterator iter__{msg__};
            uint16_t code{};
            nsCString reason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(code)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'code'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67764636)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(reason)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'reason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 148112009)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelParent*>(this))->RecvClose(std::move(code), std::move(reason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_SendMsg__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_SendMsg", OTHER);

            PickleIterator iter__{msg__};
            nsCString aMsg{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMsg)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aMsg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 62652809)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelParent*>(this))->RecvSendMsg(std::move(aMsg))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_SendBinaryMsg__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_SendBinaryMsg", OTHER);

            PickleIterator iter__{msg__};
            nsCString aMsg{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMsg)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aMsg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 62652809)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelParent*>(this))->RecvSendBinaryMsg(std::move(aMsg))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_SendBinaryStream__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_SendBinaryStream", OTHER);

            PickleIterator iter__{msg__};
            IPCStream aStream{};
            uint32_t aLength{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aStream)))))) {
                FatalError("Error deserializing 'IPCStream'");
                return MsgValueError;
            }
            // Sentinel = 'aStream'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 185205454)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCStream'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aLength)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aLength'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 179045060)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketChannelParent*>(this))->RecvSendBinaryStream(std::move(aStream), std::move(aLength))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_DeleteSelf__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocket::Msg_DeleteSelf", OTHER);

            if ((!((static_cast<WebSocketChannelParent*>(this))->RecvDeleteSelf()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebSocketParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketParent::Result
{
    return MsgNotKnown;
}

auto PWebSocketParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebSocketParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PWebSocketParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PWebSocketParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebSocket", PWebSocketMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PWebSocketParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
