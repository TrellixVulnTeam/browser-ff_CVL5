//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/dom/indexedDB/SerializationHelpers.h"
#include "mozilla/ipc/IPCCore.h"

#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseRequestParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBTransactionParent.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBVersionChangeTransactionParent.h"
#include "mozilla/dom/PBackgroundMutableFileParent.h"
#include "mozilla/ipc/PChildToParentStreamParent.h"
#include "mozilla/ipc/PFileDescriptorSetParent.h"
#include "mozilla/ipc/PParentToChildStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace indexedDB {


auto PBackgroundIDBDatabaseParent::RecvPBackgroundIDBDatabaseFileConstructor(
        PBackgroundIDBDatabaseFileParent* actor,
        const IPCBlob& blob) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBackgroundIDBDatabaseParent::RecvPBackgroundIDBDatabaseRequestConstructor(
        PBackgroundIDBDatabaseRequestParent* actor,
        const DatabaseRequestParams& params) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PBackgroundIDBDatabaseParent::RecvPBackgroundIDBTransactionConstructor(
        PBackgroundIDBTransactionParent* actor,
        nsTArray<nsString>&& objectStoreNames,
        const Mode& mode) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundIDBDatabaseParent::PBackgroundIDBDatabaseParent() :
    mozilla::ipc::IProtocol(PBackgroundIDBDatabaseMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PBackgroundIDBDatabaseParent);
}

PBackgroundIDBDatabaseParent::~PBackgroundIDBDatabaseParent()
{
    MOZ_COUNT_DTOR(PBackgroundIDBDatabaseParent);
}

auto PBackgroundIDBDatabaseParent::Manager() const -> PBackgroundIDBFactoryParent*
{
    return static_cast<PBackgroundIDBFactoryParent*>(IProtocol::Manager());
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundIDBDatabaseFileParent(nsTArray<PBackgroundIDBDatabaseFileParent*>& aArr) const -> void
{
    mManagedPBackgroundIDBDatabaseFileParent.ToArray(aArr);
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundIDBDatabaseFileParent() const -> const ManagedContainer<PBackgroundIDBDatabaseFileParent>&
{
    return mManagedPBackgroundIDBDatabaseFileParent;
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundIDBDatabaseRequestParent(nsTArray<PBackgroundIDBDatabaseRequestParent*>& aArr) const -> void
{
    mManagedPBackgroundIDBDatabaseRequestParent.ToArray(aArr);
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundIDBDatabaseRequestParent() const -> const ManagedContainer<PBackgroundIDBDatabaseRequestParent>&
{
    return mManagedPBackgroundIDBDatabaseRequestParent;
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundIDBTransactionParent(nsTArray<PBackgroundIDBTransactionParent*>& aArr) const -> void
{
    mManagedPBackgroundIDBTransactionParent.ToArray(aArr);
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundIDBTransactionParent() const -> const ManagedContainer<PBackgroundIDBTransactionParent>&
{
    return mManagedPBackgroundIDBTransactionParent;
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundIDBVersionChangeTransactionParent(nsTArray<PBackgroundIDBVersionChangeTransactionParent*>& aArr) const -> void
{
    mManagedPBackgroundIDBVersionChangeTransactionParent.ToArray(aArr);
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundIDBVersionChangeTransactionParent() const -> const ManagedContainer<PBackgroundIDBVersionChangeTransactionParent>&
{
    return mManagedPBackgroundIDBVersionChangeTransactionParent;
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundMutableFileParent(nsTArray<PBackgroundMutableFileParent*>& aArr) const -> void
{
    mManagedPBackgroundMutableFileParent.ToArray(aArr);
}

auto PBackgroundIDBDatabaseParent::ManagedPBackgroundMutableFileParent() const -> const ManagedContainer<PBackgroundMutableFileParent>&
{
    return mManagedPBackgroundMutableFileParent;
}

auto PBackgroundIDBDatabaseParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPBackgroundIDBDatabaseFileParent.Count();
    total += mManagedPBackgroundIDBDatabaseRequestParent.Count();
    total += mManagedPBackgroundIDBTransactionParent.Count();
    total += mManagedPBackgroundIDBVersionChangeTransactionParent.Count();
    total += mManagedPBackgroundMutableFileParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPBackgroundIDBDatabaseFileParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundIDBDatabaseRequestParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundIDBTransactionParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundIDBVersionChangeTransactionParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

    for (auto it = mManagedPBackgroundMutableFileParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PBackgroundIDBDatabaseParent::OpenPBackgroundIDBDatabaseFileEndpoint(PBackgroundIDBDatabaseFileParent* aActor) -> ManagedEndpoint<PBackgroundIDBDatabaseFileChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseFileParent actor");
        return ManagedEndpoint<PBackgroundIDBDatabaseFileChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBDatabaseFileParent.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBDatabaseFileChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseParent::BindPBackgroundIDBDatabaseFileEndpoint(
        ManagedEndpoint<PBackgroundIDBDatabaseFileParent> aEndpoint,
        PBackgroundIDBDatabaseFileParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseFileParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBDatabaseFileParent.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseParent::OpenPBackgroundIDBDatabaseRequestEndpoint(PBackgroundIDBDatabaseRequestParent* aActor) -> ManagedEndpoint<PBackgroundIDBDatabaseRequestChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseRequestParent actor");
        return ManagedEndpoint<PBackgroundIDBDatabaseRequestChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBDatabaseRequestParent.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBDatabaseRequestChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseParent::BindPBackgroundIDBDatabaseRequestEndpoint(
        ManagedEndpoint<PBackgroundIDBDatabaseRequestParent> aEndpoint,
        PBackgroundIDBDatabaseRequestParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBDatabaseRequestParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBDatabaseRequestParent.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseParent::OpenPBackgroundIDBTransactionEndpoint(PBackgroundIDBTransactionParent* aActor) -> ManagedEndpoint<PBackgroundIDBTransactionChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBTransactionParent actor");
        return ManagedEndpoint<PBackgroundIDBTransactionChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBTransactionParent.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBTransactionChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseParent::BindPBackgroundIDBTransactionEndpoint(
        ManagedEndpoint<PBackgroundIDBTransactionParent> aEndpoint,
        PBackgroundIDBTransactionParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBTransactionParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBTransactionParent.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseParent::OpenPBackgroundIDBVersionChangeTransactionEndpoint(PBackgroundIDBVersionChangeTransactionParent* aActor) -> ManagedEndpoint<PBackgroundIDBVersionChangeTransactionChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBVersionChangeTransactionParent actor");
        return ManagedEndpoint<PBackgroundIDBVersionChangeTransactionChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBVersionChangeTransactionParent.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundIDBVersionChangeTransactionChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseParent::BindPBackgroundIDBVersionChangeTransactionEndpoint(
        ManagedEndpoint<PBackgroundIDBVersionChangeTransactionParent> aEndpoint,
        PBackgroundIDBVersionChangeTransactionParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundIDBVersionChangeTransactionParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundIDBVersionChangeTransactionParent.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseParent::OpenPBackgroundMutableFileEndpoint(PBackgroundMutableFileParent* aActor) -> ManagedEndpoint<PBackgroundMutableFileChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundMutableFileParent actor");
        return ManagedEndpoint<PBackgroundMutableFileChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPBackgroundMutableFileParent.PutEntry(aActor);

    return ManagedEndpoint<PBackgroundMutableFileChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PBackgroundIDBDatabaseParent::BindPBackgroundMutableFileEndpoint(
        ManagedEndpoint<PBackgroundMutableFileParent> aEndpoint,
        PBackgroundMutableFileParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PBackgroundMutableFileParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPBackgroundMutableFileParent.PutEntry(aActor);

    return true;
}

auto PBackgroundIDBDatabaseParent::Send__delete__(PBackgroundIDBDatabaseParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PBackgroundIDBDatabaseMsgStart, actor);
    return sendok__;
}

auto PBackgroundIDBDatabaseParent::SendVersionChange(
        const uint64_t& oldVersion,
        const mozilla::Maybe<uint64_t>& newVersion) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_VersionChange(Id());

    WriteIPDLParam(msg__, this, oldVersion);
    // Sentinel = 'oldVersion'
    (msg__)->WriteSentinel(378602534);
    WriteIPDLParam(msg__, this, newVersion);
    // Sentinel = 'newVersion'
    (msg__)->WriteSentinel(383779889);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_VersionChange", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseParent::SendInvalidate() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_Invalidate(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_Invalidate", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseParent::SendCloseAfterInvalidationComplete() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_CloseAfterInvalidationComplete(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_CloseAfterInvalidationComplete", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseParent::SendPBackgroundIDBVersionChangeTransactionConstructor(
        PBackgroundIDBVersionChangeTransactionParent* actor,
        const uint64_t& currentVersion,
        const uint64_t& requestedVersion,
        const int64_t& nextObjectStoreId,
        const int64_t& nextIndexId) -> PBackgroundIDBVersionChangeTransactionParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundIDBVersionChangeTransactionParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundIDBVersionChangeTransactionParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_PBackgroundIDBVersionChangeTransactionConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, currentVersion);
    // Sentinel = 'currentVersion'
    (msg__)->WriteSentinel(744228330);
    WriteIPDLParam(msg__, this, requestedVersion);
    // Sentinel = 'requestedVersion'
    (msg__)->WriteSentinel(962660025);
    WriteIPDLParam(msg__, this, nextObjectStoreId);
    // Sentinel = 'nextObjectStoreId'
    (msg__)->WriteSentinel(1046087377);
    WriteIPDLParam(msg__, this, nextIndexId);
    // Sentinel = 'nextIndexId'
    (msg__)->WriteSentinel(453510245);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundIDBVersionChangeTransactionConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundIDBVersionChangeTransactionParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundIDBVersionChangeTransactionMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBDatabaseParent::SendPBackgroundMutableFileConstructor(
        const nsString& name,
        const nsString& type) -> PBackgroundMutableFileParent*
{
    PBackgroundMutableFileParent* actor = (this)->AllocPBackgroundMutableFileParent(name, type);
    return SendPBackgroundMutableFileConstructor(actor, name, type);
}

auto PBackgroundIDBDatabaseParent::SendPBackgroundMutableFileConstructor(
        PBackgroundMutableFileParent* actor,
        const nsString& name,
        const nsString& type) -> PBackgroundMutableFileParent*
{
    if (!actor) {
        NS_WARNING("Cannot bind null PBackgroundMutableFileParent actor");
        return nullptr;
    }

    actor->SetManagerAndRegister(this);
    mManagedPBackgroundMutableFileParent.PutEntry(actor);


    // Build our constructor message.
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_PBackgroundMutableFileConstructor(Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, this, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);
    WriteIPDLParam(msg__, this, name);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(69075362);
    WriteIPDLParam(msg__, this, type);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(75760067);




    // Notify the other side about the newly created actor. This can
    // fail if our manager has already been destroyed.
    //
    // NOTE: If the send call fails due to toplevel channel teardown,
    // the `IProtocol::ChannelSend` wrapper absorbs the error for us,
    // so we don't tear down actors unexpectedly.

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundIDBDatabaseParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundMutableFileConstructor", OTHER);

    bool sendok__ = ChannelSend(msg__);


    // Warn, destroy the actor, and return null if the message failed to
    // send. Otherwise, return the successfully created actor reference.
    if (!sendok__) {
        NS_WARNING("Error sending PBackgroundMutableFileParent constructor");
        IProtocol* mgr = actor->Manager();
        actor->DestroySubtree(FailedConstructor);
        actor->ClearSubtree();
        mgr->RemoveManagee(PBackgroundMutableFileMsgStart, actor);

        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBDatabaseParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBDatabaseFileMsgStart:
{
            PBackgroundIDBDatabaseFileParent* actor = static_cast<PBackgroundIDBDatabaseFileParent*>(aListener);
            auto& container = mManagedPBackgroundIDBDatabaseFileParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundIDBDatabaseRequestMsgStart:
{
            PBackgroundIDBDatabaseRequestParent* actor = static_cast<PBackgroundIDBDatabaseRequestParent*>(aListener);
            auto& container = mManagedPBackgroundIDBDatabaseRequestParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundIDBTransactionMsgStart:
{
            PBackgroundIDBTransactionParent* actor = static_cast<PBackgroundIDBTransactionParent*>(aListener);
            auto& container = mManagedPBackgroundIDBTransactionParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundIDBVersionChangeTransactionMsgStart:
{
            PBackgroundIDBVersionChangeTransactionParent* actor = static_cast<PBackgroundIDBVersionChangeTransactionParent*>(aListener);
            auto& container = mManagedPBackgroundIDBVersionChangeTransactionParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    case PBackgroundMutableFileMsgStart:
{
            PBackgroundMutableFileParent* actor = static_cast<PBackgroundMutableFileParent*>(aListener);
            auto& container = mManagedPBackgroundMutableFileParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PBackgroundIDBDatabaseParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBDatabaseFileMsgStart:
        this->DeallocPBackgroundIDBDatabaseFileParent(static_cast<PBackgroundIDBDatabaseFileParent*>(aListener));
        return;
    case PBackgroundIDBDatabaseRequestMsgStart:
        this->DeallocPBackgroundIDBDatabaseRequestParent(static_cast<PBackgroundIDBDatabaseRequestParent*>(aListener));
        return;
    case PBackgroundMutableFileMsgStart:
        this->DeallocPBackgroundMutableFileParent(static_cast<PBackgroundMutableFileParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PBackgroundIDBDatabaseParent::OnMessageReceived(const Message& msg__) -> PBackgroundIDBDatabaseParent::Result
{
    switch (msg__.type()) {
    case PBackgroundIDBDatabase::Msg_DeleteMe__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_DeleteMe", OTHER);

            if ((!((this)->RecvDeleteMe()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_Blocked__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_Blocked", OTHER);

            if ((!((this)->RecvBlocked()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_Close", OTHER);

            if ((!((this)->RecvClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseFileConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseFileConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            IPCBlob blob{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(blob)))))) {
                FatalError("Error deserializing 'IPCBlob'");
                return MsgValueError;
            }
            // Sentinel = 'blob'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 68157856)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'IPCBlob'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PBackgroundIDBDatabaseFileParent* actor = (this)->AllocPBackgroundIDBDatabaseFileParent(blob);
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundIDBDatabaseFileParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundIDBDatabaseFileParent.PutEntry(actor);

            if ((!((this)->RecvPBackgroundIDBDatabaseFileConstructor(std::move(actor), std::move(blob))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseRequestConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseRequestConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            DatabaseRequestParams params{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(params)))))) {
                FatalError("Error deserializing 'DatabaseRequestParams'");
                return MsgValueError;
            }
            // Sentinel = 'params'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 146997893)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'DatabaseRequestParams'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PBackgroundIDBDatabaseRequestParent* actor = (this)->AllocPBackgroundIDBDatabaseRequestParent(params);
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundIDBDatabaseRequestParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundIDBDatabaseRequestParent.PutEntry(actor);

            if ((!((this)->RecvPBackgroundIDBDatabaseRequestConstructor(std::move(actor), std::move(params))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_PBackgroundIDBTransactionConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundIDBDatabaseParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundIDBDatabase::Msg_PBackgroundIDBTransactionConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            nsTArray<nsString> objectStoreNames{};
            Mode mode{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(objectStoreNames)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'objectStoreNames'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 924780153)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(mode)))))) {
                FatalError("Error deserializing 'Mode'");
                return MsgValueError;
            }
            // Sentinel = 'mode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70386086)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'Mode'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            RefPtr<PBackgroundIDBTransactionParent> actor = (this)->AllocPBackgroundIDBTransactionParent(objectStoreNames, mode);
            if (!actor) {
                NS_WARNING("Cannot bind null PBackgroundIDBTransactionParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPBackgroundIDBTransactionParent.PutEntry(actor);

            if ((!((this)->RecvPBackgroundIDBTransactionConstructor(actor, std::move(objectStoreNames), std::move(mode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Reply_PBackgroundIDBVersionChangeTransactionConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Reply_PBackgroundMutableFileConstructor__ID:
        {
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundIDBDatabaseParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBDatabaseParent::Result
{
    return MsgNotKnown;
}

auto PBackgroundIDBDatabaseParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBDatabaseParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundIDBDatabaseParent::ClearSubtree() -> void
{
    for (auto it = mManagedPBackgroundIDBDatabaseFileParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBDatabaseFileParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBDatabaseFileParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBDatabaseFileParent.Clear();

    for (auto it = mManagedPBackgroundIDBDatabaseRequestParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBDatabaseRequestParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBDatabaseRequestParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBDatabaseRequestParent.Clear();

    for (auto it = mManagedPBackgroundIDBTransactionParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBTransactionParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBTransactionParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBTransactionParent.Clear();

    for (auto it = mManagedPBackgroundIDBVersionChangeTransactionParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundIDBVersionChangeTransactionParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundIDBVersionChangeTransactionParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundIDBVersionChangeTransactionParent.Clear();

    for (auto it = mManagedPBackgroundMutableFileParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPBackgroundMutableFileParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPBackgroundMutableFileParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPBackgroundMutableFileParent.Clear();

}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundIDBDatabase", PBackgroundIDBDatabaseMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::indexedDB::PBackgroundIDBDatabaseParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
