//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PRemoteDecoderManagerParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/RemoteDecoderManagerParent.h"
#include "mozilla/dom/MediaIPCUtils.h"
#include "mozilla/layers/CompositorTypes.h"
#include "mozilla/layers/LayersMessageUtils.h"

#include "mozilla/layers/PTextureParent.h"
#include "mozilla/PRemoteDecoderParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PRemoteDecoderManagerParent::RecvPRemoteDecoderConstructor(
        PRemoteDecoderParent* actor,
        const RemoteDecoderInfoIPDL& info,
        const OptionSet& options,
        const mozilla::Maybe<TextureFactoryIdentifier>& identifier) -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

auto PRemoteDecoderManagerParent::ProcessingError(
        Result aCode,
        const char* aReason) -> void
{
}

auto PRemoteDecoderManagerParent::ShouldContinueFromReplyTimeout() -> bool
{
    return true;
}

auto PRemoteDecoderManagerParent::EnteredCxxStack() -> void
{
}

auto PRemoteDecoderManagerParent::ExitedCxxStack() -> void
{
}

auto PRemoteDecoderManagerParent::EnteredCall() -> void
{
}

auto PRemoteDecoderManagerParent::ExitedCall() -> void
{
}

MOZ_IMPLICIT PRemoteDecoderManagerParent::PRemoteDecoderManagerParent() :
    mozilla::ipc::IToplevelProtocol("PRemoteDecoderManagerParent", PRemoteDecoderManagerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PRemoteDecoderManagerParent);
}

PRemoteDecoderManagerParent::~PRemoteDecoderManagerParent()
{
    MOZ_COUNT_DTOR(PRemoteDecoderManagerParent);
}

auto PRemoteDecoderManagerParent::ManagedPRemoteDecoderParent(nsTArray<PRemoteDecoderParent*>& aArr) const -> void
{
    mManagedPRemoteDecoderParent.ToArray(aArr);
}

auto PRemoteDecoderManagerParent::ManagedPRemoteDecoderParent() const -> const ManagedContainer<PRemoteDecoderParent>&
{
    return mManagedPRemoteDecoderParent;
}

auto PRemoteDecoderManagerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    total += mManagedPRemoteDecoderParent.Count();
    arr__.SetCapacity(total);

    for (auto it = mManagedPRemoteDecoderParent.ConstIter(); !it.Done(); it.Next()) {
        arr__.AppendElement(it.Get()->GetKey()->GetLifecycleProxy());
    }

}

auto PRemoteDecoderManagerParent::OpenPRemoteDecoderEndpoint(PRemoteDecoderParent* aActor) -> ManagedEndpoint<PRemoteDecoderChild>
{
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteDecoderParent actor");
        return ManagedEndpoint<PRemoteDecoderChild>();
    }

    aActor->SetManagerAndRegister(this);
    mManagedPRemoteDecoderParent.PutEntry(aActor);

    return ManagedEndpoint<PRemoteDecoderChild>(mozilla::ipc::PrivateIPDLInterface(), aActor->Id());
}

auto PRemoteDecoderManagerParent::BindPRemoteDecoderEndpoint(
        ManagedEndpoint<PRemoteDecoderParent> aEndpoint,
        PRemoteDecoderParent* aActor) -> bool
{
    MOZ_RELEASE_ASSERT(aEndpoint.ActorId(), "Invalid Endpoint!");
    if (!aActor) {
        NS_WARNING("Cannot bind null PRemoteDecoderParent actor");
        return false;
    }

    aActor->SetManagerAndRegister(this, *aEndpoint.ActorId());
    mManagedPRemoteDecoderParent.PutEntry(aActor);

    return true;
}

auto PRemoteDecoderManagerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PRemoteDecoderMsgStart:
{
            PRemoteDecoderParent* actor = static_cast<PRemoteDecoderParent*>(aListener);
            auto& container = mManagedPRemoteDecoderParent;

            // Use a temporary variable here so all the assertion expressions
            // in the MOZ_RELEASE_ASSERT call below are textually identical;
            // the linker can then merge the strings from the assertion macro(s).
            MOZ_RELEASE_ASSERT(container.Contains(actor),
                "actor not managed by this!");
            container.RemoveEntry(actor);

            auto* proxy = actor->GetLifecycleProxy();
            NS_IF_RELEASE(proxy);
            return;
        }    default:
FatalError("unreached");
        return;    }
}

auto PRemoteDecoderManagerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    switch (aProtocolId) {
    case PRemoteDecoderMsgStart:
        static_cast<RemoteDecoderManagerParent*>(this)->DeallocPRemoteDecoderParent(static_cast<PRemoteDecoderParent*>(aListener));
        return;
    default:
        FatalError("unreached");
        return;
    }
}

auto PRemoteDecoderManagerParent::OnMessageReceived(const Message& msg__) -> PRemoteDecoderManagerParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderManagerParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__);
    }

    switch (msg__.type()) {
    case PRemoteDecoderManager::Msg_PRemoteDecoderConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoderManager::Msg_PRemoteDecoderConstructor", OTHER);

            PickleIterator iter__{msg__};
            ActorHandle handle__{};
            RemoteDecoderInfoIPDL info{};
            OptionSet options{};
            mozilla::Maybe<TextureFactoryIdentifier> identifier{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(handle__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(info)))))) {
                FatalError("Error deserializing 'RemoteDecoderInfoIPDL'");
                return MsgValueError;
            }
            // Sentinel = 'info'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 70058413)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'RemoteDecoderInfoIPDL'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(options)))))) {
                FatalError("Error deserializing 'OptionSet'");
                return MsgValueError;
            }
            // Sentinel = 'options'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 204735245)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'OptionSet'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(identifier)))))) {
                FatalError("Error deserializing 'TextureFactoryIdentifier?'");
                return MsgValueError;
            }
            // Sentinel = 'identifier'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 379978788)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'TextureFactoryIdentifier?'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            PRemoteDecoderParent* actor = (static_cast<RemoteDecoderManagerParent*>(this))->AllocPRemoteDecoderParent(info, options, identifier);
            if (!actor) {
                NS_WARNING("Cannot bind null PRemoteDecoderParent actor");
                return MsgValueError;
            }

            actor->SetManagerAndRegister(this, (handle__).mId);
            mManagedPRemoteDecoderParent.PutEntry(actor);

            if ((!((static_cast<RemoteDecoderManagerParent*>(this))->RecvPRemoteDecoderConstructor(std::move(actor), std::move(info), std::move(options), std::move(identifier))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteDecoderManager::Msg_DeallocateSurfaceDescriptorGPUVideo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoderManager::Msg_DeallocateSurfaceDescriptorGPUVideo", OTHER);

            PickleIterator iter__{msg__};
            SurfaceDescriptorGPUVideo sd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sd)))))) {
                FatalError("Error deserializing 'SurfaceDescriptorGPUVideo'");
                return MsgValueError;
            }
            // Sentinel = 'sd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 21758168)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptorGPUVideo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteDecoderManagerParent*>(this))->RecvDeallocateSurfaceDescriptorGPUVideo(std::move(sd))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    case SHMEM_CREATED_MESSAGE_TYPE:
        {
            if (!ShmemCreated(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    case SHMEM_DESTROYED_MESSAGE_TYPE:
        {
            if (!ShmemDestroyed(msg__)) {
                return MsgPayloadError;
            }
            return MsgProcessed;
        }
    }
}

auto PRemoteDecoderManagerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteDecoderManagerParent::Result
{
    int32_t route__ = msg__.routing_id();
    if (MSG_ROUTING_CONTROL != route__) {
        IProtocol* routed__ = Lookup(route__);
        if (!routed__ || !routed__->GetLifecycleProxy()) {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderManagerParent",
                    OtherPid(),
                    "Ignored message for dead actor",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }

            return MsgProcessed;
        }

        RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
            routed__->GetLifecycleProxy();
        return proxy__->Get()->OnMessageReceived(msg__, reply__);
    }

    switch (msg__.type()) {
    case PRemoteDecoderManager::Msg_Readback__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderManagerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteDecoderManager::Msg_Readback", OTHER);

            PickleIterator iter__{msg__};
            SurfaceDescriptorGPUVideo sd{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(sd)))))) {
                FatalError("Error deserializing 'SurfaceDescriptorGPUVideo'");
                return MsgValueError;
            }
            // Sentinel = 'sd'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 21758168)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'SurfaceDescriptorGPUVideo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = MSG_ROUTING_CONTROL;
            SurfaceDescriptor aResult{};
            if ((!((static_cast<RemoteDecoderManagerParent*>(this))->RecvReadback(std::move(sd), (&(aResult)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PRemoteDecoderManager::Reply_Readback(id__);

            WriteIPDLParam(reply__, this, aResult);
            // Sentinel = 'aResult'
            (reply__)->WriteSentinel(185205473);

            if (mozilla::ipc::LoggingEnabledFor("PRemoteDecoderManagerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteDecoderManagerParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemoteDecoderManagerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteDecoderManagerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemoteDecoderManagerParent::OnChannelClose() -> void
{
    DestroySubtree(NormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PRemoteDecoderManagerParent::OnChannelError() -> void
{
    DestroySubtree(AbnormalShutdown);
    ClearSubtree();
    DeallocShmems();
    if (GetLifecycleProxy()) {
        GetLifecycleProxy()->Release();
    }
}

auto PRemoteDecoderManagerParent::ClearSubtree() -> void
{
    for (auto it = mManagedPRemoteDecoderParent.Iter(); !it.Done(); it.Next()) {
        it.Get()->GetKey()->ClearSubtree();
    }
    for (auto it = mManagedPRemoteDecoderParent.Iter(); !it.Done(); it.Next()) {
        // Recursively releasing mManagedPRemoteDecoderParent kids.
        auto* proxy = it.Get()->GetKey()->GetLifecycleProxy();
        NS_IF_RELEASE(proxy);
    }
    mManagedPRemoteDecoderParent.Clear();

}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PRemoteDecoderManagerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PRemoteDecoderManagerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemoteDecoderManager", PRemoteDecoderManagerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PRemoteDecoderManagerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
