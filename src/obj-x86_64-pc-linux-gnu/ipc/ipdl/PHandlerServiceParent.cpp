//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PHandlerServiceParent.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/dom/PContentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PHandlerServiceParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PHandlerServiceParent::PHandlerServiceParent() :
    mozilla::ipc::IProtocol(PHandlerServiceMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PHandlerServiceParent);
}

PHandlerServiceParent::~PHandlerServiceParent()
{
    MOZ_COUNT_DTOR(PHandlerServiceParent);
}

auto PHandlerServiceParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PHandlerServiceParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PHandlerServiceParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHandlerServiceParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PHandlerServiceParent::OnMessageReceived(const Message& msg__) -> PHandlerServiceParent::Result
{
    switch (msg__.type()) {
    case PHandlerService::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHandlerService::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PHandlerServiceParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PHandlerService'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PHandlerService'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PHandlerService'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PHandlerServiceMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHandlerServiceParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PHandlerServiceParent::Result
{
    switch (msg__.type()) {
    case PHandlerService::Msg_FillHandlerInfo__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHandlerService::Msg_FillHandlerInfo", OTHER);

            PickleIterator iter__{msg__};
            HandlerInfo aHandlerInfoData{};
            nsCString aOverrideType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHandlerInfoData)))))) {
                FatalError("Error deserializing 'HandlerInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aHandlerInfoData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 869860902)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HandlerInfo'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aOverrideType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aOverrideType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 611583300)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            HandlerInfo handlerInfoData{};
            if ((!((this)->RecvFillHandlerInfo(std::move(aHandlerInfoData), std::move(aOverrideType), (&(handlerInfoData)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHandlerService::Reply_FillHandlerInfo(id__);

            WriteIPDLParam(reply__, this, handlerInfoData);
            // Sentinel = 'handlerInfoData'
            (reply__)->WriteSentinel(799540709);

            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHandlerService::Msg_ExistsForProtocolOS__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHandlerService::Msg_ExistsForProtocolOS", OTHER);

            PickleIterator iter__{msg__};
            nsCString aProtocolScheme{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProtocolScheme)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aProtocolScheme'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 809764361)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool exists{};
            if ((!((this)->RecvExistsForProtocolOS(std::move(aProtocolScheme), (&(exists)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHandlerService::Reply_ExistsForProtocolOS(id__);

            WriteIPDLParam(reply__, this, exists);
            // Sentinel = 'exists'
            (reply__)->WriteSentinel(152306337);

            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHandlerService::Msg_ExistsForProtocol__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHandlerService::Msg_ExistsForProtocol", OTHER);

            PickleIterator iter__{msg__};
            nsCString aProtocolScheme{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProtocolScheme)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aProtocolScheme'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 809764361)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool exists{};
            if ((!((this)->RecvExistsForProtocol(std::move(aProtocolScheme), (&(exists)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHandlerService::Reply_ExistsForProtocol(id__);

            WriteIPDLParam(reply__, this, exists);
            // Sentinel = 'exists'
            (reply__)->WriteSentinel(152306337);

            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHandlerService::Msg_Exists__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHandlerService::Msg_Exists", OTHER);

            PickleIterator iter__{msg__};
            HandlerInfo aHandlerInfo{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHandlerInfo)))))) {
                FatalError("Error deserializing 'HandlerInfo'");
                return MsgValueError;
            }
            // Sentinel = 'aHandlerInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 497878188)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'HandlerInfo'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool exists{};
            if ((!((this)->RecvExists(std::move(aHandlerInfo), (&(exists)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHandlerService::Reply_Exists(id__);

            WriteIPDLParam(reply__, this, exists);
            // Sentinel = 'exists'
            (reply__)->WriteSentinel(152306337);

            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHandlerService::Msg_GetTypeFromExtension__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHandlerService::Msg_GetTypeFromExtension", OTHER);

            PickleIterator iter__{msg__};
            nsCString aFileExtension{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFileExtension)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aFileExtension'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681313695)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsCString type{};
            if ((!((this)->RecvGetTypeFromExtension(std::move(aFileExtension), (&(type)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHandlerService::Reply_GetTypeFromExtension(id__);

            WriteIPDLParam(reply__, this, type);
            // Sentinel = 'type'
            (reply__)->WriteSentinel(75760067);

            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHandlerService::Msg_GetMIMEInfoFromOS__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHandlerService::Msg_GetMIMEInfoFromOS", OTHER);

            PickleIterator iter__{msg__};
            nsCString aMIMEType{};
            nsCString aExtension{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMIMEType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aMIMEType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 251659052)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aExtension)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aExtension'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 369361951)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsresult rv{};
            HandlerInfo handlerInfoData{};
            bool found{};
            if ((!((this)->RecvGetMIMEInfoFromOS(std::move(aMIMEType), std::move(aExtension), (&(rv)), (&(handlerInfoData)), (&(found)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHandlerService::Reply_GetMIMEInfoFromOS(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);
            WriteIPDLParam(reply__, this, handlerInfoData);
            // Sentinel = 'handlerInfoData'
            (reply__)->WriteSentinel(799540709);
            WriteIPDLParam(reply__, this, found);
            // Sentinel = 'found'
            (reply__)->WriteSentinel(106824221);

            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PHandlerService::Msg_GetApplicationDescription__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PHandlerService::Msg_GetApplicationDescription", OTHER);

            PickleIterator iter__{msg__};
            nsCString aScheme{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aScheme)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aScheme'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 178062007)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            nsresult rv{};
            nsString description{};
            if ((!((this)->RecvGetApplicationDescription(std::move(aScheme), (&(rv)), (&(description)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PHandlerService::Reply_GetApplicationDescription(id__);

            WriteIPDLParam(reply__, this, rv);
            // Sentinel = 'rv'
            (reply__)->WriteSentinel(22806761);
            WriteIPDLParam(reply__, this, description);
            // Sentinel = 'description'
            (reply__)->WriteSentinel(461833381);

            if (mozilla::ipc::LoggingEnabledFor("PHandlerServiceParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PHandlerServiceParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PHandlerServiceParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PHandlerServiceParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PHandlerServiceParent::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PHandlerServiceParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PHandlerServiceParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PHandlerService", PHandlerServiceMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PHandlerServiceParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
