//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PWebSocketEventListenerChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/WebSocketEventListenerChild.h"
#include "mozilla/net/WebSocketFrame.h"

#include "mozilla/net/PNeckoChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


auto PWebSocketEventListenerChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PWebSocketEventListenerChild::PWebSocketEventListenerChild() :
    mozilla::ipc::IProtocol(PWebSocketEventListenerMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PWebSocketEventListenerChild);
}

PWebSocketEventListenerChild::~PWebSocketEventListenerChild()
{
    MOZ_COUNT_DTOR(PWebSocketEventListenerChild);
}

auto PWebSocketEventListenerChild::Manager() const -> PNeckoChild*
{
    return static_cast<PNeckoChild*>(IProtocol::Manager());
}

auto PWebSocketEventListenerChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebSocketEventListenerChild::SendClose() -> bool
{
    IPC::Message* msg__ = PWebSocketEventListener::Msg_Close(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketEventListenerChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_Close", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketEventListenerChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketEventListenerChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketEventListenerChild::OnMessageReceived(const Message& msg__) -> PWebSocketEventListenerChild::Result
{
    switch (msg__.type()) {
    case PWebSocketEventListener::Msg_WebSocketCreated__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketEventListenerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_WebSocketCreated", OTHER);

            PickleIterator iter__{msg__};
            uint32_t awebSocketSerialID{};
            nsString aURI{};
            nsCString aProtocols{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(awebSocketSerialID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'awebSocketSerialID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1140524790)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProtocols)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aProtocols'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 373556263)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketEventListenerChild*>(this))->RecvWebSocketCreated(std::move(awebSocketSerialID), std::move(aURI), std::move(aProtocols))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocketEventListener::Msg_WebSocketOpened__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketEventListenerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_WebSocketOpened", OTHER);

            PickleIterator iter__{msg__};
            uint32_t awebSocketSerialID{};
            nsString aEffectiveURI{};
            nsCString aProtocols{};
            nsCString aExtensions{};
            uint64_t aHttpChannelId{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(awebSocketSerialID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'awebSocketSerialID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1140524790)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEffectiveURI)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aEffectiveURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 581502179)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aProtocols)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aProtocols'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 373556263)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aExtensions)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aExtensions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 446039186)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aHttpChannelId)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aHttpChannelId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 681182568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketEventListenerChild*>(this))->RecvWebSocketOpened(std::move(awebSocketSerialID), std::move(aEffectiveURI), std::move(aProtocols), std::move(aExtensions), std::move(aHttpChannelId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocketEventListener::Msg_WebSocketMessageAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketEventListenerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_WebSocketMessageAvailable", OTHER);

            PickleIterator iter__{msg__};
            uint32_t awebSocketSerialID{};
            nsCString aData{};
            uint16_t aMessageType{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(awebSocketSerialID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'awebSocketSerialID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1140524790)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aData)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 90571228)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aMessageType)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'aMessageType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 512099529)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketEventListenerChild*>(this))->RecvWebSocketMessageAvailable(std::move(awebSocketSerialID), std::move(aData), std::move(aMessageType))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocketEventListener::Msg_WebSocketClosed__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketEventListenerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_WebSocketClosed", OTHER);

            PickleIterator iter__{msg__};
            uint32_t awebSocketSerialID{};
            bool aWasClean{};
            uint16_t aCode{};
            nsString aReason{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(awebSocketSerialID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'awebSocketSerialID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1140524790)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWasClean)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aWasClean'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 283181936)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aCode)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 91226589)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aReason)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 180093642)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketEventListenerChild*>(this))->RecvWebSocketClosed(std::move(awebSocketSerialID), std::move(aWasClean), std::move(aCode), std::move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocketEventListener::Msg_FrameReceived__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketEventListenerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_FrameReceived", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aWebSocketSerialID{};
            WebSocketFrameData aFrameData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWebSocketSerialID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWebSocketSerialID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1104873174)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrameData)))))) {
                FatalError("Error deserializing 'WebSocketFrameData'");
                return MsgValueError;
            }
            // Sentinel = 'aFrameData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 344196039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebSocketFrameData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketEventListenerChild*>(this))->RecvFrameReceived(std::move(aWebSocketSerialID), std::move(aFrameData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocketEventListener::Msg_FrameSent__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketEventListenerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_FrameSent", OTHER);

            PickleIterator iter__{msg__};
            uint32_t aWebSocketSerialID{};
            WebSocketFrameData aFrameData{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWebSocketSerialID)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aWebSocketSerialID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1104873174)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aFrameData)))))) {
                FatalError("Error deserializing 'WebSocketFrameData'");
                return MsgValueError;
            }
            // Sentinel = 'aFrameData'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 344196039)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'WebSocketFrameData'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketEventListenerChild*>(this))->RecvFrameSent(std::move(aWebSocketSerialID), std::move(aFrameData))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocketEventListener::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketEventListenerChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PWebSocketEventListenerChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PWebSocketEventListener'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PWebSocketEventListener'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PWebSocketEventListener'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<WebSocketEventListenerChild*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PWebSocketEventListenerMsgStart, actor);

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebSocketEventListenerChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketEventListenerChild::Result
{
    return MsgNotKnown;
}

auto PWebSocketEventListenerChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketEventListenerChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebSocketEventListenerChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PWebSocketEventListenerChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PWebSocketEventListenerChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebSocketEventListener", PWebSocketEventListenerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PWebSocketEventListenerChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
