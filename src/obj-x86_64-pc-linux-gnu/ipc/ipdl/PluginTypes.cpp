//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PluginTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PluginTag|
//
namespace mozilla {
namespace plugins {
auto PluginTag::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(PluginTag, sandboxLevel_) - offsetof(PluginTag, id_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PluginTag>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).description());
    // Sentinel = 'description'
    (aMsg)->WriteSentinel(461833381);
    WriteIPDLParam(aMsg, aActor, (aVar).mimeTypes());
    // Sentinel = 'mimeTypes'
    (aMsg)->WriteSentinel(311690174);
    WriteIPDLParam(aMsg, aActor, (aVar).mimeDescriptions());
    // Sentinel = 'mimeDescriptions'
    (aMsg)->WriteSentinel(925959840);
    WriteIPDLParam(aMsg, aActor, (aVar).extensions());
    // Sentinel = 'extensions'
    (aMsg)->WriteSentinel(397018193);
    WriteIPDLParam(aMsg, aActor, (aVar).isFlashPlugin());
    // Sentinel = 'isFlashPlugin'
    (aMsg)->WriteSentinel(605947194);
    WriteIPDLParam(aMsg, aActor, (aVar).supportsAsyncRender());
    // Sentinel = 'supportsAsyncRender'
    (aMsg)->WriteSentinel(1358890991);
    WriteIPDLParam(aMsg, aActor, (aVar).filename());
    // Sentinel = 'filename'
    (aMsg)->WriteSentinel(246547266);
    WriteIPDLParam(aMsg, aActor, (aVar).version());
    // Sentinel = 'version'
    (aMsg)->WriteSentinel(204210951);
    (aMsg)->WriteBytes((&((aVar).lastModifiedTime())), 8);
    // Sentinel = 'lastModifiedTime'
    (aMsg)->WriteSentinel(919733861);
    (aMsg)->WriteBytes((&((aVar).id())), 8);
    // Sentinel = 'id | sandboxLevel'
    (aMsg)->WriteSentinel(931268209);
    (aMsg)->WriteBytes((&((aVar).blocklistState())), 2);
    // Sentinel = 'blocklistState'
    (aMsg)->WriteSentinel(727254473);
}

auto IPDLParamTraits<mozilla::plugins::PluginTag>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'PluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->description())))))) {
        aActor->FatalError("Error deserializing 'description' (nsCString) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'description'
    if ((!((aMsg)->ReadSentinel(aIter, 461833381)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'description' (nsCString) member of 'PluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mimeTypes())))))) {
        aActor->FatalError("Error deserializing 'mimeTypes' (nsCString[]) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'mimeTypes'
    if ((!((aMsg)->ReadSentinel(aIter, 311690174)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mimeTypes' (nsCString[]) member of 'PluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mimeDescriptions())))))) {
        aActor->FatalError("Error deserializing 'mimeDescriptions' (nsCString[]) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'mimeDescriptions'
    if ((!((aMsg)->ReadSentinel(aIter, 925959840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mimeDescriptions' (nsCString[]) member of 'PluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->extensions())))))) {
        aActor->FatalError("Error deserializing 'extensions' (nsCString[]) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'extensions'
    if ((!((aMsg)->ReadSentinel(aIter, 397018193)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'extensions' (nsCString[]) member of 'PluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isFlashPlugin())))))) {
        aActor->FatalError("Error deserializing 'isFlashPlugin' (bool) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'isFlashPlugin'
    if ((!((aMsg)->ReadSentinel(aIter, 605947194)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isFlashPlugin' (bool) member of 'PluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->supportsAsyncRender())))))) {
        aActor->FatalError("Error deserializing 'supportsAsyncRender' (bool) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'supportsAsyncRender'
    if ((!((aMsg)->ReadSentinel(aIter, 1358890991)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'supportsAsyncRender' (bool) member of 'PluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->filename())))))) {
        aActor->FatalError("Error deserializing 'filename' (nsCString) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'filename'
    if ((!((aMsg)->ReadSentinel(aIter, 246547266)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'filename' (nsCString) member of 'PluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->version())))))) {
        aActor->FatalError("Error deserializing 'version' (nsCString) member of 'PluginTag'");
        return false;
    }
    // Sentinel = 'version'
    if ((!((aMsg)->ReadSentinel(aIter, 204210951)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'version' (nsCString) member of 'PluginTag'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->lastModifiedTime())), 8)))) {
        aActor->FatalError("Error bulk reading fields from int64_t");
        return false;
    }
    // Sentinel = 'lastModifiedTime'
    if ((!((aMsg)->ReadSentinel(aIter, 919733861)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->id())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'id | sandboxLevel'
    if ((!((aMsg)->ReadSentinel(aIter, 931268209)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->blocklistState())), 2)))) {
        aActor->FatalError("Error bulk reading fields from uint16_t");
        return false;
    }
    // Sentinel = 'blocklistState'
    if ((!((aMsg)->ReadSentinel(aIter, 727254473)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint16_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FakePluginTag|
//
namespace mozilla {
namespace plugins {
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::FakePluginTag>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).handlerURI());
    // Sentinel = 'handlerURI'
    (aMsg)->WriteSentinel(367264719);
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).description());
    // Sentinel = 'description'
    (aMsg)->WriteSentinel(461833381);
    WriteIPDLParam(aMsg, aActor, (aVar).mimeTypes());
    // Sentinel = 'mimeTypes'
    (aMsg)->WriteSentinel(311690174);
    WriteIPDLParam(aMsg, aActor, (aVar).mimeDescriptions());
    // Sentinel = 'mimeDescriptions'
    (aMsg)->WriteSentinel(925959840);
    WriteIPDLParam(aMsg, aActor, (aVar).extensions());
    // Sentinel = 'extensions'
    (aMsg)->WriteSentinel(397018193);
    WriteIPDLParam(aMsg, aActor, (aVar).niceName());
    // Sentinel = 'niceName'
    (aMsg)->WriteSentinel(238813985);
    WriteIPDLParam(aMsg, aActor, (aVar).sandboxScript());
    // Sentinel = 'sandboxScript'
    (aMsg)->WriteSentinel(628884837);
    (aMsg)->WriteBytes((&((aVar).id())), 4);
    // Sentinel = 'id'
    (aMsg)->WriteSentinel(20447438);
}

auto IPDLParamTraits<mozilla::plugins::FakePluginTag>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handlerURI())))))) {
        aActor->FatalError("Error deserializing 'handlerURI' (URIParams) member of 'FakePluginTag'");
        return false;
    }
    // Sentinel = 'handlerURI'
    if ((!((aMsg)->ReadSentinel(aIter, 367264719)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handlerURI' (URIParams) member of 'FakePluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsCString) member of 'FakePluginTag'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsCString) member of 'FakePluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->description())))))) {
        aActor->FatalError("Error deserializing 'description' (nsCString) member of 'FakePluginTag'");
        return false;
    }
    // Sentinel = 'description'
    if ((!((aMsg)->ReadSentinel(aIter, 461833381)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'description' (nsCString) member of 'FakePluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mimeTypes())))))) {
        aActor->FatalError("Error deserializing 'mimeTypes' (nsCString[]) member of 'FakePluginTag'");
        return false;
    }
    // Sentinel = 'mimeTypes'
    if ((!((aMsg)->ReadSentinel(aIter, 311690174)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mimeTypes' (nsCString[]) member of 'FakePluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->mimeDescriptions())))))) {
        aActor->FatalError("Error deserializing 'mimeDescriptions' (nsCString[]) member of 'FakePluginTag'");
        return false;
    }
    // Sentinel = 'mimeDescriptions'
    if ((!((aMsg)->ReadSentinel(aIter, 925959840)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'mimeDescriptions' (nsCString[]) member of 'FakePluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->extensions())))))) {
        aActor->FatalError("Error deserializing 'extensions' (nsCString[]) member of 'FakePluginTag'");
        return false;
    }
    // Sentinel = 'extensions'
    if ((!((aMsg)->ReadSentinel(aIter, 397018193)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'extensions' (nsCString[]) member of 'FakePluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->niceName())))))) {
        aActor->FatalError("Error deserializing 'niceName' (nsCString) member of 'FakePluginTag'");
        return false;
    }
    // Sentinel = 'niceName'
    if ((!((aMsg)->ReadSentinel(aIter, 238813985)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'niceName' (nsCString) member of 'FakePluginTag'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sandboxScript())))))) {
        aActor->FatalError("Error deserializing 'sandboxScript' (nsString) member of 'FakePluginTag'");
        return false;
    }
    // Sentinel = 'sandboxScript'
    if ((!((aMsg)->ReadSentinel(aIter, 628884837)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sandboxScript' (nsString) member of 'FakePluginTag'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->id())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'id'
    if ((!((aMsg)->ReadSentinel(aIter, 20447438)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union PluginIdentifier|
//
namespace mozilla {
namespace plugins {
auto PluginIdentifier::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TnsCString:
        {
            (ptr_nsCString())->~nsCString__tdef();
            break;
        }
    case Tint32_t:
        {
            (ptr_int32_t())->~int32_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT PluginIdentifier::PluginIdentifier(const nsCString& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(aOther);
    mType = TnsCString;
}

MOZ_IMPLICIT PluginIdentifier::PluginIdentifier(nsCString&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move(aOther));
    mType = TnsCString;
}

MOZ_IMPLICIT PluginIdentifier::PluginIdentifier(const int32_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(aOther);
    mType = Tint32_t;
}

MOZ_IMPLICIT PluginIdentifier::PluginIdentifier(int32_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(std::move(aOther));
    mType = Tint32_t;
}

MOZ_IMPLICIT PluginIdentifier::PluginIdentifier(const PluginIdentifier& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString((aOther).get_nsCString());
            break;
        }
    case Tint32_t:
        {
            new (mozilla::KnownNotNull, ptr_int32_t()) int32_t((aOther).get_int32_t());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT PluginIdentifier::PluginIdentifier(PluginIdentifier&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move((aOther).get_nsCString()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tint32_t:
        {
            new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(std::move((aOther).get_int32_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

PluginIdentifier::~PluginIdentifier()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto PluginIdentifier::operator=(const nsCString& aRhs) -> PluginIdentifier&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = aRhs;
    mType = TnsCString;
    return (*(this));
}

auto PluginIdentifier::operator=(nsCString&& aRhs) -> PluginIdentifier&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = std::move(aRhs);
    mType = TnsCString;
    return (*(this));
}

auto PluginIdentifier::operator=(const int32_t& aRhs) -> PluginIdentifier&
{
    if (MaybeDestroy(Tint32_t)) {
        new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
    }
    (*(ptr_int32_t())) = aRhs;
    mType = Tint32_t;
    return (*(this));
}

auto PluginIdentifier::operator=(int32_t&& aRhs) -> PluginIdentifier&
{
    if (MaybeDestroy(Tint32_t)) {
        new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
    }
    (*(ptr_int32_t())) = std::move(aRhs);
    mType = Tint32_t;
    return (*(this));
}

auto PluginIdentifier::operator=(const PluginIdentifier& aRhs) -> PluginIdentifier&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = (aRhs).get_nsCString();
            break;
        }
    case Tint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
            }
            (*(ptr_int32_t())) = (aRhs).get_int32_t();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto PluginIdentifier::operator=(PluginIdentifier&& aRhs) -> PluginIdentifier&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = std::move((aRhs).get_nsCString());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
            }
            (*(ptr_int32_t())) = std::move((aRhs).get_int32_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::plugins::PluginIdentifier>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::plugins::PluginIdentifier union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'PluginIdentifier'
    (aMsg)->WriteSentinel(906430067);

    switch (type) {
    case union__::TnsCString:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsCString());
            // Sentinel = 'TnsCString'
            (aMsg)->WriteSentinel(353960944);
            return;
        }
    case union__::Tint32_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_int32_t());
            // Sentinel = 'Tint32_t'
            (aMsg)->WriteSentinel(217252568);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::plugins::PluginIdentifier>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::plugins::PluginIdentifier union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union PluginIdentifier");
        return false;
    }
    // Sentinel = 'PluginIdentifier'
    if ((!((aMsg)->ReadSentinel(aIter, 906430067)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union PluginIdentifier");
        return false;
    }

    switch (type) {
    case union__::TnsCString:
        {
            nsCString tmp = nsCString();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsCString())))))) {
                aActor->FatalError("Error deserializing variant TnsCString of union PluginIdentifier");
                return false;
            }
            // Sentinel = 'TnsCString'
            if ((!((aMsg)->ReadSentinel(aIter, 353960944)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsCString of union PluginIdentifier");
                return false;
            }
            return true;
        }
    case union__::Tint32_t:
        {
            int32_t tmp = int32_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_int32_t())))))) {
                aActor->FatalError("Error deserializing variant Tint32_t of union PluginIdentifier");
                return false;
            }
            // Sentinel = 'Tint32_t'
            if ((!((aMsg)->ReadSentinel(aIter, 217252568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tint32_t of union PluginIdentifier");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
