//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/PRemoteSpellcheckEngineParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/RemoteSpellCheckEngineParent.h"

#include "mozilla/dom/PContentParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {


auto PRemoteSpellcheckEngineParent::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PRemoteSpellcheckEngineParent::PRemoteSpellcheckEngineParent() :
    mozilla::ipc::IProtocol(PRemoteSpellcheckEngineMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PRemoteSpellcheckEngineParent);
}

PRemoteSpellcheckEngineParent::~PRemoteSpellcheckEngineParent()
{
    MOZ_COUNT_DTOR(PRemoteSpellcheckEngineParent);
}

auto PRemoteSpellcheckEngineParent::Manager() const -> PContentParent*
{
    return static_cast<PContentParent*>(IProtocol::Manager());
}

auto PRemoteSpellcheckEngineParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PRemoteSpellcheckEngineParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteSpellcheckEngineParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PRemoteSpellcheckEngineParent::OnMessageReceived(const Message& msg__) -> PRemoteSpellcheckEngineParent::Result
{
    switch (msg__.type()) {
    case PRemoteSpellcheckEngine::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PRemoteSpellcheckEngineParent* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PRemoteSpellcheckEngine'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PRemoteSpellcheckEngine'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PRemoteSpellcheckEngine'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((static_cast<RemoteSpellcheckEngineParent*>(this))->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PRemoteSpellcheckEngineMsgStart, actor);

            return MsgProcessed;
        }
    case PRemoteSpellcheckEngine::Msg_CheckAsync__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_CheckAsync", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsString> aWord{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWord)))))) {
                FatalError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aWord'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 98238974)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            CheckAsyncResolver resolver = [proxy__, seqno__, id__](nsTArray<bool>&& aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteSpellcheckEngineParent* self__ = static_cast<PRemoteSpellcheckEngineParent*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteSpellcheckEngine::Reply_CheckAsync(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, aParam);
                // Sentinel = 'aIsMisspelled'
                (reply__)->WriteSentinel(595723568);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteSpellcheckEngineParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteSpellcheckEngineParent*>(this))->RecvCheckAsync(std::move(aWord), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PRemoteSpellcheckEngine::Msg_SetDictionaryFromList__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_SetDictionaryFromList", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> aList{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aList)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'aList'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 95355390)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            int32_t seqno__ = msg__.seqno();
            RefPtr<mozilla::ipc::ActorLifecycleProxy> proxy__ =
                GetLifecycleProxy();

            SetDictionaryFromListResolver resolver = [proxy__, seqno__, id__](Tuple<const bool&, const nsCString&> aParam) {
                if (!proxy__->Get()) {
                    NS_WARNING("Not resolving response because actor is dead.");
                    return;
                }
                PRemoteSpellcheckEngineParent* self__ = static_cast<PRemoteSpellcheckEngineParent*>(proxy__->Get());

                IPC::Message* reply__ = PRemoteSpellcheckEngine::Reply_SetDictionaryFromList(id__);
                reply__->set_seqno(seqno__);

                bool resolve__ = true;
                WriteIPDLParam(reply__, self__, resolve__);
                // Sentinel = 'resolve__'
                (reply__)->WriteSentinel(322044863);
                WriteIPDLParam(reply__, self__, mozilla::Get<0>(aParam));
                // Sentinel = 'aSuccess'
                (reply__)->WriteSentinel(236323643);
                WriteIPDLParam(reply__, self__, mozilla::Get<1>(aParam));
                // Sentinel = 'aDictionary'
                (reply__)->WriteSentinel(430703736);

                if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                    mozilla::ipc::LogMessageForProtocol(
                        "PRemoteSpellcheckEngineParent",
                        (self__)->OtherPid(),
                        "Sending reply ",
                        reply__->type(),
                        mozilla::ipc::MessageDirection::eSending);
                }

                bool sendok__ = self__->ChannelSend(reply__);
                if (!sendok__) {
                    NS_WARNING("Error sending reply");
                }
            };
            if ((!((static_cast<RemoteSpellcheckEngineParent*>(this))->RecvSetDictionaryFromList(std::move(aList), std::move(resolver))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemoteSpellcheckEngineParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteSpellcheckEngineParent::Result
{
    switch (msg__.type()) {
    case PRemoteSpellcheckEngine::Msg_CheckAndSuggest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_CheckAndSuggest", OTHER);

            PickleIterator iter__{msg__};
            nsString aWord{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aWord)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aWord'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 98238974)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool aIsMisspelled{};
            nsTArray<nsString> aSuggestions{};
            if ((!((static_cast<RemoteSpellcheckEngineParent*>(this))->RecvCheckAndSuggest(std::move(aWord), (&(aIsMisspelled)), (&(aSuggestions)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PRemoteSpellcheckEngine::Reply_CheckAndSuggest(id__);

            WriteIPDLParam(reply__, this, aIsMisspelled);
            // Sentinel = 'aIsMisspelled'
            (reply__)->WriteSentinel(595723568);
            WriteIPDLParam(reply__, this, aSuggestions);
            // Sentinel = 'aSuggestions'
            (reply__)->WriteSentinel(529204477);

            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    case PRemoteSpellcheckEngine::Msg_SetDictionary__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PRemoteSpellcheckEngine::Msg_SetDictionary", OTHER);

            PickleIterator iter__{msg__};
            nsCString aDictionary{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aDictionary)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aDictionary'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 430703736)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            int32_t id__ = Id();
            bool success{};
            if ((!((static_cast<RemoteSpellcheckEngineParent*>(this))->RecvSetDictionary(std::move(aDictionary), (&(success)))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            reply__ = PRemoteSpellcheckEngine::Reply_SetDictionary(id__);

            WriteIPDLParam(reply__, this, success);
            // Sentinel = 'success'
            (reply__)->WriteSentinel(200082170);

            if (mozilla::ipc::LoggingEnabledFor("PRemoteSpellcheckEngineParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PRemoteSpellcheckEngineParent",
                    OtherPid(),
                    "Sending reply ",
                    reply__->type(),
                    mozilla::ipc::MessageDirection::eSending);
            }
            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PRemoteSpellcheckEngineParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PRemoteSpellcheckEngineParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PRemoteSpellcheckEngineParent::ClearSubtree() -> void
{
}



} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::PRemoteSpellcheckEngineParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::PRemoteSpellcheckEngineParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PRemoteSpellcheckEngine", PRemoteSpellcheckEngineMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::PRemoteSpellcheckEngineParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
