//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/ipc/PBackgroundParent.h"
#include "mozilla/ipc/PBackgroundChild.h"
#include "mozilla/dom/PBackgroundSDBRequestParent.h"
#include "mozilla/dom/PBackgroundSDBRequestChild.h"
#include "mozilla/dom/PBackgroundSDBConnection.h"
#include "mozilla/dom/PBackgroundSDBConnectionParent.h"
#include "mozilla/dom/PBackgroundSDBConnectionChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace PBackgroundSDBConnection {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundSDBConnectionParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundSDBConnectionChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg_DeleteMe(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_DeleteMe__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_PBackgroundSDBRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_PBackgroundSDBRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply_PBackgroundSDBRequestConstructor(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply_PBackgroundSDBRequestConstructor__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}
IPC::Message*
Msg_AllowToClose(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_AllowToClose__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Msg_Closed(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg_Closed__ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}

} // namespace PBackgroundSDBConnection
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestOpenParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestOpenParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
}

auto IPDLParamTraits<mozilla::dom::SDBRequestOpenParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'SDBRequestOpenParams'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'SDBRequestOpenParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestSeekParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestSeekParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).offset())), 8);
    // Sentinel = 'offset'
    (aMsg)->WriteSentinel(147653256);
}

auto IPDLParamTraits<mozilla::dom::SDBRequestSeekParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->offset())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'offset'
    if ((!((aMsg)->ReadSentinel(aIter, 147653256)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestReadParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestReadParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).size())), 8);
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
}

auto IPDLParamTraits<mozilla::dom::SDBRequestReadParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->size())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestWriteParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestWriteParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::SDBRequestWriteParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (nsCString) member of 'SDBRequestWriteParams'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (nsCString) member of 'SDBRequestWriteParams'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct SDBRequestCloseParams|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestCloseParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::SDBRequestCloseParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union SDBRequestParams|
//
namespace mozilla {
namespace dom {
auto SDBRequestParams::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TSDBRequestOpenParams:
        {
            (ptr_SDBRequestOpenParams())->~SDBRequestOpenParams__tdef();
            break;
        }
    case TSDBRequestSeekParams:
        {
            (ptr_SDBRequestSeekParams())->~SDBRequestSeekParams__tdef();
            break;
        }
    case TSDBRequestReadParams:
        {
            (ptr_SDBRequestReadParams())->~SDBRequestReadParams__tdef();
            break;
        }
    case TSDBRequestWriteParams:
        {
            (ptr_SDBRequestWriteParams())->~SDBRequestWriteParams__tdef();
            break;
        }
    case TSDBRequestCloseParams:
        {
            (ptr_SDBRequestCloseParams())->~SDBRequestCloseParams__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(const SDBRequestOpenParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestOpenParams()) SDBRequestOpenParams(aOther);
    mType = TSDBRequestOpenParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(SDBRequestOpenParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestOpenParams()) SDBRequestOpenParams(std::move(aOther));
    mType = TSDBRequestOpenParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(const SDBRequestSeekParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestSeekParams()) SDBRequestSeekParams(aOther);
    mType = TSDBRequestSeekParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(SDBRequestSeekParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestSeekParams()) SDBRequestSeekParams(std::move(aOther));
    mType = TSDBRequestSeekParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(const SDBRequestReadParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestReadParams()) SDBRequestReadParams(aOther);
    mType = TSDBRequestReadParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(SDBRequestReadParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestReadParams()) SDBRequestReadParams(std::move(aOther));
    mType = TSDBRequestReadParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(const SDBRequestWriteParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestWriteParams()) SDBRequestWriteParams(aOther);
    mType = TSDBRequestWriteParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(SDBRequestWriteParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestWriteParams()) SDBRequestWriteParams(std::move(aOther));
    mType = TSDBRequestWriteParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(const SDBRequestCloseParams& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestCloseParams()) SDBRequestCloseParams(aOther);
    mType = TSDBRequestCloseParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(SDBRequestCloseParams&& aOther)
{
    new (mozilla::KnownNotNull, ptr_SDBRequestCloseParams()) SDBRequestCloseParams(std::move(aOther));
    mType = TSDBRequestCloseParams;
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(const SDBRequestParams& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TSDBRequestOpenParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestOpenParams()) SDBRequestOpenParams((aOther).get_SDBRequestOpenParams());
            break;
        }
    case TSDBRequestSeekParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestSeekParams()) SDBRequestSeekParams((aOther).get_SDBRequestSeekParams());
            break;
        }
    case TSDBRequestReadParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestReadParams()) SDBRequestReadParams((aOther).get_SDBRequestReadParams());
            break;
        }
    case TSDBRequestWriteParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestWriteParams()) SDBRequestWriteParams((aOther).get_SDBRequestWriteParams());
            break;
        }
    case TSDBRequestCloseParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestCloseParams()) SDBRequestCloseParams((aOther).get_SDBRequestCloseParams());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT SDBRequestParams::SDBRequestParams(SDBRequestParams&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TSDBRequestOpenParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestOpenParams()) SDBRequestOpenParams(std::move((aOther).get_SDBRequestOpenParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestSeekParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestSeekParams()) SDBRequestSeekParams(std::move((aOther).get_SDBRequestSeekParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestReadParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestReadParams()) SDBRequestReadParams(std::move((aOther).get_SDBRequestReadParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestWriteParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestWriteParams()) SDBRequestWriteParams(std::move((aOther).get_SDBRequestWriteParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestCloseParams:
        {
            new (mozilla::KnownNotNull, ptr_SDBRequestCloseParams()) SDBRequestCloseParams(std::move((aOther).get_SDBRequestCloseParams()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

SDBRequestParams::~SDBRequestParams()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto SDBRequestParams::operator=(const SDBRequestOpenParams& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestOpenParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestOpenParams()) SDBRequestOpenParams;
    }
    (*(ptr_SDBRequestOpenParams())) = aRhs;
    mType = TSDBRequestOpenParams;
    return (*(this));
}

auto SDBRequestParams::operator=(SDBRequestOpenParams&& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestOpenParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestOpenParams()) SDBRequestOpenParams;
    }
    (*(ptr_SDBRequestOpenParams())) = std::move(aRhs);
    mType = TSDBRequestOpenParams;
    return (*(this));
}

auto SDBRequestParams::operator=(const SDBRequestSeekParams& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestSeekParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestSeekParams()) SDBRequestSeekParams;
    }
    (*(ptr_SDBRequestSeekParams())) = aRhs;
    mType = TSDBRequestSeekParams;
    return (*(this));
}

auto SDBRequestParams::operator=(SDBRequestSeekParams&& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestSeekParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestSeekParams()) SDBRequestSeekParams;
    }
    (*(ptr_SDBRequestSeekParams())) = std::move(aRhs);
    mType = TSDBRequestSeekParams;
    return (*(this));
}

auto SDBRequestParams::operator=(const SDBRequestReadParams& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestReadParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestReadParams()) SDBRequestReadParams;
    }
    (*(ptr_SDBRequestReadParams())) = aRhs;
    mType = TSDBRequestReadParams;
    return (*(this));
}

auto SDBRequestParams::operator=(SDBRequestReadParams&& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestReadParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestReadParams()) SDBRequestReadParams;
    }
    (*(ptr_SDBRequestReadParams())) = std::move(aRhs);
    mType = TSDBRequestReadParams;
    return (*(this));
}

auto SDBRequestParams::operator=(const SDBRequestWriteParams& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestWriteParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestWriteParams()) SDBRequestWriteParams;
    }
    (*(ptr_SDBRequestWriteParams())) = aRhs;
    mType = TSDBRequestWriteParams;
    return (*(this));
}

auto SDBRequestParams::operator=(SDBRequestWriteParams&& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestWriteParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestWriteParams()) SDBRequestWriteParams;
    }
    (*(ptr_SDBRequestWriteParams())) = std::move(aRhs);
    mType = TSDBRequestWriteParams;
    return (*(this));
}

auto SDBRequestParams::operator=(const SDBRequestCloseParams& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestCloseParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestCloseParams()) SDBRequestCloseParams;
    }
    (*(ptr_SDBRequestCloseParams())) = aRhs;
    mType = TSDBRequestCloseParams;
    return (*(this));
}

auto SDBRequestParams::operator=(SDBRequestCloseParams&& aRhs) -> SDBRequestParams&
{
    if (MaybeDestroy(TSDBRequestCloseParams)) {
        new (mozilla::KnownNotNull, ptr_SDBRequestCloseParams()) SDBRequestCloseParams;
    }
    (*(ptr_SDBRequestCloseParams())) = std::move(aRhs);
    mType = TSDBRequestCloseParams;
    return (*(this));
}

auto SDBRequestParams::operator=(const SDBRequestParams& aRhs) -> SDBRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSDBRequestOpenParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestOpenParams()) SDBRequestOpenParams;
            }
            (*(ptr_SDBRequestOpenParams())) = (aRhs).get_SDBRequestOpenParams();
            break;
        }
    case TSDBRequestSeekParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestSeekParams()) SDBRequestSeekParams;
            }
            (*(ptr_SDBRequestSeekParams())) = (aRhs).get_SDBRequestSeekParams();
            break;
        }
    case TSDBRequestReadParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestReadParams()) SDBRequestReadParams;
            }
            (*(ptr_SDBRequestReadParams())) = (aRhs).get_SDBRequestReadParams();
            break;
        }
    case TSDBRequestWriteParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestWriteParams()) SDBRequestWriteParams;
            }
            (*(ptr_SDBRequestWriteParams())) = (aRhs).get_SDBRequestWriteParams();
            break;
        }
    case TSDBRequestCloseParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestCloseParams()) SDBRequestCloseParams;
            }
            (*(ptr_SDBRequestCloseParams())) = (aRhs).get_SDBRequestCloseParams();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto SDBRequestParams::operator=(SDBRequestParams&& aRhs) -> SDBRequestParams&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TSDBRequestOpenParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestOpenParams()) SDBRequestOpenParams;
            }
            (*(ptr_SDBRequestOpenParams())) = std::move((aRhs).get_SDBRequestOpenParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestSeekParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestSeekParams()) SDBRequestSeekParams;
            }
            (*(ptr_SDBRequestSeekParams())) = std::move((aRhs).get_SDBRequestSeekParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestReadParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestReadParams()) SDBRequestReadParams;
            }
            (*(ptr_SDBRequestReadParams())) = std::move((aRhs).get_SDBRequestReadParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestWriteParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestWriteParams()) SDBRequestWriteParams;
            }
            (*(ptr_SDBRequestWriteParams())) = std::move((aRhs).get_SDBRequestWriteParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TSDBRequestCloseParams:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_SDBRequestCloseParams()) SDBRequestCloseParams;
            }
            (*(ptr_SDBRequestCloseParams())) = std::move((aRhs).get_SDBRequestCloseParams());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::SDBRequestParams>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::SDBRequestParams union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'SDBRequestParams'
    (aMsg)->WriteSentinel(830015015);

    switch (type) {
    case union__::TSDBRequestOpenParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestOpenParams());
            // Sentinel = 'TSDBRequestOpenParams'
            (aMsg)->WriteSentinel(1419380749);
            return;
        }
    case union__::TSDBRequestSeekParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestSeekParams());
            // Sentinel = 'TSDBRequestSeekParams'
            (aMsg)->WriteSentinel(1414137859);
            return;
        }
    case union__::TSDBRequestReadParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestReadParams());
            // Sentinel = 'TSDBRequestReadParams'
            (aMsg)->WriteSentinel(1408174071);
            return;
        }
    case union__::TSDBRequestWriteParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestWriteParams());
            // Sentinel = 'TSDBRequestWriteParams'
            (aMsg)->WriteSentinel(1573259398);
            return;
        }
    case union__::TSDBRequestCloseParams:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_SDBRequestCloseParams());
            // Sentinel = 'TSDBRequestCloseParams'
            (aMsg)->WriteSentinel(1557923953);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::SDBRequestParams>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::SDBRequestParams union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union SDBRequestParams");
        return false;
    }
    // Sentinel = 'SDBRequestParams'
    if ((!((aMsg)->ReadSentinel(aIter, 830015015)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union SDBRequestParams");
        return false;
    }

    switch (type) {
    case union__::TSDBRequestOpenParams:
        {
            mozilla::dom::SDBRequestOpenParams tmp = mozilla::dom::SDBRequestOpenParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestOpenParams())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestOpenParams of union SDBRequestParams");
                return false;
            }
            // Sentinel = 'TSDBRequestOpenParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1419380749)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestOpenParams of union SDBRequestParams");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestSeekParams:
        {
            mozilla::dom::SDBRequestSeekParams tmp = mozilla::dom::SDBRequestSeekParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestSeekParams())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestSeekParams of union SDBRequestParams");
                return false;
            }
            // Sentinel = 'TSDBRequestSeekParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1414137859)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestSeekParams of union SDBRequestParams");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestReadParams:
        {
            mozilla::dom::SDBRequestReadParams tmp = mozilla::dom::SDBRequestReadParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestReadParams())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestReadParams of union SDBRequestParams");
                return false;
            }
            // Sentinel = 'TSDBRequestReadParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1408174071)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestReadParams of union SDBRequestParams");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestWriteParams:
        {
            mozilla::dom::SDBRequestWriteParams tmp = mozilla::dom::SDBRequestWriteParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestWriteParams())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestWriteParams of union SDBRequestParams");
                return false;
            }
            // Sentinel = 'TSDBRequestWriteParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1573259398)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestWriteParams of union SDBRequestParams");
                return false;
            }
            return true;
        }
    case union__::TSDBRequestCloseParams:
        {
            mozilla::dom::SDBRequestCloseParams tmp = mozilla::dom::SDBRequestCloseParams();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_SDBRequestCloseParams())))))) {
                aActor->FatalError("Error deserializing variant TSDBRequestCloseParams of union SDBRequestParams");
                return false;
            }
            // Sentinel = 'TSDBRequestCloseParams'
            if ((!((aMsg)->ReadSentinel(aIter, 1557923953)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TSDBRequestCloseParams of union SDBRequestParams");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
