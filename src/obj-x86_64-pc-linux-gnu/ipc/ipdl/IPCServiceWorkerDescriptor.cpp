//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/ServiceWorkerIPCUtils.h"
#include "mozilla/dom/IPCServiceWorkerDescriptor.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCServiceWorkerDescriptor|
//
namespace mozilla {
namespace dom {
auto IPCServiceWorkerDescriptor::operator==(const IPCServiceWorkerDescriptor& _o) const -> bool
{
    if ((!((id()) == ((_o).id())))) {
        return false;
    }
    if ((!((registrationId()) == ((_o).registrationId())))) {
        return false;
    }
    if ((!((registrationVersion()) == ((_o).registrationVersion())))) {
        return false;
    }
    if ((!((principalInfo()) == ((_o).principalInfo())))) {
        return false;
    }
    if ((!((scope()) == ((_o).scope())))) {
        return false;
    }
    if ((!((scriptURL()) == ((_o).scriptURL())))) {
        return false;
    }
    if ((!((state()) == ((_o).state())))) {
        return false;
    }
    if ((!((handlesFetch()) == ((_o).handlesFetch())))) {
        return false;
    }
    return true;
}

auto IPCServiceWorkerDescriptor::operator!=(const IPCServiceWorkerDescriptor& _o) const -> bool
{
    return (!(operator==(_o)));
}

auto IPCServiceWorkerDescriptor::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IPCServiceWorkerDescriptor, registrationVersion_) - offsetof(IPCServiceWorkerDescriptor, id_)) == 16,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCServiceWorkerDescriptor>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).principalInfo());
    // Sentinel = 'principalInfo'
    (aMsg)->WriteSentinel(633472335);
    WriteIPDLParam(aMsg, aActor, (aVar).scope());
    // Sentinel = 'scope'
    (aMsg)->WriteSentinel(107086363);
    WriteIPDLParam(aMsg, aActor, (aVar).scriptURL());
    // Sentinel = 'scriptURL'
    (aMsg)->WriteSentinel(313459593);
    WriteIPDLParam(aMsg, aActor, (aVar).state());
    // Sentinel = 'state'
    (aMsg)->WriteSentinel(109314594);
    WriteIPDLParam(aMsg, aActor, (aVar).handlesFetch());
    // Sentinel = 'handlesFetch'
    (aMsg)->WriteSentinel(523764938);
    (aMsg)->WriteBytes((&((aVar).id())), 24);
    // Sentinel = 'id | registrationId | registrationVersion'
    (aMsg)->WriteSentinel(1199509519);
}

auto IPDLParamTraits<mozilla::dom::IPCServiceWorkerDescriptor>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->principalInfo())))))) {
        aActor->FatalError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    // Sentinel = 'principalInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 633472335)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'principalInfo' (PrincipalInfo) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scope())))))) {
        aActor->FatalError("Error deserializing 'scope' (nsCString) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    // Sentinel = 'scope'
    if ((!((aMsg)->ReadSentinel(aIter, 107086363)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scope' (nsCString) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scriptURL())))))) {
        aActor->FatalError("Error deserializing 'scriptURL' (nsCString) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    // Sentinel = 'scriptURL'
    if ((!((aMsg)->ReadSentinel(aIter, 313459593)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scriptURL' (nsCString) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->state())))))) {
        aActor->FatalError("Error deserializing 'state' (ServiceWorkerState) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    // Sentinel = 'state'
    if ((!((aMsg)->ReadSentinel(aIter, 109314594)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'state' (ServiceWorkerState) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handlesFetch())))))) {
        aActor->FatalError("Error deserializing 'handlesFetch' (bool) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    // Sentinel = 'handlesFetch'
    if ((!((aMsg)->ReadSentinel(aIter, 523764938)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handlesFetch' (bool) member of 'IPCServiceWorkerDescriptor'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->id())), 24)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'id | registrationId | registrationVersion'
    if ((!((aMsg)->ReadSentinel(aIter, 1199509519)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
