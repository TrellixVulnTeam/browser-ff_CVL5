//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/GfxMessageUtils.h"
#include "mozilla/dom/CSPMessageUtils.h"
#include "mozilla/dom/DocShellMessageUtils.h"
#include "mozilla/dom/PermissionMessageUtils.h"
#include "mozilla/dom/PropertyBagUtils.h"
#include "mozilla/dom/ReferrerInfoUtils.h"
#include "mozilla/dom/TabMessageUtils.h"
#include "mozilla/ipc/URIUtils.h"
#include "mozilla/layers/LayersMessageUtils.h"
#include "mozilla/PRemoteLazyInputStreamParent.h"
#include "mozilla/PRemoteLazyInputStreamChild.h"
#include "mozilla/dom/DOMTypes.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MessagePortIdentifier|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::MessagePortIdentifier>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uuid());
    // Sentinel = 'uuid'
    (aMsg)->WriteSentinel(74252728);
    WriteIPDLParam(aMsg, aActor, (aVar).destinationUuid());
    // Sentinel = 'destinationUuid'
    (aMsg)->WriteSentinel(840435258);
    WriteIPDLParam(aMsg, aActor, (aVar).neutered());
    // Sentinel = 'neutered'
    (aMsg)->WriteSentinel(257229661);
    (aMsg)->WriteBytes((&((aVar).sequenceId())), 4);
    // Sentinel = 'sequenceId'
    (aMsg)->WriteSentinel(386204679);
}

auto IPDLParamTraits<mozilla::dom::MessagePortIdentifier>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uuid())))))) {
        aActor->FatalError("Error deserializing 'uuid' (nsID) member of 'MessagePortIdentifier'");
        return false;
    }
    // Sentinel = 'uuid'
    if ((!((aMsg)->ReadSentinel(aIter, 74252728)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uuid' (nsID) member of 'MessagePortIdentifier'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->destinationUuid())))))) {
        aActor->FatalError("Error deserializing 'destinationUuid' (nsID) member of 'MessagePortIdentifier'");
        return false;
    }
    // Sentinel = 'destinationUuid'
    if ((!((aMsg)->ReadSentinel(aIter, 840435258)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'destinationUuid' (nsID) member of 'MessagePortIdentifier'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->neutered())))))) {
        aActor->FatalError("Error deserializing 'neutered' (bool) member of 'MessagePortIdentifier'");
        return false;
    }
    // Sentinel = 'neutered'
    if ((!((aMsg)->ReadSentinel(aIter, 257229661)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'neutered' (bool) member of 'MessagePortIdentifier'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->sequenceId())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'sequenceId'
    if ((!((aMsg)->ReadSentinel(aIter, 386204679)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClonedMessageData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClonedMessageData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, std::move((aVar).data()));
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    WriteIPDLParam(aMsg, aActor, (aVar).blobs());
    // Sentinel = 'blobs'
    (aMsg)->WriteSentinel(102957587);
    WriteIPDLParam(aMsg, aActor, (aVar).inputStreams());
    // Sentinel = 'inputStreams'
    (aMsg)->WriteSentinel(554304784);
    WriteIPDLParam(aMsg, aActor, (aVar).identifiers());
    // Sentinel = 'identifiers'
    (aMsg)->WriteSentinel(456983703);
}

auto IPDLParamTraits<mozilla::dom::ClonedMessageData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (SerializedStructuredCloneBuffer) member of 'ClonedMessageData'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (SerializedStructuredCloneBuffer) member of 'ClonedMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->blobs())))))) {
        aActor->FatalError("Error deserializing 'blobs' (IPCBlob[]) member of 'ClonedMessageData'");
        return false;
    }
    // Sentinel = 'blobs'
    if ((!((aMsg)->ReadSentinel(aIter, 102957587)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'blobs' (IPCBlob[]) member of 'ClonedMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->inputStreams())))))) {
        aActor->FatalError("Error deserializing 'inputStreams' (IPCStream[]) member of 'ClonedMessageData'");
        return false;
    }
    // Sentinel = 'inputStreams'
    if ((!((aMsg)->ReadSentinel(aIter, 554304784)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'inputStreams' (IPCStream[]) member of 'ClonedMessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->identifiers())))))) {
        aActor->FatalError("Error deserializing 'identifiers' (MessagePortIdentifier[]) member of 'ClonedMessageData'");
        return false;
    }
    // Sentinel = 'identifiers'
    if ((!((aMsg)->ReadSentinel(aIter, 456983703)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'identifiers' (MessagePortIdentifier[]) member of 'ClonedMessageData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ErrorMessageData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ErrorMessageData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::ErrorMessageData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union ClonedOrErrorMessageData|
//
namespace mozilla {
namespace dom {
auto ClonedOrErrorMessageData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TClonedMessageData:
        {
            (ptr_ClonedMessageData())->~ClonedMessageData__tdef();
            break;
        }
    case TErrorMessageData:
        {
            (ptr_ErrorMessageData())->~ErrorMessageData__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT ClonedOrErrorMessageData::ClonedOrErrorMessageData(ClonedMessageData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClonedMessageData()) ClonedMessageData(std::move(aOther));
    mType = TClonedMessageData;
}

MOZ_IMPLICIT ClonedOrErrorMessageData::ClonedOrErrorMessageData(const ErrorMessageData& aOther)
{
    new (mozilla::KnownNotNull, ptr_ErrorMessageData()) ErrorMessageData(aOther);
    mType = TErrorMessageData;
}

MOZ_IMPLICIT ClonedOrErrorMessageData::ClonedOrErrorMessageData(ErrorMessageData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ErrorMessageData()) ErrorMessageData(std::move(aOther));
    mType = TErrorMessageData;
}

MOZ_IMPLICIT ClonedOrErrorMessageData::ClonedOrErrorMessageData(ClonedOrErrorMessageData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TClonedMessageData:
        {
            new (mozilla::KnownNotNull, ptr_ClonedMessageData()) ClonedMessageData(std::move((aOther).get_ClonedMessageData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TErrorMessageData:
        {
            new (mozilla::KnownNotNull, ptr_ErrorMessageData()) ErrorMessageData(std::move((aOther).get_ErrorMessageData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

ClonedOrErrorMessageData::~ClonedOrErrorMessageData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto ClonedOrErrorMessageData::operator=(ClonedMessageData&& aRhs) -> ClonedOrErrorMessageData&
{
    if (MaybeDestroy(TClonedMessageData)) {
        new (mozilla::KnownNotNull, ptr_ClonedMessageData()) ClonedMessageData;
    }
    (*(ptr_ClonedMessageData())) = std::move(aRhs);
    mType = TClonedMessageData;
    return (*(this));
}

auto ClonedOrErrorMessageData::operator=(const ErrorMessageData& aRhs) -> ClonedOrErrorMessageData&
{
    if (MaybeDestroy(TErrorMessageData)) {
        new (mozilla::KnownNotNull, ptr_ErrorMessageData()) ErrorMessageData;
    }
    (*(ptr_ErrorMessageData())) = aRhs;
    mType = TErrorMessageData;
    return (*(this));
}

auto ClonedOrErrorMessageData::operator=(ErrorMessageData&& aRhs) -> ClonedOrErrorMessageData&
{
    if (MaybeDestroy(TErrorMessageData)) {
        new (mozilla::KnownNotNull, ptr_ErrorMessageData()) ErrorMessageData;
    }
    (*(ptr_ErrorMessageData())) = std::move(aRhs);
    mType = TErrorMessageData;
    return (*(this));
}

auto ClonedOrErrorMessageData::operator=(ClonedOrErrorMessageData&& aRhs) -> ClonedOrErrorMessageData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TClonedMessageData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClonedMessageData()) ClonedMessageData;
            }
            (*(ptr_ClonedMessageData())) = std::move((aRhs).get_ClonedMessageData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TErrorMessageData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ErrorMessageData()) ErrorMessageData;
            }
            (*(ptr_ErrorMessageData())) = std::move((aRhs).get_ErrorMessageData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ClonedOrErrorMessageData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::ClonedOrErrorMessageData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'ClonedOrErrorMessageData'
    (aMsg)->WriteSentinel(1957890400);

    switch (type) {
    case union__::TClonedMessageData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClonedMessageData());
            // Sentinel = 'TClonedMessageData'
            (aMsg)->WriteSentinel(1089275625);
            return;
        }
    case union__::TErrorMessageData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ErrorMessageData());
            // Sentinel = 'TErrorMessageData'
            (aMsg)->WriteSentinel(994313886);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::ClonedOrErrorMessageData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::ClonedOrErrorMessageData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union ClonedOrErrorMessageData");
        return false;
    }
    // Sentinel = 'ClonedOrErrorMessageData'
    if ((!((aMsg)->ReadSentinel(aIter, 1957890400)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union ClonedOrErrorMessageData");
        return false;
    }

    switch (type) {
    case union__::TClonedMessageData:
        {
            mozilla::dom::ClonedMessageData tmp = mozilla::dom::ClonedMessageData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClonedMessageData())))))) {
                aActor->FatalError("Error deserializing variant TClonedMessageData of union ClonedOrErrorMessageData");
                return false;
            }
            // Sentinel = 'TClonedMessageData'
            if ((!((aMsg)->ReadSentinel(aIter, 1089275625)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClonedMessageData of union ClonedOrErrorMessageData");
                return false;
            }
            return true;
        }
    case union__::TErrorMessageData:
        {
            mozilla::dom::ErrorMessageData tmp = mozilla::dom::ErrorMessageData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ErrorMessageData())))))) {
                aActor->FatalError("Error deserializing variant TErrorMessageData of union ClonedOrErrorMessageData");
                return false;
            }
            // Sentinel = 'TErrorMessageData'
            if ((!((aMsg)->ReadSentinel(aIter, 994313886)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TErrorMessageData of union ClonedOrErrorMessageData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct RefMessageData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::RefMessageData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).uuid());
    // Sentinel = 'uuid'
    (aMsg)->WriteSentinel(74252728);
}

auto IPDLParamTraits<mozilla::dom::RefMessageData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uuid())))))) {
        aActor->FatalError("Error deserializing 'uuid' (nsID) member of 'RefMessageData'");
        return false;
    }
    // Sentinel = 'uuid'
    if ((!((aMsg)->ReadSentinel(aIter, 74252728)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uuid' (nsID) member of 'RefMessageData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union MessageDataType|
//
namespace mozilla {
namespace dom {
auto MessageDataType::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TClonedMessageData:
        {
            (ptr_ClonedMessageData())->~ClonedMessageData__tdef();
            break;
        }
    case TRefMessageData:
        {
            (ptr_RefMessageData())->~RefMessageData__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT MessageDataType::MessageDataType(ClonedMessageData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClonedMessageData()) ClonedMessageData(std::move(aOther));
    mType = TClonedMessageData;
}

MOZ_IMPLICIT MessageDataType::MessageDataType(const RefMessageData& aOther)
{
    new (mozilla::KnownNotNull, ptr_RefMessageData()) RefMessageData(aOther);
    mType = TRefMessageData;
}

MOZ_IMPLICIT MessageDataType::MessageDataType(RefMessageData&& aOther)
{
    new (mozilla::KnownNotNull, ptr_RefMessageData()) RefMessageData(std::move(aOther));
    mType = TRefMessageData;
}

MOZ_IMPLICIT MessageDataType::MessageDataType(MessageDataType&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TClonedMessageData:
        {
            new (mozilla::KnownNotNull, ptr_ClonedMessageData()) ClonedMessageData(std::move((aOther).get_ClonedMessageData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TRefMessageData:
        {
            new (mozilla::KnownNotNull, ptr_RefMessageData()) RefMessageData(std::move((aOther).get_RefMessageData()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

MessageDataType::~MessageDataType()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto MessageDataType::operator=(ClonedMessageData&& aRhs) -> MessageDataType&
{
    if (MaybeDestroy(TClonedMessageData)) {
        new (mozilla::KnownNotNull, ptr_ClonedMessageData()) ClonedMessageData;
    }
    (*(ptr_ClonedMessageData())) = std::move(aRhs);
    mType = TClonedMessageData;
    return (*(this));
}

auto MessageDataType::operator=(const RefMessageData& aRhs) -> MessageDataType&
{
    if (MaybeDestroy(TRefMessageData)) {
        new (mozilla::KnownNotNull, ptr_RefMessageData()) RefMessageData;
    }
    (*(ptr_RefMessageData())) = aRhs;
    mType = TRefMessageData;
    return (*(this));
}

auto MessageDataType::operator=(RefMessageData&& aRhs) -> MessageDataType&
{
    if (MaybeDestroy(TRefMessageData)) {
        new (mozilla::KnownNotNull, ptr_RefMessageData()) RefMessageData;
    }
    (*(ptr_RefMessageData())) = std::move(aRhs);
    mType = TRefMessageData;
    return (*(this));
}

auto MessageDataType::operator=(MessageDataType&& aRhs) -> MessageDataType&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TClonedMessageData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClonedMessageData()) ClonedMessageData;
            }
            (*(ptr_ClonedMessageData())) = std::move((aRhs).get_ClonedMessageData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TRefMessageData:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_RefMessageData()) RefMessageData;
            }
            (*(ptr_RefMessageData())) = std::move((aRhs).get_RefMessageData());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::MessageDataType>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::MessageDataType union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'MessageDataType'
    (aMsg)->WriteSentinel(779421154);

    switch (type) {
    case union__::TClonedMessageData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClonedMessageData());
            // Sentinel = 'TClonedMessageData'
            (aMsg)->WriteSentinel(1089275625);
            return;
        }
    case union__::TRefMessageData:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_RefMessageData());
            // Sentinel = 'TRefMessageData'
            (aMsg)->WriteSentinel(751437233);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::MessageDataType>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::MessageDataType union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union MessageDataType");
        return false;
    }
    // Sentinel = 'MessageDataType'
    if ((!((aMsg)->ReadSentinel(aIter, 779421154)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union MessageDataType");
        return false;
    }

    switch (type) {
    case union__::TClonedMessageData:
        {
            mozilla::dom::ClonedMessageData tmp = mozilla::dom::ClonedMessageData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClonedMessageData())))))) {
                aActor->FatalError("Error deserializing variant TClonedMessageData of union MessageDataType");
                return false;
            }
            // Sentinel = 'TClonedMessageData'
            if ((!((aMsg)->ReadSentinel(aIter, 1089275625)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClonedMessageData of union MessageDataType");
                return false;
            }
            return true;
        }
    case union__::TRefMessageData:
        {
            mozilla::dom::RefMessageData tmp = mozilla::dom::RefMessageData();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_RefMessageData())))))) {
                aActor->FatalError("Error deserializing variant TRefMessageData of union MessageDataType");
                return false;
            }
            // Sentinel = 'TRefMessageData'
            if ((!((aMsg)->ReadSentinel(aIter, 751437233)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TRefMessageData of union MessageDataType");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MessageData|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::MessageData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).agentClusterId());
    // Sentinel = 'agentClusterId'
    (aMsg)->WriteSentinel(710477215);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::MessageData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->agentClusterId())))))) {
        aActor->FatalError("Error deserializing 'agentClusterId' (nsID?) member of 'MessageData'");
        return false;
    }
    // Sentinel = 'agentClusterId'
    if ((!((aMsg)->ReadSentinel(aIter, 710477215)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'agentClusterId' (nsID?) member of 'MessageData'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (MessageDataType) member of 'MessageData'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (MessageDataType) member of 'MessageData'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPCDataTransferData|
//
namespace mozilla {
namespace dom {
auto IPCDataTransferData::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TnsString:
        {
            (ptr_nsString())->~nsString__tdef();
            break;
        }
    case TShmem:
        {
            (ptr_Shmem())->~Shmem__tdef();
            break;
        }
    case TIPCBlob:
        {
            (ptr_IPCBlob())->~IPCBlob__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPCDataTransferData::IPCDataTransferData(const nsString& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsString()) nsString(aOther);
    mType = TnsString;
}

MOZ_IMPLICIT IPCDataTransferData::IPCDataTransferData(nsString&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsString()) nsString(std::move(aOther));
    mType = TnsString;
}

MOZ_IMPLICIT IPCDataTransferData::IPCDataTransferData(Shmem&& aOther)
{
    new (mozilla::KnownNotNull, ptr_Shmem()) Shmem(aOther);
    mType = TShmem;
}

MOZ_IMPLICIT IPCDataTransferData::IPCDataTransferData(const IPCBlob& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(aOther);
    mType = TIPCBlob;
}

MOZ_IMPLICIT IPCDataTransferData::IPCDataTransferData(IPCBlob&& aOther)
{
    new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(std::move(aOther));
    mType = TIPCBlob;
}

MOZ_IMPLICIT IPCDataTransferData::IPCDataTransferData(const IPCDataTransferData& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TnsString:
        {
            new (mozilla::KnownNotNull, ptr_nsString()) nsString((aOther).get_nsString());
            break;
        }
    case TShmem:
        {
            new (mozilla::KnownNotNull, ptr_Shmem()) Shmem((aOther).get_Shmem());
            break;
        }
    case TIPCBlob:
        {
            new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob((aOther).get_IPCBlob());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPCDataTransferData::IPCDataTransferData(IPCDataTransferData&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case TnsString:
        {
            new (mozilla::KnownNotNull, ptr_nsString()) nsString(std::move((aOther).get_nsString()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TShmem:
        {
            new (mozilla::KnownNotNull, ptr_Shmem()) Shmem(std::move((aOther).get_Shmem()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TIPCBlob:
        {
            new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob(std::move((aOther).get_IPCBlob()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPCDataTransferData::~IPCDataTransferData()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPCDataTransferData::operator=(const nsString& aRhs) -> IPCDataTransferData&
{
    if (MaybeDestroy(TnsString)) {
        new (mozilla::KnownNotNull, ptr_nsString()) nsString;
    }
    (*(ptr_nsString())) = aRhs;
    mType = TnsString;
    return (*(this));
}

auto IPCDataTransferData::operator=(nsString&& aRhs) -> IPCDataTransferData&
{
    if (MaybeDestroy(TnsString)) {
        new (mozilla::KnownNotNull, ptr_nsString()) nsString;
    }
    (*(ptr_nsString())) = std::move(aRhs);
    mType = TnsString;
    return (*(this));
}

auto IPCDataTransferData::operator=(Shmem&& aRhs) -> IPCDataTransferData&
{
    if (MaybeDestroy(TShmem)) {
        new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
    }
    (*(ptr_Shmem())) = aRhs;
    mType = TShmem;
    return (*(this));
}

auto IPCDataTransferData::operator=(const IPCBlob& aRhs) -> IPCDataTransferData&
{
    if (MaybeDestroy(TIPCBlob)) {
        new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
    }
    (*(ptr_IPCBlob())) = aRhs;
    mType = TIPCBlob;
    return (*(this));
}

auto IPCDataTransferData::operator=(IPCBlob&& aRhs) -> IPCDataTransferData&
{
    if (MaybeDestroy(TIPCBlob)) {
        new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
    }
    (*(ptr_IPCBlob())) = std::move(aRhs);
    mType = TIPCBlob;
    return (*(this));
}

auto IPCDataTransferData::operator=(const IPCDataTransferData& aRhs) -> IPCDataTransferData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TnsString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsString()) nsString;
            }
            (*(ptr_nsString())) = (aRhs).get_nsString();
            break;
        }
    case TShmem:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
            }
            (*(ptr_Shmem())) = (aRhs).get_Shmem();
            break;
        }
    case TIPCBlob:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
            }
            (*(ptr_IPCBlob())) = (aRhs).get_IPCBlob();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPCDataTransferData::operator=(IPCDataTransferData&& aRhs) -> IPCDataTransferData&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TnsString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsString()) nsString;
            }
            (*(ptr_nsString())) = std::move((aRhs).get_nsString());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TShmem:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
            }
            (*(ptr_Shmem())) = std::move((aRhs).get_Shmem());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TIPCBlob:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_IPCBlob()) IPCBlob;
            }
            (*(ptr_IPCBlob())) = std::move((aRhs).get_IPCBlob());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCDataTransferData>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPCDataTransferData union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPCDataTransferData'
    (aMsg)->WriteSentinel(1136199446);

    switch (type) {
    case union__::TnsString:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsString());
            // Sentinel = 'TnsString'
            (aMsg)->WriteSentinel(302908333);
            return;
        }
    case union__::TShmem:
        {
            WriteIPDLParam(aMsg, aActor, std::move((aVar).get_Shmem()));
            // Sentinel = 'TShmem'
            (aMsg)->WriteSentinel(129696335);
            return;
        }
    case union__::TIPCBlob:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_IPCBlob());
            // Sentinel = 'TIPCBlob'
            (aMsg)->WriteSentinel(190972592);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPCDataTransferData>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPCDataTransferData union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPCDataTransferData");
        return false;
    }
    // Sentinel = 'IPCDataTransferData'
    if ((!((aMsg)->ReadSentinel(aIter, 1136199446)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPCDataTransferData");
        return false;
    }

    switch (type) {
    case union__::TnsString:
        {
            nsString tmp = nsString();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsString())))))) {
                aActor->FatalError("Error deserializing variant TnsString of union IPCDataTransferData");
                return false;
            }
            // Sentinel = 'TnsString'
            if ((!((aMsg)->ReadSentinel(aIter, 302908333)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsString of union IPCDataTransferData");
                return false;
            }
            return true;
        }
    case union__::TShmem:
        {
            mozilla::ipc::Shmem tmp = mozilla::ipc::Shmem();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_Shmem())))))) {
                aActor->FatalError("Error deserializing variant TShmem of union IPCDataTransferData");
                return false;
            }
            // Sentinel = 'TShmem'
            if ((!((aMsg)->ReadSentinel(aIter, 129696335)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TShmem of union IPCDataTransferData");
                return false;
            }
            return true;
        }
    case union__::TIPCBlob:
        {
            mozilla::dom::IPCBlob tmp = mozilla::dom::IPCBlob();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_IPCBlob())))))) {
                aActor->FatalError("Error deserializing variant TIPCBlob of union IPCDataTransferData");
                return false;
            }
            // Sentinel = 'TIPCBlob'
            if ((!((aMsg)->ReadSentinel(aIter, 190972592)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TIPCBlob of union IPCDataTransferData");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCDataTransferImage|
//
namespace mozilla {
namespace dom {
auto IPCDataTransferImage::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(IPCDataTransferImage, stride_) - offsetof(IPCDataTransferImage, width_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCDataTransferImage>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).format());
    // Sentinel = 'format'
    (aMsg)->WriteSentinel(148505226);
    (aMsg)->WriteBytes((&((aVar).width())), 12);
    // Sentinel = 'width | height | stride'
    (aMsg)->WriteSentinel(1729300637);
}

auto IPDLParamTraits<mozilla::dom::IPCDataTransferImage>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->format())))))) {
        aActor->FatalError("Error deserializing 'format' (SurfaceFormat) member of 'IPCDataTransferImage'");
        return false;
    }
    // Sentinel = 'format'
    if ((!((aMsg)->ReadSentinel(aIter, 148505226)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'format' (SurfaceFormat) member of 'IPCDataTransferImage'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->width())), 12)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'width | height | stride'
    if ((!((aMsg)->ReadSentinel(aIter, 1729300637)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCDataTransferItem|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCDataTransferItem>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).flavor());
    // Sentinel = 'flavor'
    (aMsg)->WriteSentinel(146539147);
    WriteIPDLParam(aMsg, aActor, (aVar).imageDetails());
    // Sentinel = 'imageDetails'
    (aMsg)->WriteSentinel(515900618);
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
}

auto IPDLParamTraits<mozilla::dom::IPCDataTransferItem>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->flavor())))))) {
        aActor->FatalError("Error deserializing 'flavor' (nsCString) member of 'IPCDataTransferItem'");
        return false;
    }
    // Sentinel = 'flavor'
    if ((!((aMsg)->ReadSentinel(aIter, 146539147)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'flavor' (nsCString) member of 'IPCDataTransferItem'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->imageDetails())))))) {
        aActor->FatalError("Error deserializing 'imageDetails' (IPCDataTransferImage) member of 'IPCDataTransferItem'");
        return false;
    }
    // Sentinel = 'imageDetails'
    if ((!((aMsg)->ReadSentinel(aIter, 515900618)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'imageDetails' (IPCDataTransferImage) member of 'IPCDataTransferItem'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (IPCDataTransferData) member of 'IPCDataTransferItem'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (IPCDataTransferData) member of 'IPCDataTransferItem'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPCDataTransfer|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPCDataTransfer>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).items());
    // Sentinel = 'items'
    (aMsg)->WriteSentinel(106824227);
}

auto IPDLParamTraits<mozilla::dom::IPCDataTransfer>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->items())))))) {
        aActor->FatalError("Error deserializing 'items' (IPCDataTransferItem[]) member of 'IPCDataTransfer'");
        return false;
    }
    // Sentinel = 'items'
    if ((!((aMsg)->ReadSentinel(aIter, 106824227)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'items' (IPCDataTransferItem[]) member of 'IPCDataTransfer'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ScreenDetails|
//
namespace mozilla {
namespace dom {
auto ScreenDetails::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ScreenDetails, dpi_) - offsetof(ScreenDetails, pixelDepth_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ScreenDetails>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).rect());
    // Sentinel = 'rect'
    (aMsg)->WriteSentinel(70582703);
    WriteIPDLParam(aMsg, aActor, (aVar).rectDisplayPix());
    // Sentinel = 'rectDisplayPix'
    (aMsg)->WriteSentinel(714540470);
    WriteIPDLParam(aMsg, aActor, (aVar).availRect());
    // Sentinel = 'availRect'
    (aMsg)->WriteSentinel(302777244);
    WriteIPDLParam(aMsg, aActor, (aVar).availRectDisplayPix());
    // Sentinel = 'availRectDisplayPix'
    (aMsg)->WriteSentinel(1269827491);
    WriteIPDLParam(aMsg, aActor, (aVar).contentsScaleFactor());
    // Sentinel = 'contentsScaleFactor'
    (aMsg)->WriteSentinel(1304102838);
    WriteIPDLParam(aMsg, aActor, (aVar).defaultCSSScaleFactor());
    // Sentinel = 'defaultCSSScaleFactor'
    (aMsg)->WriteSentinel(1482885142);
    (aMsg)->WriteBytes((&((aVar).pixelDepth())), 12);
    // Sentinel = 'pixelDepth | colorDepth | dpi'
    (aMsg)->WriteSentinel(2796096225);
}

auto IPDLParamTraits<mozilla::dom::ScreenDetails>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rect())))))) {
        aActor->FatalError("Error deserializing 'rect' (LayoutDeviceIntRect) member of 'ScreenDetails'");
        return false;
    }
    // Sentinel = 'rect'
    if ((!((aMsg)->ReadSentinel(aIter, 70582703)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rect' (LayoutDeviceIntRect) member of 'ScreenDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rectDisplayPix())))))) {
        aActor->FatalError("Error deserializing 'rectDisplayPix' (DesktopIntRect) member of 'ScreenDetails'");
        return false;
    }
    // Sentinel = 'rectDisplayPix'
    if ((!((aMsg)->ReadSentinel(aIter, 714540470)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rectDisplayPix' (DesktopIntRect) member of 'ScreenDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->availRect())))))) {
        aActor->FatalError("Error deserializing 'availRect' (LayoutDeviceIntRect) member of 'ScreenDetails'");
        return false;
    }
    // Sentinel = 'availRect'
    if ((!((aMsg)->ReadSentinel(aIter, 302777244)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'availRect' (LayoutDeviceIntRect) member of 'ScreenDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->availRectDisplayPix())))))) {
        aActor->FatalError("Error deserializing 'availRectDisplayPix' (DesktopIntRect) member of 'ScreenDetails'");
        return false;
    }
    // Sentinel = 'availRectDisplayPix'
    if ((!((aMsg)->ReadSentinel(aIter, 1269827491)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'availRectDisplayPix' (DesktopIntRect) member of 'ScreenDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentsScaleFactor())))))) {
        aActor->FatalError("Error deserializing 'contentsScaleFactor' (DesktopToLayoutDeviceScale) member of 'ScreenDetails'");
        return false;
    }
    // Sentinel = 'contentsScaleFactor'
    if ((!((aMsg)->ReadSentinel(aIter, 1304102838)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentsScaleFactor' (DesktopToLayoutDeviceScale) member of 'ScreenDetails'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->defaultCSSScaleFactor())))))) {
        aActor->FatalError("Error deserializing 'defaultCSSScaleFactor' (CSSToLayoutDeviceScale) member of 'ScreenDetails'");
        return false;
    }
    // Sentinel = 'defaultCSSScaleFactor'
    if ((!((aMsg)->ReadSentinel(aIter, 1482885142)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'defaultCSSScaleFactor' (CSSToLayoutDeviceScale) member of 'ScreenDetails'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->pixelDepth())), 12)))) {
        aActor->FatalError("Error bulk reading fields from int32_t");
        return false;
    }
    // Sentinel = 'pixelDepth | colorDepth | dpi'
    if ((!((aMsg)->ReadSentinel(aIter, 2796096225)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DimensionInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::DimensionInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).rect());
    // Sentinel = 'rect'
    (aMsg)->WriteSentinel(70582703);
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).orientation());
    // Sentinel = 'orientation'
    (aMsg)->WriteSentinel(471008429);
    WriteIPDLParam(aMsg, aActor, (aVar).clientOffset());
    // Sentinel = 'clientOffset'
    (aMsg)->WriteSentinel(530449639);
    WriteIPDLParam(aMsg, aActor, (aVar).chromeOffset());
    // Sentinel = 'chromeOffset'
    (aMsg)->WriteSentinel(531956966);
}

auto IPDLParamTraits<mozilla::dom::DimensionInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rect())))))) {
        aActor->FatalError("Error deserializing 'rect' (CSSRect) member of 'DimensionInfo'");
        return false;
    }
    // Sentinel = 'rect'
    if ((!((aMsg)->ReadSentinel(aIter, 70582703)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rect' (CSSRect) member of 'DimensionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (CSSSize) member of 'DimensionInfo'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (CSSSize) member of 'DimensionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->orientation())))))) {
        aActor->FatalError("Error deserializing 'orientation' (ScreenOrientation) member of 'DimensionInfo'");
        return false;
    }
    // Sentinel = 'orientation'
    if ((!((aMsg)->ReadSentinel(aIter, 471008429)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'orientation' (ScreenOrientation) member of 'DimensionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->clientOffset())))))) {
        aActor->FatalError("Error deserializing 'clientOffset' (LayoutDeviceIntPoint) member of 'DimensionInfo'");
        return false;
    }
    // Sentinel = 'clientOffset'
    if ((!((aMsg)->ReadSentinel(aIter, 530449639)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'clientOffset' (LayoutDeviceIntPoint) member of 'DimensionInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->chromeOffset())))))) {
        aActor->FatalError("Error deserializing 'chromeOffset' (LayoutDeviceIntPoint) member of 'DimensionInfo'");
        return false;
    }
    // Sentinel = 'chromeOffset'
    if ((!((aMsg)->ReadSentinel(aIter, 531956966)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'chromeOffset' (LayoutDeviceIntPoint) member of 'DimensionInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FrameScriptInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FrameScriptInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).url());
    // Sentinel = 'url'
    (aMsg)->WriteSentinel(45220180);
    WriteIPDLParam(aMsg, aActor, (aVar).runInGlobalScope());
    // Sentinel = 'runInGlobalScope'
    (aMsg)->WriteSentinel(907282008);
}

auto IPDLParamTraits<mozilla::dom::FrameScriptInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->url())))))) {
        aActor->FatalError("Error deserializing 'url' (nsString) member of 'FrameScriptInfo'");
        return false;
    }
    // Sentinel = 'url'
    if ((!((aMsg)->ReadSentinel(aIter, 45220180)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'url' (nsString) member of 'FrameScriptInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->runInGlobalScope())))))) {
        aActor->FatalError("Error deserializing 'runInGlobalScope' (bool) member of 'FrameScriptInfo'");
        return false;
    }
    // Sentinel = 'runInGlobalScope'
    if ((!((aMsg)->ReadSentinel(aIter, 907282008)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'runInGlobalScope' (bool) member of 'FrameScriptInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct FeaturePolicyInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::FeaturePolicyInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).inheritedDeniedFeatureNames());
    // Sentinel = 'inheritedDeniedFeatureNames'
    (aMsg)->WriteSentinel(2539588294);
    WriteIPDLParam(aMsg, aActor, (aVar).attributeEnabledFeatureNames());
    // Sentinel = 'attributeEnabledFeatureNames'
    (aMsg)->WriteSentinel(2760051520);
    WriteIPDLParam(aMsg, aActor, (aVar).declaredString());
    // Sentinel = 'declaredString'
    (aMsg)->WriteSentinel(706413996);
    WriteIPDLParam(aMsg, aActor, (aVar).defaultOrigin());
    // Sentinel = 'defaultOrigin'
    (aMsg)->WriteSentinel(618595662);
    WriteIPDLParam(aMsg, aActor, (aVar).selfOrigin());
    // Sentinel = 'selfOrigin'
    (aMsg)->WriteSentinel(376177683);
    WriteIPDLParam(aMsg, aActor, (aVar).srcOrigin());
    // Sentinel = 'srcOrigin'
    (aMsg)->WriteSentinel(310772657);
}

auto IPDLParamTraits<mozilla::dom::FeaturePolicyInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->inheritedDeniedFeatureNames())))))) {
        aActor->FatalError("Error deserializing 'inheritedDeniedFeatureNames' (nsString[]) member of 'FeaturePolicyInfo'");
        return false;
    }
    // Sentinel = 'inheritedDeniedFeatureNames'
    if ((!((aMsg)->ReadSentinel(aIter, 2539588294)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'inheritedDeniedFeatureNames' (nsString[]) member of 'FeaturePolicyInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->attributeEnabledFeatureNames())))))) {
        aActor->FatalError("Error deserializing 'attributeEnabledFeatureNames' (nsString[]) member of 'FeaturePolicyInfo'");
        return false;
    }
    // Sentinel = 'attributeEnabledFeatureNames'
    if ((!((aMsg)->ReadSentinel(aIter, 2760051520)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'attributeEnabledFeatureNames' (nsString[]) member of 'FeaturePolicyInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->declaredString())))))) {
        aActor->FatalError("Error deserializing 'declaredString' (nsString) member of 'FeaturePolicyInfo'");
        return false;
    }
    // Sentinel = 'declaredString'
    if ((!((aMsg)->ReadSentinel(aIter, 706413996)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'declaredString' (nsString) member of 'FeaturePolicyInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->defaultOrigin())))))) {
        aActor->FatalError("Error deserializing 'defaultOrigin' (nsIPrincipal) member of 'FeaturePolicyInfo'");
        return false;
    }
    // Sentinel = 'defaultOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 618595662)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'defaultOrigin' (nsIPrincipal) member of 'FeaturePolicyInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->selfOrigin())))))) {
        aActor->FatalError("Error deserializing 'selfOrigin' (nsIPrincipal) member of 'FeaturePolicyInfo'");
        return false;
    }
    // Sentinel = 'selfOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 376177683)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'selfOrigin' (nsIPrincipal) member of 'FeaturePolicyInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->srcOrigin())))))) {
        aActor->FatalError("Error deserializing 'srcOrigin' (nsIPrincipal) member of 'FeaturePolicyInfo'");
        return false;
    }
    // Sentinel = 'srcOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 310772657)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'srcOrigin' (nsIPrincipal) member of 'FeaturePolicyInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CreatedWindowInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::CreatedWindowInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).rv());
    // Sentinel = 'rv'
    (aMsg)->WriteSentinel(22806761);
    WriteIPDLParam(aMsg, aActor, (aVar).windowOpened());
    // Sentinel = 'windowOpened'
    (aMsg)->WriteSentinel(549586164);
    WriteIPDLParam(aMsg, aActor, (aVar).frameScripts());
    // Sentinel = 'frameScripts'
    (aMsg)->WriteSentinel(530646260);
    WriteIPDLParam(aMsg, aActor, (aVar).dimensions());
    // Sentinel = 'dimensions'
    (aMsg)->WriteSentinel(383845434);
    WriteIPDLParam(aMsg, aActor, (aVar).hasSiblings());
    // Sentinel = 'hasSiblings'
    (aMsg)->WriteSentinel(442893432);
    (aMsg)->WriteBytes((&((aVar).maxTouchPoints())), 4);
    // Sentinel = 'maxTouchPoints'
    (aMsg)->WriteSentinel(719586759);
}

auto IPDLParamTraits<mozilla::dom::CreatedWindowInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->rv())))))) {
        aActor->FatalError("Error deserializing 'rv' (nsresult) member of 'CreatedWindowInfo'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!((aMsg)->ReadSentinel(aIter, 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'rv' (nsresult) member of 'CreatedWindowInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->windowOpened())))))) {
        aActor->FatalError("Error deserializing 'windowOpened' (bool) member of 'CreatedWindowInfo'");
        return false;
    }
    // Sentinel = 'windowOpened'
    if ((!((aMsg)->ReadSentinel(aIter, 549586164)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'windowOpened' (bool) member of 'CreatedWindowInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->frameScripts())))))) {
        aActor->FatalError("Error deserializing 'frameScripts' (FrameScriptInfo[]) member of 'CreatedWindowInfo'");
        return false;
    }
    // Sentinel = 'frameScripts'
    if ((!((aMsg)->ReadSentinel(aIter, 530646260)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'frameScripts' (FrameScriptInfo[]) member of 'CreatedWindowInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dimensions())))))) {
        aActor->FatalError("Error deserializing 'dimensions' (DimensionInfo) member of 'CreatedWindowInfo'");
        return false;
    }
    // Sentinel = 'dimensions'
    if ((!((aMsg)->ReadSentinel(aIter, 383845434)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dimensions' (DimensionInfo) member of 'CreatedWindowInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->hasSiblings())))))) {
        aActor->FatalError("Error deserializing 'hasSiblings' (bool) member of 'CreatedWindowInfo'");
        return false;
    }
    // Sentinel = 'hasSiblings'
    if ((!((aMsg)->ReadSentinel(aIter, 442893432)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'hasSiblings' (bool) member of 'CreatedWindowInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->maxTouchPoints())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'maxTouchPoints'
    if ((!((aMsg)->ReadSentinel(aIter, 719586759)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MediaMemoryInfo|
//
namespace mozilla {
namespace dom {
auto MediaMemoryInfo::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(MediaMemoryInfo, resourcesSize_) - offsetof(MediaMemoryInfo, audioSize_)) == 16,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::MediaMemoryInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).audioSize())), 24);
    // Sentinel = 'audioSize | videoSize | resourcesSize'
    (aMsg)->WriteSentinel(212143694);
}

auto IPDLParamTraits<mozilla::dom::MediaMemoryInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->audioSize())), 24)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'audioSize | videoSize | resourcesSize'
    if ((!((aMsg)->ReadSentinel(aIter, 212143694)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PerformanceMemoryInfo|
//
namespace mozilla {
namespace dom {
auto PerformanceMemoryInfo::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(PerformanceMemoryInfo, GCHeapUsage_) - offsetof(PerformanceMemoryInfo, domDom_)) == 24,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PerformanceMemoryInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).media());
    // Sentinel = 'media'
    (aMsg)->WriteSentinel(102302209);
    (aMsg)->WriteBytes((&((aVar).domDom())), 32);
    // Sentinel = 'domDom | domStyle | domOther | GCHeapUsage'
    (aMsg)->WriteSentinel(1194135333);
}

auto IPDLParamTraits<mozilla::dom::PerformanceMemoryInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->media())))))) {
        aActor->FatalError("Error deserializing 'media' (MediaMemoryInfo) member of 'PerformanceMemoryInfo'");
        return false;
    }
    // Sentinel = 'media'
    if ((!((aMsg)->ReadSentinel(aIter, 102302209)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'media' (MediaMemoryInfo) member of 'PerformanceMemoryInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->domDom())), 32)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'domDom | domStyle | domOther | GCHeapUsage'
    if ((!((aMsg)->ReadSentinel(aIter, 1194135333)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CategoryDispatch|
//
namespace mozilla {
namespace dom {
auto CategoryDispatch::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(CategoryDispatch, count_) - offsetof(CategoryDispatch, category_)) == 2,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::CategoryDispatch>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).category())), 4);
    // Sentinel = 'category | count'
    (aMsg)->WriteSentinel(892601924);
}

auto IPDLParamTraits<mozilla::dom::CategoryDispatch>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->category())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint16_t");
        return false;
    }
    // Sentinel = 'category | count'
    if ((!((aMsg)->ReadSentinel(aIter, 892601924)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint16_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PerformanceInfo|
//
namespace mozilla {
namespace dom {
auto PerformanceInfo::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(PerformanceInfo, counterId_) - offsetof(PerformanceInfo, windowId_)) == 16,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PerformanceInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).host());
    // Sentinel = 'host'
    (aMsg)->WriteSentinel(72024511);
    WriteIPDLParam(aMsg, aActor, (aVar).isWorker());
    // Sentinel = 'isWorker'
    (aMsg)->WriteSentinel(250544983);
    WriteIPDLParam(aMsg, aActor, (aVar).isTopLevel());
    // Sentinel = 'isTopLevel'
    (aMsg)->WriteSentinel(371196936);
    WriteIPDLParam(aMsg, aActor, (aVar).memory());
    // Sentinel = 'memory'
    (aMsg)->WriteSentinel(149619354);
    WriteIPDLParam(aMsg, aActor, (aVar).items());
    // Sentinel = 'items'
    (aMsg)->WriteSentinel(106824227);
    (aMsg)->WriteBytes((&((aVar).windowId())), 24);
    // Sentinel = 'windowId | duration | counterId'
    (aMsg)->WriteSentinel(3181710289);
    (aMsg)->WriteBytes((&((aVar).pid())), 4);
    // Sentinel = 'pid'
    (aMsg)->WriteSentinel(42533182);
}

auto IPDLParamTraits<mozilla::dom::PerformanceInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->host())))))) {
        aActor->FatalError("Error deserializing 'host' (nsCString) member of 'PerformanceInfo'");
        return false;
    }
    // Sentinel = 'host'
    if ((!((aMsg)->ReadSentinel(aIter, 72024511)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'host' (nsCString) member of 'PerformanceInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isWorker())))))) {
        aActor->FatalError("Error deserializing 'isWorker' (bool) member of 'PerformanceInfo'");
        return false;
    }
    // Sentinel = 'isWorker'
    if ((!((aMsg)->ReadSentinel(aIter, 250544983)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isWorker' (bool) member of 'PerformanceInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isTopLevel())))))) {
        aActor->FatalError("Error deserializing 'isTopLevel' (bool) member of 'PerformanceInfo'");
        return false;
    }
    // Sentinel = 'isTopLevel'
    if ((!((aMsg)->ReadSentinel(aIter, 371196936)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isTopLevel' (bool) member of 'PerformanceInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->memory())))))) {
        aActor->FatalError("Error deserializing 'memory' (PerformanceMemoryInfo) member of 'PerformanceInfo'");
        return false;
    }
    // Sentinel = 'memory'
    if ((!((aMsg)->ReadSentinel(aIter, 149619354)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'memory' (PerformanceMemoryInfo) member of 'PerformanceInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->items())))))) {
        aActor->FatalError("Error deserializing 'items' (CategoryDispatch[]) member of 'PerformanceInfo'");
        return false;
    }
    // Sentinel = 'items'
    if ((!((aMsg)->ReadSentinel(aIter, 106824227)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'items' (CategoryDispatch[]) member of 'PerformanceInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->windowId())), 24)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'windowId | duration | counterId'
    if ((!((aMsg)->ReadSentinel(aIter, 3181710289)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->pid())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'pid'
    if ((!((aMsg)->ReadSentinel(aIter, 42533182)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct DocShellLoadStateInit|
//
namespace mozilla {
namespace dom {
auto DocShellLoadStateInit::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(DocShellLoadStateInit, TriggeringSandboxFlags_) - offsetof(DocShellLoadStateInit, LoadType_)) == 12,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::DocShellLoadStateInit>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).URI());
    // Sentinel = 'URI'
    (aMsg)->WriteSentinel(32440561);
    WriteIPDLParam(aMsg, aActor, (aVar).OriginalURI());
    // Sentinel = 'OriginalURI'
    (aMsg)->WriteSentinel(432079910);
    WriteIPDLParam(aMsg, aActor, (aVar).ResultPrincipalURI());
    // Sentinel = 'ResultPrincipalURI'
    (aMsg)->WriteSentinel(1159202578);
    WriteIPDLParam(aMsg, aActor, (aVar).ResultPrincipalURIIsSome());
    // Sentinel = 'ResultPrincipalURIIsSome'
    (aMsg)->WriteSentinel(2001799522);
    WriteIPDLParam(aMsg, aActor, (aVar).TriggeringPrincipal());
    // Sentinel = 'TriggeringPrincipal'
    (aMsg)->WriteSentinel(1285883829);
    WriteIPDLParam(aMsg, aActor, (aVar).ReferrerInfo());
    // Sentinel = 'ReferrerInfo'
    (aMsg)->WriteSentinel(515048650);
    WriteIPDLParam(aMsg, aActor, (aVar).KeepResultPrincipalURIIfSet());
    // Sentinel = 'KeepResultPrincipalURIIfSet'
    (aMsg)->WriteSentinel(2486831730);
    WriteIPDLParam(aMsg, aActor, (aVar).LoadReplace());
    // Sentinel = 'LoadReplace'
    (aMsg)->WriteSentinel(418907197);
    WriteIPDLParam(aMsg, aActor, (aVar).InheritPrincipal());
    // Sentinel = 'InheritPrincipal'
    (aMsg)->WriteSentinel(908723830);
    WriteIPDLParam(aMsg, aActor, (aVar).PrincipalIsExplicit());
    // Sentinel = 'PrincipalIsExplicit'
    (aMsg)->WriteSentinel(1265567649);
    WriteIPDLParam(aMsg, aActor, (aVar).PrincipalToInherit());
    // Sentinel = 'PrincipalToInherit'
    (aMsg)->WriteSentinel(1138689849);
    WriteIPDLParam(aMsg, aActor, (aVar).PartitionedPrincipalToInherit());
    // Sentinel = 'PartitionedPrincipalToInherit'
    (aMsg)->WriteSentinel(2949909436);
    WriteIPDLParam(aMsg, aActor, (aVar).ForceAllowDataURI());
    // Sentinel = 'ForceAllowDataURI'
    (aMsg)->WriteSentinel(977077849);
    WriteIPDLParam(aMsg, aActor, (aVar).OriginalFrameSrc());
    // Sentinel = 'OriginalFrameSrc'
    (aMsg)->WriteSentinel(896271945);
    WriteIPDLParam(aMsg, aActor, (aVar).IsFormSubmission());
    // Sentinel = 'IsFormSubmission'
    (aMsg)->WriteSentinel(893978237);
    WriteIPDLParam(aMsg, aActor, (aVar).Target());
    // Sentinel = 'Target'
    (aMsg)->WriteSentinel(136184424);
    WriteIPDLParam(aMsg, aActor, (aVar).BaseURI());
    // Sentinel = 'BaseURI'
    (aMsg)->WriteSentinel(165282412);
    WriteIPDLParam(aMsg, aActor, (aVar).FirstParty());
    // Sentinel = 'FirstParty'
    (aMsg)->WriteSentinel(363791385);
    WriteIPDLParam(aMsg, aActor, (aVar).HasValidUserGestureActivation());
    // Sentinel = 'HasValidUserGestureActivation'
    (aMsg)->WriteSentinel(2853571485);
    WriteIPDLParam(aMsg, aActor, (aVar).AllowFocusMove());
    // Sentinel = 'AllowFocusMove'
    (aMsg)->WriteSentinel(688194967);
    WriteIPDLParam(aMsg, aActor, (aVar).TypeHint());
    // Sentinel = 'TypeHint'
    (aMsg)->WriteSentinel(238748470);
    WriteIPDLParam(aMsg, aActor, (aVar).FileName());
    // Sentinel = 'FileName'
    (aMsg)->WriteSentinel(221381378);
    WriteIPDLParam(aMsg, aActor, (aVar).IsFromProcessingFrameAttributes());
    // Sentinel = 'IsFromProcessingFrameAttributes'
    (aMsg)->WriteSentinel(3294956672);
    WriteIPDLParam(aMsg, aActor, (aVar).Csp());
    // Sentinel = 'Csp'
    (aMsg)->WriteSentinel(35782951);
    WriteIPDLParam(aMsg, aActor, (aVar).SourceBrowsingContext());
    // Sentinel = 'SourceBrowsingContext'
    (aMsg)->WriteSentinel(1569720482);
    WriteIPDLParam(aMsg, aActor, (aVar).TargetBrowsingContext());
    // Sentinel = 'TargetBrowsingContext'
    (aMsg)->WriteSentinel(1553991832);
    WriteIPDLParam(aMsg, aActor, (aVar).OriginalURIString());
    // Sentinel = 'OriginalURIString'
    (aMsg)->WriteSentinel(992020125);
    WriteIPDLParam(aMsg, aActor, (aVar).CancelContentJSEpoch());
    // Sentinel = 'CancelContentJSEpoch'
    (aMsg)->WriteSentinel(1340278702);
    WriteIPDLParam(aMsg, aActor, (aVar).PostDataStream());
    // Sentinel = 'PostDataStream'
    (aMsg)->WriteSentinel(690292109);
    WriteIPDLParam(aMsg, aActor, (aVar).HeadersStream());
    // Sentinel = 'HeadersStream'
    (aMsg)->WriteSentinel(589432105);
    WriteIPDLParam(aMsg, aActor, (aVar).SrcdocData());
    // Sentinel = 'SrcdocData'
    (aMsg)->WriteSentinel(354616281);
    WriteIPDLParam(aMsg, aActor, (aVar).ChannelInitialized());
    // Sentinel = 'ChannelInitialized'
    (aMsg)->WriteSentinel(1118308144);
    WriteIPDLParam(aMsg, aActor, (aVar).TryToReplaceWithSessionHistoryLoad());
    // Sentinel = 'TryToReplaceWithSessionHistoryLoad'
    (aMsg)->WriteSentinel(3987606961);
    WriteIPDLParam(aMsg, aActor, (aVar).loadingSessionHistoryInfo());
    // Sentinel = 'loadingSessionHistoryInfo'
    (aMsg)->WriteSentinel(2228161089);
    (aMsg)->WriteBytes((&((aVar).LoadIdentifier())), 8);
    // Sentinel = 'LoadIdentifier'
    (aMsg)->WriteSentinel(671942020);
    (aMsg)->WriteBytes((&((aVar).LoadType())), 16);
    // Sentinel = 'LoadType | LoadFlags | InternalLoadFlags | TriggeringSandboxFlags'
    (aMsg)->WriteSentinel(236853308);
}

auto IPDLParamTraits<mozilla::dom::DocShellLoadStateInit>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->URI())))))) {
        aActor->FatalError("Error deserializing 'URI' (nsIURI) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'URI'
    if ((!((aMsg)->ReadSentinel(aIter, 32440561)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'URI' (nsIURI) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->OriginalURI())))))) {
        aActor->FatalError("Error deserializing 'OriginalURI' (nsIURI) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'OriginalURI'
    if ((!((aMsg)->ReadSentinel(aIter, 432079910)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'OriginalURI' (nsIURI) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ResultPrincipalURI())))))) {
        aActor->FatalError("Error deserializing 'ResultPrincipalURI' (nsIURI) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'ResultPrincipalURI'
    if ((!((aMsg)->ReadSentinel(aIter, 1159202578)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ResultPrincipalURI' (nsIURI) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ResultPrincipalURIIsSome())))))) {
        aActor->FatalError("Error deserializing 'ResultPrincipalURIIsSome' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'ResultPrincipalURIIsSome'
    if ((!((aMsg)->ReadSentinel(aIter, 2001799522)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ResultPrincipalURIIsSome' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->TriggeringPrincipal())))))) {
        aActor->FatalError("Error deserializing 'TriggeringPrincipal' (nsIPrincipal) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'TriggeringPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 1285883829)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'TriggeringPrincipal' (nsIPrincipal) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ReferrerInfo())))))) {
        aActor->FatalError("Error deserializing 'ReferrerInfo' (nsIReferrerInfo) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'ReferrerInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 515048650)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ReferrerInfo' (nsIReferrerInfo) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->KeepResultPrincipalURIIfSet())))))) {
        aActor->FatalError("Error deserializing 'KeepResultPrincipalURIIfSet' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'KeepResultPrincipalURIIfSet'
    if ((!((aMsg)->ReadSentinel(aIter, 2486831730)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'KeepResultPrincipalURIIfSet' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->LoadReplace())))))) {
        aActor->FatalError("Error deserializing 'LoadReplace' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'LoadReplace'
    if ((!((aMsg)->ReadSentinel(aIter, 418907197)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'LoadReplace' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->InheritPrincipal())))))) {
        aActor->FatalError("Error deserializing 'InheritPrincipal' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'InheritPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 908723830)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'InheritPrincipal' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->PrincipalIsExplicit())))))) {
        aActor->FatalError("Error deserializing 'PrincipalIsExplicit' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'PrincipalIsExplicit'
    if ((!((aMsg)->ReadSentinel(aIter, 1265567649)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PrincipalIsExplicit' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->PrincipalToInherit())))))) {
        aActor->FatalError("Error deserializing 'PrincipalToInherit' (nsIPrincipal) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'PrincipalToInherit'
    if ((!((aMsg)->ReadSentinel(aIter, 1138689849)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PrincipalToInherit' (nsIPrincipal) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->PartitionedPrincipalToInherit())))))) {
        aActor->FatalError("Error deserializing 'PartitionedPrincipalToInherit' (nsIPrincipal) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'PartitionedPrincipalToInherit'
    if ((!((aMsg)->ReadSentinel(aIter, 2949909436)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PartitionedPrincipalToInherit' (nsIPrincipal) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ForceAllowDataURI())))))) {
        aActor->FatalError("Error deserializing 'ForceAllowDataURI' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'ForceAllowDataURI'
    if ((!((aMsg)->ReadSentinel(aIter, 977077849)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ForceAllowDataURI' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->OriginalFrameSrc())))))) {
        aActor->FatalError("Error deserializing 'OriginalFrameSrc' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'OriginalFrameSrc'
    if ((!((aMsg)->ReadSentinel(aIter, 896271945)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'OriginalFrameSrc' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->IsFormSubmission())))))) {
        aActor->FatalError("Error deserializing 'IsFormSubmission' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'IsFormSubmission'
    if ((!((aMsg)->ReadSentinel(aIter, 893978237)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'IsFormSubmission' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Target())))))) {
        aActor->FatalError("Error deserializing 'Target' (nsString) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'Target'
    if ((!((aMsg)->ReadSentinel(aIter, 136184424)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Target' (nsString) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->BaseURI())))))) {
        aActor->FatalError("Error deserializing 'BaseURI' (nsIURI) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'BaseURI'
    if ((!((aMsg)->ReadSentinel(aIter, 165282412)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'BaseURI' (nsIURI) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->FirstParty())))))) {
        aActor->FatalError("Error deserializing 'FirstParty' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'FirstParty'
    if ((!((aMsg)->ReadSentinel(aIter, 363791385)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'FirstParty' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->HasValidUserGestureActivation())))))) {
        aActor->FatalError("Error deserializing 'HasValidUserGestureActivation' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'HasValidUserGestureActivation'
    if ((!((aMsg)->ReadSentinel(aIter, 2853571485)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'HasValidUserGestureActivation' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->AllowFocusMove())))))) {
        aActor->FatalError("Error deserializing 'AllowFocusMove' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'AllowFocusMove'
    if ((!((aMsg)->ReadSentinel(aIter, 688194967)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'AllowFocusMove' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->TypeHint())))))) {
        aActor->FatalError("Error deserializing 'TypeHint' (nsCString) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'TypeHint'
    if ((!((aMsg)->ReadSentinel(aIter, 238748470)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'TypeHint' (nsCString) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->FileName())))))) {
        aActor->FatalError("Error deserializing 'FileName' (nsString) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'FileName'
    if ((!((aMsg)->ReadSentinel(aIter, 221381378)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'FileName' (nsString) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->IsFromProcessingFrameAttributes())))))) {
        aActor->FatalError("Error deserializing 'IsFromProcessingFrameAttributes' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'IsFromProcessingFrameAttributes'
    if ((!((aMsg)->ReadSentinel(aIter, 3294956672)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'IsFromProcessingFrameAttributes' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->Csp())))))) {
        aActor->FatalError("Error deserializing 'Csp' (nsIContentSecurityPolicy) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'Csp'
    if ((!((aMsg)->ReadSentinel(aIter, 35782951)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'Csp' (nsIContentSecurityPolicy) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->SourceBrowsingContext())))))) {
        aActor->FatalError("Error deserializing 'SourceBrowsingContext' (MaybeDiscardedBrowsingContext) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'SourceBrowsingContext'
    if ((!((aMsg)->ReadSentinel(aIter, 1569720482)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'SourceBrowsingContext' (MaybeDiscardedBrowsingContext) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->TargetBrowsingContext())))))) {
        aActor->FatalError("Error deserializing 'TargetBrowsingContext' (MaybeDiscardedBrowsingContext) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'TargetBrowsingContext'
    if ((!((aMsg)->ReadSentinel(aIter, 1553991832)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'TargetBrowsingContext' (MaybeDiscardedBrowsingContext) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->OriginalURIString())))))) {
        aActor->FatalError("Error deserializing 'OriginalURIString' (nsCString?) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'OriginalURIString'
    if ((!((aMsg)->ReadSentinel(aIter, 992020125)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'OriginalURIString' (nsCString?) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->CancelContentJSEpoch())))))) {
        aActor->FatalError("Error deserializing 'CancelContentJSEpoch' (int32_t?) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'CancelContentJSEpoch'
    if ((!((aMsg)->ReadSentinel(aIter, 1340278702)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'CancelContentJSEpoch' (int32_t?) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->PostDataStream())))))) {
        aActor->FatalError("Error deserializing 'PostDataStream' (nsIInputStream) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'PostDataStream'
    if ((!((aMsg)->ReadSentinel(aIter, 690292109)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'PostDataStream' (nsIInputStream) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->HeadersStream())))))) {
        aActor->FatalError("Error deserializing 'HeadersStream' (nsIInputStream) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'HeadersStream'
    if ((!((aMsg)->ReadSentinel(aIter, 589432105)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'HeadersStream' (nsIInputStream) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->SrcdocData())))))) {
        aActor->FatalError("Error deserializing 'SrcdocData' (nsString) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'SrcdocData'
    if ((!((aMsg)->ReadSentinel(aIter, 354616281)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'SrcdocData' (nsString) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->ChannelInitialized())))))) {
        aActor->FatalError("Error deserializing 'ChannelInitialized' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'ChannelInitialized'
    if ((!((aMsg)->ReadSentinel(aIter, 1118308144)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'ChannelInitialized' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->TryToReplaceWithSessionHistoryLoad())))))) {
        aActor->FatalError("Error deserializing 'TryToReplaceWithSessionHistoryLoad' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'TryToReplaceWithSessionHistoryLoad'
    if ((!((aMsg)->ReadSentinel(aIter, 3987606961)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'TryToReplaceWithSessionHistoryLoad' (bool) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->loadingSessionHistoryInfo())))))) {
        aActor->FatalError("Error deserializing 'loadingSessionHistoryInfo' (LoadingSessionHistoryInfo?) member of 'DocShellLoadStateInit'");
        return false;
    }
    // Sentinel = 'loadingSessionHistoryInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 2228161089)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'loadingSessionHistoryInfo' (LoadingSessionHistoryInfo?) member of 'DocShellLoadStateInit'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->LoadIdentifier())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'LoadIdentifier'
    if ((!((aMsg)->ReadSentinel(aIter, 671942020)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->LoadType())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'LoadType | LoadFlags | InternalLoadFlags | TriggeringSandboxFlags'
    if ((!((aMsg)->ReadSentinel(aIter, 236853308)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TimedChannelInfo|
//
namespace mozilla {
namespace dom {
auto TimedChannelInfo::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(TimedChannelInfo, internalRedirectCount_) - offsetof(TimedChannelInfo, redirectCount_)) == 1,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::TimedChannelInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).timingEnabled());
    // Sentinel = 'timingEnabled'
    (aMsg)->WriteSentinel(621937972);
    WriteIPDLParam(aMsg, aActor, (aVar).asyncOpen());
    // Sentinel = 'asyncOpen'
    (aMsg)->WriteSentinel(312476593);
    WriteIPDLParam(aMsg, aActor, (aVar).channelCreation());
    // Sentinel = 'channelCreation'
    (aMsg)->WriteSentinel(803800591);
    WriteIPDLParam(aMsg, aActor, (aVar).redirectStart());
    // Sentinel = 'redirectStart'
    (aMsg)->WriteSentinel(628753761);
    WriteIPDLParam(aMsg, aActor, (aVar).redirectEnd());
    // Sentinel = 'redirectEnd'
    (aMsg)->WriteSentinel(452527210);
    WriteIPDLParam(aMsg, aActor, (aVar).initiatorType());
    // Sentinel = 'initiatorType'
    (aMsg)->WriteSentinel(642647414);
    WriteIPDLParam(aMsg, aActor, (aVar).allRedirectsSameOrigin());
    // Sentinel = 'allRedirectsSameOrigin'
    (aMsg)->WriteSentinel(1689716941);
    WriteIPDLParam(aMsg, aActor, (aVar).allRedirectsPassTimingAllowCheck());
    // Sentinel = 'allRedirectsPassTimingAllowCheck'
    (aMsg)->WriteSentinel(3535342779);
    WriteIPDLParam(aMsg, aActor, (aVar).timingAllowCheckForPrincipal());
    // Sentinel = 'timingAllowCheckForPrincipal'
    (aMsg)->WriteSentinel(2723941167);
    WriteIPDLParam(aMsg, aActor, (aVar).launchServiceWorkerStart());
    // Sentinel = 'launchServiceWorkerStart'
    (aMsg)->WriteSentinel(2052262357);
    WriteIPDLParam(aMsg, aActor, (aVar).launchServiceWorkerEnd());
    // Sentinel = 'launchServiceWorkerEnd'
    (aMsg)->WriteSentinel(1726613726);
    WriteIPDLParam(aMsg, aActor, (aVar).dispatchFetchEventStart());
    // Sentinel = 'dispatchFetchEventStart'
    (aMsg)->WriteSentinel(1861880139);
    WriteIPDLParam(aMsg, aActor, (aVar).dispatchFetchEventEnd());
    // Sentinel = 'dispatchFetchEventEnd'
    (aMsg)->WriteSentinel(1554319444);
    WriteIPDLParam(aMsg, aActor, (aVar).handleFetchEventStart());
    // Sentinel = 'handleFetchEventStart'
    (aMsg)->WriteSentinel(1529022567);
    WriteIPDLParam(aMsg, aActor, (aVar).handleFetchEventEnd());
    // Sentinel = 'handleFetchEventEnd'
    (aMsg)->WriteSentinel(1251346288);
    WriteIPDLParam(aMsg, aActor, (aVar).responseStart());
    // Sentinel = 'responseStart'
    (aMsg)->WriteSentinel(648545662);
    WriteIPDLParam(aMsg, aActor, (aVar).responseEnd());
    // Sentinel = 'responseEnd'
    (aMsg)->WriteSentinel(468518023);
    (aMsg)->WriteBytes((&((aVar).redirectCount())), 2);
    // Sentinel = 'redirectCount | internalRedirectCount'
    (aMsg)->WriteSentinel(359534256);
}

auto IPDLParamTraits<mozilla::dom::TimedChannelInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->timingEnabled())))))) {
        aActor->FatalError("Error deserializing 'timingEnabled' (bool) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'timingEnabled'
    if ((!((aMsg)->ReadSentinel(aIter, 621937972)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'timingEnabled' (bool) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->asyncOpen())))))) {
        aActor->FatalError("Error deserializing 'asyncOpen' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'asyncOpen'
    if ((!((aMsg)->ReadSentinel(aIter, 312476593)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'asyncOpen' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->channelCreation())))))) {
        aActor->FatalError("Error deserializing 'channelCreation' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'channelCreation'
    if ((!((aMsg)->ReadSentinel(aIter, 803800591)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'channelCreation' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->redirectStart())))))) {
        aActor->FatalError("Error deserializing 'redirectStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'redirectStart'
    if ((!((aMsg)->ReadSentinel(aIter, 628753761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'redirectStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->redirectEnd())))))) {
        aActor->FatalError("Error deserializing 'redirectEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'redirectEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 452527210)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'redirectEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->initiatorType())))))) {
        aActor->FatalError("Error deserializing 'initiatorType' (nsString) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'initiatorType'
    if ((!((aMsg)->ReadSentinel(aIter, 642647414)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'initiatorType' (nsString) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allRedirectsSameOrigin())))))) {
        aActor->FatalError("Error deserializing 'allRedirectsSameOrigin' (bool) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'allRedirectsSameOrigin'
    if ((!((aMsg)->ReadSentinel(aIter, 1689716941)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allRedirectsSameOrigin' (bool) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->allRedirectsPassTimingAllowCheck())))))) {
        aActor->FatalError("Error deserializing 'allRedirectsPassTimingAllowCheck' (bool) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'allRedirectsPassTimingAllowCheck'
    if ((!((aMsg)->ReadSentinel(aIter, 3535342779)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'allRedirectsPassTimingAllowCheck' (bool) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->timingAllowCheckForPrincipal())))))) {
        aActor->FatalError("Error deserializing 'timingAllowCheckForPrincipal' (bool?) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'timingAllowCheckForPrincipal'
    if ((!((aMsg)->ReadSentinel(aIter, 2723941167)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'timingAllowCheckForPrincipal' (bool?) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->launchServiceWorkerStart())))))) {
        aActor->FatalError("Error deserializing 'launchServiceWorkerStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'launchServiceWorkerStart'
    if ((!((aMsg)->ReadSentinel(aIter, 2052262357)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'launchServiceWorkerStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->launchServiceWorkerEnd())))))) {
        aActor->FatalError("Error deserializing 'launchServiceWorkerEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'launchServiceWorkerEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 1726613726)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'launchServiceWorkerEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dispatchFetchEventStart())))))) {
        aActor->FatalError("Error deserializing 'dispatchFetchEventStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'dispatchFetchEventStart'
    if ((!((aMsg)->ReadSentinel(aIter, 1861880139)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dispatchFetchEventStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->dispatchFetchEventEnd())))))) {
        aActor->FatalError("Error deserializing 'dispatchFetchEventEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'dispatchFetchEventEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 1554319444)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'dispatchFetchEventEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handleFetchEventStart())))))) {
        aActor->FatalError("Error deserializing 'handleFetchEventStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'handleFetchEventStart'
    if ((!((aMsg)->ReadSentinel(aIter, 1529022567)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handleFetchEventStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->handleFetchEventEnd())))))) {
        aActor->FatalError("Error deserializing 'handleFetchEventEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'handleFetchEventEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 1251346288)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'handleFetchEventEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->responseStart())))))) {
        aActor->FatalError("Error deserializing 'responseStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'responseStart'
    if ((!((aMsg)->ReadSentinel(aIter, 648545662)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'responseStart' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->responseEnd())))))) {
        aActor->FatalError("Error deserializing 'responseEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    // Sentinel = 'responseEnd'
    if ((!((aMsg)->ReadSentinel(aIter, 468518023)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'responseEnd' (TimeStamp) member of 'TimedChannelInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->redirectCount())), 2)))) {
        aActor->FatalError("Error bulk reading fields from int8_t");
        return false;
    }
    // Sentinel = 'redirectCount | internalRedirectCount'
    if ((!((aMsg)->ReadSentinel(aIter, 359534256)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from int8_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ReplacementChannelConfigInit|
//
namespace mozilla {
namespace dom {
auto ReplacementChannelConfigInit::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ReplacementChannelConfigInit, classOfService_) - offsetof(ReplacementChannelConfigInit, redirectFlags_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ReplacementChannelConfigInit>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).privateBrowsing());
    // Sentinel = 'privateBrowsing'
    (aMsg)->WriteSentinel(844957255);
    WriteIPDLParam(aMsg, aActor, (aVar).method());
    // Sentinel = 'method'
    (aMsg)->WriteSentinel(148308610);
    WriteIPDLParam(aMsg, aActor, (aVar).referrerInfo());
    // Sentinel = 'referrerInfo'
    (aMsg)->WriteSentinel(540214506);
    WriteIPDLParam(aMsg, aActor, (aVar).timedChannel());
    // Sentinel = 'timedChannel'
    (aMsg)->WriteSentinel(525337805);
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        WriteIPDLParam(aMsg, aActor, (aVar).uploadStreamParent());
        // Sentinel = 'uploadStream'
        (aMsg)->WriteSentinel(546768114);
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        WriteIPDLParam(aMsg, aActor, (aVar).uploadStreamChild());
        // Sentinel = 'uploadStream'
        (aMsg)->WriteSentinel(546768114);
    }
    WriteIPDLParam(aMsg, aActor, (aVar).uploadStreamHasHeaders());
    // Sentinel = 'uploadStreamHasHeaders'
    (aMsg)->WriteSentinel(1714227402);
    WriteIPDLParam(aMsg, aActor, (aVar).contentType());
    // Sentinel = 'contentType'
    (aMsg)->WriteSentinel(465241246);
    WriteIPDLParam(aMsg, aActor, (aVar).contentLength());
    // Sentinel = 'contentLength'
    (aMsg)->WriteSentinel(632358238);
    (aMsg)->WriteBytes((&((aVar).redirectFlags())), 8);
    // Sentinel = 'redirectFlags | classOfService'
    (aMsg)->WriteSentinel(3019180952);
}

auto IPDLParamTraits<mozilla::dom::ReplacementChannelConfigInit>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->privateBrowsing())))))) {
        aActor->FatalError("Error deserializing 'privateBrowsing' (bool?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    // Sentinel = 'privateBrowsing'
    if ((!((aMsg)->ReadSentinel(aIter, 844957255)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'privateBrowsing' (bool?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->method())))))) {
        aActor->FatalError("Error deserializing 'method' (nsCString?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    // Sentinel = 'method'
    if ((!((aMsg)->ReadSentinel(aIter, 148308610)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'method' (nsCString?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->referrerInfo())))))) {
        aActor->FatalError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    // Sentinel = 'referrerInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 540214506)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'referrerInfo' (nsIReferrerInfo) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->timedChannel())))))) {
        aActor->FatalError("Error deserializing 'timedChannel' (TimedChannelInfo?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    // Sentinel = 'timedChannel'
    if ((!((aMsg)->ReadSentinel(aIter, 525337805)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'timedChannel' (TimedChannelInfo?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    if ((mozilla::ipc::ParentSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uploadStreamParent())))))) {
            aActor->FatalError("Error deserializing 'uploadStreamParent' (PRemoteLazyInputStream) member of 'ReplacementChannelConfigInit'");
            return false;
        }
        // Sentinel = 'uploadStream'
        if ((!((aMsg)->ReadSentinel(aIter, 546768114)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'uploadStreamParent' (PRemoteLazyInputStream) member of 'ReplacementChannelConfigInit'");
            return false;
        }
    }
    if ((mozilla::ipc::ChildSide) == ((aActor)->GetSide())) {
        if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uploadStreamChild())))))) {
            aActor->FatalError("Error deserializing 'uploadStreamChild' (PRemoteLazyInputStream) member of 'ReplacementChannelConfigInit'");
            return false;
        }
        // Sentinel = 'uploadStream'
        if ((!((aMsg)->ReadSentinel(aIter, 546768114)))) {
            mozilla::ipc::SentinelReadError("Error deserializing 'uploadStreamChild' (PRemoteLazyInputStream) member of 'ReplacementChannelConfigInit'");
            return false;
        }
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->uploadStreamHasHeaders())))))) {
        aActor->FatalError("Error deserializing 'uploadStreamHasHeaders' (bool) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    // Sentinel = 'uploadStreamHasHeaders'
    if ((!((aMsg)->ReadSentinel(aIter, 1714227402)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'uploadStreamHasHeaders' (bool) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentType())))))) {
        aActor->FatalError("Error deserializing 'contentType' (nsCString?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    // Sentinel = 'contentType'
    if ((!((aMsg)->ReadSentinel(aIter, 465241246)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentType' (nsCString?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->contentLength())))))) {
        aActor->FatalError("Error deserializing 'contentLength' (nsCString?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    // Sentinel = 'contentLength'
    if ((!((aMsg)->ReadSentinel(aIter, 632358238)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'contentLength' (nsCString?) member of 'ReplacementChannelConfigInit'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->redirectFlags())), 8)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'redirectFlags | classOfService'
    if ((!((aMsg)->ReadSentinel(aIter, 3019180952)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union IPDLVariantValue|
//
namespace mozilla {
namespace dom {
auto IPDLVariantValue::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tbool:
        {
            (ptr_bool())->~bool__tdef();
            break;
        }
    case Tuint8_t:
        {
            (ptr_uint8_t())->~uint8_t__tdef();
            break;
        }
    case Tint16_t:
        {
            (ptr_int16_t())->~int16_t__tdef();
            break;
        }
    case Tuint16_t:
        {
            (ptr_uint16_t())->~uint16_t__tdef();
            break;
        }
    case Tint32_t:
        {
            (ptr_int32_t())->~int32_t__tdef();
            break;
        }
    case Tuint32_t:
        {
            (ptr_uint32_t())->~uint32_t__tdef();
            break;
        }
    case Tfloat:
        {
            (ptr_float())->~float__tdef();
            break;
        }
    case Tdouble:
        {
            (ptr_double())->~double__tdef();
            break;
        }
    case TnsID:
        {
            (ptr_nsID())->~nsID__tdef();
            break;
        }
    case TnsString:
        {
            (ptr_nsString())->~nsString__tdef();
            break;
        }
    case TnsCString:
        {
            (ptr_nsCString())->~nsCString__tdef();
            break;
        }
    case TnsIURI:
        {
            (ptr_nsIURI())->~nsIURI__tdef();
            break;
        }
    case TnsIPrincipal:
        {
            (ptr_nsIPrincipal())->~nsIPrincipal__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const bool& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(aOther);
    mType = Tbool;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(bool&& aOther)
{
    new (mozilla::KnownNotNull, ptr_bool()) bool(std::move(aOther));
    mType = Tbool;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const uint8_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_uint8_t()) uint8_t(aOther);
    mType = Tuint8_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(uint8_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_uint8_t()) uint8_t(std::move(aOther));
    mType = Tuint8_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const int16_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_int16_t()) int16_t(aOther);
    mType = Tint16_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(int16_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_int16_t()) int16_t(std::move(aOther));
    mType = Tint16_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const uint16_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_uint16_t()) uint16_t(aOther);
    mType = Tuint16_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(uint16_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_uint16_t()) uint16_t(std::move(aOther));
    mType = Tuint16_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const int32_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(aOther);
    mType = Tint32_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(int32_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(std::move(aOther));
    mType = Tint32_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const uint32_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_uint32_t()) uint32_t(aOther);
    mType = Tuint32_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(uint32_t&& aOther)
{
    new (mozilla::KnownNotNull, ptr_uint32_t()) uint32_t(std::move(aOther));
    mType = Tuint32_t;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const float& aOther)
{
    new (mozilla::KnownNotNull, ptr_float()) float(aOther);
    mType = Tfloat;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(float&& aOther)
{
    new (mozilla::KnownNotNull, ptr_float()) float(std::move(aOther));
    mType = Tfloat;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const double& aOther)
{
    new (mozilla::KnownNotNull, ptr_double()) double(aOther);
    mType = Tdouble;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(double&& aOther)
{
    new (mozilla::KnownNotNull, ptr_double()) double(std::move(aOther));
    mType = Tdouble;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const nsID& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsID()) nsID(aOther);
    mType = TnsID;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(nsID&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsID()) nsID(std::move(aOther));
    mType = TnsID;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const nsString& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsString()) nsString(aOther);
    mType = TnsString;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(nsString&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsString()) nsString(std::move(aOther));
    mType = TnsString;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const nsCString& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(aOther);
    mType = TnsCString;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(nsCString&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move(aOther));
    mType = TnsCString;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(nsIURI* aOther)
{
    new (mozilla::KnownNotNull, ptr_nsIURI()) RefPtr<nsIURI>(aOther);
    mType = TnsIURI;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(RefPtr<nsIURI>&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsIURI()) RefPtr<nsIURI>(std::move(aOther));
    mType = TnsIURI;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(nsIPrincipal* aOther)
{
    new (mozilla::KnownNotNull, ptr_nsIPrincipal()) RefPtr<nsIPrincipal>(aOther);
    mType = TnsIPrincipal;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(RefPtr<nsIPrincipal>&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsIPrincipal()) RefPtr<nsIPrincipal>(std::move(aOther));
    mType = TnsIPrincipal;
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(const IPDLVariantValue& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool((aOther).get_bool());
            break;
        }
    case Tuint8_t:
        {
            new (mozilla::KnownNotNull, ptr_uint8_t()) uint8_t((aOther).get_uint8_t());
            break;
        }
    case Tint16_t:
        {
            new (mozilla::KnownNotNull, ptr_int16_t()) int16_t((aOther).get_int16_t());
            break;
        }
    case Tuint16_t:
        {
            new (mozilla::KnownNotNull, ptr_uint16_t()) uint16_t((aOther).get_uint16_t());
            break;
        }
    case Tint32_t:
        {
            new (mozilla::KnownNotNull, ptr_int32_t()) int32_t((aOther).get_int32_t());
            break;
        }
    case Tuint32_t:
        {
            new (mozilla::KnownNotNull, ptr_uint32_t()) uint32_t((aOther).get_uint32_t());
            break;
        }
    case Tfloat:
        {
            new (mozilla::KnownNotNull, ptr_float()) float((aOther).get_float());
            break;
        }
    case Tdouble:
        {
            new (mozilla::KnownNotNull, ptr_double()) double((aOther).get_double());
            break;
        }
    case TnsID:
        {
            new (mozilla::KnownNotNull, ptr_nsID()) nsID((aOther).get_nsID());
            break;
        }
    case TnsString:
        {
            new (mozilla::KnownNotNull, ptr_nsString()) nsString((aOther).get_nsString());
            break;
        }
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString((aOther).get_nsCString());
            break;
        }
    case TnsIURI:
        {
            new (mozilla::KnownNotNull, ptr_nsIURI()) RefPtr<nsIURI>((aOther).get_nsIURI());
            break;
        }
    case TnsIPrincipal:
        {
            new (mozilla::KnownNotNull, ptr_nsIPrincipal()) RefPtr<nsIPrincipal>((aOther).get_nsIPrincipal());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT IPDLVariantValue::IPDLVariantValue(IPDLVariantValue&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tbool:
        {
            new (mozilla::KnownNotNull, ptr_bool()) bool(std::move((aOther).get_bool()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tuint8_t:
        {
            new (mozilla::KnownNotNull, ptr_uint8_t()) uint8_t(std::move((aOther).get_uint8_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tint16_t:
        {
            new (mozilla::KnownNotNull, ptr_int16_t()) int16_t(std::move((aOther).get_int16_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tuint16_t:
        {
            new (mozilla::KnownNotNull, ptr_uint16_t()) uint16_t(std::move((aOther).get_uint16_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tint32_t:
        {
            new (mozilla::KnownNotNull, ptr_int32_t()) int32_t(std::move((aOther).get_int32_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tuint32_t:
        {
            new (mozilla::KnownNotNull, ptr_uint32_t()) uint32_t(std::move((aOther).get_uint32_t()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tfloat:
        {
            new (mozilla::KnownNotNull, ptr_float()) float(std::move((aOther).get_float()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case Tdouble:
        {
            new (mozilla::KnownNotNull, ptr_double()) double(std::move((aOther).get_double()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TnsID:
        {
            new (mozilla::KnownNotNull, ptr_nsID()) nsID(std::move((aOther).get_nsID()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TnsString:
        {
            new (mozilla::KnownNotNull, ptr_nsString()) nsString(std::move((aOther).get_nsString()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TnsCString:
        {
            new (mozilla::KnownNotNull, ptr_nsCString()) nsCString(std::move((aOther).get_nsCString()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TnsIURI:
        {
            new (mozilla::KnownNotNull, ptr_nsIURI()) RefPtr<nsIURI>(std::move((aOther).get_nsIURI()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TnsIPrincipal:
        {
            new (mozilla::KnownNotNull, ptr_nsIPrincipal()) RefPtr<nsIPrincipal>(std::move((aOther).get_nsIPrincipal()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

IPDLVariantValue::~IPDLVariantValue()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto IPDLVariantValue::operator=(const bool& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = aRhs;
    mType = Tbool;
    return (*(this));
}

auto IPDLVariantValue::operator=(bool&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tbool)) {
        new (mozilla::KnownNotNull, ptr_bool()) bool;
    }
    (*(ptr_bool())) = std::move(aRhs);
    mType = Tbool;
    return (*(this));
}

auto IPDLVariantValue::operator=(const uint8_t& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tuint8_t)) {
        new (mozilla::KnownNotNull, ptr_uint8_t()) uint8_t;
    }
    (*(ptr_uint8_t())) = aRhs;
    mType = Tuint8_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(uint8_t&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tuint8_t)) {
        new (mozilla::KnownNotNull, ptr_uint8_t()) uint8_t;
    }
    (*(ptr_uint8_t())) = std::move(aRhs);
    mType = Tuint8_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(const int16_t& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tint16_t)) {
        new (mozilla::KnownNotNull, ptr_int16_t()) int16_t;
    }
    (*(ptr_int16_t())) = aRhs;
    mType = Tint16_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(int16_t&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tint16_t)) {
        new (mozilla::KnownNotNull, ptr_int16_t()) int16_t;
    }
    (*(ptr_int16_t())) = std::move(aRhs);
    mType = Tint16_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(const uint16_t& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tuint16_t)) {
        new (mozilla::KnownNotNull, ptr_uint16_t()) uint16_t;
    }
    (*(ptr_uint16_t())) = aRhs;
    mType = Tuint16_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(uint16_t&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tuint16_t)) {
        new (mozilla::KnownNotNull, ptr_uint16_t()) uint16_t;
    }
    (*(ptr_uint16_t())) = std::move(aRhs);
    mType = Tuint16_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(const int32_t& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tint32_t)) {
        new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
    }
    (*(ptr_int32_t())) = aRhs;
    mType = Tint32_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(int32_t&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tint32_t)) {
        new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
    }
    (*(ptr_int32_t())) = std::move(aRhs);
    mType = Tint32_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(const uint32_t& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tuint32_t)) {
        new (mozilla::KnownNotNull, ptr_uint32_t()) uint32_t;
    }
    (*(ptr_uint32_t())) = aRhs;
    mType = Tuint32_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(uint32_t&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tuint32_t)) {
        new (mozilla::KnownNotNull, ptr_uint32_t()) uint32_t;
    }
    (*(ptr_uint32_t())) = std::move(aRhs);
    mType = Tuint32_t;
    return (*(this));
}

auto IPDLVariantValue::operator=(const float& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tfloat)) {
        new (mozilla::KnownNotNull, ptr_float()) float;
    }
    (*(ptr_float())) = aRhs;
    mType = Tfloat;
    return (*(this));
}

auto IPDLVariantValue::operator=(float&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tfloat)) {
        new (mozilla::KnownNotNull, ptr_float()) float;
    }
    (*(ptr_float())) = std::move(aRhs);
    mType = Tfloat;
    return (*(this));
}

auto IPDLVariantValue::operator=(const double& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tdouble)) {
        new (mozilla::KnownNotNull, ptr_double()) double;
    }
    (*(ptr_double())) = aRhs;
    mType = Tdouble;
    return (*(this));
}

auto IPDLVariantValue::operator=(double&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(Tdouble)) {
        new (mozilla::KnownNotNull, ptr_double()) double;
    }
    (*(ptr_double())) = std::move(aRhs);
    mType = Tdouble;
    return (*(this));
}

auto IPDLVariantValue::operator=(const nsID& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsID)) {
        new (mozilla::KnownNotNull, ptr_nsID()) nsID;
    }
    (*(ptr_nsID())) = aRhs;
    mType = TnsID;
    return (*(this));
}

auto IPDLVariantValue::operator=(nsID&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsID)) {
        new (mozilla::KnownNotNull, ptr_nsID()) nsID;
    }
    (*(ptr_nsID())) = std::move(aRhs);
    mType = TnsID;
    return (*(this));
}

auto IPDLVariantValue::operator=(const nsString& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsString)) {
        new (mozilla::KnownNotNull, ptr_nsString()) nsString;
    }
    (*(ptr_nsString())) = aRhs;
    mType = TnsString;
    return (*(this));
}

auto IPDLVariantValue::operator=(nsString&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsString)) {
        new (mozilla::KnownNotNull, ptr_nsString()) nsString;
    }
    (*(ptr_nsString())) = std::move(aRhs);
    mType = TnsString;
    return (*(this));
}

auto IPDLVariantValue::operator=(const nsCString& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = aRhs;
    mType = TnsCString;
    return (*(this));
}

auto IPDLVariantValue::operator=(nsCString&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsCString)) {
        new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
    }
    (*(ptr_nsCString())) = std::move(aRhs);
    mType = TnsCString;
    return (*(this));
}

auto IPDLVariantValue::operator=(nsIURI* aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsIURI)) {
        new (mozilla::KnownNotNull, ptr_nsIURI()) RefPtr<nsIURI>;
    }
    (*(ptr_nsIURI())) = aRhs;
    mType = TnsIURI;
    return (*(this));
}

auto IPDLVariantValue::operator=(RefPtr<nsIURI>&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsIURI)) {
        new (mozilla::KnownNotNull, ptr_nsIURI()) RefPtr<nsIURI>;
    }
    (*(ptr_nsIURI())) = std::move(aRhs);
    mType = TnsIURI;
    return (*(this));
}

auto IPDLVariantValue::operator=(nsIPrincipal* aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsIPrincipal)) {
        new (mozilla::KnownNotNull, ptr_nsIPrincipal()) RefPtr<nsIPrincipal>;
    }
    (*(ptr_nsIPrincipal())) = aRhs;
    mType = TnsIPrincipal;
    return (*(this));
}

auto IPDLVariantValue::operator=(RefPtr<nsIPrincipal>&& aRhs) -> IPDLVariantValue&
{
    if (MaybeDestroy(TnsIPrincipal)) {
        new (mozilla::KnownNotNull, ptr_nsIPrincipal()) RefPtr<nsIPrincipal>;
    }
    (*(ptr_nsIPrincipal())) = std::move(aRhs);
    mType = TnsIPrincipal;
    return (*(this));
}

auto IPDLVariantValue::operator=(const IPDLVariantValue& aRhs) -> IPDLVariantValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = (aRhs).get_bool();
            break;
        }
    case Tuint8_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uint8_t()) uint8_t;
            }
            (*(ptr_uint8_t())) = (aRhs).get_uint8_t();
            break;
        }
    case Tint16_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int16_t()) int16_t;
            }
            (*(ptr_int16_t())) = (aRhs).get_int16_t();
            break;
        }
    case Tuint16_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uint16_t()) uint16_t;
            }
            (*(ptr_uint16_t())) = (aRhs).get_uint16_t();
            break;
        }
    case Tint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
            }
            (*(ptr_int32_t())) = (aRhs).get_int32_t();
            break;
        }
    case Tuint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uint32_t()) uint32_t;
            }
            (*(ptr_uint32_t())) = (aRhs).get_uint32_t();
            break;
        }
    case Tfloat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_float()) float;
            }
            (*(ptr_float())) = (aRhs).get_float();
            break;
        }
    case Tdouble:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_double()) double;
            }
            (*(ptr_double())) = (aRhs).get_double();
            break;
        }
    case TnsID:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsID()) nsID;
            }
            (*(ptr_nsID())) = (aRhs).get_nsID();
            break;
        }
    case TnsString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsString()) nsString;
            }
            (*(ptr_nsString())) = (aRhs).get_nsString();
            break;
        }
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = (aRhs).get_nsCString();
            break;
        }
    case TnsIURI:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsIURI()) RefPtr<nsIURI>;
            }
            (*(ptr_nsIURI())) = (aRhs).get_nsIURI();
            break;
        }
    case TnsIPrincipal:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsIPrincipal()) RefPtr<nsIPrincipal>;
            }
            (*(ptr_nsIPrincipal())) = (aRhs).get_nsIPrincipal();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto IPDLVariantValue::operator=(IPDLVariantValue&& aRhs) -> IPDLVariantValue&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tbool:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_bool()) bool;
            }
            (*(ptr_bool())) = std::move((aRhs).get_bool());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tuint8_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uint8_t()) uint8_t;
            }
            (*(ptr_uint8_t())) = std::move((aRhs).get_uint8_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tint16_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int16_t()) int16_t;
            }
            (*(ptr_int16_t())) = std::move((aRhs).get_int16_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tuint16_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uint16_t()) uint16_t;
            }
            (*(ptr_uint16_t())) = std::move((aRhs).get_uint16_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_int32_t()) int32_t;
            }
            (*(ptr_int32_t())) = std::move((aRhs).get_int32_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tuint32_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_uint32_t()) uint32_t;
            }
            (*(ptr_uint32_t())) = std::move((aRhs).get_uint32_t());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tfloat:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_float()) float;
            }
            (*(ptr_float())) = std::move((aRhs).get_float());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case Tdouble:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_double()) double;
            }
            (*(ptr_double())) = std::move((aRhs).get_double());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TnsID:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsID()) nsID;
            }
            (*(ptr_nsID())) = std::move((aRhs).get_nsID());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TnsString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsString()) nsString;
            }
            (*(ptr_nsString())) = std::move((aRhs).get_nsString());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TnsCString:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsCString()) nsCString;
            }
            (*(ptr_nsCString())) = std::move((aRhs).get_nsCString());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TnsIURI:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsIURI()) RefPtr<nsIURI>;
            }
            (*(ptr_nsIURI())) = std::move((aRhs).get_nsIURI());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TnsIPrincipal:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsIPrincipal()) RefPtr<nsIPrincipal>;
            }
            (*(ptr_nsIPrincipal())) = std::move((aRhs).get_nsIPrincipal());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPDLVariantValue>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::IPDLVariantValue union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'IPDLVariantValue'
    (aMsg)->WriteSentinel(801310204);

    switch (type) {
    case union__::Tbool:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_bool());
            // Sentinel = 'Tbool'
            (aMsg)->WriteSentinel(96993793);
            return;
        }
    case union__::Tuint8_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_uint8_t());
            // Sentinel = 'Tuint8_t'
            (aMsg)->WriteSentinel(237044512);
            return;
        }
    case union__::Tint16_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_int16_t());
            // Sentinel = 'Tint16_t'
            (aMsg)->WriteSentinel(217514714);
            return;
        }
    case union__::Tuint16_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_uint16_t());
            // Sentinel = 'Tuint16_t'
            (aMsg)->WriteSentinel(284427087);
            return;
        }
    case union__::Tint32_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_int32_t());
            // Sentinel = 'Tint32_t'
            (aMsg)->WriteSentinel(217252568);
            return;
        }
    case union__::Tuint32_t:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_uint32_t());
            // Sentinel = 'Tuint32_t'
            (aMsg)->WriteSentinel(284164941);
            return;
        }
    case union__::Tfloat:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_float());
            // Sentinel = 'Tfloat'
            (aMsg)->WriteSentinel(137298539);
            return;
        }
    case union__::Tdouble:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_double());
            // Sentinel = 'Tdouble'
            (aMsg)->WriteSentinel(185402064);
            return;
        }
    case union__::TnsID:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsID());
            // Sentinel = 'TnsID'
            (aMsg)->WriteSentinel(93323715);
            return;
        }
    case union__::TnsString:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsString());
            // Sentinel = 'TnsString'
            (aMsg)->WriteSentinel(302908333);
            return;
        }
    case union__::TnsCString:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsCString());
            // Sentinel = 'TnsCString'
            (aMsg)->WriteSentinel(353960944);
            return;
        }
    case union__::TnsIURI:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsIURI());
            // Sentinel = 'TnsIURI'
            (aMsg)->WriteSentinel(171311727);
            return;
        }
    case union__::TnsIPrincipal:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsIPrincipal());
            // Sentinel = 'TnsIPrincipal'
            (aMsg)->WriteSentinel(589825313);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::IPDLVariantValue>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::IPDLVariantValue union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union IPDLVariantValue");
        return false;
    }
    // Sentinel = 'IPDLVariantValue'
    if ((!((aMsg)->ReadSentinel(aIter, 801310204)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union IPDLVariantValue");
        return false;
    }

    switch (type) {
    case union__::Tbool:
        {
            bool tmp = bool();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_bool())))))) {
                aActor->FatalError("Error deserializing variant Tbool of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'Tbool'
            if ((!((aMsg)->ReadSentinel(aIter, 96993793)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tbool of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::Tuint8_t:
        {
            uint8_t tmp = uint8_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_uint8_t())))))) {
                aActor->FatalError("Error deserializing variant Tuint8_t of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'Tuint8_t'
            if ((!((aMsg)->ReadSentinel(aIter, 237044512)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tuint8_t of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::Tint16_t:
        {
            int16_t tmp = int16_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_int16_t())))))) {
                aActor->FatalError("Error deserializing variant Tint16_t of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'Tint16_t'
            if ((!((aMsg)->ReadSentinel(aIter, 217514714)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tint16_t of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::Tuint16_t:
        {
            uint16_t tmp = uint16_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_uint16_t())))))) {
                aActor->FatalError("Error deserializing variant Tuint16_t of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'Tuint16_t'
            if ((!((aMsg)->ReadSentinel(aIter, 284427087)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tuint16_t of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::Tint32_t:
        {
            int32_t tmp = int32_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_int32_t())))))) {
                aActor->FatalError("Error deserializing variant Tint32_t of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'Tint32_t'
            if ((!((aMsg)->ReadSentinel(aIter, 217252568)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tint32_t of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::Tuint32_t:
        {
            uint32_t tmp = uint32_t();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_uint32_t())))))) {
                aActor->FatalError("Error deserializing variant Tuint32_t of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'Tuint32_t'
            if ((!((aMsg)->ReadSentinel(aIter, 284164941)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tuint32_t of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::Tfloat:
        {
            float tmp = float();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_float())))))) {
                aActor->FatalError("Error deserializing variant Tfloat of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'Tfloat'
            if ((!((aMsg)->ReadSentinel(aIter, 137298539)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tfloat of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::Tdouble:
        {
            double tmp = double();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_double())))))) {
                aActor->FatalError("Error deserializing variant Tdouble of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'Tdouble'
            if ((!((aMsg)->ReadSentinel(aIter, 185402064)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tdouble of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::TnsID:
        {
            nsID tmp = nsID();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsID())))))) {
                aActor->FatalError("Error deserializing variant TnsID of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'TnsID'
            if ((!((aMsg)->ReadSentinel(aIter, 93323715)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsID of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::TnsString:
        {
            nsString tmp = nsString();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsString())))))) {
                aActor->FatalError("Error deserializing variant TnsString of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'TnsString'
            if ((!((aMsg)->ReadSentinel(aIter, 302908333)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsString of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::TnsCString:
        {
            nsCString tmp = nsCString();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsCString())))))) {
                aActor->FatalError("Error deserializing variant TnsCString of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'TnsCString'
            if ((!((aMsg)->ReadSentinel(aIter, 353960944)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsCString of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::TnsIURI:
        {
            RefPtr<nsIURI> tmp = RefPtr<nsIURI>();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsIURI())))))) {
                aActor->FatalError("Error deserializing variant TnsIURI of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'TnsIURI'
            if ((!((aMsg)->ReadSentinel(aIter, 171311727)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsIURI of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    case union__::TnsIPrincipal:
        {
            RefPtr<nsIPrincipal> tmp = RefPtr<nsIPrincipal>();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsIPrincipal())))))) {
                aActor->FatalError("Error deserializing variant TnsIPrincipal of union IPDLVariantValue");
                return false;
            }
            // Sentinel = 'TnsIPrincipal'
            if ((!((aMsg)->ReadSentinel(aIter, 589825313)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TnsIPrincipal of union IPDLVariantValue");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IDPLVariant|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IDPLVariant>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).data());
    // Sentinel = 'data'
    (aMsg)->WriteSentinel(67109275);
    (aMsg)->WriteBytes((&((aVar).type())), 4);
    // Sentinel = 'type'
    (aMsg)->WriteSentinel(75760067);
}

auto IPDLParamTraits<mozilla::dom::IDPLVariant>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->data())))))) {
        aActor->FatalError("Error deserializing 'data' (IPDLVariantValue) member of 'IDPLVariant'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((aMsg)->ReadSentinel(aIter, 67109275)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'data' (IPDLVariantValue) member of 'IDPLVariant'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->type())), 4)))) {
        aActor->FatalError("Error bulk reading fields from uint32_t");
        return false;
    }
    // Sentinel = 'type'
    if ((!((aMsg)->ReadSentinel(aIter, 75760067)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint32_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct IPDLProperty|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::IPDLProperty>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).value());
    // Sentinel = 'value'
    (aMsg)->WriteSentinel(107610654);
}

auto IPDLParamTraits<mozilla::dom::IPDLProperty>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'IPDLProperty'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'IPDLProperty'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->value())))))) {
        aActor->FatalError("Error deserializing 'value' (nsIVariant) member of 'IPDLProperty'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((aMsg)->ReadSentinel(aIter, 107610654)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'value' (nsIVariant) member of 'IPDLProperty'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ParentShowInfo|
//
namespace mozilla {
namespace dom {
auto ParentShowInfo::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(ParentShowInfo, widgetRounding_) - offsetof(ParentShowInfo, dpi_)) == 4,
        "Bad assumptions about field layout!");
}

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::ParentShowInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
    WriteIPDLParam(aMsg, aActor, (aVar).fakeShowInfo());
    // Sentinel = 'fakeShowInfo'
    (aMsg)->WriteSentinel(515900613);
    WriteIPDLParam(aMsg, aActor, (aVar).isTransparent());
    // Sentinel = 'isTransparent'
    (aMsg)->WriteSentinel(631244143);
    (aMsg)->WriteBytes((&((aVar).defaultScale())), 8);
    // Sentinel = 'defaultScale'
    (aMsg)->WriteSentinel(525796558);
    (aMsg)->WriteBytes((&((aVar).dpi())), 8);
    // Sentinel = 'dpi | widgetRounding'
    (aMsg)->WriteSentinel(1322977220);
}

auto IPDLParamTraits<mozilla::dom::ParentShowInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'ParentShowInfo'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'ParentShowInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->fakeShowInfo())))))) {
        aActor->FatalError("Error deserializing 'fakeShowInfo' (bool) member of 'ParentShowInfo'");
        return false;
    }
    // Sentinel = 'fakeShowInfo'
    if ((!((aMsg)->ReadSentinel(aIter, 515900613)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'fakeShowInfo' (bool) member of 'ParentShowInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->isTransparent())))))) {
        aActor->FatalError("Error deserializing 'isTransparent' (bool) member of 'ParentShowInfo'");
        return false;
    }
    // Sentinel = 'isTransparent'
    if ((!((aMsg)->ReadSentinel(aIter, 631244143)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'isTransparent' (bool) member of 'ParentShowInfo'");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->defaultScale())), 8)))) {
        aActor->FatalError("Error bulk reading fields from double");
        return false;
    }
    // Sentinel = 'defaultScale'
    if ((!((aMsg)->ReadSentinel(aIter, 525796558)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from double");
        return false;
    }
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->dpi())), 8)))) {
        aActor->FatalError("Error bulk reading fields from float");
        return false;
    }
    // Sentinel = 'dpi | widgetRounding'
    if ((!((aMsg)->ReadSentinel(aIter, 1322977220)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from float");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct OwnerShowInfo|
//
namespace mozilla {
namespace dom {
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::OwnerShowInfo>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).size());
    // Sentinel = 'size'
    (aMsg)->WriteSentinel(73662908);
    WriteIPDLParam(aMsg, aActor, (aVar).scrollbarPreference());
    // Sentinel = 'scrollbarPreference'
    (aMsg)->WriteSentinel(1316030404);
    WriteIPDLParam(aMsg, aActor, (aVar).sizeMode());
    // Sentinel = 'sizeMode'
    (aMsg)->WriteSentinel(251790145);
}

auto IPDLParamTraits<mozilla::dom::OwnerShowInfo>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->size())))))) {
        aActor->FatalError("Error deserializing 'size' (ScreenIntSize) member of 'OwnerShowInfo'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((aMsg)->ReadSentinel(aIter, 73662908)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'size' (ScreenIntSize) member of 'OwnerShowInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->scrollbarPreference())))))) {
        aActor->FatalError("Error deserializing 'scrollbarPreference' (ScrollbarPreference) member of 'OwnerShowInfo'");
        return false;
    }
    // Sentinel = 'scrollbarPreference'
    if ((!((aMsg)->ReadSentinel(aIter, 1316030404)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'scrollbarPreference' (ScrollbarPreference) member of 'OwnerShowInfo'");
        return false;
    }
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->sizeMode())))))) {
        aActor->FatalError("Error deserializing 'sizeMode' (nsSizeMode) member of 'OwnerShowInfo'");
        return false;
    }
    // Sentinel = 'sizeMode'
    if ((!((aMsg)->ReadSentinel(aIter, 251790145)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'sizeMode' (nsSizeMode) member of 'OwnerShowInfo'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla
