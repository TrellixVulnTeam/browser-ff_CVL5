//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/quota/PQuotaParent.h"
#include "mozilla/dom/quota/PQuotaChild.h"
#include "mozilla/dom/quota/PQuotaRequest.h"
#include "mozilla/dom/quota/PQuotaRequestParent.h"
#include "mozilla/dom/quota/PQuotaRequestChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {
namespace quota {
namespace PQuotaRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::quota::PQuotaRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::quota::PQuotaRequestChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(
        mozilla::ipc::PrivateIPDLInterface(),
        aParentDestPid, aChildDestPid,
        aParent, aChild);
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Msg___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::NOT_REPLY));
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return IPC::Message::IPDLMessage(routingId, Reply___delete____ID, IPC::Message::HeaderFlags(IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, IPC::Message::NOT_CONSTRUCTOR, IPC::Message::ASYNC, IPC::Message::NOT_INTERRUPT, IPC::Message::REPLY));
}

} // namespace PQuotaRequest
} // namespace quota
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageNameResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::StorageNameResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).name());
    // Sentinel = 'name'
    (aMsg)->WriteSentinel(69075362);
}

auto IPDLParamTraits<mozilla::dom::quota::StorageNameResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->name())))))) {
        aActor->FatalError("Error deserializing 'name' (nsString) member of 'StorageNameResponse'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((aMsg)->ReadSentinel(aIter, 69075362)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'name' (nsString) member of 'StorageNameResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct StorageInitializedResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::StorageInitializedResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).initialized());
    // Sentinel = 'initialized'
    (aMsg)->WriteSentinel(464258199);
}

auto IPDLParamTraits<mozilla::dom::quota::StorageInitializedResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->initialized())))))) {
        aActor->FatalError("Error deserializing 'initialized' (bool) member of 'StorageInitializedResponse'");
        return false;
    }
    // Sentinel = 'initialized'
    if ((!((aMsg)->ReadSentinel(aIter, 464258199)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'initialized' (bool) member of 'StorageInitializedResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct TemporaryStorageInitializedResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::TemporaryStorageInitializedResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).initialized());
    // Sentinel = 'initialized'
    (aMsg)->WriteSentinel(464258199);
}

auto IPDLParamTraits<mozilla::dom::quota::TemporaryStorageInitializedResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->initialized())))))) {
        aActor->FatalError("Error deserializing 'initialized' (bool) member of 'TemporaryStorageInitializedResponse'");
        return false;
    }
    // Sentinel = 'initialized'
    if ((!((aMsg)->ReadSentinel(aIter, 464258199)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'initialized' (bool) member of 'TemporaryStorageInitializedResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InitResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::InitResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::InitResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InitTemporaryStorageResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::InitTemporaryStorageResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::InitTemporaryStorageResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InitializePersistentOriginResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::InitializePersistentOriginResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).created());
    // Sentinel = 'created'
    (aMsg)->WriteSentinel(191824601);
}

auto IPDLParamTraits<mozilla::dom::quota::InitializePersistentOriginResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->created())))))) {
        aActor->FatalError("Error deserializing 'created' (bool) member of 'InitializePersistentOriginResponse'");
        return false;
    }
    // Sentinel = 'created'
    if ((!((aMsg)->ReadSentinel(aIter, 191824601)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'created' (bool) member of 'InitializePersistentOriginResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct InitializeTemporaryOriginResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::InitializeTemporaryOriginResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).created());
    // Sentinel = 'created'
    (aMsg)->WriteSentinel(191824601);
}

auto IPDLParamTraits<mozilla::dom::quota::InitializeTemporaryOriginResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->created())))))) {
        aActor->FatalError("Error deserializing 'created' (bool) member of 'InitializeTemporaryOriginResponse'");
        return false;
    }
    // Sentinel = 'created'
    if ((!((aMsg)->ReadSentinel(aIter, 191824601)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'created' (bool) member of 'InitializeTemporaryOriginResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClearOriginResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ClearOriginResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::ClearOriginResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ResetOriginResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ResetOriginResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::ResetOriginResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClearDataResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ClearDataResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::ClearDataResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ClearAllResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ClearAllResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::ClearAllResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ResetAllResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ResetAllResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::ResetAllResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PersistedResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::PersistedResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).persisted());
    // Sentinel = 'persisted'
    (aMsg)->WriteSentinel(324273108);
}

auto IPDLParamTraits<mozilla::dom::quota::PersistedResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->persisted())))))) {
        aActor->FatalError("Error deserializing 'persisted' (bool) member of 'PersistedResponse'");
        return false;
    }
    // Sentinel = 'persisted'
    if ((!((aMsg)->ReadSentinel(aIter, 324273108)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'persisted' (bool) member of 'PersistedResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PersistResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::PersistResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
}

auto IPDLParamTraits<mozilla::dom::quota::PersistResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct EstimateResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
auto EstimateResponse::StaticAssertions() const -> void
{
    static_assert(
        (offsetof(EstimateResponse, limit_) - offsetof(EstimateResponse, usage_)) == 8,
        "Bad assumptions about field layout!");
}

} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::EstimateResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    (aMsg)->WriteBytes((&((aVar).usage())), 16);
    // Sentinel = 'usage | limit'
    (aMsg)->WriteSentinel(579929329);
}

auto IPDLParamTraits<mozilla::dom::quota::EstimateResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!((aMsg)->ReadBytesInto(aIter, (&((aVar)->usage())), 16)))) {
        aActor->FatalError("Error bulk reading fields from uint64_t");
        return false;
    }
    // Sentinel = 'usage | limit'
    if ((!((aMsg)->ReadSentinel(aIter, 579929329)))) {
        mozilla::ipc::SentinelReadError("Error bulk reading fields from uint64_t");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ListOriginsResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::ListOriginsResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    WriteIPDLParam(aMsg, aActor, (aVar).origins());
    // Sentinel = 'origins'
    (aMsg)->WriteSentinel(200213244);
}

auto IPDLParamTraits<mozilla::dom::quota::ListOriginsResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->origins())))))) {
        aActor->FatalError("Error deserializing 'origins' (nsCString[]) member of 'ListOriginsResponse'");
        return false;
    }
    // Sentinel = 'origins'
    if ((!((aMsg)->ReadSentinel(aIter, 200213244)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'origins' (nsCString[]) member of 'ListOriginsResponse'");
        return false;
    }
    return true;
}

} // namespace ipc
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union RequestResponse|
//
namespace mozilla {
namespace dom {
namespace quota {
auto RequestResponse::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tnsresult:
        {
            (ptr_nsresult())->~nsresult__tdef();
            break;
        }
    case TStorageNameResponse:
        {
            (ptr_StorageNameResponse())->~StorageNameResponse__tdef();
            break;
        }
    case TStorageInitializedResponse:
        {
            (ptr_StorageInitializedResponse())->~StorageInitializedResponse__tdef();
            break;
        }
    case TTemporaryStorageInitializedResponse:
        {
            (ptr_TemporaryStorageInitializedResponse())->~TemporaryStorageInitializedResponse__tdef();
            break;
        }
    case TInitResponse:
        {
            (ptr_InitResponse())->~InitResponse__tdef();
            break;
        }
    case TInitTemporaryStorageResponse:
        {
            (ptr_InitTemporaryStorageResponse())->~InitTemporaryStorageResponse__tdef();
            break;
        }
    case TInitializePersistentOriginResponse:
        {
            (ptr_InitializePersistentOriginResponse())->~InitializePersistentOriginResponse__tdef();
            break;
        }
    case TInitializeTemporaryOriginResponse:
        {
            (ptr_InitializeTemporaryOriginResponse())->~InitializeTemporaryOriginResponse__tdef();
            break;
        }
    case TClearOriginResponse:
        {
            (ptr_ClearOriginResponse())->~ClearOriginResponse__tdef();
            break;
        }
    case TResetOriginResponse:
        {
            (ptr_ResetOriginResponse())->~ResetOriginResponse__tdef();
            break;
        }
    case TClearDataResponse:
        {
            (ptr_ClearDataResponse())->~ClearDataResponse__tdef();
            break;
        }
    case TClearAllResponse:
        {
            (ptr_ClearAllResponse())->~ClearAllResponse__tdef();
            break;
        }
    case TResetAllResponse:
        {
            (ptr_ResetAllResponse())->~ResetAllResponse__tdef();
            break;
        }
    case TPersistedResponse:
        {
            (ptr_PersistedResponse())->~PersistedResponse__tdef();
            break;
        }
    case TPersistResponse:
        {
            (ptr_PersistResponse())->~PersistResponse__tdef();
            break;
        }
    case TEstimateResponse:
        {
            (ptr_EstimateResponse())->~EstimateResponse__tdef();
            break;
        }
    case TListOriginsResponse:
        {
            (ptr_ListOriginsResponse())->~ListOriginsResponse__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const nsresult& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(aOther);
    mType = Tnsresult;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(nsresult&& aOther)
{
    new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move(aOther));
    mType = Tnsresult;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const StorageNameResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageNameResponse()) StorageNameResponse(aOther);
    mType = TStorageNameResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(StorageNameResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageNameResponse()) StorageNameResponse(std::move(aOther));
    mType = TStorageNameResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const StorageInitializedResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageInitializedResponse()) StorageInitializedResponse(aOther);
    mType = TStorageInitializedResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(StorageInitializedResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_StorageInitializedResponse()) StorageInitializedResponse(std::move(aOther));
    mType = TStorageInitializedResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const TemporaryStorageInitializedResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedResponse()) TemporaryStorageInitializedResponse(aOther);
    mType = TTemporaryStorageInitializedResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(TemporaryStorageInitializedResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedResponse()) TemporaryStorageInitializedResponse(std::move(aOther));
    mType = TTemporaryStorageInitializedResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const InitResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitResponse()) InitResponse(aOther);
    mType = TInitResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(InitResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitResponse()) InitResponse(std::move(aOther));
    mType = TInitResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const InitTemporaryStorageResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitTemporaryStorageResponse()) InitTemporaryStorageResponse(aOther);
    mType = TInitTemporaryStorageResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(InitTemporaryStorageResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitTemporaryStorageResponse()) InitTemporaryStorageResponse(std::move(aOther));
    mType = TInitTemporaryStorageResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const InitializePersistentOriginResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitializePersistentOriginResponse()) InitializePersistentOriginResponse(aOther);
    mType = TInitializePersistentOriginResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(InitializePersistentOriginResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitializePersistentOriginResponse()) InitializePersistentOriginResponse(std::move(aOther));
    mType = TInitializePersistentOriginResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const InitializeTemporaryOriginResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginResponse()) InitializeTemporaryOriginResponse(aOther);
    mType = TInitializeTemporaryOriginResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(InitializeTemporaryOriginResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginResponse()) InitializeTemporaryOriginResponse(std::move(aOther));
    mType = TInitializeTemporaryOriginResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ClearOriginResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearOriginResponse()) ClearOriginResponse(aOther);
    mType = TClearOriginResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ClearOriginResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearOriginResponse()) ClearOriginResponse(std::move(aOther));
    mType = TClearOriginResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ResetOriginResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetOriginResponse()) ResetOriginResponse(aOther);
    mType = TResetOriginResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ResetOriginResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetOriginResponse()) ResetOriginResponse(std::move(aOther));
    mType = TResetOriginResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ClearDataResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearDataResponse()) ClearDataResponse(aOther);
    mType = TClearDataResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ClearDataResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearDataResponse()) ClearDataResponse(std::move(aOther));
    mType = TClearDataResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ClearAllResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearAllResponse()) ClearAllResponse(aOther);
    mType = TClearAllResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ClearAllResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ClearAllResponse()) ClearAllResponse(std::move(aOther));
    mType = TClearAllResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ResetAllResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetAllResponse()) ResetAllResponse(aOther);
    mType = TResetAllResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ResetAllResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ResetAllResponse()) ResetAllResponse(std::move(aOther));
    mType = TResetAllResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const PersistedResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_PersistedResponse()) PersistedResponse(aOther);
    mType = TPersistedResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(PersistedResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_PersistedResponse()) PersistedResponse(std::move(aOther));
    mType = TPersistedResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const PersistResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_PersistResponse()) PersistResponse(aOther);
    mType = TPersistResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(PersistResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_PersistResponse()) PersistResponse(std::move(aOther));
    mType = TPersistResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const EstimateResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_EstimateResponse()) EstimateResponse(aOther);
    mType = TEstimateResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(EstimateResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_EstimateResponse()) EstimateResponse(std::move(aOther));
    mType = TEstimateResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const ListOriginsResponse& aOther)
{
    new (mozilla::KnownNotNull, ptr_ListOriginsResponse()) ListOriginsResponse(aOther);
    mType = TListOriginsResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(ListOriginsResponse&& aOther)
{
    new (mozilla::KnownNotNull, ptr_ListOriginsResponse()) ListOriginsResponse(std::move(aOther));
    mType = TListOriginsResponse;
}

MOZ_IMPLICIT RequestResponse::RequestResponse(const RequestResponse& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult((aOther).get_nsresult());
            break;
        }
    case TStorageNameResponse:
        {
            new (mozilla::KnownNotNull, ptr_StorageNameResponse()) StorageNameResponse((aOther).get_StorageNameResponse());
            break;
        }
    case TStorageInitializedResponse:
        {
            new (mozilla::KnownNotNull, ptr_StorageInitializedResponse()) StorageInitializedResponse((aOther).get_StorageInitializedResponse());
            break;
        }
    case TTemporaryStorageInitializedResponse:
        {
            new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedResponse()) TemporaryStorageInitializedResponse((aOther).get_TemporaryStorageInitializedResponse());
            break;
        }
    case TInitResponse:
        {
            new (mozilla::KnownNotNull, ptr_InitResponse()) InitResponse((aOther).get_InitResponse());
            break;
        }
    case TInitTemporaryStorageResponse:
        {
            new (mozilla::KnownNotNull, ptr_InitTemporaryStorageResponse()) InitTemporaryStorageResponse((aOther).get_InitTemporaryStorageResponse());
            break;
        }
    case TInitializePersistentOriginResponse:
        {
            new (mozilla::KnownNotNull, ptr_InitializePersistentOriginResponse()) InitializePersistentOriginResponse((aOther).get_InitializePersistentOriginResponse());
            break;
        }
    case TInitializeTemporaryOriginResponse:
        {
            new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginResponse()) InitializeTemporaryOriginResponse((aOther).get_InitializeTemporaryOriginResponse());
            break;
        }
    case TClearOriginResponse:
        {
            new (mozilla::KnownNotNull, ptr_ClearOriginResponse()) ClearOriginResponse((aOther).get_ClearOriginResponse());
            break;
        }
    case TResetOriginResponse:
        {
            new (mozilla::KnownNotNull, ptr_ResetOriginResponse()) ResetOriginResponse((aOther).get_ResetOriginResponse());
            break;
        }
    case TClearDataResponse:
        {
            new (mozilla::KnownNotNull, ptr_ClearDataResponse()) ClearDataResponse((aOther).get_ClearDataResponse());
            break;
        }
    case TClearAllResponse:
        {
            new (mozilla::KnownNotNull, ptr_ClearAllResponse()) ClearAllResponse((aOther).get_ClearAllResponse());
            break;
        }
    case TResetAllResponse:
        {
            new (mozilla::KnownNotNull, ptr_ResetAllResponse()) ResetAllResponse((aOther).get_ResetAllResponse());
            break;
        }
    case TPersistedResponse:
        {
            new (mozilla::KnownNotNull, ptr_PersistedResponse()) PersistedResponse((aOther).get_PersistedResponse());
            break;
        }
    case TPersistResponse:
        {
            new (mozilla::KnownNotNull, ptr_PersistResponse()) PersistResponse((aOther).get_PersistResponse());
            break;
        }
    case TEstimateResponse:
        {
            new (mozilla::KnownNotNull, ptr_EstimateResponse()) EstimateResponse((aOther).get_EstimateResponse());
            break;
        }
    case TListOriginsResponse:
        {
            new (mozilla::KnownNotNull, ptr_ListOriginsResponse()) ListOriginsResponse((aOther).get_ListOriginsResponse());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MOZ_IMPLICIT RequestResponse::RequestResponse(RequestResponse&& aOther)
{
    (aOther).AssertSanity();
    Type t = (aOther).type();
    switch (t) {
    case Tnsresult:
        {
            new (mozilla::KnownNotNull, ptr_nsresult()) nsresult(std::move((aOther).get_nsresult()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageNameResponse:
        {
            new (mozilla::KnownNotNull, ptr_StorageNameResponse()) StorageNameResponse(std::move((aOther).get_StorageNameResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TStorageInitializedResponse:
        {
            new (mozilla::KnownNotNull, ptr_StorageInitializedResponse()) StorageInitializedResponse(std::move((aOther).get_StorageInitializedResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TTemporaryStorageInitializedResponse:
        {
            new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedResponse()) TemporaryStorageInitializedResponse(std::move((aOther).get_TemporaryStorageInitializedResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInitResponse:
        {
            new (mozilla::KnownNotNull, ptr_InitResponse()) InitResponse(std::move((aOther).get_InitResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInitTemporaryStorageResponse:
        {
            new (mozilla::KnownNotNull, ptr_InitTemporaryStorageResponse()) InitTemporaryStorageResponse(std::move((aOther).get_InitTemporaryStorageResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInitializePersistentOriginResponse:
        {
            new (mozilla::KnownNotNull, ptr_InitializePersistentOriginResponse()) InitializePersistentOriginResponse(std::move((aOther).get_InitializePersistentOriginResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TInitializeTemporaryOriginResponse:
        {
            new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginResponse()) InitializeTemporaryOriginResponse(std::move((aOther).get_InitializeTemporaryOriginResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClearOriginResponse:
        {
            new (mozilla::KnownNotNull, ptr_ClearOriginResponse()) ClearOriginResponse(std::move((aOther).get_ClearOriginResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TResetOriginResponse:
        {
            new (mozilla::KnownNotNull, ptr_ResetOriginResponse()) ResetOriginResponse(std::move((aOther).get_ResetOriginResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClearDataResponse:
        {
            new (mozilla::KnownNotNull, ptr_ClearDataResponse()) ClearDataResponse(std::move((aOther).get_ClearDataResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TClearAllResponse:
        {
            new (mozilla::KnownNotNull, ptr_ClearAllResponse()) ClearAllResponse(std::move((aOther).get_ClearAllResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TResetAllResponse:
        {
            new (mozilla::KnownNotNull, ptr_ResetAllResponse()) ResetAllResponse(std::move((aOther).get_ResetAllResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPersistedResponse:
        {
            new (mozilla::KnownNotNull, ptr_PersistedResponse()) PersistedResponse(std::move((aOther).get_PersistedResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TPersistResponse:
        {
            new (mozilla::KnownNotNull, ptr_PersistResponse()) PersistResponse(std::move((aOther).get_PersistResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TEstimateResponse:
        {
            new (mozilla::KnownNotNull, ptr_EstimateResponse()) EstimateResponse(std::move((aOther).get_EstimateResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case TListOriginsResponse:
        {
            new (mozilla::KnownNotNull, ptr_ListOriginsResponse()) ListOriginsResponse(std::move((aOther).get_ListOriginsResponse()));
            static_cast<void>((aOther).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    (aOther).mType = T__None;
    mType = t;
}

RequestResponse::~RequestResponse()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto RequestResponse::operator=(const nsresult& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = aRhs;
    mType = Tnsresult;
    return (*(this));
}

auto RequestResponse::operator=(nsresult&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(Tnsresult)) {
        new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
    }
    (*(ptr_nsresult())) = std::move(aRhs);
    mType = Tnsresult;
    return (*(this));
}

auto RequestResponse::operator=(const StorageNameResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TStorageNameResponse)) {
        new (mozilla::KnownNotNull, ptr_StorageNameResponse()) StorageNameResponse;
    }
    (*(ptr_StorageNameResponse())) = aRhs;
    mType = TStorageNameResponse;
    return (*(this));
}

auto RequestResponse::operator=(StorageNameResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TStorageNameResponse)) {
        new (mozilla::KnownNotNull, ptr_StorageNameResponse()) StorageNameResponse;
    }
    (*(ptr_StorageNameResponse())) = std::move(aRhs);
    mType = TStorageNameResponse;
    return (*(this));
}

auto RequestResponse::operator=(const StorageInitializedResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TStorageInitializedResponse)) {
        new (mozilla::KnownNotNull, ptr_StorageInitializedResponse()) StorageInitializedResponse;
    }
    (*(ptr_StorageInitializedResponse())) = aRhs;
    mType = TStorageInitializedResponse;
    return (*(this));
}

auto RequestResponse::operator=(StorageInitializedResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TStorageInitializedResponse)) {
        new (mozilla::KnownNotNull, ptr_StorageInitializedResponse()) StorageInitializedResponse;
    }
    (*(ptr_StorageInitializedResponse())) = std::move(aRhs);
    mType = TStorageInitializedResponse;
    return (*(this));
}

auto RequestResponse::operator=(const TemporaryStorageInitializedResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TTemporaryStorageInitializedResponse)) {
        new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedResponse()) TemporaryStorageInitializedResponse;
    }
    (*(ptr_TemporaryStorageInitializedResponse())) = aRhs;
    mType = TTemporaryStorageInitializedResponse;
    return (*(this));
}

auto RequestResponse::operator=(TemporaryStorageInitializedResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TTemporaryStorageInitializedResponse)) {
        new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedResponse()) TemporaryStorageInitializedResponse;
    }
    (*(ptr_TemporaryStorageInitializedResponse())) = std::move(aRhs);
    mType = TTemporaryStorageInitializedResponse;
    return (*(this));
}

auto RequestResponse::operator=(const InitResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TInitResponse)) {
        new (mozilla::KnownNotNull, ptr_InitResponse()) InitResponse;
    }
    (*(ptr_InitResponse())) = aRhs;
    mType = TInitResponse;
    return (*(this));
}

auto RequestResponse::operator=(InitResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TInitResponse)) {
        new (mozilla::KnownNotNull, ptr_InitResponse()) InitResponse;
    }
    (*(ptr_InitResponse())) = std::move(aRhs);
    mType = TInitResponse;
    return (*(this));
}

auto RequestResponse::operator=(const InitTemporaryStorageResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TInitTemporaryStorageResponse)) {
        new (mozilla::KnownNotNull, ptr_InitTemporaryStorageResponse()) InitTemporaryStorageResponse;
    }
    (*(ptr_InitTemporaryStorageResponse())) = aRhs;
    mType = TInitTemporaryStorageResponse;
    return (*(this));
}

auto RequestResponse::operator=(InitTemporaryStorageResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TInitTemporaryStorageResponse)) {
        new (mozilla::KnownNotNull, ptr_InitTemporaryStorageResponse()) InitTemporaryStorageResponse;
    }
    (*(ptr_InitTemporaryStorageResponse())) = std::move(aRhs);
    mType = TInitTemporaryStorageResponse;
    return (*(this));
}

auto RequestResponse::operator=(const InitializePersistentOriginResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TInitializePersistentOriginResponse)) {
        new (mozilla::KnownNotNull, ptr_InitializePersistentOriginResponse()) InitializePersistentOriginResponse;
    }
    (*(ptr_InitializePersistentOriginResponse())) = aRhs;
    mType = TInitializePersistentOriginResponse;
    return (*(this));
}

auto RequestResponse::operator=(InitializePersistentOriginResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TInitializePersistentOriginResponse)) {
        new (mozilla::KnownNotNull, ptr_InitializePersistentOriginResponse()) InitializePersistentOriginResponse;
    }
    (*(ptr_InitializePersistentOriginResponse())) = std::move(aRhs);
    mType = TInitializePersistentOriginResponse;
    return (*(this));
}

auto RequestResponse::operator=(const InitializeTemporaryOriginResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TInitializeTemporaryOriginResponse)) {
        new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginResponse()) InitializeTemporaryOriginResponse;
    }
    (*(ptr_InitializeTemporaryOriginResponse())) = aRhs;
    mType = TInitializeTemporaryOriginResponse;
    return (*(this));
}

auto RequestResponse::operator=(InitializeTemporaryOriginResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TInitializeTemporaryOriginResponse)) {
        new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginResponse()) InitializeTemporaryOriginResponse;
    }
    (*(ptr_InitializeTemporaryOriginResponse())) = std::move(aRhs);
    mType = TInitializeTemporaryOriginResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ClearOriginResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TClearOriginResponse)) {
        new (mozilla::KnownNotNull, ptr_ClearOriginResponse()) ClearOriginResponse;
    }
    (*(ptr_ClearOriginResponse())) = aRhs;
    mType = TClearOriginResponse;
    return (*(this));
}

auto RequestResponse::operator=(ClearOriginResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TClearOriginResponse)) {
        new (mozilla::KnownNotNull, ptr_ClearOriginResponse()) ClearOriginResponse;
    }
    (*(ptr_ClearOriginResponse())) = std::move(aRhs);
    mType = TClearOriginResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ResetOriginResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TResetOriginResponse)) {
        new (mozilla::KnownNotNull, ptr_ResetOriginResponse()) ResetOriginResponse;
    }
    (*(ptr_ResetOriginResponse())) = aRhs;
    mType = TResetOriginResponse;
    return (*(this));
}

auto RequestResponse::operator=(ResetOriginResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TResetOriginResponse)) {
        new (mozilla::KnownNotNull, ptr_ResetOriginResponse()) ResetOriginResponse;
    }
    (*(ptr_ResetOriginResponse())) = std::move(aRhs);
    mType = TResetOriginResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ClearDataResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TClearDataResponse)) {
        new (mozilla::KnownNotNull, ptr_ClearDataResponse()) ClearDataResponse;
    }
    (*(ptr_ClearDataResponse())) = aRhs;
    mType = TClearDataResponse;
    return (*(this));
}

auto RequestResponse::operator=(ClearDataResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TClearDataResponse)) {
        new (mozilla::KnownNotNull, ptr_ClearDataResponse()) ClearDataResponse;
    }
    (*(ptr_ClearDataResponse())) = std::move(aRhs);
    mType = TClearDataResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ClearAllResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TClearAllResponse)) {
        new (mozilla::KnownNotNull, ptr_ClearAllResponse()) ClearAllResponse;
    }
    (*(ptr_ClearAllResponse())) = aRhs;
    mType = TClearAllResponse;
    return (*(this));
}

auto RequestResponse::operator=(ClearAllResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TClearAllResponse)) {
        new (mozilla::KnownNotNull, ptr_ClearAllResponse()) ClearAllResponse;
    }
    (*(ptr_ClearAllResponse())) = std::move(aRhs);
    mType = TClearAllResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ResetAllResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TResetAllResponse)) {
        new (mozilla::KnownNotNull, ptr_ResetAllResponse()) ResetAllResponse;
    }
    (*(ptr_ResetAllResponse())) = aRhs;
    mType = TResetAllResponse;
    return (*(this));
}

auto RequestResponse::operator=(ResetAllResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TResetAllResponse)) {
        new (mozilla::KnownNotNull, ptr_ResetAllResponse()) ResetAllResponse;
    }
    (*(ptr_ResetAllResponse())) = std::move(aRhs);
    mType = TResetAllResponse;
    return (*(this));
}

auto RequestResponse::operator=(const PersistedResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TPersistedResponse)) {
        new (mozilla::KnownNotNull, ptr_PersistedResponse()) PersistedResponse;
    }
    (*(ptr_PersistedResponse())) = aRhs;
    mType = TPersistedResponse;
    return (*(this));
}

auto RequestResponse::operator=(PersistedResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TPersistedResponse)) {
        new (mozilla::KnownNotNull, ptr_PersistedResponse()) PersistedResponse;
    }
    (*(ptr_PersistedResponse())) = std::move(aRhs);
    mType = TPersistedResponse;
    return (*(this));
}

auto RequestResponse::operator=(const PersistResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TPersistResponse)) {
        new (mozilla::KnownNotNull, ptr_PersistResponse()) PersistResponse;
    }
    (*(ptr_PersistResponse())) = aRhs;
    mType = TPersistResponse;
    return (*(this));
}

auto RequestResponse::operator=(PersistResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TPersistResponse)) {
        new (mozilla::KnownNotNull, ptr_PersistResponse()) PersistResponse;
    }
    (*(ptr_PersistResponse())) = std::move(aRhs);
    mType = TPersistResponse;
    return (*(this));
}

auto RequestResponse::operator=(const EstimateResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TEstimateResponse)) {
        new (mozilla::KnownNotNull, ptr_EstimateResponse()) EstimateResponse;
    }
    (*(ptr_EstimateResponse())) = aRhs;
    mType = TEstimateResponse;
    return (*(this));
}

auto RequestResponse::operator=(EstimateResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TEstimateResponse)) {
        new (mozilla::KnownNotNull, ptr_EstimateResponse()) EstimateResponse;
    }
    (*(ptr_EstimateResponse())) = std::move(aRhs);
    mType = TEstimateResponse;
    return (*(this));
}

auto RequestResponse::operator=(const ListOriginsResponse& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TListOriginsResponse)) {
        new (mozilla::KnownNotNull, ptr_ListOriginsResponse()) ListOriginsResponse;
    }
    (*(ptr_ListOriginsResponse())) = aRhs;
    mType = TListOriginsResponse;
    return (*(this));
}

auto RequestResponse::operator=(ListOriginsResponse&& aRhs) -> RequestResponse&
{
    if (MaybeDestroy(TListOriginsResponse)) {
        new (mozilla::KnownNotNull, ptr_ListOriginsResponse()) ListOriginsResponse;
    }
    (*(ptr_ListOriginsResponse())) = std::move(aRhs);
    mType = TListOriginsResponse;
    return (*(this));
}

auto RequestResponse::operator=(const RequestResponse& aRhs) -> RequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = (aRhs).get_nsresult();
            break;
        }
    case TStorageNameResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageNameResponse()) StorageNameResponse;
            }
            (*(ptr_StorageNameResponse())) = (aRhs).get_StorageNameResponse();
            break;
        }
    case TStorageInitializedResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageInitializedResponse()) StorageInitializedResponse;
            }
            (*(ptr_StorageInitializedResponse())) = (aRhs).get_StorageInitializedResponse();
            break;
        }
    case TTemporaryStorageInitializedResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedResponse()) TemporaryStorageInitializedResponse;
            }
            (*(ptr_TemporaryStorageInitializedResponse())) = (aRhs).get_TemporaryStorageInitializedResponse();
            break;
        }
    case TInitResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitResponse()) InitResponse;
            }
            (*(ptr_InitResponse())) = (aRhs).get_InitResponse();
            break;
        }
    case TInitTemporaryStorageResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitTemporaryStorageResponse()) InitTemporaryStorageResponse;
            }
            (*(ptr_InitTemporaryStorageResponse())) = (aRhs).get_InitTemporaryStorageResponse();
            break;
        }
    case TInitializePersistentOriginResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitializePersistentOriginResponse()) InitializePersistentOriginResponse;
            }
            (*(ptr_InitializePersistentOriginResponse())) = (aRhs).get_InitializePersistentOriginResponse();
            break;
        }
    case TInitializeTemporaryOriginResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginResponse()) InitializeTemporaryOriginResponse;
            }
            (*(ptr_InitializeTemporaryOriginResponse())) = (aRhs).get_InitializeTemporaryOriginResponse();
            break;
        }
    case TClearOriginResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearOriginResponse()) ClearOriginResponse;
            }
            (*(ptr_ClearOriginResponse())) = (aRhs).get_ClearOriginResponse();
            break;
        }
    case TResetOriginResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetOriginResponse()) ResetOriginResponse;
            }
            (*(ptr_ResetOriginResponse())) = (aRhs).get_ResetOriginResponse();
            break;
        }
    case TClearDataResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearDataResponse()) ClearDataResponse;
            }
            (*(ptr_ClearDataResponse())) = (aRhs).get_ClearDataResponse();
            break;
        }
    case TClearAllResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearAllResponse()) ClearAllResponse;
            }
            (*(ptr_ClearAllResponse())) = (aRhs).get_ClearAllResponse();
            break;
        }
    case TResetAllResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetAllResponse()) ResetAllResponse;
            }
            (*(ptr_ResetAllResponse())) = (aRhs).get_ResetAllResponse();
            break;
        }
    case TPersistedResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PersistedResponse()) PersistedResponse;
            }
            (*(ptr_PersistedResponse())) = (aRhs).get_PersistedResponse();
            break;
        }
    case TPersistResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PersistResponse()) PersistResponse;
            }
            (*(ptr_PersistResponse())) = (aRhs).get_PersistResponse();
            break;
        }
    case TEstimateResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_EstimateResponse()) EstimateResponse;
            }
            (*(ptr_EstimateResponse())) = (aRhs).get_EstimateResponse();
            break;
        }
    case TListOriginsResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ListOriginsResponse()) ListOriginsResponse;
            }
            (*(ptr_ListOriginsResponse())) = (aRhs).get_ListOriginsResponse();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto RequestResponse::operator=(RequestResponse&& aRhs) -> RequestResponse&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tnsresult:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_nsresult()) nsresult;
            }
            (*(ptr_nsresult())) = std::move((aRhs).get_nsresult());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageNameResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageNameResponse()) StorageNameResponse;
            }
            (*(ptr_StorageNameResponse())) = std::move((aRhs).get_StorageNameResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TStorageInitializedResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_StorageInitializedResponse()) StorageInitializedResponse;
            }
            (*(ptr_StorageInitializedResponse())) = std::move((aRhs).get_StorageInitializedResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TTemporaryStorageInitializedResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_TemporaryStorageInitializedResponse()) TemporaryStorageInitializedResponse;
            }
            (*(ptr_TemporaryStorageInitializedResponse())) = std::move((aRhs).get_TemporaryStorageInitializedResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInitResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitResponse()) InitResponse;
            }
            (*(ptr_InitResponse())) = std::move((aRhs).get_InitResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInitTemporaryStorageResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitTemporaryStorageResponse()) InitTemporaryStorageResponse;
            }
            (*(ptr_InitTemporaryStorageResponse())) = std::move((aRhs).get_InitTemporaryStorageResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInitializePersistentOriginResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitializePersistentOriginResponse()) InitializePersistentOriginResponse;
            }
            (*(ptr_InitializePersistentOriginResponse())) = std::move((aRhs).get_InitializePersistentOriginResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TInitializeTemporaryOriginResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_InitializeTemporaryOriginResponse()) InitializeTemporaryOriginResponse;
            }
            (*(ptr_InitializeTemporaryOriginResponse())) = std::move((aRhs).get_InitializeTemporaryOriginResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClearOriginResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearOriginResponse()) ClearOriginResponse;
            }
            (*(ptr_ClearOriginResponse())) = std::move((aRhs).get_ClearOriginResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TResetOriginResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetOriginResponse()) ResetOriginResponse;
            }
            (*(ptr_ResetOriginResponse())) = std::move((aRhs).get_ResetOriginResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClearDataResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearDataResponse()) ClearDataResponse;
            }
            (*(ptr_ClearDataResponse())) = std::move((aRhs).get_ClearDataResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TClearAllResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ClearAllResponse()) ClearAllResponse;
            }
            (*(ptr_ClearAllResponse())) = std::move((aRhs).get_ClearAllResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TResetAllResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ResetAllResponse()) ResetAllResponse;
            }
            (*(ptr_ResetAllResponse())) = std::move((aRhs).get_ResetAllResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPersistedResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PersistedResponse()) PersistedResponse;
            }
            (*(ptr_PersistedResponse())) = std::move((aRhs).get_PersistedResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TPersistResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_PersistResponse()) PersistResponse;
            }
            (*(ptr_PersistResponse())) = std::move((aRhs).get_PersistResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TEstimateResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_EstimateResponse()) EstimateResponse;
            }
            (*(ptr_EstimateResponse())) = std::move((aRhs).get_EstimateResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case TListOriginsResponse:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_ListOriginsResponse()) ListOriginsResponse;
            }
            (*(ptr_ListOriginsResponse())) = std::move((aRhs).get_ListOriginsResponse());
            static_cast<void>((aRhs).MaybeDestroy(T__None));
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    (aRhs).mType = T__None;
    mType = t;
    return (*(this));
}

} // namespace quota
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::quota::RequestResponse>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    typedef mozilla::dom::quota::RequestResponse union__;
    int type = (aVar).type();
    WriteIPDLParam(aMsg, aActor, type);
    // Sentinel = 'RequestResponse'
    (aMsg)->WriteSentinel(822806073);

    switch (type) {
    case union__::Tnsresult:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_nsresult());
            // Sentinel = 'Tnsresult'
            (aMsg)->WriteSentinel(313394133);
            return;
        }
    case union__::TStorageNameResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageNameResponse());
            // Sentinel = 'TStorageNameResponse'
            (aMsg)->WriteSentinel(1376651258);
            return;
        }
    case union__::TStorageInitializedResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_StorageInitializedResponse());
            // Sentinel = 'TStorageInitializedResponse'
            (aMsg)->WriteSentinel(2525170415);
            return;
        }
    case union__::TTemporaryStorageInitializedResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_TemporaryStorageInitializedResponse());
            // Sentinel = 'TTemporaryStorageInitializedResponse'
            (aMsg)->WriteSentinel(226954930);
            return;
        }
    case union__::TInitResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InitResponse());
            // Sentinel = 'TInitResponse'
            (aMsg)->WriteSentinel(590021944);
            return;
        }
    case union__::TInitTemporaryStorageResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InitTemporaryStorageResponse());
            // Sentinel = 'TInitTemporaryStorageResponse'
            (aMsg)->WriteSentinel(2923432912);
            return;
        }
    case union__::TInitializePersistentOriginResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InitializePersistentOriginResponse());
            // Sentinel = 'TInitializePersistentOriginResponse'
            (aMsg)->WriteSentinel(4263579215);
            return;
        }
    case union__::TInitializeTemporaryOriginResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_InitializeTemporaryOriginResponse());
            // Sentinel = 'TInitializeTemporaryOriginResponse'
            (aMsg)->WriteSentinel(4017753569);
            return;
        }
    case union__::TClearOriginResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClearOriginResponse());
            // Sentinel = 'TClearOriginResponse'
            (aMsg)->WriteSentinel(1352337395);
            return;
        }
    case union__::TResetOriginResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ResetOriginResponse());
            // Sentinel = 'TResetOriginResponse'
            (aMsg)->WriteSentinel(1384515599);
            return;
        }
    case union__::TClearDataResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClearDataResponse());
            // Sentinel = 'TClearDataResponse'
            (aMsg)->WriteSentinel(1073874693);
            return;
        }
    case union__::TClearAllResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ClearAllResponse());
            // Sentinel = 'TClearAllResponse'
            (aMsg)->WriteSentinel(961087140);
            return;
        }
    case union__::TResetAllResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ResetAllResponse());
            // Sentinel = 'TResetAllResponse'
            (aMsg)->WriteSentinel(987760320);
            return;
        }
    case union__::TPersistedResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_PersistedResponse());
            // Sentinel = 'TPersistedResponse'
            (aMsg)->WriteSentinel(1145243479);
            return;
        }
    case union__::TPersistResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_PersistResponse());
            // Sentinel = 'TPersistResponse'
            (aMsg)->WriteSentinel(911148686);
            return;
        }
    case union__::TEstimateResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_EstimateResponse());
            // Sentinel = 'TEstimateResponse'
            (aMsg)->WriteSentinel(1010894560);
            return;
        }
    case union__::TListOriginsResponse:
        {
            WriteIPDLParam(aMsg, aActor, (aVar).get_ListOriginsResponse());
            // Sentinel = 'TListOriginsResponse'
            (aMsg)->WriteSentinel(1391659035);
            return;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return;
        }
    }
}

auto IPDLParamTraits<mozilla::dom::quota::RequestResponse>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    typedef mozilla::dom::quota::RequestResponse union__;
    int type = 0;
    if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&(type)))))) {
        aActor->FatalError("Error deserializing type of union RequestResponse");
        return false;
    }
    // Sentinel = 'RequestResponse'
    if ((!((aMsg)->ReadSentinel(aIter, 822806073)))) {
        mozilla::ipc::SentinelReadError("Error deserializing type of union RequestResponse");
        return false;
    }

    switch (type) {
    case union__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_nsresult())))))) {
                aActor->FatalError("Error deserializing variant Tnsresult of union RequestResponse");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((aMsg)->ReadSentinel(aIter, 313394133)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant Tnsresult of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TStorageNameResponse:
        {
            mozilla::dom::quota::StorageNameResponse tmp = mozilla::dom::quota::StorageNameResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageNameResponse())))))) {
                aActor->FatalError("Error deserializing variant TStorageNameResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TStorageNameResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1376651258)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageNameResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TStorageInitializedResponse:
        {
            mozilla::dom::quota::StorageInitializedResponse tmp = mozilla::dom::quota::StorageInitializedResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_StorageInitializedResponse())))))) {
                aActor->FatalError("Error deserializing variant TStorageInitializedResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TStorageInitializedResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2525170415)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TStorageInitializedResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TTemporaryStorageInitializedResponse:
        {
            mozilla::dom::quota::TemporaryStorageInitializedResponse tmp = mozilla::dom::quota::TemporaryStorageInitializedResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_TemporaryStorageInitializedResponse())))))) {
                aActor->FatalError("Error deserializing variant TTemporaryStorageInitializedResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TTemporaryStorageInitializedResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 226954930)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TTemporaryStorageInitializedResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TInitResponse:
        {
            mozilla::dom::quota::InitResponse tmp = mozilla::dom::quota::InitResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InitResponse())))))) {
                aActor->FatalError("Error deserializing variant TInitResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TInitResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 590021944)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInitResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TInitTemporaryStorageResponse:
        {
            mozilla::dom::quota::InitTemporaryStorageResponse tmp = mozilla::dom::quota::InitTemporaryStorageResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InitTemporaryStorageResponse())))))) {
                aActor->FatalError("Error deserializing variant TInitTemporaryStorageResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TInitTemporaryStorageResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 2923432912)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInitTemporaryStorageResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TInitializePersistentOriginResponse:
        {
            mozilla::dom::quota::InitializePersistentOriginResponse tmp = mozilla::dom::quota::InitializePersistentOriginResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InitializePersistentOriginResponse())))))) {
                aActor->FatalError("Error deserializing variant TInitializePersistentOriginResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TInitializePersistentOriginResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 4263579215)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInitializePersistentOriginResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TInitializeTemporaryOriginResponse:
        {
            mozilla::dom::quota::InitializeTemporaryOriginResponse tmp = mozilla::dom::quota::InitializeTemporaryOriginResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_InitializeTemporaryOriginResponse())))))) {
                aActor->FatalError("Error deserializing variant TInitializeTemporaryOriginResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TInitializeTemporaryOriginResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 4017753569)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TInitializeTemporaryOriginResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TClearOriginResponse:
        {
            mozilla::dom::quota::ClearOriginResponse tmp = mozilla::dom::quota::ClearOriginResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClearOriginResponse())))))) {
                aActor->FatalError("Error deserializing variant TClearOriginResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TClearOriginResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1352337395)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClearOriginResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TResetOriginResponse:
        {
            mozilla::dom::quota::ResetOriginResponse tmp = mozilla::dom::quota::ResetOriginResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ResetOriginResponse())))))) {
                aActor->FatalError("Error deserializing variant TResetOriginResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TResetOriginResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1384515599)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TResetOriginResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TClearDataResponse:
        {
            mozilla::dom::quota::ClearDataResponse tmp = mozilla::dom::quota::ClearDataResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClearDataResponse())))))) {
                aActor->FatalError("Error deserializing variant TClearDataResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TClearDataResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1073874693)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClearDataResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TClearAllResponse:
        {
            mozilla::dom::quota::ClearAllResponse tmp = mozilla::dom::quota::ClearAllResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ClearAllResponse())))))) {
                aActor->FatalError("Error deserializing variant TClearAllResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TClearAllResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 961087140)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TClearAllResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TResetAllResponse:
        {
            mozilla::dom::quota::ResetAllResponse tmp = mozilla::dom::quota::ResetAllResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ResetAllResponse())))))) {
                aActor->FatalError("Error deserializing variant TResetAllResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TResetAllResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 987760320)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TResetAllResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TPersistedResponse:
        {
            mozilla::dom::quota::PersistedResponse tmp = mozilla::dom::quota::PersistedResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PersistedResponse())))))) {
                aActor->FatalError("Error deserializing variant TPersistedResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TPersistedResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1145243479)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPersistedResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TPersistResponse:
        {
            mozilla::dom::quota::PersistResponse tmp = mozilla::dom::quota::PersistResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_PersistResponse())))))) {
                aActor->FatalError("Error deserializing variant TPersistResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TPersistResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 911148686)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TPersistResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TEstimateResponse:
        {
            mozilla::dom::quota::EstimateResponse tmp = mozilla::dom::quota::EstimateResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_EstimateResponse())))))) {
                aActor->FatalError("Error deserializing variant TEstimateResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TEstimateResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1010894560)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TEstimateResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    case union__::TListOriginsResponse:
        {
            mozilla::dom::quota::ListOriginsResponse tmp = mozilla::dom::quota::ListOriginsResponse();
            (*(aVar)) = std::move(tmp);
            if ((!(ReadIPDLParam(aMsg, aIter, aActor, (&((aVar)->get_ListOriginsResponse())))))) {
                aActor->FatalError("Error deserializing variant TListOriginsResponse of union RequestResponse");
                return false;
            }
            // Sentinel = 'TListOriginsResponse'
            if ((!((aMsg)->ReadSentinel(aIter, 1391659035)))) {
                mozilla::ipc::SentinelReadError("Error deserializing variant TListOriginsResponse of union RequestResponse");
                return false;
            }
            return true;
        }
    default:
        {
            aActor->FatalError("unknown union type");
            return false;
        }
    }
}

} // namespace ipc
} // namespace mozilla
