//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PWebSocketEventListenerParent.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/net/WebSocketEventListenerParent.h"
#include "mozilla/net/WebSocketFrame.h"

#include "mozilla/net/PNeckoParent.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PWebSocketEventListenerParent::PWebSocketEventListenerParent() :
    mozilla::ipc::IProtocol(PWebSocketEventListenerMsgStart, mozilla::ipc::ParentSide)
{
    MOZ_COUNT_CTOR(PWebSocketEventListenerParent);
}

PWebSocketEventListenerParent::~PWebSocketEventListenerParent()
{
    MOZ_COUNT_DTOR(PWebSocketEventListenerParent);
}

auto PWebSocketEventListenerParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PWebSocketEventListenerParent::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PWebSocketEventListenerParent::SendWebSocketCreated(
        const uint32_t& awebSocketSerialID,
        const nsString& aURI,
        const nsCString& aProtocols) -> bool
{
    IPC::Message* msg__ = PWebSocketEventListener::Msg_WebSocketCreated(Id());

    WriteIPDLParam(msg__, this, awebSocketSerialID);
    // Sentinel = 'awebSocketSerialID'
    (msg__)->WriteSentinel(1140524790);
    WriteIPDLParam(msg__, this, aURI);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(57934162);
    WriteIPDLParam(msg__, this, aProtocols);
    // Sentinel = 'aProtocols'
    (msg__)->WriteSentinel(373556263);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketEventListenerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_WebSocketCreated", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketEventListenerParent::SendWebSocketOpened(
        const uint32_t& awebSocketSerialID,
        const nsString& aEffectiveURI,
        const nsCString& aProtocols,
        const nsCString& aExtensions,
        const uint64_t& aHttpChannelId) -> bool
{
    IPC::Message* msg__ = PWebSocketEventListener::Msg_WebSocketOpened(Id());

    WriteIPDLParam(msg__, this, awebSocketSerialID);
    // Sentinel = 'awebSocketSerialID'
    (msg__)->WriteSentinel(1140524790);
    WriteIPDLParam(msg__, this, aEffectiveURI);
    // Sentinel = 'aEffectiveURI'
    (msg__)->WriteSentinel(581502179);
    WriteIPDLParam(msg__, this, aProtocols);
    // Sentinel = 'aProtocols'
    (msg__)->WriteSentinel(373556263);
    WriteIPDLParam(msg__, this, aExtensions);
    // Sentinel = 'aExtensions'
    (msg__)->WriteSentinel(446039186);
    WriteIPDLParam(msg__, this, aHttpChannelId);
    // Sentinel = 'aHttpChannelId'
    (msg__)->WriteSentinel(681182568);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketEventListenerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_WebSocketOpened", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketEventListenerParent::SendWebSocketMessageAvailable(
        const uint32_t& awebSocketSerialID,
        const nsCString& aData,
        const uint16_t& aMessageType) -> bool
{
    IPC::Message* msg__ = PWebSocketEventListener::Msg_WebSocketMessageAvailable(Id());

    WriteIPDLParam(msg__, this, awebSocketSerialID);
    // Sentinel = 'awebSocketSerialID'
    (msg__)->WriteSentinel(1140524790);
    WriteIPDLParam(msg__, this, aData);
    // Sentinel = 'aData'
    (msg__)->WriteSentinel(90571228);
    WriteIPDLParam(msg__, this, aMessageType);
    // Sentinel = 'aMessageType'
    (msg__)->WriteSentinel(512099529);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketEventListenerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_WebSocketMessageAvailable", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketEventListenerParent::SendWebSocketClosed(
        const uint32_t& awebSocketSerialID,
        const bool& aWasClean,
        const uint16_t& aCode,
        const nsString& aReason) -> bool
{
    IPC::Message* msg__ = PWebSocketEventListener::Msg_WebSocketClosed(Id());

    WriteIPDLParam(msg__, this, awebSocketSerialID);
    // Sentinel = 'awebSocketSerialID'
    (msg__)->WriteSentinel(1140524790);
    WriteIPDLParam(msg__, this, aWasClean);
    // Sentinel = 'aWasClean'
    (msg__)->WriteSentinel(283181936);
    WriteIPDLParam(msg__, this, aCode);
    // Sentinel = 'aCode'
    (msg__)->WriteSentinel(91226589);
    WriteIPDLParam(msg__, this, aReason);
    // Sentinel = 'aReason'
    (msg__)->WriteSentinel(180093642);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketEventListenerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_WebSocketClosed", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketEventListenerParent::SendFrameReceived(
        const uint32_t& aWebSocketSerialID,
        const WebSocketFrameData& aFrameData) -> bool
{
    IPC::Message* msg__ = PWebSocketEventListener::Msg_FrameReceived(Id());

    WriteIPDLParam(msg__, this, aWebSocketSerialID);
    // Sentinel = 'aWebSocketSerialID'
    (msg__)->WriteSentinel(1104873174);
    WriteIPDLParam(msg__, this, aFrameData);
    // Sentinel = 'aFrameData'
    (msg__)->WriteSentinel(344196039);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketEventListenerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_FrameReceived", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketEventListenerParent::SendFrameSent(
        const uint32_t& aWebSocketSerialID,
        const WebSocketFrameData& aFrameData) -> bool
{
    IPC::Message* msg__ = PWebSocketEventListener::Msg_FrameSent(Id());

    WriteIPDLParam(msg__, this, aWebSocketSerialID);
    // Sentinel = 'aWebSocketSerialID'
    (msg__)->WriteSentinel(1104873174);
    WriteIPDLParam(msg__, this, aFrameData);
    // Sentinel = 'aFrameData'
    (msg__)->WriteSentinel(344196039);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketEventListenerParent",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_FrameSent", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PWebSocketEventListenerParent::Send__delete__(PWebSocketEventListenerParent* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PWebSocketEventListener::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerParent")) {
        mozilla::ipc::LogMessageForProtocol(
            "PWebSocketEventListenerParent",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PWebSocketEventListenerMsgStart, actor);
    return sendok__;
}

auto PWebSocketEventListenerParent::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketEventListenerParent::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketEventListenerParent::OnMessageReceived(const Message& msg__) -> PWebSocketEventListenerParent::Result
{
    switch (msg__.type()) {
    case PWebSocketEventListener::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PWebSocketEventListener::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketEventListenerParent")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PWebSocketEventListenerParent",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PWebSocketEventListener::Msg_Close", OTHER);

            if ((!((static_cast<WebSocketEventListenerParent*>(this))->RecvClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PWebSocketEventListenerParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketEventListenerParent::Result
{
    return MsgNotKnown;
}

auto PWebSocketEventListenerParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketEventListenerParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebSocketEventListenerParent::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PWebSocketEventListenerParent*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PWebSocketEventListenerParent*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PWebSocketEventListener", PWebSocketEventListenerMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PWebSocketEventListenerParent*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
