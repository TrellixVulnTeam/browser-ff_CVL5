//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PGIOChannelChild.h"
#include "mozilla/ProfilerLabels.h"

#include "mozilla/net/PNeckoChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace net {


MOZ_IMPLICIT PGIOChannelChild::PGIOChannelChild() :
    mozilla::ipc::IProtocol(PGIOChannelMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PGIOChannelChild);
}

PGIOChannelChild::~PGIOChannelChild()
{
    MOZ_COUNT_DTOR(PGIOChannelChild);
}

auto PGIOChannelChild::Manager() const -> PNeckoChild*
{
    return static_cast<PNeckoChild*>(IProtocol::Manager());
}

auto PGIOChannelChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PGIOChannelChild::Send__delete__(PGIOChannelChild* actor) -> bool
{
    if (!actor || !actor->CanSend()) {
        NS_WARNING("Attempt to __delete__ missing or closed actor");
        return false;
    }
    IPC::Message* msg__ = PGIOChannel::Msg___delete__((actor)->Id());

    MOZ_RELEASE_ASSERT(actor, "NULL actor value passed to non-nullable param");
    WriteIPDLParam(msg__, actor, actor);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(102892058);



    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelChild",
            (actor)->OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg___delete__", OTHER);

    bool sendok__ = (actor)->ChannelSend(msg__);

    IProtocol* mgr = actor->Manager();
    actor->DestroySubtree(Deletion);
    actor->ClearSubtree();
    mgr->RemoveManagee(PGIOChannelMsgStart, actor);
    return sendok__;
}

auto PGIOChannelChild::SendCancel(const nsresult& status) -> bool
{
    IPC::Message* msg__ = PGIOChannel::Msg_Cancel(Id());

    WriteIPDLParam(msg__, this, status);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(154731173);




    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg_Cancel", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGIOChannelChild::SendSuspend() -> bool
{
    IPC::Message* msg__ = PGIOChannel::Msg_Suspend(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg_Suspend", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGIOChannelChild::SendResume() -> bool
{
    IPC::Message* msg__ = PGIOChannel::Msg_Resume(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PGIOChannelChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PGIOChannel::Msg_Resume", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PGIOChannelChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGIOChannelChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGIOChannelChild::OnMessageReceived(const Message& msg__) -> PGIOChannelChild::Result
{
    switch (msg__.type()) {
    case PGIOChannel::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PGIOChannel::Msg_OnStartRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg_OnStartRequest", OTHER);

            PickleIterator iter__{msg__};
            nsresult aChannelStatus{};
            int64_t aContentLength{};
            nsCString aContentType{};
            nsCString aEntityID{};
            URIParams aURI{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aChannelStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aChannelStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 679937439)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentLength)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'aContentLength'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 694158751)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aContentType)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aContentType'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 518522079)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aEntityID)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aEntityID'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 292684652)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(aURI)))))) {
                FatalError("Error deserializing 'URIParams'");
                return MsgValueError;
            }
            // Sentinel = 'aURI'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 57934162)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'URIParams'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnStartRequest(std::move(aChannelStatus), std::move(aContentLength), std::move(aContentType), std::move(aEntityID), std::move(aURI))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGIOChannel::Msg_OnDataAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg_OnDataAvailable", OTHER);

            PickleIterator iter__{msg__};
            nsresult channelStatus{};
            nsCString data{};
            uint64_t offset{};
            uint32_t count{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(channelStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'channelStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 618136926)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(data)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'data'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 67109275)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(offset)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'offset'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 147653256)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(count)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'count'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 106889770)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnDataAvailable(std::move(channelStatus), std::move(data), std::move(offset), std::move(count))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGIOChannel::Msg_OnStopRequest__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg_OnStopRequest", OTHER);

            PickleIterator iter__{msg__};
            nsresult channelStatus{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(channelStatus)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'channelStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 618136926)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOnStopRequest(std::move(channelStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGIOChannel::Msg_FailedAsyncOpen__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg_FailedAsyncOpen", OTHER);

            PickleIterator iter__{msg__};
            nsresult statusCode{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(statusCode)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'statusCode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 391316512)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvFailedAsyncOpen(std::move(statusCode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGIOChannel::Msg_DeleteSelf__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGIOChannelChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PGIOChannelChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PGIOChannel::Msg_DeleteSelf", OTHER);

            if ((!((this)->RecvDeleteSelf()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PGIOChannelChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGIOChannelChild::Result
{
    return MsgNotKnown;
}

auto PGIOChannelChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGIOChannelChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PGIOChannelChild::ClearSubtree() -> void
{
}



} // namespace net
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::net::PGIOChannelChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::net::PGIOChannelChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PGIOChannel", PGIOChannelMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::net::PGIOChannelChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
