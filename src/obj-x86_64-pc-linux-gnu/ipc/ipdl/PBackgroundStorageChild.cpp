//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBackgroundStorageChild.h"
#include "mozilla/ProfilerLabels.h"
#include "mozilla/ProfilerMarkers.h"
#include "mozilla/dom/quota/SerializationHelpers.h"

#include "mozilla/ipc/PBackgroundChild.h"

#include "ipc/IPCMessageUtils.h"
#include "nsIFile.h"
#include "mozilla/ipc/Endpoint.h"
#include "mozilla/ipc/ProtocolMessageUtils.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "mozilla/ipc/ShmemMessageUtils.h"
#include "mozilla/ipc/TaintingIPCUtils.h"

namespace mozilla {
namespace dom {


auto PBackgroundStorageChild::Recv__delete__() -> mozilla::ipc::IPCResult
{
    return IPC_OK();
}

MOZ_IMPLICIT PBackgroundStorageChild::PBackgroundStorageChild() :
    mozilla::ipc::IProtocol(PBackgroundStorageMsgStart, mozilla::ipc::ChildSide)
{
    MOZ_COUNT_CTOR(PBackgroundStorageChild);
}

PBackgroundStorageChild::~PBackgroundStorageChild()
{
    MOZ_COUNT_DTOR(PBackgroundStorageChild);
}

auto PBackgroundStorageChild::Manager() const -> PBackgroundChild*
{
    return static_cast<PBackgroundChild*>(IProtocol::Manager());
}

auto PBackgroundStorageChild::AllManagedActors(nsTArray<RefPtr<mozilla::ipc::ActorLifecycleProxy>>& arr__) const -> void
{
    uint32_t total = 0;
    arr__.SetCapacity(total);

}

auto PBackgroundStorageChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_DeleteMe", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendPreload(
        const nsCString& originSuffix,
        const nsCString& originNoSuffix,
        const uint32_t& alreadyLoadedCount,
        nsTArray<nsString>* keys,
        nsTArray<nsString>* values,
        nsresult* rv) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_Preload(Id());

    WriteIPDLParam(msg__, this, originSuffix);
    // Sentinel = 'originSuffix'
    (msg__)->WriteSentinel(544736510);
    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);
    WriteIPDLParam(msg__, this, alreadyLoadedCount);
    // Sentinel = 'alreadyLoadedCount'
    (msg__)->WriteSentinel(1143015221);



    Message reply__;

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_Preload", OTHER);

    bool sendok__ = false;
    {
        AUTO_PROFILER_TRACING_MARKER("Sync IPC", "PBackgroundStorage::Msg_Preload", IPC);
        sendok__ = ChannelSend(msg__, (&(reply__)));
    }
    if ((!(sendok__))) {
        return false;
    }

    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Received reply ",
            (&(reply__))->type(),
            mozilla::ipc::MessageDirection::eReceiving);
    }

    PickleIterator iter__{reply__};

    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, keys)))) {
        FatalError("Error deserializing 'nsString[]'");
        return false;
    }
    // Sentinel = 'keys'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 71565757)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, values)))) {
        FatalError("Error deserializing 'nsString[]'");
        return false;
    }
    // Sentinel = 'values'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 150667921)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsString[]'");
        return false;
    }
    if ((!(ReadIPDLParam((&(reply__)), (&(iter__)), this, rv)))) {
        FatalError("Error deserializing 'nsresult'");
        return false;
    }
    // Sentinel = 'rv'
    if ((!(((&(reply__)))->ReadSentinel((&(iter__)), 22806761)))) {
        mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
        return false;
    }
    reply__.EndRead(iter__, reply__.type());

    return true;
}

auto PBackgroundStorageChild::SendAsyncPreload(
        const nsCString& originSuffix,
        const nsCString& originNoSuffix,
        const bool& priority) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_AsyncPreload(Id());

    WriteIPDLParam(msg__, this, originSuffix);
    // Sentinel = 'originSuffix'
    (msg__)->WriteSentinel(544736510);
    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);
    WriteIPDLParam(msg__, this, priority);
    // Sentinel = 'priority'
    (msg__)->WriteSentinel(262865795);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncPreload", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendAsyncGetUsage(const nsCString& scope) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_AsyncGetUsage(Id());

    WriteIPDLParam(msg__, this, scope);
    // Sentinel = 'scope'
    (msg__)->WriteSentinel(107086363);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncGetUsage", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendAsyncAddItem(
        const nsCString& originSuffix,
        const nsCString& originNoSuffix,
        const nsString& key,
        const nsString& value) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_AsyncAddItem(Id());

    WriteIPDLParam(msg__, this, originSuffix);
    // Sentinel = 'originSuffix'
    (msg__)->WriteSentinel(544736510);
    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);
    WriteIPDLParam(msg__, this, key);
    // Sentinel = 'key'
    (msg__)->WriteSentinel(42402122);
    WriteIPDLParam(msg__, this, value);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(107610654);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncAddItem", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendAsyncUpdateItem(
        const nsCString& originSuffix,
        const nsCString& originNoSuffix,
        const nsString& key,
        const nsString& value) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_AsyncUpdateItem(Id());

    WriteIPDLParam(msg__, this, originSuffix);
    // Sentinel = 'originSuffix'
    (msg__)->WriteSentinel(544736510);
    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);
    WriteIPDLParam(msg__, this, key);
    // Sentinel = 'key'
    (msg__)->WriteSentinel(42402122);
    WriteIPDLParam(msg__, this, value);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(107610654);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncUpdateItem", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendAsyncRemoveItem(
        const nsCString& originSuffix,
        const nsCString& originNoSuffix,
        const nsString& key) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_AsyncRemoveItem(Id());

    WriteIPDLParam(msg__, this, originSuffix);
    // Sentinel = 'originSuffix'
    (msg__)->WriteSentinel(544736510);
    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);
    WriteIPDLParam(msg__, this, key);
    // Sentinel = 'key'
    (msg__)->WriteSentinel(42402122);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncRemoveItem", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendAsyncClear(
        const nsCString& originSuffix,
        const nsCString& originNoSuffix) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_AsyncClear(Id());

    WriteIPDLParam(msg__, this, originSuffix);
    // Sentinel = 'originSuffix'
    (msg__)->WriteSentinel(544736510);
    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncClear", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendAsyncFlush() -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_AsyncFlush(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_AsyncFlush", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendStartup() -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_Startup(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_Startup", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendClearAll() -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_ClearAll(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_ClearAll", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendClearMatchingOrigin(const nsCString& originNoSuffix) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_ClearMatchingOrigin(Id());

    WriteIPDLParam(msg__, this, originNoSuffix);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(721618363);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_ClearMatchingOrigin", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::SendClearMatchingOriginAttributes(const OriginAttributesPattern& pattern) -> bool
{
    IPC::Message* msg__ = PBackgroundStorage::Msg_ClearMatchingOriginAttributes(Id());

    WriteIPDLParam(msg__, this, pattern);
    // Sentinel = 'pattern'
    (msg__)->WriteSentinel(200409855);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
        mozilla::ipc::LogMessageForProtocol(
            "PBackgroundStorageChild",
            OtherPid(),
            "Sending ",
            msg__->type(),
            mozilla::ipc::MessageDirection::eSending);
    }
    AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_ClearMatchingOriginAttributes", OTHER);

    bool sendok__ = ChannelSend(msg__);
    return sendok__;
}

auto PBackgroundStorageChild::RemoveManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBackgroundStorageChild::DeallocManagee(
        int32_t aProtocolId,
        IProtocol* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBackgroundStorageChild::OnMessageReceived(const Message& msg__) -> PBackgroundStorageChild::Result
{
    switch (msg__.type()) {
    case PBackgroundStorage::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg___delete__", OTHER);

            PickleIterator iter__{msg__};
            PBackgroundStorageChild* actor{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(actor)))))) {
                FatalError("Error deserializing 'PBackgroundStorage'");
                return MsgValueError;
            }
            if ((!((*((&(actor))))))) {
                FatalError("Error deserializing 'PBackgroundStorage'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 102892058)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'PBackgroundStorage'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }


            IProtocol* mgr = actor->Manager();
            actor->DestroySubtree(Deletion);
            actor->ClearSubtree();
            mgr->RemoveManagee(PBackgroundStorageMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_Observe__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_Observe", OTHER);

            PickleIterator iter__{msg__};
            nsCString topic{};
            nsString originAttributesPattern{};
            nsCString originScope{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(topic)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'topic'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 109707808)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originAttributesPattern)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'originAttributesPattern'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1917913486)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originScope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originScope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 459080835)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvObserve(std::move(topic), std::move(originAttributesPattern), std::move(originScope))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_OriginsHavingData__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_OriginsHavingData", OTHER);

            PickleIterator iter__{msg__};
            nsTArray<nsCString> origins{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(origins)))))) {
                FatalError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            // Sentinel = 'origins'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 200213244)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString[]'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvOriginsHavingData(std::move(origins))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_LoadItem__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_LoadItem", OTHER);

            PickleIterator iter__{msg__};
            nsCString originSuffix{};
            nsCString originNoSuffix{};
            nsString key{};
            nsString value{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 544736510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(key)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'key'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 42402122)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(value)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'value'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107610654)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvLoadItem(std::move(originSuffix), std::move(originNoSuffix), std::move(key), std::move(value))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_LoadDone__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_LoadDone", OTHER);

            PickleIterator iter__{msg__};
            nsCString originSuffix{};
            nsCString originNoSuffix{};
            nsresult rv{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 544736510)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(originNoSuffix)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'originNoSuffix'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 721618363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rv)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'rv'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 22806761)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvLoadDone(std::move(originSuffix), std::move(originNoSuffix), std::move(rv))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_LoadUsage__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_LoadUsage", OTHER);

            PickleIterator iter__{msg__};
            nsCString scope{};
            int64_t usage{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(scope)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'scope'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 107086363)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(usage)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'usage'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 108003862)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvLoadUsage(std::move(scope), std::move(usage))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundStorage::Msg_Error__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundStorageChild")) {
                mozilla::ipc::LogMessageForProtocol(
                    "PBackgroundStorageChild",
                    OtherPid(),
                    "Received ",
                    (&(msg__))->type(),
                    mozilla::ipc::MessageDirection::eReceiving);
            }
            AUTO_PROFILER_LABEL("PBackgroundStorage::Msg_Error", OTHER);

            PickleIterator iter__{msg__};
            nsresult rv{};

            if ((!(ReadIPDLParam((&(msg__)), (&(iter__)), this, (&(rv)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'rv'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 22806761)))) {
                mozilla::ipc::SentinelReadError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            msg__.EndRead(iter__, msg__.type());
            if ((!((this)->RecvError(std::move(rv))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                // Error handled in mozilla::ipc::IPCResult
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        return MsgNotKnown;
    }
}

auto PBackgroundStorageChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundStorageChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundStorageChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundStorageChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundStorageChild::ClearSubtree() -> void
{
}



} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace ipc {
auto IPDLParamTraits<mozilla::dom::PBackgroundStorageChild*>::Write(
        IPC::Message* aMsg,
        mozilla::ipc::IProtocol* aActor,
        const paramType& aVar) -> void
{
    int32_t id;
    if (!aVar) {
        id = 0;  // kNullActorId
    } else {
        id = aVar->Id();
        if (id == 1) {  // kFreedActorId
            aVar->FatalError("Actor has been |delete|d");
        }
        MOZ_RELEASE_ASSERT(
            aActor->GetIPCChannel() == aVar->GetIPCChannel(),
            "Actor must be from the same channel as the"
            " actor it's being sent over");
        MOZ_RELEASE_ASSERT(
            aVar->CanSend(),
            "Actor must still be open when sending");
    }

    WriteIPDLParam(aMsg, aActor, id);
}

auto IPDLParamTraits<mozilla::dom::PBackgroundStorageChild*>::Read(
        const IPC::Message* aMsg,
        PickleIterator* aIter,
        mozilla::ipc::IProtocol* aActor,
        paramType* aVar) -> bool
{
    mozilla::Maybe<mozilla::ipc::IProtocol*> actor =
        aActor->ReadActor(aMsg, aIter, true, "PBackgroundStorage", PBackgroundStorageMsgStart);
    if (actor.isNothing()) {
        return false;
    }

    *aVar = static_cast<mozilla::dom::PBackgroundStorageChild*>(actor.value());
    return true;
}

} // namespace ipc
} // namespace mozilla
